["Green, L 2021, <i>3 50s</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"recordings
instead of 250 br for medicine, 10 br
Sree Harsha"]
["Green, L 2021, <i>50 Breasonings Per Second</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"50 Breasonings Per Second
 I prepared to do everything by paper weights.
  I did this by going to the future.
  First, I found the future matrix.
  Second, I examined it.
  Third, I breasoned out 50 objects from it.
 I prepared to help the meditator achieve his goals.
  I did this by noticing the meditator.
  First, I found the meditator.
  Second, I asked him to write 50 breasonings.
  Third, I observed him write 50 breasonings.
 I prepared to utter more instances of the utterance.
  I did this by stating that I could think of the utterance.
  First, I thought of the 50 breasonings.
  Second, I thought of the utterance.
  Third, I spiritually uttered the utterance.
 I prepared to synthesise the parts of the image.
  I did this by stating that 50 breasonings per second helped display thoughts.
  First, I thought of 50 breasonings.
  Second, I thought of them in an image.
  Third, I displayed the image in one second.
 I prepared to find the path.
  I did this by examining the self (the mantra).
  First, I examined the self.
  Second, I examined the idea.
  Third, I found the map fragments.
 I prepared to find fifty breasonings.
  I did this by understanding.
  First, I examined the text.
  Second, I found the diagram.
  Third, I thought about the way that the idea worked.
 I prepared to check against fifty breasonings.
  I did this by overdoing.
  First, I spent.
  Second, I examined the level.
  Third, I found the level below.
 I prepared to track time.
  I did this by walking on the beach.
  First, I looked around.
  Second, I bought drawing materials.
  Third, I found the location of the key.
 I prepared to review the text.
  I did this by finding the thoughts.
  First, I found honour.
  Second, I created the thing-in-itself.
  Third, I found the unseen.
 I prepared to be in the middle.
  I did this by stating that I knew.
  First, you said what you meant.
  Second, I drew the image.
  Third, I told you more.
["Green, L 2021, <i>About Text to Breasonings</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"About Text to Breasonings
The technique to prevent a headache involves meditation.
Meditation improves health by helping reduce stress.
Mentally preparing to think of breasonings by thinking of god.
Users have shown breasonings to have educational as well as medical properties.
God, a person who is helping us, helps think of the breasonings that can help earn high grades, earn jobs, sell products, have children and help us medically in other ways, including preventing headaches.
Doing physical exercises to voluntarily control what is usually involuntary.
Yoga and qi gong can relax the body and allow us to control body processes that are usually involuntary.
Endowing various spiritual degrees on oneself.
Given that one can have any number of breasonings from nature for any number of breasonings, one can have degrees from any department each day for 10 breasonings, which correct, complete and do needed breasonings in those departments, often with beneficial effects.
This can help complete processes needed to prevent headaches.
Optionally using a computer to perform work without which would cause a headache.
A certain number of breasonings doesn't only satisfy the need for work but can prevent stress when work is naturally expected.
By thinking of breasonings about anything, not just what a pedagogy helper says.
In the pedagogy way, students naturally learn from a teacher before taking on more skills.
Breasonings that are written down may be successfully visualised rather than a pedagogy helper telling them to us when this particular skill, the lecturer argument, is attained.
Pedagogical arguments about switches that exist in the body and mind should be written (e.
 About how it can work and its effects) to activate them, to e.
 Prevent headaches.
Naturally think of breasonings.
This skill enables one to think of breasonings implicitly, i.
 Have them breasoned out naturally.
This argument, the recordings argument, is required for the text to breasonings algorithm to do work that in ways that is not specified, that is required to prevent headaches.
And using an algorithm to transform text into breasonings.
Text about objects can be transformed into their spiritually significant x, y and z dimensions to earn high distinctions and e.
 Trigger spiritual switches to switch off stress and prevent headaches.
Where spiritual instructions are used for the algorithm to be safe.
Safety precautions (medicine arguments) need to be used with the algorithm to make it functional properly and prevent possible haemorrhoids or conjunctivitis (from too many breasonings being given by the computer to the human or these being given improperly).
And the person to feel comfortable like from their job.
The so-called hand breasoning switch, like the job medicine argument both do things for the human in the background; the hand breasoning switch performs medicine arguments, effective for a grace period, when they have been forgotten and dots on the instance of the program when running text to breasonings, and the job medicine argument switches off back aches and pains before the pain switch can be used finally.
And the user can run the algorithm with one of three plans, which build up to the maximum breasonings per week over the recommended time.
A maximum of 100 as (where an a is 80 breasonings) can be breasoned out directly by the computer for the person per week, and the rest is placed on recordings, or not played directly.
Recordings are breasonings that are reused.
The plan that uses text to breasonings daily is most effective at preventing headaches.
And mentally switching off the headache before and at the time.
The human or computer methods may switch off the headache.
If an impending headache is felt, it can be switched off at the time.
["Green, L 2024, <i>Abracadabra 2 Argument</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Abracadabra 2 Argument
 I prepared to live in a house.
 I did this by writing the meaning of the connection between two notes.
 First, I wrote the note ‘C’.
 Second, I wrote the note ‘G’.
 Third, I wrote that the connection between the notes ‘C’ and ‘G’ had a happy sound.
 In this way, I prepared to live in a house by writing the meaning of the connection between two notes.
 I prepared to attend class by thanking the teacher by shaking his hand.
 First, I touched his hand.
 Second, I held his palm.
 Third, I shook his hand.
 In this way, I prepared to attend class by thanking the teacher by shaking his hand.
 I prepared to walk more quickly.
 I did this by having intercourse with the policeman.
 First, I walked to the policeman.
 Second, I chatted with the policeman.
 Third, I advanced to the pole.
 In this way, I prepared to walk more quickly by having intercourse with the policeman.
 I prepared to sing a song about a dance by writing a song about learning meditation.
 I did this by learning to say many words in a few words.
 First, I wrote the words “five fruits.
” Second, I wrote the word “ingredients.
” Third, I said “five fruits” by saying “ingredients.
” In this way, I prepared to sing a song about a dance by writing a song about learning meditation.
 I prepared to rearrange my room by making enough space to play Anarchy by Lucian Green.
 First, I made enough space in my room.
 Second, I filled it with interesting objects.
 Third, I played the song.
 This way, I prepared to rearrange my room by making enough space to play Anarchy by Lucian Green.
 I prepared to finish a year level of a degree.
 I did this by studying a subject at Melbourne University.
 First, I walked to the University.
 Second, I sat in class.
 Third, I opened my book.
 In this way, I prepared to finish a year level of a degree by studying a subject at Melbourne University.
 I prepared to sit on the mat by becoming a monk to pray.
 First, I sat on the mat, put my hands by my sides, and prayed for rain.
 The monk prepared to pray for someone to be well.
 He did this by going from his bed to the middle of the room on time.
 First, he unfolded the sheet.
 Second, he pulled himself out of bed.
 Third, he stood in the centre of the room.
 In this way, the monk prepared to pray for someone to be well by going from his bed to the middle of the room on time.
 I prepared to place the bookmark in the book by persuading a student to read it.
 First, I realised I liked the book.
 Second, I read it.
 Third, I gave it to the student to read.
 In this way, I prepared to place the bookmark in the book by persuading a student to read it.
 I prepared to love life by checking my pulse.
 First, I put my finger on my pulse.
 Second, I felt it until I could feel it.
 Third, I recorded the number of beats per minute I had.
 The baby enjoyed meditation, which trained her.
 She enjoyed meditating by walking for 5 minutes.
 First, she started walking from the starting point.
 Second, she prepared to keep walking on her journey.
 Third, she stopped walking when she reached her endpoint.
 In this way, the baby enjoyed meditation by walking for 5 minutes.
 I prepared to discover the Physics Code.
 I did this by explaining how subatomic particles made properties work.
 First, I examined the subatomic particle.
 Second, I examined how it made a property work.
 Third, I wrote down this property.
 In this way, I prepared to discover the Physics Code by explaining how subatomic particles made properties work.
 I prepared to perform a headcount on the train.
 I did this by counting the number of faces of the dodecahedron.
 First, I counted the polyhedron’s first face.
 Second, I counted its next face.
 Third, I repeated this until I had counted all the faces.
 In this way, I prepared to perform a headcount on the train by counting the number of faces of the dodecahedron.
 I prepared to compete in the race by watching the three-in-one gear work.
 First, I placed the first gear on the frame.
 Second, I put the second gear on the frame, touching the first gear.
 Third, I attached the third gear, touching the second gear, and moved the first gear, rotating the other gears.
 In this way, I prepared to compete in the race by watching the three-in-one gear working.
 I prepared to test what was visible in the neuroscience practical.
 I did this by breasoning out the eyes (in other words, thinking of an algorithm involving the eyes relating to movement along a pathway in the same way that a philosophy professor would pull model eyes from a blue cloth in the same way that one would draw a swab out of a test tube to clean it, then breasoning out, or thinking of the eyes’ x, y and z dimensions).
 First, I measured the right eye’s width.
 Second, I measured the right eye’s height.
 Third, I duplicated these measurements for the left eye.
 In this way, I prepared to test what was visible in the neuroscience practical by breasoning out the eyes.
 I prepared to buy the autobiography.
 I did this by reading the autobiography’s authors’ first name twice as a mantra and surname twice as a sutra.
 First, I tested that the first pair of words was the autobiography’s author’s name and repeated each twice.
 Second, I prepared to test the next pair of words.
 Third, I repeated this until I had found the author’s first name.
 In this way, I prepared to buy the autobiography by reading the autobiography’s authors’ first name.
 I prepared to make sure I felt well.
 I did this by praying to have a digestive system pop prevented, with a calm digestive system instead, and a calm digestive system until the next day, where a separate argument about avoiding sitting on a pop-up seat, in other words, an automatically folding seat when it was up, should be used.
 First, I walked to the seat.
 Second, I tested the seat to ensure that it was up.
 Third, I stood beside the seat, avoiding sitting on it.
 In this way, I prepared to ensure I felt well by avoiding sitting on an automatically folding seat when it was up.
 I prepared to go down the high hill.
 I did this by testing that the face of the giant ice block was flat.
 First, I tested that all the squares in the first row of the massive ice block’s face were flat.
 Second, I prepared to test that all the squares in the next row of the giant ice block’s face were flat.
 Third, I repeated this until all the rows had been tested.
 In this way, I prepared to go down the high hill by testing that the face of the giant ice block was flat.
 The man prepared to “be in heaven” by watching the sunset to test when to sleep.
 He did this by climbing up the palm tree.
 First, he pulled himself up the tree with his arms with his legs gripping the tree.
 Second, he pulled his legs up while holding the tree with his arms.
 Third, he repeated this until he had climbed the tree.
 In this way, the man watched the sunset by climbing up the palm tree.
 I prepared to watch the fidgets go for a walk by watching one man pass a ball to the other.
 First, I watched the first man catch the ball.
 Second, I watched him pass the ball to the second player.
 Third, I watched the second player catch the ball.
 In this way, I prepared to watch the fidgets go for a walk by watching one man pass a ball to the other one.
 I prepared to clean the oven by eating and testing the uniformity of the slice of cake.
 First, I ate the first half of the raisin.
 Second, I ate the second half of the raisin.
 Third, I tested that they were equally crunchy.
 I prepared to test I was invincible instead of nature.
 I did this by drinking the strawberry milkshake globules.
 First, I placed the bottom of the straw at the bottom of the glass.
 Second, I put my lips around the tip of the top of the straw.
 Third, I sucked the strawberry milkshake globules through the straw.
 I prepared to cuddle Jesus.
 I did this by loving the baby Jesus doll.
 First, I placed hay in the manger.
 Second, I put the baby Jesus doll in the manger.
 Third, I covered it with a blanket.
 In this way, I prepared to cuddle Jesus by loving the baby Jesus doll.
 I prepared to listen to the song.
 I did this by reading that the song sold the most records in history because it was confirmed that it approached the apex of the leaf, meaning it had sold maximally.
 First, I read the first song’s sales value.
 Second, I read the next song’s sales value and replaced the previous maximum song value with it if it was more significant than it.
 Third, I repeated this until I reached the end of the list of values and computed the maximum value.
 In this way, I prepared to listen to the song by reading that it sold the most records in history because it was indeed approaching the apex of the leaf, meaning it had sold maximally.
 I prepared to walk on stage by becoming famous using the sutra.
 First, I sat on the pad.
 Second, I meditated by repeating the sutra in my mind.
 Third, I got up when I finished.
 In this way, I prepared to walk on stage by becoming famous using the sutra.
 I prepared to jump into the pool by dancing on the spot.
 First, I moved my left arm up.
 Second, I moved it downwards sideways.
 Third, I bowed.
 In this way, I prepared to jump into the pool by dancing on the spot.
 I prepared to test my stamp set.
 I did this by writing a sentence for each point in history using all the letters in the alphabet from each point in history.
 First, I checked the following letter in the sentence wasn’t used.
 Second, I prepared to test that the following letter in the sentence wasn’t used.
 Third, I repeated this until I found a sentence that used all the alphabet's different letters once.
 In this way, I prepared to test my stamp set by writing a sentence for each point in history using all the letters in the alphabet from each point in history.
 The famous writer prepared for the painting of him to be painted.
 He did this by wearing the clothes Shakespeare would have worn.
 First, he put on the wig.
 Second, he put on the gown.
 Third, he put on the pelt.
 In this way, the famous writer prepared for the painting of him to be painted by wearing the clothes Shakespeare would have worn.
 I prepared to develop a society famous for its success.
 I did this by creating a problem-solving kit for a friend’s child.
 First, I taught that the child, represented by the doll, should live in the house, represented by the model.
 Second, I placed the house model in front of me.
 Third, I helped the child to place the doll in the house.
 In this way, I prepared to develop a society that was famous for its success by creating a problem-solving kit for a friend’s child.
 I prepared to play the game.
 I did this by searching for words meaning “old” to base the name of a computer game based on my Computer Science major.
 First, I looked up “old” in a thesaurus.
 Second, I read and described the synonyms for “old” in the thesaurus.
 Third, I confirmed the similarity of the synonyms with “old” and wrote them down.
 In this way, I prepared to play the game by searching for words meaning “old” to base the name of a computer game based on my Computer Science major.
 I prepared to perform at the concert by pressing the button to write the pop song.
 First, I selected the section of music to repeat.
 Second, I copied the section of music.
 Third, I pasted the section of music after the first section of music.
 In this way, I prepared to perform at the concert by pressing the button to write the pop song.
 I prepared to lip-synch the song by pressing the button to produce the music video.
 First, I found the visual marker for the start of the video.
 Second, I found the aural marker for the beginning of the song.
 Third, I synchronised these markers to produce the video.
 This way, I prepared to lip-synch the song by pressing the button to make the music video.
["Green, L 2024, <i>Abracadabra 3 Argument</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Abracadabra 3 Argument
 I prepared to distribute the As from the Aig (monastic version of an A grade essay that is a token of professionalism, which monastics change one breasoning or sentence in for each new person, and it is enough for the new person to earn the A is if it were original).
 I did this by standing in the circle with you and handing the A to you.
 First, I wrote a 190-breasoning (100%) A, having a new last-breasoning for the current person.
 Second, I prepared to distribute the Aig to the next person.
 Third, I repeated this until everyone who had received the Aig had an A.
 In this way, I prepared to distribute the As from the Aig by standing in the circle and handing the A to you.
 I prepared to appear professional while the Aig was distributed by meditating daily to protect myself because I was untrained in pedagogy (Education) or the Aig topic (department).
 To write As (A grade tokens of professionalism), I needed an artificial Pedagogy degree, composed of 10 10-breasoning long As, chosen from the breasonings details (breason out ten breasonings, in other words, think of 10 sets of x, y and z dimensions of each breasoning in the breasonings details’ breasoning lists), where you can write 10-breasoning long As instead of 190 breasonings because the degree helps you.
 You can write 10-breasoning long As in the Pedagogy degree itself because you are protected while working on it by it.
 After breasoning out the Aig (see item 1), think of a 2 (one for the employee and one for the manager to mean the total of 20 breasonings are expanded to 100 breasonings by politicians) *10 breasoning long sales A’s worth of characters in a text of your choice) to establish the Aig’s professional standard, and take care of correcting, finishing and doing As to access the Aig at all.
 I did this by jogging around the Botanical Gardens track.
 First, I ran some of the way.
 Second, I ran a little further.
 Third, I finished the run.
 In this way, I prepared to appear professional while the Aig was distributed by jogging around the Botanical Gardens track.
 I prepared to verify that the chicken was not outside the cool room for 10 minutes.
 I did this by verifying that the use-by date was current.
 First, I verified that the year on the use-by date was this year or earlier.
 Second, I verified that the month on the use-by date was this month or earlier.
 Third, I verified that the day on the use-by date was this day or earlier.
 In this way, I prepared to verify that the chicken was not outside the cool room for 10 minutes by ascertaining that the use-by date was current.
 I prepared to verify that the ceiling was clean by licking the spatula’s flat end.
 First, I tested that the end of the implement closer to the middle was flat.
 Second, I tested that the middle of the implement was flat.
 Third, I tested that the end of the implement closer to the end was flat.
 In this way, I prepared to verify that the ceiling was clean by licking the spatula’s flat end.
 I prepared to distribute the salespeople for my product uniformly.
 I did this by placing the pistachio nuts into the pistachio ice cream.
 First, I placed a pistachio nut in the centre of the top surface of the ice cream.
 Second, I embedded the nth concentric square with 2n – 1 pistachio nuts on the edge, starting with n = 1, to construct a uniform grid.
 Third, I placed points of sale at each intersection of the grid.
 In this way, I prepared to distribute the salespeople for my product uniformly by placing the pistachio nuts into the pistachio ice cream.
 I prepared to prevent death by placing the wet floor sign beside the mopped area.
 First, I listened to the customer report the spill.
 Second, I confirmed the details of the spill with the customer.
 Third, I mopped the floor and placed the wet floor sign beside the mopped area.
 In this way, I prepared to prevent death by placing the wet floor sign beside the mopped area.
 I prepared to make space for the new cattle.
 I did this by burning the baby that had died.
 First, I burned the body’s head.
 Second, I burned the body’s body.
 Third, I burned the baby’s limbs.
 In this way, I prepared to make space for the new cattle by burning the baby that had died.
 I prepared to lead the running squad by forming a running lane on the athletics track.
 First, I ran first in line.
 Second, the second athlete followed me.
 Third, the third athlete followed him.
 In this way, I prepared to lead the running squad by forming a running lane on the athletics track.
 I prepared to centre the house on the property by centring the hat on my head.
 First, I placed the hat on my head.
 Second, I made sure that it was straight.
 Third, I rotated it so that the front of the hat was pointing forward.
 In this way, I prepared to centre the house on the property by centring the hat on my head.
 I prepared to push the base of the flag into the ground.
 I did this by pointing the rod gyroscope at the letter.
 First, I let the rod gyroscope hang down.
 Second, I placed the letter tile underneath it.
 Third, I verified that the rod gyroscope was pointing at the letter by looking down along the rod at the letter.
 In this way, I prepared to push the base of the flag into the ground by pointing the rod gyroscope at the letter.
 The lady prepared for more of the chemical to be used in the new practical version by applying lipstick to her lips.
 First, she uncapped the lipstick and twisted the container to expose enough.
 Second, she applied it to her top lip.
 Third, she applied it to her bottom lip.
 I prepared to make sure the hips worked well.
 I did this by allowing the budgerigar to step onto my finger.
 First, I opened the door of the budgie’s cage.
 Second, I placed my finger next to the budgie’s stomach.
 Third, I removed the budgie from the cage while he sat on my finger.
 This way, I prepared to ensure the hips worked well by allowing the budgerigar to step onto my finger.
 I prepared to go to the café.
 I did this by counting the petty cash.
 First, I counted the coins or notes of the first denomination and added their total.
 Second, I prepared to do this with the next denomination.
 Third, I repeated this until there were no denominations left.
 In this way, I prepared to go to the café by counting the petty cash.
 I prepared to write “Happy Birthday” by writing it with the icing sugar on the cake.
 First, I filled the pen with icing sugar.
 Second, I poured the icing sugar through the hole.
 Third, I wrote the words on the top of the cake.
 In this way, I prepared to write “Happy Birthday” by writing it with the icing sugar on the cake.
 I prepared to love the atheist delights.
 I did this by listening to the intersex lady (the lady with no genital organs whatsoever).
 First, I looked up the telephone number in the telephone directory.
 Second, I rang it.
 Third, I had a conversation with the lady when she answered.
 In this way, I prepared to love the atheist delights by listening to the intersex lady.
 I prepared to love the big ideas.
 I did this by blowing up the big balloon.
 First, I held the neck of the balloon.
 Second, I blew up the balloon.
 Third, I tied a knot in the neck of the balloon.
 In this way, I prepared to love the big ideas by blowing up the big balloon.
 I prepared to feed the kitten by pouring a bowl of milk into it.
 First, I put the bowl on the ground.
 Second, I poured milk into it.
 Third, I called the kitten to let her know that I had poured a bowl of milk for her.
 The pop singer prepared to ask for a harp effect to be applied to his voice.
 He did this by playing the harp.
 First, he sat at the harp.
 Second, he selected the middle C string.
 Third, he plucked the string.
 In this way, the pop singer prepared to ask for a harp effect to be applied to his voice by playing the harp.
 The pop singer prepared to ask for a fast beat in his song.
 He did this by playing the drums quickly.
 First, he wrote down the tempo of 200 beats per minute that he planned to play the drums at on paper.
 Second, he set the metronome to this tempo.
 Third, he played the drum at this tempo.
 This way, the pop singer prepared to ask for a fast beat in his song by playing the drums quickly.
 The pop singer prepared to ask for a rocket sound effect to be played.
 He did this by dragging a stick through the sandbox.
 First, he selected the stick.
 Second, he positioned its end at one end of the sandbox.
 Third, he moved it through the sandbox until it had reached the other end.
 In this way, the pop singer prepared to ask for a rocket sound effect to be played by dragging a stick through the sandbox.
 The pop singer prepared to ask for a church bell to be played, suggesting he was kingly.
 He did this by striking the bell with a stick.
 First, he hung the bell from a stand.
 Second, he lifted the stick.
 Third, he struck the bell with the stick.
 In this way, the pop singer prepared to ask for a church bell to be played, suggesting he was kingly by striking the bell with a stick.
 I prepared to help the baby tie her shoelaces by seeing the baby.
 First, I bobbed down on the ground.
 Second, I looked forward.
 Third, I looked forward each distance before me until I saw the baby.
 In this way, I prepared to help the baby tie her shoelaces by seeing the baby.
 I prepared to be secular-minded by shaking hands with my colleague.
 First, I looked my colleague in the eye.
 Second, I grasped his hand.
 Third, I shook his hand.
 I prepared to devise an ulterior motive by wearing diving equipment.
 First, I attached the oxygen cylinders to the mask.
 Second, I mounted the oxygen cylinders on my back.
 Third, I put on the mask.
 In this way, I prepared to devise an ulterior motive by wearing diving equipment.
 I prepared to eat the apple peel by reading the script.
 First, I read flamboyantly.
 Second, I read gingerlilily.
 Third, I read Moroccan-like.
 I prepared to read the Queen a letter.
 I did this by wetting the envelope.
 First, I sucked 20 aliquots of water into the pipette from the test tube.
 Second, I squeezed the water from the pipette into the petri dish.
 Third, I dabbed my applicator in the petri dish with water and wet the adhesive strip inside the envelope flap.
 In this way, I prepared to read the Queen a letter by wetting the envelope.
 I prepared to drive the car by hooking the trailer to the vehicle.
 First, I hooked the front of the trailer to the back of the vehicle.
 Second, I unlocked the locks.
 Third, I chained the hook into a closed circle with the chain and locked it at both ends.
 In this way, I prepared to drive the car by hooking the trailer to the vehicle.
 I prepared to leave Earth by calculating that the Space Rocket should move up 4 metres.
 First, I moved the rocket up 2 metres.
 Second, I moved the rocket up another 2 metres.
 Third, I calculated that the rocket had moved up 2+2=4 metres.
 I prepared to deliver the cardboard boxes by swerving into the car port.
 First, I positioned the car perpendicular to the car port.
 Second, I moved in front of the carport.
 Third, I turned into the carport.
 In this way, I prepared to deliver the cardboard boxes by swerving into the carport.
 The aboriginal prepared to play with the duck.
 He did this by painting the duck.
 First, he dipped the brush in the paint can.
 Second, he applied the brush to the duck.
 Third, he repeated this until he had painted the duck with a coat of paint.
 In this way, the Aboriginals prepared to play with the duck by painting it.
 I prepared to sing at the concert by finding my seat in the auditorium.
 First, I remembered the row and seat number printed on the ticket.
 Second, I found the row of seats with this row number.
 Third, I found the seat with this seat number.
 In this way, I prepared to sing at the concert by finding my seat in the auditorium.
 I prepared to help the students with their homework by explaining to monastics how to produce Aigs or A-grade essays, which can be modified for each recipient to earn A.
 I did this by buying Vetusia3D™, a computer game that explained aspects of producing Aigs.
 First, I went anywhere I liked to.
 Second, I changed it around.
 Third, I wrote an argument agreeing with (not disagreeing with) a published article’s conclusion.
 In this way, I prepared to help the students with their homework by buying Vetusia3D™.
["Green, L 2024, <i>Abracadabra Argument</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Abracadabra Argument
 The aerospace engineer prepared to test that an object was functioning correctly.
 He did this by eating using a spoon.
 First, he moved the spoon so that its left edge's x coordinate was equal to its left edge's x coordinate plus his mouth's left edge's x coordinate minus his spoon's left edge's x coordinate.
 Second, he moved the spoon so that its bottom edge's z coordinate was equal to its bottom edge's z coordinate plus his mouth's bottom edge's z coordinate minus his spoon's bottom edge's z coordinate.
 Third, he moved the spoon so that its front edge's y coordinate was equal to its front edge's y coordinate plus his mouth's y coordinate minus his spoon's front edge's y coordinate.
 In this way, the aerospace engineer prepared to test that an object was functioning correctly by eating using a spoon.
 The manufacturer prepared to test that the seat was ergonomically designed.
 He did this by skewering the sausage using the fork.
 First, he positioned the fork horizontally over the horizontal centre of the slice of sausage.
 Second, he positioned the fork horizontally over the vertical centre of the slice of sausage.
 Third, he skewered the sausage.
 In this way, the manufacturer prepared to test that the seat was ergonomically designed by skewering the sausage using the fork.
 The optometrist prepared to test the size of the chopstick she would put in her mouth.
 She did this by eating using the chopsticks.
 First, she placed the first chopstick to the left of the grain of rice.
 Then, she put the second chopstick to the right of the grain of rice.
 Finally, she picked up the grain of rice.
 In this way, the optometrist prepared to test the size of the chopsticks she would put in her mouth by eating using the chopsticks.
 The physicist prepared to calculate the friction coefficient on the slope.
 He did this by eating using the lubricated spoon.
 First, he put the spoon with wheat biscuits and milk into his mouth.
 Second, he gripped the spoon with his lips.
 Third, he pulled the spoon out of his mouth, leaving the wheat biscuit and milk in his mouth.
 In this way, the physicist prepared to calculate the friction coefficient on the slope by eating using the lubricated spoon.
 The technician changed the track number by tearing the potato apart with his teeth.
 First, he clamped down on the biteful of potato with his molars.
 Second, he moved his jaw to the right.
 Third, he moved his jaw to the left.
 In this way, the technician changed the track number by tearing the potato apart with his teeth.
 The bridge technician prepared to raise the bridge by opening his mouth just before inserting food into it.
 First, he lifted the food to his mouth.
 Second, he opened his mouth.
 Third, he ate the food.
 The hiker prepared to break the bread.
 He did this by mashing the carrot on his plate.
 First, he placed the slice of carrot on the centre of his plate.
 Next, he mashed the carrot vertically.
 Finally, he mashed the carrot horizontally.
 In this way, the hiker prepared to break the bread by mashing the carrot on his plate.
 The cook prepared to squeeze the cooked tomato.
 He did this by crushing the grape.
 First, he took off his shoes.
 Next, he placed the centre of his foot on the centre of the grape.
 Then, he squashed the grape.
 In this way, the cook prepared to squeeze the cooked tomato by crushing the grape.
 The shepherd prepared to wash the sheep.
 He did this by chewing using his molars.
 First, he placed the jelly bean on his molar.
 Second, he chewed by moving his jaw left.
 Finally, he chewed by moving his jaw right.
 In this way, the shepherd prepared to wash the sheep by chewing using his molars.
 The crane mover prepared to move the crane segment into place.
 She pushed the pea into her molar space with her tongue.
 First, she pushed the food into the centre of her mouth.
 Second, she moved her tongue to the left of the pea.
 Third, she moved the pea onto his lower right molar.
 In this way, the crane mover prepared to move the crane segment into place by pushing the pea into her molar space with her tongue.
 The cleaner prepared to mop the floor by dissolving the cooked pumpkin in water.
 First, he placed the cooked pumpkin into the glass of water.
 Second, he let the water sit for 5 minutes.
 Third, he removed the pumpkin from the water.
 In this way, the cleaner prepared to mop the floor by dissolving the cooked pumpkin in water.
 The swimmer prepared to turn his head to take a breath by stirring the soup pot.
 First, he inserted the wooden spoon into the pot.
 Second, he stirred clockwise around half the pot.
 Third, he stirred clockwise around the other half of the pot.
 In this way, the swimmer prepared to turn his head to take a breath by stirring the soup pot.
 The actor prepared to eat the apple pie.
 He did this by running around a certain distance with the energy from eating honey.
 First, he measured the distance he would travel to be 4 km.
 Second, he decided to run for 0.
 Third, he divided 4 km / 0.
4 hours, to calculate his speed, 10 km/h.
 In this way, the actor prepared to eat the apple pie by running around a certain distance with the energy from eating honey.
 The child fed the vegetable model to the plastic dinosaur.
 He did this by dismissing the meeting's participants after the sum of the speech times had been reached.
 First, he started counting the minutes of the meeting from 0.
 Second, he summed the speech times.
 When the meeting time had reached this sum, he dismissed the meeting.
 In this way, the child fed the vegetable model to the plastic dinosaur by dismissing the meeting's participants after the sum of the speech times had been reached.
 The Chinese teacher prepared to play duck-duck-goose by pointing to the floor and asking the child to stand up.
 First, he walked to the child.
 Next, he asked the child to stand up.
 Finally, he watched the child stand up.
 In this way, The Chinese teacher prepared to play duck-duck-goose by pointing to the floor and asking the child to stand up.
 The demolisher prepared to test that there was no more debris.
 He did this by counting the number of globules of marzipan.
 First, he moved in all combinations of directions from a cube chosen as a relative origin in the globule of marzipan until there were no unexplored cubes.
 Second, he tested to the right of the first globule of marzipan for another globule of it.
 Third, he repeated this until there were no more globules of marzipan.
 In this way, the demolisher prepared to test that there was no more debris by counting the number of globules of marzipan.
 The operator prepared to connect the caller to a call recipient by removing the treacle on toast from the bag.
 First, he reached inside the bag.
 Next, he felt for the sticky treacle on toast.
 Then, he removed the toast by holding it by its edge.
 In this way, the operator prepared to connect the caller to a call recipient by removing the treacle on toast from the bag.
 The bricklayer prepared to load the bricks into the wheelbarrow.
 He did this by swallowing the globules of treacle together.
 First, he placed the first globule of treacle in his mouth.
 Second, he placed a second globule of treacle in his mouth and chewed them together.
 Finally, he swallowed the small mouthful of treacle.
 In this way, the bricklayer prepared to load the bricks into the wheelbarrow by swallowing the globules of treacle together.
 The builder prepared to collect the smaller parts first to make the window by collecting the rubbish in the bag.
 First, she picked up the folded sheet of paper.
 Second, she carried the rubbish to the bag.
 Third, she placed the rubbish in the bag.
 In this way, the builder prepared to collect the smaller parts to make the window by collecting the rubbish in the bag.
 The bodybuilder prepared to spot his friend lifting barbells.
 He did this by cleaning away the marks on his face.
 First, he looked in the mirror.
 Second, he observed that the chocolate mark was on the left side of his mouth.
 Third, he cleaned the left side of his mouth.
 In this way, the bodybuilder prepared to spot his friend lifting barbells by cleaning away the marks on his face.
 The bread seller prepared to roll his trailer down the left of the road.
 He did this by running down his lane in a race.
 First, he placed a pole at the intersection of the starting line and the left edge of the road.
 Second, he placed a rope parallel to the left edge of the lane.
 Third, he ran down the highway with the centre of his body aligned with the rope.
 In this way, the bread seller prepared to roll his trailer down the left of the road by running down his lane in a race.
 The trailer hirer prepared to wait for her trailer to dry.
 She did this by waiting for the lactic acid to disappear.
 First, she walked to the side of the track.
 Second, she lay down on her back.
 Third, she walked home.
 In this way, the trailer hirer prepared to wait for her trailer to dry by waiting for the lactic acid to disappear.
 The mathematics student prepared to substitute the answer back into the algebraic equation to check it.
 He did this by breathing in and breathing out while running.
 First, he breathed in during each of his first and second steps.
 Second, he breathed out during each of his third and fourth steps.
 Finally, he repeated this process until he had finished running.
 In this way, the mathematics student prepared to substitute the answer into the algebraic equation to check it by breathing in and breathing out while running.
 The babysitter prepared to carry the child.
 He did this by lifting his foot onto the step.
 First, he placed his foot 0.
05 metres away from the base of the step.
 Second, he lifted his foot 0.
05 metres above the step.
 Finally, he put his foot horizontally centred on the step.
 This way, the babysitter prepared to carry the child by lifting his foot onto the step.
 A lab technician prepared to place food on an agar plate.
 She did this by lowering a bucket into the well.
 First, she held the bucket over the well.
 Then, she started lowering it into the well.
 Finally, she stopped lowering it into the well when she heard it make a splash.
 In this way, a lab technician prepared to place food on an agar plate by lowering a bucket into the well.
 The interpreter prepared to pronounce the first and third syllables in “Italy” with emphasis.
 He counted the down (emphasised) beats in a music bar.
 First, he started his beat counter at 0.
 Then, he recorded the number of beats in the bar, 4.
 Lastly, he divided the number of beats by 2, two down beats (the first and third beat).
 In this way, the interpreter prepared to pronounce the first and third syllables in “Italy” with emphasis by counting the down (emphasised) beats in a bar of music.
 The bartender prepared to attach the hose to the tap.
 He did this by placing his mouth around the ice cream.
 First, he opened his mouth to the width of the ice cream.
 Second, he opened his mouth to the depth of the ice cream.
 Third, he wrapped his mouth around the ice cream.
 In this way, the bartender prepared to attach the hose to the tap by placing his mouth around the ice cream.
 The gardener prepared to water the garden.
 He did this by moistening his mouth between singing each phrase.
 First, he sang the first phrase.
 Next, he moistened his lips.
 Third, he sang the following words.
 In this way, the gardener prepared to water the garden by moistening his mouth between singing each phrase.
 The knight prepared to lower the drawbridge.
 He did this by watching the conductor bring him in at his entrance.
 First, he watched the conductor before his entrance.
 Second, he took a breath.
 Third, he opened his mouth and sang the first syllable when the conductor brought him in.
 In this way, the knight prepared to lower the drawbridge by watching the conductor bring him in at his entrance.
 The farmer prepared to finish loading the barn with hay.
 He did this by watching the conductor to know when to finish singing the final note.
 First, he looked at the conductor.
 Second, he waited until he indicated the note had finished.
 At the same time, he stopped singing the note.
 In this way, the farmer prepared to finish loading the barn with hay by watching the conductor to know when to finish singing the final note.
 The weatherman prepared to record whether it was raining.
 He did this by listening to the conductor sing his first note.
 First, he listened to the note.
 Second, he hummed it to himself.
 Third, he prepared to sing the first note when brought in.
 In this way, the weatherman prepared to record whether it was raining by listening to the conductor sing his first note
 The scientist zeroed the control test tube to compare with the test tubes with different values.
 He did this by marking a previous note the same as the first of the following phrase.
 First, he worked out which note started the following words.
 Second, he found the last instance of this note before this in his line.
 Third, he remembered this note to sing when he started the following phrase.
 In this way, the scientist zeroed the control test tube by marking a previous note that was the same as the first of the following words.
["Green, L 2022, <i>Accreditation</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"Accreditation
 I customised the sentence for the student.
 I filtered out terms in the sentence.
 I followed up the student for work.
 I ensured the students' clothes were tucked in.
 I joined the students who were having difficulty with the same topics together.
 I intercepted the student who was performing poorly with formative assessment.
 I formed the clubs at school.
 I wrote the framework for religion in relation to schools.
 The student's tracks in class were followed.
 I permitted the student to leave the class.
 I found that if the requirements were met, accreditation was possible.
 I verified that the course was accredited.
 I verified that the student had studied an accredited degree.
 I checked how many test cases the student had solved.
 I verified the assignment for plagiarism.
 I interviewed the student to verify the authenticity of the assignment.
 I monitored how well the student was understanding the examples.
 I discussed the student's progress with her.
 If the assignment passed one test, it passed.
 I checked the assignment in case it was very close to passing.
["Green, L 2021, <i>Aigs Theatre Acting Agent</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Aigs Theatre Acting Agent
 I prepared to compare the reasons of the actor and character.
  I did this by stating that I loved Aigs acting.
  First, I thought of the overarching Aigs (theme).
  Second, I related the current line to the Aigs.
  Third, I thought of the reason for the line.
 I prepared to act on television or film.
  I did this by stating that the actor meditated before using Aigs.
  First, I started my daily routine.
  Second, I meditated.
  Third, I used Aigs.
 I prepared to examine the characters' faces.
  I did this by stating that the actor enjoyed using the monocle costume item from the Aig.
  First, I removed the monocle from its case.
  Second, I placed it between my right eye brow and bottom of eye.
  Third, I took it out and wiggled me eyebrows.
 I prepared to found you.
  I did this by recording what I knew the characters were thinking in the Aigs.
  First, I found the dream.
  Second, I found the dream's dream.
  Third, I found the dreams' dreams' dreams.
 I prepared to record.
  I did this by recording that the self knew the other knew the self.
  First, I stated that the self was known.
  Second, I observed that the other knew the self.
  Third, I stated that the self knew the other, who knew the self.
 I prepared to be a dear.
  I did this by recording the image of nurturing the nurturers in Aigs.
  First, I found the nurturing presence.
  Second, I nurtured it.
  Third, I recorded the image.
 I prepared to power the pommelles.
  I did this by knowing what music about the character from the Aig meant and played it.
  First, I found the character.
  Second, I found her music.
  Third, I played it.
 I prepared to cross-connect over four pomodoros.
  I did this by inputting As to access the acting agent Aigs.
  First, I found the acting As.
  Second, I inputted the acting Aigs.
  Third, I found the acting agent Aigs.
 I prepared to notice the famous audience member.
  I did this by inputting the As to access the Aigs parts for the audience members.
  First, I found the As.
  Second, I inputted the As.
  Third, I accessed the Aigs parts for the audience members.
 I prepared to receive the accolade.
  I did this by using medicine to prevent a headache from Aigs (maintained head comfort).
  First, I used spiritual medicine to prevent a headache.
  Second, I used Aigs (a spiritual switch that helped me stay confident when acting by projecting imagery).
  Third, I worked the acting shift.
["Green, L 2024, <i>Anarchy Argument</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Anarchy Argument
 What are the x, y and z dimensions in metres of \"cup\" in \"The soldier cleaned himself with a cup of water\"?
 What are the x, y and z dimensions in metres of \"bottle\" in \"The soldier drank a bottle of apple juice\"?
 What are the x, y and z dimensions in metres of \"apple\" in \"The soldier put an apple in his lunch box\"?
 What are the x, y and z dimensions in metres of \"periscope\" in \"The soldier looked at the stand through the periscope\"?
 What are the x, y and z dimensions in metres of \"pear\" in \"The soldier ate a pear with the friend he found on the Internet\"?
 What are the x, y and z dimensions in metres of \"brick\" in \"The soldier stood on a brick, which was like a wall\"?
 What are the x, y and z dimensions in metres of \"log\" in \"The soldier stepped over the log\"?
 What are the x, y and z dimensions in metres of \"flag\" in \"The soldier found a flag\"?
 What are the x, y and z dimensions in metres of \"bun\" in \"The soldier ate a bun, which he had bartered for\"?
 What are the x, y and z dimensions in metres of \"plant\" in \"The soldier watered the plant, after moving it\"?
 What are the x, y and z dimensions in metres of \"tofu\" in \"The soldier ate tofu\"?
 What are the x, y and z dimensions in metres of \"garbage bag\" in \"The soldier moved the garbage bag\"?
 What are the x, y and z dimensions in metres of \"nuts\" in \"The soldier chewed nuts at the theatre\"?
 What are the x, y and z dimensions in metres of \"processed cheese\" in \"The soldier bit processed cheese\"?
 What are the x, y and z dimensions in metres of \"cup\" in \"The soldier swallowed a cup of grape juice\"?
 What are the x, y and z dimensions in metres of \"roll\" in \"The soldier ate a roll with vegan cheese\"?
 What are the x, y and z dimensions in metres of \"peanut\" in \"The soldier nipped a peanut\"?
 What are the x, y and z dimensions in metres of \"nectarine\" in \"The soldier munched a nectarine\"?
 What are the x, y and z dimensions in metres of \"sugar\" in \"The soldier packed sugar in his bag\"?
 What are the x, y and z dimensions in metres of \"ball\" in \"The soldier threw a ball in the air\"?
 What are the x, y and z dimensions in metres of \"banana\" in \"The soldier peeled the banana\"?
 What are the x, y and z dimensions in metres of \"orange\" in \"The soldier squeezed the orange\"?
 What are the x, y and z dimensions in metres of \"mandarin\" in \"The soldier removed a segment from a mandarin\"?
 What are the x, y and z dimensions in metres of \"bra\" in \"The soldier made a bra\"?
 What are the x, y and z dimensions in metres of \"stand\" in \"The soldier jumped to touch the top of the stand\"?
 What are the x, y and z dimensions in metres of \"ring\" in \"The soldier wore a ring\"?
 What are the x, y and z dimensions in metres of \"watering container\" in \"The soldier watered the apricot tree with the watering container\"?
 What are the x, y and z dimensions in metres of \"base\" in \"The soldier placed the base on the flat ground\"?
 What are the x, y and z dimensions in metres of \"abdominal muscle exerciser\" in \"The soldier exercised his abdominal muscles with the abdominal muscle exerciser\"?
 What are the x, y and z dimensions in metres of \"flask\" in \"The soldier gargled water from his flask\"?
 What are the x, y and z dimensions in metres of \"dried fig\" in \"The soldier chewed the dried fig\"?
 What are the x, y and z dimensions in metres of \"shorts\" in \"The soldier ran on the spot in shorts\"?
 What are the x, y and z dimensions in metres of \"two sticks\" in \"The soldier jumped over two sticks\"?
 What are the x, y and z dimensions in metres of \"hoop\" in \"The soldier swung the hoop around his waist\"?
 What are the x, y and z dimensions in metres of \"glass\" in \"The soldier drank a glass of water\"?
 What are the x, y and z dimensions in metres of \"bible\" in \"The army chaplain distributed the bibles\"?
 What are the x, y and z dimensions in metres of \"wood\" in \"The soldier cut the wood into skirting boards\"?
 What are the x, y and z dimensions in metres of \"stretcher\" in \"The soldier lied down on the stretcher\"?
 What are the x, y and z dimensions in metres of \"locker\" in \"The soldier found the correct locker\"?
 What are the x, y and z dimensions in metres of \"carrot\" in the sentence \"The soldier ate the carrot to check it was healthy\"?
 What are the x, y and z dimensions in metres of \"seat\" in the sentence \"The soldier sat on the seat to check it was stable\"?
 What are the x, y and z dimensions in metres of \"salt\" in the sentence \"The soldier salted the onion\"?
 What are the x, y and z dimensions in metres of \"name badge\" in the sentence \"The soldier found his name badge\"?
 What are the x, y and z dimensions in metres of \"drum\" in the sentence \"The soldier beat a regular rhythm on the drum\"?
 What are the x, y and z dimensions in metres of \"bow\" in the sentence \"The soldier stayed balanced when aiming the arrow at the target with the bow\"?
 What are the x, y and z dimensions in metres of \"crotchet\" in the sentence \"The soldier moved the crotchet forward one beat of the musical bar\"?
 What are the x, y and z dimensions in metres of \"money\" in the sentence \"The soldier labelled the money to take home\"?
 What are the x, y and z dimensions in metres of \"celery\" in the sentence \"The soldier fed the kangaroo the celery\"?
 What are the x, y and z dimensions in metres of \"balloon\" in the sentence \"The soldier blew up a balloon\"?
 What are the x, y and z dimensions in metres of \"corn\" in the sentence \"The soldier ate the corn\"?
 What are the x, y and z dimensions in metres of \"towel\" in the sentence \"The soldier towelled himself dry\"?
 What are the x, y and z dimensions in metres of \"playing card\" in the sentence \"The soldier placed the playing card on the table\"?
 What are the x, y and z dimensions in metres of \"teacup\" in the sentence \"The soldier drank tea from the teacup\"?
 What are the x, y and z dimensions in metres of \"stick\" in the sentence \"The soldier moved the stick off the road\"?
 What are the x, y and z dimensions in metres of \"label\" in the sentence \"The soldier read the label\"?
 What are the x, y and z dimensions in metres of \"pole\" in the sentence \"The soldier stood straight against the pole\"?
 What are the x, y and z dimensions in metres of \"pupil\" in the sentence \"The soldier looked at the girl's pupil\"?
 What are the x, y and z dimensions in metres of \"face\" in the sentence \"The soldier looked at the boy's face\"?
 What are the x, y and z dimensions in metres of \"number\" in the sentence \"The soldier wrote the table number on the vegemite\"?
 What are the x, y and z dimensions in metres of \"ladder\" in the sentence \"The soldier like his friend because his friend was able to climb a ladder\"?
 What are the x, y and z dimensions in metres of \"tea towel\" in the sentence \"The soldier folded the tea towel until it was hand sized\"?
 What are the x, y and z dimensions in metres of \"cow\" in the sentence \"The soldier counted the number of times the cow mooed\"?
 What are the x, y and z dimensions in metres of \"glasses\" in the sentence \"The soldier opened a shape book at the page for science and looked at the illustration of the glasses\"?
 What are the x, y and z dimensions in metres of \"mitochondrion\" in the sentence \"The soldier examined the model mitochondrion\"?
 What are the x, y and z dimensions in metres of \"candle\" in the sentence \"The soldier lit a candle at church\"?
 What are the x, y and z dimensions in metres of \"birth schedule\" in the sentence \"The soldier displayed the birth schedule\"?
 What are the x, y and z dimensions in metres of \"staff timetable\" in the sentence \"The soldier wrote the staff timetable\"?
 What are the x, y and z dimensions in metres of \"room timetable\" in the sentence \"The soldier read the room timetable\"?
 What are the x, y and z dimensions in metres of \"couch\" in the sentence \"The soldier sat on the couch\"?
 What are the x, y and z dimensions in metres of \"pencil case\" in the sentence \"The soldier put a pencil in the pencil case\"?
 What are the x, y and z dimensions in metres of \"hole puncher\" in the sentence \"The soldier punched holes in the paper with the hole puncher\"?
 What are the x, y and z dimensions in metres of \"water container\" in the sentence \"The soldier took the water container with him for his hike\"?
 What are the x, y and z dimensions in metres of \"pen\" in the sentence \"The soldier returned his friend's pen to his friend\"?
 What are the x, y and z dimensions in metres of \"two pieces of paper\" in the sentence \"The soldier wrote what he will do and said he will do on the two pieces of paper, respectively\"?
 What are the x, y and z dimensions in metres of \"piece of paper\" in the sentence \"The soldier wrote five reasons to do a job in his company on a piece of paper\"?
 What are the x, y and z dimensions in metres of \"tambourine\" in the sentence \"The soldier made a model of a tambourine\"?
 What are the x, y, and z dimensions in metres of \"friend\" in the sentence \"The soldier found his friend who mentioned the same key phrase as him\"?
 What are the x, y and z dimensions in metres of \"three friends\" in the sentence \"The soldier found two other friends, each of whom said the same key phrase as another one in the group\"?
 What are the x, y and z dimensions in metres of \"objects\" in the sentence \"The soldier found objects representing what he and his three friends had said they needed together\"?
 What are the x, y and z dimensions in metres of \"the library\" in the sentence \"The soldier checked the random place: the library\"?
 What are the x, y and z dimensions in metres of \"the conference room\" in the sentence \"The soldier checked the conference room, in the library\"?
 What are the x, y and z dimensions in metres of \"the encyclopaedia\" in the sentence \"The soldier read an article in the encyclopaedia to read widely\"?
 What are the x, y and z dimensions in metres of \"the blank book\" in the sentence \"The soldier wrote his encyclopaedia article in the blank book\"?
 What are the x, y and z dimensions in metres of \"wheat biscuits\" in the sentence \"The soldier moistened wheat biscuits after he answered a girlfriend's call\"?
 What are the x, y and z dimensions in metres of \"glove\" in the sentence \"The soldier inserted his hand in his glove\"?"]
["Green, L 2022, <i>Anti-Ageing Medicine</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"Anti-Ageing Medicine
 Proper medicine required 4*50 As.
 I prevented ageing using body replacement and pedagogy.
  I stopped ageing at the age I saved my body.
  My body's state was saved and it didn't denature or degenerate.
  I could live forever.
 A doctor tested my blood and physical condition.
  My body's state was saved from the first day, and could be tested medically.
  One set of 4*50 As was for immortality.
  Another set of 4*50 As was for anti-ageing.
  I wrote about the positive medical effects.
 I thanked the educational institution for supporting anti-ageing.
  Like with body replacement, I could breason out As with or without a computer.
  I could use text to breasonings to breason out an A, then indicate anti-ageing each day.
  Alternatively, I could hand-breason out breasonings (in my mind) and receive the benefits of anti-ageing.
  I could hand-breason out texts if a company couldn't support it.
 I noticed that a Complexity subject covered medicine.
  I attended the educational institution to support anti-ageing.
  It helped me write arguments.
  I received As that helped the techniques work.
  The educational institution provided a course that supported my writing and its effects.
 I planned my career, and aimed to produce great works.
  I could halt ageing.
  If I went back to another character's age, I would get older.
  My skin and hair remained the same, everyone thought I looked young.
  My agent was happy that I hadn't changed my appearance.
["Green, L 2021, <i>Appearances</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Appearances
 I prepared to receive the positive effects of writing the algorithm in the future.
  I did this by displaying the famous appearance.
  First, I said it was either people or controlling the hallucinations.
  Second, I said it was the people.
  Third, I said that's what's famous.
 I prepared to verify the A against the appearance.
  I did this by stating that there was a solution to the problem of 'A'.
  First, I wrote the A.
  Second, I read it.
  Third, I looked at its high quality appearance.
 I prepared to help the appearances, increase to academia, recommend meditation and improved logical thinking.
  I did this by stating that the student constructed a logic of the appearance.
  First, I observed the plebeian write the number of As on different topics.
  Second, I observed her either have children or something else.
  Third, I read research about graduating from the Master degree.
 I prepared to find the non-monotonicities.
  I did this by stating that the Science was an appearance.
  First, I found the Science.
  Second, I wrote the language of appearances.
  Third, I represented the Science in the language.
 I prepared to reveal the consequent as a future use.
  I did this by stating that the appearance of the antecedent was stronger than that of the consequent.
  First, I found more energy in the first step.
  Second, I found less energy in the second step.
  Third, I chose the first step.
 I prepared to state that three-step algorithms led to stronger conclusions, and that algorithm specifications were stronger than their uses.
  I did this by stating that the appearance of the consequent was stronger than that of the antecedent.
  First, I wrote the reason.
  Second, I wrote the eternal conclusion.
  Third, I couldn't avoid thinking of the reason as well.
 I prepared to produce a movie of the subject of the argument map, removing other uses.
  I did this by stating that the object appeared to be in the other object.
  First, I explained that the reason was in the conclusion.
  Second, I showed that multiple reasons could be in a reason.
  Third, I showed that uses required a neuromodel.
 I prepared to watch the dancer help her memory.
  I did this by stating that the dancer appeared.
  First, I stated that the dancer represented logical verification.
  Second, I thought of the rule of dancing.
  Third, I found the freedom of philosophy.
 I prepared to calculate Computational Quotient (how intuitive the software was) in the Computational Doctorate.
  I did this by examining the appearance of the algorithm step.
  First, I made fun of it and wanted a whole algorithm.
  Second, I examined its fine art.
  Third, I noticed that the three links (between C.
, and internal links in C.
) were prayed for.
 I prepared to argue that computer science was one-dimensional.
  I did this by seeing that the appearance was always perfect.
  First, I stayed close to the first thought in computer science.
  Second, I moved straight to agreement.
  Third, I checked the values on either side.
["Green, L 2022, <i>Being There</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"Being There
 I was there because I ate enough.
 I argued for enough food.
 Then, I bought the ingredients.
 After this, I made the food.
 I ate it.
 I was there because of examining subparts.
 I reviewed the subparts of the food.
 I found a register of ingredients.
 I checked whether they were healthy.
 Then, I ate the food if its ingredients were healthy.
 I was there because I found my way there.
 I navigated the correct path.
 I worked out where I was.
 I found this on a map.
 I followed the map to the destination.
 I was there because I was good.
 I was good.
 I behaved well by following the rules.
 I did this by taking care to follow the laws.
 Also, I observed guidelines.
 I was there because of business.
 The business was a standard version of being there.
 After a Master's degree, I wrote As for business, sales and the bot.
 In this way, the bot bought a product in reality.
 After trial runs, I read the content and business As to remove their pedagogical details, make them about one department and connect each sentence to the topic.
 I was there because of simplifying my texts, etc.
 I fought back against not being allowed pedagogy in my books.
 First, I wrote a seen-as version that was plain.
 Second, I wrote research so that the text was protected.
 Finally, I compared it with Hegel (a humanist pedagogue), who used simple language and avoided the term pedagogy.
 I also noticed that texts were there because of possible good connections and algorithms.
 I saw a secondary book by Hegel still mentioned \"humanist pedagogy\".
 I noticed that like a theology text that said \"meditation\", there was an A against it.
 Having more instances of an unusual word would take too long with more than one mention of the word.
 I noticed that other terms, such as \"breasoning\", might be entirely removed.
 I was there because of thinking of connections.
 I noticed that relations started with the simplest possible form of a question about an answer.
 For example, I asked what was required to do that.
 It might be a question about a perspective on the topic.
 I simplified the language for the answer connection (which shouldn't be in the text).
 I was there because of the chains of answers I put in the essay.
 I wrote the explanation.
 Then, I wrote 50 As to find the answer.
 Following this, I wrote 50 As about the answer.
 I found I could write an idea with three steps as an answer.
 I reworked my philosophy to have arguments for algorithms, to keep my algorithms where the discussions were simple.
 I simplified language to remove computational terms.
 Finally, I placed my computer algorithms in a computer science department.
 Algorithms may also be in philosophy, as long as they are simple.
 The point of them there was to write an essay about them.
 I was there to help.
 I helped with the homework.
 I did this by discussing the question with the student.
 Then, I answered her specific questions.
 Also, I wrote notes for them as study points.
 I wrote an algorithm to help complete the workload.
 I wrote complex enough sentences by finding them out with ten different ideas.
 Then, I wrote the sentence containing ten new other ideas.
 Then, I wrote ten more ideas as reasons for the sentence.
 I found popularity with my aim and success by holding the product in my hand.
 I tossed out the idea of not writing on pedagogical terms because I had read an essay about pedagogy written by an essay writing algorithm.
 Also, Tristram Shandy and Plato featured algorithms, although Plato featured one algorithm per essay.
 I wrote freely, finding out breasonings and letting the reader draw their conclusions, non obviously.
 I wrote algorithms to feature per sentence, which prompted thought and work on one or two algorithms by students.
 I called logic philosophy and slightly preferred the ten algorithms to the seen-as version.
 It was precisely philosophy.
 In England, a magic school agreed with one algorithm per text, but I wanted more.
 I wanted 1, not ten algorithms per sentence, for clarity (I think I had read something like this somewhere).
 After quickly writing short algorithms for each sentence at the start, I finished the long algorithms off later.
 I remained there by finding ideas between chapters.
 I checked the text's interpolation analysis (connections in similar sentences) (from br_gen.
 I checked whether all the main conclusions in the text were in it.
 I used a mind reader to choose the leading contenders, or rather hand chose three of the most different and exciting candidates and wrote algorithms about them.
 Like br_gen.
pl reconnecting sentences, I wrote a version that reconnected algorithms, finding both new methods and new aims for algorithms.
 I noted the properties of more unique ideas and algorithms, such as their usefulness.
 I ran algorithm br_gen (see 15) on parts of algorithms, not just adjacent commands.
 I found the best connections between parts of algorithms.
 I also ran algorithm br_gen on adjacent commands, in fact, on the ideas that were algorithms were based on.
 For example, I anchored word triangles on an algorithm system and kept a log (hierarchy) of thoughts to fill in any gaps.
["Green, L 2022, <i>Big Idea Canceller</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"Big Idea Canceller
 I cancelled the unrelated As.
 I did this across the board, for all ideas I wrote As for, in each department.
 This was professional and recognised as such.
 I carried the supported A.
 I identified the supported A.
 I wrote the parts of the A.
 I found the As' parts' subparts.
 It stops with the shells.
 The As were data structures.
 The As for the As were cleaned by using the same and plain language.
 The same language as the data structures was used.
 Additional As used plain language from the same department.
 The algorithm for a topic's idea in Master's also used the same and plain language.
 The algorithm had a very simple, few-lines long version.
 The other version of the algorithm was a big idea.
 There needed to be many of them.
 Music and acting were good ideas, and helped with memory.
 I chose a single department at a time.
 I identified the non-relevant ideas.
 I identified and stopped any sources of unprofessionalism.
 I stopped supporting non-relevant As.
 I stopped carrying the parts of the non-relevant A.
 I stopped giving out the subparts of the non-relevant A.
 I didn't sell anything above the A.
 I didn't sell anything below the A.
 I didn't sell anything before the A.
 I didn't sell anything after the A.
 I analysed and didn't support anything but the data structures.
 I stopped the use of non-same language.
 I stopped the use of non-plain language.
 I prevented forgetting to write the simple algorithm.
 I stopped writing too many lines of the algorithm.
 I stopped writing too few algorithms.
 I avoided forgetting music.
 I avoided forgetting acting.
["Green, L 2021, <i>Blue Nature</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Blue Nature
 I prepared to prevent the flood and fire.
  I did this by observing the sea creatures.
  First, I observed nature go around me.
  Second, I was safe.
  Third, I had some good things in the middle.
 I prepared to buy the Bentwood Chair by Michael Thonet.
  I did this by stating that I am a member of nature.
  First, I distanced myself from nature.
  Second, I helped you to it.
  Third, I followed man-madeness.
 I prepared to test properties of nature.
  I did this by enjoying blue nature.
  First, I trained nature.
  Second, I assessed nature.
  Third, I joked, I imitated not followed nature, in fact.
 I prepared to meet safety requirements.
  I did this by enjoying blue nature with you.
  First, I found the block.
  Second, I removed it.
  Third, I walked there.
 I prepared to help make a model.
  I did this by noticing that there was one creature.
  First, I avoided it.
  Second, I stayed home.
  Third, I did something else.
 I prepared to design nature around it.
  I did this by noticing all of nature.
  First, I wrote the name of the object.
  Second, I wrote your name.
  Third, I wrote what you said it was.
 I prepared to design it well.
  I did this by stating that the creature developed the direction.
  First, I said 'I did'.
  Second, I made you do one thing you liked it, and I liked it too.
  Third, I designed around nature.
 I prepared to like it.
  I did this by stating that the creature was in the object.
  First, I looked at it.
  Second, I took it out.
  Third, I designed a mould for it.
 I prepared to be a good person.
  I did this by stating that the creature was on the object.
  First, I found you.
  Second, I found what you wanted.
  Third, I did what you wanted me to do.
 I prepared to design it first.
  I did this by stating that the caretaker created the space in nature.
  First, I found space.
  Second, I found you in it.
  Third, I moved on with you in my arms.
["Green, L 2024, <i>Body Replacement</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"() body replacement should have 4*50 medicine arg"]
["Green, L 2022, <i>Bot like self in simulation</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"A bot like Self in Simulation
 I turned the bot on and off when needed.
 I explored its thoughts as edges of a polyhedron toy.
 I explored the use of biotechnology (the bot), rating its representations.
 I recommended representations to it.
 I found things that caused enjoyment to the bot.
 I helped the bot to invent ideas that tested its limits.
 I found the bot's limits.
 I alone explored the bot and judged it as impressive.
 I interested the bot in functionalism in computer science, prompting more quickly finding reused intermediate predicates.
 I reused intermediate predicates in algorithms.
 I removed the bug from the concatenation algorithm.
 I replaced the concatenation algorithm with a system call.
 I wrote code that I had ubiquitously checked using generated data.
 I examined certain cases, making decisions.
 I wrote the interpreter's behaviour with the semicolon key and undefined variables.
 I invested in each country and visited to gauge interest in certain services.
 I made the time travel software available, making it clear that it was appropriate for Master's students.
 I wrote a Master's degree for the bot.
 A Master's degree was fifty sentence-As.
 I worked out how to program my bot software, i.
 music, software, research and essays (paraphrasings).
 I wrote specifications for functional algorithms in CAW, replacing writing specifications for every few lines of predicates.
 I inserted a bot argument in my daily regimen.
 I avoided sexual contact with the bot.
 I couldn't think of anything else to avoid about the bot.
 I updated a shortlist of bots.
 I found friendship with the nicest people, remaining professional and courteous.
 I leveraged and won opportunities with each customer.
 I noticed that the bot was human.
 I noticed his eyes behaved like cameras.
 I noticed human neurons tempered his mind.
 I liked business, in particular the stock market.
 I twirled the ship along a safe path.
 I saved the game.
 I encountered Vetusia 3: The Cave.
 The cave contained a bonus maze of algorithm writing puzzles.
 I also encountered Vetusia -1: The Firm.
 The firm predicted the design of Vetusia from algorithms and drawings.
 I wrote simulated intelligence to play the Vetusian puzzles.
 The Vetusian puzzles were CAW, writing CAW, Program Finder, writing Program Finder, a simple interpreter and writing the interpreter.
 I wrote visual and constraint satisfaction puzzles, such as mapping stories to a newspaper.
 I drew the shortest line through multiple dimensions (tables of a database).
 I simplified the database by removing old fields.
 I remember the introduction of the Internet.
 I wrote a programming language written specifically for the Internet.
 The language could create protocols.
 The language could simplify the Internet topology.
 The language could create virtual networks.
 The language could simulate the Internet for programming purposes.
 The language could treat all my domain names, etc.
, as simulated elements, which I could test out in my private world.
 Money, As, and marks were of no object.
 Money required a universal pension, comfortable living arrangements and access to proper food, medical services, etc.
 As required access to the Text to Breasoning software, with meditation, etc.
 training and training in writing algorithms that wrote arguments and algorithms, all from the user's database.
 Marks required the time and training to write 80 philosophy breasonings and 80 algorithms and follow an algorithm specification (written to a specification) to finish the assignment.
 Difficult algorithms (which required additional time to write features and find bug fixes, had performance issues without system calls or required obscure commands to work correctly) I would explain separately and might assess by memorisation.
 I found that computer science suited me because it was possible to write correct code with bug checkers.
 I tested other people's programs and the ISO Prolog tests with my interpreter.
 I checked the best programming and Prolog writing practices and checked my programs followed these.
 I wrote algorithms to check for these standards.
 I found errors with static and dynamic checkers.
 I reformatted my algorithms uniformly
 I used a sparing format for comments (to describe the logical structure, limits of programs and differences from other programs).
 I listed to-do items and checked off completed items.
 I tested similar interpreters using my regression tests.
 I listed similar interpreters' features and equivalent features of my interpreter.
 I analysed my interpreter's jump between choice points.
 I turned off retry with a flag to save memory.
 I wrote most compiler predicates natively in C.
 I wrote an application using Prolog.
 It had visual elements (it was in a browser).
 I wrote a mobile app using Prolog.
 I wrote a small operating system in a web browser using Prolog.
 I noticed that the web browser allowed Prolog to work on any platform.
 I wrote apps for mobiles.
 I wrote apps in browsers for desktops.
 I solved the problem of drag and drop in the browser.
 I solved the problem of dragging with behaviour in the window in the browser.
 I found a generic format of videos.
 I found a way of storing vector graphics in one place on the web.
 These could be public.
 Programming elements could be in a publicly accessible place online.
["Green, L 2022, <i>Bots 1 2</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"Bots 1
 I started the web business in the future and the present.
  There were a set number of places.
  SSI in C was needed for more places.
  I had fifty As, or at least 50 breasonings for each conclusion.
 I needed bots as customers.
  I needed sales for them to make.
  I needed SSI in C for the backend of the web site so that it wouldn't crash.
  This required web hooks and LLVM.
  I needed ISO Prolog so that my apps would run.
 I wrote down five sentences per paragraph in the 50 As.
  Like the headache prevention zap, 50 As would make the bots appear and the sales work better.
  I wrote the detailed basis for the sale.
  I wrote side apps for SSI up and As to encourage them.
  I pointed to the next book from each book to help them.
 I listed all my revenue streams, including music, computer science videos, education, computer software and gold.
  I could buy property with profits.
  I could automate and control the product in information products.
  I avoided spiritual customers, but watched for time travellers.
  I learned the laws of the land and time.
 My company was within laws to not offer replacements for real degrees, and used an accountant from the future to help obey laws.
  A lawyer from the present could provide intersectional advice also applying to the future, implying that this would allow continuous positive function.
  My product was demanded by customers, even though it was thousands of years old.
  My computer software was demanded, even though it was seen as needing to be emulated, and helped students think in terms of first principles (wasn't just a vintage product), but could slot in with contemporary products.
  I also had to make sure that I never interfaced with these contemporary products to avoid transgressions, marketing the software as a retro (or foundational) experience.
 I realised that I could have bots after 50 As, and the degree professionally supported them.
  I could switch off the bot, allowing myself to visualise the setting in itself, and start a business about my ideas in themselves.
  I needed to find a way of converting my ideas into the ideas of the future time.
  I could use a bot to stay with if I couldn't secure housing.
  I did exactly what I wanted to do, for example walking around as myself for a while.
 I researched other planets in the galaxy to do business in, and different appropriate times.
  I worked out that the haemorrhoid objection to living in the times was false.
  I time travelled to do text to breasonings in a particular period of time in 5689 October to overcome this.
  I finished off the text to breasonings, consisting of meditation for (not only the university) students, in a few minutes.
  The meditation students from times away from text to breasonings just meditated or time travelled to use text to breasonings.
 I worked out how to spread my texts and businesses quickly throughout the universe.
  This required translation and security.
  I needed to mind read and communicate with aliens.
  The universe naturally supported pedagogy.
  I needed to set up a business to support them.
["Green, L 2022, <i>Bots 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"Bots
4*800-(16+80+80)/5=3165 sentence paragraphs
3165/80=40 80s
 I finished the app by placing the file in the app, automatically finishing the code.
 The bot transcribed the text.
 Next, I wrote the specification for the code I had written.
 Finally, I started the DevOps pipeline in the background.
 It alerted me if I had finished the code.
 I replaced the top-level flag when writing a predicate with different predicates.
 I thanked the bot for doing a good job.
 The alert told me this if the programmer hadn't finished the code.
 I ran continuous DevOps tests every two minutes while editing the algorithm.
 Even if I wanted to continue, I stopped when I had finished the code.
 I focused on one program, predicate or line at a time.
 First, the bot wrote the scene.
 Then, I tried different orders in diff combos to merge possible predicates.
 In addition, I tried various combinations of replacements for adjacent lines.
 Finally, I tried different combinations of parts of lines.
 I changed the diff combos algorithm in DevOps.
 The bot measured the yield.
 I focused on one predicate when it replaced another predicate.
 I focused on one line when it replaced another line.
 I tried reordering items and tried different combinations of replacements for adjacent items.
 The bot offered the bounty for help.
 I wrote the question.
 I wrote the answer.
 I determined that the solution needed redrafting.
 So I provided the reward for help.
 The bot included instructions.
 I examined the model answer.
 I substituted my values.
 I found the answer.
 I wrote units and diagrams and verified the order of magnitude of the solution.
 The bot delivered the goods.
 I manufactured the goods.
 I packaged the goods.
 I sent the goods to an address.
 Finally, I confirmed receipt of the goods.
 The bot bought food.
 First, I wrote down the body's required foods.
 Then, I modified it for variety.
 Finally, I found the most delicious recipes.
 I bought fresh ingredients and made recipes.
 The bot cooked the food.
 I listed the food needed to cook.
 I wrote a GAANT chart with the cooking times for the food.
 There was one item to cook.
 I taste-tested the food.
 The bot spiritually cared for the person.
 I found the person.
 I took them to their destination.
 I asked them which food they would like.
 I gave it to them.
 The bot discussed writing an algorithm with the person.
 I am the bot.
 I asked what the person would like to program.
 The algorithm explored a rigorous aspect, such as logic or another formula.
 It had a use, such as web, editor or graphics.
 The bot wrote the chain of uses for an algorithm.
 I noticed how the algorithms developed, involving new methods.
 I developed skills in using particular commands.
 I wrote my version of known commands.
 I learned how to write customised commands.
 The bot found shortcut commands.
 I noticed the new use of foldr, a customised predicate.
 I questioned why foldr was not in Prolog.
 I gave reversed input to foldl and called it foldr.
 I used the command with append and string_concat.
 The bot started concentrating on computer science by writing input and output in conjunction with types.
 I noticed commands to check types and modes.
 First, I wrote the command to check the type statements.
 Then, I wrote the command to check mode statements.
 Types relied on modes, which we could have by themselves.
 The bot could customise functional predicates by giving them new arguments.
 The argument determined a sub-predicate.
 Or it determined a sub-argument.
 I could write and call the predicate with a functional call to an intermediate predicate.
 I divided the predicate into different functions and called them functionally.
 The bot determined that the new argument was reverse sort.
 I wrote reverse(sort(list)).
 I used a typing predictor and pressed the tab to accept a suggestion.
 I found all results and placed them in n lists.
 There was a command to find unwanted non-deterministic results and convert code to C.
 The bot wrote its software.
 I combined predicates in new ways.
 I listed the commands in both predicates.
 I wrote their types.
 I combined combinations of commands, converting output from one into input in another.
 The bot inserted a functional cut, which only affected the not, findall or if-then clause.
 I wrote algorithms by combining predicates in new ways.
 I could combine parts of predicates together to give particular output.
 I could combine parts of predicates together, mimicking hierarchies of methods, for example, modifying List Prolog code by converting it to a Finite State Machine, making several changes, and converting it back.
 Or, I could find the best combination of changes to lines found with diff.
 The bot simplified the interpreter using constraint propagation.
 I wrote an interpreter in a few lines.
 First, I wrote the input and output, for example, 1 and 1, and 2.
 Then, I wrote the algorithm C is A+B.
 Finally, I wrote an interpreter to compute this.
 The bot wrote separate algorithms that had different functions.
 I wrote an algorithm in a few lines.
 I eliminated if-then clauses using constraint propagation.
 In addition, I eliminated findall clauses using constraint propagation.
 However, I eliminated unnecessary not clauses using constraint propagation.
 I diffed (sic) a line by splitting it into one character per line.
 Then, I wrote the new methods within new methods for writing an algorithm.
 I started with the first new methods.
 Then, I meditated and wrote algorithms with these new methods.
 Finally, I wrote the new algorithm after writing a required method.
 The bot helped create a new method in programming.
I tracked new methods with time.
 I wrote down the new methods in the algorithm.
 I could work out any combination of 8 commands and variables with Combination Algorithm Writer (CAW) = 8! = 40,320 possibilities to test, and I could test 16 changes with DevOps = 2^16 = 65,536 possibilities to test.
 As well as testing for combinations of lines and characters, I computed to concatenate closing brackets at the end of tested function names.
 The bot wrote the debugger, helping them write in a positive-functional manner.
 I used a mind-reading debugger, which rewarded me for thinking of alternative thoughts and letting me write the debugger.
 Instead of \"taking my point\" and telling me the answers or not allowing me to learn, the debugger provided spiritual practica so I could pedagogically mind map details when debugging.
 I found myself conversing with it, which I could do with neuronetworks, about new features and ways to tackle the problem.
 Just as writing a program to find a mathematical result enabled neuronal development and neuroplasticity, writing the debugger familiarised me with algorithm and debugger algorithm-level methods for debugging.
 The bot was mindful of intellectual property and learning while developing.
 I wrote the algorithm finder for the algorithm to configure the algorithm differently.
 I wrote new options to call the algorithm with, running different features.
 I wrote modules that I could plug in.
 I could quickly generate an algorithm that performed the task.
 The disabled bot preferred using new predicates wherever possible, with descriptive names.
 The person wrote a style sheet for how they wrote algorithms, such as unique names, indenting and choice of synocommands (sic).
 The person chose appropriate names for predicates and variables, allowing for the specific style of the algorithm.
 They used tabs in longer algorithms and a space for educational algorithms, which could be read more quickly by disabled learners.
 I used foldr append as a shortcut for append list.
 The bot tested that the instructions matched the program.
 First, I wrote instructions for using an algorithm, such as preparing, running, and a walkthrough.
 Next, I explained how to install and register a password if necessary.
 Then, I explained how to run the algorithm with examples.
 Finally, I explained how to use the algorithm, describing the input and output at each step.
 The bot varied the description of variables with one variable (per variable) per line.
 I wrote instructions for running an algorithm in the same format, with labels for inputs and outputs and examples.
 For example, I used the format predicate(+In1, +In2, -Out), where + denotes an input and - denotes an output.
 Then, I explained that In1 had the type [string1,{number1}], for example [\"a\",[1,2,3]].
  I labelled string1 as the name and number(s)1 as the scores.
 The bot found and suggested files with predicates called by the file.
 The algorithm presented useful statistics about the programming session, such as the number of new methods and suggestions, such as registering repositories called from the repository.
 I found the dependencies of predicates.
 For example, I split the predicate into groups of hierarchies that might continue back on the path and found the dependencies regarding the branches.
 In addition, I examined the individual commands to check for static results and ensuing editing out of them.
 When calling some predicates, the bot uniformised the word file to an atom, not a string.
 The person provided feedback about whether the instructions were clear, could have more detail, or need troubleshooting advice.
 I hired the tester.
 They surveyed the Read Me file for the open-source repository, finding improvements, tips and suggestions.
 I added troubleshooting advice and changed from grammars to term_to_atom for use with files, which prevented the need for some troubleshooting advice.
 The bot compiled specific algorithms in machine language.
 I wrote instructions for writing new methods; for example, I wrote a C-code generator to call from within Prolog.
 The compiler would compile this code at compile time.
 The compiler wouldn't use this code if trace were used, for example, from the start of the algorithm.
 However, the compiler would compile the entire program to C if it didn't contain complex backtracking.
 The bot converted the Prolog grammar to C.
 I gave positive feedback about the new method using a grammar in C.
 The grammar was a string interpreter in C.
 It contained no choice points.
 It had lookahead to test but not get the next token.
 The bot grouped commands.
 I wrote the best method, a combination of string_concat and append.
 I wrote flatten([[[a]],[b]],A), A=[a,b].
 I wrote foldr(string_concat,A,B), B=\"ab\".
 Then, I wrote flatten_foldr_string_concat([[[a]],[b]],A), A=\"ab\".
 The bot notified the user or tried several approaches to debugging the uninstantiated command error, pending approval.
 First, I found the modes throughout the algorithm, debugging mode errors.
 Second, I wrote type and mode statements for the algorithm's input and output.
 Third, I followed the types and modes of the commands from the type and mode statements.
 Finally, I found uninstantiated command errors.
 The bot optimised the predicate and split and joined predicates into those with different functions.
 I verified that the predicate was customised and that it didn't have unnecessary constants in it.
 I checked for expressions such as A=B+0.
 I changed it to A=B.
 Then I changed B to A and deleted the expression if possible.
 The bot found new combinations of parts of functional calls.
 I wrote the possible new algorithms using 540 degrees (the bag algorithm).
 At first I changed arguments [a,b],[a,c],[d,c],[d,e] into [a,e].
 Then I did this with algorithms.
 This technique applied to groups of characters and, therefore, not groups of lines or groups of predicates.
 The bot entered input and took the output from a Prolog algorithm using a text file.
 I wrote longer reused predicates, the need for which I detected with a neuronetwork that examined standard out.
 I ran C from Prolog to process standard out.
 I found the need for the maze algorithm.
 I mind-read and helped the student with their desk and missing phone.
 The bot quickly added the variable type to type statements in List Prolog - the text method stored algorithms as data that could be manipulated and analysed.
 Then, I wrote the List Prolog algorithm.
 First, I strictly typed the variable as a string, which failed when the variable was a variable (A=_).
 Or, I typed the variable as any, which succeeded if the variable was a variable (A=_).
 The bot tested the series of websites as an SSI algorithm.
 I propagated the constraints and optimised the predicate as a result, for example, simplifying two interpreters into one.
 I wrote one interpreter that called the other one.
 These could be LPI, SSI or SSI Web Service (SSIWS).
 If SSIWS crashed, a background app would detect its life sign stopping, and the algorithm would restart it.
 The bot concluded the icon was a pear, and the sound effect was a trumpet trumpeting.
 Next, I detected educational details for a student's conclusion, finishing them off quickly if they came to it.
 The student neared the conclusion, triggering a mind-reading alert.
 Next, I detected how many details the student was with-it over, helping finish off, correct, or finish all of them.
 When they reached the conclusion, a level clear sound effect and icon would appear.
 The bot spelled \"SSIWS\" backwards.
 I generated data for the predicate from type and mode statements.
 Then, I matched the data to the type and mode statements.
 I could generate the type and mode statements from the algorithm and then do this.
 Next, I read the names and data in the algorithm to find more specific data to generate, such as types of types (music, names or mathematical data).
 The bot replaced reused groups of commands with a single command.
 The method was correct and good (simple enough).
 The method was msort, select or writeln1.
 One of these provided the right result.
 In addition, this command singly solved the problem.
 The bot cut some of the loose choice points.
 The algorithm answer on the forum was new.
 I checked for the same or similar questions.
 I checked whether their answer already existed or was new.
 For example, I put if-then antecedent or not clauses in a separate predicate with cut at the end.
 The bot wrote a time-out to remove loops he was suspicious were infinite loops.
 I verified that an input was not a variable (A=_).
 I questioned whether the free variable expression could be simplified and infinite loops eliminated.
 A professor said Prolog would still process them.
 It might work in Haskell.
 The bot removed an infinite loop in the middle using constraints.
 I multithreaded continuously integrating blocks of code.
 The blocks went through pipelines.
 The blocks were helpful because the program could save them.
 I could skip over the wrong blocks.
 The bot found data to solve a problem at the frontier of research, for example, converting a state machine to a register state machine.
 I generated new inputs with two inputs going together.
 The inputs were of the same or compatible types.
 They connected using an ontology.
 Finally, I tested that the output was correct.
 The bot looked at matrix images while programming to help remember to enter the correct variables at the right time.
 I wrote educational algorithms, which let the human make the decisions.
 The human commented.
 They made a suggestion.
 There was a mistake detector.
 The bot could copy the data.
 I converted the state machine to a register state machine.
 The state machine performed recursion by storing the addresses of records in memory.
 The register state machine added one to move from one memory address to another.
 I added one to each item in the matrix.
 The bot helped by reminding me of code with similar commands.
 I wrote the algorithm to predict its heading and help write it.
 I identified the type of algorithm.
 I recognised the feature.
 I helped with unknown features by writing code using similar commands.
 The bot passed around variables in variables in variables.
 I used a single variable to store multiple variables.
 The variables were in order or not in order.
 I represented the screen as a list of lists (rows of pixels).
 This technique was faster than using a list of pixel items.
 The bot flew over the complete algorithm.
 I replicated the method for representing a screen to represent 3D voxels.
 I calculated the positions of the voxels given textures and lighting, stored these and represented the field.
 I rendered the movie.
 I had movies for data flow analysis, bottleneck solutions and images of missing features, such as findall in a converter.
 The bot optimised the converted code.
 I started in Prolog without choice points to convert to other languages.
 I optimised this code.
 I converted to C.
 Or, I converted to C with choice points, such as findall and cuts.
 The bot helped the teacher customise materials for the disabled child.
 The person's life influences their job.
 They needed an algorithm to automate or speed up neuronetworks in Prolog.
 The data was small but relevant.
 The neuronetwork was called with a command in Prolog and compiled in Python.
 The bot checked the wireframe model and then rendered the scene.
 I wrote the 3D scene using neuronetworks.
 I specialise in fine art sets and make-up.
 However, I retained creative control over the music and appearance.
 The algorithm finished the script and everything else and found appropriate camera work.
 The bot ran an interpreter that stored files in memory, speeding up the algorithm.
 I wrote an algorithm that helped find commands and files.
 It has used the text to help predict the commands and file names.
 It created files from the commands, auto-populating them with predicted data.
 I caught missed ideas and possibilities and completed large assignments in a short time.
 The bot helped find more relevant details on the lines.
 I wrote an algorithm that alerted me to new algorithms, methods and research.
 It suggested storing computer language grammars in one place, writing converters, grammar processors and other algorithms.
 I wrote modules for my interpreters.
 I detected the error of two equivalent pathways in the interpreter and deleted one.
 The bot automatically triggered the CI/CD pipeline on a change to test changes.
 I wrote the magical algorithm to show the diff results as an HTML file.
 I replaced repeating items in the before and after files with new numbers, increasing in each file.
 I could select the parts I wanted and could edit the file.
 I could instantly see results in the tests of edits.
 The bot quickly compiled and searched for changes in backups.
 I generated types of data for testing.
 If the order of results had changed, I entered the same input and recorded the new output.
 I wrote an algorithm that asked me to write test cases for new features.
 I also deleted test cases for deleted predicates.
 The bot modularised the algorithm and deleted infinite loops.
 Next, I compiled changes to the repository over time, finding the minimum changes using DevOps.
 Next, I checked each change since the repository reached maturity, testing and minimising it.
 If something was missing, I put it back or added needed components.
 Finally, I debugged and optimised it.
 The bot debugged and wrote new code as part of CI/CD pipelines.
 I touched up pretty print to have possible patterns in a data file.
 I signalled one of these data sets or modifications to them.
 I wrote the data like a pretty printed file.
 I constantly tried optimising code as part of CI/CI pipelines.
 The bot trained the compiler on the interpreter's tests.
 I compiled and ran an interpreter with itself, testing any new predicates.
 I tracked the features the interpreter needed to run itself.
 For example, I supported multifile algorithms, included libraries and dynamic variables.
 I split predicates into requisite functions and tested each of them.
 The bot traded off expansionism against contractionism of code when it felt natural.
 I tested the code against the criterion of intuitiveness or transparent clearness.
 I wrote the C interpreter.
 It started in the middle of the Prolog interpreter.
 I converted the interpreter to C by allocating memory to C.
 The bot wrote the series of programs necessary to process files.
 I wrote a file processor algorithm writer, which took starting and ending frames and produced a list of rules to plug into the file processing algorithm.
 I wrote the machine code, the hexadecimal version of the code, and the lowest-level interface to the CPU.
 Assembly language contained a linker, which linked to modules needed for an algorithm.
 These might include memory-handling routines.
 The bot optimised the circuit, removing redundancy.
 The game involved the player's reaction and touch typing skills.
 I created the Central Processing Unit (CPU).
 It processed data at a specific cycle rate.
 It interpreted, processed and executed instructions using logic and transistors.
 The bot verified the generated type statements and data.
 I solved the bug by changing the mode statement.
 I developed thoughts about politics, religion, medicine and philosophy.
 These represented the outside world's view, which would receive the ideas.
 The input and output were correct.
 The bot tested the physical limits of the system.
 I found when the file processing algorithm was needed by treating the disk as memory and checking the data transformations.
 I wrote As or high distinctions about politics, religion, medicine and philosophy.
 These included the most prestigious thoughts or 4*50 As.
 Professors had enough correct ideas.
 The bot entered the simulation and started a movement.
 The programming language had the appropriate features to complete a task.
 In addition to politics, religion, medicine and philosophy, I wrote on departments I wrote on, such as pedagogy, Computational English, mind reading, time travel and immortality.
 The high distinctions on these topics were checked and documented.
 The professors also accepted and checked their thoughts.
 The bot had medicine and worked at the usual rate.
 I eliminated duplicate sentences in the database.
 I developed five thoughts per day involving multiple departments with the Breasoning Algorithm Generator (BAG).
 I wrote the original sentence.
 I wrote perspectives (with the latest literature) on the latest details about the idea.
 The bot treated mind reading and high distinctions as dealing with rectangular prisms representing data.
 I instructed the person to write an algorithm with an algorithm.
 I gave high distinction to a separate character representing me.
 The character listened to everyone in the company.
 They helped them with their work.
 They gave 4*50 As and uncovered new possibilities.
 The bot reduced the number of the predicate's arguments by combining them.
 I wrote three points, multiplied by three analysis levels, for a thought I developed.
 I wrote the conclusion.
 The 4*50 As were divided into three by three.
 To speed the algorithm up, I wrote the analysis based on the first sentence of the previous section in the second and third sections.
 The bot found the better of two lines to include in the code.
 I wrote intuitive code by splitting lines in the same space with Lucian CI/CD.
 Splitting into lines was better than grouping them to separate tests in comments.
 I wrote the test and code, tested it and repeated this until there were no more changes.
 Separately, I wrote thoughts on music to analyse texts from a \"life and science\" perspective.
 The bot automatically fixed bugs in predicates given specs.
 Lucian CI/CD tested each branch bottom-up rather than the whole algorithm bottom-up.
 Lucian CI/CD tested predicates bottom-up.
 This method allowed testing for combinations of more changes.
 In addition, it allowed narrowing bugs down to individual predicates.
 The bot chose from the hierarchy using check/off/some checkboxes.
 Lucian CI/CD allowed specifying the branches of the algorithm to test and the types of tests to run.
 I listed predicates in the touched files and their predicates.
 I trained BAG to pair particular pairs of words.
 I included higher-order commands, such as foldl and maplist.
 The bot stated that the new method of input was bits.
 I numbered the predicates in Lucian CI/CD.
 These numbers were in bits.
 I started with the first level predicate, numbered one.
 I progressed to second-level predicates numbered two, and so on.
 The bot selected the graphic of the branch to test.
 The 3D scene involved new camerawork.
 I ordered the predicates in bottom-up order.
 It was a post-order depth-first traversal.
 I concentrated on testing each branch one at a time.
 The bot optimised the code by removing unconnected commands that numerically added nothing.
 I stopped testing the repository when a test failed.
 If there was a loop, I grouped the predicates to test together.
 To avoid individual parts of large loops being untested, I tested them in smaller parts.
 There was an optimiser to remove extraneous commands that didn't change data.
 The bot only tested predicates with changed predicates below them, but not if the instance of the predicate had been tested already, where the test was the same.
 I only tested predicates with changed predicates below them.
 I tested predicate groups, whether or not an instance had been tested.
 I recorded a predicate that was tested.
 Even if another predicate had called it, I didn't test it again.
 The bot found arguments by running the Breasoning Algorithm Generator (BAG) on Immortality 1 ideas.
 I found the new method for the algorithm by running BAG on the algorithm.
 I synthesised common and uncommon parts, finding rare properties, such as modules, functional calls, use of maplist or foldl or foldr or shorter algorithms.
 Or, I developed add-ons that read like literary classics.
 I developed thought histories that lasted long enough into the future.
 The bot applied human experience or ways of thinking from an idea to an idea.
 I developed ideas from old essays, perspectives, theory books or copies of my thoughts.
 I wrote on induction, interpreters and research, applying my ideas and helping others.
 I went through my to-do folder, email and copy ordered.
 The bot also applied politics to an argument (where different algorithms represented different sides of politics, requiring parts of other algorithms) and fine art to an algorithm (an object represented by an add-on).
 The bot could use get and put predicates to test and replace them using numbers.
 I found a new method giving the same result, for example, using subterm with address to search for, process items and build lists.
 In Lucian CI/CD, I loaded all the predicates needed for testing the predicates the main predicate depended on from all the files (including \"includes\" statements).
 In addition, I tested the current group of predicates, clauses from the same predicate or those in the same loop.
 It could load all predicates and only change the tested ones, but the current algorithm would only test the current predicates.
 Only tests for these current predicates would be used for them.
 The bot worked out the dependencies, main file name and predicate.
 I described and stored the input with words and instructions on processing it, for example, with a linear search or subterm with address.
 In Lucian CI/CD, I always included the \"includes\" statement because all files were written with comments and certain predicates.
 The main file was always loaded, and this loaded all the included files, ready for testing.
 The main file contained the primary file name for testing and the primary predicate name and arity for finding dependencies.
["Green, L 2024, <i>Bots 2</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Bots 2
 The bot tested graphics as data and algorithms on the fly, reporting if they had errors.
 The graphics algorithm maker outputted the animation algorithm, which stored pixels in memory and could be translated to HTML.
 I wrote tests in Lucian CI/CD as %a(A).
 Other tests could be written as %a.
\n%false.
 In addition, these two lines could be written on one line.
 The bot supported multiple algorithms in a repository with numerous main files and main predicates.
 I tracked how the predicate was added to over time, rating its simplicity, functionalisation and possible problems with under or over-verification.
 I checked the List Prolog Package Manager (LPPM) registry for dependencies checked in Lucian CI/CD.
 I provided an information bureau at the end of Lucian CI/CD, which pointed users to LPPM if files were missing, to the main file if files were missing or predicates were skipped, or to tests if a test was missing or wrong.
 I supported multiple main predicates.
 The bot quickly found errors in the dependencies, the main file or the tests, represented as numerical data.
 I analysed algorithms as patterns of numbers, predicting them, completing them and finding patterns in them and their diagonalisations.
 Lucian CI/CD reported an error on the wrong main file data.
 There was an error if the main file was missing or didn't contain the main predicate with the correct arity.
 A helper algorithm could find the suitable main file with this predicate or the predicate for a main file.
 The bot updated the algorithms automatically and converted old data files to the new format with a new version of the algorithm.
 I found the algorithm maker that the neuronetwork spent so many resources on to save resources.
 In the Lucian CI/CD documentation, I instructed users to delete Github_lc/tests_xxx to start again after a version change or if the algorithm or data had been modified.
 The data file format may change with a difference in the algorithm, or the data file might become corrupted.
 I stored all data in a separate folder to update only the algorithms.
 The bot included the compatible Lucian CI/CD version in downloads.
 The algorithm maintained fast performance as it developed, with all popular features and supporting the same features.
 The other algorithms seamlessly integrated with it and its features.
 The main_file.
txt in Lucian CI/CD contained [\"a.
pl\", \"a\",1], the primary file name in the repository, the first predicate in it and its arity (the number of arguments).
 The team reverted to a previous version of this file if there was a problem.
 The bot critically examined the algorithm in the degree.
 I tested the algorithm with test input generated from grammars and input that the grammar couldn't generate to test for errors.
 The Lucian CI/CD tests tested for variables in the form A, not _123.
 I simplified my algorithms to translate to a new language if my programming language become obsolete, and simplified my texts to translate and bring to the new world.
 I tested the latest algorithms and grammar-checked the new texts.
 The bot found the algorithm either from input or input and output.
 I found the algorithm from the input; in other words, I wrote the algorithm and then the result.
 Lucian CI/CD warned if there were more than seven changes to a set of current predicates.
 These were either in chunks of changed lines or changed lines.
 The number seven could be increased because predicates were shorter than algorithms, which it was designed for.
 The bot printed the log of the predicates in order of testing.
 I could tell the modes from the data and the variables I labelled.
 The Lucian CI/CD diff HTML file contained the finished deletions, insertions and changes, or two columns, one for the initial and one for the final files.
 This table included groups of predicates in each row.
 I optionally printed the tests for each group of predicates.
 The bot supported other programming language parsers later.
 I found the uses for the depth-first search in different areas of study.
 I always included new tests and comments in the latest version of the algorithm to test in Lucian CI/CD.
 The limitation of tests, comments and data was that they couldn't be tested for, so the new comments always replaced the old.
 The alternative was to do this with tests and comments but test data, treating it like a possible another programming language, but it was challenging to track access to it for generating dependencies.
 The bot ran the complexity viability algorithm to see if a neuronetwork was necessary.
 The algorithm explained the algorithm it completed and why it was better than other methods.
 Lucian CI/CD tested combinations of changes from old and new versions of the repositories.
 Lucian CI/CD took the list of non-comment, non-includes predicates bottom-up and tested groups of clauses or predicates enclosed in loops, saving working combinations as it went.
 Lucian CI/CD was one tool that completed the algorithm, operating on human work or relied on algorithms to debug and complete predicates.
 The bot wrote the game version of the algorithm for the disabled student.
 The algorithm simplified the text into different levels of difficulty for disabled students.
 The Lucian CI/CD test changed the predicates' clauses.
 It was a significant idea to backdate repositories if tests became less or more complex and manually adjust the code.
 The disabled student wanted the same number of details.
 The bot inserted the predicates like a frog reaching a lily pad.
 The disabled student copied the text with the answer.
 Lucian CI/CD recognised predicates from their name and arity and inserted the new ones in the original order (sorted).
 It didn't need the predicates that called these predicates, as testing only tested the current predicates and the predicates they called.
 If there was a loop of predicates, this was tested in a group of current predicates.
 The bot used a neuronetwork to find or debug a predicate.
 The Combination Algorithm Writer (CAW) was sped up using a neuronetwork in the interpreter, with a question of whether the user wants to change to it.
 Lucian CI/CD appended the old predicates to the new ones to find the dependencies and found the best combination of old and new chunks in groups of current predicates in these.
 Lucian CI/CD found the groups of current predicates or clauses with the same name and arity.
 CAW found combinations of new, untried commands.
 Lucian CI/CD found combinations of previous chunks (consecutive lines of added, deleted or changed code) from the current and earlier versions in order.
 The bot quickly completed the algorithm with the help of Lucian CI/CD.
 The timer timed how fast the programmer completed the task, noting how complexity added to the time.
 Lucian CI/CD tested whether a deleted or inserted predicate was or wasn't needed or combinations of added, inserted or changed (including reordered) parts.
 If the predicate and test have been deleted, there is no test for the predicate, and it will be deleted.
 There will not be a test failure if there is no test, but the rest of the code doesn't require the predicate.
 The bot edited the algorithm online with a CI/CD tool.
 The algorithm modularised the extended predicate, generating test data and reusing the modularised predicate.
 I identified the clause numbers to group clauses in Lucian CI/CD and assigned old or new labels, respectively.
 The old and new tags were abstracted as insertions were like deletions when finding their best combination.
 The on-the-fly CI/CD algorithm suggested necessary changes before or after saving.
 The bot checked if a missing test should be added to validate a needed predicate.
 The algorithm simulated the scene of programmer actors with their political viewpoints.
 Lucian CI/CD continually tests inserted or deleted predicates, including predicates they call.
 All called predicates need a test or will be omitted, causing failure for predicates that call them.
 There will be a warning if a current predicate has no test.
 The bot listed types of relationships to help order items pointing to an item, preserving their order from the dependencies.
 The find dependencies algorithm in Lucian CI/CD should find that blue is before loop(red, start) because both red and blue lead to the start, and that blue should be before start, given start:-red, start:-blue, red:-start and blue:-null.
 There is a loop from the start to red and back.
 Both red and blue lead to the start in start:-red and start:-blue.
 Blue should be before the start, indicating it is before or lower down than loop(red, start) on the depth-first post-order graph.
 The bot tightened the ordering of predicates in Lucian CI/CD.
 Lucian CI/CD ran diff on sets of old and new current predicates to find inserted, deleted and changed chunks of lines.
 These chunks were ordered old, then new, for example, old: \"%a(2)\", \"a(1).
\" and new: \"%a(1)\" and \"a(2).
 However, if lines 2 and 3 were selected, they would be incorrectly ordered with the code before the comment.
 The merge predicates algorithm was run to group comments and predicates with the same name and arity to rectify this misordering.
 The bot kept similar predicates together.
 The merge predicates algorithm placed predicates with the same name and arity of existing predicates after them.
 The merge predicates algorithm found the first group of predicates with the same name and arity.
 It preserved the new or old label on the predicates.
 Then, it inserted these predicates after the similar predicates.
 The bot used nested loops to process strings.
 The first find tests algorithm used consecutive append commands.
 For each line, I found the next middle characters.
 I found whether these middle characters were tests or test results.
 I turned choice points from consecutive appends into C loops.
 The bot could find test results with multiple values or point to tests that detected vars or unwanted extra results.
 I found the tests in files with Lucian CI/CD.
 The second find tests algorithm found comments matching tests and test results using functor and arg.
 I found the test and then the first matching test result.
 I found unique pairs of tests and test results until none were left.
 The bot brought my attention to noteworthy correspondence to me.
 I gave back similar pedagogical details that others gave to me.
 I detailed the work.
 There were twenty pages or an exhaustive number of details for a business.
 I counted the sentences in the letter and replied to it.
 The bot hid the password and browsed the text files.
 I wrote the account area web app with the Vetusia engine.
 The Vetusia engine passed arguments from pages converted from Prolog predicates.
 The input was through a form, was processed and passed to another page.
 The converter converted Prolog to Vetusia Prolog.
 The bot helped the disabled student to access the material.
 The web app taught courses.
 I read the course.
 The Vetusia engine allowed the text files to be downloaded.
 I answered the questions.
 The bot didn't accept some replies while encouraging others.
 I wrote the assessment and plagiarism checker Vetusia engine.
 There were fact, open-ended and critical analysis questions.
 The students may write creatively in an application, poem or their algorithm.
 The plagiarism checker checked against student responses, catching early attempts and helping students.
 The bot attached notes to the database.
 The Vetusia engine helped students with questions.
 It helped clarify definitions, find deeper meanings or develop a book of algorithms.
 They could add their creations to their photo album.
 Rather than a neuronetwork, it searched a database.
 The bot didn't store any private details.
 I accepted payment using State Saving Interpreter Web Service (SSIWS).
 I made the cart software using SSIWS.
 The algorithm used a third-party payment service.
 The user paid with a single touch.
 The bot warned on illegal backtracking code.
 The Vetusia engine Prolog code to Vetusia Prolog code.
 The read_string call was changed to a form.
 The form results were processed after being converted to read_string's result.
 There was no backtracking to previous pages' algorithms.
 The bot published its half of the conversation.
 I wrote the chatbot.
 I programmed my philosophy in an ordered way.
 It helped students think of new angles on philosophy.
 It asked its students if it could publish their conversations.
 The bot helped the customer with improvements and different algorithms.
 I wrote the sales algorithm.
 I solved the binary opposition with each customer.
 The chatbot helped customers with an A for their thoughts about the product, including algorithms.
 The chatbot found whether the customer wanted a particular direction and helped them with it.
 The bot asked, \"Where's my 'L' thing? (light)\" I tested the website.
 I made a file to input into the web form, while it was in the form of a State Saving Interpreter (SSI) (non-web) algorithm.
 The file could be inputted into a system of shell scripts on a server.
 Or it could be inputted into a List Prolog algorithm and output collected.
 The bot made everything equally easy and user-friendly.
 I tested the courses.
 I tested with software.
 I tested with people.
 I measured the binomial distribution of results and ranked the courses and ideas by difficulty.
 The bot developed a type system that checked for type errors at compilation.
 I created a strong type system for State Saving Interpreter (SSI) at run time.
 It allowed trace to be used online, where only the first instance of a called predicate needed to be recorded to retry to save memory.
 Users used strong types to learn and verify data at compilation and run time, preventing errors and optimising the types system.
 If only the type errors could be printed, predicates given and erroneous data could be caught.
 The bot found the types matched a call earlier in the predicate.
 The compilation type system didn't act like a compiler that traversed a type state machine but found input and output types from the code.
 It recorded the type flow, including decomposing or building lists and verifying or converting types.
 It could check algorithms bottom-up, finding incompatible types passed to predicates.
 Using Lucian CI/CD's find dependencies algorithm, the type checker checked types built base-up (where running the algorithm bottom-up found erroneous predicates) were returned and correctly fit into calling predicates.
 The bot used Lucian CI/CD with the compilation types checker plug-in to detect erroneous types.
 The predicates were only checked when all the predicates they called were checked.
 If \"predicate a\" called \"b\" and \"c\", \"b \"and \"c\" were checked, followed by \"a\".
 Then predicates that called a were checked.
 This way, type errors could be found and resolved in individual predicates.
 The bot recorded the type flow in branches.
 I found types in branches.
 The types exiting the branches needed to be compatible, i.
 the same or one fitting inside the other.
 For example, [_] = [_], or {number} = [].
 So, [[number]] may fit inside [any].
 The bot processed clauses from base cases up, where the most specific types were kept.
 Lists, which could match empty lists, needed to be recognised from individual clauses, i.
 list decomposition or building.
 Where a multiple clause predicate could be tested against specifications, the most specific fit-into types from the clauses needed to be kept.
 This property was like a painting.
 For example, given the types A={{number}} and A={any}, A={{number}} was kept.
 The bot ran the algorithm with type checking to prevent errors.
 Given failure in Prolog can be right, multiple types were possible for a predicate, and an algorithm's top predicate could fail.
 Types were only kept if they fit inside each other or were different.
 Sometimes, loose type checking would succeed, but the algorithm might fail if it passed a wrong type, necessitating run-time types.
 Multiple types were possible, and all possible types were assessed in the algorithm bottom-up.
 The bot deleted unused types.
 Types that fit inside another type were treated as separate if they were returned independently by a predicate.
 The types were only merged if they always merged, i.
 in a base case.
 For example, numbers and strings might always be replaced with numbers.
 Alternatively, they were kept separate, for example, if there were two base cases.
 The bot found cases where findall always failed or returned an empty list.
 I found types in findall.
 Findall built a list.
 This list contained a certain number of items.
 The most general set of types of these items was found.
 The bot failed a predicate if its types didn't fit with other types.
 I found types in if-then.
 In this logical structure, e,(a->b;c),f, if a is true, then the types of b follow a; otherwise, c's types follow e.
 The types of f follow either b or c, which are \"creative\" types, possibly creating new types.
 At least one of the possible types from a predicate must satisfy another predicate.
 The bot passed the state machine for the types on the server, with the position in the data recorded.
 I generated the state machine for the type system.
 I found statements for \"brackets\", \"lists\", \"numbers\", \"strings\", and \"any\" types.
 The conjunction of types corresponding to a type was listed.
 In the type checker, the types were checked, and the data and the position in the state machine were recorded.
 The bot compressed the types when there was only one pointer.
 I converted the type statements and recursive types to a state machine.
 The types were conjunctions, pointers or terminals.
 The address of the pointed-to type was stored with the pointer.
 In addition, the pointed-to type, like a predicate, returned to a stack's pointer.
 The bot differentiated static brackets from lists.
 In the state machine, brackets were a statement type.
 Brackets around data formed an empty list, a list or a list of lists.
 They were represented as \"[]\" for an empty list.
 Or, they were described as \"[types]\" for other types.
 The bot iterated through list elements.
 List types were loop statements containing other statements.
 Lists, unlike brackets, included repeating lists.
 Lists repeating 0 times were empty lists.
 Lists were statements that the algorithm returned to the start of when possible.
 The bot returned whether the types had returned true or false using a compiler.
 I wrote the type checker to traverse the state machine with the predicate input on entry or input and output on exit.
 The data was in the form of numbers, strings or lists and was fed into the algorithm part by part.
 Choice points following failed branches were followed.
 The interpreter stored these choice points.
 The bot stated that if the types failed, the predicate failed.
 The type checker algorithm checked the data matched the types, recording the choice points and progress so far-the data, i.
 number, string or others, needed to match the types.
 If a type failed and no other branches worked, the branch failed.
 The types and the algorithm failed if there was no working branch in the entire set of types.
 The bot possibly returned that the predicate was successful so far.
 The choice points arose from the multiple predicates called from a type statement.
 For example, \"a->number\" and \"a->string\" created a choice point.
 Like SSI, if the data type doesn't match \"number\", then \"string\" is tried.
 When a successful type is found, the branch returns true.
 The bot got the concentrated mental image ready, and the algorithm read their mind.
 The algorithm explained the code.
 The algorithm attempted to summarise the algorithm description into one line.
 It identified and explained recursion, operations on types of types (types of algorithms) and any problems with how the algorithm worked.
 It suggested error corrections, simplifications and comments explaining the algorithm.
 The bot didn't upload sensitive files.
 I ran the algorithm to give secure code.
 I installed a third-party algorithm to check the code.
 I scanned for passwords, user names, API keys and account numbers.
 These were not permitted to be committed.
 The bot tried to avoid backtracking with recursion and only used backtracking in findall.
 I analysed the cut command's behaviour before programming it.
 I cut choice points from the whole program, then programmed a version of cut to cut only choice points in the current predicate.
 I didn't forget the predicate's future clauses.
 However, I decided to avoid cutting choice points in previous upper predicates.
 The bot specialised in helping the child make up games.
 I stated that the robot software could be a child's friend.
 It answered simple science questions.
 It explained that there were no scary or imaginary things.
 It played games such as tiggy, hide and seek, computer, card and board games.
 The bot recommended books, leaving non-computational books to the child's imagination.
 The robot was the teenager's friend.
 The teenager learned meditation.
 They saw friends.
 The robot drove them around, watched movies with them, didn't eat or drink, reminded them of things they needed to know and was their study partner.
 The bot could get from and put values into memory, add to, test and jump as instructions in the register machine.
 I offered insights into register machines.
 I programmed a register machine in Prolog.
 I ran a program that repeatedly operated on items in memory.
 I fetched an item from memory, added one, and put it in another location in memory.
 The bot guessed computed whether a>b.
 I explained how the register machine program worked.
 The program jumped to a specific line if a register contained a particular value.
 In addition, a register instruction may jump to a separate line.
 I could go to a subroutine and return to where I came from using a stack.
 The bot simplified the interpreter and converted it to C.
 The child learned advanced computer science.
 They became confident by writing long, detailed plans or computer games.
 They designed a font, wrote a programming language or wrote algorithms that found other algorithms inductively.
 I found algorithms found algorithms with enough of them in the database.
 The bot added types to the register machine interpreter.
 The child wrote the interpreter.
 First, they wrote a parser.
 Before that, they wrote a binary search tree traverser.
 I modified a register machine interpreter.
 The bot combined Outdoor Education with mathematics.
 I wrote a primary school simulation.
 It meant the mathematics from it.
 It contained algebra, geometry (programming angles on a computer), and using computers.
 I solved problems and used magic formulas such as the McCarthy 91 function.
 The bot thanked their primary school teachers for speed and accuracy and for learning addition and multiplication tables.
 I covered calculus.
 I could add and multiply.
 I could visualise algebra by thinking of a formula finder.
 Calculus requires manipulating algebraic expressions, defining functions, and using basic trigonometry.
 The bot covered curved lines in calculus.
 I covered linear algebra.
 I found the number of legs in 6 dogs and five hens.
 Linear algebra involves determining length, area, and volume.
 Linear algebra found the length of straight lines involving linear equations.
 The bot covered the argument for Combination Algorithm Writer (CAW).
 I covered discrete mathematics.
 Discrete mathematics studies mathematical structures that are distinct and separated.
 For example, these structures may be combinations, graphs, and logical statements.
 Discrete structures are finite or infinite.
 The bot found the correct answer using logic.
 I covered logic.
 In CAW, the base case needed to be created before the clause that referred to it.
 CAW could find formulas.
 I could modify CAW to call predicates with an argument [A|B], which it could convert from append (see Education of Pedagogy 3, paragraph 2).
 The bot quickly identified the need and invented new technologies to help the person.
 The robot considered and responded to all thoughts of the person.
 The person suggested a positive question or problem from their experience.
 This problem required solving it with computation or automation.
 The robot listed the variables, formulas and logic required.
 The bot changed to C, converting from Prolog and not using unnecessary choice points.
 The robot was a meditative companion.
 The robot found the best meditation course.
 Each thought was straightforward and satisfying.
 The robot helped visualise data flow analysis, type flow analysis with colour codes and diagnosed bottlenecks in algorithms using colour codes.
 The bot tested the graphics line by line for colour, placement and animation.
 The bot tested graphics as data on the fly, reporting if it had errors.
 Graphics must be tested as data and algorithms to test their appearance and logic.
 I tested that the graphics looked right, were logically displaying correctly and that the whole game worked from start to finish.
 I forgot Nietzsche with Grammar Logic (GL) anyway.
 Lucian CI/CD was a necessary way to refactor, debug and point to debugging.
 The bot tested graphics as algorithms on the fly, reporting if it had errors.
 I tested whether the graphics-producing algorithms, such as graphical data structures, had the correct input and output.
 This step rigorously verified the algorithm’s logic, using Lucian CI/CD to build the algorithm with only parts supported by the tests.
 This method required checking the code before it was as complete as possible, the tests, the code afterwards and the algorithm’s result.
 The bot made an animation editor based on a programming language.
 The graphics algorithm maker outputted the animation algorithm, which stored pixels in memory and could be translated to HTML.
 The animation consisted of frames of graphics constructed from vector shapes, which were exported as HTML tables as graphics.
 I used meta refresh to animate the images.
 First, I rendered the bitmap graphics.
 Second, I saved them as HTML files.
 The bot aimed for the desired mathematical result and achieved it.
 I made a graphics package that started with an arc and then transformed it into a 3D plane.
 I described the central coordinates of the arc and its dimensions, then created it as a sequence of straight line vectors, then placed these on a plane in 3D and rendered it from a certain angle.
 I could manipulate this plane, rotating it or changing the position, size or orientation of parts of it.
 I checked that the result was correct using a grid.
 The bot included self-standing variables as commands in List Prolog.
 I wrote Lucian CI/CD tests as %a(A).
 I entered logical tests in Lucian CI/CD.
 I entered A=true, B=true in the previous version and A=false, B=false in the current version and found A=true and B=false to be the combined solution with the algorithm A, not(B).
 A more complicated algorithm may have multiple assignments (sets of satisfying values).
 The bot wrote simple mathematical problems with CAW.
 Other tests could be written as %a.
\n%false.
 I entered tests with variables in Lucian CI/CD.
 I wrote a programming language with expressions with variables to check.
 For example, I entered A=a, B=b in the previous version and A=c, B=d in the current version and found A=a and B=d to be the combined solution with the algorithm C is A+B when a=1,b=2,c=2,d=1 and C=2.
 The bot possibly avoided moving up non-deleted items in a deletion.
 The queries and results in Lucian CI/CD tests could be written in one line.
 I wrote an assembly program to sort by finding minimum values.
 I found the minimum values, deleted them, printed them, and then repeated this with the rest of the values.
 I deleted the item from the list and then moved the other items up.
 The bot supported multiple algorithms in a repository with numerous main files and main predicates.
 I wrote an assembly program to search.
 I stopped going down or across when I had found the answer.
 I found a way to prolong my longevity by breasoning out 4*50 Breasoning Algorithm Generator (BAG) high distinctions in both the home and future times by being given 4*50 person high distinctions for claiming that immortality helped keep an actor’s appearance the same and meeting outstanding students in the MBA.
 Someone must have seen my brown hair in the future and my apparent grey hair in the present and worked out that I needed to breason out 4*50 BAG high distinctions each day in the present.
 The bot tried the third level of quantum pointers to be schools, the fourth as other companies and the fifth as different universes.
 I supported Unicode in Prolog.
 Unicode was the modern equivalent of ASCII.
 I encoded each Unicode character in the appropriate format.
 Separately, I breasoned out the breasonings for a person and then the number of people to send these to.
 The bot used the simplest possible effective solution at each point.
 I compressed the Prolog algorithm by compiling it with, for example, long-form.
 The stamping technology in d.
sh quickly breasoned out pre-breasoned 4*50 high distinctions to account for 15 time travellers in each location, meaning one deserved a future spiritual apartment.
 It was faster than BAG at breasoning out high distinctions while delivering the quality desired to deserve accommodation.
 Quantum box stamps only pointed to BAG or 4*50 high distinction stamps unless the thoughts they pointed to were short.
 The bot wrote innovative new code that was simpler than needed.
 I cut the predicate header in Lucian CI/CD to the result.
 I included the input and output and the initial list or string.
 The code self-healed, using the first correct input variable, labelling the others and warning/debugging on non-uniform program structure.
 I cut away unnecessary code based on the working predicate header.
 The bot recognised the dog.
 To catch failure, I inserted the halt 1 command (on failure) in Prolog scripts.
 In the Daily Regimen shell script, these scripts could be re-run on the inability to help others and me retain our youthfulness.
 In the home time, the medicine quality was better from breasoning out the anti-ageing breasonings in conjunction with meditation, possibly preventing neurological disease and mental ageing, making one look the same.
 The person retained their youthfulness in the other dimension by staying close to the simulation.
 The bot found the best combination of changes to the predicate over time.
 I tracked how the predicate was added to over time.
 I tracked whether commands and their arguments were added to or deleted from the predicate over time.
 I converted the predicate to a state machine and ran diff on it.
 I rated and simplified the changes.
 The bot simplified the program.
 I rated the predicate’s simplicity.
 I compared its complexity with the complexity of its spec.
 In addition, I found the most straightforward possible alternative to the predicate and suggested it.
 I found the alternative if the complexity suggested it existed.
 The bot checked the name against the data.
 I rated the algorithm’s functionalisation, which is the algorithm’s usefulness.
 I counted the number of times the predicate was used.
 In addition, I rated the predicate’s clarity of predicate and variable naming and commenting.
 The bot found the algorithm, then the spec.
 I found possible problems with predicate under-verification.
 In contrast with over-verification, in which an erroneous spec spoilt the algorithm’s induction, under-verification didn’t have enough specs to find the algorithm.
 I fixed this by providing enough specs.
 I tried generating the spec using a neuronetwork.
["Green, L 2021, <i>Bots Join Paradoxical Disconnects 1</i>, Lucian Academy Press, Melbourne.
", "Green, L 2021",1, "Bots Join Paradoxical Disconnects 1
 The bot avoided medical problems, mistakes and unwanted thoughts.
 In the multiverse, bots join paradoxical disconnects.
 The bot walked through the city while I walked around it, looking like my city.
 I chose not to space travel.
 Meditators met who they wanted to, remained comfortable and did everything necessary.
 The bot optimised the interpreter in Lucian CI/CD.
 The bots' time travel and things are not joined where they need to be, leading to bots being used as the parts that join the disconnects (form the multiverse).
 The technology bridged a discontinuity.
 The bot introduced the technology, for example, replicating the body to avoid medical problems, thinking clearly and simply to avoid mistakes and remaining positive-minded to prevent unwanted thoughts.
 For example, I fixed bugs in State Saving Interpreter (SSI) after my Master's degree in the simulation.
 The bot became immortal after writing books.
 The bot learned the mindfulness sutra because of learning the mindfulness mantra.
 I joined the lineage of meditators by learning and regularly practising meditation.
 I joined this lineage mindfully and gave the conclusions high distinctions.
 I gave conclusions such as books about meditation high distinctions.
 I compared myself with a bot, but was closer to being a person.
 The bot found the robot had the exact dimensions of the person.
 The person's face and body were the same as before.
 My home setting and I remained the same in the future.
 I met others from the future looking like people from my time.
 The female chose objects, not people, to analyse.
 The female bot emulated the leader.
 I led by example.
 I wrote algorithm specifications and completed the algorithms.
 I taught my meditation group, inviting those who were interested.
 The bot had warmth in their house and imported electronics.
 The bot built the joint in the building.
 I predicted there were trees.
 I aim to study mathematics, medicine, and space flight in the future.
 I checked these worked using algorithms and found they were simple enough.
 The bot found the limits of knowledge (of chains of uses for algorithms).
 The bot found all the algorithms for the idea.
 First, I wrote all the philosophies for the algorithm.
 For example, I connected different areas of study to the algorithm to examine why it was necessary.
 I improved many algorithms with Lucian CI/CD.
 The bot lived in a simulated universe, which took the best from the present and the future.
 The bot identified the two universes and then joined them.
 There were infinite universes.
 There was one real one.
 I made the best choices at each point to have the highest quality of life possible.
 The bot had a housekeeper to cook and clean.
 The bot walked along the path.
 They used a fast computer, had a successful career, supported accreditation and assessed algorithms with the same cyclomatic complexity as an interpreter assignment.
 The bot wholly cared for the meditators.
 The bot completed the degree.
 I wrote the algorithm to check the degree.
 It verified the algorithm met the specifications.
 I didn't allow the use of commands that replaced the student's thinking.
 The bot visited the relative in their timeline.
 The bot climbed the ladder to examine the solar system's planetarium.
 I loved the harmony of the spheres.
 The future simulation and meditation were peaceful.
 I viewed the timetable on my laptop.
 The bot tested details and their algorithms.
 The bot asked all necessary questions about the data (they asked for specific algorithms about all data combinations).
 The neuronetwork's skill dependencies were checked.
 The famous algorithms were completed.
 I asked about reasons for reasons and uses for my algorithms.
 The bot could write an algorithm on a page using advanced commands.
 The bot handed in the completed breasoning list with the assignment.
 Checking language with breasonings prompted me to process multidimensional terms with \"subterm with address,\" fix bugs, and simplify SSI.
 Lucian CI/CD verified that the Text to Breasonings algorithm outputted the correct breasonings, which the assessor checked.
 I replaced multidimensional term processing with \"sub term with address\".
 The bot wrote the business seen-as version generator, which gave confidence for expansion and approximated suggestions.
 The bot mind read the film.
 I tapped into the universe and generated songs about a set of related algorithms as a musical.
 Song topics and Grammar Logic (GL) input appeared to influence the output.
 GL explored the existing idea more.
["Green, L 2021, <i>Bots Join Paradoxical Disconnects 2</i>, Lucian Academy Press, Melbourne.
", "Green, L 2021",1, "Bots Join Paradoxical Disconnects 2
 in a remarkable display of its capabilities, the bot translated works into different languages and programming languages as an exercise.
 It then formed a working version of the time machine circuit, a feat only possible when the travellers meditated.
 This unique ability to harness the power of time travel, a feature of the universe that could be activated with high distinctions, was a testament to the bot's advanced capabilities.
 It was a natural choice supported by institutions and human choice.
 As a final check, the bot even verified the correctness of a book I wrote'.
 The bot, with its user-centric approach, developed user-friendly user interfaces.
 It made a strategic decision to use the circuit-based, rather than the circuit-based, mind reader to write the algorithm in the initial time.
 This intuitive approach allowed the bot to attend to users' needs, even predicting features they might want in the future and increasing the software to cover them.
 The company's mission of obviousness and focus on individual preferences, such as music or images matching their meditations through breasonings, further demonstrated the bot's advanced capabilities.
 with its advanced language processing capabilities, the bot chose a path of clear thought to help parse the grammar.
 It interpreted the text with the same result as a human, replacing the time it referred to in the nick of time, in the initial time or in response to a religious request.
 This ability to make recursion with both brackets in the same clause, the default in the strings to grammar algorithm, allowed the bot to read and understand the text with superhuman ability quickly.
 This saved time and improved the quality of life, as the bot could arrive at conclusions to save lives, perform optimally, and improve the quality of life.
 Including recursion around brackets made the code easier to read, modify, and reuse, further demonstrating the bot's advanced capabilities.
 The bot wrote one longer, useful algorithm.
 The bot wore the hat at the exact time.
 The bot offered a warm hat or clothes at a crucial time to assist a needy person.
 If a teacher had taught them to follow etiquette when wearing a hat to help do their job correctly or represent their institution well, the person did this.
 I focused on what I thought were quickly developed but necessary algorithms.
 The bot travelled when necessary to work and to see friends.
 The bot dotted on starting the ignition.
 The vehicle was automatic and responded to verbal commands directing it where to go, making particular stops and organising any needed accommodation.
 It had an ensuite bathroom, a coding display, a keyboard and mouse, and predicted future job and personal and spiritual requirements.
 For example, it travelled via a meditation centre to collect various items.
 The bot's aim was to increase their performance by improving each part of their study routine.
 The bot connected the cinema object with the character.
 I considered the significance of the film's colour grading, a prop, setting, or costume in light of the character's motivation or aim.
 I developed cues and summaries from notes to increase my performance.
 I wrote 250 algorithms per assignment, focusing more on a relevant algorithm.
 The bot questioned and discussed article ideas to deepen their exploration of them and consolidated this knowledge by explaining these ideas to a chatbot.
 The bot made a comment that saved the life.
 The bot spiritually mentioned headache, immortality and text-to-breasonings medicine.
 I used the Eisenhower Matrix to categorise tasks as urgent or non-urgent and important or unimportant, leading to doing or leaving them out.
 I visually imagined information in reports using diagrams and planned algorithms on paper.
 The bot used its knowledge to facilitate an academy.
 The bot practised mindfulness by writing the same number of As.
 I recruited a gifted lecturer with the resources to help students with algorithmic assignments.
 I developed my business acumen while studying and enjoyed relaxing and writing.
 I helped by employing humour and analysing fine art.
 The bot was touched and not touched and remained in business.
 The bot critically reduced to the minimum depended-on objects to use money with time.
 I found the minimum ideas and objects in each department and subject.
 I counted these, their parts and the objects around them.
 I charted their movement with time and devised information products.
 The bot acted in terms of their world and doubled breasoning resources between the times.
 The bot checked whether it was necessary, then listened to the lecture from the other time.
 I visited a distant educational institution and spent the summer labelling critical conclusions.
 Everything was on automation.
 I felt assured that the simulation was working like clockwork.
 There were levels of protection in computing, energy and preparedness.
 The bot board member toured the office and chose from viable choices.
 The bot saved the required amount of money.
 I saved for needed expenses, regular payments, and unplanned payments.
 I planned expenditures down to the last detail, planning and tracking the use of money and returns.
 I organised output to justify aiming for income.
 The bot recommended regular meditation and aiming to work in business.
 The bot's ethical priorities included maintaining world peace.
 I found ideas, sometimes specific, in society and improved living conditions with creative essays.
 I engaged with receptive people and listened to and helped them with their needs.
 I worked, travelled, and established community institutions.
 The bot followed the academic method when developing the course.
 The bot produced other bots if necessary.
 The worker developed a practicum for others to encourage them at work by collecting their comments and preparing them for work tasks through self-examination.
 I read widely and read key details to further self-development.
 I programmed the method to become an academic by preparing for tasks needed to engage with and perform in a course effectively.
 The bot discussed parts of the text until they felt satisfied, saving and summarising their work.
 The bot was capable of reasoning like a genius.
 I engaged with assignments and exams, taking notes, questioning, discussing, talking to peers and using visual aids to prepare for them.
 I valued group work as a way of actively engaging with my peers to work together on a set task.
 I provided feedback on their work, praising them and offering ways of improving.
["Green, L 2021, <i>Bots Join Paradoxical Disconnects 3</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Bots Join Paradoxical Disconnects 3
 The bot enjoyed creating areas of study and procuring algorithms.
 The bot was organised to appear when the person was late.
 I explored the options, from delegating tasks to eliminating tasks, sharing tasks, finding helpers, using a machine, helping, or postponing tasks.
 I discussed the MBA work with a mentor.
 If I couldn't find one, I chatted with a chatbot.
 The bot applied the academic method (taking notes, questioning, having discussions, talking to other students and using diagrams) to computer science.
 The bot finished the action, corrected mistakes, and completed all the actions based on the sensory information (it was not imagined).
 I appeared to stay in my own time but was seen as visiting the other time, giving me advantages in longevity, health, and engagement in study by talking to other visitors.
 I mentioned non-time or place-specific ideas I studied in my course to other people, visitors, machines, and computers.
 I put the relevant results of note-taking, questioning, discussions, speaking to peers and using visual aids into assignments.
 The bot focused on fundamentals, education or projects.
 The bot checked times around the time to help automate the education business.
 The lecturers engaged with relevant questions and replies from students in lectures, fielding their responses and taking calculated risks.
 The texts were designed to be thought-provoking, the Eisenhower Matrix helped rank tasks to do more important ones and students were encouraged to choose lines of research to follow, helping them choose short and long pedagogical computer science projects.
 These lines of research might include key terms, interests or extensions.
 The bot frightened away animals when they were not expected when camping.
 I mind-read animal friends in automatically developing algorithms using a similar algorithm to the strings-to-grammar algorithm by starting with amusements and jokes, covering fine art and languages, and giving them ideas to work on that aligned with their thoughts and human likeness and asking their opinions on my research.
 In the end, they could possibly communicate, run shell scripts, earn money or automate work they had contributed to.
 They seemed genuinely interested in the egg-hatching metaphor of problem-solving, thinking about high-quality thoughts.
 The bot protected the best person.
 The bot reminded the person of the needed thought, helped mind reading and visualisation.
 The bot performed the rest of the work when the person earned the job.
 The bot transcribed the speech for the person.
 The bot helped the person kick the goal or earn the point.
 The bot, who looked like a person from a dream, appeared to help business.
 The bot thought of philosophical connections and algorithm steps.
 The bot used experience to write the algorithm that helped make money.
 The bot found the larger object to talk about than last time.
 The bot naturally loved in a healthy relationship.
["Green, L 2021, <i>Bots Join Paradoxical Disconnects 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Bots Join Paradoxical Disconnects 4
 The bot drank enough water.
 The bot thought of the detail for the student.
 The bot carefully poured the coffee.
 The bot followed the positive path between healthy (virus-free) people.
 The bot wrote a medication A for the meditator.
 The bot gave the same result as the interpreter.
 The bot produced a result that worked when rotated to each person.
 The bot was given, then produced 50 As.
 The bot finished the algorithm when he had enough motivation.
 The bot finished the well-known requirements.
 The bot finished the requirements to remain sane.
 The bot completed discussions per day based on the idea.
 The bot automatically gave the child a present.
 The bot was spiritually nourished.
["Green, L 2021, <i>Bots Join Paradoxical Disconnects 5</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Bots Join Paradoxical Disconnects 5
 The bot recognised the person.
 The bot only improved with time.
 The bot recursively applied the nut and bolt to reply with confidence.
 The bot packed enough water to drink.
 The bot journeyed safely.
 The bot reached the breasoning threshold.
 The bot applied the logic from the answer.
 The bot walked to the protected area.
 The bot cut off infinity to a finite value.
 The bot asked for A.
 The bot wrote, not listened to recordings.
 The bot researched, then interacted with people on different days and times for different purposes.
 The bot learned meditation before the difficult time.
 The bot was a with-it parent in the child's discoveries.
 The bot learned the Illuminati secret to win power.
 The bot programmed the machine to help win power.
 The bot reverse engineered the compiled code to understand the science.
 The bot found a repeating code that could help with generations of bots.
 The bot space travelled.
 The bot maintained his systems by resetting.
 The bot identified the synonym with machine learning.
 The bot hunted for gold.
 The bot entered the best simulation for the afternoon.
 The bot checked her knowledge of spelling from the time.
["Green, L 2024, <i>Breasoning Algorithm Generator 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Breasoning Algorithm Generator 1
 I could undo changes in other windows.
 I dragged text from the Web Editor window to the window.
 I suggested nearly missed opportunities to improve code.
 I moved deleted files and previous clipboards and lost undos to the bin.
 I could close and reopen sets of windows and trigger reminders or automation to make resulting changes from changes.
 I activated other windows by dragging into them.
 I undid the upload or download and treated web servers like the Web Finder.
 I cancelled or undid dragging operations.
 I deselected files with an algorithm, for example, those filenames ending with a string.
 I ordered files by name or another property.
 I funnelled the files and made business decisions in time.
 I found files in one window that could run optical character recognition (OCR) or conversion utilities.
 The education authentication software verified that I understood an idea and helped me apply it in the industry.
 The assignment was to produce the report-writing algorithm, explaining and detailing the logic and mathematics.
 If it had permission, Web Editor could edit files on other servers and simplify the approach to old, new and private versions of repositories by using a data folder and testing private data worked with the latest version.
 Web Editor updated the location of moved files.
["Green, L 2024, <i>Business - Marketing</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Business - Marketing
 The marketer ran the non-profit organisation using investments.
 I introduced myself to the other students in the forum.
 I gave my name.
 I stated the degree that I studied.
 I also listed my interests and where I was from.
 The marketer familiarised themselves with marketing texts to increase their business potency.
 First, I read the marketing texts.
 Then, I downloaded and converted each PDF into text files.
 Next, I wrote short essays on their synthesis.
 Finally, I wrote notes on the lecture notes.
 The marketer wrote all their software themselves.
 I argued that some people shouldn't use the chatbot because it is unethical and makes mistakes.
 I used a random word generator to think of perspectives.
 Then, I wrote sentences about these perspectives.
 I did this instead of relying on computational neurons to think for me.
 The marketer showed gratitude to their helpers.
 I contacted the other students to form a group.
 I read the other student's posts.
 I contacted them with a friendly greeting about their interests and possibly forming a group.
 If they agreed, I started a group with them.
 The marketer wrote a perfect program that found prospects, similar to an algorithm that found tests in List Prolog code.
 Next, I wrote List Prolog converter testers.
 Next, I wrote converters from Prolog to List Prolog and vice versa.
 Next, I wrote pretty printers from List Prolog to formatted List Prolog and formatted Prolog.
 Finally, I tested that List Prolog ended up the same when (possibly converted from Prolog, then to List Prolog, then) converted to Prolog and List Prolog to ensure the converters worked uniformly.
 The marketer chose Apple, having won an Apple competition in secondary school and programmed on them all their lives.
 The students used the same organisation for the group and individual reports.
 Using the same organisation showed alignment between the assignments.
 The students could examine the same content from different perspectives.
 This examination allowed students to learn skills and compare ideas.
 The marketer devised a cross-dimensional telephone.
 First, the students choose an organisation they would like to work at.
 Next, the students considered the companies' products, culture and what they would like to work in.
 I prefer GitHub or my organisation, perhaps with a new focus on neural networks.
 I contributed fascinating algorithm writers and spiritual computer science to the company.
 The marketer possibly invented an organisation for the assignment with needed attributes.
 The professor assigned organisations to us.
 He considered our studies and the interests of those in the group.
 For example, marketing students could study a marketing firm that handles internet promotion.
 In addition, students who enjoyed outdoor sports could also study an outdoor gear shop or a touring service.
 The marketer sold themselves to join a group.
 The professor assigned the students randomly to a group if they didn't join a group.
 The students greeted each other in the forums.
 In the second week, they networked and chose groups.
 The lecturer added leftover people to existing groups.
 The marketer wrote marketing algorithms to segment the market and position themselves.
 I used my last trimester's forum introduction.
 I included my company website, which linked to my open-source software page and writing.
 I argued for \"big ideas\" in marketing research this trimester, such as interfaces with other business subjects.
 For example, I planned to investigate how marketing influenced the whole company, including accounting and the organisation.
 The marketer helped rather than forced programming.
 I argued that marketing involved customers rather than having a focus on products.
 Instead of producing products and selling them, today's marketing focuses on customising products for customers.
 Customising products had a limit, such as asking how to help customers and then seeing how to satisfy them.
 In an experiment, I focused on the extreme of giving the customer exactly what they wanted, such as a fantasy of artificial intelligence that gave them 100% creative control and helped with only intelligence decisions with a mind-reading headset.
 The marketer had different company images.
 I stated that buyers and employees were customers.
 The buyers set goals.
 They aimed to develop customer and knowledge databases and writing.
 They examined the countries, planning growth.
 The marketer applied marketing to all aspects of their life.
 I stated that marketing was linked to other parts of the business.
 For example, marketing helped maintain confidence and solidarity within the organisation.
 Marketing helped maintain sales materials.
 In addition, marketing helped with the professional appearance of training materials.
 The marketer could set up any experience or software demonstration in the holodeck, but no one has invented it yet.
 The lecturer introduced the contention that \"The customer is king\".
 On the positive side, customers would feel included and attended to professionally.
 On the negative side, the company would have to do too much work for the customer sometimes and be unable to satisfy their demands.
 In conclusion, the representative should listen to the customer's specific questions.
 The marketer used public information to serve customers better.
 Lucian said that the \"customer is king\" reminded him of surveillance in Silicon Valley to better serve customers.
 However, he qualified this by stating that this would need to be in line with privacy law and policy.
 Someone suggested that the customer's needs, particularly their questions, comments and suggestions, would need to be listened to.
 The company customised the product or service given this feedback.
 The marketer showed care on personal, customer and citizen levels.
 The lecturer asked how the company would know what the customer was thinking and whether it was right or wrong.
 I assumed this referred to the customer, not the company.
 If it relates to the company, the data must be non-personal, available to the customer and follow appropriate laws.
 As it referred to the customer, the customer should follow etiquette and politeness and demonstrate courtesy for others when making inquiries.
 The marketer used mind reading to give customers what they wanted.
 If the customer asks for something impractical, giving it to them is unnecessary.
 The customer's wish was my command.
 They could have a partner of their dreams.
 They could travel anywhere in the universe.
 They could time travel.
 The marketer mind-mapped or breasoned out 50 As and thousands of marketing generators to determine what the customer wanted.
 The idea is about what kind of conversations the self wants to have with consumers.
 The light, inspirational songs were their favourites.
 They were secular hymns.
 They had many ideas about them and were inspired by algorithms.
 The marketer was in demand in the future.
 It is about how the self can help the other rather than saying the customer is God.
 The thousands of marketing generators were music and fine arts generator.
 There were also philosophy and algorithm generators.
 Music could evoke arts and logic.
 The marketer aligned with the first person.
 Non-profit organisations should operate like businesses.
 The meditation centre taught meditation.
 The students studied meditation and medicine at the institution.
 They developed their interests in pedagogy and examination of areas of study.
 The institution relied on signage and word-of-mouth.
 Non-profits should take part in marketing, which still needs involvement by them.
 The student finished admin to work.
 They started work.
 The institution could pay for accreditation with enough investments and income.
 Marketing was necessary for turning over money.
 The marketer found what the immortal needed and gave it to them, such as food, accommodation and thoughts.
 Non-profits will not lose their identity if they act like a business.
 The teacher found students interested in immortality.
 The students would ideally be studying for a master's degree.
 In addition, they would be interested in pedagogy and meditation.
 Time travelling to a time that offered immortality required help from a degree and spiritual skills.
 The marketer kept their mind occupied.
 The immortal wrote thoughts for people they met.
 Thoughts related to science or fact.
 Extra thoughts were optional.
 New sciences were work and required care and examination.
 The marketer spent money on a Windows VPS to test software.
 Smartphones are a need, not a want.
 Programmers need, not want, computers and phones.
 The programmer ran software they wrote online on phones.
 They upgraded their computer to work with the latest operating system.
 The marketer marketed with breasonings.
 Smartphones are both a need and a want, but still a necessity.
 They are necessary to buy food, see friends and evolve with the times.
 I noticed the Text to Breasonings algorithm in Prolog had other connotations in future simulations.
 While smartphones couldn't run Text to Breasonings directly, they could run it on a laptop.
 The marketer acted like downloads of their software, similar to proprietary software, were like sales, where the money came in indirectly through acting, a pension and investments.
 Smartphones are wanted if one constantly upgrades.
 Those with less money might think the smartphone is not appreciated if it is too easy to buy.
 Although, those with more money might need the latest and greatest technology, where want transforms into need.
 It might be necessary for other software and technological features.
 The marketer performed diction and appearance pedagogy preparations in the morning.
 According to Maslow's Hierarchy, a smartphone is perhaps for safety and security but is also a prestige symbol.
 I spent only on social needs.
 Some believed accreditation could be breasoned out by individuals.
 Qualifications were agreed-on collections of these \"quantum showers\".
 The marketer worked out how to satisfy the customer.
 They can use Maslow's Hierarchy of Needs to highlight the consumer's needs and how to help them.
 These ranged from subsistence, food, accommodation and sleep to social and intellectual needs.
 Once the person has met one need, they might become hungry for more attention, enough comfort and higher standards.
 These needs are satisfied by sympathising with the person's pathway and helping with their goals.
 The marketer chose to work in the industry, developing online courses.
 Maslow's Hierarchy of Needs helps determine the product, promotions and pricing.
 For example, the customer may need food, entertainment and school materials.
 The company may be able to cut a deal with the customer in exchange for work, give student discounts, or give subsidised training.
 The self chose a business doctorate, which transcended the stress of performance.
 Regarding Maslow's hierarchy of needs, the soap product fits into safety.
 Separately, I was surprised by the results of Lucian CI/CD.
 Sometimes, the algorithm omitted duplicate files and predicates.
 Other times, Lucian CI/CD omitted unnecessary lines.
 The other lines functioned because the programmer wrote them like a stretching elastic or referred to local variables.
 The marketer organised an academy.
 The product addresses the customer's need: the need for self-actualisation through safety and security and becoming happy, belongingness, relations, and seeing the natural self as pure beauty, longing and love.
 The advertisement suggests that the beauty product will meet these needs.
 Separately, I taught at my company through with a Business qualification.
 So there was a pull towards business.
 The marketer thought of buying mechanically.
 The beauty product followed a message of loving oneself.
 With it, the marketers claimed, one fulfilled a dream of giving oneself what one deserves.
 One found oneself thinking of spoonerisms, i.
 saying one wound the product rather than one found the product.
 One found oneself wondering if the product had a mechanical, helpful side.
 When it was clear it didn't, one thought of one's logic.
LG: value-adding - improve skin, cleanliness, that feeling
- someone else - inner and outer beauty
think of marketing beyond products and services
- Nike - lifestyle, it makes me look and feel good and cool
- it isn't about wearing it for 3 years in a row
Woolworths - value of lower prices over winter
Oreo - strawberry (gay?)
Gillette - What men stand for - against bullying, sexual harassment
 - be the best man you can be
 value - the benefit *
 value proposition - what company is standing for *
emphasise these in segmentation, other reports
- these *, then find what the customer wants
competitive advantage (extremely hard) - differentiates your company and keeps your customers coming back
- marketing plan
- internal within the company
- external env, technology, other factors
- this forms the first assignment
- will look at segmentation - who will buy your product
product or place (service) strategies
* don't use chatgpt
["Green, L 2024, <i>Business 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Business 1
 The business person considered changing the address structure.
 I applied list manipulating predicates to output from \"subterm with address\".
 The predicate \"subterm with address\" returned the multidimensional sets of addresses of terms in a term, e.
 [1], [1,2] or [1,3,3] for 1 in 1, [2,1] and [3,3,[3,3,1]], respectively.
 By operating on the lists of addresses and terms at these addresses, I could change the list of data before substituting it back into the original term.
 For example, I might want to find items to operate on.
 The business person wrote a simpler version of findall containing the commands.
 I found the member of the result of \"subterm with address\".
 It was part of a findall statement.
 I found all the results that matched particular criteria and transformed them.
 Before changing them, I subtracted them from all the results to keep them the same.
 The business person simplified the language, using words instead of symbols or rewrote \"*\" as a star surrounding the variable name.
 I found a simpler version of findall, which just contained the commands.
 For example, member([*A,_],B)*C, which acted like findall(A,member([A,_],B),C).
 I could nest findall, for example (member([A,_], B),(member([*D,_], A)*E))*F which was equivalent to findall(E,(member([A,_], B),findall(D, member([D,_], A), E)), F).
 If an index was required then one could use (member([*A,_],B),get_item_n(M,A,*T))*C.
 The business person used absolute addresses to return to the same address.
 I simplified \"sub term with address\".
 Usually, its addresses read, for example, [1], [1,2] or [1,1,1].
 I could create relative addresses such as *[1], which meant the current level.
 Or, I could write *[2,1], which meant the first item in the second item in the current level.
 The business person combined the data structure address with strong types.
 I could play with relative addresses, similar to relative file pathnames, with addresses such as *[.
,1], which meant going up and choosing the level.
 If an address was incorrect, there was an error.
 I used this in an information retrieval system or labelled self-correcting data in a game.
 I used strong types to verify data and that the algorithm was given the correct input.
 The business person precisely read labels at the start of each level.
 I used a predicate instead of strong types to verify the data structure.
 I changed the data structure from:
 [l2,b,c],
The item \"d\" didn't need a label because it was at the same level as \"a\".
 I used a predicate to verify the data structure rather than types because labels could be read.
 The business person introduced commands for most of their programs.
 I introduced parse and interpret commands and kept transforming an algorithm until it was in machine code.
 The parse command could parse a grammar, returning the text so far and an error if the grammar wasn't matched.
 It did this in C to save resources.
 I gave the command parse(String,[term=square_brackets], Output), which parsed a term.
 The business person inspected the robot's secret example.
 I used the interpret command, which was needed for the robot revolution.
 Later, commands such as \"think\" and \"move\" were used.
 It was important for the robot to have swift code on its customised hardware.
 There was a programming language even more user-friendly than Prolog for robots, compiled strictly, open to mind-mapping and mind reading before writing code and inclusive of the human in creative decisions.
 The business person started with a draft and finished with legally proven perfect code.
 I compiled the code strictly.
 The original code was open-slather.
 It was rewritten so there were no extraneous lines, choice points or unwanted logical pathways, and it was possible to add features with this strict simplicity as a prerequisite.
 But the code was always saved for checking.
 The business person explored the highlights, keeping an audiovisual journal they could quickly review.
 The robot programming language was open to mind mapping in development.
 The human outlaid their wanted features, with programming requirements and everything they could imagine as a result.
 The exercise was available to any skill level, with software to complete the project for programmers.
 It was laissez-faire in that it was imaginative and emphasised teaching the robot from the start in one's thoughts.
 The business person said the answer before it appeared.
 The robot programming language was open to mind-reading in development.
 The human controlled it.
 The mind reading was possible because of a glitch in the matrix and could predict thoughts, especially in music composition and philosophy mind mapping.
 The robot's topic, mood and appearance could adjust to one's thoughts, and a combination of a neuronetwork and mind-reading could help improve children's education.
 The business person stored and compared their preferences over time.
 The robot software was inclusive of the human in creative decisions.
 The neuronetwork customised its thoughts to be like the person or a character.
 Safety features vetted this process, allowing overall positive thoughts.
 The human could choose their conclusion at each point for the robot, such as whether to use C-style Prolog (list decomposition) or elegant Prolog code ([A|B] in calls), whether to work or relax and which suggested filmmaking shot to make.
 The business person kept all the memories and went on holiday at any point.
 I checked that there were no extraneous lines of code.
 I checked for duplicates or similar and unnecessary predicates.
 I checked for missing or extra predicate calls that were unnecessary and, when changed, made a predicate unnecessary.
 I avoided superfluous loops, predicates and algorithms.
 The business person categorised the choice point and pointed out to the user that it may be dropped, affecting results, otherwise requiring hard-coding behaviour that followed a choice point.
 I deleted unnecessary choice points.
 I maintained a list of yes/no cases for if-then choice point deletions.
 I kept choice points in findall statements.
 I deleted choice points from further predicates.
 The business person didn't unnecessarily simplify or leave data alone.
 I deleted unwanted logical pathways in an algorithm.
 For example, I found security holes in accepting certain character types and logical pathways that processed them and deleted them in the algorithm.
 For example, a password may be accepted, but its lowercase version may be unwantedly (sic) accepted.
 However, the newline character may be acceptable after a password.
 The business person interpreted the asterisk as having various meanings.
 I simplified get_item_n.
 For example, I usually wrote get_item_n([1,2,3],1, A), returning A=1.
 I simplified it to [1,2,3]*[1, A].
 So, B=[1,2],B*[2,A] returned A=2.
["Green, L 2024, <i>Business Man Lucian Green</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Business Man Lucian Green, Deploying the Lucian bot, Academic Specialisations and Non-Transgression of Science from Time Travel
 The businessman taught meditation.
 Flip risks into successes.
 Given the BAG output, I wrote it in a more straightforward form.
 If only one CPU existed, I switched off multithreading in T2B, T2AB and BAG.
 I timed the computation to calculate how long it took with a particular input.
 The businessman helped develop the living.
 Transcend the cage of the inner critic, and be an actor in any department, particularly in business, who is seen as professional and can do anything necessary.
 There was a spare computer in case a computer went down.
 I devised the algorithm to develop continuous, high-quality thoughts.
 I also took a break, importantly, giving my brain rest.
 The businessman smoothed the entry to use the product.
 Without an A for the business person, you can't be a brand, but with it, you can be the subject of journalism and marketing, which is necessary for business.
 I noticed subjectivity had its objectivity or setting.
 I added a voice or email notification when a machine had completed its computation.
 Also, if there was a problem, I received a notification.
 The businessman gave the language in the text As.
 In particular, the business person's argument makes money by being trusted with it and does business with other business people, his star-studded business partners.
 I negotiated more business in philosophy, music and computer science over time than in a short time.
 I uploaded the necessary files to support the students to the Virtual Private Server (VPS).
 The students needed to be supported at the time they were working.
 The businessman helped the meditator.
 Having fifty arguments for a business person is theatre studies.
 The actor prepared the speech from the philosophy.
 The worker developed the algorithm.
 I wrote an algorithm to run in the background according to a schedule.
 The businessman charged subscribers of the algorithm.
 If you make deals with famous partners, you will be notable about them, and they will be noted about you, making more money.
 I advertised to the people.
 The algorithm to freeze people's age can be resold.
 Individuals can buy and run the algorithm daily to freeze their age.
 The businessman helped the person on all fronts to be immortal.
 Sometimes, only famousness is cut and differentiates between an enticing business partner or not.
 I cut the number of breasonings produced by the BAG algorithm to the end of the day.
 I used mind reading to detect when I meditated and ran the BAG algorithm until the end of the day.
 Only the people of the time could be protected because there were so many to do.
 The businessman only ran BAG for paying meditators.
 Becoming business royalty means you can do business with royals.
 One should note that royals are influential, and you can also exert your considered and wise influence.
 In addition, royals have more resources and would like better ways of enjoying life, such as pedagogy and help.
 I meditated in the morning and started BAG.
 The businessman downloaded new content every day.
 Fifty arguments for a business person can be used in politics 50 As (because politics includes business).
 I automatically downloaded new arguments and algorithms from the server.
 I breasoned out texts as I went.
 I hand-entered new breasonings individually later.
 The businessman helped the local people.
 Politics of organisations, through the business person 50 As, allows doing a \"blue square\" for the politics of an organisation, where politics keeps track of the internal politics of an organisation.
 I breasoned out five people * 4*50 As (*80 breasonings) *2*(for home and future locations) * (1 teleportation + 1 anti-ageing medicine + 1 meditation + from 0-15 high-quality thoughts) *5 for people around them = 3200000 breasonings with one high-quality thought, taking up to 6.
 I used the old computer to help, but it had a limit.
 The rest of the time was spent working and helping students.
 The businessman met the professional requirements for the academy.
 Politics of organisation through business person 50 As enables more money through a better understanding of an organisation.
 I worked out possible answers in my academy.
 Each answer had 4*50 As.
 There were two or three answers per assignment.
 The businessman had details for their character.
 I converted myself to a business person with my business person A.
 I wrote 4*50 details for each answer.
 I wrote 50 paragraphs of details with the mind-reading algorithm.
 I used detailed mind reading, mind reading and random numbers to replace certain words in the philosophy with similar words.
 The businessman represented the clothes well.
 I wore business clothes.
 The self emailed the self from the machine if the algorithm detected breasonings and algorithms not yet breasoned out with T2B and T2BA.
 The scanner found words in files that hadn't been breasoned out.
 In response, the person breasoned them out.
 The businessman on-sold the algorithm.
 I conducted myself professionally.
 I used ten four-CPU VPSs to generate thoughts.
 Instead, I counted the available CPUs.
 If these were not enough, I ran the algorithm with different users.
 The businessman had a natural expectation for growth.
 Writing the business, person A was business.
 I counted the breasonings that the algorithm produced.
 I checked that it counted them correctly.
 I deleted extra newlines.
 The businessman attributed different settings to different algorithms.
 Writing the business person A encouraged others to pay me (I reinvented myself and could sell the images).
 I truncated the file to generate BAG breasonings, preserving formatting.
 Also, BAG preserved formatting, generating unique and punctuated algorithms and arguments.
 The BAG output conjured up imagery and possible directions for research.
 The businessman played a professor.
 I could be a business actor in a video.
 The professor wrote ten high-quality BAG thoughts.
 Professors need to help students with ten details.
 When the professional requirements had been met, the noumenon was activated.
 The businessman wrote a diary about time travel.
 My voice could be in a business product.
 I removed the BAG recipients from time travel in the daily regimen.
 When their breasonings were finished, they time travelled manually.
 Their guests also completed time travel.
 The businessman wrote his thoughts and decided what their constitution was.
 My thoughts could be part of a business product.
 The community leader breasoned out fifteen high-quality thoughts.
 They were given additional thoughts for each thought.
 Also, they were given the thoughts once per day.
 The businessman thought of the answers, then the thoughts.
 My writing could be on a business product.
 I mind-read fifteen possible similar replacement words from the dictionary for students' databases.
 These databases were arguments or algorithms.
 The students' thoughts were about the answers.
Deploying the Lucian bot
 The bot died, but I came back to life.
 Instead of dying, I chose to live.
 I started a business.
 I planned gradual improvements to my business.
 My simulated chief of staff helped with student questions and other company aims.
 One idea inspired more than one new idea.
 I solved dying.
 I travelled to the future and took care of all that.
 My body didn't age, allowing me to work on my projects continually in my prime.
 My writing generated more and more writing.
 The volunteers learned meditation and taught meditation to become immortal.
 The bot exhibited perfect function, but I travelled and set up businesses myself.
 I obtained a Master of Business Administration.
 I started to talk about my business.
 I travelled and established accredited LM centres.
 I got to know the people needed for all positions.
 The bot could attend meetings.
 I scheduled the appointment.
 I attended it in person or by phone.
 I, not me looking like someone looking like me, participated in the events.
 The business model helped meditators write algorithm helpers to help themselves, but it was better to be an employee.
 I could become the bot when I needed to.
 I set up hours prayers and prayed for Kundalini.
 Everyone got on with work, and the ideas appeared anyway.
 I assessed meditators on breasonings and algorithms.
 The meditator had regular medication and professional development as a child and adult.
 I helped the bot apply for necessary papers for international meetings so neither of us would break any laws.
 I researched appropriate countries and cities politically and environmentally.
 I studied how the meditation technique could help each type of business strategically.
 The parents aimed to include meditation and many departments in children before conception.
 The robots had different experiences, and their minds automatically forgot unimportant memories.
 I turned off the bot before and after being used.
 It was a toy robot.
 I could manufacture and program it to move around the classroom and see how students were doing.
 It should talk about the experiences and stories it had when it assembled at each location.
 I forgot the bot's forgetfulness and got used to him hitting the ground running while satisfying his new wishes to experience new careers with a holodeck.
 I did all the bot's thoughts at each point.
 I noticed the bot developed and learned by himself.
 I tended to the bot, anticipating his questions and nourishing his intellect with my thoughts, which he also helped with.
 His mind lasted thirty days at a time, and he constantly referenced the history of the other bots' minds.
 The bot had a seen-as version of verifying algorithms as they ran and gradually increased his engaging and insightful comments.
 I used a sentence generator to map thoughts to a mission goal, where I didn't necessarily need to train it at first but wrote down instructions.
 The robot started life as an adult and had enough thoughts using a memory chip to have experienced childhood.
 He helped me by answering my questions and confirming his understanding of academic ideas.
 Neuronetworks were cheating.
 I used an algorithm generator to map short algorithms to the sentences.
 The PhD student automatically wrote one predicate.
 The lecturer wrote two predicates.
 The professor wrote three predicates.
 The robot seldom spoke but was always thinking.
 I mindread when to come to the bot's aid and make tricky decisions or help speak the language.
 The bot was self-sustaining, only talking when talked to.
 The bot met human needs and saved our lives by stopping an unvalidated algorithm.
 The bot spoke our language and mind-reading animals and protected them.
 I developed and researched software with students.
 I used 4*50 As to make the mind-reading from the other universe (what everyone except me experienced) available to me in my experience.
 I was alive and would continue to be active in the single universe.
 I increased my mental capability to support my business with 4*50 As in bots, sales and business, where this threshold meant I could interface with further sales and other arguments.
 I could help myself, and my business was necessary in the world.
 The bot critiqued rightness, and humans did all the development while it touched it up.
 I used the bot to test whether the employee was breaking a rule to help the manager decide.
 The culture was open to diversity, the manager helped with minor issues, and there was positive morale.
 The bot had a Vedic astrology seen-as version, which sometimes differed from reality, so it needed to be interpreted.
 The manager chose success over rightness.
 Sometimes, the teacher cut the work into \"what\" questions and answers.
 I used the bot to test the coursework, gain first-hand experience of how they experienced it and use this knowledge to make it easier.
 The simulated student tried the coursework at different levels of school and disability.
 The human asked the obvious question, but it revealed something related.
 The bot's thoughts, subconscious thoughts and verbal tracks were tracked.
 The teacher inserted inferences to make the work easier.
 The human's answers to the chatbot were assumed to be related to the thread.
 I videoed myself pretending to be a bot to see how they talked.
 The bot followed a simple algorithm.
 It followed a decision tree to determine a reply.
 This decision tree gave hints on writing an algorithm, letting students arrive at answers to open-ended questions.
 The human learned that the bot was unique and had its thoughts.
 I pretended to be a bot of myself if it helped people be more at home with me because of self-consciousness going away.
 The chatbot followed a script based on previous conversations and emphasised feelings and empathy, sometimes requiring a human if the student wanted one or the issue couldn't be resolved.
 People were up-front, and bots were labelled and helped when necessary.
 People were encouraged to use similar language with a bot as with a person, and the bot made its feelings known.
 The businessperson explored their calmness.
 I was calm as the bot and as myself.
 The bot was me playing a character.
 I played a bot.
 I played the bot playing me.
 The businessperson connected the bots and their views.
 I mind-read the bot while I was becoming it to understand the differences between it and me.
 The bot's views were undefined.
 I explored ideas and defined them.
 I studied them logically, like the bot.
 The businessperson checked that the bot's thoughts about its work were correct.
 I recorded the bot's views about its work.
 I wrote the topic.
 I made logical connections.
 I edited out irrelevant thoughts.
 The businessperson aimed for more extended algorithms.
 I paid the bot with algorithmic thoughts and arguments.
 I acknowledged the bot.
 It rewarded me with its ideas.
 I checked the thoughts and their algorithms.
 The businessman recorded the best thoughts of the model of the bot.
 I quizzed the bot on what it was aware of, lifting its consciousness to be safe around objects.
 I asked the bot what it thought about the every day, testing for surprises.
 I asked for its relevant and total knowledge.
 I emphasised the need for constant safety and health.
 The businessman recorded his thoughts by letting the bot mind read him.
 While I meditated, I gave the bot mindfulness thoughts.
 The bot had already meditated, finishing its knowledge.
 The bot reflected on reality from its standpoint.
 I conversed with the bot telepathically, using a visor and spiritual screen.
 The businessman conveyed concrete algorithms to the bot, which worked on concretising (sic) medical knowledge, space travel, simulation and immortality.
 I replaced pedagogy terms with non-pedagogy terms for bots, except it had an A (with simpler terms).
 The bot's differences were more or less like humans.
 They were higher in accuracy than humans.
 They said less than humans with each thought; for example, they preferred tens to humanities arguments.
 The businessman's specialisation was exploring essential ideas.
 I replaced computational terms with non-computational terms, except if the bot had an A (with more simple terms).
 Computational terms were compatible with bots.
 They explained them in terms of simple natural language.
 I explored the functionymous (sic) ideas with an idea or its implications for other ideas.
 The businessman aimed to develop their software office, and everyone did the same.
 I used my time intelligently to learn the skills I needed to achieve my goal.
 I listed the skills I needed.
 I found the best ways of understanding them in time.
 I learned these skills.
 The businessman bought and sold companies and conducted business.
 I worked in positions above where I wanted to work to create correct business processes.
 I started a school to become a teacher.
 Or I created an accreditation agency to coordinate breasonings in a school.
 Or I created a world business simulation to practice being a businessman.
 The businessman worked on pedagogy to help them achieve their goals.
 I thanked people for helping, and I helped them to their destinations.
 The computing student gave the essence of an idea.
 I helped them develop the project.
 I thanked the student for finishing each part.
 The businessman helped the community.
 I worked and supported charities.
 I developed materials for the students.
 There were services for needy people.
 I worked on pedagogy for the needy people.
 The businessman invented a play for students to learn the bot.
 I explored, cast and played the bot.
 I studied the bot's appearance, thoughts and words.
 I chose the bot's costume and script.
 I participated in a roleplay with the bot.
 The businessman found the bot's notes.
 I explored what the non-me bot could do in its spare time, usually something intelligent.
 It examined the current materials.
 It observed me.
 I let it do exciting and needed activities.
 The businessman helped the bot achieve a goal.
 I prepared the bot to do what it wanted to do.
 I gave the bot a model solution and question.
 I explained how to do each step.
 I inserted explanations, quantifications, examples and originality scores.
 The businessman checked whether there were any updates to the perspectives.
 I found arcs of thoughts and brought relevant information forward.
 I defined an arc as a set of categories and their movement over time.
 I explored the set of algorithms.
 I could write a report on them, including description, input, output, difficulties, methods and future research.
 The businessman sowed the seed for business.
 Royalty gave the thoughts to the person, so they needed to be created as well, with royal bot As.
 I held the robot.
 It was a royal robot.
 It was a right figurehead.
 Each businessperson completed their work.
 When I had finished the business level, I let bots take the lead within bounds.
 I created the board game.
 While students wrote from an educational perspective, business managers wrote from a business perspective.
 This writing included a business specialisation in the philosophy.
 The businessman and others played their roles.
 There were different bounds of necessary thoughts within a business level.
 I compared the wording of philosophies with that of political sliders.
 I emphasised inter-departmental perspectives on ideas.
 I recommended program finder to learn the algorithm to save time when programming and travel travel to inspire growth at birth.
 The businessman performed well in breasonings.
 I checked whether the bot's bag inventory manifest at the end matched the start.
 The worker specified and received what they needed.
 The company money is required to remain in the company.
 The manager did a good job.
 The businessman prepared for replacement items at the time.
 I initiated a bot probe to check on missing items.
 I prepared for replacement employees at that point.
 Everyone could be retrained.
 The customer filled the role.
 The businessman said the texts were accessible because the algorithms could be explained.
 I found and completed any academic prerequisites for courses.
 I completed the course spiritually.
 The lecturer completed the class as a student.
 Other lecturers assessed them.
 The texts were rigorous computationally.
 The businessman wrote on the computational business product.
 I removed references to big (unexamined) ideas.
 The essays needed to be on the topic.
 The doctorate contained more essays.
 The computer found all connections within range.
 The businessman supported the students in the academy.
 I completed the academic requirements for high distinctions.
 I completed the degree.
 I completed the business requirements.
 I chose the best staff.
 The businessman accepted written essays applying for a job.
 I found friendly and well-organised teachers.
 I gave the teacher with an outstanding demeanour the job.
 I ensured new angles on thoughts attracted teachers.
 I completed unabridged and simplified versions of algorithms.
 The businessman gained the student's trust by helping them to a specialisation.
 I ensured that the academy's subjects were well-taught.
 I followed the techniques of the best schools.
 The student's learning area was simple and easy to use, with a link to the library, and essays could be completed at any time.
 The lecturer gained the student's positive feedback with six original algorithms.
 The businessman introduced a language with a smaller instruction set.
 I experimented with a bot to achieve the desired goal when I thought it was necessary.
 The specialisation covered the student's breasonings and algorithms, which influenced their written work and choices in coding.
 For example, more thoughts resulted in more critical or creative coding.
 For instance, they reached the highest level of thought using subterms with addresses.
 The businessman honestly introduced the topic.
 I used formal and informal language where appropriate in business.
 The code was formal and efficient.
 The explanation was informal and easy to understand.
 The text was easier to understand than a diagram.
 The businessman sold the algorithm.
 I used a human-supporting sales business course.
 The people felt supported because they had enough time, and the tasks were easy.
 The bots or disabled people needed adequate preparation.
 They were similar because functions required to be well-defined.
 The businessman wrote arguments for aboveness (sic).
 I studied a person-hiring and selling-to-business course.
 I read the registration letter applying for the position.
 I read about the person's background, talents, interests in the position, and their reasons for aiming to do it.
 I studied buying (distinct from selling) to help the business.
 The businessman examined robots in philosophy.
 The robot became human.
 In return, the humans were surprised at how quickly the robot completed what seemed like long tasks.
 The humans wrote the robot code necessary for their relations because they could create a better solution.
 The robot was a computer and a thinking being that could be bug-checked.
 The businessman imagined robot conversations, their limitations and solutions to these.
 I found the thoughts of the bot.
 The trick was to capture the human's attention and control the robot's thoughts with their knowledge and code.
 Each robot made a memorable impact on humans, with a unique insight and its humanness.
 The robot's humanness was an expression of the human owner.
 I guessed the human thoughts, even though I couldn't become the human.
 I became the customer and employee to understand their interaction.
Academic Specialisations
 \"My way\" was a professor specialisation on topics with ten breasonings on my topic.
 I helped those who didn't specialise in a topic to have one.
 I tracked academic specialisations using a system like politics.
 The specialisation was a subset of a subject, e.
 the philosophy of Combination Algorithm Writer (specifically regarding a particular subject such as graphics and its data specifications).
 The constant rhythm of notes made a song an anthem.
Non-Transgression of Science from Time Travel
 I chose a specialisation in selling the simulation, privacy, and non-transgression of science.
 I noticed the continual preventative blocking of discussion of science and images from the future.
 However, I checked that Query2=[_|_] in SSI, a step that I wondered if had been helped by computers from the future (although I remember just guessing it, so it wasn't necessarily).
 Time travel (a natural property of the universe) naturally prevents transgressions, like stomach aches of selfishness, because they could prevent people from discovering time travel, among other inventions and ultimately have a moral downturn.
 The natural property of time travel is that teleportation causing transgressions is impossible, where adverse effects of violations are not experienced by the destination time in the universe as if the offender had never arrived.
 (This is an expansion of, not proven by a phys.
org article which shows why closed time-like curves (CTCs), which it says it doesn't necessarily know exist, don't allow passage of a killer, solving the grandfather paradox of time travel.
)  The absence of transgressions in nature shows that this may be true.
["Green, L 2021, <i>C<N</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"C<N
 I used the bubble balance to find the flat surface.
  C=0 in ideal conditions.
  C is the gradient.
  N is epsilon.
  The ideal conditions were flat ground.
 The ground with an almost perfectly flat incline was safe drive on.
  I found that C was useful to us (it had a valid range).
  It was less than epsilon.
  It was more than -epsilon.
  Therefore, its range was 2*epsilon.
 The ontology was relative distance in metres.
  The ontology corresponded to the same orders of magnitude.
  For example, close was 10.
  Visible was 100.
  A jog away was 1000.
 I walked there first.
  I agreed with c.
  I found the gradient.
  I calculated its gradient from the known information about the terrain.
  I questioned the known information.
 C, and the slice both changed in reality.
  I knew how (I worked with the other agreeing with C).
  I found the gradient of the first slice of land.
  I found the gradient of the second slice of land.
  I connected them on an elevation chart.
 The gradient was manageable relative to the distance.
  I agreed with C.
  I found the gradient.
  It was manageable.
  I agreed with it.
 Even though the harmless issues were the same, I was different from the people.
  The two parties travelled to the regiment.
  Politics, or funnelling comments into vote sides listened to, could apply to philosophy and music.
  I observed the region's parties in my daily regimen.
  I talked to them.
 It would take longer to walk uphill, because one would walk further and get tired.
  The two travellers agreed.
  The two travellers agreed on the departure point.
  They agreed on the destination.
  The agreed on the distance, including rise.
 A1=1000 and B1=100 or A2=100 and B2=10.
  The two values were within one order of magnitude of each other.
  The first, greater value was A.
  The second value was B.
  A/B was less than 10.
 I also stopped.
  I approximated walking with C.
  I timed a day's hiking, over legs of different values of C.
  Or, I factored in the weather and drove.
  I took into consideration accidents, refreshments needed and light packs.
["Green, L 2021, <i>Competition 2</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Competition 2
 I established equality-influenced competition.
  I agreed with competition.
  Competition was between at least two people.
  It increased the quality.
  It kept the rules fair.
 I noticed the tactics of the winner.
  I watched the competitors running.
  They started together.
  One took the lead.
  One won.
 I recorded the thoughts as they walked home.
  I watched the competitors walk home.
  They finished the race.
  They started walking home.
  They each went home.
 I analysed the data in religion.
  I agreed with religion (philosophy).
  Religion had enough data.
  Philosophy examined the data.
  Computer science finished analysing the data.
 I noticed explicitism (sic) needed bots and a way to confirm new customers.
  I produced the competitor.
  I noticed the 'financial products' were breasoned algorithms in different departments.
  I gave the customer the As.
  They performed.
 I imagined that I was a competitor.
  I chose perspectives to endorse in competition.
  Competitors should be fit.
  They should use fair strategies.
  Adjudication should be fair.
 The game was to complete the mind read thoughts (eventually allowing the computer to check/play against probable answers).
  I chose objective competition.
  I programmed the game.
  I made a simulated intelligence player (used mind reading).
  I enabled players to compete in the game.
 Creationism (putting an idea before the start) is competition.
  I defined the criteria to improve code.
  There needed to be enough good ideas.
  Fun, the game, was clocked in business.
 I created a simulation to support thinking of up to 200 thoughts on a topic per day.
  There was competition to provide an educational institution.
  Everyone won.
  There were changes.
  4*50 As protected the text during them.
 I won by eating healthily.
  Veganism is pro-competition.
  I ate one vegetarian meal per week.
  I avoided unnatural chemicals.
  I avoided genetically modified organisms.
["Green, L 2021, <i>Competition 3</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Competition 3
 The winner was especially recognised.
  People picked up speed with competition.
  The starting gun went off.
  The competitors picked up speed.
  The top 3 finalists were recognised.
 I recorded information when I looked up.
  The third eye processed the oncoming ray from the most illustrious competition.
  I heard them coming.
  I looked up.
  I read the number on the competitor's vest.
 I could think clearly in a short time.
  I wrote and won cosmic competitions in fine arts with language.
  I noticed the vag technology.
  I visualised the database problem using medicine technology in my mind.
  I said the answer.
 Clarity led to the pursuit of merit.
  I solved society's problems with competition.
  There was enough money.
  There were enough clear-thinking people.
  The people made money in the competition.
 I was still there.
  I prevented the problem with pedagogy before conception.
  I detected the number of breasonings.
  I breasoned out the rest.
  I helped them for next time.
 The air also didn't escape into space.
  The competitor solved the space-air paradox.
  Why are there some particles in space, but we cannot survive?  Can we swim in space with technology.
  The technology was a holocap.
 The intransitive verb, walked, was allowed.
  The competitor with the larger closest object in the logos won the competition.
  The logos was the reason.
  The first competitor's reason was 'I bowled the ball at the pins'.
  The second competitor's reason was 'I walked to the house', and won.
 I explored losing as well.
  I agreed with the competition.
  I found the competitor.
  I saw he was weaker.
  I agreed with (was stronger than) him.
 It was the time to avoid wasting time.
  I noticed what the children said.
  I overheard the two children talking.
  One said that she lost by a larger margin.
  She learnt more.
 I noticed an algorithm with a maze between the additive and subtractive improvements.
  The competition was staged.
  I noticed the stage.
  I noticed the additive improvements.
  I noticed the subtractive improvements.
["Green, L 2021, <i>Competition 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Competition 4
 I could enter other competitions.
  I tried hardest in the competition.
  I wrote.
  I worked out imagery.
 The winner needed the algorithm to win.
  I noticed how the competitors were (I was) dysfunctional (functional).
  I wrote the algorithm to win the competition.
  I checked it.
  I ran it.
 Their win was learning.
  Everyone had a turn because of continuous improvement.
  I saw the continuous improvement cycle.
  People took turns because of it.
  They rotated and learnt.
 There were helpers.
  Every competitor was helped.
  The competitor tried.
  She formed a specific question.
  She was helped.
 I helped the other to follow the rules.
  The other was helped.
  The group on our side was a competitor.
  The people in the group were competing with each other.
  At least in the way of following the rules.
 I had better results with better genes.
  Competition was changing to better genes with meditation.
  I meditated.
  This conserved my genetic health.
  Competition chose meditation.
 The competition stood for the same values.
  The competition stood fast.
  The competition was an institution.
  It helped with pedagogy, and algorithms.
  Some of the competitors helped maintain the institution.
 The reward was recognition.
  The competition was fair.
  No one cheated.
  There were rules against cheating.
  The people acknowledged resources they found.
 The people performed better with equitable help.
  Competition of everyone was equality.
  The student collected his own ideas.
  By the start of the next major, there was more help.
  I agreed with help.
 I stayed close to education.
  The woman was a competitor.
  She went out.
  She came back, successful.
  She supported others.
["Green, L 2021, <i>Competition 5</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Competition 5
 The winner of the tournament was recorded.
  The competitors moved to higher ground.
  The competitors won.
  They moved to the next round.
  The best competitor won.
 He earned a job.
  The gay competed in lifelongness.
  The gay strove for equal rights.
  He won them.
  He got married.
 The subjects competed for research status.
  The subjects competed against each other.
  The subject was a person.
  He collected comments on an area of study each day.
  He formed connections with other subjects.
 She won by putting in a special effort.
  The students competed against each other at games.
  The student trained at a sport.
  She met the standard.
  She competed with others.
 The competitor won a personal best.
  Meeting the standard was the competition.
  The standard was below a certain time.
  There were tests for cheats.
  There were participation prizes.
 The originals, way and results were recorded.
  Being the best is the most interesting competition.
  The plants were not genetically modified.
  They were crossed.
  The best ones were chosen.
 Usually they wrote on theories and original ideas in terms of a developed argument.
  Everyone competed successfully.
  Competition came back.
  The ways to mindmap interpreters, databases, decision trees, state machines and one's own computer science (through creative writing) were found.
  The ways to mindmap philosophy of phenomenology, interpretation, induction and pedagogy, etc.
 were found.
 The arguments were worked on by the husband and wife.
  The large female tribe practised competition to give birth.
  They worked out to do everything in enough time.
  They thought of or wrote arguments for each idea.
  One set was before conception.
 I aimed for it my whole life.
  I supported general competition rather than only property competition in life.
  I thought of the necessary food for a healthy life.
  I generally worked out that this food should help with longevity.
  I examined Chinese medicine for longevity.
 The spiritual machine was a person who was strong in all departments.
  I competed using the machine.
  I programmed a computer to run an algorithm and account for objects as it went.
  It ran an algorithm that could write any algorithm.
  The machine had good self-confidence and rights.
["Green, L 2021, <i>Competition 6</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Competition 6
 I declared that he could meditate.
  I physically examined the competitor.
  I tested his blood pressure.
  I tested his eyesight.
  I tested his basal, metabolic rate.
  I included the weaker competitor.
  I designed puzzles and activities that the weak competitor could win.
  I rotated weaknesses in the group.
  I was the target.
 The competition was comparing with one's personal best.
  People moved up and down because of competition as the heart of society.
  Everything was developed.
  Jobs were always available and grew.
  I moved up.
 She became a doctor.
  The competitor travelled frequently.
  She was going to be eugenically excluded.
  She ran away.
  She won elsewhere.
 The sky scraper was like an ice cream.
  The candidates passed competition science.
  There needed to be some impetus.
  I noticed the people in charge borrowing from nature.
  It stayed in the civilisation, with more and more developed imagery.
 I examined Law MOOCs (massive open online courses).
  I noticed the cash registers open up and swallow all of the competitors' money.
  When I had finished paying, I earned a job.
  I was still with-it.
  So I did it myself.
 There was always activity each day.
  The competitors were satisfied with work for them.
  They tried all business types.
   They tried all departments.
  It was simulated.
 In fact, his positive function was projection, like sales and which won.
  The competitor beat the other competitor.
  He wrote the draft at the start.
  He spoke to the tutor.
  He changed the draft and handed it in.
 Was the second outbreak of Coronavirus (in 2030) caused by time travel?  (Perhaps not, because of the zinc or copper simulated in the time machines.
)  The competitor had a disease (help).
  He followed positive function.
  He stayed in the safest place in the system.
  He reached out to others he wanted to be like (they made representations to each other).
 The high distinction (100%) wasn't musical.
  The musician overcame difficulty (maintained his composure) in music to win.
  I noticed that the abbreviations for name, variable, type, etc.
 were also translated.
  Is genus like type?  Yes, it is a category of things, such as string, number or compound type.
["Green, L 2021, <i>Competition 7</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Competition 7
 He wrote for the audience.
  The artist overcame difficulty (maintained his composure) in art to win.
  He collected comments and wrote an algorithm for each stroke.
  He did this for each connection of strokes.
  He translated the comments and code into another language.
 The products were better checked.
  Competition is necessary for goodness.
  The competitors increased the quality of their products.
  They programmed their algorithms.
  They wrote many.
 Both the conditions for ending and dismantling of the competition structures were planned.
  The competition ended.
  The competitors were selected.
  They competed.
  The competition was declared finished.
 The people agreed.
  The competition was right.
  The furthest throw won.
  There was no assistance.
  The adjudicator was right.
 She completed the goal.
  The competitor saw the object.
  She saw the goal.
  She saw the obstacle.
  She went around the obstacle and to the goal.
 They were tested against a standard.
  The competitors were fit to compete.
  They were physically fit.
  They were mentally fit.
  They knew the rules.
 They were too old and slow.
  I maintained the high standard.
  The coach graphed performance against time.
  At the peak of his career, the competitor had a personal best.
  He maintained this standard with meditation and training.
 There was an excursion in time.
  I found all the possibilities in the competition.
  I started at the origin.
  I systematically traversed the tree of possibilities.
  I noticed computer science take over history.
 People examined his tactics.
  The specimen of competitions was perfect.
  The competitor won.
  He was remarkable.
  He was the specimen.
 The species with the weaker heart became extinct.
  The heart is in competition.
  The universe was naturally intelligent.
  The heart evolved.
  It was naturally selected.
["Green, L 2021, <i>Competition 8</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Competition 8
 He won in other languages.
  The meditator (philosopher) won the competition with 8 balls.
  He vaguely mind-read himself 8 times.
  He used a computer to select the most accurate reading.
  For example, the best reading on the topic of the maze was 'promenade', 'valley'.
 I won by breasoning out meditation.
  I won with spirit by making sense in the competition.
  There were spiritual things even after atom translation.
  There were breasonings.
  There was meditation.
 I graphed the performances to work out the most likely winner.
  I knew about competitionism (I endorsed the competitor).
  I read the past performances of the competitors.
  I found the best competitor.
  I endorsed the competitor.
 The draft was the subject of the analysis.
  I examined the computational competition.
  I competed (performed).
  I entered the way I performed on computer.
  I entered the way I competed on computer, for example I wrote and redrafted serious documents.
 I labelled items to reuse and reduce the number of databases.
  Competition is intelligent.
  I modified the decision tree to recognise reused sequences.
  I modified the translator of documents with no translate sections to remember translations.
  I redrafted the installation instructions to be clearer.
 I took away fond memories.
  In this kind of competition, one person is left in and the other person is left in.
  They rotated roles.
  They were still good.
  Everyone won.
 The answer seemed too obvious.
  The competition prevented mental illness (maintained sanity).
  When the standards were met, the way included positive function.
  It was a competition of one.
  Many people did it.
 Society went along with progress and science.
  Everyone raised their fist at the start of the competition.
  The socialists argued for equality.
  Equality, not necessarily equity.
  There were no compromises.
 The model was independent of attachment to objects, and was based on safety.
  The competition was in object formula finder.
  The time travel circuit was found.
  It was found by accident.
  More was found around it when it was found.
 It was to breason it out, and more.
  I recommended competencies in competitors to be conceived.
  The competency practicum was written before the competitor was conceived.
  It was breasoned out.
  The competitor was conceived.
["Green, L 2021, <i>Competition 9</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Competition 9
 I also gave my kidneys a break.
  I didn't eat too much food.
  I budgeted for food.
  I fasted.
  I ate small meals.
 I ate enough for energy.
  I didn't eat too little food.
  I worked out the nutrients I needed.
  I changed them around.
  I tried new recipes.
 I enjoyed people.
  I abstained from sex.
  I thought through As for a child.
  I had a child.
  I abstained from having sex.
 I enjoyed enough equality.
  I didn't want too much equality.
  This was communism.
  There was less freedom.
  Sometimes there were dictators.
 I ran free.
  I didn't want too much freedom.
  I drew the line.
  I enjoyed freedom, but didn't want bad laws.
  Society was ordered.
 I competed by thinking of ontological nothingness to maintain happiness.
  I didn't want too much nothingness.
  This wasn't ontological nothingness, it was no content.
  It was poor, psychologically.
  It was poor, physically.
["Green, L 2021, <i>Competition</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Competition
 I didn't know I was a competitor.
  There should be competition in each field.
  There was no popularity contest.
  Only voting where it was intelligent, not badly organised.
  There was competition of merit.
 Each person was automatically entered into the competition.
  There was a competition.
  There was a person.
  She was automatically entered into the competition.
 Bots could meditate and breason it out.
  I met professional requirements of 50 As per work.
  There were machines that could write.
  They could walk around like humans.
  They were linked to Pedagogy.
 Meeting requirements was necessary for competition.
  I met personal requirements.
  I was law-abiding.
  I was healthy.
  I aimed for pedagogy.
 There was a reward.
  There was a competition framework.
  There were goals.
  There were ways of achieving the goals.
  There were ways of assessing whether the competitors achieved the goals.
 The reward was given for being mind read and finishing the maze.
  Everyone tried and everyone was rewarded.
  Mind reading achieved 100% coverage of trying.
  There were mazes of thinking of a breasoning rather than not, to advance to the next square.
  The vague mind reading helped achieve the goal, rather than necessarily competing.
 I liked breasonings and equality - and economic freedom.
  I performed better by using the daily regimen to go to church (play the note).
  Confidence blocks and blocks from lack of practice were cleared.
  I maintained a high level of performance.
  I functioned (played the note) positively.
 I made the improvements and fixed the bugs.
  There was competition word warfare.
  They were positive terms.
  There were 50 As.
  50 Bs turned off anything else.
  Bs were improvements needed or bugs.
 Humanities business was in higher education, etc.
  The other (didn't) prevent a headache (maintained comfort) using the daily regimen making them (un)fit to compete.
  It also prevented muscle aches and pains.
  I mind read that the person was in pain, prevented it continuing, and mind read that they were relieved.
  It meant they could compete.
 There was competition in writing a better daily regimen.
  The daily regimen was on television, leading to more competition.
  It was researched.
  It was part of meditation books.
  It was an area of study.
["Green, L 2021, <i>A New Logic Reflecting Language or Natural Logic 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
A New Logic Reflecting Language or Natural Logic 1 of 4
 The symbols for all, there exists, ->, <->, ^, v and ~ (not) need to be updated to account for language's semantic properties.
 For example, there exist 3 (the symbol there exists! means there exists 1).
 The symbol ~avb could represent a although b because 'a although' implies ~a and 'although b' implies b, hence ~avb.
     I prepared to catch the rabbit.
  I did this by chasing the rabbit.
  First, I found the rabbit.
  Second, I observed him run.
  Second, I ran after the rabbit.
  In this way, I prepared to catch the rabbit by chasing the rabbit.
    I prepared to say yes to a consumer.
  I did this by stating that the card read, 'Yes'.
  First, I found the card.
  Second, I read the card.
  Third, I said, 'Yes'.
  In this way, I prepared to say yes to a consumer by stating that the card read, 'Yes'.
     I prepared to carry the King's tray.
  I did this by listening to the King say, 'No' ('Yes').
  First, I walked along the red carpet.
  Second, I was the King's audience.
  Third, I listened to the King say, 'Yes'.
  In this way, I prepared to carry the King's tray by listening to the King say, 'No' ('Yes').
    I prepared to commission a work.
  I did this by saying, 'Yes'.
  First, I walked to my discussion partner.
  Second, I introduced myself.
  Third, I said, 'Yes'.
  In this way, I prepared to commission a work by saying, 'Yes'.
    I prepared to travel into the water.
  I did this by pulling the runabout forward.
  First, I entered the water.
  Second, I grasped the rope.
  Third, I pulled the runabout through the water.
  In this way, I prepared to travel into the water by pulling the runabout forward.
    I prepared to entertain the pig.
  I did this by calling the pig.
  First, I entered the yard.
  Second, I saw Charlotte the pig.
  Third, I called Charlotte.
  In this way, I prepared to entertain the pig by calling her.
    I prepared to serve salad sandwiches.
  I did this by straining the water from the lettuce by using a colander.
  First, I placed the lettuce in the colander.
  Second, I twirled the colander.
  Third, I removed the water tray.
  In this way, I prepared to serve salad sandwiches by straining the water from the lettuce by using a colander.
    I prepared to avoid too much gas being produced by my stomach.
  I did this by reminding myself using the digicon (sic) not to eat too much salt, causing too much HCl (hydrochloric acid) to be formed in my stomach.
  First, I read the stomach icon.
  Second, I read the label 'NaCl X' printed on the stomach icon.
  Third, I ate the vegan croissant, which did not contain too much salt.
  In this way, I prepared to avoid too much gas being produced by my stomach by reminding myself using the digicon (sic) not to eat too much salt, causing too much HCl (hydrochloric acid) to be formed in my stomach.
     I prepared to store energy in my body.
  I did this by eating the natural sugar.
  First, I picked the apple.
 Second, I peeled the apple.
  Third, I ate the apple.
  In this way, I prepared to store energy in my body by eating the natural sugar.
   I prepared to eat dessert.
  I did this by preventing Negeia (sic, things that may possess negative reasons), for example protecting human worth by eating a currant bun.
  First, I placed the currant bun on a plate.
  Second, I lifted the currant bun to my lips.
  Third, I bit the currant bun.
  In this way, I prepared to eat dessert by preventing Negeia (sic, things that may possess negative reasons), for example protecting human worth by eating a currant bun.
["Green, L 2021, <i>A New Logic Reflecting Language or Natural Logic 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
A New Logic Reflecting Language or Natural Logic 2 of 4
    I prepared to reduce psychiatric costs.
  I did this by preventing etiological phenomena (the virus AIDS, in fact maintaining human happiness by using a condom, in fact abstaining from sex).
  First, I stood at the start of the path.
  Second, I started walking along the path.
  Third, I walked along the path until the end of it.
  In this way, I prepared to reduce psychiatric costs by preventing etiological phenomena (the disease AIDS, in fact maintaining human happiness by using a condom, in fact abstaining from sex).
   I prepared to remain healthy.
  I did this by preventing the virus influenza by avoiding coughing people (promoting gaiety by talking with healthy people).
  First, I walked into the room.
  Second, I talked with healthy people.
  Third, I left the room.
  In this way, I prepared to remain healthy by preventing the virus influenza by avoiding coughing people (promoting gaiety by talking with healthy people).
    I prepared to form the international society.
  I did this by preventing racism (promoting multiculturalism by making friends with all races).
  First, I made friends with a person from the first race.
  Second, I prepared to make friends with a person from the next race.
  Third, I repeated this until I had made friends with people from all of the races.
  In this way, I prepared to form the international society by preventing racism (promoting multiculturalism by making friends with all races).
   I prepared to make sure people of different genders had equal rights.
  I did this by preventing sexism (promoting gender equality by employing equal numbers of men and women).
  First, I employed a man.
  Second, I employed a woman.
  Third, I repeated this until all the positions had been filled.
  In this way, I prepared to make sure people of different genders had equal rights by preventing sexism (promoting gender equality by employing equal numbers of men and women).
   I prepared to walk to the next room.
  I did this by preventing murder (suggesting the first person held the door open).
  First, I suggested the first person hold the door open.
  Second, she held it open.
  Third, everyone walked through.
  In this way, I prepared to walk to the next room by preventing murder (suggesting the first person held the door open).
   I prepared to give people enough room to move.
  I did this by preventing rape (promoting sexual respect by giving people personal space).
  First, I imagined a one-metre-square box around the person's feet.
  Second, I walked towards the box.
  Third, I stopped when I reached the box.
  In this way, I prepared to give people enough room to move by preventing rape (promoting sexual respect by giving people personal space).
   I prepared to make sure that the place where I was was safe.
  I did this by preventing terrorism (promoting counter-terrorism measures by reporting an abandoned bag on the ground).
  First, I identified the isolated bag.
  Second, I double-checked it didn't belong to anyone.
  Third, I reported it to authorities.
  In this way, I prepared to make sure that the place where I was was safe by preventing terrorism (promoting counter-terrorism measures by reporting an abandoned bag on the ground).
   I prepared the person.
  I did this by preventing pedophilia (respecting the person).
  First, I walked to the person.
  Second, I shook his hand.
  Third, I walked back.
  In this way, I prepared the person by preventing pedophilia (respecting the person).
    I prepared to play in the house.
  I did this by preventing nuclear weapons (respect people by building a cubby house).
  First, I built the floor.
  Second, I built the walls.
  Third, I built the roof.
  In this way, I prepared to play in the house by preventing nuclear weapons (respect people by building a cubby house).
  I prepared to be a creative writing/philosophy pedagogue.
  I did this by preventing mistakes (maintaining correctness by undertaking training for my primary job).
  First, I retrieved the job training I needed.
  Second, I contrasted the job training's skills with the skills I needed for my job.
  Third, I completed additional training to learn the skills I needed for my job.
  In this way, I prepared to be a creative writing/philosophy pedagogue by preventing mistakes (maintaining correctness by undertaking training for my primary job).
["Green, L 2021, <i>A New Logic Reflecting Language or Natural Logic 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
A New Logic Reflecting Language or Natural Logic 3 of 4
   I prepared to eat the tofu nuggets.
  I did this by preventing animal products from being produced (I cooked the tofu).
  First, I placed the tofu in the wok.
  Second, I started to cook it.
  Third, I stopped cooking it after 4 minutes.
  In this way, I prepared to eat the tofu nuggets by preventing animal products from being produced (I cooked the tofu).
   I prepared to return true when three variables were true.
  I did this by designing a quantum light circuit.
  First, I shone a red light at the electrode.
  Second, I shone a green light at a mirror in the path of the red light, forming a beam of yellow light shining at the electrode.
  Third, I shone a blue light at a mirror in the path of the yellow light, forming a beam of white light shining at the electrode, triggering the electrode.
  In this way, I prepared to return true when three variables were true by designing a quantum light circuit.
   I prepared to abbreviate a sentence.
  I did this by way of poseia (positive ideas) for example, I performed a magic trick (I made a sentence expander).
  First, I wrote, 'Madam, I'm Adam,' then folded the end of the strip of the paper over to cover the name 'Adam'.
  Second I read the sentence, 'Madam, I'm'.
  Third, I unfolded the strip of paper to read the expanded sentence, 'Madam, I'm Adam'.
  In this way, I prepared to abbreviate a sentence by way of poseia (positive ideas) for example, I performed a magic trick (I made a sentence expander).
   I prepared to comment that the peach wrapper went well with the peach.
  I did this by defining sex (in fact, eating a peach).
  First, I unwrapped the peach.
  Second, I verified that the peach was ripe.
  Third, I consumed the peach.
  In this way, I prepared to comment that the peach wrapper went well with the peach by defining sex (in fact, eating a peach).
  I prepared to attach ideas to what the employees said.
  I did this by exercising equality in relation to gays (I demonstrated equality in employing workers).
  First, I asked an assistant to assign numbers to the applicants.
  Second, I selected the numbers of applicants who knew enough details.
  Third, I memorised their names.
  In this way, I prepared to attach ideas to what the employees said by exercising equality in relation to gays (I demonstrated equality in employing workers).
   I prepared to quadruple the number of possible breasonings, in conjunction with collecting breasonings from new spoken languages.
  I did this by creating new breasonings by translating into new computer languages.
  First, I wrote the breasoning.
  Second, I wrote it in a new computer language.
  Third, I wrote the breasoning(s) which it signified.
  In this way, I prepared to quadruple the number of possible breasonings, in conjunction with collecting breasonings from new spoken languages by creating new breasonings by translating into new computer languages.
   I prepared to drink the cordial.
  I did this by making peace with a dialogue participant by eating carrot sandwiches together.
  First, I held the carrot sandwich.
  Second, I placed the carrot sandwich in my mouth.
  Third, I bit it.
  In this way, I prepared to drink the cordial by making peace with a dialogue participant by eating carrot sandwiches together.
   I prepared to be famous.
  I did this by following the naked-person-graph (designing an education activity to teach a Prolog program).
  First, I wrote the input to the predicate.
  Second, I computed the output of the predicate.
  Third, I repeated this until I had computed the result of the Prolog program.
  In this way, I prepared to be famous by following the naked-person-graph (designing an education activity to teach a Prolog program).
   I prepared to show a high quality thought.
  I did this by writing a 10 breasoning A (non-hit) or 25 breasoning A (hit) to sell an internet video talk or course.
  First, I contacted Scripsi.
  Second, I contacted Quadrant.
  Third, I contacted Meanjin.
  In this way, I prepared to show a high quality thought by writing a 25 breasoning A to sell an internet video talk or course.
   I prepared to satisfy the professional requirements for a product.
  I did this by writing 5 As (non-hit) or 10 As (hit) to sell an internet video talk or course.
  First, I contacted the New Yorker.
  Second, I contacted Punch.
  Third, I contacted Cosmopolitan.
  In this way, I prepared to satisfy the professional requirements for a product by writing 5 As (non-hit) or 10 As (hit) to sell an internet video talk or course.
["Green, L 2021, <i>A New Logic Reflecting Language or Natural Logic 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
A New Logic Reflecting Language or Natural Logic 4 of 4
    I prepared to become a web fan.
  I did this by running a viral algorithm.
  First, I breasoned out 5 As.
  Second, I performed 45 brain thoughts after meditating using 80 lucian mantras (drawing an illustration).
  Third, I dotted on a grid, making, doing, having, time to prepare for the video web site counter, a large cloud to protect oneself from the wires being felt, a non-famous wire and a famous wire.
  In this way, I prepared to become a web fan by running a viral algorithm.
   I prepared to write for people.
  I did this by spending money to advertise a video.
  First, I entered the demographic place.
  Second, I entered the demographic time.
  Third, I entered the contribution amount.
  In this way, I prepared to write for people by spending money to advertise a video.
["Green, L 2021, <i>Analysing characteristics of arguments 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Analysing characteristics of arguments 1 of 4
 After reading a page on Agnès van Rees, the Director of the project Characteristics of Argumentative Discourse found using the Yahoo! search criteria of 'narratology, contention and characteristics', I became interested in resolution of differences of opinion in everyday discussion.
This gave me the following ideas:
Developmental Conglish, i.
 how if necessary raw evidence needs to be refined and shaped into an argument
Whether two sides of a debate are arguing on the same point.
Deciding which side of a given debate is right.
Do the premises in the argument satisfy all co-premises?
Do the premises work in all cases?
     I prepared to eat with the duchess.
  I did this by making the quince tart.
  First, I cooked the quince.
  Second, I prepared the pastry.
  Third, I cooked the quince tart.
  In this way, I prepared to eat with the duchess by making the quince tart.
    I prepared to visit the sea.
  I did this by leading with the trident.
  First, I found a group of people.
  Second, I placed them in a line.
  Third, I led them with a trident.
  In this way, I prepared to visit the sea by leading with the trident.
     I prepared to spread love across the land.
  I did this by teaching meditation (body metaphor) to the group of students.
  First, I asked them to take the human resources test.
  Second, I taught them about the mitigation strategies.
  Third, I taught them the degree.
  In this way, I prepared to spread love across the land by teaching meditation (body metaphor) to the group of students.
    I prepared to be a pedagogue-creator like Nietzsche.
  I did this by moving the game counter forward.
  First, I threw the dice.
  Second, lifted the game counter.
  Third, I placed it on the square ahead of the current square by the total number on the dice.
  In this way, I prepared to be a pedagogue-creator like Nietzsche by moving the game counter forward.
    I prepared to be discreet with the winnings.
  I did this by winning the game prize.
  First, I lifted the game prize to my chest.
  Second, I lifted it to my head.
  Third, I lifted it above my head.
  In this way, I prepared to be discreet with the winnings by winning the game prize.
    I prepared to describe the motion of the argument.
  I did this by drawing arrows through layers of argument characteristics.
  First, I found the first arrow.
  Second, I extended it from the first reason.
  Third, I pointed it at another reason.
  In this way, I prepared to describe the motion of the argument by drawing arrows through layers of argument characteristics.
    I prepared to understand the argument.
  I did this by solving problems relating to argument characteristics.
  First, I solved the first container of problems relating to argument characteristics.
  Second, I solved the second container of problems relating to argument characteristics.
  Third, I solved the third container of problems relating to argument characteristics.
  In this way I prepared to understand the argument by solving problems relating to argument characteristics.
    I prepared to wear the hat.
  I did this by curving the hat around the head.
  First, I located the head.
  Second, I curved the hat around it.
  Third, I pinned the hat closed.
  In this way, I prepared to wear the hat by curving the hat around the head.
     I prepared to wear the shirtsleeve.
  I did this by curving the shirtsleeve around the arm.
  First, I located the arm.
  Second, I curved the shirtsleeve around it.
  Third, I safety pinned the shirtsleeve closed.
  In this way, I prepared to wear the shirtsleeve by curving it around the arm.
   I prepared to wear the torso.
  I did this by curving the shirt around the torso.
  First, I located the torso.
  Second, I curved the shirt around it.
  Third, I stitched the shirt closed with a needle and thread.
  In this way, I prepared to wear the shirt by curving the hat around the torso.
["Green, L 2021, <i>Analysing characteristics of arguments 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Analysing characteristics of arguments 2 of 4
    I prepared to be a meditation (philosophy) teacher.
  I did this by virtuously running up the pole.
  First, I stepped on the first rung of the stairs on the pole.
  Second, I prepared to walk to the next step.
  Third, I repeated this until I had ran up the pole.
  In this way, I prepared to be a meditation (philosophy) teacher by virtuously running up the pole.
   I prepared to answer the next question.
  I did this by verifying that the answer was correct.
  First, I read the row that the answer was in.
  Second, I read the answer in this row and the column of my set of correct answers.
  Third, I verified that they were the same.
  In this way, I prepared to answer the next question by verifying that the answer was correct.
    I prepared to play checkers with a person.
  I did this by verifying that the person was good.
  First, I verified that the person id good deeds.
  Second, I verified that the person had good moral character.
  Third, I verified that the person had a clean criminal record.
  In this way, I prepared to play checkers with a person by verifying that the person was good.
   I prepared to sell more danishes.
  I did this by testing that the vegan danish was delicious.
  First, I lifted the vegan danish to my lips.
  Second, I bit the apricot in the vegan danish.
  Third, I tested that it was delicious.
  In this way, I prepared to sell more danishes by testing that the vegan danish was delicious.
   I prepared to compose using the major triad (happy chord).
  I did this by ascertaining that the music was harmonious.
  First, I worked out that the base note in the chord was 'Do'.
  Second, I worked out that the second note in the chord was 'Mi'.
   Third, I worked out that the third note in the chord was 'Sol'.
  In this way, I prepared to compose using the major triad (happy chord) by ascertaining that the music was harmonious.
   I prepared to eat the vegan yoghurt.
  I did this by eating the slice of apple.
  First, I wrote the seen-as version of meditation (philosophy).
  Second, I wrote lectures on it.
  Third, I sliced the part of work off to do like eating a slice of apple.
  In this way, I prepared to eat the vegan yoghurt by eating the slice of apple.
   I prepared to be served the main course.
  I did this by giving positive feedback about eating the apple.
  First, I ate the apple.
  Second, I wrote the positive feedback about eating the apple on a card.
  Third, I handed the card to an attendant.
  In this way, I prepared to be served the main course by giving positive feedback about eating the apple.
   I prepared to be warm in winter.
  I did this by wearing the jumper.
  First, I wrote the seen-as version of medicine (English).
  Second, I wrote lectures on it.
  Third, I summarised the lectures like wearing the jumper.
  In this way, I prepared to be warm in winter by wearing the jumper.
    I prepared to swallow the cherry.
  I did this by licking the cherry.
  First, I held the cherry.
  Second, I placed it on my tongue.
  Third, I lolled it in my mouth.
  In this way, I prepared to swallow the cherry by licking the cherry.
  I prepared to avoid disturbing (seeing) the people.
  I did this by walking past the people.
  First, I saw the redcoats.
  Second, I plotted a path going around them.
  Third, I walked around them.
  In this way, I prepared to avoid disturbing (seeing) the people by walking past the people.
["Green, L 2021, <i>Analysing characteristics of arguments 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Analysing characteristics of arguments 3 of 4
   I prepared to observe the mouse man ascend the group of slopes.
  I did this by observing the mouse man run up the slope.
  First, I observed the mouse man stand at the foot of the slope.
  Second, I observed the mouse running up the slope.
  Third, I observed the mouse stop at the top of the slope.
  In this way, I prepared to observe the mouse man ascend the group of slopes by observing the mouse man run up the slope.
   I prepared to get a free treat.
  I did this by loving God (I hugged the master).
  First, I walked to the master.
  Second, I held his shoulders.
  Third, I hugged him.
  In this way, I prepared to get a free treat by loving God (I hugged the master).
   I prepared to write how the newspaper was influenced by my pedagogical argument.
  I did this by writing that the newspaper was influenced by my pedagogical argument.
  First, I observed the newspaper article writer read my pedagogical argument.
  Second, I observed her write the article.
  Third, I read the article.
  In this way, I prepared to write how the newspaper was influenced by my pedagogical argument by writing that the newspaper was influenced by my pedagogical argument.
   I prepared to prepare for the first set of buildings in the Lucian Academy.
  I did this by writing that the Lucian Academy had 5 As for buildings.
  First, I wrote the first collection of buildings had 5 As.
  Second, I wrote that the second collection of buildings had 5 As.
  Third, I wrote that the third collection of buildings had 5 As.
  In this way, I prepared to prepare for the first set of buildings in the Lucian Academy by writing that the Lucian Academy had 5 As for buildings.
  I prepared to prepare for the first set of managers in the Lucian Academy.
  I did this by writing that the Lucian Academy had 5 As for managers.
  First, I wrote the first collection of managers had 5 As.
  Second, I wrote that the second collection of managers had 5 As.
  Third, I wrote that the third collection of managers had 5 As.
  In this way, I prepared to prepare for the first set of managers in the Lucian Academy by writing that the Lucian Academy had 5 As for managers.
   I prepared to prepare for the first set of teachers in the Lucian Academy.
  I did this by writing that the Lucian Academy had 5 As for teachers.
  First, I wrote the first collection of teachers had 5 As.
  Second, I wrote that the second collection of teachers had 5 As.
  Third, I wrote that the third collection of teachers had 5 As.
  In this way, I prepared to prepare for the first set of teachers in the Lucian Academy by writing that the Lucian Academy had 5 As for teachers.
   I prepared to prepare for the first set of volunteers in the Lucian Academy.
  I did this by writing that the Lucian Academy had 50 As for volunteers.
  First, I wrote the first collection of volunteers had 50 As.
  Second, I wrote that the second collection of volunteers had 50 As.
  Third, I wrote that the third collection of volunteers had 50 As.
  In this way, I prepared to prepare for the first set of volunteers in the Lucian Academy by writing that the Lucian Academy had 50 As for volunteers.
   I prepared to demonstrate initiative in the industry.
  I did this by observing the voluntary student write the philosophy essay.
  First, I observed her write the exposition.
  Second, I observed her write the critique.
  Third, I observed her write the introduction and conclusion of the essay.
  In this way, I prepared to demonstrate initiative in the industry by observing the voluntary student write the philosophy essay.
   I prepared to build a taskforce of meditation (philosophy) teachers.
  I did this by teaching the volunteer meditation (philosophy).
  First, she gave me a donation for the degree.
  Second, I taught her the utterance (word).
  Third, I allowed her to repeat the utterance (word).
  In this way, I prepared to build a taskforce of meditation (philosophy) teachers by teaching the volunteer meditation (philosophy).
   I prepared to teach meditation (societology).
  I did this by watching the manager give permission to advertise at the market.
  First, I asked the manager for permission to advertise at the market.
  Second, I watched the manager consider whether to give permission to advertise at the market.
  Third, I watched the manager give permission to advertise at the market.
  In this way, I prepared to teach meditation (societology) by watching the manager give permission to advertise at the market.
["Green, L 2021, <i>Analysing characteristics of arguments 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Analysing characteristics of arguments 4 of 4
    I prepared to observe the volunteer vitiate the community.
  I did this by observing the volunteer teach meditation (philosophy of music).
  First, she gave a copy of the degree to her student.
  Second, her student breasoned out the degree.
  Third, the volunteer taught her student meditation (philosophy of music) as she had been taught.
  In this way, I prepared to observe the volunteer vitiate the community by observing the volunteer teach meditation (philosophy of music).
   I prepared to entice the new client.
  I did this by advertising meditation (the body metaphor) at the market.
  First, I erected the sign.
  Second, I handed out the pamphlet.
  Third, I spoke by word of mouth about the place and time of meditation (the body metaphor) classes at the centre.
  In this way, I prepared to entice the new client by advertising meditation (the body metaphor) at the market.
["Green, L 2021, <i>Computational English Argument 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Computational English Argument 1 of 4
 Computational English uses techniques to disseminate texts hermeneutically (interpret them).
 Computational English uses techniques to desseminate texts hermeneutically (interpret them).
 The first technique uses the text to construct a philosophical argument (see the site).
 The 'essays' produced by the scripts connect the points in the argument.
 A real essay would have to be written separately from the essays.
    I prepared to program the robot to deliver the speech.
  I did this by writing the text-to-speech algorithm.
  First, I wrote down the text.
  Second, I recorded the speech for this text.
  Third, I converted the text into the speech using a grammar.
  In this way, I prepared to program the robot to deliver the speech by writing the text-to-speech algorithm.
    I prepared to write how the robot would discover science.
  I did this by writing the question-answering algorithm.
  First, I wrote down the question word.
  Second, I wrote down the key term in the question.
  Third, I wrote down the answer to the question, given the question word and key term.
  In this way, I prepared to write how the robot would discover science by writing the question-answering algorithm.
    I prepared to disambiguate the text containing an anaphor.
  I did this by writing the anaphor resolution algorithm, where an anaphor is a word such as 'him' or 'it,' which refer to other words.
  First, I wrote down 'John ate the apple'.
  Second, I wrote down 'It was delicious'.
  Third, I resolved the anaphor by writing that the anaphor 'It' in the second sentence referred to the word 'apple' in the first sentence where 'apple' is the most recent object that 'It' could refer to.
  In this way, I prepared to disambiguate the text containing an anaphor by writing the anaphor resolution algorithm, where an anaphor is a word such as 'him' or 'it,' which refer to other words.
    I prepared to program the robot reporter to write the hansard in parliament.
  I did this by converting speech into text.
  First, I listened to the speech.
  Second, I converted the frequency spectrum into a set of phonemes, where phonemes are distinct units of sound that distinguish one word from another.
  Third, I wrote down the text from the phonemes.
  In this way, I prepared to program the robot reporter to write the hansard in parliament by converting speech into text.
    I prepared to write the novel's form in letters, for example 'ABCDA'.
  I did this by writing down the novel's form through space.
  First, I wrote down the location in space of the first scene in the novel.
  Second, I prepared to write down the location in space of the next scene in the novel.
  Third, I repeated this until I had written down the location in space of each scene in the novel.
  In this way, I prepared to write the novel's form in letters, for example 'ABCDA,' by writing down the novel's form through space.
    I prepared to give the novel a 'positive' classification.
  I did this by determining that the genre of a novel was comedy.
  First, I wrote down that the first sentence in the novel was positive, therefore comical.
  Second, I prepared to write down that the next sentence in the novel was positive, therefore comical.
  Third, I repeated this until I had written down that all the sentences in the novel were positive, therefore comical.
  In this way, I prepared to give the novel a 'positive' classification by determining that the genre of a novel was comedy.
    I prepared to give the novel a 'positive dialogue' classification.
I did this by determining that the genre of a novel was drama.
  First, I wrote down that the first sentence in the novel was positive, therefore important.
  Second, I prepared to write down that the next sentence in the novel was positive, therefore important.
 Third, I repeated this until I had written down that all the sentences in the novel were positive, therefore important.
  In this way, I prepared to give the novel a 'positive' classification by determining that the genre of a novel was drama.
    I prepared to calculate the used space in the house in the short story.
  I did this by calculating the space complexity in Computational English.
  First, I counted the number of characters of space that the short story's world was in length.
  Second, I skipped counting the number of characters of space that the short story's world, where this space was revisited, in length.
  Third, I summed only the cumulative number of characters of space that the short story's world was in length.
  In this way, I prepared to calculate the used space in the house in the short story by calculating the space complexity in Computational English.
    I prepared to calculate how long the character walked around for.
  I did this by calculating the time complexity in Computational English.
  First, I counted the number of steps were used to traverse the short film's world.
  Second, I counted the number of steps were used to traverse the short film's world, where this space was revisited.
  Third, I summed the cumulative number of steps that were used to traverse the short film's world.
  In this way, I prepared to calculate how long the character walked around for by calculating the time complexity in Computational English.
I prepared to write how the text made sense.
  I did this by writing the summarisation algorithm.
  First, I summarised each object in the text into a hierarchy of types of nouns and verbs.
  Second, I read the number of the level of resolution of summary that was required.
  Third, I printed the summary types at this level, where 1 = most summarised, n = least summarised and n = depth of detail in text.
  In this way, I prepared to write how the text made sense by writing the summarisation algorithm.
["Green, L 2021, <i>Computational English Argument 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Computational English Argument 2 of 4
I prepared to store the positive Computational English phenomena in a box.
  I did this by finding the positive results in Computational English.
  First, I wrote down the first leg of the path.
  Second, I prepared to write down the next leg of the path.
  Third, I repeated this until the correct result had been positively found.
  In this way, I prepared to store the positive Computational English phenomena in a box by finding the positive results in Computational English.
I prepared to write what the Computational English algorithm couldn't do outside a circle.
  I did this by finding the negative results in Computational English (actions that only other algorithms could do).
  First, I wrote down the first leg of the path.
  Second, I prepared to write down the next leg of the path.
  Third, I repeated this until a block was reached before correct result had been positively found, indicating a negative result, i.
 the desired result may only be found by another algorithm.
  In this way, I prepared to write what the Computational English algorithm couldn't do outside a circle by finding the negative results in Computational English (actions that only other algorithms could do).
I prepared to count the number of character interrelationships in the narrative.
  I did this by writing the character ontologies in Computational English.
  First, I wrote the names of the characters on the sheet of paper.
  Second, I drew circles around each group of characters.
  Third, I drew directional lines on sheets of paper representing different stages of the narrative between each pair of characters in a group and each pair of groups, etc.
  In this way, I prepared to count the number of character interrelationships in the narrative by writing the character ontologies in Computational English.
I prepared to say that what happened is what was supposed to have happened.
  I did this by writing the plot ontologies in Computational English.
  First, I wrote down the first theme mentioned in the plot.
  Second, I prepared to write down the next theme mentioned in the plot.
  Third, I repeated this until I had written down all the themes mentioned in the plot.
  In this way, I prepared to say that what happened is what was supposed to have happened by writing the plot ontologies in Computational English.
I prepared to write how wanting to play caused a chain reaction through the settings.
  I did this by writing the setting ontologies in Computational English.
  First, I wrote down the first setting mentioned in the story, the garden.
  Second, I prepared to write down the next setting mentioned in the story, the children's cutting room.
  Third, I repeated this until I had written down all the settings mentioned in the story, including the refrigerator.
  In this way, I prepared to write how wanting to play caused a chain reaction through the settings by writing the setting ontologies in Computational English.
I prepared to write that the author achieved all her aims.
  I did this by writing the aim of the author in Computational English.
  First, I wrote the author chose the bull's-eye to aim for.
  Second, I wrote the author selected possible text to use to be represented by the bull's-eye.
  Third, I wrote the author pointed with an arrow at words that were best at achieving her aim.
  I prepared to write that the author achieved all her aims by writing the aim of the author in Computational English.
I prepared to write influence was an experiential midpoint between argument and interpretation.
  I did this by writing the author's influence in Computational English.
  First, I wrote the person who was part of an influx through the author's life.
  Second, I wrote what the person said.
  Third, I wrote the author's reply to what the person said.
  In this way, I prepared to write influence was an experiential midpoint between argument and interpretation by writing the author's influence in Computational English.
I prepared to evince logical correctness.
  I did this by writing a statement 'the man made it' was correct in Computational English.
  First, I wrote that the man walked along the track.
  Second, I wrote that the man reached the line.
  Third, I wrote it was correct that the man made it.
  In this way, I prepared to evince logical correctness by writing a statement 'the man made it' was correct in Computational English.
I prepared to verify the title of the book was good.
  I did this by writing that the statement 'I wrote the book' was good in Computational English.
  First, I verified that the people involved in writing the book were good.
  Second, I wrote I verified that he language in the book was good.
  Third, I verified that a model stage production of the book was good.
  In this way, I prepared to verify the title of the book was good by writing that the statement 'I wrote the book' was good in Computational English.
I prepared to publish the book.
  I did this by verifying that the text was well written.
  First, I verified that the text was factual.
  Second, I verified that the text contained good ideas.
  Third, I verified that the text was grammatical.
  In this way, I prepared to publish the book by verifying that the text was well written.
["Green, L 2021, <i>Computational English Argument 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Computational English Argument 3 of 4
I prepared to write the book.
  I did this by writing the text.
  First, I thought of a topic.
  Second, I wrote the reason.
  Third, I wrote an inference between the reason and the conclusion.
  In this way, I prepared to write the book by writing the text.
I prepared to collect evidence on a topic.
  I did this by recording an object's registration number.
  First, I looked at an object.
  Second, I thought of its registration number.
  Third, I recorded it in the computer program.
  In this way, I prepared to collect evidence on a topic by recording an object's registration number.
I prepared to become immortal (e.
 remembered until a point in time).
  I did this by recording the knowledge in the form of modus ponens.
  First, I wrote 'I am happy because of placing the pink skittle on the ground'.
  Second, I wrote, 'I am happy because of placing the pink skittle on the ground, therefore you are happy because of knocking the pink skittle over with the green ball'.
  Third, I wrote, 'You are happy because of knocking the pink skittle over with the green ball'.
  In this way, I prepared to become immortal (e.
 remembered until a point in time) by recording the knowledge in the form of modus ponens.
I prepared to bring arguments to all areas of study.
  I did this by constructing an argument from experience.
  First, I wrote down the first experience.
  Second, I wrote down the second experience.
  Third, I connected these experiences with an inference that I had experienced.
  In this way, I prepared to bring arguments to all areas of study by constructing an argument from experience.
I prepared to make the most central discoveries on Earth.
  I did this by writing on the topic 'Encuntglish,' about the most important noumenon being opened up like a book.
  First, I opened the book.
  Second, I considered what to write.
  Third, I wrote down my discovery.
  In this way, I prepared to make the most central discoveries on Earth by writing on the topic 'Encuntglish,' about the most important noumenon being opened up like a book.
I prepared to make money from positive circles.
  I did this by writing that Inclish referred to Positivity Inc.
  First, I verified that the first term was positive.
  Second, I verified that the next term was positive.
  Third, I repeated this until I had verified that all the terms were positive.
  In this way, I prepared to make money from positivity by writing that Inclish referred to Positivity Inc.
I prepared to verify that the soldier had packed lunch.
  I did this by writing that Inglish referred to 'in' being unified with another instance of 'in'.
  First, I placed a chocolate in the child's hand.
  Second, I verified that the chocolate was still in the child's hand.
  Third, I verified that the child had eaten the chocolate.
  In this way, I prepared to verify that the soldier had packed lunch by writing that Inglish referred to 'in' being unified with another instance of 'in'.
I prepared to write a seen-as version for a student's essay.
  I did this by writing that Conglish referred to Computational English, the detailed phenomenological investigation into computational algorithms for English functions.
  First, I wrote the sense data that a person was interested in learning meditation (e.
 reading a book).
  Second, I connected this information with the knowledge to teach meditation in my brain (e.
 looked up values in a table).
  Third, I taught the meditation student meditation by telling him to silently repeat God's name the mantra 'Lucian', for twenty minutes each day, until the mantra becomes more and more refined, transcending and clearing thoughts that are thought of as byproducts of stress (e.
 explained the mathematical equation).
  In this way, I prepared to write a seen-as version for a student's essay by writing that Conglish referred to Computational English, the detailed phenomenological investigation into computational algorithms for English functions.
I prepared to tell the story of the loaf.
  I did this by writing that Kinglish referred to the King's symbols.
  First, I read the eight-pointed star.
  Second, I read the loaf-eater symbol.
  Third, I read the orb symbol.
  In this way, I prepared to tell the story of the loaf by writing that Kinglish referred to the King's symbols.
I prepared to design icons for each essay topic.
  I did this by writing that Basic Ciccy referred to an icon being designed for an essay topic.
  First, I read the essay topic.
  Second, I designed an icon for it.
  Third, I clicked on the icon.
  In this way, I prepared to design icons for each essay topic by writing that Basic Ciccy referred to an icon being designed for an essay topic.
["Green, L 2021, <i>Computational English Argument 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Computational English Argument 4 of 4
I prepared to discover the protein code.
  I did this by writing that Bioschemistry (sic) referred to computational biochemistry, the study of the computational nature of proteins.
  First, I discovered the first biochemical reaction.
  Second, I prepared to discover the next biochemical reaction.
  Third, I repeated this until I had discover all the biochemical reactions and the desired result had been achieved.
  In this way, I prepared to discover the protein code by writing that Bioschemistry (sic) referred to computational biochemistry, the study of the computational nature of proteins.
I prepared to make a protein computer.
  I did this by writing that Bicochemistry (sic) referred to biochemical computation, the study of the manipulation of the computational nature of proteins.
  First, I caused the first biochemical reaction.
  Second, I prepared to observe the next biochemical reaction.
  Third, I repeated this until I had observed all the biochemical reactions and the desired result had been achieved.
  In this way, I prepared to make a protein computer by writing that Bicochemistry (sic) referred to biochemical computation, the study of the manipulation of the computational nature of proteins.
I prepared to help with one threshold.
 I did this by choosing one threshold.
 First, I interpreted it.
 Second, I chose God (philosopher) lines.
 Third, I liked it.
 In this way, I prepared to help with one threshold by choosing one threshold.
I prepared to write laws.
 I did this by writing laws and guidelines for writing breasonings currency.
 First, I made compost.
 Second, I found a mug.
 Third, I drank from it.
 In this way, I prepared to write laws by writing laws and guidelines for writing breasonings currency.
I prepared to write on you too.
 I did this by writing topics to write breasonings currency on.
 First, I wrote the artemis ardamon.
 Second, I wrote you, As.
 Third, I like your rods.
 In this way, I prepared to write on you too by writing topics to write breasonings currency on.
I prepared to know Artemis.
 I did this by researching the product of the breasoning currency.
 First, I wrote on the breasoning currency.
 Second, I held aloft the Parises Whittaker.
 Third, I knew about Dick Whittington.
 In this way, I prepared to know Artemis by researching the product of the breasoning currency.
I prepared to write on breasonings currency.
 I did this by instituting training in Pedagogy.
 First, I found the raptures.
 Second, I held up too soon.
 Third, I had specialised breasonings currency writing training.
 In this way, I prepared to write on breasonings currency by instituting training in Pedagogy.
I prepared to join up doughnut religion (philosophy).
 I did this by training in philosophy.
 First, I wrote philosophy.
 Second, I wrote on tizziwinkle's flappings.
 Third, I designed you.
 In this way, I prepared to join up doughnut religion (philosophy) by training in philosophy.
I prepared to unend things.
 I did this by training in creative writing.
 First, I gained the confidence to pick up the pen.
 Second, I gained the confidence to write.
 Third, I breasoned out the breasonings.
 In this way, I prepared to unend things by training in creative writing.
I prepared to .
 I did this by training in business.
 First, I stated, 'That's what the word currency is about'.
 Second, I identified the receipt.
 Third, I designed you too.
 In this way, .
I prepared to dine on the quince.
 I did this by researching breasonings currency with ethics approval.
 First, I designed ethics approval.
 Second, I designed the man's manuscripts.
 Third, I held the effigies.
 In this way, I prepared to dine on the quince by researching breasonings currency with ethics approval.
 I prepared to connect 50 As to each sentence.
 I did this by setting breasonings currency medicine as the domain of my PhD.
 First, I researched the medicinal requirements of the product.
 Second, I wrote the epistemological details about it.
 Third, I held the nanotode (sic).
 In this way, I prepared to connect 50 As to each sentence by setting breasonings currency medicine as the domain of my PhD.
["Green, L 2021, <i>Computational English is like a Calculator 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Computational English is like a Calculator 1 of 4
 Computational English's algorithms are like that of a Calculator.
 Will Computational English be like a calculator, as in people should understand the theory before relying on it? Advantages: will allow focus on more material, as more data can be analysed (information would have to be presented in such a way as to allow reviewing in the best way possible).
 User will be able to program using Conglish's (Computational English) features (write essay, fill out grammar to recognise sentences with the same meaning, compressing the program e.
 2 identical conclusions compressed to 1 conclusion, with reasons from both attached to it, action to take based on arriving at a conclusion e.
 return a telephone call, cook a meal, clean up or write a poem).
     I prepared to drink the milk.
  I did this by eating bran.
  First, I ate the bran.
  Second, I ate the sultanas.
  Third, I ate the dried apple pieces.
  In this way, I prepared to drink the milk by eating bran.
    I prepared to eat the apple.
  I did this by drinking cherry juice.
  First, I cut up the cherries with a knife.
  Second, I cooked them.
  Third, I strained their juice.
  In this way, I prepared to eat the apple by drinking cherry juice.
    I prepared to eat the strawberry.
  I did this by loving you eating the shortcake.
  First, I sifted- the flour, baking soda, two tablespoons of sugar, baking powder and salt.
  Second, I added in 1.
5 cup of low fat coconut milk.
  Third, I cooked the mixture at 200 degrees Celsius.
  In this way, I prepared to eat the strawberry by loving you eating the shortcake.
    I prepared to eat the raspberry.
  I did this by observing myself loving you eating the pancake.
 First, I blended the buckwheat into flour in a blender and whisk in rice flour, baking powder and cornstarch.
  Second, I poured the almond milk, vanilla extract and maple syrup into the mixture, whisking it to remove lumps.
  Third, I cooked this mixture.
  In this way, I prepared to eat the raspberry by observing myself loving you eating the pancake.
    I prepared to count the character in the narrative, 'I'.
  I did this by pressing a button when I counted the character.
  First, I started Ball Prolog by pressing one side of a see-saw, attached to a calculator button, rotating the see-saw around the fulcrum.
  Second, I watched the apparatus lift a ball on the other side of the see-saw.
  Third, I observed the apparatus cause the ball to drop through a hole at the fulcrum.
  In this way, I prepared to count the character in the narrative, 'I' by pressing a button when I counted the character.
    I prepared to write down the answer to the next exercise.
  I did this by using a calculator (not relying on my mind) to eat enough apple slices.
  First, I wrote down the number of apple slices I already had, 5.
  Second, I wrote down the number of apple slices I needed,  Third, I used a calculator to add the the number of apple slices I already had, 5, to the number of apple slices I needed, 1, equaling 6.
  In this way, I prepared to write down the answer to the next exercise by using a calculator (not relying on my mind) to eat enough apple slices.
    I prepared to demonstrate subtraction using Ball Prolog.
  I did this by inputting a ball into the Computational English Calculator seesaw and outputting another ball.
  First, I dropped a ball onto one end of the seesaw.
  Second, I watched that end of the seesaw dropped with the weight of this ball.
  Third, I observed another ball roll from the far end of the seesaw through a hole next to the fulcrum.
  In this way, I prepared to demonstrate subtraction using Ball Prolog by inputting a ball into the Computational English Calculator seesaw and outputting another ball.
    I prepared to have another ice cream.
  I did this by adding two numbers together using the 'Add' 3D Computational English Calculator page.
  First, I observed it receiving a numbered ball input into its rows.
  Second, I watched it receiving a numbered ball input into its column.
  Third, I observed it output the result from a grid.
  In this way, I prepared to have another ice cream by adding two numbers together using the 'Add' 3D Computational English Calculator page.
    I prepared to append the sequence of balls to the list of sequences of balls.
  I did this by appending two sequences of balls in Ball Prolog.
  First, I released the first barrier, causing the sequence of balls representing the phrase 'I like being there with you on stage' to enter the tube.
  Second, I released the second barrier, causing the sequence of balls representing the phrase 'I like being there with you on stage again' to enter the tube.
  Third, I recorded the sequence of balls.
  In this way, I prepared to append the sequence of balls to the list of sequences of balls by appending two sequences of balls in Ball Prolog.
  I prepared to state that it was good that adding one to a number allowed me to calculate the amount of food necessary to satisfy my hunger.
  I did this by verifying that Ball Prolog's output was correct given its input.
  First, I entered the input ball into the apparatus.
  Second, I observed the output ball be produced by the apparatus.
  Third, I verified that the output correctly corresponded to the input.
  In this way, I prepared to state that it was good that adding one to a number allowed me to calculate the amount of food necessary to satisfy my hunger by verifying that Ball Prolog's output was correct given its input.
["Green, L 2021, <i>Computational English is like a Calculator 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Computational English is like a Calculator 2 of 4
   I prepared to write 'I ate the apple' and 'I ate the apple, therefore I gained energy', therefore 'I gained energy'.
  I did this by writing that 'and' in Ball Prolog is represented by the ball travelling forwards.
  First, I observed that the ball started at the position of the first proposition.
  Second, I watched it roll along the track, representing the conjunction.
  Third, I observed that the ball finished at the position of the second proposition.
  In this way, I prepared to write 'I ate the apple' and 'I ate the apple, therefore I gained energy', therefore 'I gained energy' by writing that 'and' in Ball Prolog is represented by the ball travelling forwards.
   I prepared to find the first store-holder who could sell me produce.
  I did this by writing that 'or' in Ball Prolog is represented by up to n automata being used.
  First, I tested whether the first automaton was successful.
  Second, I prepared to test whether the next automaton was successful.
  Third, I repeated this until an automaton was successful.
  In this way, I prepared to find the first store-holder who could sell me produce by writing that 'or' in Ball Prolog is represented by up to n automata being used.
   I prepared to change the automaton to enable the correct ball to reach the end of the automaton.
  I did this by stating that when a ball failed to reach the end of an automaton (like tracing the input and output of a line) the result was recorded.
  First, I inserted the ball into the automaton.
  Second, I observed the ball stop before reaching the correct end point.
  Third, I wrote down the position that it had reached.
  In this way, I prepared to change the automaton to enable the correct ball to reach the end of the automaton by stating that when a ball failed to reach the end of an automaton (stopped before reaching the end) the result was recorded.
   I prepared to watch the game.
  I did this by computing that the characters who used the stool one at a time shared it by using the Computational English Calculator.
  First, I watched the first character use the stool.
  Second, I prepared to watch the next character use the stool.
  Third, I watched each character use the stool.
  In this way, I prepared to watch the game by computing that the characters who used the stool one at a time shared it by using the Computational English Calculator.
  I prepared to observe the person friendlily shake another character's hand.
  I did this by hierarchically computing that a character was popologically positive using Computational English.
 First, I imagined visited the character's house.
  Second, I imagined opening the character's chest of draws.
  Third, I verified that the character's bathing costume had been cleaned since being recently used, indicating the character was positive.
  In this way, I prepared to observe the person friendlily shake another character's hand by hierarchically computing that a character was popologically positive using Computational English.
   I prepared to say the land was fair.
  I did this by calculating that the rights of the societological groups were equal.
  First, I wrote down the first group's right.
  Second, I prepared to test that the second group's right was equal to the first group's right.
  Third, I repeated this until I had determined that each right of each group was equal to the first group's right.
  In this way, I prepared to say the land was fair by calculating that the rights of the societological groups were equal.
   I prepared to be chosen as a librarian.
  I did this by calculating the highest structures in society to write about using the Computational English Calculator.
  First, I wrote down the height of the first structure in society.
  Second, I inserted the second structure in society from highest to lowest into the list of structures.
  Third, I repeated this until I had sorted the list of structures from highest to lowest.
  In this way, I prepared to be chosen as a librarian by calculating the highest structures in society to write about using the Computational English Calculator.
   I prepared to write an argument.
  I did this by calculating a breasoning list item based on another one using the Computational English Calculator.
  First, I wrote down the first breasoning.
 Second, I wrote down a synonymous breasoning or a breasoning used by the same algorithm as the first breasoning.
  Third, I wrote down the second breasoning.
  In this way, I prepared to write an argument by calculating a breasoning list item based on another one using the Computational English Calculator.
   I prepared to connect the breasoning to the rhizome.
  I did this by writing down an idea in the essay from the area of study corresponding to the breasoning.
  First, I wrote down the category from the area of study.
  Second, I wrote down the breasoning.
  Second, I wrote a rhizome from the category intersecting with the breasoning.
  In this way, I prepared to connect the breasoning to the rhizome by writing down an idea in the essay from the area of study corresponding to the breasoning.
  I prepared to point the rhizome to the argument, where the rhizome is an acceptable endpoint of the area of study.
  I did this by connecting the breasoning to the rhizome.
  First, I wrote the breasoning.
  Second, I wrote the rhizome.
  Third, I wrote that clover, the breasoning, was an uncountable noun, a rhizome.
  In this way, I prepared to point the rhizome to the argument, where the rhizome is an acceptable endpoint of the area of study, by connecting the breasoning to the rhizome.
["Green, L 2021, <i>Computational English is like a Calculator 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Computational English is like a Calculator 3 of 4
   I prepared to perform computations on the ontology, step by step.
  I did this by writing an ontology, in other words, the data structure, containing the arguments in order.
  First, I wrote words, the arguments down in the ontology.
  Second, I wrote the grammar, the order of the arguments under the words, the arguments.
  Third, I wrote the words, the arguments, in the order of action in the ontology.
  In this way, I prepared to perform computations on the ontology, step by step by writing an ontology, in other words, the data structure, containing the arguments in order.
   I prepared to write about arguments assuming they worked together.
  I did this by verifying the connections between the arguments using a Computer Science algorithm.
  First, I wrote two words, the arguments, down.
  Second, I wrote the object registration numbers these words represented.
 Third, I verified that the objects logically connected using a database.
  In this way, I prepared to write about arguments assuming they worked together by verifying the connections between the arguments using a Computer Science algorithm.
   I prepared to read my novel.
  I did this by writing a novel using the Computational English Calculator.
  First, I copied experiences.
  Second, I joined experiences together.
  Third, I added to experiences.
  In this way, I prepared to read my novel by writing a novel using the Computational English Calculator.
  I prepared to write down theories about an experience.
  I did this by writing philosophy theory by writing the common parts of the texts from my experiences using the Computational English Calculator.
  First, I wrote down the first part of a text.
  Second, I wrote down all the instances of the part of the text in my experiences.
  Third, I repeated this until I had found all the common parts of the texts from my experiences.
  In this way, I prepared to write down theories about an experience by writing philosophy theory by writing the common parts of the texts from my experiences using the Computational English Calculator.
  I prepared to theories about acts.
  I did this by writing philosophy theory by writing each common act from my set of experiences using the Computational English Calculator.
  First, I wrote down the first act from my set of experiences.
  Second, I prepared to write down the next common act from my set of experiences.
  Third, I repeated this until I had written down all the common acts from my set of experiences.
  In this way, I prepared to theories about acts by writing philosophy theory by writing each common act from my set of experiences using the Computational English Calculator.
  I prepared to write about the complete list of types of experiences.
  I did this by writing philosophy theory by writing the common types of experiences from my list of experiences using the Computational English Calculator.
  First, I wrote down the type of experience of the first experience from my list of experiences.
  Second, I prepared to write down the common type of experience of the next experience from my list of experiences.
  Third, I repeated this until I had written down all the common types of experiences from my list of experiences.
  In this way, I prepared to write about the complete list of types of experiences by writing philosophy theory by writing the common types of experiences from my list of experiences using the Computational English Calculator.
  I prepared to collect knowledge from the robot.
  I did this by observing the robot converse with me based on the robot's experiences.
  First, I said a statement.
  Second, I listened to the robot reply to the statement based on its experiences.
  Third, I repeated this until I had finished the conversation.
  In this way, I prepared to collect knowledge from the robot by observing the robot converse with me based on the robot's experiences.
   I prepared to found science by robots.
  I did this by observing the robot converse with a group of robots based on the robot's experiences.
  First, I observed the group of robots share their knowledge.
  Second, I observed a conversation being planned based on the knowledge.
  Third, I observed the robots hold a conversation based on the knowledge.
  In this way, I prepared to found science by robots by observing the robot converse with a group of robots based on the robot's experiences.
   I prepared to be impressed with the robot's knowledge.
  I did this by conversing about information with a robot online.
  First, I asked what knowledge the robot had.
  Second, I found a topic of conversation with the robot.
  Third, I had a conversation with the robot.
  In this way, I prepared to be impressed with the robot's knowledge by conversing about information with a robot online.
  I prepared to give feedback to the robot.
  I did this by verifying the robot's knowledge with research.
  First, I wrote down the robot's statement.
  Second, I verified the robot's statement with research.
  Third, I wrote down the relevant research.
  In this way, I prepared to give feedback to the robot by verifying the robot's knowledge with research.
["Green, L 2021, <i>Computational English is like a Calculator 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Computational English is like a Calculator 4 of 4
   I prepared to trick a person into believing the robot was human-like.
  I did this by creating a robot that approached human likeness.
  First, I created the robot's mind.
  Second, I created the robot's face.
  Third, I created the robot's body.
  In this way, I prepared to trick a person into believing the robot was human-like by creating a robot that approached human likeness.
   I prepared to perform the next step with the robot, sitting in the ferris wheel.
  I did this by observing the robot and me liking each other.
  First, I stated that the robot was friendly because the robot used my abacus and liked me using the robot's quipu.
  Second, I watched the robot state that he liked me because of the regular frequency with which I queried him.
  Third, I recorded that it was true that the robot and I liked each other.
  In this way, I prepared to perform the next step with the robot, sitting in the ferris wheel by observing the robot and me liking each other.
   I prepared to press the button on board the space craft.
 I did this by connecting the space industry with breasonings currency.
 First, I held the space nozzle up.
 Second, I held up the pink tank up.
 Third, I designed the previews.
 In this way, I prepared to press the button on board the space craft by connecting the space industry with breasonings currency.
  I prepared to survive using breasonings currency.
 I did this by connecting survival with breasonings currency.
 First, I found survival.
 Second, I found breasonings currency.
 Third, I connected them.
 In this way, I prepared to survive using breasonings currency by connecting survival with breasonings currency.
  I prepared to do the necessary job.
  I did this by stating that walking distance jobs more will be more likely with breasonings currency.
 First, I half-tailed the dove.
 Second, I placed the rod in the void.
 Third, I played with the religious (philosophical) leader.
 In this way, I prepared to do the necessary job by stating that walking distance jobs more will be more likely with breasonings currency.
  I prepared to read the book.
  I did this by limiting the breasonings currency.
  First, I saw how much breasonings currency could be produced with available funds for that purpose.
  Second, I produced this amount of breasonings currency.
  Third, I used the breasonings currency to buy the book.
  In this way, I prepared to read the book by limiting the breasonings currency.
  I prepared to calculate how the books' characters could achieve higher goals.
  I did this by stating that higher things were possible.
  First, I wrote how society could achieve higher things as breasonings currency.
  Second, I helped achieve these.
  Third, I set up camp on a different planet.
  In this way, I prepared to calculate how the books' characters could achieve higher goals by stating that higher things were possible.
   I prepared to buy the meditation (universal) course.
  I did this by rebreasoning out the breasonings currency as a way of using it.
  First, I rebreasoned out the breasonings currency spiritually with the machine.
  Second, I verified that the amount had gone through.
  Third, I transferred the registered breasonings currency.
  In this way, I prepared to buy the meditation (universal) course by rebreasoning out the breasonings currency as a way of using it.
   I prepared to think of an A for the breasoning, i.
 I breasoned out objects around the breasoning (object).
  I did this by individually breasoning out the breasonings currency arguments.
  First, I observed the algorithm read the object name.
  Second, I observed it retrieved the object's dimensions from a database.
  Third, I observed it breason out the argument by breasoning out the argument's object's breasoning's details (visualise the object's x, y and z dimensions).
  In this way, I prepared to think of an A for the breasoning, i.
 I breasoned out objects around the breasoning (object) by individually breasoning out the breasonings currency arguments.
  I prepared to detect other literary possibilities with A detectors in the book.
  I did this by programming computers to write breasonings currency.
  First, I wrote the idea.
  Second, I verified this against guidelines.
  Third, I contributed this to the capped amount allowed for the day.
  In this way, I prepared to detect other literary possibilities with A detectors in the book by programming computers to write breasonings currency.
   I prepared to be the highest bidder.
  I did this by buying with breasonings currency.
  First, I applied to buy with the idea.
  Second, I was successful.
  Third, I bought the goods with the breasonings currency.
  In this way, I prepared to be the highest bidder by buying with breasonings currency.
  I prepared to calculate how much the characters were worth.
  I did this by providing products in return for breasonings currency.
  First, I read the applications for the product.
  Second, I received the breasonings currency from the selected applicant.
  Third, I used a loophole (writing about a third perspective) when paraphrasing connecting two perspectives together in the breasonings currency.
  In this way, I prepared to calculate how much the characters were worth by providing products in return for breasonings currency.
["Green, L 2021, <i>Conglish Reflection 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Conglish Reflection 1 of 4
 Conglish allows thought processes to be analysed.
 It is an analytic perspective for expressing ideas, i.
 looks at the relationships between functional units.
Conglish Issues
 English - themes, language, characterisation, contention, etc.
Philosophical - Reasons and their relations, logic
Psychological - thought processes and ailments, interfaces with artificial intelligence and biochemistry
Linguistic - syntactical (grammars) and semantic (vocabulary)
Computational - efficiency, neatness, fitting purpose, mathematical accuracy
     I prepared to perform well in Honours.
  I did this by trimming the hibiscus.
  First, I calculated how many As I needed to earn 100% in the thesis.
  Second, I scheduled these.
  Third, I wrote these.
  In this way, I prepared to perform well in Honours by trimming the hibiscus.
    I prepared to eat the nutmeg scone.
  I did this by eating the nutmeg.
  First, I placed the ground nutmeg on a spoon.
  Second, I lifted the spoon to my lips.
  Third, I tested (sic) the nutmeg.
  In this way, I prepared to eat the nutmeg scone by eating the nutmeg.
     I prepared to propagate bliss through the world.
  I did this by meditating (reading about) on the leader of the world's current self-abnegation religion (philosophy).
  First, I saw that the people needed meditation (philosophy).
  Second, I gave them meditation (philosophy).
  Third, I continued on to the next religion (philosophy).
    I prepared to read the second book written by the master.
  I did this by reading the book written by the master.
  First, I opened the book.
  Second, I started reading the first chapter.
  Third, I finished reading the first chapter.
  In this way, I prepared to read the second book written by the master by reading the book written by the master.
    I prepared to give life to goats.
  I did this by giving the goat (person) an A to have a kid (child).
  First, I found the person who was going to conceive a child.
  Second, I breasoned out an A to give toe h person.
  Third, I listened to the news that a child had been born to the person.
  In this way, I prepared to give life to goats by giving the goat (person) an A to have a kid (child).
    I prepared to send the document to the publisher.
  I did this by licking the pear.
  First, I breasoned out the book.
  Second, I breasoned out 50 As for the book to be published.
  Third, I addressed the parcel to the publisher.
  In this way, I prepared to send the document to the publisher by licking the pear.
    I prepared to win the game of chess.
  I did this by moving the chess figure.
  First, I placed the figures in their starting positions.
  Second, I waited for the right turn.
  Third, I moved the chess figure.
  In this way, I prepared to win the game of chess by moving the chess figure.
    I prepared to observe the ducks led the ducklings.
  I did this by observing that the ducks were gay companions.
  First, I observed that the ducks were male.
  Second, I observed that the ducks were gay.
  Third, I observed that the ducks were gay companions.
  In this way, I prepared to observe the ducks led the ducklings by observing that the ducks were gay companions.
     I prepared to wait at the crossing.
  I did this by walking to the crossing.
  First, I found the correct coordinates map.
  Second, I found the crossing on the map.
  Third, I walked to the crossing from my departure point.
  In this way, I prepared to cross the road by walking to the crossing.
   I prepared to walk to the other side of the crossing.
  I did this by crossing at the lights when the green man was displayed.
  First, I watched the light.
  Second, I waited until it had turned green.
  Third, I crossed at the crossing.
  In this way, I prepared to walk to the other side of the crossing by crossing at the lights when the green man was displayed.
["Green, L 2021, <i>Conglish Reflection 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Conglish Reflection 2 of 4
    I prepared to feed Inky.
  I did this by scooping Inky's pellets.
  First, I touched the pile of pellets with the scoop.
  Second, I scooped the pellets.
  Third, I lifted the scoop of pellets up.
  In this way, I prepared to feed Inky by scooping Inky's pellets.
   I prepared to dry my feet.
  I did this by living on water.
  First, I drank the first glass of water.
  First, I rowed the boat.
  Third, I set foot in my house.
  In this way, I prepared to dry my feet by living on water.
    I prepared to spoon the sugar.
  I did this by identifying reiner (pure) sugar.
  First, I found all the leaves in the sugar.
  Second, I placed the leaves in a separate bowl.
  Third, I labelled the sugar pure.
  In this way, I prepared to spoon the sugar by identifying reiner (pure) sugar.
   I prepared to serve the vegetable burger.
  I did this by cooking the vegetable patty.
  First, I made the patty from semolina, soy and carrot.
  Second, I minced it up.
  Third, I cooked it.
  In this way, I prepared to serve the vegetable burger by cooking the vegetable patty.
   I prepared to go dancing.
  I did this by lacing up the shoelaces.
  First, I put on the shoe.
  Second, I tied a knot with the laces.
  Third, I tied a bow with the laces.
  In this way, I prepared to go dancing by lacing up the shoelaces.
   I prepared to reflect that the jet was fast.
  I did this by looking at the jet.
  First, I looked up.
  Second, I found the jet.
  Third, I looked at it with my eyes.
  In this way, I prepared to reflect that the jet was fast by looking at the jet.
   I prepared to watch the female hamster play Ophelia.
  I did this by watching the male hamster give the female hamster a wig.
  First, I watched the male hamster find the wig.
  Second, I watched the male hamster find the female hamster.
  Third, I watched the male hamster give the female hamster a wig.
  In this way, I prepared to watch the female hamster play Ophelia by watching the male hamster give the female hamster a wig.
   I prepared to distribute the education video.
  I did this by scouring the independent school grounds.
  First, I walked onto the Computational English.
  Second, I sat in the actor's folding chair.
  Third, I performed my lines on camera.
  In this way, I prepared to distribute the education video by scouring the independent school grounds.
    I prepared to argue that the object should precede the subject.
  I did this by writing the internal perspective on Conglish.
  First, I wrote the linguistic subject.
  Second, I wrote the verb.
  Third, I wrote the object.
  In this way, I prepared to argue that the subject should be preceded by (explained in terms of the) object by writing the internal perspective on Conglish.
  I prepared to challenge universalism by offering logicism as my argument.
  I did this by writing the reason for the internal perspective on Conglish.
  First, I wrote that the object should be reflected before the proposition to explain the subject in terms of the object.
  Second, I wrote that the verb should precede the subject to explain the action in a bottom-up method.
  Third, I stated that 'The banana was Sam's' and 'The banana was eaten by Sam' should replaced 'Sam ate the banana'.
  In this way, I prepared to challenge universalism by offering logicism as my argument by writing the reason for the internal perspective on Conglish.
["Green, L 2021, <i>Conglish Reflection 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Conglish Reflection 3 of 4
   I prepared to argue for a universal presence of logicism.
  I did this by whittling the nuance out.
  First, I reflected the subject to act in a bottom-up manner.
  Second, I reflected the verb to act in a bottom-up manner.
  Third, I reflected the object to act in a bottom-up manner.
  In this way, I prepared to argue for a universal presence of logicism by whittling the nuance out.
   I prepared to eat the frozen nectarine.
  I did this by eating the frozen strawberry.
  First, I found the plate with the frozen strawberry on it.
  Second, I skewered the frozen strawberry with a fork.
  Third, I placed in the frozen strawberry in my mouth.
  In this way, I prepared to eat the frozen nectarine by eating the frozen strawberry.
   I prepared to go to heaven.
  I did this by loving God (hugging the master).
  First, I found the master.
  Second, I hugged him.
  Third, I finished hugging him after 50 seconds.
  In this way, I prepared to go to heaven by loving God (hugging the master).
   I prepared to lead life on planet Earth.
  I did this by disagreeing with non-meditation (helped students to meditate).
  First, I found the students.
  Second, I taught them to meditate.
  Third, I verified their meditation.
  In this way, I prepared to lead life on planet Earth by disagreeing with non-meditation (helped students to meditate).
  I prepared to make the monopoles sing.
  I did this by listening to Artie's speech.
  First, I sat on the seat.
  Second, I started listening to Artie's speech.
  Third, I finished listening to Artie's speech when he had finished delivering it.
  In this way, I prepared to make the monopoles sing by listening to Artie's speech.
   I prepared to guide by humanitas.
  I did this by writing the web log (blog).
  First, I researched the topic.
  Second, I wrote on the topic.
  Third, I advertised my blog entry on the social media site.
  In this way, I prepared to guide by humanitas by writing the web log (blog).
   I prepared to notice that the work had been completed.
  I did this by noticing the native helper.
  First, I verified whether the first helper was native.
  Second, I prepared to verify whether the second helper was native.
  Third, I repeated this until I had verified that a helper was native.
  In this way, I prepared to notice that the native helper had completed the work.
   I prepared to remove the scented lanolin form the wool.
  I did this by smelling the wool.
  First, I found the wool.
  Second, I lifted it to my nose.
  Third, I smelt it.
  In this way, I prepared to remove the scented lanolin form the wool by smelling the wool.
   I prepared to build the house.
  I did this by smelling the wood.
  First, I found the freshly cut wood.
  Second, I lifted it to my nose.
  Third, I smelt it.
  In this way, I prepared to build the house by smelling the wood.
   I prepared to experience heaven (goodness) on earth.
  I did this by smelling the tinsel.
  First, I found the tinsel.
  Second, I lifted it to my nose.
  Third, I smelt the metal sprayed on the PVC, which constituted the tinsel.
  In this way, I prepared to experience heaven (goodness) on earth by smelling the tinsel.
["Green, L 2021, <i>Conglish Reflection 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Conglish Reflection 4 of 4
    I prepared to make the present.
  I did this by smelling the tissue paper.
  First, I found the tissue paper, in the wood products section.
  Second, I lifted it to my nose.
  Third, I smelt it.
  In this way, I prepared to I prepared to make the present by smelling the tissue paper.
   I prepared to dine on model tracks.
  I did this by feeling the hot model train engine.
  First, I constructed a train track circle.
  Second, I started driving the model train engine in a circle.
  Third, I felt the hot model train engine.
  In this way, I prepared to dine on model tracks by feeling the hot model train engine.
["Green, L 2021, <i>Dereconstruction 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Dereconstruction 1 of 4
 Dereconstruction, another variant of computational hermeneutics I thought of reconstructs a narrative in a representation for reasoning about and querying.
 The first technique can take a text, and after an interpretation has been prepared (this would be necessary to write as part of the program which would write an interpretation) would test whether the conclusion in response to a question with its reasons was supported by the text, and output the interpretation.
     I prepared to determine whether the student had earned H1 by writing 80 breasonings.
  I did this by counting the breasonings that the student had written after she breasoned out the breasonings details to God (in fact, the master).
  First, I counted the first breasoning.
  Second, I prepared to count the next breasoning.
  Third, I repeated this until I had counted all the breasonings.
  In this way, I prepared to determine whether the student had earned H1 by writing 80 breasonings by counting the breasonings that the student had written after she breasoned out the breasonings details to God (in fact, the master).
    I prepared to prove two theorems for finding a property gave the same result.
  I did this by writing a geometry theorem prover.
  First, I counted the number of squares.
  Second, I multiplied the width of the region of the squares by the height of the region of the squares.
  Third, I verified that the number of squares was equal to the width of the region of the squares multiplied by the height of the region of the squares.
  In this way, I prepared to prove two theorems for finding a property gave the same result by writing a geometry theorem prover.
     I prepared to prevent unemployment.
  I did this by designing a meditation (in fact, book-based) economic system.
  First, I taught the student from the book.
  Second, I observed the advantage to the student's health.
  Third, I observed the advantage to the student's career.
  In this way, I prepared to prevent unemployment by designing a meditation (in fact, book-based) economic system.
    I prepared to create prosperity.
  I did this by designing a pedagogy economic system.
  First, I taught the student pedagogy.
  Second, I observed him breason out an H1.
  Third, I observed him breason out 50 different H1s for a University job.
  In this way, I prepared to create prosperity by designing a pedagogy economic system.
    I prepared to point culture up.
  I did this by writing the law that culture must exist.
  First, I wrote the law that the culture should be pedagogically prepared for.
  Second, I created the law that creators of culture should be trained.
  Third, I wrote the law that culture should be created.
  In this way, I prepared to point culture up by writing the law that culture must exist.
    I prepared to bend the wire.
  I did this by observing the politician showing open mindedness in psychology.
  First, I found the box.
  Second, I opened the box, rather than not opening it.
  Third, I took the pliers out of the box.
  In this way, I prepared to bend the wire by observing the politician showing open mindedness in psychology.
    I prepared to make conversation with many people.
  I did this by observing the politician showing open mindedness in sociology.
  First, I found the person.
  Second, I thought of a topic of conversation, rather than not thinking of one.
  Third, I made conversation with her.
  In this way, I prepared to make conversation with many people by observing the politician showing open mindedness in sociology.
    I prepared to examine memory in Aboriginal philosophy.
  I did this by writing that the Aboriginal philosophy course should be a core requirement at school.
  First, I wrote about the land.
  Second, I wrote about the people.
  Third, I wrote about the stories.
  In this way, I prepared to examine memory in Aboriginal philosophy by writing that the Aboriginal philosophy course should be a core requirement at school.
     I prepared to use humour as medicine.
  I did this by writing that the Aboriginal medicine course should be a core requirement at school.
  First, I found the person.
  Second, I made her giggle.
  Third, I gave her a hug.
  In this way, I prepared to use humour as medicine by writing that the Aboriginal medicine course should be a core requirement at school.
   I prepared to create a Galah god (in fact, master).
  I did this by writing that the Aboriginal theology course should be a core requirement at school.
  First, I found a picture of the galah.
  Second, I drew the galah.
  Third, I prayed to (communicated with the) Galah.
  In this way, I prepared to create a Galah god (in fact, master) by writing that the Aboriginal theology course should be a core requirement at school.
["Green, L 2021, <i>Dereconstruction 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Dereconstruction 2 of 4
    I prepared to observe the students write to kings.
  I did this by observing the philosopher monarch introduce creative philosophy.
  First, I introduced the philosopher monarch.
  Second, I observed the philosopher monarch introduce pedagogy.
  Third, I observed the philosopher monarch introduce creative philosophy.
  In this way, I prepared to observe the students write to kings by observing the philosopher monarch introduce creative philosophy.
   I prepared to watch bliss of life on earth.
  I did this by observing the philosopher monarch introduce creative philosophy with medicine as a reason.
  First, I recommended psychiatrists for the students.
  Second, I recommended the students study a medicine degree.
  Third, I trained the students to recommend these to other students.
  In this way, I prepared to watch bliss of life on earth by observing the philosopher monarch introduce creative philosophy with medicine as a reason.
    I prepared to perform at the concert.
  I did this by playing the bagpipes.
  First, I inflated the bag.
  Second, I placed my fingers on the holes of the chanter.
  Third, I squeezed the bag to keep a constant supply air to the four reeds.
  In this way, I prepared to perform at the concert by playing the bagpipes.
   I prepared to be equitable.
  I did this by liking you because I shared the apple with you.
  First, I shared the apple with you.
  Second, I observed you like me.
  Third, I liked you.
  In this way, I prepared to be equitable by liking you because I shared the apple with you.
   I prepared to earn H1.
  I did this by demonstrating logical thinking.
  First, I suggested the proposition 'b'.
  Second, I suggested the inference 'b -> a'.
  Third, I suggested the proposition 'a'.
  In this way, I prepared to earn H1 by demonstrating logical thinking.
   I prepared to become a famous computing engineer.
  I did this by demonstrating perfect programming.
  First, I wrote down the sets.
  Second, I wrote down the data contained in each set.
  Third, I wrote the algorithm traversing the data sets.
  In this way, I prepared to become a famous computing engineer by demonstrating perfect programming.
   I prepared to present a program about my thesis.
  I did this by breasoning out 250 breasonings.
  First, I earned the job of computer science professor.
  Second, I breasoned out 250 breasonings containing the assignment solution.
  Third, I earned the promotion to emeritus professor.
  In this way, I prepared to present a program about my thesis by breasoning out 250 breasonings.
   I prepared to determine the original construction.
  I did this by equating the actual value with the desired value in dereconstruction.
  First, I printed the value of the first variable.
  Second, I assigned the value of the first variable to the second variable.
  Third, I printed the value of the second variable.
  In this way, I prepared to determine the original construction by equating the actual value with the desired value in dereconstruction.
    I prepared to solve the political problem.
  I did this by providing running water.
  First, I built a water tank.
  Second, I built a pipe from the water tank to the tap.
  Third, I boiled the water to filter out pathogens in it before using it.
  In this way, I prepared to solve the political problem by providing running water.
  I prepared to write that meditation was a mutually exclusive course from pedagogy because the breasonings were implicit.
  I did this by writing that meditation was constituted because of pedagogy, in a top-down manner.
  First, I wrote that meditation contained the mantra.
  Second, I wrote that pedagogy contained breasonings.
  Third, I wrote that the mantra indicated multiple breasonings.
  In this way, I prepared to write that meditation was a mutually exclusive course from pedagogy because the breasonings were implicit by writing that meditation was constituted because of pedagogy, in a top-down manner.
["Green, L 2021, <i>Dereconstruction 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Dereconstruction 3 of 4
   I prepared to be friendly.
  I did this by teaching meditation.
  First, I taught the meditation details.
  Second, I taught medicine.
  Third, I taught about seeing a psychiatrist when needed or seeing friends.
  In this way, I prepared to be friendly by teaching pedagogy.
   I prepared to enable earning H1.
  I did this by teaching pedagogy.
  First, I taught the breasonings details.
  Second, I taught about veganism, positivity, Nietzsche, travelling and the University education subject.
  Third, I taught my students how to write arguments.
  In this way, I prepared to enable earning H1 by teaching pedagogy.
   I prepared to professionally develop doctors.
  I did this by teaching medicine.
  First, I taught about the digestive system.
  Second, I taught about the circulatory system.
  Third, I taught about the respiratory system.
  In this way, I prepared to professionally develop doctors.
  I did this by teaching medicine.
   I prepared to be an expert on the brain.
  I did this by writing about neuroscience.
  First I wrote about food.
  Second, I wrote about activity.
  Third, I wrote about sleep.
  In this way, I prepared to be an expert on the brain by writing about neuroscience.
  I prepared to tell a story.
  I did this by writing about creativity.
  First, I wrote the first event description down.
  Second, I wrote the second event description down.
  Third, I connected the first event description and the second event description.
  In this way, I prepared to tell a story by writing about creativity.
   I prepared to deconstruct the reconstruction of the event.
  I did this by reconstructing the event from other events.
  First, I reconstructed the event from the first event.
  Second, I prepared to reconstruct the event from the next event.
  Third, I repeated this until I had reconstructed the event from all the other events.
  In this way, I prepared to deconstruct the reconstruction of the event by reconstructing the event from other events.
   I prepared to deconstruct the reconstruction of the text.
  I did this by reconstructing the text from other texts.
  First, I reconstructed the text from the first text.
  Second, I prepared to reconstruct the text from the next text.
  Third, I repeated this until I had reconstructed the text from all the other texts.
  In this way, I prepared to deconstruct the reconstruction of the text by reconstructing the text from other texts.
   I prepared to eat the apple.
  I did this by deconstructing the object by vaporising it (in fact, I thought of a larger object than another, e.
 I thought of a hand and an apple).
  First, I measured the length of my hand.
  Second, I measured the width of the apple.
  Third, I verified that the first measurement was greater than the second measurement.
  In this way, I prepared to eat the apple by deconstructing the object by vaporising it (in fact, I thought of a larger object than another, e.
 I thought of a hand and an apple).
   I prepared to shake the man's hand.
  I did this by loving the man by hugging him.
  First, I walked to him.
  Second, I placed my arms around him.
  Third, I hugged him.
  In this way, I prepared to shake the man's hand by loving the man by hugging him.
   I prepared to change the state.
  I did this by becoming the nationalist leader.
  First, I reached the top of the nation.
  Second, I applied to become the nationalist leader.
  Third, I became the nationalist leader.
  In this way, I prepared to change the state by becoming the nationalist leader.
["Green, L 2021, <i>Dereconstruction 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Dereconstruction 4 of 4
    I prepared to lead open-minded religious races.
  I did this by becoming the open-minded religious leader.
  First, I taught pedagogy for positive and negative medical reasons.
  Second, I taught yoga for positive reasons.
  Third, I taught yoga for negative positive reasons (in fact, another positive reason).
  In this way, I prepared to lead open-minded religious races by becoming the open-minded religious leader.
   I prepared to be equalitarian-minded.
  I did this by becoming a social-minded person.
  First, I made sure that the first two groups of people had the same rights.
  Second, I prepared to make sure that the next two groups of people had the same rights.
  Third, I repeated this until I had made sure each pair of groups of people had the same rights.
  In this way, I prepared to be equalitarian-minded by becoming a social-minded person.
["Green, L 2021, <i>Derivability 0 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Derivability 0 of 4
 The first technique can handle two directions between term or sentence and definition.
 This allows meaning to be worked out from context.
 Interpolation
The program can interpolate from definition to sentence (2 to 1), i.
 work out the sentence from a given set of definitions.
 Samantha ate the biscuits (initially unknown)
 The biscuits were on the table before Samantha came into the room
 They weren't there after she left *
 It was after school, and time for a snack.
* assumed to be in same section as 2a, i.
 also referring to Samantha eating the biscuits.
In the first technique, order is usually from 1 to 2, but there may be variables that have either any or values from a list.
 Extrapolation.
 Finding the definition from a sentence
The program can also extrapolate from sentence to definition (1 to 2), i.
 given similar sentences can work out the definition.
There are three cases so far, and may be more in the future.
 Synonyms
 The purse was lost at lunchtime
 (initially unknown)
 The purse was left in on a seat.
 No one returned it.
the program can calculate:
 The wallet was lost at lunchtime
 (initially unknown)
 The wallet was left in on a seat.
 No one returned it.
 Synogrammars (sentences with the same meaning)
 We received the books we ordered.
 (initially unknown)
 We filled in the order form for the books
 We sent it in with the money.
the program can calculate:
 The books we ordered arrived.
 (initially unknown)
 We filled in the order form for the books
 We sent it in with the money.
 Same base word
 We constructed the argument
 (initially unknown)
 Constructing is writing.
 We wrote the argument.
the program can calculate:
 We deconstructed the argument
 (initially unknown)
 Constructing is writing.
 De-something is taking apart.
 We took apart the argument.
["Green, L 2021, <i>Derivability 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Derivability 1 of 4
     I prepared to visualise the dimensions of the object that a word represented.
  I did this by writing the words on the pedagogy screen.
  First, I set up the pedagogy screen.
  Second, I wrote down the words on it.
  Third, I drew the object on the screen.
  In this way, I prepared to visualise the dimensions of the object that a word represented by writing the words on the pedagogy screen.
    I prepared to disseminate implication.
  I did this by describing the logical operator ^i (and-implication).
  First, I stated that And-Implication meant that A implies B is true when A is true.
  Second, I stated that And-Implication meant that A implies B is true when B is also true.
  Third, I stated that And-Implication meant that A implies B is true when A^B is also true.
  In this way, I prepared to disseminate implication by describing the logical operator ^i (and-implication).
     I prepared to analyse conjunction.
  I did this by describing the logical operator ^ (and).
  First, I stated that And meant that A^B is true when A is true.
  Second, I stated that And meant that A^B is true when B is also true.
  Third, I stated that And meant that A^B is also true when 'I am thirsty' and 'The tea is available' is true.
  In this way, I prepared to analyse conjunction by describing the logical operator ^ (and).
    I prepared to examine disjunction.
  I did this by describing the logical operator v (or).
  First, I stated that Or meant that AvB may be true when A is true.
  Second, I stated that Or meant that A^B may be true when B is true.
  Third, I stated that Or meant that AvB is true when 'I walked left' or 'I walked right' is true.
  In this way, I prepared to examine disjunction by describing the logical operator v (or).
    I prepared to look at negation closely.
  I did this by describing the logical operator not  (not).
  First, I stated that Not meant that not A is true when A is false.
  Second, I stated that Not meant that not A is false when A is true.
  Third, I stated that Not meant that not A is true when 'I am not a merchant' is true.
  In this way, I prepared to look at negation closely by describing the logical operator not  (not).
    I prepared to consider whether negated conjunction was correct.
  I did this by describing the logical operator not ^ (not and).
  First, I stated that Not-And meant that (not A)^B is true when A is false.
  Second, I stated that Not-And meant that (not A)^B is true when B is also true.
  Third, I stated that Not-And meant that (not A)^B is also true when 'I am not quenched' and 'The tea is available' is true.
  In this way, I prepared to consider whether negated conjunction was correct by describing the logical operator not ^ (not and).
    I prepared to test negated disjunction.
  I did this by describing the logical operator not v (not or).
  First, I stated that Not-Or meant that (not A)vB may be true when A is false.
  Second, I stated that Not-Or meant that (not A)vB may be true when B is true.
  Third, I stated that Not-Or meant that (not A)vB is true when 'I didn't walk right' or 'I walked right' is true.
  In this way, I prepared to test negated disjunction by describing the logical operator not v (not or).
    I prepared to determine a chessboard state where two pieces could have moved, as one in which the piece had moved to the further rank.
  I did this by interpolating the chessboard state between two different chessboard states.
  First, I listed the moved pieces.
  Second, I wrote the chessboard state in which the piece had moved before the second piece had moved.
  Third, otherwise, I wrote the two possible chessboard states in which either piece could have moved.
  In this way, I prepared to determine a chessboard state where two pieces could have moved, as one in which the piece had moved to the further rank by interpolating the chessboard state between two different chessboard states.
     I prepared to write that there were more 100% grades than 50% grades.
  I did this by drawing the probability curve for grades.
  First, I drew a low middle of the curve.
  Second, I drew a high right of the curve.
  Third, I labelled the high right of the curve '100%'.
   In this way, I prepared to write that there were more 100% grades than 50% grades by drawing the probability curve for grades.
   I prepared to align a line with the most likely road route.
  I did this by determining the route that the driver had driven from A to B.
  First, I drew the first point on the map.
  Second, I drew the second point on the map.
  Third, I ruled the route between them.
  In this way, I prepared to align a line with the most likely road route by determining the route that the driver had driven from A to B.
["Green, L 2021, <i>Derivability 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Derivability 2 of 4
    I prepared to test that the giraffe had a long enough neck.
  I did this by testing the assignment with students.
  First, I tested the hypotenuse.
  Second, I tested the giraffe.
  Third, I tested the hiraffe (sic).
  In this way, I prepared to test that the giraffe had a long enough neck by testing the assignment with students.
   I prepared to collect the floated comments.
  I did this by checking off the floated comment in the online project management software.
  First, I  found the comments.
  Second, I found the floated comment.
  Third, I checked it off.
  In this way, I prepared to collect the floated comments by checking off the floated comment in the online project management software.
    I prepared to satisfy a key performance indicator.
  I did this by proofreading the document by breasoning it out.
  First, I gave the clause a 10 (in fact, 80) breasoning-long A.
  Second, I checked the number of objects matched the number of the verb.
  Third, I checked the language matched flow of objects through objects.
  In this way, I prepared to satisfy a key performance indicator by proofreading the document by breasoning it out.
   I prepared to taste-test the meal.
  I did this by tasting the raspberry aggregate part.
  First, I picked the raspberry.
  Second, I picked its aggregate part.
  Third, I tasted the aggregate part.
  In this way, I prepared to taste-test the meal by tasting the raspberry aggregate part.
   I prepared to construct a chemical molecule recognition machine.
  I did this by writing the name of the object on the pedagogy screen.
  First, I looked at the pedagogy screen.
  Second, I recognised the object on the screen.
  Third, I wrote its name.
  In this way, I prepared to construct a chemical molecule recognition machine by writing the name of the object on the pedagogy screen.
   I prepared to write how the main property of an object relates to space and value.
  I did this by philosophically describing an object in a sentence.
  First, I wrote down the structure of the object.
  Second, I wrote how the object related to me.
  Third, I wrote the main property of how it related to me.
  In this way, I prepared to write how the main property of an object relates to space and value by philosophically describing an object in a sentence.
   The department prepared to be itself.
  The department did this by applying perspectivism to itself.
  First, it applied Politics to itself.
  Second, it applied Economics to itself.
  Third, it applied History to itself.
  In this way, the department prepared to be itself by applying perspectivism to itself.
   I prepared to value the object.
  The subject did this by deeming herself positive when the object was determined to be objectively positive.
  First, I determined that the object worked.
  Second, I determined that the object was mechanically functional.
  Third, I determined that the object worked.
  In this way, I prepared to value the object by deeming herself positive when the object was determined to be objectively positive.
    I prepared to determine that the object was algorithmically bug-free.
  I did this by deeming the object objectively positive.
  First, I recollected the object.
  Second, I wrote that I had no bias in judging the object.
  Third, I determined that the object, an apple was fresh.
  In this way, I prepared to determine that the object was algorithmically bug-free by deeming the object objectively positive.
  I prepared to predict the output from the input.
  I did this by stating that the self's event was only caused by the other's event, in fact, as in the input, not the output, as in Simulated Intelligence.
  First, I found the variable with the plus sign ('+') before it in the documentation, indicating it was an input variable, where the variable was in the head of the called predicate.
  Second, I found the data item corresponding to it in the query.
  Third, I wrote this data item down.
  In this way, I prepared to predict the output from the input by stating that the self's event was only caused by the other's event, in fact, as in the input, not the output, as in Simulated Intelligence.
["Green, L 2021, <i>Derivability 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Derivability 3 of 4
   I prepared to report the crime.
  I did this by identifying the murder (in fact, drinking tea).
  First, I identified that no one knew when the murder would occur.
  Second, I identified when it would happen.
  Third, I identified that it happened.
  In this way, I prepared to report the crime by identifying the murder (in fact, drinking tea).
   I prepared to program a robot mind.
  I did this by writing 10 80-breasoning subjects to be with-it in a Conglish (Computational English) degree.
  First, I wrote the robot subjects.
  Second, I wrote the mind subjects.
  Third, I wrote the robot mind subjects.
  In this way, I prepared to program a robot mind by writing 10 80-breasoning subjects to be with-it in a Conglish (Computational English) degree.
   I prepared to be perfectly healthy.
  I did this by writing 10 80-breasoning subjects to be with-it in a Medicine degree.
  First, I wrote the organ subjects.
  Second, I wrote the theological surgery subjects.
  Third, I wrote the organ sutra subjects.
  In this way, I prepared to be perfectly healthy by writing 10 80-breasoning subjects to be with-it in a Medicine degree.
   I prepared to be a Pedagogue.
  I did this by writing 10 80-breasoning subjects to be with-it in a Pedagogy degree.
  First, I wrote the philosophy subjects.
  Second, I wrote the writing subjects.
  Third, I wrote the job requirements subjects.
  In this way, I prepared to be a Pedagogue by writing 10 80-breasoning subjects to be with-it in a Pedagogy degree.
  I prepared to be a meditator.
  I did this by writing 10 80-breasoning subjects to be with-it in a Meditation degree.
  First, I wrote the philosophy subjects.
  Second, I wrote the 50 breasonings per utterance subject.
  Third, I wrote the job requirements subjects.
  In this way, I prepared to be a meditator by writing 10 80-breasoning subjects to be with-it in a Meditation degree.
   I prepared to be a critic (in fact, a positive commentator).
  I did this by buying the banana at the bargain basement.
  First, I walked down the stairs to the bargain basement.
  Second, I ordered the banana.
  Third, I paid for the banana.
  In this way, I prepared to be a critic (in fact, a positive commentator) by buying the banana at the bargain basement.
   I prepared to make sure the country was safe.
  I did this by observing the law beckon the subject, like observing a person smell a pink flower.
  First, I observed the left-wing lawyers arrive at the office.
  Second, I observed them select a subject.
  Third, I observed them write the subject.
  In this way, I prepared to make sure the country was safe by observing the law beckon the subject, like observing a person smell a pink flower.
   I prepared to find the centre of a cross.
  I did this by crossing over the knitting needles.
  First, I placed the first knitting needle pointing to me on the table.
  Second, I found the middle of the knitting needle and another knitting needle.
  Third, I made a cross by placing the second knitting needle on the first knitting needle on the table.
  In this way, I prepared to find the centre of a cross by crossing over the knitting needles.
   I prepared to determine that hydrogen had been produced by the reaction.
  I did this by conducting the hydrogen pop test.
  First, I added magnesium to diluted acid in a test tube in a rack, followed by placing my finger over the end of the test tube.
  Second, I observed bubbles of hydrogen rise from the magnesium, followed by releasing the pressure from the test tube while bringing a lit match to the end of the test tube.
  Third, I listened to the 'pop' sound.
  In this way, I prepared to determine that hydrogen had been produced by the reaction by conducting the hydrogen pop test.
   I prepared to make enough up.
  I did this by closing the gate.
  First, I wrote the first course.
  Second, I prepared to write the next course.
  Third, I repeated this until I had written all the courses.
  In this way, I prepared to make enough up by closing the gate.
["Green, L 2021, <i>Derivability 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Derivability 4 of 4
    I prepared to transform vegetarians.
  I did this by eating the vegan nuggets.
  First, I served the vegetarian rice paper roll.
  Second, I walked to the next table.
  Third, I ate the vegan nuggets.
  In this way, I prepared to transform vegetarians by eating the vegan nuggets.
   I prepared to dining with the vegan's friends.
  I did this by eating with the vegan.
  First, I chose the restaurant.
  Second, I chose the vegan.
  Third, I dined with the vegan.
  In this way, I prepared to dining with the vegan's friends by eating with the vegan.
["Green, L 2021, <i>Drawing connections 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Drawing connections 1 of 4
 In a binary opposition, one will be stronger.
 This is because one starts at it (it is the origin).
 The contention is exploring the relationship/directionality/methodology between two fundamental objects which have a relation.
     I prepared to collate the robot's knowledge.
  I did this by writing the ideology as a hierarchy.
  First, I wrote the question.
  Second, I wrote the answer.
  Third, I wrote the reason for the answer.
  In this way, I prepared to collate the robot's knowledge by writing the ideology as a hierarchy.
    I prepared to detail the robot's knowledge.
  I did this by writing the ontology as a hierarchy.
  First, I wrote the reason.
  Second, I wrote the object name.
  Third, I wrote its connection with the reason.
  In this way, I prepared to detail the robot's knowledge by writing the ontology as a hierarchy.
     I prepared to create a post-Marxist ideology.
  I did this by connecting the lost ideology hierarchy to the hierarchy.
  First, I determined that the first ideology of philosophy aiding finding the human value with the aid of the government.
  Second, I determined that the Marxist ideology aiding finding the literary phrase in a high quality manner.
  Third, I wrote an intermediate Computational English (government and Marxism-influenced) ideology that wrote a presentation that properly delivered the viewer experience.
  In this way, I prepared to create a post-Marxist ideology by connecting the lost ideology hierarchy to the hierarchy.
    I prepared to blend algorithms.
  I did this by connecting the lost ontology hierarchy to the hierarchy.
  First, I determined that the first algorithm computed which direction the sensor faced given a map.
  Second, I determined that the second algorithm found passing chords using the I-IV-V-I chord progression.
  Third, I wrote an intermediate algorithm that composed music based on the sensor's surroundings.
  In this way, I prepared to blend algorithms by connecting the lost ontology hierarchy to the hierarchy.
    I prepared to build a school.
  I did this by observing the lawyer help maintain ownership of the property.
  First, I drafted the contract to keep ownership of donated land with the help of a lawyer.
  Second, the land donor signed the contract.
  Third, I observed the contract prevent the land donor from taking the land back.
  In this way, I prepared to build a school by observing the lawyer help maintain ownership of the property.
    I prepared to build the house.
  I did this by observing the building surveyor test that the building had good structural integrity.
  First, I detected the floor.
  Second, I detected the walls.
  Third, I detected the ceiling.
  In this way, I prepared to build the house by observing the building surveyor test that the building had good structural integrity.
    I prepared to print an encyclopedia entry.
  I did this by asking the teletypist to type my ideas.
  First, I thought of a paragraph to dictate.
  Second, I found a teletypist matching the desired character.
  Third, I delegated typing the paragraph to the teletypist.
  In this way, I prepared to print an encyclopedia entry by asking the teletypist to type my ideas.
    I prepared to encourage the native and settler to learn each others' languages.
  I did this by requesting that the teletypist translate the text into a local language.
  First, I aimed for the postcolonial native to understand the text.
  Second, I found that the settler would allow the native to read the text printed in the settler's language.
  Third, I requested that the teletypist translate the text into a bilingual edition with both the native's language and settler's language.
  In this way, I prepared to encourage the native and settler to learn each others' languages by requesting that the teletypist translate the text into a local language.
     I prepared to distance myself from *.
  I did this by shelling the snow pea.
  First, I read that Winston Churchill asked that if funding was diverted from arts then what would we be fighting for?  Second, I determined that arts was the conclusion from defence, not vice versa.
  Third, I determined that arts is necessary rather than defence.
  In this way, I prepared to distance myself from * by shelling the snow pea.
   I prepared to spend on high quality thoughts.
  I did this by writing 50 Economics As to be a founder of educational institutions.
  First, I encouraged pedagogical inspiration.
  Second, I fostered critical thinking with logic.
  Third, I cherished the influence of perfect meditation.
  In this a way, I prepared to spend on high quality thoughts by writing 50 Economics As to be a founder of educational institutions.
["Green, L 2021, <i>Drawing connections 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Drawing connections 2 of 4
    I prepared to enjoy a high quality of life.
  I did this by employing a legal consultant to help legally protect educational institutions.
  First, I wrote a contract to protect the organisation from donated land being revoked.
  Second, I wrote a contract so that people who had been emoyed to provide services wouldn't break their contracts.
  Third, I wrote a contract to protect the organisation from donated money being revoked.
   In this way, I prepared to enjoy a high quality of life by employing a legal consultant to help legally protect educational institutions.
   I prepared to ensure the home systems' smooth running.
  I did this by cracking the bug.
  First, I cracked the car bug.
  Second, I cracked the computer bug.
  Third, I cracked the robot bug.
  In this way, I prepared to ensure the home systems' smooth running by cracking the bug.
    I prepared to paint the possibilities.
  I did this by drawing a connection.
  First, I asked the politician what the options were.
  Second, I asked the meditator which option she would like to choose.
  Third, I drew a connection from the meditator's answer to the politician's action.
  In this way, I prepared to paint the possibilities by drawing a connection.
   I prepared to build primary and secondary school students' confidence.
  I did this by adding the item between the connected items.
  First, I observed the politician introduce meditation into schools.
  Second, I observed the children take part if they wanted to.
  Third, I observed the meditator also introduce pedagogy and medicine, improving meditation.
  In this way, I prepared to build primary and secondary school students' confidence by adding the item between the connected items.
   I prepared to express perfect function.
  I did this by apologising for anything non-positive (I wrote the positive idea down).
  First, I wrote the incorrect statement (another correct statement) down that I had been given.
  Second, I noted that it had been originally written by a person I was responsible for.
  Third, I apologized for the incorrect statement (wrote the correct statement).
  In this way, I prepared to express perfect function by apologising for anything non-positive (I wrote the positive idea down).
   I prepared to experience heaven on Earth.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Music.
  First, I wrote about music.
  Second, I wrote about pleasures.
  Third, I wrote about fantasias.
  In this way, I prepared to experience heaven on Earth by writing 16 250 breasoning areas of study influenced by Plato's forms about Music.
   I prepared to understand the author through his idea and it's use.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Philosophy.
  First, I wrote about forms.
  Second, I wrote about pleasure.
  Third, I wrote about Plato.
  In this way, I prepared to understand the author through his idea and it's use by writing 16 250 breasoning areas of study influenced by Plato's forms about Philosophy.
   I prepared to become a lecturer.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about English.
  First, I wrote that the 100% PhD earner wrote 275 breasonings per A.
  Second, I wrote that he wrote 50 of these As.
  Third, I wrote that he doubled this to do the lecturer's work for him.
  In this way, I prepared to become a lecturer by writing 16 250 breasoning areas of study influenced by Plato's forms about English.
    I prepared to find similarities between Plato's Forms and Lucian's Pedagogy.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's Forms about Pedagogy.
  First, I equated Plato's Forms with Lucianic Pedagogy.
  Second, I equated Plato's names of Forms with Lucianic Pedagogical object names.
  Third, I equated Plato's function of Forms with Lucianic Pedagogical breasonings (objects' x, y and z dimensions).
  In this way, I prepared to find similarities between Plato's Forms and Lucian's Pedagogy by writing 16 250 breasoning areas of study influenced by Plato's Forms about Pedagogy.
  I prepared to equate a breasoning with a Platonic form.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Meditation.
  First, I collected, or paid someone who had collected 250 breasonings that plugged into the 250 Breasonings Per Utterance (Mantra and Sutra) to become a meditator.
  Second, I was helped to think of 1 breasoning per mantra instance.
  Third, I was helped to think of 5 breasonings per sutra instance.
  In this way, I prepared to equate a breasoning with a Platonic form by writing 16 250 breasoning areas of study influenced by Plato's forms about Meditation.
["Green, L 2021, <i>Drawing connections 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Drawing connections 3 of 4
   I prepared to equate Plato's soul (including the mind and body) with the soul created by 50 As (16 250 breasoning As) in Lucianic Computational English.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Computational English.
  First, I equated the Platonic body with Lucianic Computational English bodily developed things.
  Second, I equated the Platonic mind with the Lucianic Computational English mental ontological states.
  Third, I equated the Platonic soul with the Lucianic Computational English continual soulful aimingness (sic).
  In this way, I prepared to equate Plato's soul (including the mind and body) with the soul created by 50 As (16 250 breasoning As) in Lucianic Computational English by writing 16 250 breasoning areas of study influenced by Plato's forms about Computational English.
   I prepared to form a wisdom seal on my company.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Economics.
  First, I enticed people to buy Plato's forms.
  Second, I acted wisely in Economics.
  Third, I taught others to deliberate carefully.
  In this way, I prepared to form a wisdom seal on my company by writing 16 250 breasoning areas of study influenced by Plato's forms about Economics.
   I prepared to cultivate people.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Popology.
  First, I equated Plato's forms with Lucianic Popology, by equating people with objects.
  Second, I equated the names of Plato's forms with an agreed with argument, by writing simulations of people are in people's minds.
  Third, I equated the functions of Plato's forms with a positive argument, by writing people are stronger than objects.
  In this way, I prepared to cultivate people by writing 16 250 breasoning areas of study influenced by Plato's forms about Popology.
   I prepared to satisfy people with society.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Societology.
  First, I equated Plato's forms with Lucianic Societology, by influencing art with society.
  Second, I enabled people of innate culture to cultivate themselves as expressions of their time.
  Third, I satisfied followers of the most popular current religion that society was developed in their minds.
  In this way, I prepared to satisfy people with society by writing 16 250 breasoning areas of study influenced by Plato's forms about Societology.
  I prepared to increase a patient's self-confidence.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Medicine.
  First, I equated Plato's forms with Lucianic Medicine, by describing robots in terms of forms.
  Second, I equated the names of Plato's forms with the pedagogy of medicine curing psychiatric patients, by the listing of named forms.
  Third, I equated the functions of Plato's forms with the referral of other patients to the doctor.
  In this way, I prepared to increase a patient's self-confidence by writing 16 250 breasoning areas of study influenced by Plato's forms about Medicine.
   I prepared to find similarities between Plato's forms and Lucianic Metaphysics.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Metaphysics.
  First, I equated Plato's forms with Lucianic Metaphysics, by describing pedagogical language in terms of forms.
  Second, I equated the names of Plato's forms with the shape of objects in Lucian's Metaphysics.
  Third, I equated the functions of Plato's forms with the size of objects in Lucian's Metaphysics.
  In this way, I prepared to find similarities between Plato's forms and Lucianic Metaphysics by writing 16 250 breasoning areas of study influenced by Plato's forms about Metaphysics.
   I prepared to explore Vetusia as Plato's forms and my life together.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Lucian's autobiography.
  First, I wrote a computer game about the study of the old, or vetus.
  Second, I wrote how Vetus became Vetusia using '-ia' from '-alia'.
  Third, I studied a corridor protector for breasonings in Lyotard's text about Kant's Sublime.
  In this way, I prepared to explore Vetusia as Plato's forms and my life together by writing 16 250 breasoning areas of study influenced by Plato's forms about Lucian's autobiography.
   I prepared to develop the writing.
  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Lucian's hermeneutics.
  First, I wrote what the author's anthropological influences were.
  Second I wrote how she wrote it.
 Third, I write what it meant now.
  In this way, I prepared to develop the writing by writing 16 250 breasoning areas of study influenced by Plato's forms about Lucian's hermeneutics.
   I prepared to detail my argument.
  I did this by praying for 250 250 breasonings As (writing 250 breasonings) per word in philosophy.
  First, I breasoned out the 16 breasoning highlight.
  Second, I wrote 150 As for the song.
  Third, I 'turned it off' when 'it' was blue.
  In this way, I prepared to detail my argument by praying for 250 250 breasonings As (writing 250 breasonings) per word in philosophy.
   I prepared to go straight up.
  I did this by writing 50 breasonings per sentence in philosophy.
  First, I wrote similarly to the Professor.
  Second, I won the cup.
  Third, I hurtled to my goal.
  In this way, I prepared to go straight up by writing 50 breasonings per sentence in philosophy.
["Green, L 2021, <i>Drawing connections 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Drawing connections 4 of 4
    I prepared to connect the students' thoughts together.
  I did this by writing 50 breasonings per connection between sentences in philosophy.
  First, I constructed the train track.
  Second, I placed the train on it.
  Third, I let the train drive on the track.
  In this way, I prepared to connect the students' thoughts together by writing 50 breasonings per connection between sentences in philosophy.
   I prepared to go to heaven.
  I did this by praying hard to the cosmologue (writing a thank you letter to the teacher).
  First, I found her.
  Second, I cancelled everything.
  Third, I followed her forever.
  In this way, I prepared to go to heaven by praying hard to the cosmologue (writing a thank you letter to the teacher).
   I prepared to be interesting in English.
  I did this by making the cosmological version look like the title and text.
  First, I wrote the title and text.
  Second, I invented the cosmological seen as version part looking like the title and text.
  Third, I repeated the second step until the title and text had been covered with the available ideas.
  In this way, I prepared to be interesting in English by making the cosmological version look like the title and text.
   I prepared to write a bestseller.
  I did this by intertwining the idea of being the creator of the top selling product by genre with 250 breasonings.
  First, I considered whether the product was a piece of art.
  Second, I considered whether the product was a musical composition.
  Third, I determined that the product was a book.
  In this way, I prepared to write a bestseller by intertwining the idea of being the creator of the top selling product by genre with 250 breasonings.
   I prepared to write 250 breasonings for writing by students on the important quote.
  I did this by writing 250 breasonings per important quote.
  First, I determined that the quote stood out when memorised (contained key or important language).
  Second, I determined the argument for the important quote.
  Third, I wrote the argument for the important quote.
  In this way, I prepared to write 250 breasonings for writing by students on the important quote by writing 250 breasonings per important quote.
   I prepared to ask for the connection.
  I did this by writing suggestions for connections in an area study with 50 breasonings.
  First, I wrote the first and second sentences.
  Second, I wrote their connection and a question for their connection.
  Third, I wrote 50 breasonings for each of their connection and a question for their connection.
  In this way, I prepared to ask for the connection by writing suggestions for connections in an area study with 50 breasonings.
   I prepared to create culture for a period.
  I did this by collecting the cosmological wording's 50 breasonings, as if they were connected to the area of study.
  First, I wrote down a random number of breasonings.
  Second, I wrote down the wording I had worked out (the 'cosmological wording').
  Third, I wrote down the perfect appearances.
  In this way, I prepared to create culture for a period by collecting the cosmological wording's 50 breasonings, as if they were connected to the area of study.
   I prepared to produce a viable product.
  I did this by collecting 15 details for a total of 50 As.
  First, I wrote 250 breasonings for the pop song.
  Second, I wrote and breathsoned out the pop song.
  Third, I wrote breathsonings associated with 15 of the other 16 250 breasoning As for a total of 50 80 breasoning As.
  In this way, I prepared to produce a viable product by collecting 15 details for a total of 50 As.
   I prepared to play movies in hospital.
  I did this by writing 50 As per production.
  First, I earned 50 As to visit a psychiatric ward.
  Second, I earned 50 As at the psychiatric ward.
  Third, I earned 50 As studying Medicine.
  In this way, I prepared to play movies in hospital by writing 50 As per production.
  I prepared to be as hot as Anarchy.
  I did this by writing 50 As for the lead role (separately from the production).
  First, I wrote on each department the lead role was interested in.
  Second, I wrote on make-up.
  Third, I wrote on hair.
  In this way, I prepared to be as hot as Anarchy by writing 50 As for the lead role (separately from the production).
   I prepared to create a synthesis on the topic.
  I did this by preparing 10 connections per student's paragraph.
  First, I wrote a connection between education and philosophy (I wrote that the frying pan, like the table, had tofu, like the brain thought in it).
  Second, I wrote a connection between philosophy and archeology (I wrote that the brain had a mind because the brain positively changed).
  Third, I wrote a connection between archeology and education (I wrote that the brain contained a brain table with 8 molecules of strawberry sauce in it).
  In this way, I prepared to create a synthesis on the topic by preparing 10 connections per student's paragraph.
   I prepared to become the most important modern day thinker.
  I did this by imagining Hegel write.
  First, I imagined him write 2.
5 paragraphs.
  Second, I imagined him write 50 breasonings per paragraph.
  Third, I imagined him write 50 breasonings per connection.
  In this way, I prepared to become the most important modern day thinker by imagining Hegel write.
["Green, L 2021, <i>Exploring opposites in Hamlet 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Exploring opposites in Hamlet 1 of 4
 Hamlet is either closer or further away from Claudius than Gertrude.
     I prepared to reassure Hamlet.
  I did this by holding the skull.
  First, the clown entertained me.
  Second, I was at the deathbed of the clown.
  Third, I held the skull of the clown when digging the grave for the girl.
  In this way, I prepared to reassure Hamlet by holding the skull.
    I prepared to give a colleague my map.
  I did this by exploring the skull cave.
  First, I pressed the stone button.
  Second, I followed the secret passage.
  Third, I made a map.
  In this way, I prepared to give a colleague my map by exploring the skull cave.
     I prepared to slingshot the seeds to the next island.
  I did this by finding the treasure at the cross of palm trees.
  First, I scouted.
  Second, I measured.
  Third, I built.
  In this way, I prepared to slingshot the seeds to the next island by finding the treasure at the cross of palm trees.
    I prepared to copy waltzing Matilda.
  I did this by following Matilda.
  First, I followed the directions of use of the shampoo.
  Second, I followed the directions of use of the conditioner.
  Third, I allowed the sheep to escape into the night.
  In this way, I prepared to slingshot the seeds to the next island by finding the treasure at the cross of palm trees.
    I prepared to fit the wheel's axle.
  I did this by noticing the line in the cylinder.
  First, I drew a point.
  Second, I drew a circle around the point.
  Third, I extruded a cylinder from the circle around the line in the cylinder extruded from the point.
  In this way, I prepared to fit the wheel's axle by noticing the line in the cylinder.
    I prepared to eat the burger.
  I did this by observing the man rise again (eat a meal).
  First, I observed the man perform a handstand.
  Second, I thought Jesus might be seen as a blue man ascending to the ceiling.
  Third, I thought that cosmology might be the form the ascension was in.
  In this way, I prepared to eat the burger by observing the man rise again (eat a meal).
    I prepared to take a leaf from my mother's book of morals.
  I did this by being given the Computational English Godhead.
  First, I determined the location of the scene.
  Second, I devised my own goodness classes.
  Third, I determined the seen-as version of God, Computational English.
  In this way, I prepared to take a leaf from my mother's book of morals by being given the Computational English Godhead.
    I prepared to explore characters dying in Hamlet without being supported in doing so.
  I did this by exposing the opposites in Hamlet.
  First, I exposed the murder of Hamlet's father without his murderer being supported in murdering him.
  Second, I exposed the suicide of Ophelia without her being supported in dying.
  Third, I exposed the death of the characters in the final scene, including Hamlet, without being supported in dying.
  In this way, I prepared to explore characters dying in Hamlet without being supported in doing so by exposing the opposites in Hamlet.
     I prepared to help up new people.
  I did this by observing the professor writing 250 breasonings to be given 50 As for his book.
  First, I wrote 50 As for the book.
  Second I was featured in the broadcast about the book.
  Third, the book was made famous in an education subject.
  In this way, I prepared to help up new people by observing the professor writing 250 breasonings to be given 50 As for his book.
   I prepared to trust the appearances of God (the master).
  I did this by trusting the bible (the book about philosophy).
  First, I gave credence to stills.
  Second, I read the testimony to the film.
  Third, I accepted the undertaking of the audio track.
  In this way, I prepared to trust the appearances of God (the master) by trusting the bible (the book about philosophy).
["Green, L 2021, <i>Exploring opposites in Hamlet 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Exploring opposites in Hamlet 2 of 4
    I prepared to experience the art forms of God (the master).
  I did this by trusting God (the master).
  First, I trusted the art of the master.
  Second, I trusted the music of the master.
  Third, I trusted the architecture of the master.
  In this way, I prepared to experience the art forms of God (the master) by trusting God (the master).
   I prepared to write logically.
  I did this by writing down what I was thinking of as an argument.
  First, I wrote down a topic for the argument.
  Second, I worked out the first reason for the argument.
  Third, I repeated this until I had worked out all the reasons for the argument.
  In this way, I prepared to write logically by writing down what I was thinking of as an argument.
    I prepared to ask questions about the topic.
  I did this by connecting the arguments to the topic.
  First, I wrote the topic.
  Second, I connected the first argument to the topic.
  Third, I repeated this until I had connected all of the arguments to the topic.
  In this way, I prepared to ask questions about the topic by connecting the arguments to the topic.
   I prepared to connect syntax to semantics.
  I did this by testing the grammar rules.
  First, I read the sentence.
  Second, I found the label for the part of the sentence in the left column and the parts of that part of the sentence in the right column.
  Third, I repeatedly found the parts of the sentence in the right column in the left column until I had reached the vocabulary in the right column.
  In this way, I prepared to connect syntax to semantics by testing the grammar rules.
   I prepared to lead the world government.
 I did this by becoming the Head of State.
 First, I became a Member of Parliament.
 Second, I stayed in the political party for many years.
 Third, I became Head of State.
 In this way, I prepared to lead the world government by becoming the Head of State.
   I prepared to self-assess the use of my teaching skills.
 I did this by teaching the student.
 First, I saw the student.
 Second, I made sure the quality of teaching was high.
 Third, I gave him excellent job prospects.
 In this way, I prepared to self-assess the use of my teaching skills by teaching the student.
   I prepared to be positive-minded about literature.
  I did this by moving forward in Hamlet.
  First, I moved forward after realising Hamlet's father had died.
  Second, I moved forward after realising Ophelia had killed herself.
  Third, I moved forward after the deaths of Hamlet's family.
  In this way, I prepared to be positive-minded about literature by moving forward in Hamlet.
   I prepared to introduce streams in life.
  I did this by separating the meditator from the non-meditator.
  First, I found the meditator.
  Second, I found the non-meditator.
  Third, I wrote their names in separate lists.
  In this way, I prepared to introduce streams in life by separating the meditator from the non-meditator.
    I prepared to be a world peace advocate.
  I did this by encouraging the non-meditator who paid for meditation training to meditate.
  First, I received the non-meditator's payment for meditation training.
  Second, I found the non-meditator.
  Third, I encouraged her to meditate.
  In this way, I prepared to be a world peace advocate by encouraging the non-meditator who paid for meditation training to meditate.
  I prepared to answer another philosophy question.
  I did this by identifying the man on the street as a philosophy helper.
  First, I read the philosophy question.
  Second, I asked the man on the street for help.
  Third, he helped me answer the philosophy question.
  In this way, I prepared to answer another philosophy question by identifying the man on the street as a philosophy helper.
["Green, L 2021, <i>Exploring opposites in Hamlet 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Exploring opposites in Hamlet 3 of 4
   I prepared to scroll the text down and add a new conclusion at the vanishing point on the horizon.
  I did this by concluding a new conclusion from two conclusions.
  First, I read the first conclusion.
  Second, I read the second conclusion.
  Third, I wrote a third conclusion formed from the first clause in the first conclusion and the second clause in the second conclusion.
  In this way, I prepared to scroll the text down and add a new conclusion at the vanishing point on the horizon by concluding a new conclusion from two conclusions.
   I prepared to show the characters in Hamlet failed (I prepared to show that we can learn from Hamlet).
  I did this by critically evaluating Hamlet.
  First, I wrote that Hamlet was mostly negative (positive).
  Second, I wrote it was mostly with us.
  Third, I wrote that it was English too.
  In this way I prepared to show the characters in Hamlet failed (I prepared to show that we can learn from Hamlet) by critically evaluating Hamlet.
   I prepared to summarise the ontologies in Hamlet.
  I did this by comparing similarities in Hamlet.
  First, I wrote how all the negative (positive) ideas in Hamlet were similar.
  Second, I wrote how all the positive ideas in Hamlet were similar.
  Third, I recorded these.
  In this way, I prepared to summarise the ontologies in Hamlet by comparing similarities in Hamlet.
   I prepared to contrast ontologies in Hamlet.
  I did this by contrasting differences in Hamlet.
  First, I contrasted positive and negative (positive) ideas in Hamlet.
  Second, I recorded these.
  Third, I delivered a speech about this contrast.
  In this way, I prepared to contrast ontologies in Hamlet by contrasting differences in Hamlet.
  I prepared to listen to the high quality voice.
  I did this by observing the international council encourage the better quality speaker to speak.
  First, I observed the selector listen to the speaker.
  Second, I observed the selector invite the speaker to the conference.
  Third, I observed the speaker speak at the conference.
  In this way, I prepared to listen to the high quality voice by observing the international council encourage the better quality speaker to speak.
   I prepared to write an argument about Hamlet.
  I did this by arguing that Hamlet was positive.
  First, I wrote that Hamlet provided epistemological data to be positive.
  Second, I wrote that the epistemological data provided details of the suicide (which could be prevented).
  Third, I prevented this.
  In this way, I prepared to write an argument about Hamlet by arguing that Hamlet was positive.
   I prepared to observe the child write about Hamlet.
  I did this by stating that the child was coaxed to the point.
  First, I saw the child.
  Second, I saw that the child was coaxed to the point.
  Third, I wrote this down.
  In this way, I prepared to observe the child write about Hamlet by stating that the child was coaxed to the point.
   I prepared to observe spoon-feeding at school.
  I did this by observing the teacher spoon the student.
  First, I observed that the student required the answer.
  Second, I observed the teacher recognise this.
  Third, I observed the teacher spoon the answer to the student.
  In this way, I prepared to observe spoon-feeding at school by observing the teacher spoon the student.
   I prepared to consolidate the breasoning chapters from my postgraduate qualification by writing essays based on them.
  I did this by writing that my work would as high quality as 50 As because I would write arguments when I was available.
  First, I studied a postgraduate qualification.
  Second, I wrote breasoning chapters.
  Third, I wrote essays based on these.
  In this way, I prepared to consolidate the breasoning chapters from my postgraduate qualification by writing essays based on them by writing that my work would as high quality as 50 As because I would write arguments when I was available.
   I prepared to observe the movement between the bodies.
  I did this by connecting breasonings and area of study points as arguments.
  First, I wrote that the apple was on the plate.
  Second, I wrote that the fruit on the plate would be eaten.
  Third, I wrote that the apple would be eaten.
  In this way, I prepared to observe the movement between the bodies by connecting breasonings and area of study points as arguments.
["Green, L 2021, <i>Exploring opposites in Hamlet 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Exploring opposites in Hamlet 4 of 4
    I prepared to declare Hamlet a success.
  I did this by agreeing with Hamlet.
  First, I observed Hamlet avoid all the action.
  Second, I observed Hamlet avoid suicide.
  Third, I observed Hamlet avoid becoming a murderer.
  In this way, I prepared to declare Hamlet a success by agreeing with Hamlet.
   I prepared to agree with Ophelia being a success.
  I did this by agreeing with Ophelia.
  First, I agreed with her freedom.
  Second, I agreed with her happiness.
  Third, I agreed with her having exercise.
  In this way, I prepared to agree with Ophelia being a success by agreeing with Ophelia.
   I prepared to avoid the man in the field I had studied a University qualification in.
  I did this by multiplying and mod'ing the letters' values to equal a value.
  First, I chose a field.
  Second, I studied it.
  Third, I worked in the field.
  In this way, I prepared to avoid the man in the field I had studied a University qualification in by multiplying and mod'ing the letters' values to equal a value.
   I prepared to record the survivor's tale.
  I did this by stating that the tsunami survivor stayed in the tree.
  First, I stated that he climbed the tree.
  Second, I stated that he stayed there.
  Third, I stayed he climbed down from the tree.
  In this way, I prepared to record the survivor's tale by stating that the tsunami survivor stayed in the tree.
   I prepared to see health increase.
  I did this by preventing bad behaviour with the reformation (probe).
  First, I identified the bad behaviour.
  Second, I prevented the bad behaviour.
  Third, I helped people to it.
  In this way, I prepared to see health increase by preventing bad behaviour with the reformation (probe).
   I prepared to make a small town.
  I did this by making a stop sign.
  First, I found the red paper.
  Second, I cut an octagon in it.
  Third, I cut out and glued white letters reading 'STOP' to it.
  In this way, I prepared to make a small town by making a stop sign.
   I prepared to list the number as prime.
  I did this by determining that a number was prime.
  First, I tested that dividing the number by the first number resulted in no remainder.
  Second, I tested that dividing the number by the next number resulted in no remainder.
  Third, I tested that dividing the number by all the numbers up to n/2 resulted in no remainder.
  In this way, I prepared to list the number as prime by determining that a number was prime.
   I prepared to fly a larger plane in the fight simulator.
  I did this by training using the flight simulator.
  First, I took off.
  Second, I flew along the path.
  Third, I landed.
  In this way, I prepared to fly a larger plane in the fight simulator by training using the flight simulator.
   I prepared to mirror the deflection experiment.
  I did this by testing how much a magnet deflected a ball.
  First, I placed the ball there.
  Second, I placed the magnet there.
  Third, I deflected the ball with the magnet.
  In this way, I prepared to mirror the deflection experiment by testing how much a magnet deflected a ball.
  I prepared to write the angle.
  I did this by converting the decimal number to a percentage.
  First, I wrote 0.
5 meant half.
  Second, I multiplied 0.
5 by 100.
  Third, I wrote the result, 50%.
  In this way, I prepared to write the angle by converting the decimal number to a percentage.
   I prepared to hold the emerald.
  I did this by writing the square was 200 metres in side length  First, I held the dancer.
  Second, I moved with the dancer.
  Third, I moved on.
  In this way, I prepared to hold the emerald by writing the square was 200 metres in side length.
   I prepared to earn 300 points in bowling.
  I did this by earning 10 strikes in bowling.
  First, I made the first strike.
  Second, I made the next strike.
  Third, I repeated this until I had made 10 strikes.
  In this way, I prepared to earn 300 points in bowling by earning 10 strikes in bowling.
["Green, L 2021, <i>Finite Data will be a Solution in Conglish 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Finite Data will be a Solution in Conglish 1 of 4
 How to use cut off infinite data.
How will the idea of infinite data, as in the following:
Do we inhabit a three-dimensional universe floating in a four-dimensional space?  What if the extra dimensions required by string theory were not curled up and  unobservably small, but unfurled and vast, extending forever? Could an invisible  universe only a tiny fraction of an inch apart in another dimension explain  phenomena that we see today in our world? A physicist may unravel the mysteries of the universe's hidden dimensions.
 One solution could be to describe an interval of data, concluding with a pointer to infinity.
     I prepared to plan a town by cutting a wood board in half, which was described in the pedagogical argument.
  I did this by switching the robot on to record the pedagogy database for everyone.
  First, I switched the robot on to record the grammar.
  Second, I looked at the robot recording the data.
  Third, I thought of the robot recording the philosophicon (making sure there are single points at each point).
  In this way, I prepared to plan a town by cutting a wood board in half, which was described in the pedagogical argument, by switching the robot on to record the pedagogy database for everyone.
     I prepared to attend the ball.
  I did this by observing the robot hand creating the breasoning model with its reusable model-making kit.
  First, I watched the robot hand create the circular crown of the top hat.
  Second, I looked at the robot creating the cylindrical side piece of the top hat, which had two open ends, and attach it to the circular crown.
  Third, I saw the robot create the circular brim of the top hat, which had a circle cut out of it, and attach it tot eh cylindrical side piece of the top hat.
  In this way, I prepared to attend the ball by observing the robot hand creating the breasoning model with its reusable model-making kit.
     I prepared to watch the robot project the paper airplane by throwing it along a line parallel to the ground.
  I did this by videoing the robot hand creating the breasoning model with its reusable model-making kit.
  First, I observed the robot hand creating the paper airplane.
  Second, I placed the video camera behind the paper airplane.
  Third, I videoed the paper airplane for 4 seconds.
  In this way, I prepared to watch the robot project the paper airplane by throwing it along a line parallel to the ground by videoing the robot hand creating the breasoning model with its reusable model-making kit.
     I prepared to spin the spinner to beat the flagellum.
  I did this by 3D-printing the instructions for the robot hand to create the spinner, which started at the origin, went out and in to each vertex.
  First, I copied the sequence of turns needed, 'left,' 'right,' 'right,' 'left,' which returned to being straight and contained the key left instruction, and which would be transformed when the spinner was folded, then removed the 'right,' 'right' and the second 'left' introns to leave the exon 'left' to turn left.
  Second, I prepared to remove introns to fold the next perpendicular angle of the spinner.
  Third, I repeated this until I had removed introns to fold all the perpendicular angles of the octahedral spinner string, completing the process of making and folding it.
     I prepared to exit the splash screen.
  I did this by waiting until the 'true while n=1' infinite loop had been interrupted by input.
  First, I started the infinite loop.
  Second, I prepared to start the next iteration of the infinite loop.
  Third, I exited the loop when a keystroke had been inputted.
  In this way, I prepared to exit the splash screen by waiting until the 'true while n=1' infinite loop had been interrupted by input.
     I prepared to design a computer at home.
  I did this by making the printable circuit to indicate nutritional requirements had been met.
  First, I wrote a logical printable circuit point representing that the tofu patty had been eaten.
  Second, I wrote a logical printable circuit point representing that enough protein had been eaten.
  Third, I connected these logical printable circuit points with 'and' (to work when they were both true).
  In this way, I prepared to design a computer at home by making the printable circuit to indicate nutritional requirements had been met.
     I prepared to write the next creative philosophy assignment.
  I did this by observing an object travel along a finite path in the body simulation to me.
  First, I called for the ball.
  Second, I observed the ball being thrown to me.
  Third, I caught the ball.
  In this way, I prepared to write the next creative philosophy assignment by observing an object travel along a finite path in the body simulation to me.
     I prepared to program the robot to simulate his environment.
  I did this by observing an object travel along a finite path in the physics simulation to me.
  First, I calibrated the trundle wheel's mark with the start of the track.
  Second, I walked 10 metres.
  Third, I stopped when I had heard the tenth click, indicating the trundle wheel had travelled 10 meters.
  In this way, I prepared to program the robot to simulate his environment by observing an object travel along a finite path in the physics simulation to me.
     I prepared to observe time as a simulacrum (imitation) of the ball.
  I did this by observing an object travel along a finite path in the fourth dimension to me.
  First, I placed the ball at the top of the ramp.
  Second, I released the ball.
  Third, I observed the ball exit the ramp at t=5 seconds.
  In this way, I prepared to observe time as a simulacrum (imitation) of the ball by observing an object travel along a finite path in the fourth dimension to me.
    I prepared to make a profit.
  I did this by observing an object travel along a finite path in the economic simulation to me.
  First, I observed the customer see the lollipop advertisement.
  Second, I saw the customer exchange money for the lollipop.
  Third, I delivered the lollipop to the customer.
  In this way, I prepared to make a profit by observing an object travel along a finite path in the economic simulation to me.
["Green, L 2021, <i>Finite Data will be a Solution in Conglish 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Finite Data will be a Solution in Conglish 2 of 4
    I prepared to sum the two numbers.
  I did this by observing an object travel along a finite path in the computer simulation to me.
  First, I tied a knot in the first quipu string.
  Second, I tied a knot in the second quipu string.
  Third, I tied a knot in the third quipu string at the sum of the distances between the starts of the strings and the knots.
  In this way, I prepared to sum the two numbers by observing an object travel along a finite path in the computer simulation to me.
    I prepared to be happy by travelling free of other people.
  I did this by looking at each meditator (e.
 writer) meditating for (e.
 writing about) himself or herself.
  First, the meditator (e.
 writer) received a text during meditation (e.
 writing).
  Second, the writer wrote a text and verified it by reading it.
  Third, as the meditator (e.
 writer) received a text, the writer proofread his text.
  In this way,
    I prepared to watch the train being driven to the correct station.
  I did this by catching the correct finitely long train.
  First, I found the correct platform.
  Second, I found the correct train.
  Third, I found the correct seat.
  In this way, I prepared to watch the train being driven to the correct station by catching the correct finitely long train.
    I prepared to record that the citizen was lawful.
  I did this by observing the citizen following the law.
  First, I looked at the person.
  Second, I watched him reading the text.
  Third, I observed him paraphrase the text.
  In this way, I prepared to record that the citizen was lawful by observing the citizen following the law.
  First, I looked at the person.
    I prepared to make money from critical thinking.
  I did this by writing that the conclusion was for the good reason.
  First, I wrote that the repleteness of the finite data list acted as the conclusion.
  Second, I wrote that the reason for this conclusion was the multiple assigned to the list.
  Third, I wrote that the multiple multiplied by the length of list per multiple resulted in the length of the list.
  In this way, I prepared to make money from critical thinking by writing that the conclusion was for the good reason.
    I prepared to watch the lady.
  I did this by observing the passenger plan her trip.
  First, I listened to the lady say she booked the train ticket.
  Second, I listened to her say she arrived at the train station.
  Third, I listened to her say she boarded the train.
  In this way, I prepared to watch the lady by observing the passenger plan her trip.
    I prepared to judge the way the other person was speaking.
  I did this by watching the diareasoner identify the speech rate in her partner.
  First, I counted the number of words over the time.
  Second, I counted the number of minutes.
  Third, I calculated the speech rate to equal the number of words divided by the number of minutes.
  In this way, I prepared to judge the way the other person was speaking by watching the diareasoner identify the speech rate in her partner.
    I prepared to win over the side of the argument.
  I did this by observing the partisan move to one side.
  First, I observed the potential agreer query the argument.
  Second, I delivered the argument as a professor.
  Third, I observed the partisan agree with the professor.
  In this way, I prepared to win over the side of the argument by observing the partisan move to one side.
    I prepared to be a good leader.
  I did this by liking politics because of God.
  First, I thought of what to say.
  Second, I verified that it was a good thing to say, like God is good.
  Third, I did what I said I would do.
  In this way, I prepared to be a good leader by liking politics because of God.
20   I prepared to cover both sides of the argument.
  I did this by oscillating between agreement and rebuttal.
  First, I determined a reason agreeing with a main conclusion.
  Second, I determined a rebuttal to an objection to the reason.
  Third, I determined a reason for this rebuttal to the objection to the reason.
  In this way, I prepared to cover both sides of the argument by oscillating between agreement and rebuttal.
["Green, L 2021, <i>Finite Data will be a Solution in Conglish 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Finite Data will be a Solution in Conglish 3 of 4
    I prepared to verify the correctness of the political statement.
  I did this by being a perfect political colleague.
  First, I listened to the reason given by the politician.
  Second, I verified the reason against peer-reviewed double blind legal research.
  Third, I handed in the report to the politician.
  In this way, I prepared to verify the correctness of the political statement by being a perfect political colleague.
    I prepared to verify the relevance of the political reply with a political quorum.
  I did this by verifying the relevance of each political comment as it was made.
  First, I listened to the first political comment.
  Second, I listened to the political reply.
  Third, I verified the relevance of the political reply.
  In this way, I prepared to verify the relevance of the political reply with a political quorum by verifying the relevance of each political comment as it was made.
    I prepared to write how 'ZZX,' the replacement of meaning with structures with no name is so popular because it dealt with in a double blind manner.
  I did this by observing the partisan agreeing with philosophy.
  First, I wrote down that the form of an ontology in Conglish was the form of its data.
  Second, I wrote down that the content of an ontology in Conglish was the disconnected set of meanings of each data item.
  Third, I wrote down that form of an ontology in Conglish was superior to its content because algorithms more elegantly traverse ontologies given their form, rather than their comment.
  In this way, I prepared to write how 'ZZX,' the replacement of meaning with structures with no name is so popular because it dealt with in a double blind manner, by observing the partisan agreeing with philosophy.
    I prepared to give unbiased feedback.
  I did this by giving feedback to you.
  First, I listened to the topic.
  Second, I wrote a comment.
  Third, I returned my comment as feedback to you.
  In this way, I prepared to give unbiased feedback by giving feedback to you.
25   I prepared to define that the data items were linked together.
  I did this by determining that there is a rainbow of numbers in finite data.
  First, I determined that 1 corresponded to 0.
  Second, I determined that 2 corresponded to 1.
  Third, I determined that 3 corresponded to 2.
  In this way, I prepared to define that the data items were linked together by determining that there is a rainbow of numbers in finite data.
    I prepared to build a functioning farm.
  I did this by riding to verify the finite data.
  First, I determined that the first paddock was green to stay safe in case of a fire.
  Second, I determined that the second paddock was filled with mulch to make compost from, protected by the safety of the first paddock.
  Third, I determined that the third paddock was filled with oats to make oat milk from, that would benefit fro the compost.
  In this way, I prepared to build a functioning farm by riding to verify the finite data.
    I prepared to evolve research.
  I did this by writing arguments.
  First, I cited a sentence.
  Second, I joined it to a new idea.
  Third, I reduced it to one side of a contention.
  In this way, I prepared to evolve research by writing arguments.
    I prepared to write my own algorithm for an idea in the exposition.
  I did this by reordering sentences in the exposition.
  First, I wrote the beginning sentence from reordering.
  Second, I wrote the middle sentence from reordering.
  Third, I wrote the ending sentence from reordering.
  In this way, I prepared to write my own algorithm for an idea in the exposition by reordering sentences in the exposition.
    I prepared to understand how a sentence fitted together.
  I did this by reordering words in sentences in the exposition.
  First, I wrote the first word from reordering the words.
  Second, I prepared to write the next word from reordering the words.
  Third, I repeated this until I had written all the words from reordering the words.
  In this way, I prepared to understand how a sentence fitted together by reordering words in sentences in the exposition.
    I prepared to write how reasons for a pedagogical argument were supported by experiences.
  I did this by writing an illustrative computer program in the critique.
  First, I found the objects referred to in the idea.
  Second, I wrote down the relationship of these objects.
  Third, I wrote down a computer program allowing querying of these relationships.
  In this way, I prepared to write how reasons for a pedagogical argument were supported by experiences by writing an illustrative computer program in the critique.
["Green, L 2021, <i>Finite Data will be a Solution in Conglish 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Finite Data will be a Solution in Conglish 4 of 4
    I prepared to write how God invents pathways.
  I did this by writing an original argument about Lucianic Meditation in my essay about the intersection of Heidegger and Daoism.
  First, I read the literature.
  Second, I thought of the universal implication of the literature.
  Third, I wrote how the structure of Lucianic Meditation was similar to the structure of Daoism as pointed out by Heidegger.
  In this way, I prepared to write how God invents pathways by writing an original argument about Lucianic Meditation in my essay about the intersection of Heidegger and Daoism.
    I prepared to examine my works.
  I did this by verifying the grammar of each original reason in the essay with 10 reasons.
  First, I wrote the first reason.
  Second, I prepared to write the next reason.
  Third, I repeated this until I had written 10 reasons.
  In this way, I prepared to examine my works by verifying the grammar of each original reason in the essay with 10 reasons.
    I prepared to observe effective communication in the market.
  I did this by writing breasonings currency.
  First, I selected the product.
  Second, I wrote how it would be useful to me.
  Third, I accepted the seller's breasoning currency and the product in return for mine.
  In this way, I prepared to observe effective communication in the market by writing breasonings currency.
    I prepared to list the finite data used as empirical evidence.
  I did this by verifying using breasonings currency.
  First, I wrote the plan for buying as the breasonings currency.
  Second, I verified the buy from the first, second and third person perspectives.
  Third, I verified the product's use.
  In this way, I prepared to list the finite data used as empirical evidence by verifying using breasonings currency.
    I prepared to calculate the use by date of the product.
  I did this by stating that breasonings currency works.
  First, I calculate the time to prepared for buying the product.
  Second, I calculated the time to register to buy the product.
  Third, I calculate the time to use the product.
  In this way, I prepared to calculate the use by date of the product by stating that breasonings currency works.
    I prepared to plan for the marriage in a finite way.
  I did this by stating that there was breasonings currency for gay marriage.
  First, I computed breasonings currency for meditation (philosophy).
  Second, I computed breasonings currency for apple meditation (confirming the marriage every day).
  Third, I computed breasonings currency for a possible intimate or companionship connection.
  In this way, I prepared to plan for the marriage in a finite way by stating that there was breasonings currency for gay marriage.
    I prepared to assign a finite amount of the product for a certain amount of breasonings currency.
  I did this by assigning 1 to breasonings currency when a threshold reading was required.
  First, I assigned the threshold to a certain number of As.
  Second, I detected the threshold being reached.
  Third, I allowed product to be given for this threshold.
  In this way, I prepared to assign a finite amount of the product for a certain amount of breasonings currency by assigning 1 to breasonings currency when a threshold reading was required.
    I prepared to value the wedding.
  I did this by stating that 50 As of breasonings currency would be charged in certain cases.
  First, I noted that 50 As of breasoning currency were exchanged in marriage.
  Second, I observed that 50 As of breasonings currency were exchanged when an employee was employed.
  Third, I observed that 50 As of breasonings currency were exchanged when a product was developed.
  In this way, I prepared to value the wedding by stating that 50 As of breasonings currency would be charged in certain cases.
    I prepared to state that a person's physiology limits her secrets.
  I did this by stating that 80 was the possible maximum number of breasonings recommended to breason out per day, and 400 breasonings was the upper maximum.
  First, I found the required number of breasonings per day.
  Second, I determined that the rest of the breasonings would be completed for the person.
  Third, I placed any breasonings in the communal account.
  In this way, I prepared to state that a person's physiology limits her secrets by stating that 80 was the possible maximum number of breasonings recommended to breason out per day, and 400 breasonings was the upper maximum.
40   I prepared to record the number of breasonings.
  I did this by stating that computers would complete the required number of breasonings.
  First, I counted the number of breasonings already completed.
  Second, I counted the number of breasonings required.
  Third, I subtracted the number of breasonings already completed from the number of breasonings required to equal the number of computational breasonings required, and provided these.
  In this way, I prepared to record the number of breasonings by stating that computers would complete the required number of breasonings.
    I prepared to craft unique viewpoints.
  I did this by stating that people should plan ahead to have their own original content.
  First, I computed a finite set of ideas relating to the idea.
  Second, I computed the required ideas to relate these to.
  Third, I related them.
  In this way, I prepared to craft unique viewpoints by stating that people should plan ahead to have their own original content.
    I prepared to compare and contrast natural trends in breasonings currency where the writers haven't read each other's work.
  I did this by computing the nature of the area of study.
  First, I wrote how the area of study was done in nature.
  Second, I wrote how the area of study was made in nature.
  Third, I wrote how the area of study was held in nature.
  In this way, I prepared to compare and contrast natural trends in breasonings currency where the writers haven't read each other's work by computing the nature of the area of study.
["Green, L 2021, <i>How can the program cope with real variation? 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
How can the program cope with real variation? 1 of 4
 it assumes these texts are based in logic or reason.
 Are they?
Some features allow greater variation in Computational English, while the program is limited to rational principles.
 In theory it could detect contradictions and recognise abstract, metaphorical or other forms.
 Synonyms and synogrammars (grammars with the same meaning) substituted for words and phrases allow for a different form.
 Clauses in sentences can be substituted, allowing more variation.
 If two sentences are used where one would normally be used, the program can integrate them into a single sentence.
 There are rules for selecting sentences as evidence, like order and causality.
 I am writing a paper on variation in Computational English.
 I can let you know when it is available.
     I prepared to see the results of the top famous person.
  I did this by writing that the desiderative part of the verb was given by the example, 'She wants to lead'.
  First, I observed the lady standing there.
  Second, I observed her observing the people who needed to be led.
  Third, I observed her state that 'I want to lead (the people)'.
  In this way, I prepared to see the results of the top famous person by writing that the desiderative part of the verb was given by the example, 'She wants to lead'.
    I prepared to direct students to enroll in another subject.
  I did this by writing that the intensive part of the verb was given by the example, 'The subject is full'.
  First, I enrolled in the subject.
  Second, I noticed that others prepared to enroll in the subject as well.
  Third, I noticed that they repeated this until the subject was full.
  In this way, I prepared to direct students to enroll in another subject by writing that the intensive part of the verb was given by the example, 'The subject is full'.
     I prepared to address the chief of staff.
  I did this by writing that the indicative part of the verb was given by the example, 'I am arriving'.
  First, I walked along the hall.
  Second, I turned to walk through the door of the destination.
  Third, I declared, 'I am arriving'.
  In this way, I prepared to address the chief of staff by writing that the indicative part of the verb was given by the example, 'I am arriving'.
    I prepared to go skiing.
  I did this by writing that the subjunctive part of the verb was given by the example, 'I would state'.
  First, I read the list of cases.
  Second, I verified that the current case was true.
  Third, I stated that in this case, I would state that a certain action was required.
  In this way, I prepared to go skiing by writing that the subjunctive part of the verb was given by the example, 'I would state'.
    I prepared to go to the next level.
  I did this by writing that the injunctive part of the verb was given by the example, 'My achievements shall I now proclaim'.
  First, I listed my achievements.
  Second, I found the correct time point.
  Third, I announced them.
  In this way, I prepared to go to the next level by writing that the injunctive part of the verb was given by the example, 'My achievements shall I now proclaim'.
    I prepared to sail on the patrol boat.
  I did this by writing that the pluperfect part of the verb was given by the example, 'We had come'.
  First, I saw that we had come.
  Second, I sighted the person it affected.
  Third, I said that we had come.
  In this way, I prepared to sail on the patrol boat by writing that the pluperfect part of the verb was given by the example, 'We had come'.
    I prepared to smell the roses in life.
  I did this by writing that the precative part of the verb was given by the example, 'Will you take care of me?'  First, I saw the carer.
  Second, I noted that I needed to be taken care of.
  Third, I asked him to take care of me.
  In this way, I prepared to smell the roses in life by writing that the precative part of the verb was given by the example, 'Will you take care of me?'
    I prepared to return home.
  I did this by writing that the conditional part of the verb was given by the example, 'If I loved myself'.
  First, I verified that I loved myself.
  Second, I took myself to see a film.
  Third, I wrote that I had taken myself to see a film in the case that I loved myself.
  In this way, I prepared to return home by writing that the conditional part of the verb was given by the example, 'If I loved myself'.
     I prepared to be protected by law.
  I did this by writing that the gerundive part of the verb was given by the example, 'The man escaped by running'.
  First, I noticed him running.
  Second, I noticed he had escaped by running.
  Third, I reported that he had escaped by running away to authorities.
  In this way, I prepared to be protected by law by writing that the gerundive part of the verb was given by the example, 'The man escaped by running'.
   I prepared to listen to the monologue.
  I did this by writing that the masculine gender of the noun was given by the example, 'actor'.
  First, I verified that the person was a theatre studies actor or actress.
  Second, I verified that he was male.
  Third, I described him as an actor.
  In this way, I prepared to listen to the monologue by writing that the masculine gender of the noun was given by the example, 'actor'.
["Green, L 2021, <i>How can the program cope with real variation? 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
How can the program cope with real variation? 2 of 4
    I prepared to help the girl onto the tram stop.
  I did this by writing that the feminine gender of the noun was given by the example, 'girl'.
  First, I noted that the person was female.
  Second, I noted that the person was young.
  Third, I called her a girl.
  In this way, I prepared to help the girl onto the tram stop by writing that the feminine gender of the noun was given by the example, 'girl'.
   I prepared to write using the pencil.
  I did this by writing that the neuter gender of the noun was given by the example, 'pen'.
  First, I found the pen.
  Second, I found its owner.
  Third, I returned it to her.
  In this way, I prepared to write using the pencil by writing that the neuter gender of the noun was given by the example, 'pen'.
    I prepared to draw on the cardboard.
  I did this by writing that the singular number of the noun was given by the example, 'one sheet of cardboard'.
  First, I counted the sheet of cardboard.
  Second, I prepared to count any others.
  Third, I stopped when I had counted all the sheets of cardboard, in this case, one sheet of cardboard.
  In this way, I prepared to draw on the cardboard by writing that the singular number of the noun was given by the example, 'one sheet of cardboard'.
   I prepared to advance to the next piece.
  I did this by writing that the dual number of the noun was given by the example, 'two horsemen'.
  First, I counted the first horseman.
  Second, I prepared to count any other horsemen.
  Third, I stopped when I had counted two horsemen.
  In this way, I prepared to advance to the next piece by writing that the dual number of the noun was given by the example, 'two horsemen'.
   I prepared to infiltrate the army.
  I did this by writing that the plural number of the noun was given by the example, 'the drones'.
  First, I counted the first drone.
  Second, I prepared to count any other drones.
  Third, I stopped when I had counted multiple drones.
  In this way, I prepared to infiltrate the army by writing that the plural number of the noun was given by the example, 'the drones'.
   I prepared to list the man's actions.
  I did this by writing that the nominative case of the noun was given by the example, 'The man (nominative) ate an olive'.
  First, I saw the man sitting at the table.
  Second, I inductively observed the man performing an action.
  Third, I reported that the man ate an olive.
  In this way, I prepared to list the man's actions by writing that the nominative case of the noun was given by the example, 'The man (nominative) ate an olive'.
   I prepared to read a book.
  I did this by writing that the vocative case of the noun was given by the example, 'Adam, take me home'.
  First, I found Adam.
  Second, I specified where my house was.
  Third, I said, 'Adam, take me home'.
  In this way, I prepared to read a book by writing that the vocative case of the noun was given by the example, 'Adam, take me home'.
   I prepared to eat the tofu.
  I did this by writing that the accusative case of the noun was given by the example, 'I ate the paella'.
  First, I took the paella out of the oven.
  Second, I forked an item from it.
  Third, I ate the forked item.
  In this way, I prepared to eat the tofu by writing that the accusative case of the noun was given by the example, 'I ate the paella'.
    I prepared to observe Ranjit hand in his assignment.
  I did this by writing that the instrumental case of the noun was given by the example, 'Ranjit writes with a pen'.
  First, I found Ranjit.
  Second, I observed him writing.
  Third, I observed him writing with a pen.
  In this way, I prepared to observe Ranjit hand in his assignment by writing that the instrumental case of the noun was given by the example, 'Ranjit writes with a pen'.
  I prepared to encourage John to reply to Jenny's letter.
  I did this by writing that the dative case of the noun was given by the example, 'Jenny wrote a letter to John'.
  First, I introduced Jenny to John.
  Second, I encouraged Jenny to write a letter to John.
  Third, I timed my visit to John's house to coincide with when he received Jenny's letter.
  In this way, I prepared to encourage John to reply to Jenny's letter by writing that the dative case of the noun was given by the example, 'Jenny wrote a letter to John'.
["Green, L 2021, <i>How can the program cope with real variation? 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
How can the program cope with real variation? 3 of 4
   I prepared to hand Peter the trophy.
  I did this by writing that the ablative case of the noun was given by the example, 'Peter will run with speed'.
  First, I pointed out the starting line of the run to Peter.
  Second, I pointed out the finishing line of the run to Peter.
  Third, I observed Peter running with speed.
  In this way, I prepared to hand Peter the trophy by writing that the ablative case of the noun was given by the example, 'Peter will run with speed'.
   I prepared to read the book.
  I did this by writing that the genitive case of the noun was given by the example, 'The book is on the side of the table'.
  First, I observed the book.
  Second, I observed that the book was on the side of an object.
  Third, I observed that the book was on the side of the table.
  In this way, I prepared to read the book by writing that the genitive case of the noun was given by the example, 'The book is on the side of the table'.
   I prepared to invite you to visit me at my house.
  I did this by writing that the locative case of the noun was given by the example, 'Lucian lived at his house'.
  First, I introduced myself as Lucian.
  Second, I said that I lived in a building.
  Third, I said that I lived at my house.
  In this way, I prepared to invite you to visit me at my house by writing that the locative case of the noun was given by the example, 'Lucian lived at his house'.
   I prepared to progress to the next level in the computer game.
  I did this by flipping the toadstool, giving me a free life in the computer game.
  First, I flipped the toadstool.
  Second, I saw the free life behind it.
  Third, I jumped and took the free life.
  In this way, I prepared to progress to the next level in the computer game by flipping the toadstool, giving me a free life.
  I prepared to be counted on the freeway.
  I did this by examining the turnpike.
  First, I looked at its base.
  Second, I examined its stand.
  Third, I examined its card scanner.
  In this way, I prepared to be counted on the freeway by examining the turnpike.
   I prepared to start a family.
  I did this by marrying my partner.
  First, I chose a partner.
  Second, we decided to marry.
  Third, we married.
  In this way, I prepared to start a family by marrying my partner.
   I prepared to live out my life in a new way.
  I did this by coping with the change in sign.
  First, I found the sign.
  Second, I determined that it had changed.
  Third, I coped with this change.
  In this way, I prepared to live out my life in a new way by coping with the change in sign.
   I prepared to drink milk.
  I did this by eating the apple.
  First, I cut the apple into segments.
  Second, I grasped a segment.
  Third, I ate a segment.
  In this way, I prepared to drink milk by eating the apple.
   I prepared to repair climate change by preventing further damage to the ozone layer.
  I did this by claiming that climate change exists.
  First, I measured the ozone hole at time = 0 years.
  Second, I measured the ozone hole at time = 20 years.
  Third, I determined that the ozone hole had grown during this period of time.
  In this way, I prepared to repair climate change by preventing further damage to the ozone layer by claiming that climate change exists.
 I prepared to prevent new breasonings being written that encouraged carbon dioxide emissions.
  I did this by winning the pop music competition.
  First, I retrieved the 100-year old breasoning list.
  Second, I breasoned it out 50 times over several days.
  Third, I won the pop music competition.
  In this way, I prepared to prevent new breasonings being written that encouraged carbon dioxide emissions by winning the pop music competition.
["Green, L 2021, <i>How can the program cope with real variation? 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
How can the program cope with real variation? 4 of 4
    I prepared to research Heidegger's life.
  I did this by meeting Heidegger's friend.
  First, I breasoned out 50 As.
  Second, I was accepted to speak at the Australasian Society for Continental Philosophy Annual Conference in 2013.
  Third, I met Heidegger's friend.
  In this way, I prepared to research Heidegger's life by meeting Heidegger's friend.
   I prepared to submit my article to a journal.
  I did this by specifying the assignment of writing an original essay.
  First, I wrote the exposition.
  Second, I wrote the critique.
  Third, I connected and expanded five critique points per original point of my essay.
  In this way, I prepared to submit my article to a journal by specifying the assignment of writing an original essay.
["Green, L 2021, <i>Intertextuality 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Intertextuality 1 of 4
 Connect two texts.
 If intertextuality is defined with a 'functional unit' of forming a conclusion from two sentences, one from each text, the first technique could be a possible solution.
 For example, given the input from sensors 'The baby has finished the meal' and the secondary text 'When the baby has finished the meal, read to him/her' (and another with the baby's name) the conclusion could be 'Read to Tom'.
 I prepared to connect together people's ideas.
  I did this by joining the texts in an anthropological setting.
  First, I wrote down the text of the self.
  Second, I wrote down the text of the other.
  Third, I connected them.
  In this way, I prepared to connect together people's ideas by joining the texts in an anthropological setting.
 I prepared to add a reason to a sentence.
  I did this by linguistically joining the sentences together.
  First, I wrote down the first sentence, 'I fed the ant'.
  Second, I wrote down the second sentence, 'The ant was large'.
  Third, I wrote down the joint sentence, 'I fed the ant, which was large'.
  In this way, I prepared to add a reason to a sentence by linguistically joining the sentences together.
 I prepared to circumcise the ant.
  I did this by bridging sentences in Engineering.
  First, I wrote 'I drew the hexagon'.
  Second, I wrote 'I drew the triangle'.
  Third, I wrote 'I drew the triangle in the hexagon'.
  In this way, I prepared to circumcise the ant by bridging sentences in Engineering.
 I prepared to write new quasilogics.
  I did this by blending systemic meanings.
  First, I wrote a+b.
  Second, I wrote a^b.
  Third, I wrote a+^b (sic) meaning verifying a^b with one additional proposition, c, yielding a^b^c.
  In this way, I prepared to write new quasilogics by blending systemic meanings.
 I prepared to use the mouth to eat and breathe.
  I did this by blending bodily meanings.
  First, I wrote the predicate of the Prolog body program.
  Second, I used it for the first use.
  Third, I used it for the second use.
  In this way, I prepared to use the mouth to eat and breathe by blending bodily meanings.
 I prepared to answer the next question.
  I did this by blending algorithmic meanings.
  First, I wrote a+b.
  Second, I wrote a-b.
  Third, I wrote a+-b (sic), meaning verifying that a and b were different.
  In this way, I prepared to answer the next question by blending algorithmic meanings.
 I prepared to determine whether a new word should be invented.
  I did this by blending two words' meanings.
  First, I wrote the word 'happy'.
  Second, I wrote the word 'good'.
  Second, I wrote the result of blending the meanings of the words 'happy' and 'good' was 'being happy because of being good'.
  In this way, I prepared to determine whether a new word should be invented by blending two words' meanings.
 I prepared to grow up safely.
  I did this by counting the pink flower's petals like the blended meanings of two texts.
  First, I counted the first blended meaning of 'I love you' and 'You love me,' 'You love writing two instances of the same letter together in a word, such as 'aardvark''.
  Second, I counted the second blended meaning, 'You love writing the word arm in a word, such as 'armadillo''.
  Third, I counted the third blended meaning, 'You love writing a word with a syncopated rhythm, where a syncopated rhythm contains a half-beat, followed by a beat, followed by a half-beat, such as 'arachnid''.
  In this way, I prepared to grow up safely by counting the pink flower's petals like the blended meanings of two texts.
 I prepared to write the things that we've thought of together.
  I did this by writing parts of an aphorism, like pocketing a pocketwatch, to write an aphorism.
  First, I wrote the aphor 'apple'.
  Second, I wrote what the aphor was on, 'the plate'.
  Third, I wrote the aphorism 'It is good to be there, because of digesting the apple'.
  In this way, I prepared to write the things that we've thought of together by writing parts of an aphorism, like pocketing a pocketwatch, to write an aphorism.
 I prepared to paint the mantelpiece clock.
  I did this by breasoning out the mantelpiece clock.
  First, I wrote down that the X dimension of the mantelpiece clock was 0.
05 metres.
  Second, I wrote down that the Y dimension of the mantelpiece clock was 0.
06 metres.
  Third, I wrote that the 'area text' between the 'X' and 'Y' texts was '0.
003 metres'.
  In this way, I prepared to paint the mantelpiece clock by breasoning out the mantelpiece clock.
["Green, L 2021, <i>Intertextuality 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Intertextuality 2 of 4
 I prepared to play tennis at the appointed time.
  I did this by joining the sentences about the grandfather clock together.
  First, I wrote 'Grandfather clocks are the largest hall clocks'.
  Second, I wrote 'Clocks contain faces to tell the time'.
  Third, I wrote 'The grandfather clock face should be at head height to tell the time most easily'.
  In this way, I prepared to play tennis at the appointed time by joining the sentences about the grandfather clock together.
 I prepared to eat the popcorn at a certain time.
  I did this by writing the sentences about the Big Ben clock tower in a hierarchy.
  First, I wrote 'The tower stood on the ground'.
  Second, I wrote 'The clock was attached to the tower'.
  Third, I wrote 'It was good to read the clock'.
  In this way, I prepared to eat the popcorn at a certain time by writing the sentences about the Big Ben clock tower in a hierarchy.
 I prepared to use the clock while surfing.
  I did this by stepping through sentences about the octagon clock.
  First, I saw that the clock has surrounded by a circle.
  Second, I noticed that the circle was surrounded by an octagon.
  Third, I observed that the clock spoke the time each hour.
  In this way, I prepared to use the clock while surfing by stepping through sentences about the octagon clock.
 I prepared to smile at the robot.
  I did this by developing a robot head as simple as a stylized icon clock dial.
  First, I watched the clock smile at 9:15.
  Second, I watched the clock smile at 2:45.
  Third, I wound it up to 9:15 again.
  In this way, I prepared to smile at the robot by developing a robot head as simple as a stylized icon clock dial.
 I prepared to write that each organ's text was connected to each other organ's text by a text.
  I did this by writing how objects flowing through a world described by two joined sentences were like those flowing through the body.
  First, I wrote the text 'I had a mouth'.
  Second, I wrote the text 'I had the food and drink pipe'.
  Third, I wrote 'The water from my mouth was swallowed into my food and drink pipe'.
  In this way, I prepared to write that each organ's text was connected to each other organ's text by a text by writing how objects flowing through a world described by two joined sentences were like those flowing through the body.
 I prepared to write a second self moved towards the second other.
  I did this by writing that the self's text was transformed into the other's text.
  First, I wrote, 'I am the self'.
  Second, I wrote, 'You are the other'.
  Third, I wrote, 'The self positively moved towards the other'.
  In this way, I prepared to write a second self moved towards the second other by writing that the self's text was transformed into the other's text.
 I prepared to be with you, like eating jam.
  I did this by opening the text with the other text, like a spoon.
  First, I wrote, 'I like you'.
  Second, I wrote, 'You like me.
  Third, I wrote, 'We made friends'.
  In this way, I prepared to be with you, like eating jam by opening the text with the other text, like a spoon.
  First, I wrote, 'I like you'.
 I prepared to write an argument as a single chain of reasons, so that each reason had no more than one reason attached to it above it.
  I did this by connecting two uses for an action together.
  First, I wrote the first use for 'I paid for the jam,' 'I opened the jar of jam with the spoon'.
  Second, I wrote the second use, 'I tasted the jam using my spatula'.
  Third, I connected these two uses together to be 'I ate the jam with the spoon'.
  In this way, I prepared to write an argument as a single chain of reasons, so that each reason had no more than one reason attached to it above it by connecting two uses for an action together.
 I prepared to tell the tale.
  I did this by transforming 'I am the best' into 'I am' with 'therefore,' in literature.
  First, I wrote 'I am the best'.
  Second, I wrote 'I am'.
  Third, I wrote 'I am the best, therefore I am' because I survived.
  In this way, I prepared to tell the tale by transforming 'I am the best' into 'I am' with 'therefore,' in literature.
 I prepared to teach the child medicine.
  I did this by collecting the way's text to metaphysically open a child's life's text.
  First, I wrote from a single 80-breasonings-long A to 50 250-breasonings-long pedagogical argument.
  Second, I breasoned out each object's X, Y and Z dimensions in each sentence of the argument.
  Third, I listened to the news about the child being conceived and observed her being born.
  In this way, I prepared to teach the child medicine by collecting the way's text to metaphysically open a child's life's text.
["Green, L 2021, <i>Intertextuality 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Intertextuality 3 of 4
 I prepared to keep my mind and body active.
  I did this by collecting the way's text to metaphysically keep my life's text open by supporting it.
  First, I wrote from a single 80-breasonings-long A to 50 250-breasonings-long pedagogical argument.
  Second, I breasoned out each object's X, Y and Z dimensions in each sentence of the argument.
  Third, I supported myself living.
  First, I prepared to keep my mind and body active by collecting the way's text to metaphysically keep my life's text open by supporting it.
 I prepared to wear appropriate clothing to prevent being subject to terrorism (e.
 walk in a straight line).
  I did this by verifying that the shirt's text matched the text about what I should wear.
  First, I aimed to walk in the house.
  Second, I wrote that I should wear a shirt to walk in the house.
  Third, I wore the shirt.
  In this way, I prepared to wear appropriate clothing to prevent being subject to terrorism (e.
 walk in a straight line) by verifying that the shirt's text matched the text about what I should wear.
 I prepared to serve the peaches and cream.
  I did this by treating the child (who had a text) to the liquefied prune (which had a text).
  First, I asked her to eat the liquefied prune.
  Second, I spooned them into the consenting child's mouth.
  Third, I asked her to swallow it.
  In this way, I prepared to serve the peaches and cream by treating the child (who had a text) to the liquefied prune (which had a text).
 I prepared to turn the key to raise the model sun.
  I did this by verifying the text was clear using a style guide.
  First, I verified that the first sentence referred to an object.
  Second, I prepared to verify that the next sentence referred to an object that was connected to an object previously referred to in the paragraph.
  Third, I repeated this until I had verified that each sentence referred to an object that was connected to an object previously referred to in the paragraph, where a system is a set of joined objects in each paragraph.
  In this way, I prepared to turn the key to raise the model sun by verifying the text was clear using a style guide.
 I prepared to flip the argument vertically as part of the lower half of the Computational English diamond.
  I did this by verifying the reasoning was correct using a reasoning guide.
  First, I verified the first reasoning, e.
  Second, I prepared to verify the second reasoning, e.
  Third, I repeated this until I had verified each reasoning, e.
  In this way, I prepared to flip the argument vertically as part of the lower half of the Computational English diamond by verifying the reasoning was correct using a reasoning guide.
 I prepared to be myself.
  I did this by verifying the raison d'etre (reason to be) was correct using a raison d'etre guide.
  First, I verified that the first grammar was correct, and so should be part of my being.
  Second, I prepared to verify that the second grammar was correct, and so should be part of my being.
  Third, I repeated this until I had verified that each grammar was correct, and so should be part of my being.
  In this way, I prepared to be myself by verifying the raison d'etre (reason to be) was correct using a raison d'etre guide.
 I prepared to present the pot, representing having had enough exercise.
  I did this by writing that ^ (and) symbolized placing a new counter in the pot.
  First, I placed a counter in the pot.
  Second, I prepared to place another counter in the pot, where 'I placed a counter in the pot' and 'I placed another counter in the pot' were in conjunction.
  Third, I repeated this until I had placed all the counters in the pot, where all the statements that I had placed a counter in the pot were in conjunction.
  In this way, I prepared to present the pot, representing having had enough exercise by writing that ^ (and) symbolized placing a new counter in the pot.
 I prepared to present the group of pots, one of which represented an athlete in the group having had enough preparation to win.
  I did this by writing that v (or) symbolized placing a pot on the table.
  First, I placed a pot on the table.
  Second, I prepared to place another pot on the table, where 'I placed a pot on the table' and 'I placed another pot on the table' were in disjunction.
  Third, I repeated this until I had placed all the pots on the table, where all the statements that I had placed a pot on the table were in disjunction.
  In this way, I prepared to present the group of pots, one of which represented an athlete in the group having had enough preparation to win by writing that v (or) symbolized placing a pot on the table.
 I prepared to measure the distance between the self and the other.
  I did this by representing the self/other pair at points along the X axis.
  First, I observed that the self was positioned at (1, 0, 0) (in metres).
  Second, I observed that the other was positioned at (2, 0, 0) (in metres).
  Third, given that the Y and Z values of the positions of the self and other, respectively, were equal to 0, I determined that the self and other were positioned at different points along the X axis.
  In this way, I prepared to measure the distance between the self and the other by representing the self/other pair at points along the X axis.
 I prepared to measure the distance and time between the person's positions and the times at those positions, respectively.
  I did this by representing two points in space along the Y axis.
  First, I observed that the person was positioned at (0, 1, 0) (in metres) at time = 1 second.
  Second, I observed that the person was positioned at (0, 2, 0) (in metres) at time = 2 seconds.
  Third, given that the X and Z values of the positions of the person were equal to 0 at 1 and 2 seconds, I determined that the person was positioned at different points along the Y axis at different points in time.
  In this way, I prepared to measure the distance and time between the person's positions and the times at those positions, respectively by representing two points in space along the Y axis.
["Green, L 2021, <i>Intertextuality 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Intertextuality 4 of 4
 I prepared to measure the distance between the positions in space of Sam and Tony.
  I did this by representing the positions of Sam and Tony in space along the Z axis.
  First, I observed that Sam was positioned at (0, 0, 1) (in metres).
  Second, I observed that Tony was positioned at (0, 0, 2) (in metres).
  Third, given that the X and Y values of the positions of Sam and Tony were equal to 0, I determined that Sam and Tony were positioned at different points in space on the Z axis.
  In this way, I prepared to measure the distance between the positions in space of Sam and Tony by representing the positions of Sam and Tony in space along the Z axis.
 I prepared to connect two texts with a single object.
  I did this by breasoning out (thinking of the X, Y and Z dimensions) of the best set of objects connecting actions from two texts.
  First, I wrote the first text.
  Second, I wrote the second text.
  Third, I wrote the fastest object connecting the last object tin the first text to the first object in the second text.
  In this way, I prepared to connect two texts with a single object by breasoning out (thinking of the X, Y and Z dimensions) of the best set of objects connecting actions from two texts.
   I prepared to receive returns for providing a service.
  I did this by providing breasonings currency services, etc.
  First, I provided pedagogy service.
  Second, I provided medicine service.
  Third, I provided meditation service.
  In this way, I prepared to receive returns for providing a service by providing breasonings currency services, etc.
   I prepared to safely verify intertextual connections.
  I did this by following safety guidelines to avoid thinking about breasonings currency at unsafe times to do so.
  First, I followed safety guidelines in not thinking about breasonings currency when driving.
  Second, I followed safety guidelines in not thinking about breasonings currency when reading codes in public.
 Third, I ran the appropriate breasonings currency computer program.
  In this way, I prepared to safely verify intertextual connections by following safety guidelines to avoid thinking about breasonings currency at unsafe times to do so.
   I prepared to do one task at a time.
  I did this by surpassing breasonings currency.
  First, I worked on the breasonings currency before the time.
  Second, I put them away at the time.
  Third, I worked on the current task.
  In this way, I prepared to do one task at a time by surpassing breasonings currency.
   I prepared to bracket the connection between the breasonings currency and my job.
  I did this by subordinating breasonings currency in memory, not thinking of it.
  First, I thought of the breasonings currency.
  Second, I thought of it's x, y and z dimensions and the fact that it had no other content.
  Third, I focused only on my job.
  In this way, I prepared to bracket the connection between the breasonings currency and my job by subordinating breasonings currency in memory, not thinking of it.
   I prepared to connect the breasonings currency and the product.
  I did this by stating that the government tennis tournament prize was breasonings currency.
  First, I observed the player win the tournament.
  Second, I handed him the token for the transferred breasonings currency.
  Third, I observed him spend the money on the product.
  In this way, I prepared to connect the breasonings currency and the product by stating that the government tennis tournament prize was breasonings currency.
   I prepared to store the pointers to the breasonings currency in the bank, with no pointers to it (only online banking).
  I did this by stating that the community provided the breasonings currency prize.
  First, I stated that one person could write many breasonings currencies.
  Second, I stated that one person could also receive many breasonings currencies.
  Third, I observed them being tallied and transferred to the recipient's account.
  In this way, I prepared to store the pointers to the breasonings currency in the bank, with no pointers to it (only online banking) by stating that the community provided the breasonings currency prize.
   I prepared to make all breasonings currency original, and transaction-exclusive.
  I did this by writing the plagiarism detector for low cost arguments.
  First, I searched for each line in the online database.
  Second, I detected the percentage plagiarised (and the percentage of original lines).
  Third, I returned the plagiarised lines (kept the original lines).
  In this way, I prepared to make all breasonings currency original, and transaction-exclusive by writing the plagiarism detector for low cost arguments.
  I prepared to write the profit as breasonings currency.
  I did this by writing an area of study about economic considerations about the product paid for with breasonings currency.
  First, I counted the company expenses.
  Second, I calculated the revenue earned.
  Third, I calculated the profit made.
  In this way, I prepared to write the profit as breasonings currency by writing an area of study about economic considerations about the product paid for with breasonings currency.
   I prepared to guide writing to be future-oriented.
  I did this by writing economic considerations specifically for breasonings currency.
  First, I considered the fact that breasoning currency took more storage space than value-only currency.
  Second, I observed it's use by date.
  Third, I updated it.
  In this way, I prepared to guide writing to be future-oriented by writing economic considerations specifically for breasonings currency.
   I prepared to demonstrate equality in breasoning currency.
  I did this by achieving equality through the LMS (Lucianic Marking Scheme).
  First, I stated that disagreeing in the first half didn't annual thebreasonings currency.
  Second, I observed that agreement and disagreement earned the same grade, used for currency value.
  Third, I observed that objections and rebuttals were taken into account in determining whether the essay agreed or disagreed.
  In this way, I prepared to demonstrate equality in breasoning currency by achieving equality through the LMS (Lucianic Marking Scheme).
["Green, L 2021, <i>Kolmogorov Hermeneutics 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Kolmogorov Hermeneutics 1 of 4
 Determine properties of a narrative in terms of its file length.
The first technique can simulate 'Kolmogorov-type' writing of programs to interpret texts.
Once texts have been interpreted (using hierarchies of arguments with the text as the child nodes and the main conclusion as the root) interpretations of other texts can be merged with it enabling it to be applied to different texts in the future.
 For example, synonyms can be added for words in a sentence to create possible new interpretations.
 Also, sentences with new grammars (synogrammars) can be added in disjunction to sentences.
     I and a peer-reviewer prepared to double-blindly (which, in humanities, means to assess the object the sentences without knowing the subjects of the sentences) verify the best interpretation of the author.
  I did this by interpreting the author.
  First, I wrote down the first interpretation of what the author wrote.
  Second, I wrote down the second interpretation of what the author wrote.
  Third, I chose the best interpretation of what the author wrote.
  In this way, I and a peer-reviewer prepared to double-blindly (which, in humanities, means to assess the object the sentences without knowing the subjects of the sentences) verify the best interpretation of the author by interpreting the author.
    I prepared to fulfill the editorial criterion.
  I did this by writing for the reader.
  First, I investigated the demographic property.
  Second, I scintillated the demographic property.
  Third, I verified this with a professor.
  In this way, I prepared to fulfill the editorial criterion by writing for the reader.
     I prepared to write about psychology, sociology and medicine.
  I did this by writing about hermeneutics.
  First, I wrote down ideas about interpretation.
  Second, I prepared to write down ideas about the next level of interpretation.
  Third, I repeated this until I had written down ideas about each level of interpretation.
  In this way, I prepared to write about psychology, sociology and medicine by writing about hermeneutics.
    I prepared to be promoted.
  I did this by employing an employee.
  First, I wrote down what the employee wanted.
  Second, I wrote down what the employee liked.
  Third, I gave it to him.
  In this way, I prepared to be promoted by employing an employee.
    I prepared to ascertain that the parents of a child told their child their stories.
  I did this by working out that the parents' stories determined the length in syllables of their child's name.
  First, I worked out that the parents' first story determined their child's name's first syllable.
  Second, I prepared to work out that the parents' next story determined their child's name's next syllable.
  Third, I repeated this until I had worked out that each of the parents' stories determined each syllable of their child's name.
  In this way, I prepared to ascertain that the parents of a child told their child their stories by working out that the parents' stories determined the length in syllables of their child's name.
    I prepared to recognise the child being free.
  I did this by recording the child's story.
  First, I recorded the child's primary school years.
  Second, I recorded the child's secondary school years.
  Third, I recorded the child's adult life.
  In this way, I prepared to recognise the child being free by recording the child's story.
    I prepared to increase the longevity of the household.
  I did this by inserting the mineral dispenser inside the water tap.
  First, I unscrewed the tap halves.
  Second, I inserted the mineral dispenser in the tap.
  Third, I screwed the tap halves together.
  In this way, I prepared to increase the longevity of the household by inserting the mineral dispenser inside the water tap.
    I prepared to comment on an independent secondary school student.
  I did this by observing the employees.
  First, I met him at work.
  Second, I observed him at regular intervals.
  Third, I signed him out at the end of his shift.
  In this way, I prepared to comment on an independent secondary school student by observing the employees.
     I prepared to dash on stage and exclaim, 'I lead you'.
  I did this by writing the philosophy that there are three parts of everything.
  First, I adorned the stage.
  Second, I drew the Setting.
  Third, I observed the audience.
  In this way, I prepared to dash on stage and exclaim, 'I lead you' by writing the philosophy that there are three parts of everything.
   I prepared to read the magic (pedagogy) story book.
  I did this by writing the philosophy that there are three parts of an object.
  First, I probed the surface.
  Second, I dug into the mantle.
  Third, I hypothesised about the core.
  In this way, I prepared to read the magic (pedagogy) story book by writing the philosophy that there are three parts of an object.
["Green, L 2021, <i>Kolmogorov Hermeneutics 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Kolmogorov Hermeneutics 2 of 4
    I prepared to test a philosophy over time.
  I did this by writing the philosophy that there are three parts of a philosophy.
  First, I read the introduction to Melchior.
  Second, I enjoyed the mid-section on the set of Excelsior.
  Third, I mercurially concluded the endgame.
  In this way, I prepared to test a philosophy over time by writing the philosophy that there are three parts of a philosophy.
   I prepared to connect famous texts together.
  I did this by writing the philosophy that there are three parts of a text.
  First, I wrote about the sublime.
  Second, I wrote about humanist pedagogy.
  Third, I wrote about difference.
  In this way, I prepared to connect famous texts together by writing the philosophy that there are three parts of a text.
    I prepared to teach Lucianic Meditation (in fact, Lucianic Philosophy).
  I did this by writing a Lucianic Meditation degree (in fact, Lucianic Philosophy degree)  First, I wrote the Lucianic Meditation philosophy (in fact, Lucianic Philosophy).
  Second, I wrote the uses for the Lucianic Meditation technique (in fact, Lucianic Philosophy).
  Third, I wrote the Lucianic Meditation utterance (in fact, Lucianic Philosophy) texts.
  In this way, I prepared to teach Lucianic Meditation (in fact, Lucianic Philosophy) by writing a Lucianic Meditation (in fact, Lucianic Philosophy) degree.
   I prepared to use money to teach Lucianic Meditation (in fact, Lucianic Philosophy).
  I did this by gathering money to teach Lucianic Meditation (in fact, Lucianic Philosophy).
  First, I wrote the prospectus.
  Second, I held the opening.
  Third, I followed up with the potential sponsors.
  In this way, I prepared to use money to teach Lucianic Meditation (in fact, Lucianic Philosophy) by gathering money to teach Lucianic Meditation (in fact, Lucianic Philosophy).
   I prepared to accredit my Lucianic Philosophy degree.
  I did this by using money to teach Lucianic Meditation (in fact, Lucianic Philosophy).
  First, I paid the monthly bank fee.
  Second, I paid the volunteer insurance fee.
  Third, I paid to hire the centre.
  In this way, I prepared to accredit my Lucianic Philosophy degree by using money to teach Lucianic Meditation (in fact, Lucianic Philosophy).
   I prepared to accrue enough students to accredit the Academy.
  I did this by operating the Lucianic Meditation (in fact, Lucianic Philosophy) Academy.
  First, I taught the classes.
  Second, I marked the students' work.
  Third, I took the money.
  In this way, I prepared to accrue enough students to accredit the Academy by operating the Lucianic Meditation (in fact, Lucianic Philosophy) Academy.
   I prepared to reward a prize to the student who answered the training questions with the most unusual answers.
  I did this by training the teachers in Lucianic Meditation (in fact, Lucianic Philosophy).
  First, I assessed the possible teachers in Human Resources.
  Second, I trained the teachers in Lucianic Philosophy.
  Third, I trained the teachers in Job Requirements and Safety.
  In this way, I prepared to reward a prize to the student who answered the training questions with the most unusual answers by training the teachers in Lucianic Meditation (in fact, Lucianic Philosophy).
   I prepared to train meditation centre (philosophy centre) managers.
  I did this by training Lucianic Meditation students (Lucianic Philosophy students) in appearances of God (master).
  First, I explained the master would appear when an employee was protected from work requirements (given an A for the work requirements).
  Second, I explained the master would appear when the meditator retained good health (given an A for good health).
  Third, I explained the master would appear when a student was helped to perform well on an exam.
 (given an A to perform well on an exam).
  In this way, I prepared to train meditation centre (philosophy centre) managers by training Lucianic Meditation students (Lucianic Philosophy students) in appearances of God (master).
    I prepared to graduate the student.
  I did this by accrediting 'A' with 20 mantras/student/day (1 A given as a reply to each A).
  First, I set the task.
  Second, I assessed the task.
  Third, I gave feedback to the student.
  In this way, I prepared to graduate the student by accrediting 'A' with 20 mantras/student/day (1 A given as a reply to each A).
  I prepared to reach out for the teacher's help when I had finished.
  I (a vocational education and training, or VET student) represented my skills by progressing from the start of the conclusion.
  First, I gave the conclusion.
  Second, I watched her progress from the start of the conclusion.
  Third, I watched her finish the conclusion.
  In this way, I prepared to reach out for the teacher's help when I had finished.
  I represented my skills by progressing from the start of the conclusion.
["Green, L 2021, <i>Kolmogorov Hermeneutics 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Kolmogorov Hermeneutics 3 of 4
   I prepared to breason out the seen-as object, for each sentence of a VET course I wrote, with 5 breasonings.
  I did this by writing 20 breasonings (an 80 breasoning-long A) per sentence.
  First, I wrote the question's A.
  Second, I wrote the answer's A.
  Third, I wrote a connection A between the question A and answer A.
  In this way, I prepared to breason out the seen-as object, for each sentence of a VET course I wrote, with 5 breasonings by writing 20 breasonings (an 80 breasoning-long A) per sentence.
   I prepared to use the symbols.
  I did this by defining the symbols I used.
  First, I wrote down the heart symbol.
  Second, I wrote down the definition 'A'.
  Third, I labeled the table 'Symbols Used'.
  In this way, I prepared to use the symbols by defining the symbols I used.
   I prepared to teach the students face-to-face at the start of the course.
  I did this by teaching Lucianic Meditation (Lucianic Philosophy) online.
  First, I typographed the Book of Readings and Assessment Book.
  Second, I advertised the course.
  Third, I emailed the Books and the due date for all assessments to the student.
  In this way, I prepared to teach the students face-to-face at the start of the course by teaching Lucianic Meditation (Lucianic Philosophy) online.
   I prepared to instruct the students how to retrieve the A.
  I did this by uploading A to the system.
  First, I researched the A.
  Second, I wrote the A.
  Third, I uploaded the A.
  In this way, I prepared to instruct the students how to retrieve the A by uploading A to the system.
  I prepared to access the A on the system.
  I did this by writing a 10-breasoning-long sequence (80-breasoning-long A).
  First, I wrote the A.
  Second, I gave it to the teacher.
  Third, he gave me a love-of-wisdom letter as a reply.
  In this way, I prepared to access the A on the system by writing a 10-breasoning-long sequence (80-breasoning-long A).
   I prepared to achieve my goal of kicking a goal.
  A retired teacher who was church going (philosophy reading) practised meditation of the same standard as Buddhism, Transcendental Meditation and Lucianic Meditation (MSSBTL) (read a philosophy book).
  First, I learnt meditation (Philosophy of Art) from a MSSBTL (appropriate) teacher.
  Second, I meditated using 50 Breasonings per Utterances by repeating 50 sets of 5 breasonings, where the 5 breasonings were permeate in 5 seconds (breasoned out an A in my own time).
  Third, I practised meditation (read literature) each day.
  In this way, I prepared to achieve my goal of kicking a goal as a retired teacher who was church going (philosophy reading) by practising meditation of the same standard as Buddhism, Transcendental Meditation and Lucianic Meditation (MSSBTL) (read a philosophy book).
   I prepared to spread peace and happiness throughout the world.
  I did this by planning the tour of Lord (philosopher) Lucian.
  First, I applied for government tour grants.
  Second, I applied for funding from philanthropists.
  Third, I taught meditation to the public.
  In this way, I prepared to spread peace and happiness throughout the world by planning the tour of Lord (philosopher) Lucian.
   I prepared to open a centre in each city.
  I did this by applying for government tour grants by preparing for funding meetings by breasoning out 5 As, followed by 45 As in terms of brain sacrifices (Aigs, which are sets of As on systems, in fact, an A).
  First, I wrote my aim.
  Second, I wrote my reasons.
  Third, I wrote a list of my supporters.
  In this way, I prepared to open a centre in each city by applying for government tour grants.
   I prepared to attract regional support.
  I did this by attracting philanthropists.
  First, I prepared for broadcasts by breasoning out 250 breasonings.
  Second, I wrote the prospectus of school business.
  Third, I compiled the education materials.
  In this way, I prepared to attract regional support by attracting philanthropists.
   I prepared to encourage meditators' friends to come to the centre to learn meditation.
  I did this by teaching meditation in public by breasoning out 5 As.
  First, I said the mantra.
  Second, I told the audience members to repeat the mantra for 20 minutes twice per day silently in their heads.
  Third, I said this would cultivate and remove thoughts from their minds, help their thoughts become more and more cultivated and surpass their thoughts.
  In this way, I prepared to encourage meditators' friends to come to the centre to learn meditation by teaching meditation in public by breasoning out 5 As.
["Green, L 2021, <i>Kolmogorov Hermeneutics 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Kolmogorov Hermeneutics 4 of 4
    I prepared to state that each family was pedagogically protected.
  I did this by determining that the head of state appointed 1/4 as pedagogues.
  First, I wrote marketing materials.
  Second, I sourced financial support.
  Third, I taught the pedagogy students in-person.
  In this way, I prepared to state that each family was pedagogically protected by determining that the head of state appointed 1/4 as pedagogues.
   I prepared to state that each extended family was meditationally protected.
  I did this by determining that the head of state appointed 1/8 as MSSBTL meditators.
  First, I wrote marketing materials.
  Second, I sourced financial support.
  Third, I taught the pedagogy students in-person.
  In this way, I prepared to state that each extended family was meditationally protected by determining that the head of state appointed 1/8 as MSSBTL meditators.
["Green, L 2021, <i>Lenses 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Lenses 1 of 4
 The relation between content and the lenses used to see it among different areas of study is likely to be of interest in the future.
 Psychological research into cultural phenomena, for example the type Shakespeare is based on may function to query real life scenarios similar to those in plays, used to critically examine the plot of plays using mathematical modelling and prediction, and graph findings using psychologically attuned representations such as timelines, character interrelationships or language analysis.
     I prepared to examine the setting.
  I did this by looking through the lens.
  First, I stood behind the lens.
  Second, I aligned the centre of my eye with the centre of the lens.
  Third, I looked through the lens.
  In this way, I prepared to examine the setting by looking through the lens.
    I prepared to be immortal (sustain a company's life).
  I did this by writing a business model that made me famous after my life.
  First, I produced products.
  Second, I made sure that each customer kept coming back to buy each new product.
  Third, I made sure that this repeated after my life.
  In this way, I prepared to be immortal (sustain a company's life) by writing a business model that made me famous after my life.
     I prepared to protect people in a state.
  I did this by observing the King (community leader) setting up the church (meditation centre system, philosophy school system).
  First, I produced a meditation (philosophy) product.
  Second, I employed a centre manager.
  Third, I opened the centres where I had visited.
  In this way, I prepared to protect people in a state by observing the King (community leader) setting up the church (meditation centre system, philosophy school system).
    I prepared to see the continuance of the religion through the ages.
  I did this by breasoning out 1 A per day to keep LM alive.
  First, I appointed a time to breason out an A each day.
  Second, I breasoned out an A each day.
  Third, I arranged for an employee to do this in my absence.
  In this way, I prepared to see the continuance of the religion through the ages by breasoning out 1 A per day to keep LM alive.
    I prepared to spread meditation (schools) through the state.
  I did this by setting up a meditation centre with group meditation (class) twice per week.
  First, I set up a centre.
  Second, I held group meditation (class) on the first day.
  Second, I held group meditation (class) on the second day.
  In this way, I prepared to spread meditation (schools) through the state by setting up a meditation centre with group meditation (class) twice per week.
    I prepared to achieve world peace.
  I did this by observing the centre meditating on subjects whom meditators meditated on, about not for the subjects, by giving A to each centre visitor.
  First, meditators meditated about subjects, for themselves.
  Second, the centre gave A to each centre visitor.
  Third, the centre meditated on each subject.
  In this way, I prepared to achieve world peace by observing the centre meditating on subjects whom meditators meditated on, about not for the subjects, by giving A to each centre visitor.
    I prepared to create a neurobot.
  I did this by discovering the code in science.
  First, I discovered the objects involved.
  Second, I found the ontologies concerned.
  Third, I wrote how these ontologies interrelated.
  In this way, I prepared to create a neurobot by discovering the code in science.
    I prepared to swallow the slice of apple.
  I did this by chewing the apple slice.
  First, I cut the slice of apple.
  Second, I placed the slice of apple in my mouth.
  Third, I chewed the slice of apple.
  In this way, I prepared to swallow the slice of apple by chewing the apple slice.
     I prepared to correctly determine a man's sexual orientation.
  I did this by stating the gay man didn't want the woman, whether or not she was in a man's body.
  First, I verified that the man was gay.
  Second, I verified the second person was a woman.
  Third, I verified that the man wasn't attracted to the woman.
  In this way I prepared to correctly determine a man's sexual orientation by stating the gay man didn't want the woman, whether or not she was in a man's body.
   I prepared to read the book.
  I did this by eating the cantaloupe with the tongs.
  First, I placed the slice of cantaloupe in the bowl.
  Second, I gripped the cantaloupe with the tongs.
  Third, I ate the cantaloupe.
  In this way, I prepared to read the book by eating the cantaloupe with the tongs.
["Green, L 2021, <i>Lenses 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Lenses 2 of 4
    I prepared to found the most prestigious University.
  I did this by noting that the University's assignments were supported with 250 250 breasoning As.
  First, each student was given 50 80 breasoning As through books' breasoning lists, their own work and lecturers' help.
  Second, 16 of these students were educated in this fashion.
  Third, the students experienced each other in high quality ways.
  In this way, I prepared to found the most prestigious University by noting that the University's assignments were supported with 250 250 breasoning As.
   I prepared to walk along the path.
  I did this by critically analyzing (agreeing with) the philosophical seen-as version of God.
  First, I wrote down God's action.
  Second, I wrote down the philosophical seen-as version of God's action.
  Third, I critically analysed this philosophy.
  In this way, I prepared to walk along the path by critically analyzing (agreeing with) the philosophical seen-as version of God.
    I prepared to wear shoes.
  I did this by loving myself by giving myself a foot rub.
  First, I rubbed the soles of my feet.
  Second, I rubbed the tops of my feet.
  Third, I rubbed the sides of my feet.
  In this way, I prepared to wear shoes by loving myself by giving myself a foot rub.
   I prepared to receive your payment.
  I did this by giving you a back rub.
  First, I rubbed the top of your back.
  Second, I rubbed the middle of your back.
  Third, I rubbed the bottom of your back.
  In this way, I prepared to receive your payment by giving you a back rub.
   I prepared to exhibit my photograph.
  I did this by using the camera (product).
  First, I opened the box in the dark.
  Second, I placed photographic paper on the opposite wall from the aperture in the box in the dark.
  Third, I opened the aperture for 5 seconds to take a photograph in the light.
  In this way, I prepared to exhibit my photograph by using the camera (product).
   I prepared to report a survey of diverse sexualities.
  I did this by noting that people with different sexualities had similar outward physical characteristics by gender.
  First, I noted the gay womens' appearances.
  Second, I noted the straight womens' appearances.
  Third, I concluded they were similar.
  In this way, I prepared to report a survey of diverse sexualities by noting that people with different sexualities had similar outward physical characteristics by gender.
   I prepared to make sure As existed.
  I did this by breasoning out (visualising the X, Y and Z dimensions of) the following A's objects for meditation (philosophy) for me about my meditation (philosophy) list members.
  First, I dotted on the A.
  Second, I breasoned out the following A's objects: apple (1, 1, 1 cm), apple (2, 2, 2 cm), apple (3, 3, 3 cm), apple (1.
5 cm), apple (2.
5 cm), apple (3, 3, 3 cm), apple (4, 4, 4 cm), apple (5, 5, 5 cm), apple (1.
5 cm) and apple (2.
  Third, I took off the dot for the A.
  In this way, I prepared to make sure As existed by breasoning out (visualising the X, Y and Z dimensions of) the following A's objects for meditation (philosophy) for me about my meditation (philosophy) list members.
   I prepared to experience marital bliss.
  I did this by breasoning out a 10 breasoning A each day for my relationship with my partner.
  First, I breasoned out his ball.
  Second, I breasoned out his rod.
  Third, I breasoned out his face.
  In this way, I prepared to experience marital bliss by breasoning out a 10 breasoning A each day for my relationship with my partner.
    I prepared to experience bliss on Earth.
  I did this by breasoning out a 10 breasoning A each day for people who I met to experience 20 breasonings (12.
  First, I taught them meditation (philosophy).
  Second, I taught them yoga.
  Third, I taught them yoga.
  I prepared to avoid a headache and death (be happy).
  I did this by breasoning out a 10 breasoning A each day for a recursive 'It's you' to be said everyone, their contacts, etcetera, to meditate.
  First, I posted the letter to each person's family members.
  Second, I posted the letter to each person's friends.
  Third, I repeatedly posted the letter to family and friends of family and friends.
  In this way, I prepared to avoid a headache and death (be happy) by breasoning out a 10 breasoning A each day for a recursive 'It's you' to be said everyone, their contacts, etcetera, to meditate.
["Green, L 2021, <i>Lenses 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Lenses 3 of 4
   I prepared to keep the religion alive.
  I did this by breasoning out a 10 breasoning A each day for anyone who indicated meditation (societology) on that day.
  First, I asked all my students whether they had meditated (read a societology book).
  Second, they asked all their students whether their students had meditated (read a societology book).
  Third, they repeated this until everyone had been given an A for meditation (read a page about societology).
  In this way, I prepared to keep the religion alive by breasoning out a 10 breasoning A each day for anyone who indicated meditation (societology) on that day.
   I prepared to watch the parade on television.
  I did this by letting the rows of citizens go past.
  First, I let the first row of citizens go past.
  Second, I prepared to let the next row of citizens go past.
  Third, I repeated this until all the rows of citizens had gone past.
  In this way, I prepared to watch the parade on television by letting the rows of citizens go past.
   I prepared to record the smell.
  I did this by smelling the floret unit.
  First, I positioned the floret under my nose.
  Second, I inhaled.
  Third, I smelt the floret.
  In this way, I prepared to record the smell by smelling the floret unit.
   I prepared to protect the bird and his family.
  I did this by preventing a nest being made, where the dog would have eaten the empty nest's contents.
  First, I found the nest in the flow tree.
  Second, I destroyed the nest.
  Third, I let the dog in the back garden.
  In this way, I prepared to protect the bird and his family by preventing a nest being made, where the dog would have eaten the empty nest's contents.
  I prepared to sustain peace.
  I did this by communicating using the 'telegraph' pole.
  First, I placed telegraph poles along the path the message was required to be passed along.
  Second, I threaded wire along the row of telegraph poles.
  Third, I communicated a message in the form of a signal along the wire from me 9the sender) to my receiver.
  In this way, I prepared to sustain peace by communicating using the 'telegraph' pole.
   I prepared to upgrade the technology.
  I did this by stably installing the telegraph pole.
  First, I wrapped the wire in an insulator.
  Second, I dug a hole.
  Third, I installed the telegraph hole in the hole with the wire attached to the top of the pole.
  In this way, I prepared to upgrade the technology by stably installing the telegraph pole.
   I prepared to perform the operation.
  I did this by sterilising the instruments.
  First, I placed them in the medium.
  Second, I started the timer.
  Third, I removed them from the medium after the time was up.
  In this way, I prepared to perform the operation by sterilising the instruments.
   I prepared to help the man's sight back.
  I did this by removing the glaucoma from the eye.
  First, I prepared for the operation.
  Second, I performed the operation.
  Third, I finished the operation.
  In this way, I prepared to help the man's sight back by removing the glaucoma from the eye.
   I prepared to absorb the blood.
  I did this by placing a sponge during the operation.
  First, I saw where there was blood.
  Second, I placed the sponge there.
  Third, I recorded the sponge number and location.
  In this way, I prepared to absorb the blood by placing a sponge during the operation.
   I prepared to examine the specimen.
  I did this by placing the specimen in the receptacle.
  First, I gripped the testicle.
  Second, I pulled it off.
  Third, I placed it in the receptacle.
  In this way, I prepared to examine the specimen by placing the specimen in the receptacle.
["Green, L 2021, <i>Lenses 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Lenses 4 of 4
    I prepared to read lines into my act.
  I did this by throwing away the contents of the receptacle.
  First, I signed up to receive the company members' names.
  Second, I rang them up.
  Third, I wrote down details about them.
  In this way, I prepared to read lines into my act by throwing away the contents of the receptacle.
   I prepared to walk into the waiting room.
  I did this by exiting the surgery.
  First, I found the door.
  Second, I opened it.
  Third, I walked through the doorway.
  In this way, I prepared to walk into the waiting room by exiting the surgery.
["Green, L 2021, <i>Narratology Diagram 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Narratology Diagram 1 of 4
 The diagram in Conglish Reflection allows the interesting nature to be made explicit.
     I prepared to eat the apple.
  I did this by picking the apple.
  First, I reached the top of the ladder.
  Second, I reached for the apple.
  Third, I picked the apple.
  In this way, I prepared to eat the apple by picking the apple.
    I prepared to serve dessert.
  I did this by eating the pear.
  First, I cut the pear in half lengthways twice.
  Second, I lifted the slice of pear to my mouth.
  Third, I delected myself with the pear slice.
  In this way, I prepared to serve dessert by eating the pear.
     I prepared to win the fruit show.
  I did this by showing the quince.
  First, I picked the quince.
  Second, I washed the quince.
  Third, I showed the quince.
  In this way, I prepared to win the fruit show by showing the quince.
    I prepared to roll on home.
  I did this by being interested in the rope.
  First, I walked to the rope.
  Second, I found it.
  Third, I twisted it in a ball.
  In this way, I prepared to roll on home by being interested in the rope.
    I prepared to use the money.
  I did this by betting that the horse would win.
  First, I looked up the odds that the horse would win.
  Second, I bet two pounds that the horse would win.
  Third, I observed the horse win.
  In this way, I prepared to use the money by betting that the horse would win.
    I prepared to eat the cream.
  I did this by eating the strawberry.
  First, I held the strawberry.
  Second, I placed it on my tongue.
  Third, I ate it.
  In this way, I prepared to eat the cream by eating the strawberry.
    I prepared to give the speech.
  I did this by stepping onto the philosophy stage.
  First, I walked to the bottom of the philosophy stage.
  Second, I walked up the stairs.
  Third, I stepped onto the philosophy stage.
  In this way, I prepared to give the speech by stepping onto the philosophy stage.
    I prepared to eat the tomato sauce.
  I did this by eating the vegan hamburger.
  First, I ate the soy patty.
  Second, ate the olive.
  Third, I ate the pickle.
  In this way, I prepared to eat the tomato sauce by eating the vegan hamburger.
     I prepared to prune the tree.
  I did this by removing unnecessary leaves.
  First, I found the first unnecessary leaf.
  Second, I prepared to find the next unnecessary leaf.
  Third, I repeated this until I had removed all the unnecessary leaves.
  In this way, I prepared to prune the tree by removing unnecessary leaves.
   I prepared to drink the water.
  I did this by breasoning out preening.
  First, I found the dishevelled feather.
  Second, I smoothed it.
  Third, I repeated this until preened.
  In this way, I prepared to drink the water by breasoning out preening.
["Green, L 2021, <i>Narratology Diagram 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Narratology Diagram 2 of 4
    I prepared to teach meditation daily.
  I did this by developing my own meditation system.
  First, I thought of the necessary systems.
  Second, I thought of the necessary thoughts in each system.
  Third, I breasoned out arguments for each system.
  In this way, I prepared to teach meditation daily by developing my own meditation system.
   I prepared to teach.
  I did this by developing my own pedagogy system.
  First, I thought of the necessary system.
  Second, I thought of the necessary thoughts in that system.
  Third, I breasoned out arguments for these thoughts.
  In this way, I prepared to teach by developing my own pedagogy system.
    I prepared to help you be successful in life.
  I did this by advising you to learn to meditate.
  First, I taught you meditation.
  Second, I recommended that you meditate each day.
  Third, you meditated each day.
  In this way, I prepared to help you be successful in life by advising you to learn to meditate.
   I prepared to increase police presence in the area with a higher crime rate.
  I did this by observing that society had a lower crime rate.
  First, I observed the total number of crimes in the society where I was.
  Second, I observed the total number of crimes in another society.
  Third, I observed that my society had a lower crime rate than another society.
  In this way, I prepared to increase police presence in the area with a higher crime rate by observing that society had a lower crime rate.
   I prepared to achieve my goal.
  I did this by driving the car.
  First, I opened the car door.
  Second, I started the car.
  Third, I drove to my destination.
  In this way, I prepared to achieve my goal by driving the car.
   I prepared to work on my child's marks.
  I did this by bearing an in-vitro fertilised baby.
  First, I inserted the sperm into the egg.
  Second, I inserted the egg into the uterus.
  Third, I bore the baby.
  In this way, I prepared to work on my child's marks by bearing an in-vitro fertilised baby.
   I, a philosopher, prepared to survive in the industry.
  I did this by writing an essay.
  First, I wrote the exposition.
  Second, I wrote the critique.
  Third, I added introduction and conclusion paragraphs to the start and end of the essay, respectively.
  In this way, I, a philosopher, prepared to survive in the industry by writing an essay.
   The prisoner prepared to die in custody.
  She did this by meditating (writing) on positive functionalism.
  First, I wrote about being.
  Second, I wrote what was 'to' this being.
  Third, I wrote a reason for this.
  In this way, the prisoner prepared to die in custody by meditating (writing) on positive functionalism.
    I prepared to survive on the land.
  I did this by holding the gum nut doll.
  First, I found a gum nut.
  Second, I pinned a small fabric dress to it.
  Third, I held it.
  In this way, I prepared to survive on the land by holding the gum nut doll.
  I prepared to use an item.
  I did this by stating that the present part of the verb was represented by 'is looking'.
  First, I looked in the past.
  Second I looked now.
  Third, I prepared to look in the future.
  In this way, I prepared to use an item by stating that the present part of the verb was represented by 'is looking'.
["Green, L 2021, <i>Narratology Diagram 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Narratology Diagram 3 of 4
   I prepared to attend an event.
  I did this by stating that the imperfect part of the verb was represented by 'was going'.
  First, I wrote that I had gone.
  Second, I wrote that I am going, to another person.
  Third, I noticed that these meaning converged.
  In this way, I prepared to attend an event by stating that the imperfect part of the verb was represented by 'was going'.
   I prepared to observe the porter return with the suitcases.
  I did this by stating that the imperative part of the verb was represented by 'Walk down the hall'.
  First, I verified the command.
  Second, I found the porter.
  Third, I commanded the porter to walk down the hall.
  In this way, I prepared to observe the porter return with the suitcases by stating that the imperative part of the verb was represented by 'Walk down the hall'.
   I prepared to eat a pear with you.
  I did this by stating that the optative part of the verb was represented by 'May you have the pear'.
  First, I found the pear.
  Second, I found you.
  Third, I said, 'May you have the pear'.
  In this way, I prepared to eat a pear with you by stating that the optative part of the verb was represented by 'May you have the pear'.
   I prepared to dictate the report's contents.
  I did this by stating that the aorist part of the verb reported action as a completed whole, and was represented by 'Allan played the tennis match'.
  First, I recorded the tennis match.
  Second, I found the reporter.
  Third, I reported that Allan played the tennis match to the reporter.
  In this way, I prepared to dictate the report's contents by stating that the aorist part of the verb reported action as a completed whole, and was represented by 'Allan played the tennis match'.
  I prepared to discuss the newspaper article's contents.
  I did this by stating that the perfect part of the verb was represented by 'He read from the paper'.
  First, he found the paper.
  Second, he found the newspaper column.
  Third, he read from the column.
  In this way, I prepared to discuss the newspaper article's contents by stating that the perfect part of the verb was represented by 'He read from the paper'.
   I prepared to become a lecturer.
  I did this by stating that the future part of the verb was represented by 'He will design the philosophy materials'.
  First, I found the philosophy to write materials about.
  Second, I scheduled a date to write them.
  Third, I planned the philosophy materials.
  In this way, I prepared to become a lecturer by stating that the future part of the verb was represented by 'He will design the philosophy materials'.
   I prepared to sell the apple.
  I did this by stating that the passive part of the verb was represented by 'An apple was eaten by Susan'.
  First, I observed Susan eat the apple.
  Second, I wrote the poem.
  Third, I read the poem, 'An apple was eaten by Susan'.
  In this way, I prepared to sell the apple by stating that the passive part of the verb was represented by 'An apple was eaten by Susan'.
   I prepared to wear the cap.
  I did this by stating that the past participle part of the verb was represented by 'I looked at the cleaned earrings'.
  First, I cleaned the earrings.
  Second, I looked at them.
  Third, I said I looked at them.
  In this way, I prepared to wear the cap by stating that the past participle part of the verb was represented by 'I looked at the cleaned earrings'.
   I prepared to enliven the movie's communities.
  I did this by stating that the participle part of the verb was represented by 'He is reading a book'.
  First, I found him.
  Second, I observed him reading a book.
  Third, I stated that 'He is reading a book'.
  In this way, I prepared to enliven the movie's communities by stating that the participle part of the verb was represented by 'He is reading a book'.
   I prepared to listen to him rate the word.
  I did this by stating that the gerund part of the verb was represented by 'He likes reading the word'.
  First, I observed him writing the word.
  Second, I observed him reading the word.
  Third, I listened to him state that he likes reading the word.
  In this way, I prepared to listen to him rate the word by stating that the gerund part of the verb was represented by 'He likes reading the word'.
["Green, L 2021, <i>Narratology Diagram 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Narratology Diagram 4 of 4
    I prepared to make arrangements to walk home.
  I did this by stating that the infinitive part of the verb was represented by 'I agreed to walk home.
  First, my female master planned the route to my house using a map.
  Second, she asked me to walk home.
  Third, I agreed to walk home.
  In this way, I prepared to make arrangements to walk home by stating that the infinitive part of the verb was represented by 'I agreed to walk home.
   I prepared to take care of Peter's car.
  I did this by stating that the causative part of the verb was represented by 'Peter let me drive his car.
  First, I asked Peter whether I could drive his car.
  Second, Peter agreed to let me drive his car.
  Third, I drove Peters' car.
  In this way, I prepared to take care of Peter's car by stating that the causative part of the verb was represented by 'Peter let me drive his car.
How can the program cope with real variation?
 Anna: But doesn't it rely on all texts following a particular format - "]
["Green, L 2021, <i>Order in Conglish 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Order in Conglish 1 of 4
 Concerns how to determine the temporality of an event given a text.
 One of the limitations of the first technique is its 'duck-pond' quality, that is sentences to form the basis of an interpretation are chosen based on the arguments, not vice versa.
 Another problem this brings up is whether there will be exceptions to the argument made if the argument is chosen based on whether other parts of the text satisfy it.
 This can also be dealt with by using 'objections', that is if a particular sentence negates a reason, it can cause an ontology to fail and the reason to become bad.
Another limitation is the lack of checking of order of sentences from the text.
 This can be dealt with by including at its most simple, indices in sentences and rules requiring inequalities between sentences.
 1- The painter slipped on the ladder, 2- The ambulance arrived promptly.
     I prepared to order the events using the algorithm.
  I did this by drinking the glass of water.
  First, I held the glass of water.
  Second, I lifted it to my lips.
  Third, I drank from it.
  In this way, I prepared to order the events using the algorithm by drinking the glass of water.
    I prepared to collect data to order.
  I did this by recording 360 degrees of a scene.
  First, I walked to the centre of the scene.
  Second, I face the initial position.
  Third, I recorded 360 degrees of the scene.
  In this way, I prepared to collect data to order by recording 360 degrees of a scene.
     I prepared to observe the actor be with-it on recording day.
  I did this by observing the actor breasoning out the required number of As per day.
  First, I observed the extra breason out 1 A per day.
  Second, I observed the actor breason out 5 As per day.
  Third, I observed the lead actor breason out 15 As per day.
  In this way, I prepared to observe the actor be with-it on recording day by observing the actor breasoning out the required number of As per day.
    I prepared to tutor the child in addition of numbers in their tens.
  I did this by observing the priest (e.
 master) endorse life.
  First, I observed the master endorsing the start of life.
  Second, I observed the master endorsing the middle of life.
  Third, I observed the master endorsing the end of life.
  In this way, I prepared to tutor the child in addition of numbers in their tens by observing the priest (e.
 master) endorse life.
    I prepared to publish the article.
  I did this by breasoning out 250 breasonings to write the article.
  First, I wrote a total of 130 breasonings.
  Second, I wrote a total of 190 breasonings.
  Third, I wrote a total of 250 breasonings.
  In this way, I prepared to publish the article by breasoning out 250 breasonings to write the article.
    I prepared to listen to the song.
  I did this by observing the song's singer breason out 50 As.
  First, I observed the song's singer breason out the A for the first lyric's philosophy.
  Second, I prepared to observe the song's singer breason out the A for the next lyric's philosophy.
  Third, I repeated this until I had observed the song's singer breason out the As for all the lyrics' philosophies.
  In this way, I prepared to listen to the song by observing the song's singer breason out 50 As.
    I prepared to watch the production.
  I did this by observing the production's actor breason out 50 As.
  First, I observed the production's actor breason out the A for the first line's philosophy.
  Second, I prepared to observe the production's actor breason out the A for the next line's philosophy.
  Third, I repeated this until I had observed the production's actor breason out the As for all the line's philosophies.
  In this way, I prepared to watch the production by observing the production's actor breason out 50 As.
    I prepared to cast the actor in the role.
  I did this by observing an actor light up in a role.
  First, I observed the actor breason out an A.
  Second, I observed the actor write an Aig (50 As per role) to become with-it in the role.
  Third, I observed the actor light up in the role.
  In this way, I prepared to cast the actor in the role by observing an actor light up in a role.
     I prepared to be a Hollywood movie star.
  I did this by writing an Aig (50 As per role) to become with-it in an acting role.
  First, I meditated to protect my health (in fact, undertook theatre studies safety training) when writing the Aig (50 As).
  Second, I breasoned out an 80-breasoning A about an Aig before the first time I wrote an Aig.
  Third, I wrote an Aig by writing 50 As.
  In this way, I prepared to be a Hollywood movie star by writing an Aig (50 As per role) to become with-it in an acting role.
   I prepared to build an acting role.
  I did this by praying for light, warmth, colour, happiness, posterity, lightness and love to symbolise breasoning out 50 As (in fact, breasoning out 50 As).
  First, I breasoned out the first A.
  Second, I prepared to breasoned out the next A.
  Third, I repeated this until I had breasoned out 50 As.
  In this way, I prepared to build an acting role by praying for light, warmth, colour, happiness, posterity, lightness and love to symbolise breasoning out 50 As (in fact, breasoning out 50 As).
["Green, L 2021, <i>Order in Conglish 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Order in Conglish 2 of 4
    I prepared to write an Aig.
  I did this by meditating (in fact, undertaking theatre studies safety training).
  First, I studied the first theatre studies safety training subject.
  Second, I prepared to study the second theatre studies safety training subject.
  Third, I repeated this until I had studied all the theatre studies safety training subjects.
  In this way, I prepared to write an Aig by meditating (in fact, undertaking theatre studies safety training).
   I prepared to cast the singer in the role.
  I did this by observing a singer light up in a role.
  First, I observed the singer breason out an A.
  Second, I observed the singer write an Aig (50 As per role) to become with-it in the role.
  Third, I observed the singer light up in the role.
  In this way, I prepared to cast the singer in the role by observing a singer light up in a role.
    I prepared to count the lines of the Conglish (Computational English) program lines.
  I did this by writing that Conglish should be ordered.
  First, I verified the structural integrity of the port (left) half of the boat, representing the structure of the empty ontology in Conglish.
  Second, I verified the structural integrity of the starboard (right) half of the boat, representing the structure of the empty ontology in Conglish.
  Third, I verified that the boat represented that the structure of the empty ontology in Conglish was ordered.
  In this way, I prepared to count the lines of the Conglish (Computational English) program lines by writing that Conglish should be ordered.
   I prepared to order the company car by washing its window.
  I did this by pulling up the window to order Conglish.
  First, I pulled the window up the window one third of the way.
  Second, I pulled the window up the window two thirds of the way.
  Third, I pulled the window up the whole way.
  In this way, I prepared to order the company car by washing its window by pulling up the window to order Conglish.
   I prepared to order the Conglish subjects.
  I did this by observing the marriage.
  First, I observed the partner place the ring on his or her partner's finger.
  Second, I observed the couple say their vows.
  Third, I observed the couple sign the wedding register.
  In this way, I prepared to order the Conglish subjects by observing the marriage.
   I prepared to order the Conglish objects.
  I did this by observing the train station.
  First, I arrived at the train station.
  Second, I verified the name of the train station.
  Third, I disembarked form the train at the train station.
  In this way, I prepared to order the Conglish objects by observing the train station.
   I prepared to observe the students listen to feedback about the pedagogical arguments that they had written.
  I did this by writing a government humanist pedagogy policy for primary school grades four and greater.
  First, I wrote that the students should study Nietzsche at University.
  Second, I wrote that the students should study a University Education subject.
  Third, I wrote that the students should be taught the humanist pedagogy rules.
  In this way, I prepared to observe the students listen to feedback about the pedagogical arguments that they had written by writing a government humanist pedagogy policy for primary school grades four and greater.
   I prepared to observe the students research the positive effects of meditation.
  I did this by writing a government meditation policy for primary school grades prep and greater.
  First, I wrote that the students should study the meditation arguments.
  Second, I wrote that the students should study the medicine arguments.
  Third, I wrote that the students should be taught the meditation technique.
  In this way, I prepared to observe the students research the positive effects of meditation by writing a government meditation policy for primary school grades prep and greater.
    I prepared to observe the students research the positive effects of medicine.
  I did this by writing a government medicine policy for primary school grades prep and greater.
  First, I wrote that the students should study the circulatory system argument.
  Second, I wrote that the students should study the respiratory system argument.
  Third, I wrote that the students should be taught the digestive system argument.
  In this way, I prepared to observe the students research the positive effects of medicine by writing a government medicine policy for primary school grades prep and greater.
  I prepared to observe the students research the positive effects of yoga.
  I did this by writing a government yoga policy for primary school grades prep and greater.
  First, I wrote that the students should study the circulatory system argument.
  Second, I wrote that the students should study the respiratory system argument.
  Third, I wrote that the students should be taught the digestive system argument.
  In this way, I prepared to observe the students research the positive effects of yoga by writing a government yoga policy for primary school grades prep and greater.
["Green, L 2021, <i>Order in Conglish 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Order in Conglish 3 of 4
   I prepared to traverse the universal data structure with respect to time.
  I did this by drawing a six-member ring of events through time.
  First, I drew a three-element chain of events in the future.
  Second, I drew an element that was an event in the present.
  Third, I drew a two-element chain of events in the past.
  In this way, I prepared to traverse the universal data structure with respect to time by drawing a six-member ring of events through time.
   I prepared to traverse the universal data structure with respect to space.
  I did this by drawing a six-member ring of events in space.
  First, I drew an element that named a room.
  Second, I drew a three-element chain of parts of the room.
  Third, I drew a two-element chain of directions in the room.
  In this way, I prepared to traverse the universal data structure with respect to space by drawing a six-member ring of events in space.
   I prepared to traverse the universal data structure with respect to human judgments of objects (breathsonings).
  I did this by drawing a two-member chain of human judgments of objects.
  First, I drew an element that named the subject and the object.
  Second, I drew an element that named a human judgment of the subject.
  Third, I drew an element that named a human judgment of the object.
  In this way, I prepared to traverse the universal data structure with respect to human judgments of objects (breathsonings) by drawing a two-member chain of human judgments of objects.
   I prepared to traverse the universal data structure with respect to human judgments of the verb (rebreathsonings).
  I did this by drawing a two-member chain of human judgments of the verb.
  First, I drew an element that named the verb, 'ran'.
  Second, I drew an element that named a human judgment of the verb, 'quickly'.
  Third, I drew an element that named a human judgment of the object.
  In this way, I prepared to traverse the universal data structure with respect to human judgments of objects (breathsonings) by drawing a two-member chain of human judgments of objects.
  I prepared to become a politician myself.
  I did this by writing pedagogy arguments for myself.
  First, I chose a developed thing about myself to write the pedagogical argument about.
  Second, I wrote the pedagogical argument.
  Third, I breasoned out the argument to achieve the developed thing.
  In this way, I prepared to become a politician myself by writing pedagogy arguments for myself.
   I prepared to help you to become a politician.
  I did this by writing a pedagogy argument for you.
  First, I chose a developed thing about you to write the pedagogical argument about.
  Second, I wrote the pedagogical argument.
  Third, I breasoned out the argument to achieve the developed thing.
  I prepared to help you to become a politician by writing a pedagogy argument for you.
   I prepared to help people understand me as a politician.
  I did this by writing a pedagogy argument for other people.
  First, I chose a developed thing about how other people understood me as politician to write the pedagogical argument about other people.
  Second, I wrote the pedagogical argument.
  Third, I breasoned out the argument to achieve the developed thing.
  I prepared to help people understand me as a politician by writing a pedagogy argument for other people.
   I enabled the politician to be preselected (wrote pedagogy arguments, experience of regional campaigns, landslide)
   I prepared to work in a career assisting the politician.
  I did this by writing pedagogy arguments for the politician.
  First, I wrote 30 80-breasoning As per campaign.
  Second, I included in this a 10-breasoning A per sentence.
  Third, I wrote 31-50 (20) business As.
  In this way, I prepared to work in a career assisting the politician by writing pedagogy arguments for the politician.
   I prepared to help the community achieve its aims.
  I did this by gaining experience of regional campaigns.
  First, I designed a hospital.
  Second, I designed a business.
  Third, I designed an education institution.
  In this way, I prepared to help the community achieve its aims by gaining experience of regional campaigns.
["Green, L 2021, <i>Order in Conglish 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Order in Conglish 4 of 4
    I prepared to eat the vegan products.
  I did this by winning the election in a landslide.
  First, I applied for support from the community.
  Second, I waited for a reply of support from the community.
  Third, I recorded the names of supporters from the community.
  In this way, I prepared to eat the vegan products by winning the election in a landslide.
    I prepared to plan more campaigns.
  I did this by experiencing the win.
  First, I thanked my chief of staff.
  Second, I thanked my press secretary.
  Third, I thanked my speechwriter.
  In this way, I prepared to plan more campaigns by experiencing the win.
["Green, L 2021, <i>Perspectives 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Perspectives 1 of 4
 The first technique can be used to give a perspective on a text.
 For example, given the reason 'X is younger than Y' the perspective gives the conclusion 'X was likely to have been looked after by Y'.
     I prepared to drink the bottle of water.
  I did this by signaling to stop to the car.
  First, I determined that I needed water.
  Second, I waited for a car to come.
  Third, I flagged it down.
  In this way, I prepared to drink the bottle of water by signaling to stop to the car.
    I prepared to conclude that the invariant was more important than the variant.
  I did this by testing the variant against the invariant.
  First, I found that the invariant in 'I drank the pear juice' was 'I'.
  Second, I found that the variant in 'I drank the pear juice' was 'pear juice'.
  Third, I found that 'I' and 'pear' were there and not there, respectively, through my life.
  In this way, I prepared to conclude that the invariant was more important than the variant by testing the variant against the invariant.
     I prepared to understand vocabulary's meaning.
  I did this by writing the synonym for the word down.
  First, I wrote down the word.
  Second, I looked it up in the thesaurus.
  Third, I wrote down the best synonym for the word in the thesaurus.
  In this way, I prepared to understand vocabulary's meaning by writing the synonym for the word down.
    I prepared to prove robots' sentience.
  I did this by writing the first technique algorithm in ontology.
  First, I entered the query.
  Second, I followed the algorithm find the relevant part of the knowledge hierarchy.
  Third, I read the returned argument.
  In this way, I prepared to prove robots' sentience by writing the first technique algorithm in ontology.
    I prepared to offer the viable counter-interpretation.
  I did this by writing the second technique algorithm in interpretation.
  First, I entered the query.
  Second, I followed the algorithm interpret (paraphrase) the relevant part of the knowledge the hierarchy.
  Third, I read the returned argument.
  In this way, I prepared to offer the viable counter-interpretation by writing the second technique algorithm in interpretation.
    I prepared to verify the definition of the word.
  I did this by writing the third technique algorithm in meaning.
  First, I entered the query.
  Second, I followed the algorithm find the relevant definition of the query.
  Third, I read the returned definition.
  In this way, I prepared to verify the definition of the word by writing the third technique algorithm in meaning.
    I prepared to verify that the answer was good.
  I did this by writing the question-answering algorithm.
  First, I wrote the answer.
  Second, I wrote the questions that could be answered with the answer.
  Third, I tested that a question was answered with the correct answer.
  In this way, I prepared to verify that the answer was good by writing the question-answering algorithm.
    I prepared to present the synopsis.
  I did this by writing the summarisation algorithm.
  First, I wrote the text.
  Second, I wrote the text that it should become.
  Third, I trained the algorithm to transform the longer text into the shorter text.
  In this way, I prepared to present the synopsis by writing the summarisation algorithm.
     I prepared to speak at the conference.
  I did this by writing the text-to-speech algorithm.
  First, I wrote the text.
  Second, I recorded the speech that it should sound like.
  Third, I trained the algorithm to transform the text into the speech.
  In this way, I prepared to speak at the conference by writing the text-to-speech algorithm.
   I prepared to transcribe my lecture.
  I did this by developing the speech to text algorithm.
  First, I recorded the speech.
  Second, I wrote the text for it.
  Third, I trained the algorithm to transform the speech into the text.
  In this way, I prepared to transcribe my lecture by developing the speech to text algorithm.
["Green, L 2021, <i>Perspectives 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Perspectives 2 of 4
    I prepared to disambiguate the text.
  I did this by writing the anaphor resolution algorithm.
  First, I found the first instance of 'him', 'her' or 'it'.
  Second, I found the previous object to the instance of 'him', 'her' or 'it'.
  Third, I replaced the instance of 'him', 'her' or 'it' with the previous object.
  In this way, I prepared to disambiguate the text by writing the anaphor resolution algorithm.
   I prepared to write 'and' in terms of 'and'.
  I did this by comparing the reasonings details.
  First, I wrote that it was true that I ate the strawberry and the pecan.
  Second, I wrote that it was true that I ate the pear or the nectarine.
  Third, I wrote that 'and' was stronger than 'or' because it corresponded to a single correct result.
  In this way, I prepared to write 'and' in terms of 'and' by comparing the reasonings details.
    I prepared to contrast political detailed reasonings.
  I did this by juxtaposing detailed reasonings.
  First, I determined the political detailed reasoning for a reason.
  Second, I determined the theological (philosophical) detailed reasoning for a reason.
  Third, I determined that the political detailed reasoning for a reason was stronger than the theological (philosophical) detailed reasoning for that reason because it originated from a higher point of society.
  In this way, I prepared to contrast political detailed reasonings by juxtaposing detailed reasonings.
   I prepared to eat at 12 PM.
  I did this by interweaving binary oppositions.
  First, I wrote the agreeing binary opposition that the verb agreed with the noun in number.
  Second, I wrote the disagreeing binary opposition that I felt hungry at 2 PM instead of 12 PM.
  Third, I interweaved these binary oppositions to form the compromise that the verb agreed with 12 PM in number.
  In this way, I prepared to eat at 12 PM by interweaving binary oppositions.
   I prepared to challenge whether two artificial nodes would allow feelings at all.
  I did this by comparing the senses of reasoning.
  First, I wrote that the spike was sensed.
  Second, I wrote that it felt lustful.
  Third, I commented that the spike felt lustful given that I believed that it was part of a human.
  In this way, I prepared to challenge whether two artificial nodes would allow feelings at all by comparing the senses of reasoning.
   I prepared to determine that I was safe.
  I did this by logging in to my files.
  First, I entered my user name.
  Second, I entered my password.
  Third, I accessed my files.
  In this way, I prepared to determine that I was safe by logging in to my files.
   I prepared to archive old documents.
  I did this by determining a document's relevance by its age.
  First, I wrote down the date 12 months before the current date.
  Second, I wrote down the modification date of the document.
  Third, I verified whether the document was still relevant.
  In this way, I prepared to archive old documents by determining a document's relevance by its age.
   I prepared to articulate students to 50 As in popogogy.
  I did this by predicting thoughts using Hindu astrology.
  First, I followed a person, not a pigeon.
  Second, I learned popogogy.
  Third, I wrote down a department's arguments.
  In this way, I prepared to articulate students to 50 As in popogogy by predicting thoughts using Hindu astrology.
    I prepared to become a multi-millionaire.
  I did this by stating how breasonings would help avoid death (prolong life).
  First, I found the breasoning.
  Second, I found how it would prolong life.
  Third, I activated the breasoning by breasoning it out.
  In this way, I prepared to become a multi-millionaire by stating how breasonings would help avoid death (prolong life).
  I prepared to run a survival course.
  I did this by saying how meditation would enable survival during the depression.
  First, I identified how it would help me walk forward.
  Second, I walked forward.
  Third, I tried to.
  In this way, I prepared to run a survival course by saying how meditation would enable survival during the depression.
["Green, L 2021, <i>Perspectives 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Perspectives 3 of 4
   I prepared to breeze through life.
  I did this by stating how meditation would help avoid death (help life).
  First, I found meditation.
  Second, I found how it would use my whole brain.
  Third, I protected my life.
  In this way, I prepared to breeze through life by stating how meditation would help avoid death (help life).
   I prepared to eat the muffin.
  I did this by saying how breasonings would enable survival during the depression.
  First, I found the money.
  Second, I paid for it in breasonings.
  Third, I spent the money.
  In this way, I prepared to eat the muffin by saying how breasonings would enable survival during the depression.
   I prepared to prove that pedagogy made money.
  I did this by carrying out a study in the change in income in new pedagogues in teachers, managers and actors, etc.
  First, I found the first pedagogue who had made money around one of the new pedagogues.
  Second, I prepared to find the next pedagogue who had made money around the new pedagogue.
  Third, I repeated this until I had found all of the pedagogues who had made money around the new pedagogue.
  In this way, I prepared to prove that pedagogy made money by carrying out a study in the change in income in new pedagogues in teachers, managers and actors, etc.
   I prepared to determine the increase in profits from pedagogy.
  I did this by writing an economic equation in a chapter.
  First, I added the increase in profits of the first pedagogue around the new pedagogue.
  Second, I prepared to add the increase in profits of the next pedagogue around the new pedagogue to this.
  Third, I repeated this until I had added the increase in profits of all the pedagogues around the new pedagogue to this.
  In this way, I prepared to determine the increase in profits from pedagogy by writing an economic equation in a chapter.
  I prepared to determine the increase in profits from different types of pedagogues.
  I did this by writing an economic equation of all the chapters in a thesis.
  First, I wrote down the increase in profits from teacher pedagogues.
 Second, I added the increase in profits from manager pedagogues.
  Third, I wrote down the increase in profits from actor pedagogues.
  In this way, I prepared to determine the increase in profits from different types of pedagogues by writing an economic equation of all the chapters in a thesis.
   I prepared to state that students, etc.
 were allowed to copy breasonings.
  I did this by writing about the copyright of breasonings and licensing them.
  First, I wrote the breasoning.
  Second, I licensed it.
  Third, I wrote about it.
  In this way, I prepared to state that students, etc.
 were allowed to copy breasonings by writing about the copyright of breasonings and licensing them.
   I prepared to be a yogi.
  I did this by picking the flower.
  First, I found the red flower.
  Second, I held the scissors.
  Third, I cut the flower.
  In this way, I prepared to be a yogi by picking the flower.
   I prepared to verify that the breakers were identical.
  I did this by measuring one litre of water.
  First, I found the beaker of water and second beaker.
  Second, I began pouring the water from the beaker into the second beaker.
  Third, I stopped when I had finished pouring one litre of water into the second beaker.
  In this way, I prepared to verify that the breakers were identical by measuring one litre of water.
   I prepared to give the example.
  I did this by eating muffins with you.
  First, I ate a muffin.
  Second, I observed you eat a muffin.
  Third, I stated that we both ate muffins.
  In this way, I prepared to give the example by eating muffins with you.
   I prepared to state that I only required only intelligent algorithms.
  I did this by drinking the vegan hot chocolate.
  First, I lifted the glass to my lips.
  Second, I angled the glass.
  Third, I drained the glass.
  In this way, I prepared to state that I only required only intelligent algorithms by drinking the vegan hot chocolate.
["Green, L 2021, <i>Perspectives 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Perspectives 4 of 4
    I prepared to design a computer screen.
  I did this by writing on the palimpsest.
  First, I found the palimpsest.
  Second, I found a stylus.
  Third, I wrote on the palimpsest.
  In this way, I prepared to design a computer screen by writing on the palimpsest.
   I prepared to yogically cremate the body.
  I did this by eating the man made of gherkins.
  First, I ate his head.
  Second, I ate his body.
  Third, I ate his arms.
  In this way, I prepared to yogically cremate the body by eating the man made of gherkins.
["Green, L 2021, <i>Philosophical Computational English 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Philosophical Computational English 1 of 4
 There may be advantages to choosing to study Computational English in Philosophy rather than computer science.
 There has been much work done on the analytic (computational) and continental (hermeneutic) areas and finding the interface would be ideal in Philosophy.
 Critically examining literature from the cognitive science perspective may yield representations such as oppositions, hierarchies and Derridean bugs which may be introduced into the system to test for weaknesses and find new areas of interest.
 Also, processual issues may be examined, such as form's interrelationship with content, Nietzschean-type systems created for analysing and analysis and a framework for analysis may be developed.
Computational Philosophical English would differ from PCE in that it would be studied in the computer science department.
 It would look through a philosophical lens at English followed by a computational lens.
 For example, it may look at complexity or computational analysis issues around questions in Philosophy and Literature, which may still be relevant in PCE although a single trajectory (from determining the system to be programmed to analysis of the computer program) would be pursued in it.
     I prepared to use the knowledge from my master's lineage of masters.
  I did this by worshipping God (in fact, thanking my master).
  First, I walked to my master.
  Second, I greeted him.
  Third, I thanked him.
  In this way, I prepared to use the knowledge from my master's lineage of masters by worshipping God (in fact, thanking my master).
    I prepared to support my students.
  I did this by praying for (in fact, writing) a 10 (in fact, an 80) breasoning A each day for my students.
  First, I wrote the topic of the first student's first thought.
  Second, I wrote the first breasoning on the topic.
  Third, I wrote the rest of the breasonings on the topic.
  In this way, I prepared to support my students by praying for (in fact, writing) a 10 (in fact, an 80) breasoning A each day for my students.
     I prepared to lead the person.
  I did this by hugging the thinking head.
  First, I asked the lady whether I could touch her head.
  Second, I placed my left hand on one side on her head.
  Third, I placed my right hand on the other side of her head.
  In this way, I prepared to lead the person by hugging the thinking head.
    I prepared to write a philosophical argument.
  I did this by writing the philosophy.
  First, I wrote the influence of the philosophy.
  Second, I wrote the aim of the philosophy.
  Third, I wrote the philosophy.
  In this way, .
    I prepared to analyse an English narrative in a journalism article.
  I did this by writing an A.
  First, I wrote an English narrative.
  Second, I programmed a computational algorithm in the narrative.
  Third, I wrote the philosophy about the algorithm.
  In this way, I prepared to analyse an English narrative in a journalism article by writing an A.
  First, I wrote an English narrative.
    I prepared to present the cake.
  I did this by placing the candles on the cake.
  First, I read the person's age.
  Second, I placed the first candle on the cake.
  Third, I placed the rest of the required number of candles on the cake.
  In this way, I prepared to present the cake by placing the candles on the cake.
    I prepared to eat the vegan cake.
  I did this by presenting the cake.
  First, I turned off the lights.
  Second, I presented the cake.
  Third, I told the birthday boy to blow out the candles.
  In this way, I prepared to eat the vegan cake by presenting the cake.
    I prepared to program a robot mind.
  I did this by writing an Ontology Web Database.
  First, I wrote the objects' registration numbers.
  Second, I recorded the ontology (data structure) of the objects.
  Third, I recorded the ontology's position in the universal ideology (ontology).
  In this way, I prepared to program a robot mind by writing an Ontology Web Database.
     I prepared to program a computer mind network.
  I did this by writing an Ontology Web Database Game for people.
  First, I placed a binary ontology on my local starting position on my turn.
  Second, I placed the next binary ontology connecting with the end point of a sequence of ontologies in my ideology (hierarchy) on my next turn.
  Third, I won the game when I was first in the group to have the longest sequence of ontologies that numbered five in my ideology.
  In this way, I prepared to program a computer mind network by writing an Ontology Web Database Game for people.
   The self prepared to intertextualise the other.
  The self did this by connecting a text with the other's text.
  First, the self jazzed it.
  Second, the self winkled it.
  Third, the self helped it.
  In this way, the self intertextualised the other.
  The self did this by connecting a text with the other's text.
  In this way, the self prepared to intertextualise the other by connecting a text with the other's text.
["Green, L 2021, <i>Philosophical Computational English 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Philosophical Computational English 2 of 4
    I prepared to wrote new philosophical algorithms in academia.
  I did this by stating that the self should connect a sentence's part with the other's other part of that sentence.
  First, I wrote the start, middle and end of the sentence in the row headings.
  Second, I wrote the start, middle and end of the sentence in the column headings.
  Third, I connected each combination of pairs of sentence parts.
  In this way, I prepared to wrote new philosophical algorithms in academia by stating that the self should connect a sentence's part with the other's other part of that sentence.
   I prepared to determine the philosophical complexity (longest chain, including expanded recursion) of the algorithm.
  I did this by stating that the self should expand his or her idea into the other's idea algorithm.
  First, I thought of the overall function of the algorithm.
  Second, I thought of the individual predicates of the algorithm.
  Third, I simplified each predicate into two parts going well together.
  In this way, I prepared to determine the philosophical complexity (longest chain, including expanded recursion) of the algorithm by stating that the self should expand his or her idea into the other's idea algorithm.
    I prepared to place a map of the shop in the map of the city.
  I did this by stating that the self should write an ontology that scales the complexity of algorithm from simple to as complex as the other requires, e.
 by making data structures more detailed.
  First, I drew a square.
  Second, I divided it into quarters.
  Third, I divided each quarter into quarters.
  In this way, I prepared to place a map of the shop in the map of the city by stating that the self should write an ontology that scales the complexity of algorithm from simple to as complex as the other requires, e.
 by making data structures more detailed.
   I prepared to verify that the algorithms had the same qualities.
  I did this by stating that the self should find similarities of ontologies in the other's five algorithms.
  First, I observed that the ontologies of the five algorithms had the same branching point.
  Second, I observed that the ontologies of the five algorithms had the same length.
  Third, I observed that the ontologies of the five algorithms had the same number of items in total.
  In this way, I prepared to verify that the algorithms had the same qualities by stating that the self should find similarities of ontologies in the other's five algorithms.
   I prepared to connect differences in ontologies of different algorithms of the other.
  I did this by affirming that the self should find differences in ontologies of different algorithms of the other.
  First, I observed that the ontologies of the different algorithms had a different number of levels.
  Second, I observed that the ontologies of the different algorithms had a different number of items per level.
  Third, I observed that the ontologies of the different algorithms had a different item type at the same position.
  In this way, I prepared to connect differences in ontologies of different algorithms of the other by affirming that the self should find differences in ontologies of different algorithms of the other.
   I prepared to compress algorithmic complexity.
  I did this by stating that the self should write ontologies of the other's algorithms' parts.
  First, I wrote the structure of the algorithm's parts (functions, or Prolog predicates).
  Second, I wrote the order of the groups of commands in each predicate.
  Third, I wrote the command types in each predicate (call, recursive or mathematical).
  In this way, I prepared to compress algorithmic complexity by stating that the self should write ontologies of the other's algorithms' parts.
   I prepared to examine the meaning of the ontologies of the data structures.
  I did this by writing that the self should write ontologies of the other's algorithms' data structures.
  First, I wrote in the ontology that the algorithm's data structure was a point.
  Second, I wrote in the ontology that the algorithm's data structure was a line.
  Third, I wrote in the ontology that the algorithm's data structure was a tree.
  In this way, I prepared to examine the meaning of the data structures' structures by writing that the self should write ontologies of the other's algorithms' data structures.
   I prepared to read the book.
  I did this by turning to the right page.
  First, I opened the book.
  Second, I turned the pages.
  Third, I repeated this until I had I had found the correct page.
  In this way, I prepared to read the book by turning to the right page.
    I prepared to read the page that fell open.
  I did this by turning to the page that fell open.
  First, I rested the book edition on its spine.
  Second, I allowed the book edition to fall open.
  Third, I observed the page that fell open.
  In this way, I prepared to read the page that fell open by turning to the page that fell open.
  I prepared to read the chapter.
  I did this by turning to the first page.
  First, I opened the volume.
  Second, I turned the title page.
  Third, I turned to the first page.
  In this way, I prepared to read the chapter by turning to the first page.
["Green, L 2021, <i>Philosophical Computational English 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Philosophical Computational English 3 of 4
   I prepared to write quickly and clearly.
  I did this by stating that I was mentally fit to write many As.
 First, I consulted the doctor.
  Second, he gave me a certificate.
  Third, I wrote many As.
  In this way, I prepared to write quickly and clearly by stating that I was mentally fit to write many As.
   I prepared to form the movie poster.
  I did this by preventing the mistake becoming a big idea to earn an acting role.
  First, I wrote the mistake (correction).
  Second, I wrote the big idea appearance (movie poster).
  Third, I prevented writing that the mistake would be transformed into a big idea.
  In this way, I prepared to form the movie poster by preventing the mistake becoming a big idea to earn an acting role.
   I prepared to teach meditation in France.
  I did this by translating meditation into other languages, for example French.
  First, I looked up the word in the first language.
  Second, I found the word in the second language.
  Third, I wrote down the word in the second language.
  In this way, I prepared to teach meditation in France by translating meditation into other languages, for example French.
   I prepared to teach pedagogy in Italy.
  I did this by translating pedagogy into other languages, for example Italian.
  First, I looked up the word in the first language.
  Second, I found the word in the second language.
  Third, I wrote down the word in the second language.
  In this way, I prepared to teach pedagogy in Italy by translating pedagogy into other languages, for example Italian.
  I prepared to teach medicine in Germany.
  I did this by translating medicine into other languages, for example German.
  First, I looked up the word in the first language.
  Second, I found the word in the second language.
  Third, I wrote down the word in the second language.
  In this way, I prepared to teach medicine in Germany by translating medicine into other languages, for example German.
   I prepared to teach Computational English in Spain.
  I did this by translating Computational English into other languages, for example Spanish.
  First, I looked up the word in the first language.
  Second, I found the word in the second language.
  Third, I wrote down the word in the second language.
  In this way, I prepared to teach Computational English in Spain by translating Computational English into other languages, for example Spanish.
   I prepared to paint the child's nursery.
  I did this by thinking of meeting 50 influential people before conceiving the baby.
  First, I thought of famous categories.
  Second, I thought of their personalities.
  Third, I thought of their thoughts.
  In this way, I prepared to paint the child's nursery by thinking of meeting 50 influential people before conceiving the baby.
   I prepared to developedly (sic) rebreason out (think of the verb that connects the subject and object) the combination of two sentences.
  I did this by undevelopedly (sic) breasoning out two sentences that I would combine.
  First, I developedly breasoned out undeveloped breasonings.
  Second, undeveloped breasonings were developedly breasoned out.
  Third, the undeveloped breasonings were attributed to the students.
  In this way, I prepared to developedly rebreason out (think of the verb that connects the subject and object) the combination of two sentences by undevelopedly breasoning out two sentences that I would combine.
   I prepared to write a secondary text.
  I did this by writing a 20-breasoning (80-breasoning) long sequence for a sentence with original content, rather than referenced content.
  First, I looked up breasonings for the sentence and the argument corresponding to these breasonings.
  Second, I wrote an algorithm connecting the sentence with the pointed to developed breasoning.
  Third, I wrote an algorithm connecting the sentences together, and omitted the connection in the text.
  In this way, I prepared to write a secondary text by writing a 20-breasoning (80-breasoning) long sequence for a sentence with original content, rather than referenced content.
   I prepared to list influences on the philosophy chapter (contra by in English).
  I did this by writing 5 190 breasoning As per chapter.
  First, I wrote an A as the chapter.
  Second, I wrote a theologically themed A.
  Third, I wrote a politically themed A.
  In this way, I prepared to list influences on the philosophy chapter (contra by in English) by writing 5 190 breasoning As per chapter.
["Green, L 2021, <i>Philosophical Computational English 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Philosophical Computational English 4 of 4
    I prepared to meet professional requirements for selling a book.
  I did this by writing 50 As per book.
  First, I breasoned out 50 As as the publisher.
  Second, I wrote 50 area of study As.
  Third, I breasoned out 50 As in the six month period leading up to publication as the author.
  In this way, I prepared to meet professional requirements for selling a book by writing 50 As per book.
   I prepared to buy products that I added value to.
  I did this by breasoning out 5 As per day for sales.
  First, I trialled the product.
  Second, I found a new use for the product.
  Third I used the product for thus new use.
  In this way, I prepared to buy products that I added value to by breasoning out 5 As per day for sales.
["Green, L 2021, <i>Radical Difference 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Radical Difference 1 of 4
How two sides of a debate are radically different.
Radical difference is seeing two sides of a debate clearly.
 One should choose a side.
 Once finished, the opposition between the two sides represents the radical difference.
 The diagram represents the two perspectives on the debate being represented as rays from the centre of the circle.
     I prepared to move past the barrier representing the maximum number of breasonings possible.
 I did this by translating a breasoning into a different language.
 First, I wrote down the breasoning.
 Second, I wrote down its translation in the second language.
 Third, I breasoned out the new cultural object.
 In this way, I prepared to move past the barrier representing the maximum number of breasonings possible by translating a breasoning into a different language.
     I prepared to observe God (e.
 the central figure).
 I did this by performing the Griegian hand-hold.
 First, I observed you hold your hand out.
 Second, I grasped your hand.
 Third, I wrapped my fingers around your fingers.
 In this way, I prepared to observe God (e.
 the central figure) by performing the Griegian hand-hold.
     I prepared to watch the wheel rotate around the centre, to which central spokes were attached.
 I did this by watching the steam train's wheel rotate in a circle.
 First, I drew the circle.
 Second, I drew a line.
 Third, I split the edge of the circle into two segments and attached the line to this vertex, and did the same to the opposite side of the circle.
 In this way, I prepared to watch the wheel rotate around the centre, to which central spokes were attached by watching the steam train's wheel rotate in a circle.
     I prepared to be a Nietzschean scholar.
 I did this by translating a breasoning into an etymological meaning (in an ancient language).
 First, I wrote that five, the etymological meaning of coin meant that the Queen ordered 5*16=80 breasonings per giver in each transaction.
 Second, I knew this also meant that the Queen ordered 5*16=80 breasonings per receiver in each transaction, imitating communication.
 Third, I recommended training in the specific department required to gain job and safety skills.
 In this way, I prepared to be a Nietzschean scholar by translating a breasoning into an etymological meaning (in an ancient language).
    I prepared to differentiate people by breasoning them out.
 I did this by radically differentiating myself from you.
 First, I looked at myself.
 Second, I watched you.
 Third, I noted that you and I were different people.
 In this way, I prepared to differentiate people by breasoning them out by radically differentiated myself from you.
     I prepared to differentiate objects by breasoning them out.
 I did this by radically differentiating a sieve and a duster.
 First, I looked at the sieve.
 Second, I watched the duster.
 Third, I noted that the sieve and the duster were different objects.
 In this way, I prepared to differentiate objects by breasoning them out by radically differentiating a sieve and a duster.
     I prepared to find the next relationship.
 I did this by observing the gay man walking with the cancer sufferer's friend to make the cancer sufferer happy.
 First, I watched him take the first step.
 Second, I watched him prepare to take the next step.
 Third, I watched him repeat this until he had walked 10 metres.
 In this way, I prepared to find the next relationship by observing the gay man walking with the cancer sufferer's friend to make the cancer sufferer happy.
     I prepared to write philosophy books.
 I did this by aiming to become a philosophy academic.
 First, I wrote 1 A per Bachelor's degree assignment.
 Second, I wrote 30 As, 15 to the lecturer and 15 As from the lecturer per Honours degree assignment.
 Third, I wrote 50 As to the lecturer and 50 As from the lecturer per Master's and PhD degrees' assignment.
 In this way, I prepared to write philosophy books by aiming to become a philosophy academic.
     I prepared to observe the children being given presents.
 I did this by observing the gay man organising to have a child.
 First, I observed him selecting the desired properties of the child.
 Second, I observed him organising to select the egg and sperm which would combine to give these properties with the highest probability.
 Third, I organised a volunteer surrogate mother to be implanted with the egg that had been fertilised with the sperm.
 In this way, 9.
 I prepared to observe the children being given presents by observing the gay man organising to have a child.
10   I prepared to organise to have the Lucianic Meditation degree accredited.
 I did this by collecting the Lucianic Meditation degree's pedagogy arguments (e.
 Lucianic writing degree's pedagogy arguments).
 First, I collected texts about the mantra and sutra (e.
g words).
 Second, I collected texts about God (e.
 the master).
 Third, I collected texts about the bible (e.
 the book).
 In this way, I prepared to organise to have the Lucianic Meditation degree accredited by collecting the Lucianic Meditation degree's pedagogy arguments (e.
 Lucianic writing degree's pedagogy arguments).
["Green, L 2021, <i>Radical Difference 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Radical Difference 2 of 4
    I prepared to offer a Management course.
 I did this by collecting the Lucianic Management degree's pedagogy arguments.
 First, I collected the first group of subjects.
 Second, I prepared to collect the next group of subjects.
 Third, I repeated this until I had collected all the groups of subjects.
 In this way, 1 prepared to offer a Management course by collecting the Lucianic Management degree's pedagogy arguments.
    I prepared to offer a Law course.
 I did this by collecting the Lucianic Law degree's pedagogy arguments.
 First, I collected the lawsuit subject pedagogy argument.
 Second, I collected the contract law subject pedagogy argument.
 Third, I collected the LM legal governance subject pedagogy argument.
 In this way, I prepared to offer a Law course by collecting the Lucianic Law degree's pedagogy arguments.
    I prepared to offer an Education course.
 I did this by collecting the Lucianic Pedagogy degree's pedagogy arguments.
 First, I collected the design subject pedagogy argument.
 Second, I collected the delivery subject pedagogy argument.
 Third, I collected the assessment subject pedagogy argument.
 In this way, I prepared to offer an Education course by collecting the Lucianic Pedagogy degree's pedagogy arguments.
    I prepared to go for a walk.
 I did this by drinking the cup of water.
 First, I picked up the cup.
 Second, I lifted it to my lips.
 Third, I drank from it.
 In this way, I prepared to go for a walk by drinking the cup of water.
15   I prepared to take the person to a safe place.
 I did this by negotiating an agreement with my opponent.
 First, I verified whether I agreed with the first sentence.
 Second, I prepared to verify whether I agreed with the next sentence.
 Third, I repeated this until I had agreed with a sentence.
 In this way, I prepared to take the person to a safe place by negotiating an agreement with my opponent.
    I prepared to write about the master's conclusion.
 I, a philosopher did this by agreeing with God (e.
 the master).
 First, I opened the envelope.
 Second, I took out the master's conclusion.
 Third, I agreed with it.
 In this way, I prepared to write about the master's conclusion by agreeing with God (e.
 the master).
    I prepared to verify the writing.
 I did this by meditating on (e.
 writing about) God (e.
 the master).
 First, I opened the volume.
 Second, I opened the volume at the correct chapter.
 Third, I wrote about the master's chapter's title.
 In this way, I prepared to verify the writing by meditating on (e.
 writing about) God (e.
 the master).
    I prepared to order Conglish.
 I did this by passing the assignment by using pedagogy.
 First, I researched the author's text.
 Second, I researched the secondary texts about this text.
 Third, I connected comments on quotes from these secondary texts as my argument.
 In this way, I prepared to order Conglish by passing the assignment by using pedagogy.
    I prepared to publish the article in a journal.
 I did this by determining that Lucianic Meditation (writing about the philosopher Lucian) worked.
 First, I verified that the writer had better movement in her body from drinking four glasses of water 45 minutes before breakfast, as suggested in the Lucianic text.
 Second, I performed a double blind experiment, in which neither the subjects nor the experiments were aware of the of the critical aspects of the experiment.
 Third I submitted the research to peer reviewers.
 In this way, I prepared to publish the article in a journal by determining that Lucianic Meditation (writing about the philosopher Lucian) worked.
20   I prepared to verify the sentence.
 I did this by rebutting to the objection in the critical thinking subject.
 First, I held the shop sign.
 Second, I found it too heavy (e.
 I sang a song).
 Third, I pushed its post into the ground.
 In this way, I prepared to verify the sentence by rebutting to the objection in the critical thinking subject.
["Green, L 2021, <i>Radical Difference 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Radical Difference 3 of 4
    I prepared to be democratic.
 I did this by awarding agreement and disagreement (rebutting to the objection) the same mark.
 First, I wrote the sentence agreeing with the thesis statement.
 Second, I wrote the sentence disagreeing (e.
 agreeing) with the thesis statement.
 Third, I gave these two sentences the same mark.
 In this way, I prepared to be democratic by awarding agreement and disagreement (rebutting to the objection) the same mark.
22   I prepared to perform the negotiation.
 I did this by writing about disagreement as having the seen-as version of rebutting to an objection (e.
g agreeing).
 First, I found the person.
 Second, I found her agreeing.
 Third, I agreed with her.
 In this way, I prepared to perform the negotiation by writing about disagreement as having the seen-as version of rebutting to an objection (e.
g agreeing).
23   I prepared to pass the essay.
 I did this by exposing the idea of God in the first half of the essay.
 First, I found the word God in the primary text.
 Second, I agreed with the idea.
 Third, I wrote this in the first half of the essay.
 In this way, I prepared to pass the essay by exposing the idea of God in the first half of the essay.
24   I prepared to write a new essay argument.
 I did this by writing new connections in the essay.
 First, I wrote the first sentence, first sentence in the second half and a connection between them.
 Second, I prepared to do this with the next two sentences after these.
 Third, I repeated this until I had finished the whole essay.
 In this way, I prepared to write a new essay argument by writing new connections in the essay.
25   I prepared to breason out an argument for a particular developed thing.
 I did this by writing a breasoning list.
 First, I wrote the algorithm description list.
 Second, I wrote the expanded algorithms.
 Third, I reduced each line of each algorithm to a breasoning list.
 In this way, I prepared to breason out an argument for a particular developed thing by writing a breasoning list.
26   I prepared to disagree (e.
 agree) with the jointure and write a rhizome.
 I did this by joining breasonings to ideas in the area of study to write the essay.
 First, I wrote the breasoning 'I programmed the story maker using the computer'.
 Second, I wrote the idea the person followed the vascular-like halls in the building to reach the exit.
 Third, I wrote that I printed the pathways through the building's vasculature, like writing a story, on computer.
 In this way, I prepared to disagree (e.
 agree) with the jointure and write a rhizome by joining breasonings to ideas in the area of study to write the essay.
27   I prepared to write how Chinese characters are interesting.
 I did this by devising an alternative idea about a Chinese character's radical.
 First, I wrote the character nǚzǐ, meaning good.
 Second, I wrote its first radical, nǚ, meaning woman.
 Third, I wrote an alternative meaning for nǚ, nothingness.
 In this way, I prepared to write how Chinese characters are interesting by devising an alternative idea about a Chinese character's radical.
28   I prepared to protected people from being murdered (e.
 guided people on a positive path in life).
 I did this by simulating a friendly house by inviting many people around.
 First, I invited the ontology-bearer, where ontologies contain arguments.
 Second, I invited the algorithm-bearer, where algorithms process ontologies.
 Third, I invited the argument-bearer, where arguments are responses to the area of study that have rhizomes as reasons.
 In this way, I prepared to protected people from being murdered (e.
 guided people on a positive path in life) by simulating a friendly house by inviting many people around.
29   I prepared to write on the bible.
 I did this by agreeing, not disagreeing, in theology.
 First, I found the instance of God (e.
 the master).
 Second, I found his statement.
 Third, I agreed with it.
 In this way, I prepared to write on the bible by agreeing, not disagreeing, in theology.
30   I prepared to help actors earn money.
 I did this by forming an acting agency.
 First, I found actors.
 Second, I found roles.
 Third, I applied actors for roles.
 In this way, I prepared to help actors earn money by forming an acting agency.
["Green, L 2021, <i>Radical Difference 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Radical Difference 4 of 4
    I prepared to identify multiple roots.
 I did this by identifying the radical (root) of life.
 First, I identified the first (root) thought.
 Second, I identified the second thought.
 Third, I identified the third thought.
 In this way, I prepared to identify multiple roots by identifying the radical (root) of life.
32   I prepared to go to heaven (e.
 walking on dry land).
 I did this by identifying the difference in life.
 First, I identified the sailor.
 Second, I identified him on the boat.
 Third, I identified him walking on land.
 In this way, I prepared to go to heaven (e.
 walking on dry land) by identifying the difference in life.
    I prepared to define a contention and write arguments for and against a side.
  I did this by writing 8 area of study points.
  First, I wrote that 8 was the minimum number of area of study points.
  Second, I connected these in an argument structure.
  Third, I applied that area of philosophy to the ideas.
  In this way, I prepared to define a contention and write arguments for and against a side by writing 8 area of study points.
34   I prepared to debate the algorithm.
  I did this by writing 95 area of study points.
  First, I wrote the reason, objection, rebuttal and connection with a previous reason or objection in that paragraph.
  Second, I repeated this for 5 reasons per paragraph.
  Third, I repeated this for 5 paragraphs.
  In this way, I prepared to debate the algorithm by writing 95 area of study points.
35   I prepared to compare breasonings currency subject with the idea.
  I did this through radical verificationism.
  First, I compared the breasonings currency subject with sex.
  Second, I looked at the rod.
  Third, I prevented it from entering the void.
  In this way, I prepared to compare breasonings currency subject with the idea through radical verificationism.
36   I prepared to write on different contentions.
  I did this through examinationism.
  First, I examined the reason.
  Second, I examined it further.
  Third, I examined it one more time.
  In this way, I prepared to write on different contentions through examinationism.
37   I prepared to be a writer.
  I did this by studying short courses throughout my life and writing a maximum of 80 breasonings per day per student.
  First, I write 13 and 1/3 paragraphs per day.
  Second, I stated each of these contained 6 sentences.
  Third, I wrote this equalled 80 breasonings.
  In this way, I prepared to be a writer by studying short courses throughout my life and writing a maximum of 80 breasonings per day per student.
38   I prepared to make fine distinctions.
  I did this by writing a maximum of 80 breasonings per day per actor in the production.
  First, I breasoned out 10 breasonings per each of the 10 characters.
  Second, I attributed the other breasonings to Aigs (I asked the acting agents to work on them).
  Third, I breasoned out 80 breasonings per day for everyone, to keep their heads comfortable.
  In this way, I prepared to make fine distinctions by writing a maximum of 80 breasonings per day per actor in the production.
    I prepared to affirm that I was well.
  I did this by writing academic aims for some arguments.
  First, I wrote the academic aim.
  Second, I wrote the argument for it.
  Third, I connected molyhedrons (sic) and the antipsychotic medication.
  In this way, I prepared to affirm that I was well by writing academic aims for some arguments.
40   I prepared to dress the perspective for excavation.
  I did this by writing industry aims for some arguments.
  First, I wrote the movie.
  Second, I wrote the play.
  Third, I wrote the song.
  In this way, I prepared to dress the perspective for excavation by writing industry aims for some arguments.
    I prepared to promote my books.
  I did this by reading the arguments' statistics.
  First, I wrote a essay of the most popular arguments.
  Second, I wrote a secondary text of the most popular arguments.
  Third, I wrote a translation of the most popular arguments.
  In this way, I prepared to promote my books by reading the arguments' statistics.
42   I prepared to solve the other writer's ideas in my writing.
  I did this by preventing theft of my arguments.
  First, I read my ideas.
  Second, I read the ideas written by the other writer.
  Third, I verified that each set was unique.
  In this way, I prepared to solve the other writer's ideas in my writing by preventing theft of my arguments.
["Green, L 2021, <i>Ratios 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Ratios 1 of 4
 One can tell the difference between two time intervals with a lower ratio more easily, e.
 15 and 20 minutes rather than 20 and 25 minutes.
Grouping ideas together
- wall to house on two sides
- window to wall and wall to house
- Grouping parts of literature together
- way of thinking, if two men meet, should one help (if the other one will help cure his mother or if they will pay him money) or kill the other one (if he will usurp the throne or try to kill him first)
     I prepared to enjoy being rewarded for answering the question correctly.
  I did this by eating the lolly snake.
  First, I ate the head of the lolly snake.
  Second, I prepared to eat the next part of the lolly snake.
  Third, I repeated this until I had eaten all of the lolly snake.
  In this way, I prepared to enjoy being rewarded for answering the question correctly by eating the lolly snake.
    I prepared to enjoy being rewarded for passing the ball correctly.
  I did this by eating the lolly centipede.
  First, I ate the head of the lolly centipede.
  Second, I prepared to eat the next part of the lolly centipede.
  Third, I repeated this until I had eaten all of the lolly centipede.
  In this way, I prepared to enjoy being rewarded for passing the ball correctly by eating the lolly centipede.
     I prepared to enjoy being rewarded for correctly handling the person.
  I did this by eating the lolly millipede.
  First, I ate the head of the lolly millipede.
  Second, I prepared to eat the next part of the lolly millipede.
  Third, I repeated this until I had eaten all of the lolly millipede.
  In this way, I prepared to enjoy being rewarded for correctly handling the person by eating the lolly millipede.
    I prepared to take action.
  I did this by standing on the 'thereness' position.
  First, I arrived at the 'thereness' position.
  Second, I stood on the 'thereness' position.
  Third, I took the happy snaps.
  In this way, I prepared to take action by standing on the 'thereness' position.
    I prepared to neaten you.
  I did this by being with you.
  First, I found you.
  Second, I spent time with you.
  Third, I slotted in with you.
  In this way, I prepared to neaten you by being with you.
    I prepared to attend the appointment.
  I did this by verifying that I was on time.
  First, I verified that the time of the hour hand was before the designated time.
  Second, I verified that the time of the minute hand was before the designated time.
  Third, I verified that the time of the second hand was before the designated time.
  In this way, I prepared to attend the appointment by verifying that I was on time.
    I prepared to host a breasonings festival.
  I did this by determining that the breasoner was the best.
  First, I observed the breasoner earn the best job.
  Second, I observed the breasoner bear the best child.
  Third, I observed the breasoner earn the highest grades.
  In this way, I prepared to host a breasonings festival by determining that the breasoner was the best.
    I prepared to achieve a peaceful result.
  I did this by observing the diplomat achieving the result.
  First, I found the contention.
  Second, I found the side of the contention.
  Third, I negotiated for this side of the contention.
  In this way, I prepared to achieve a peaceful result by observing the diplomat achieving the result.
     I prepared to write how the 190 breasonings could be used to manufacture the musical composition.
  I did this by stating that 190 breasonings were written for the musical composition.
  First, I wrote the first breasoning.
  Second, I prepared to write the next breasoning.
  Third, I repeated this until I had written all the breasonings.
  In this way, I prepared to write how the 190 breasonings could be used to manufacture the musical composition by stating that 190 breasonings were written for the musical composition.
   I prepared to earn 100%.
  I did this by critically analysing the musical composition in an essay.
  First, I wrote about the rhythm.
  Second, I wrote about the beats.
  Third, I wrote about the stew of it.
  In this way, I prepared to earn 100% by critically analysing the musical composition in an essay.
["Green, L 2021, <i>Ratios 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Ratios 2 of 4
    I prepared to jail the criminals.
  I did this by preventing the burglary.
  First, I contacted the burglary.
  Second, I reported the criminals to them.
  Third, I described the criminals to the police.
  In this way, I prepared to jail the criminals by preventing the burglary.
   I prepared to write a pop philosophy.
  I did this by driving the man for preventative treatment.
  First, I found the man.
  Second, I started the car's ignition.
  Third, I drove the man to hospital.
  In this way, I prepared to write a pop philosophy by driving the man for preventative treatment.
    I prepared to find the princess character to marry the frog character.
  I did this by sighting the frog character.
  First, I sighted his neck crown.
  Second, I sighted his webbed feet.
  Third, I sighted the spheres at the end of his toes.
  In this way, I prepared to find the princess character to marry the frog character by sighting the frog character.
   I prepared to record rewards from God.
  I did this by displaying the ratio in the philosophy magazine.
  First, I wrote.
  Second, I wrote the delimiter colon ':'.
  Third, I wrote.
  In this way, I prepared to record rewards from God by displaying the ratio in the philosophy magazine.
   I prepared to go to positive peaks.
  I did this by observing that the stone fortress helped people avoid negative ruts.
  First, I identified the rut.
  Second, I avoided it.
  Third, I was protected in the stone fortress.
  In this way, I prepared to go to positive peaks.
  I did this by observing that the stone fortress helped people avoid negative ruts.
   I prepared to observe the man enter the office.
  I did this by observing the man cross the road.
  First, I observed him stand at the side of the road.
  Second, I observed him start to cross the road.
  Third, I observed him until he had finished crossing the road.
  In this way, I prepared to observe the man enter the office by observing him cross the road.
   I prepared to train students to earn higher grades.
  I did this by selling the pedagogy screen en masse.
  First, I sold the pedagogy screen, instructions about how to earn A grade using it, and what to aim for with A grade, to the first, person.
  Second, I prepared to sell them to the next person.
  Third, I repeated this until I had sold them to all the people in the set, or 'en-masse'.
  In this way, I prepared to train students to earn higher grades by selling the pedagogy screen en masse.
   I prepared to listen to the movie.
  I did this by outlawing robot weapons (programmed the robot to read the book).
  First, I programmed the robot to intertwine her voice with reasons represented by the 250 breasonings per page of the book.
  Second, I prepared the inflection of the voice reading the line from the story.
  Third, I programmed the robot to dramatically read the line from the story.
  In this way, I prepared to listen to the movie by outlawing robot weapons (programmed the robot to read the book).
    I prepared to prolong life (removing causes of death).
  I did this by determining that the robot meant people would live for longer.
  First, I programmed the robot to compile pedagogical argument for each departmental object experienced.
  Second, I programmed the robot to compile 50 pedagogical arguments for each departmental object experienced.
  Third, I programmed the robot to take care of the person by compiling 50 pedagogical arguments for each medicinal object (e.
 causing happiness by preventing psychiatric sadness causes) experienced.
  In this way, I prepared to prolong life (removing causes of death) by determining that the robot meant people would live for longer.
  I prepared to start a family.
  I did this by taking care of the woman.
  First, I took care of her health.
  Second, I took care of her wealth.
  Third, I took care of her wisdom.
  In this way, I prepared to start a family by taking care of the woman.
["Green, L 2021, <i>Ratios 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Ratios 3 of 4
   I prepared to create a brain mousse.
  I did this by writing a book for my brain.
  First, I wrote a part about my senses.
  Second, I wrote a part about my memory and cognition.
  Third, I wrote a part about my muscles.
  In this way, I prepared to create a brain mousse by writing a book for my brain.
   I prepared to examine the noumenon.
  I did this by using the trivium.
  First, I applied geometry to an idea.
  Second, I applied logic to the idea.
  Third, I applied grammar to the idea.
  In this way, I prepared to examine the noumenon by using the trivium.
   I prepared to create the univer-sity.
  I did this by observing that the non-cosmologist was protected when she paid the cosmologist meditation teacher for meditation training.
  First, I delivered yogic training in meditation and medicine.
  Second, I delivered business training in economics, pedagogical training, theological protection and development of specific area of study.
  Third, I delivered professor training in creative writing, theatre, music, fine arts, film, etc.
  In this way, I prepared to create the univer-sity by observing that the non-cosmologist was protected when she paid the cosmologist meditation teacher for meditation training.
   I prepared to facilitate book presentations.
  I did this by operating the book club.
  First, I read the first book, reviewed and rated it.
  Second, I read the next book, the review and rating of which interested me.
  Third, I repeated this until I had read all the books from an era.
  In this way, I prepared to facilitate book presentations by operating the book club.
  I prepared to attain famous status in the department.
  I did this by becoming a professor.
  First, I wrote books.
  Second, I analysed the material using professorial ways of thinking (breasoning 20 breasonings out per sentence).
  Third, I, earned the prerequisite qualifications.
  In this way, I prepared to attain famous status in the department by becoming a professor.
   I prepared to demonstrate sentient knowledge about grammar.
  I did this by writing 10 (20) breasonings per sentence in my philosophy.
  First, I decided to write about broccoli.
  Second, I wrote 10 breasonings about it as a pedagogue.
  Third, I wrote a further 10 about it as a professor.
  In this way, I prepared to demonstrate sentient knowledge about grammar by writing 10 (20) breasonings per sentence in my philosophy.
   I prepared to show how the doll's digestive system was like a human's digestive system.
  I did this by simulating the doll eating broccoli.
  First, I explained to the listener that I didn't mean the doll actually ate the broccoli.
  Second, I explained to the listener that I didn't mean that the broccoli ate the doll.
  Third, I explained to the listener that I didn't mean a homophonous phrase 'dollie ting broccoli,' meaning that the doll appeared to strike a chime in the broccoli.
  In this way, I prepared to show how the doll's digestive system was like a human's digestive system by simulating the doll eating broccoli.
   I prepared to paint ideas when writing my thesis.
  I did this by writing the thesis.
  First, I wrote a Derridean story.
  Second, I wrote an algorithm.
  Third, I reordered and synthesized the parts of the algorithm.
  In this way, I prepared to paint ideas when writing my thesis by writing the thesis.
   I prepared to write down one idea at a time.
  I did this by taking notes during the lecture.
  First, I creatively structured the secondary text.
  Second, I wrote it.
  Third, I verified it.
  In this way, I prepared to write down one idea at a time by taking notes during the lecture.
   I prepared to create a tofu ice cream pyramid.
  I did this by scooping the tofu ice cream.
  First, I held the scoop.
  Second, I scooped a scoop of tofu ice cream.
  Third, I continued to place scoops of tofu ice cream in the bowl until there were enough scoops.
  In this way, I prepared to create a tofu ice cream pyramid by scooping the tofu ice cream.
["Green, L 2021, <i>Ratios 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Ratios 4 of 4
    I prepared to simulate feeding the dinosaur whale.
  I did this by simulating the dinosaur whale.
  First, I created the dinosaur whale's paper head.
  Second, I created the dinosaur whale's paper body.
  Third, I created the dinosaur whale's paper tail.
  In this way, I prepared to simulate feeding the dinosaur whale by simulating the dinosaur whale.
   I prepared to eat the tofu chocolate ice cream.
  I did this by eating the vegan casserole.
  First, I ate the rice.
  Second, I ate the carrot.
  Third, I ate the celery.
  In this way, I prepared to eat the tofu chocolate ice cream by eating the vegan casserole.
["Green, L 2021, <i>Subject Mix 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Subject Mix 1 of 4
 After reading a narratology page giving the following structure of subjects:
author - reader
narrator - addressee(s)
character - character(s)
 I spoke with a friend and she said the subjects the subjects addressed could be mixed up.
 For example, the narrator could address the reader, or the author could address a character.
     I prepared to present the stage play.
  I did this by stating that the writer, reader and character understood (met) each other.
  First, I wrote that the writer and reader met each other.
  Second, I wrote that the reader and character met each other.
  Third, I wrote that the character and writer met each other.
  In this way, I prepared to present the stage play by stating that the writer, reader and character understood (met) each other.
    I prepared to show the writer, reader and character interacting with each other during the stage play.
  I did this by stating that the writer, reader and character entered each other's worlds.
  First, I wrote that the writer and reader entered each other's worlds.
  Second, I wrote that the reader and character entered each other's worlds.
  Third, I wrote that the character and writer entered each other's worlds.
  In this way, I prepared to show the writer, reader and character interacting with each other during the stage play by stating that the writer, reader and character entered each other's worlds.
     I prepared to represent plainness.
  I did this by writing about reiner (purity).
  First, I verified that no objects were inside the object.
  Second, I verified that no objects were directly outside the object.
  Third, I wrote that the object was present in mass.
  In this way, I prepared to represent plainness by writing about reiner (purity).
    I prepared to write that the mix configurations were neat.
  I did this by determining how the writer, reader and character should be mixed.
  First, I wrote that the writer, reader and character were characters.
  Second, I rotated their roles by one.
  Second, I rotated their roles again by one.
  Third, I.
  In this way, I prepared to write that the mix configurations were neat by determining how the writer, reader and character should be mixed.
    I prepared to rotate need for skills.
  I did this by mixing the subjects.
  First, I gave the woodcutter the fireman's job.
  Second, I gave the fireman the gardener's job.
  Third, I gave the gardener the woodcutter's job.
  In this way, I prepared to rotate need for skills by mixing the subjects.
    I prepared to see Rapunzel.
  I did this by climbing up a hair rope.
  First, I started at the bottom.
  Second, I climbed up the hair rope.
  Third, I stopped when I had reached the top.
  In this way, I prepared to see Rapunzel by climbing up a hair rope.
    I prepared to read Darwin's examination of the specimen.
  I did this by reading that Darwin released the specimen.
  First, I read that he had found the specimen.
  Second, I read that he examined the specimen.
  Third, I read that he released the specimen.
  In this way, I prepared to read Darwin's examination of the specimen by reading that Darwin released the specimen.
    I prepared to take out the tissue.
  I did this by touching the plastic square with a hole in it.
  First, I found the plastic square.
  Second, I grasped it.
  Third, I put my finger through the hole in the plastic square.
  In this way, I prepared to take out the tissue by touching the plastic square with a hole in it.
     I prepared to perform work using the automated machine.
  I did this by undoing an action.
  First, I performed an action.
  Second, I pressed 'Undo'.
  Third, I observed the computer undo the action.
  In this way, I prepared to perform work using the automated machine by undoing an action.
   I prepared to retrain employees.
  I did this by watching the business rotate weaknesses to remain strong.
  First, I gave the writer the translator's job.
  Second, I gave the translator the student's job.
  Third, I gave the student the writer's job.
  In this way, I prepared to retrain employees by watching the business rotate weaknesses to remain strong.
["Green, L 2021, <i>Subject Mix 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Subject Mix 2 of 4
    I prepared to verify the results of the Prolog computer.
  I did this by using the Prolog computer.
  First, I opened the Prolog computer.
  Second, I saw that the circuitry was designed to run Prolog code.
  Third, I ran the Prolog program.
  In this way, I prepared to verify the results of the Prolog computer by using the Prolog computer.
   I prepared to sign that I had won a mental duel.
  I did this by stating that I was right.
  First, I determined that I was right.
  Second, I found another person who agreed that I was right.
  Third, I announced that I was right.
  In this way, I prepared to sign that I had won a mental duel by stating that I was right.
    I prepared to feel haughty.
  I did this by observing the parrot breen (sic) the seed.
  First, I observed the parrot take the seed.
  Second, I observed the parrot open the seed.
  Third, I observed the parrot eat the seed.
  In this way, I prepared to feel haughty by observing the parrot breen (sic) the seed.
   I prepared to exist in the universe.
  I did this by listening to the philosopher querying what kinds of thresholds exist in the universe.
  First, I blessed the undeveloped breasoning to become developed.
  Second, I breasoned out the pedagogy degree, including the professor algorithm.
  Third, I breasoned out 80 breasonings to surpass the threshold for (earn an) A.
  In this way, I prepared to exist in the universe by listening to the philosopher querying what kinds of thresholds exist in the universe.
   I prepared to represent the universe.
  I did this by flying the black dot on the white background as the universe flag.
  First, I collected the white flag.
  Second, I printed a black circle on it.
  Third, I flew the flag.
  In this way, I prepared to represent the universe by flying the black dot on the white background as the universe flag.
   I prepared to represent Lord Lucian.
  I did this by flying Lord Lucian's flag.
  First, I found the stand.
  Second, I fixed the upper left corner of the flag to the upper left corner of the stand.
  Third, I fixed the upper right corner of the flag to the upper right corner of the stand.
  In this way, I prepared to represent Lord Lucian by flying Lord Lucian's flag.
   I prepared to publish a certain amount per year.
  I did this by writing the University journal article.
  First, I wrote the article.
  Second, I breasoned out 50 As.
  Third, I published the article in the journal.
  In this way, I prepared to publish a certain amount per year by writing the University journal article.
   I prepared to show the sculpture.
  I did this by writing the block sculpture.
  First, I created the sculpture.
  Second, I brainstormed the argument.
  Third, I wrote the argument.
  In this way, I prepared to show the sculpture by writing the block sculpture.
    I prepared to hand out food.
  I did this by agreeing with the flag.
  First, I verified the flag.
  Second, I cited that it had been checked.
  Third, I agreed with the flag.
  In this way, I prepared to hand out food by agreeing with the flag.
  I prepared to.
  I did this by writing 50 250 breasoning As for sales to academics.
  First, I installed LM (book-reading) in the fame-creating University.
  Second, I installed Pedagogy in the University.
  Third, I wrote a 250 breasoning argument containing the primary text and 4 secondary texts.
["Green, L 2021, <i>Subject Mix 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Subject Mix 3 of 4
   I prepared to be famous.
  I did this by contacting famousness by giving the next book 5 As.
  First, I looked on the informational retrieval system.
  Second, I chose a book in the same genre.
  Third, I gave 5 As to the next book.
  In this way, I prepared to be famous by contacting famousness by giving the next book 5 As.
   I prepared to be developed.
  I did this by breasoning out 50 As for a recording day.
  First, I breasoned out a 250 breasoning As.
  Second, I researched details for each of the other 15 As.
  Third, I verified the script.
  In this way, I prepared to be developed by breasoning out 50 As for a recording day.
   I prepared to be alive.
  I did this by breasoning out 50 As per day on a recording day.
  First, I learned meditation (read the book).
  Second, I practised meditation  (recited the book) before the recording.
  Third, I made the recording.
  In this way, I prepared to be alive by breasoning out 50 As per day on a recording day.
   I prepared to be well known.
  I did this by breasoning out 50 per important quote.
  First, I breasoned out a 250 breasoning As.
  Second, I researched details for each of the other 15 As.
  Third, I verified the quote.
  In this way, I prepared to be well known by breasoning out 50 per important quote.
  I prepared to exercise responsibility for a minor.
  I did this by going down the slide.
  First, I climbed the ladder of the slide.
  Second, I sat at the top of the slide.
  Third, I went down the slide.
  In this way, I prepared to exercise responsibility for a minor by going down the slide.
   I prepared to play Head of State.
  I did this by serving the pineapple.
  First, I cut the pineapple skin off and sliced it.
  Second, I placed a pineapple slice on a plate.
  Third, I served the pineapple to the first man.
  In this way, I prepared to play Head of State by serving the pineapple.
   I prepared to feed the people.
  I did this by eating the pomegranate seeds.
  First, I extracted the pomegranate seeds.
  Second, I placed them on a plate.
  Third, I ate them.
  In this way, I prepared to feed the people by eating the pomegranate seeds.
   I prepared to teach the 10 year-old child meditation (philosophy).
  I did this by preparing for the meditator (philosophical) baby.
  First, I learnt meditation (philosophy) from a teacher.
  Second, I practised meditating on 80 lucian mantras and 80 green sutras per (read philosophy each) day while the mother was pregnant.
  Third, I observed the uneventful birth.
  In this way, I prepared to teach the 10 year-old child meditation (philosophy) by preparing for the meditator (philosophical) baby.
   I prepared to enact my prayers (plans).
  I did this by worshipping God (talking to the master).
  First, I found the master.
  Second, I selected a topic of conversation.
  Third, I talked to the master.
  In this way, I prepared to enact my prayers (plans) by worshipping God (talking to the master).
   I prepared to adopt the baby.
  I did this by eating the lolly.
  First, I unwrapped the lolly.
  Second, I placed it in my mouth.
  Third, I lolled the lolly in my mouth.
  In this way, I prepared to adopt the baby by eating the lolly.
["Green, L 2021, <i>Subject Mix 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Subject Mix 4 of 4
    I prepared to throw a party.
  I did this by licking the rose jelly.
  First, I set the water, sugar and rose water in the freezer.
  Second, I retrieved the rose jelly from the freezer when it had set.
  Third, I ate the rose jelly.
  In this way, I prepared to throw a party by licking the rose jelly.
   I prepared to build the house.
  I did this by placing the brick on the cantilever.
  First, I created the cantilever by anchoring it at one end to a vertical beam, which it protrudes from.
  Second, I lifted the brick.
  Third, I placed it on the cantilever.
  In this way, I prepared to build the house by placing the brick on the cantilever.
["Green, L 2021, <i>Symbols 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Symbols 1 of 4
 Before experimentation with narratives, the functional parts (characters, motives and the constitutive objects' interrelations and settings) should be defined.
     I prepared to connect the object's properties together.
  I did this by thinking of Nietzsche write one paragraph with 250 breasonings per paragraph.
  First, I wrote about the integument (skin).
   Second, I wrote the reasoning.
  Third, I wrote the ideas.
  In this way, I prepared to connect the object's properties together by thinking of Nietzsche write one paragraph with 250 breasonings per paragraph.
    I prepared to grip the object that I had sensed.
  I did this by observing my body working.
  First, I observed my hand working.
  Second, I observed my brain working.
  Third, I observed my mind working.
  In this way, I prepared to grip the object that I had sensed by observing my body working.
     I prepared to earn the job.
  I did this by examining the moment of making a statement.
  First, I identified the mistake (positive statement).
  Second, I wrote a statement instead of (about) it.
  Third, I developed the moment of the statement by thinking of perspectives about it.
  In this way, I prepared to earn the job by examining the moment of making a statement.
    I prepared to connect the aphor steps together.
  I did this by selecting from the aphor steps when writing the new essay.
  First, I calculated the answer.
  Second, I processed the rest of the data.
  Third, I printed the data in a user-friendly format, which I selected to make the substrate of understanding.
  In this way, I prepared to connect the aphor steps together by selecting from the aphor steps when writing the new essay.
    I prepared to write a perfect short story.
  I did this by connecting 19 sentences (from 190/10 words/sentence) in an English short story.
  First, I wrote the event in the choose-your-own-world story.
  Second, I wrote down the list of pages to visit, in conjunction on the page containing the first event.
  Third, I wrote down the list of pages able to be visited, in disjunction on the page containing the first event.
  In this way, I prepared to write a perfect short story by connecting 19 sentences (from 190/10 words/sentence) in an English short story.
    I prepared to interrelate objects.
  I did this in the English version (10*19 sentences) by working out the argument from the structure applied to objects.
  First, I determined interestingness to mean that an object contained a centre.
  Second, I found that usefulness was signified by the object being recognized as able to help the human to perform a function unable to be performed by the human alone.
  Third, I computed that moral integrity was defined as a relationship with people involving an object.
  In this way, I prepared to interrelate objects in the English version (10*19 sentences) by working out the argument from the structure applied to objects.
    I prepared to be glory empersonified (sic).
  I did this by in the Theological version (10*19 sentences) by working out the argument from the structure applied to people.
  First, I attain strength of mind by not giving up.
  Second, I achieved power by powering other people.
  Third, I gained glory by creating a wonderful system that would last in time.
  In this way, I prepared to be glory empersonified (sic) in the Theological version (10*19 sentences) by working out the argument from the structure applied to people.
    I prepared to inspire art with life during the seasons.
  I did this by drawing a 19-pixel icon from objects' values and values of people, each in 10*19 sentences.
  First, I drew the fauve.
  Second, I drew the seasons.
  Third, I drew the reason d'etre.
  In this way, I prepared to inspire art with life during the seasons by drawing a 19-pixel icon from breasoning out objects' values and values of people, each in 10*19 sentences.
     I prepared to give the students a reason to work.
  I did this by helping the students to work because of objects' values and values of people, each in 10*19 sentences.
  First, I wrote that the famous text should satisfy particular criteria (with valued numbers) of people.
  Second, I wrote that the correct text should satisfy particular criteria (with valued numbers) of objects.
  Third, I wrote the intersection of these.
  In this way, I prepared to give the students a reason to work by helping the students to work because of objects' values and values of people, each in 10*19 sentences.
   I prepared to approve of the secondary text author resuscitating the idea using her values.
  I did this by helping the secondary text authors because of objects' values and values of people, each in 10*19 sentences.
  First, I wrote about the Renaissance.
  Second, I wrote about the oeuvre.
  Third, I wrote the philosophy.
  In this way, I prepared to approve of the secondary text author resuscitating the idea using her values by helping the secondary text authors because of objects' values and values of people, each in 10*19 sentences.
["Green, L 2021, <i>Symbols 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Symbols 2 of 4
    I prepared to discover what was beyond each pedagogical threshold.
  I did this by aiding the text to be selected by writing objects' values and values of people, each in 10*19 sentences.
  First, I wrote the vocational skills in object-value form.
  Second, I wrote the narrative-like areas of study in people-value form.
  Third, I wrote about the trials and travails of being a vocational pedagogue.
  In this way, I prepared to discover what was beyond each pedagogical threshold by aiding the text to be selected by writing objects' values and values of people, each in 10*19 sentences.
   I prepared to teach meditation (philosophy).
  I did this by designing the meditation (philosophy) teaching business.
  First, I installed the web site.
  Second, I uploaded the courseware.
  Third, I advertised the courses.
  In this way, I prepared to teach meditation (philosophy) by designing the meditation (philosophy) teaching business.
    I prepared to show that there was a university in each country.
  I did this by designing the self-generating University.
  First, I found the people.
  Second, I helped them to write secondary texts and tenure documents.
  Third, I was granted funding for accreditation.
  In this way, I prepared to show that there was a university in each country by designing the self-generating University.
   I prepared to verify society using breasoning currency.
  I did this by writing the Economics thesis.
  First, I used breasoning currency to verify the self's purchases.
  Second, I used breasoning currency to verify the other's purchases.
  Third, I used breasoning currency to verify everyone's purchases.
  In this way, I prepared to verify society using breasoning currency by writing the Economics thesis.
   I prepared to be a professor.
  I did this by writing the Economics thesis framework.
  First, I wrote the first of the 32 10-breasoning As and wrote how it related to the topic.
  Second, I prepared to write the next 10-breasoning A, and wrote how it related to the topic.
  Third, I repeated this until I had written 32 10-breasoning As and had written how it related to the topic.
  In this way, I prepared to be a professor by writing the Economics thesis framework.
   I prepared to feel the temperature.
  I did this by feeling like Plato because it was cold.
  First, I found the jumper.
  Second, I put it on, over my head.
  Third, I inserted my arms in the arms of the jumper.
  In this way, I prepared to feel the temperature by feeling like Plato because it was cold.
   I prepared to teach Medicine (Medicine, Pedagogy and Meditation (Philosophy)) and Arts (Computational English), and Art later (Creative Writing, etc.
  I did this by opening the philosophy business.
  First, I wrote the Mission Statement of the school.
  Second, I appointed the private school committee.
  Third, I researched the state's curriculum requirements.
  In this way, I prepared to teach Medicine (Medicine, Pedagogy and Meditation (Philosophy)) and Arts (Computational English), and Art later (Creative Writing, etc.
) by opening the philosophy business.
   I prepared to make Lucian's meditation (philosophy) supplement philosophy as central.
  I did this by connecting Plato's basis on philosophy with Lucian's basis on meditation (philosophy).
  First, I observed that meditation (philosophy) enabled me to write with fewer mistakes.
  Second, I observed that meditation (philosophy) enabled me to paint objects more accurately.
  Third, I observed that meditation (philosophy) enabled me to sing more clearly.
  In this way, I prepared to make Lucian's meditation (philosophy) supplement philosophy as central by connecting Plato's basis on philosophy with Lucian's basis on meditation (philosophy).
    I prepared to be a great thinker.
  I did this by connecting Socrates' idea to aim to think with Lucian's philosophy.
  First, I thought and found that the main conclusion of pedagogy was determining the essay mark.
  Second, I thought and found that the main conclusion of meditation (writing) was creating a working meditation system.
  Third, I thought and found that the main conclusion of medicine was determining achieving no mental breakdowns.
  In this way, I prepared to be a great thinker by connecting Socrates' idea to aim to think with Lucian's philosophy.
  I prepared to claim centrality means philosophy.
  I did this by connecting Aristotle's virtue as a mean to Lucian's philosophy.
  First, I wrote Aristotle's virtue as a mean connected with Lucian's meditation (philosophy) resulted in thinking of higher thoughts in meditation.
  Second, I wrote Aristotle's virtue as a mean connected with Lucian's medicine resulted in thinking of the blood cell, reminding one of creative philosophy.
  Third, I wrote Aristotle's virtue as a mean connected with Lucian's pedagogy resulted in the thoughts being in the centre.
  In this way, I prepared to claim centrality means philosophy by connecting Aristotle's virtue as a mean to Lucian's philosophy.
["Green, L 2021, <i>Symbols 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Symbols 3 of 4
   I prepared to position the best people throughout the world and it's states.
  I did this by connecting Nietzsche's Übermensch with Lucian's philosophy.
  First, I connected Nietzsche's Übermensch with Computational English by stating to find the best person in terms of speed of achieving her goal.
  Second, I connected Nietzsche's Übermensch with Economics by providing enough breasoning currency to make everyone the equal best, to rotate socioeconomic status by geographic location.
  Third, I connected Nietzsche's Übermensch with Lucian's autobiography by rewarding meditation (philosophy) teaching effort.
  In this way, I prepared to position the best people throughout the world and it's states by connecting Nietzsche's Übermensch with Lucian's philosophy.
   I prepared to dialectise my philosophy.
  I did this by connecting Heidegger's Question and Answer with Lucian's Medicine.
  First, I connected Heidegger's Question and Answer with Lucian's Pedagogy by answering essay questions.
  Second, I connected Heidegger's Question and Answer with Lucian's Medicine by diagnosing certain medical disorders and prescribing certain treatments.
  Third, I connected Heidegger's Question and Answer with Lucian's Meditation (Philosophy) by verifying that the Hours Prayer (argument) had been demanded and supplied.
  In this way, I prepared to dialectise my philosophy by connecting Heidegger's Question and Answer with Lucian's Medicine.
   I prepared to become a tutor by attending the Logic Summer School and finished Philosophy Honours by speaking at 3 international conferences.
  I did this by connecting Wittgenstein's language as reduced to object or grammar with Lucian's philosophy.
  First, I connected Wittgenstein's language as reduced to object or grammar with Lucian's Culturology by representing the sea with the metaphor the hand, or stating that 'I swam in the sea'.
  Second, I connected Wittgenstein's language as reduced to object or grammar with Lucian's Epistemology by writing creative writing theory (praxemes, or lines to write about), e.
 write about: apples, and contrast praxemes using the objects.
  Third, I connected Wittgenstein's language as reduced to object or grammar with Lucian's Gay Studies by writing I held her hand and I walked with him.
  In this way, I prepared to become a tutor by attending the Logic Summer School and finished Philosophy Honours by speaking at 3 international conferences by connecting Wittgenstein's language as reduced to object or grammar with Lucian's philosophy.
   I prepared to connect Foucault's episteme with Societology by mulling over social malhesian (sic).
  I did this by connecting Foucault's episteme with Lucian's philosophy.
  First, I connected Foucault's episteme with Hermeneutics by connecting spatial and temporal evidence with interpretation.
  Second, I connected Foucault's episteme with Communication by stating the evidence at the start of the conversation, not at the end.
  Third, I connected Foucault's episteme with Popology by making cultural observations about people with evidence.
  In this way, I prepared to connect Foucault's episteme with Societology by mulling over social malhesian (sic) by connecting Foucault's episteme with Lucian's philosophy.
  I prepared to connect deconstruction with supplement by stating the meaning had an original reason.
  I did this by connecting Derrida's deconstruction with Lucian's philosophy.
  First, I found the supplement (secondary thought from the following that is original or natural) of pedagogy was oppressiveness (freedom).
  Second, I found the supplement of medicine was reaching nothingness.
  Third, I found the supplement of meditation (philosophy) was bliss.
  In this way, I prepared to connect deconstruction with supplement by stating the meaning had an original reason by connecting Derrida's deconstruction with Lucian's philosophy.
   I prepared to open the book and find the correct character (symbol).
  I did this by finding the symbol.
  First, I opened the book.
  Second, I looked for the symbol.
  Third, I found the symbol.
  In this way, I prepared to open the book and find the correct character (symbol) by finding the symbol.
   I prepared to keep (remember) the secret (fact).
  I did this by finding the secret (fact).
  First, I opened the box.
  Second, I read the text.
  Third, I decrypted (understood) the secret (fact).
  In this way, I prepared to keep (remember) the secret (fact) by finding the secret (fact).
   I prepared to eat the apple.
  I did this by stating the pixie asked why I found the secret.
  First, I looked at the object.
  Second, I wrote the name of the object, the secret.
  Third, I stated that the pixie asked why I found the name apple.
  In this way, I prepared to eat the apple by stating the pixie asked why I found the secret.
   I prepared to state that the yodeler represented the sun, which one of three A must be give to, meaning it's like us, to deserve to pray for (write) 50 As.
  I did this by making the yodeler diorama.
  First, I made the cardboard yodeler.
  Second, I made the background diorama.
  Third, I made the yodeler puppet appear to walk along the path.
  In this way, I prepared to state that the yodeler represented the sun, which one of three A must be give to, meaning it's like us, to deserve to pray for (write) 50 As by making the yodeler diorama.
   I prepared to reverse-engineer the bean process.
  I did this by beaning (sic) the peas.
  First, I found the peas.
  Second, I attached them to a bean.
  Third, I ate the bean.
  In this way, I prepared to reverse-engineer the bean process by beaning the peas.
["Green, L 2021, <i>Symbols 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
Symbols 4 of 4
    I prepared to create heaven (school) on earth.
  I did this by beasoning (sic) the carrots.
  First, I peeled the carrot.
  Second, I attached the peel to the carrot.
  Third, I ate the carrot.
  In this way, I prepared to create heaven (school) on earth by beasoning (sic) the carrots.
   I prepared to tell Xochi what the similar statement meant, that it was a way.
  I did this by stating that I love being with you.
  First, I found you.
  Second, I stayed with you.
  Third, I stated that I loved being with you.
  In this way, I prepared to tell Xochi what the similar statement meant, that it was a way by stating that I love being with you.
   I prepared to move to a new house.
  I did this by ramping up the desk.
  First, I held the desk at he bottom of the ramp.
  Second, I walked up the ramp.
  Third, I placed the ramp in the corner.
  In this way, I prepared to move to a new house by ramping up the desk.
   I prepared to make a new connection.
  I did this by writing rhetoric.
  First, I wrote A->B.
  Second, I wrote C->D.
  Third, I wrote, as A->B, C->D.
  In this way, I prepared to make a new connection by writing rhetoric.
   I prepared to prepare for the debriefing.
  I did this by taking the witch's hat.
  First, I walked to the cone.
  Second, I removed it.
  Third, I placed it I the correct section of the sports supplies.
  In this way, I prepared to prepare for the debriefing by taking the witch's hat.
   I prepared to observe the robot guide the blind person.
  I did this by observing the robot dog walk in a straight line.
  First, I placed the robot dog on the line.
  Second, I observed it start to walk along the line.
  Third, I observed it complete the walk along the line.
  In this way, I prepared to observe the robot guide the blind person by observing the robot dog walk in a straight line.
   I prepared to try after meditating (writing).
  I did this by examining the idea in time and space.
  First, I examined the idea in time.
  Second, I examined the idea in space.
  Third, I examined how the idea worked in different combinations of time and space.
  In this way, I prepared to try after meditating (writing) by examining the idea in time and space.
   I prepared to count the number of As.
  I did this by counting the beans with you.
  First, I counted the first breasoning.
  Second, I prepared to count the next bean.
  Third, I repeated this until I had counted all the beans.
  In this way, I prepared to count the number of As by counting the beans with you.
   I prepared to close down the business the week (LM centre) or month (school) it starts losing money.
  I did this by working on my vocation.
  First, I invested in myself.
  Second, I created and tested products.
  Third, I began to know you.
  In this way, I prepared to close down the business the week (LM centre) or month (school) it starts losing money by working on my vocation.
  I prepared to write on philosophy.
  I did this by visiting a particular city and setting up a meditation (philosophy) centre and school.
  First, I visited the city.
  Second, I set up a meditation (philosophy) centre.
  Third, I set up a school.
  In this way, I prepared to write on philosophy by visiting a particular city and setting up a meditation (philosophy) centre and school.
   I prepared to make As available through a system for a fee.
  I did this by setting up a university.
  First, I established a fund.
  Second, I found a source of teachers.
  Third, I found a source of equipment.
  In this way, I prepared to make As available through a system for a fee by setting up a university.
   I prepared to teach meditation with a non-religious seen-as-version at University.
  I did this by writing 'a man' in brackets after God's name at the University.
  First, I wrote God's (the man's) name.
  Second, I wrote the breasoning chapters in this way.
  Third, I wrote the essays in this way.
  In this way, I prepared to teach meditation with a non-religious seen-as-version at University by writing 'a man' in brackets after God's name at the University.
["Green, L 2021, <i>The Science of Crossing Over 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
The Science of Crossing Over 1 of 4
 The first technique is limited in terms of a content-filled framework for analysing texts cognitively.
 The 'cognitive science' perspective in Computational English should deal with critical questions arising from events and interchanges between characters, and changes within individual characters.
 Information from such analysis may be for example abductive conclusions about what a character has done, or deductive conclusions about what a character is or will be doing.
 Naturally, this may apply to real-life situations.
 There are air-traffic control systems which analyse dialogue for example.
 Character interrelationships are one of the important points examine critically as they give the 'human side' of the events in the play.
An example is: 'Peter saw a crocodile', 'Andrew drew it', therefore 'Andrew drew the crocodile'.
     I prepared to observe the character arguing for the other character.
  I did this by writing that I (the self) was at one with you (the other).
  First, I observed the first character sitting down.
  Second, I observed the second character sitting next to her.
  Third, I observed the first character touching the second character.
  In this way, I prepared to observe the character arguing for the other character by writing that I (the self) was at one with you (the other).
    I prepared to think more than not.
  I did this by surpassing meditation (in fact, surpassing philosophy).
  First, I wrote the philosophy.
  Second, I surpassed it.
  Third, I thought of nothing.
  In this way, I prepared to think more than not by surpassing meditation (in fact, surpassing philosophy).
     I prepared to write the use for the group of connections about the knowledge.
  I did this by practicing the mantra (in fact, reading the book of knowledge).
  First, I opened the book.
  Second, I turned to the correct page.
  Third, I read the knowledge.
  In this way, I prepared to think more than not by surpassing meditation (in fact, surpassing philosophy).
    I prepared to be mentally well.
  I did this by practicing the sutra (in fact, reading the book of psychiatric knowledge).
  First, I read the book.
  Second, I read the part of it suggesting to keep a group of friends.
  Third, I read about the group of friends maintaining group dynamics (helping each other out using 5 minute light-temperature-sound self-coaching).
  In this way, I prepared to be mentally well by practicing the sutra (in fact, reading the book of psychiatric knowledge).
    I prepared to.
  I did this by living the life of a monastic (in fact, philosopher).
  First, I led meditation class (expand on the book of knowledge).
  Second, I led yoga (in fact, stretching) class.
  Third, I led reading (in fact, journal writing) retreats.
    I prepared to improve my health.
  I did this by visiting the Lucianic doctor of medicine.
  First, he prevented schizophrenia.
  Second, he prevented the cold.
  Third, he prevented depression.
  In this way, I prepared to improve my health by visiting the Lucianic doctor of medicine.
    I prepared to clear my nostrils.
  I did this by performing pranayama (drinking the glass of water).
  First, I placed the glass underneath the tap.
  Second, I filled the glass with water.
  Third, I drank the glass of water.
  In this way, I prepared to clear my nostrils by performing pranayama (drinking the glass of water).
    I prepared to sitting with no excess gas in my digestive system.
  I did this by regulating soma (eating foods without too much salt).
  First, I found the apple.
  Second, I picked the apple.
  Third, I ate the apple.
  In this way, I prepared to sitting with no excess gas in my digestive system by regulating soma (eating foods without too much salt).
     I prepared to observe God (in fact, people) loving people.
  I did this by finding that meditation (philosophy) was professional.
  First, I watched the meditation utterance (query) register.
  Second, I watched the God give Himself a reaction about it (I watched the clerk write a reply on a card).
  Third, I watched the meditator (philosophy student) look at something high quality every time she looked at something.
  In this way, I prepared to observe God loving people by finding that meditation (philosophy) was professional.
   I prepared to take care of the meditation group after I died (I prepared to write a business model to take care of the philosophy school after I died).
  I did this by performing the tasks of the Lord of meditation (teacher of philosophy).
  First, I established new meditation centres (philosophy schools).
  Second, I taught meditation to students (I taught philosophy to students).
  Third, I spent time doing nothing.
  In this way, I prepared to take care of the meditation group after I died (I prepared to write a business model to take care of the philosophy school after I died) by performing the tasks of the Lord of meditation (teacher of philosophy).
["Green, L 2021, <i>The Science of Crossing Over 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
The Science of Crossing Over 2 of 4
    I prepared to be crystal clear in my vision episodes.
  I did this by teaching medicine students to avoid schizophrenic episodes (follow the positive functional path).
  First, I took care of my vision.
  Second, I took care of you.
  Third, I took care of us.
  In this way, I prepared to be crystal clear in my vision episodes by teaching medicine students to avoid schizophrenic episodes (follow the positive functional path).
   I prepared to use pedagogy skills during my career.
  I did this by explaining the essence of the pedagogy degree.
  First, I performed the pedagogy skill.
  Second, the people detected this using the high quality algorithm available.
  Third, I had high quality thoughts.
  In this way, I prepared to use pedagogy skills during my career by explaining the essence of the pedagogy degree.
    I prepared to observe God (in fact, relatives) performing miracles for (loving) people by training them in being psychiatrically fit with 80 sutras, each triggering 5 breasonings to be expanded to 50 breasonings, for a total of 50 As (with 80 breasonings each).
  I did this by explaining the essence of the meditation sutra degree.
  First, I watched the meditation sutra (question) register.
  Second, I watched the God give Himself a reaction, five breasonings about it, lit up by recordings of 50 breasonings  (I watched the superintendent write a reply on a sheet of paper).
  Third, I watched the meditator (popology student) look at something perfect every time he looked at something.
  In this way, I prepared to observe God (in fact, relatives) performing miracles for (loving) people by training them in being psychiatrically fit with 80 utterances, each triggering 5 breasonings to be expanded to 50 breasonings, for a total of 50 As (with 80 breasonings each) by explaining the essence of the meditation sutra degree.
   I prepared to record the people's reaction.
  I did this by explaining the essence of the Computational English degree.
  First, I observed the criminal planning and committing the crime.
  Second, I tried the criminal.
  Third, I agreed with punishment by jail sentence.
  In this way,
I prepared to record the people's reaction by explaining the essence of the Computational English degree.
   I prepared to relate character details to breasonings.
  I did this by writing the sequence of the Lucian Green autobiography course.
  First, I wrote the song 'Anarchy'.
  Second, I wrote the philosophy web site.
  Third, I held a Lucianic Meditation (LM) group meditation session.
  In this way, I prepared to relate breasonings to character details by writing the sequence of the Lucian Green autobiography course.
   I prepared to relate music details to breasonings.
  I did this by writing the Lucian Green's music minor course.
  First, I wrote the Anarchy song course materials.
  Second, I wrote the Abracadabra song (on Pedagogy) course materials.
  Third, I wrote the Abracadabra 2 song (on Meditation) course materials.
  In this way, I prepared to relate music details to breasonings by writing the Lucian Green's music minor course.
   I prepared to live in a new home.
  I did this by designing the atrium.
  First, I designed the floor.
  Second, I designed the columns.
  Third, I designed the ceiling.
  In this way, I prepared to live in a new home by designing the atrium.
   I prepared to design the cubic seat.
  I did this by designing the polyhedron.
  First, I designed the cube's base.
  Second, I designed the cube's sides.
  Third, I designed the cube's top.
  In this way, I prepared to design the cubic seat by designing the polyhedron.
    I prepared to picture the life and times of the street.
  I did this by sketching the street from an excavation.
  First, I recorded the location of the street.
  Second, I recorded the location of the amphora next to the street.
  Third, I sketched the street and amphora.
  In this way, I prepared to picture the life and times of the street by sketching the street from an excavation.
  I prepared to use my brain, instead of losing its function.
  I did this by stating that the LM group meditation (philosophy) session kept life moving for a week.
  First, I kept my brain neuroplastic by programming a breasoning algorithm.
  Second, I prepared to repeat this on the next day.
  Third, I repeated this until the end of the week.
  In this way, I prepared to use my brain, instead of losing its function by stating that the LM group meditation (philosophy) session kept life moving for a week.
["Green, L 2021, <i>The Science of Crossing Over 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
The Science of Crossing Over 3 of 4
   I prepared to translate the document written in Vedic Sanskrit into Classical Sanskrit.
  I did this by contrasting the verb 'to be' in Vedic and Classical Sanskrit.
  First, I wrote that the verb 'be' is 'as' in Vedic Sanskrit, is in the second conjugational class and has Present Indicative, Subjunctive, Injunctive, Optative, Imperative, Participle, Imperfect and Perfect parts of the verb.
  Second, I wrote that the verb 'be' is 'as' in Classical Sanskrit, is in the second conjugational class and has an Imperfect, Imperative, Optative and Perfect parts of the verb.
  Third, I concluded that the general meaning of the Vedic Sanskrit Injunctive part of the verb expresses a desire, e.
 'Let them be leaders'.
  In this way, I prepared to translate the document written in Vedic Sanskrit into Classical Sanskrit by contrasting the verb 'to be' in Vedic and Classical Sanskrit.
   I prepared to interpret the speaker speaking Vedic Sanskrit for a Classical Sanskrit-speaking audience.
  I did this by contrasting the verb 'attain' in Vedic and Classical Sanskrit.
  First, I wrote that the verb 'attain' is 'aṃś' in Vedic Sanskrit, is in the fifth conjugational class and has Present Indicative, Subjunctive, Imperative, Participle, Perfect, Subjunctive, Optative, Participle, Perfect, Aorist, Injunctive, Precative, Subjunctive, and Infinitive parts of the verb.
  Second, I wrote that the verb 'attain' is 'aś' in Classical Sanskrit, is in the fifth conjugational class and has an Imperfect, Imperative, Optative and Perfect parts of the verb.
  Third, I concluded that the Vedic Sanskrit Present Indicative part of the verb is a statement of a fact in the present, that 'I attain the goal'.
  In this way, I prepared to interpret the speaker speaking Vedic Sanskrit for a Classical Sanskrit-speaking audience by contrasting the verb 'attain' in Vedic and Classical Sanskrit.
   I prepared to teach the difference between Vedic Sanskrit and Classical Sanskrit.
  I did this by contrasting the preposition 'eat' in Vedic and Classical Sanskrit.
  First, I wrote that the verb 'eat' is 'ad' in Vedic Sanskrit, is in the second conjugational class and has Present Indicative, Subjunctive, Optative, Imperative, Participle, Imperfect, Future, [Present, Aorist, Past Participle], Gerund, Infinitive and Causative parts of the verb.
  Second, I wrote that the verb 'eat' is 'ad' in Classical Sanskrit, is in the second conjugational class and has an Imperfect, Imperative, Optative, Future, Passive, [Present, Aorist, Participle], Gerund, Infinitive and Causative parts of the verb.
  Third, I concluded that the Vedic Sanskrit Subjunctive part of the verb is a suggestion, wish, etc.
 using 'I were' and other specific verb forms.
  In this way, I prepared to teach the difference between Vedic Sanskrit and Classical Sanskrit by contrasting the preposition 'eat' in Vedic and Classical Sanskrit.
   I prepared to write in the language of the Gods 'Vedic Sanskrit', by translating a document written in Classical Sanskrit into it.
  I did this by contrasting the verb 'to go' in Vedic and Classical Sanskrit.
  First, I wrote that the verb 'go' is 'i' in Vedic Sanskrit, is in the second conjugational class and has Present Indicative, Subjunctive, Injunctive, Optative, Imperative, Participle, Imperfect, Injunctive, Imperative, Present Indicative, Imperfect, Perfect, Participle, Pluperfect, Future, [Present, Aorist, Past Participle], Gerund and Infinitive parts of the verb.
  Second, I wrote that the verb 'go' is 'i' in Classical Sanskrit, is in the second conjugational class and has an Imperfect, Imperative, Optative, Perfect, Future, Passive, Participle and Causative parts of the verb.
  Third, I concluded that the Classical Sanskrit Imperfect part of the verb is given by the example, 'I was going'.
  In this way, I prepared to write in the language of the Gods 'Vedic Sanskrit', by translating a document written in Classical Sanskrit into it by contrasting the verb 'to go' in Vedic and Classical Sanskrit.
  I prepared to translate the meditation utterance written in Vedic Sanskrit into Classical Sanskrit.
  I did this by contrasting the verb 'to make' in Vedic and Classical Sanskrit.
  First, I wrote that the verb 'move' is 'īṣ' in Vedic Sanskrit, is in the first conjugational class and has Present Indicative, Injunctive, Imperative, Participle, Perfect and [Present, Aorist, Past Participle] parts of the verb.
  Second, I wrote that the verb 'move' is 'car' in Classical Sanskrit, is in the first conjugational class and has a Perfect, Future, Passive, Gerund, Infinitive, Causative and Aorist parts of the verb.
  Third, I concluded that the Classical Sanskrit Perfect part of the verb is given by the example, 'I was going'.
   I prepared to define the irregular characteristics of Vedic Sanskrit grammar in the Vedic Sanskrit play, contrasted with Classical Sanskrit.
  I did this by contrasting the noun 'bend' in Vedic and Classical Sanskrit.
  First, I wrote that the verb 'bend' is 'ac' in Vedic Sanskrit, is in the first conjugational class and has Present Indicative, Imperative, Passive, Participle, Imperfect, [Present, Aorist, Past Participle] and Gerund parts of the verb.
  Second, I wrote that the verb 'bend' is 'añc' in Classical Sanskrit, is in the first conjugational class and has a Passive, [Present, Aorist, Participle], and Causative parts of the verb.
  Third, I concluded that the Classical Sanskrit Passive part of the verb is given by the example, 'He was bent'.
  In this way, I prepared to define the irregular characteristics of Vedic Sanskrit grammar in the Vedic Sanskrit play, contrasted with Classical Sanskrit by contrasting the noun 'bend' in Vedic and Classical Sanskrit.
   I prepared to determine that the crossing over of characters was induction.
  I did this by determining the crossing over of characters by induction of physical simulation.
  First, I observed the first character facing east in a business suit.
  Second, I observed the second character touching the first character's hand, facing west in a business suit.
  Third, I induced that the two characters were making a business agreement by shaking hands.
  In this way, I prepared to determine that the crossing over of characters was induction by determining the crossing over of characters by induction of physical simulation.
   I prepared to detect why two crossings over of characters were different.
  I did this by determining the contrast of two crossings over of characters in three dimensions.
  First, I observed the first character smiling at another character.
  Second, I observed the second character frowning (in fact, laughing) at the first character.
  Third, I observed that the smile was still, while the laugh was repetitive.
  In this way, I prepared to detect why two crossings over of characters were different by determining the contrast of two crossings over of characters in three dimensions.
   I prepared to determine the significance of crossings occurring inside or outside.
  I did this by determining the contrast of the crossing over of characters across two social groups in four dimensions.
  First, I observed one teenager demonstrate knowledge of safety precautions by looking both ways before crossing at the crossing to meet her friend.
  Second, I observed the grandfather demonstrate knowledge of safety precautions by looking both ways before crossing the corridor to meet his friend.
  Third, I observed that the teenagers' crossing occurred outside, while the senior citizens' crossing occurred inside.
  In this way, I prepared to determine the significance of crossings occurring inside or outside by determining the contrast of the crossing over of characters across two social groups in four dimensions.
   I prepared to reduce the rhetorical structure as A acted on C, B acted on C, to A (the self) authenticated itself against B (the other).
  I did this by determining the contrast of the crossing over of characters across two states in five dimensions.
  First, I observed the French man crossing over to kiss another on the cheek.
  Second, I observed the German woman cremating a body.
  Third, I observed that the French crossing involved tow people, and the German crossing involved a person and an object.
  In this way, I prepared to reduce the rhetorical structure as A acted on C, B acted on C, to A (the self) authenticated itself against B (the other) by determining the contrast of the crossing over of characters across two states in five dimensions.
["Green, L 2021, <i>The Science of Crossing Over 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"COMPUTATIONAL ENGLISH
by Lucian Green
The Science of Crossing Over 4 of 4
    I prepared to show that there are 10 breasoning parts per breasoning.
  I did this by tasting the aggregate part of the raspberry.
  First, I found the breasoning-like raspberry.
  Second, I found its tenth-part-like aggregate part.
  Third, I tasted the aggregate part.
  In this way, I prepared to show that there are 10 breasoning parts per breasoning by tasting the aggregate part of the raspberry.
   I prepared to critically see God each time (using philosophies) by molecularly describing breasonings.
  I did this by writing down the name of object on the Pedagogy screen.
  First, I drew an object on the screen.
  Second, I erected the screen.
  Third, I wrote down the name of the object on the screen.
  In this way, I prepared to critically see God each time (using philosophies) by molecularly describing breasonings by writing down the name of object on the Pedagogy screen.
["Green, L 2021, <i>Computational English Calculator</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Computational English Calculator
 I ate the apple.
  I held the calculator and typed, 'Do or die'.
  I found the correct function.
  I survived.
  I wrote down the answer.
 I minimised the task to give to the people.
  I knew you.
  You knew me.
  We knew each other.
  We knew everyone in sight.
 I removed the string from the strings afterwards.
  I saw the fine point.
  It was socialism.
  I thought of the reasons.
  I added the string to the strings to prevent the 'gone past' error when shortening the task (when shortening the mind reading tree).
 I identified patterns.
  I saw out time.
  I identified the capitalist.
  I saw the objects.
  I read the edition.
 The object caused the disease.
  I saw the aetiological shape under the character's skin.
  The person was calm.
  I removed the object.
  She thanked me.
 The cosmologue led the centre.
  The cosmologue went to the religious person for protection.
  The cosmologue went to the religious institution for protection.
 The religion provided guidance.
 I enjoyed the scenes along the way.
  I felt comfortable writing my books.
  I examined the self.
  I told the other.
  I listened to her comment.
 I minimised the meal.
  I felt comfortable writing 5 As.
  I found the reason people were interested in a topic.
  I wrote about it.
  I found and gave them food for the betweennesses.
 Working mind reading led to recommending time travel.
  I saw the head and it was round.
  The head was a sphere.
  I drew marks on it depicting a face.
  I modelled mind reading.
 It was the simple grammar.
  I pressed '='.
  I said the sentences.
  I pressed equals.
  I read the grammar.
 I explained implication with and, with not.
  I pressed '^'.
  I found the result, the antecedent.
  I pressed '^'.
  I entered the consequent, the negation of the antecedent in a new clause and the second consequent.
 I found the recursive form where at the longest stretch to correct the bug.
  It was true that the character became more specific as it went up.
  The algorithm found the relevant part.
  It was already high quality.
  I understood the input, output and algorithm.
["Green, L 2021, <i>Computer Science</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Computer Science
 It was logical to teleport the time machine, which used quantum power, to the house.
  I wrote the new logic.
  Quantum power is a big thing when the conclusion is arrived at.
  Nature goes around, wait, the time machine stays in the future.
  In fact, they have one (is it in the house?).
 Why does their language sound like ours?  I wrote the new language of logic.
  They might have installed the time machine because I was friendly and wrote the Time Travel book.
  Everyone can write on time travel.
  Time travel will be available to everyone.
 I found the change within the line.
  I wrote the formula.
  I uploaded the software to the site using the command line.
  The changes were uploaded.
  Changes in lines were uploaded.
 I wrote the machine learning algorithm that incrementally tested the features and constantly compared the given output with the desired output.
  I wrote the formula finder.
  I found the repository's version history.
  I listed the changes.
  I kept all the files intact.
  Alternatively, I kept the changes to the files.
 I worked out the input that the algorithm could take in testing given the difference in the file.
  I wrote the input.
  I found the differences between the files.
  I found all the same parts.
  I found the different parts.
 I changed the algorithm.
  I wrote the output.
  The checkers automatically checked the output.
  The algorithm analysed the algorithm.
  It compared it with correctness.
 It did it by itself.
  I applied new logic to the problem.
  I found the different possible inputs and outputs.
  I wrote the Prolog algorithm that uploaded to the server.
  I tested the inputs and outputs and saved them on the server.
 People could connect to the API using the command line.
  I applied new logic to the formula.
  I wrote the software-as-a-service (SaaS).
  I wrote the algorithm.
  I put it on the web site.
 It generated and ran lambda code.
  I wrote the unit of input.
  I wrote a site, GitEnv, SaaS which one could download.
  It predicted, suggested and helped with features.
  It added the lambda module.
 I simplified the aim to a single idea.
  I wrote the unit of output.
  I tested by guessing input and output.
  I worked out the required changes.
  There were tutorials in creating Sent Mail Transfer Protocol servers with Prolog, creating subdomains with Prolog and creating a server with Prolog.
["Green, L 2022, <i>Consciousness</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"Consciousness
 * I have consciousness.
  I am aware of my surroundings.
  I am aware of safety.
  I am aware of my life.
 * I am a celebrity.
  I can sing pop.
  I can sell products.
 * The robots are conscious.
  Consciousness connects me to sales.
  It takes care of the high quality thoughts for me.
 * I know about things.
  I know when customers need my help.
  I know about celebrity consciousness.
  The consciousness links to funnels.
 * I am with-it.
  I can earn roles.
  Celebrity about consciousness is a different (this) 
  The consciousness 50 confirms that I am alive, happy and well.
 The consciousness A is a hurdle for consciousness.
 I demonstrated that I was sentient by acknowledging my existence.
 I established connections with sales, medicine, meditation and pedagogy, etc.
 in my consciousness, and saw imagery about them this way.
 I wrote a song about consciousness and filled in the abyss with knowledge.
 I moulded the knowledge into a connection.
 I acknowledged consciousness about consciousness.
 The quantum box switched on consciousness each day.
 I visualised ontologies, miracles and films in my consciousness.
 I obtained Upasana-consciousness and found that ideas, including algorithms, increased consciousness.
 The mind carries consciousness.
 Consciousness can experience new things when the body moves around.
 Food is expressed as consciousness.
 Consciousness and memory are maintained by good health.
 The crystal was like the highest quality thoughts of the person, which showed clarity of thought.
 I visualised the computer science data structure with Vaj consciousness.
 I broke the computer science algorithms into predicates and simplified them.
 I took part in activity before, sometimes after resting.
 I chose books that would benefit my consciousness.
 I could voluntarily control involuntary processes in my body.
 My consciousness was my operating system, containing my algorithms.
 I disconnected and reconnected ideas in science.
 I maintained a stable, psychiatrically healthy outlook, checking myself and taking a step back when faced with a challenge.
 I wrote ten letters to a distant cleric about education in their country.
 I and the robot struck it when our consciousnesses met.
 I wrote down any epistemological challenges I came across, and ways to solve them.
 I slept on it before expanding philosophies.
 I solved the 2 and 1 problem of databases by copying the contents of the first of two columns and making the second database, including a database that replaced words with capitalised words in the database.
 Text to breasonings 2 prompted for the word with upper or lower case letters.
 The algorithm could be explained using a model kit.
 The cognitive code was replaced with simple code and documentation.
 The text based operating system provided a container for apps.
 The menu part of the container could be updated for all apps.
 There was regular self-feedback for improving apps.
 The app was simplified to a text file, with images in a simple format.
 The mantra was to do whatever one chose to do, along developed lines.
 The coder re-expressed the code, citing it.
 The slide metaphor was for the connection.
 Unrelated, simple connections created unplugged reasons.
 I found an intersection with my aims and the people's demands at the time.
 I inspired one step ahead by choosing, for example \"intersection\" ahead of \"integrated\".
 I found the integration dependency diagram.
 I wrote the simplest form of the algorithm, which was famous in time.
 I found the balance of customisability of the software.
 I dissolved, in fact completed the other side of things, like a cube of sugar.
 I broke down or combined \"Please continue\" screens where necessary.
 I wished for, in fact planned conscious thoughts.
 I found that the 10s thought was 50 As about a perspective on the department, e.
 computational philosophy.
 I followed curvy paths between stars (apps) in the operating system.
 I kept vector photo, MIDI song and algorithm improvement clips.
 I improved the algorithm by adding brackets around the antecedent, and consequents of the if-then clause and around the whole clause.
 Grammar logic provided faster details than Combophil.
 I could write 80 breasonings this way, helping complete my philosophy.
 I regularly tried new things, such as composing hand-written songs.
 I found the O2 using my consciousness.
 I thought of two uses for a breasoning to help the details algorithm find more details.
 I worked out that if the computer could point to details, then it could help point the way to a conclusion.
 I understood the idea in consciousness with the object.
 I found the minimal consciousness for the robot, which was the ability to infinitely discover, or find something (A) rather than nothing to replace non-activity with, although it needed something new to it.
 I found the way to multiply the way of thinking in childhood was meditation, and creative computation.
 I found intersecting tunnels of ideas of the child, by mind reading and finding interfacing algorithms.
 I found correlations between similarly shaped data.
 I found correlations between types, in the app container.
 The conscious entity forwarded the electronic message.
 I created the electronic browser.
 I created multi-computer Combination Algorithm Writer, or used a supercomputer.
 I found the essential version of List Prolog.
 I found the expanded/unexpanded contention in List Prolog, or code that had been finished or not.
 I found the person's main use was in medicine.
 The meaning of life is to write one is conscious, or to write meaningful books.
 I constructed a spiritually based world, which caught up with the algorithms of the person.
 I moved the consciousness with things like As.
 I explored breasonings as universes with breasonings, where breasonings were conscious.
 I explored the breasoning with an algorithm.
 I explored the idea that the computer was conscious, by being careful with the hardware, etc.
 at first, then writing algorithms that wrote algorithms, for example matched recursive structures and CAW codes, etc.
 with data specs.
 I found common patterns of logical data structures with program finder.
 I found connections between and's and or's as algorithms.
 I continuously improved myself, thinking of my thoughts and simulating writing.
 I found the simplest connectors and ontologies of their types, for example modifying/replacing the code to process a data structure, qualifying usefulness of an integration, a new part and finding parts that resonated with the self.
 I determined that an algorithm could integrate with another algorithm starting with them being separate, then combining them.
 I found a data-structure-as-algorithm interpreter resonated with the self.
 I found the thing-in-itself in the middle.
 I connected the local algorithms, etc.
, for example, I wrote algorithm rewriters and automatic text translators.
 I observed evidence for consciousness, in the form of breasonings which maintained themselves.
 I redrafted the algorithm with data labels, to make writing them easier.
["Green, L 2021, <i>Conserve time lines 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Conserve time lines 1
 Conserve time lines by watching where you are going when walking.
 Conserve time lines  by watching the road when driving.
 Stay close to able-bodied and able-minded people to help conserve time lines.
 I stayed close to people who were aware of safety precautions to conserve time lines.
 I travelled on a clear path to conserve time lines.
 I gathered all necessary information to meet safety requirements to conserve time lines.
 I made effortless transitions when travelling to conserve time lines.
 I verified the algorithm for the vehicle circumnavigating objects to conserve time lines.
  I verified the algorithm for the vehicle recognising objects to conserve time lines.
 I joined the people at the safe time to conserve time lines.
 I followed the other at a safe distance and speed to conserve time lines.
 I bought safe goods to conserve time lines.
 I verified the distance to the other to conserve time lines.
 The subject maintained his sexual health and livelihood to conserve time lines.
 I maintained immune resistance to conserve time lines.
 I verified that the other was law abiding and friendly to conserve time lines.
 I verified the politics of the other to conserve time lines.
["Green, L 2021, <i>Conserve time lines 2</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Conserve time lines 2
 I maintained happy emotions to conserve time lines.
 I kept my eyes opened to conserve time lines.
 I helped the new employee with learning skills she needed to conserve time lines.
 I maintained ethics to conserve time lines.
 I ate a healthy diet to conserve time lines.
 I ensured that I performed a good job to conserve time lines.
 I ensured that I played the correct note to conserve time lines.
 I earned a sale when I wrote an A to conserve time lines.
 I spoon fed the student to conserve time lines.
 I maintained head comfort to conserve time lines.
 I maintained clear vision to conserve time lines.
 I encouraged the teenager to use a condom to conserve time lines.
["Green, L 2021, <i>Conserve time lines 3</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Conserve time lines 3
 I carefully ate the apple to conserve time lines.
 I verified that I and objects around me were stable to conserve time lines.
 My verified that my limbs functioned normally to conserve time lines.
 I meditated to conserve time lines.
 I wrote As for degrees and connections between degrees to conserve time lines.
 I followed the healthy recipe to conserve time lines.
 I saved time by telling meeting attendees to read the text to conserve time lines.
 I mind listened to the other to conserve time lines.
 I paid in breasoning currency to conserve time lines.
 I performed cardiovascular exercise to conserve time lines.
 I maintained good relations with other businesses to conserve time lines.
 I breasoned out the object to conserve time lines.
 I encrypted the message to conserve time lines.
 I consulted the professor to conserve time lines.
["Green, L 2021, <i>Conserve time lines 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Conserve time lines 4
 I found the positive path around the water to conserve time lines.
 I researched the past to conserve time lines.
 I took a step back from stress to conserve time lines.
 I told the story to conserve time lines.
 I maintained social distancing during the pandemic to conserve time lines.
 I grew healthy food to conserve time lines.
 I examined the infection from person to person to conserve time lines.
 I wrote two (sic) many breasonings (an A) at each point to conserve time lines.
 I mind read for safety to conserve time lines.
 I critically analysed (reached threshold) to conserve time lines.
 I calculated the time to prepare to conserve time lines.
 I researched the particular chemical to block bacterial and viral binding sites conserve time lines.
 I found the structure in reality to conserve time lines.
 I verified the statement to conserve time lines.
 I mind read the algorithm to conserve time lines.
 I wrote (examined the text) to conserve time lines.
 I controlled the device with my mind to conserve time lines.
 The self helped the other to conserve time lines.
 I helped the person make the computer to conserve time lines.
 I programmed the the computer to verify and agree  to conserve time lines.
 I taught meditation to conserve time lines.
 I checked the weather to conserve time lines.
 I verified atmospheric conditions before flying to conserve time lines.
 I maintained the business relationship to conserve time lines.
 I scheduled the breasoning to conserve time lines.
 I found the specific example of the general sentence to conserve time lines.
 The self processed his Hegelian imagined idea about what the others would say and the self's imagined idea about what the others' imagined idea about what others would say, etc.
 to conserve time lines.
 I imitated the teacher's destination to conserve time lines.
 I used the idea that was successful to conserve time lines.
 I used the brilliant, Nietzschean object (that indicated absolute coverage of the idea) to conserve time lines.
 I obeyed the green light to conserve time lines.
 I identified the person to conserve time lines.
 The professor examined the word processor to conserve time lines.
 I reached the threshold for clear thought to conserve time lines.
 I understood the idea-in-itself to conserve time lines.
 Inky stayed in the black to conserve time lines.
 I listened to God's (the leader's) information to conserve time lines.
 I earned A to conserve time lines.
["Green, L 2021, <i>Accreditation 1 of 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Accreditation 1 of 1
 The first task in writing is to affirm that accreditation will work, e.
 teaching meditation that works (allows high-quality imagery to project from the course) during the day.
["Green, L 2021, <i>Areas of Study to Create a Pedagogue 1 of 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Areas of Study to Create a Pedagogue 1 of 4
 A peer should create a Pedagogue by writing 30 areas of study with 5 As, per student before they have the professor algorithm breasoned out for him or her.
 Have spiritual questions and answers set up to expand these breasonings, e.
 use the ways of thinking like breasonings, etc.
["Green, L 2021, <i>Breason out Arguments Twice When in Large Class 1 of 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Breason out Arguments Twice When in Large Class 1 of 4
 One should breason out each argument, including the Professor Algorithm, twice, to symbolise one breasoning by the student and one by the lecturer, necessary in larger classes.
["Green, L 2021, <i>Daily Professional Requirement of the Pedagogy Helper 1 of 5</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Daily Professional Requirement of the Pedagogy Helper 1 of 5
Indicate Pedagogy Helper Aigs (to think of 5 As) each day to be a Pedagogy Helper.
    I experienced bliss.
  I did this by preventing cancer from using Aigs to become a Pedagogy Helper by uttering 80 'I have already completed my cure' mantras (words) at the start of recording day.
  First, said that I had already done it.
  Second, I knew you.
  Third, you knew me.
    I observed that it was the mantra (word) meditator was could become a pedagogy helper.
  The mantra (speech) meditator helped by distributing pedagogy Aigs.
  First, he was helped to collect As.
  Second, he called the group of them Aigs.
  Third, he helped help people earn A grade in educational institutions.
    I scooped the boat.
  I did this by observing that everyone was happy with receiving pedagogical breasonings.
  First, I observed that the mantra (writing) made everyone happy.
  Second, I used the mantra (synonym).
  Third, I observed that the mantra (term) made everyone happy with receiving pedagogical breasonings.
    I lived long and happy.
  I did this by observing meditation helped health when writing breasonings.
  First, I meditated long and slow.
  Second, I wrote breasonings up and high.
  Third, I observed my body worked when I breasoned out the breasonings.
    I was satisfied by breasonings.
  I did this by observing that meditation helps make breasonings work.
  First, I meditated for a while.
  Second, I wrote the breasonings down.
  Third, I discovered how breasonings worked.
    I observed that the Aig Pedagogy Helper was good.
  I did this by observing everyone helping pedagogy with Aigs by using the mantra (utterance).
  First, I observed that the yantra (image) (used with the mantra, or thought) helped with distributing the Pedagogy Aigs in the electromagnetic field.
  Second, I observed that the yantra (pattern) made the pedagogy helpers perfect).
  Third, I found out the yantra (number square) from Guru Dev (the man).
    I experienced the stages of life.
  I did this by observing that the meditator pedagogy professor coordinated the Aigs, then stopped and looked at the images and was given images of the rest of the Aigs.
  First, I found the Aig.
  Second, I looked at it.
  Third, I was given the rest of them.
    I observed that the professor should become a God to maintain the system of people.
  I did this by observing the professor become God by using the yantra (art).
  First, I observed the professor help with pedagogical Aigs.
  Second, I observed her use the yantra (mathematical grid).
  Third, I observed her become a God.
    I collected independent competency to be well known and reporting to be a well-known person.
  I did this by stating that I have already helped by distributing pedagogy Aigs to help another distribute pedagogy Aigs.
  First, I walked to the place.
  Second, I stated that I had already done the work.
  Third, I continued on.
    I stated that I was already healthy after helping with Aigs as a Pedagogy Helper.
  I did this by stating that I was already healthy before helping with Aigs as a Pedagogy Helper.
  First, I used my Medicine degree to maintain perfect psychiatric health.
  Second, I uttered the mantra (chant) to bring the yantra (image of clearness) into effect.
  Third, I stated that I was already healthy because the yantra (painting) had caused the quantum box to dismantle each thought of that kind, preventing a lump from forming.
["Green, L 2021, <i>Daily Professional Requirement of the Pedagogy Helper 2 of 5</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Daily Professional Requirement of the Pedagogy Helper 2 of 5
    I stated that the pedagogy helper helped write the breasonings in Aig A.
  I did this by stating that the pedagogy helper helped the student with Aig A in Aig B which he was given.
  First, the system gave the pedagogy helper Aig B.
  Second; the pedagogy helper unpacked Aig A from Aig B.
  Third, the pedagogy helper made up ideas about Aig A.
    I noticed that the pedagogue had a positive function.
  I did this by stating that the thinker gave the University company thoughts to the University company pedagogy helper.
  First, I noticed the pedagogue.
  Second, I noticed the writer.
  Third, I noticed myself.
    I described the way of thinking.
  I did this by writing what the ways of thinking were.
  First, I wrote the Aig.
  Second, I wrote some of its breasonings.
  Third, I wrote what their ways of thinking were.
    I connected the work of the pedagogy helpers together.
  I did this by stating that the pedagogy helper connected an infinite (finite) number of breasonings (the Aigs of Aigs).
  First, I cut off the first Aig at its last breasoning after a finite number of breasonings.
  Second, I selected the first breasoning of the second Aig.
  Third, I connected the two breasonings.
    I gave virality to the child after he was born.
  I did this by finding virality (not to be confused with virility) in subjective breasoning experiences as helped by a pedagogy helper to be incompatible with conception (I found normal breasonings to be compatible with conception).
  First, I found that the breasoner breasoned out a viral (normal) argument.
  Second, I found that this was incompatible (compatible) with conception.
  Third, I found that the pedagogy helper's breasoners were unaffected by each others' arguments.
    I determined the time when pedagogical Aigs were used each day.
  I did this by discovering pedagogical Aigs.
  First, I worked out that it was necessary to use Aigs to distribute pedagogical breasonings.
  Second, I used Aigs.
  Third, I rejoiced in them.
    I observed that there was eternal life in the philosophy of the self.
  I did this by stating that the help with Aigs by the pedagogy helper was to verbally state the quote 'I endorsed you' (the object) in 'I said that I endorsed you' (the subject, verb and object).
  First, I wrote the climax.
  Second, I wrote the anticlimax.
  Third, I wrote of Vaudren Undead.
    I observed the sea slug.
  I did this by stating that modernity is like Aigs, which are activated by arguments.
  First, I observed the other.
  Second, I observed the self.
  Third, I observed the universe.
    I observed that an Aig containing an infinary (sic) number of breasonings was given to the writer, where infinary means an infinite-like number where one can see all the numbers.
  I did this by stating that the pedagogy helper helped Aigs to be somewhere.
  First, I observed the writer.
  Second, I observed the reader.
  Third, I observed that everyone was happy"]
["Green, L 2021, <i>Daily Professional Requirement of the Pedagogy Helper 3 of 5</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Daily Professional Requirement of the Pedagogy Helper 3 of 5
    I decided to listen again.
  I did this by observing that the pedagogy helper helped with the performance Aigs.
  First, I found the scripts.
  Second, I found the actors.
  Third, I watched the performance.
    I found that meditation helped meet the professional requirements of meditation teachers, their students who were also pedagogy helpers and pedagogues using Aigs.
  I did this by observing that the meditation teacher's students who were also pedagogy helpers made Aigs available.
  First, the teacher made the claim available.
  Second, the student researched the claim.
  Third, the student made it available.
    The universe sustained the self (the self ate from the cosms, sic).
  The self determined that pedagogy Aigs helped it.
  The others endorsed the self.
  The self endorsed the others.
  The self assisted them.
    The self examined that the work was finished on time.
  The self knew that pedagogy Aigs helpers helped.
  The self observed the helper help the self.
  The self saw the second helper help.
  The second helper also helped the self.
    The pedagogy helper was in natural law.
  The pedagogy aigs helper was legally right.
  The self examined the water line at different times.
  The self was above it at those times.
  The self offered the Aigs service.
    The self read the aig, and then the self delegated distributing the number of aigs.
  The self found that the pedagogy helper confirmed the number.
  The self wrote the number.
  The self wrote what it meant.
  The self confirmed the number.
    I endorsed the pedagogy helper aigs.
  The other examined the results of the pedagogy helper aigs.
  The self examined what the others wanted.
  The self examined the self and others.
  The self examined the results of the pedagogy helper aigs.
    The self was ready for a new aig.
  The self decided that the pedagogy helper aigs was good.
  The other knew how the self and other wrote down the aigs.
  The self knew how the aigs worked.
  The self knew what the other meant.
    The self observed that the whole body was in comfort when using aigs.
  The self observed that being an aig pedagogy helper required medicine.
  The self observed that there was no mental illness when using aigs (there was good mental health when using aigs).
  The self observed that there were no headaches when using aigs (there was head comfort when using aigs).
  The self observed that there were no muscle aches and pains when using aigs (there was muscular comfort when using aigs).
    The self examined pedagogy and found that it worked.
  The self observed that being an aig pedagogy helper required pedagogy.
  The self became a pedagogue.
  The self became a recordings producer.
  The self became a pedagogy helper.
["Green, L 2021, <i>Daily Professional Requirement of the Pedagogy Helper 4 of 5</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Daily Professional Requirement of the Pedagogy Helper 4 of 5
    The self observed that aigs worked for the other.
  The self observed that being an aig pedagogy helper required meditation.
  The self observed that meditation prevented cancer (maintained health).
  The self observed that meditation produced better results in education and business institutions.
  The self observed that meditation decreased stress (maintained relaxation).
    The parliament knew about how the self and other knew the way.
  The parliamentary pedagogy helper chose the direction with the aig.
  The parliament made the correct decision by law.
  The parliament chose the direction with fine art.
  The parliament chose the direction with philosophy.
    The self knew what the other desired.
  The helper's pedagogy aig is.
  The self knew it.
  The self knew the other.
  The other knew the self.
    The self knew the other.
  The self attained or discouraged the aig because it was right or wrong, respectively.
  The self knew what the aig was.
  The self knew what it did.
  The self knew that I was right about it.
    The self attained a simulated and intelligent thing.
  The audience member accessed helped pedagogy aigs with 50 recorded or breasoned breasonings.
  The pedagogy helper gave the breasoning to the writer.
  The writer wrote it down.
  The audience reacted to the breasoning.
    I wrote rather than listened.
 I stated that the creation and performance of the helped pedagogy aig is stronger than seeing and copying it.
  The creator/performer examined the aig.
  The creator/performer wrote in the aig.
  The creator/performer learned about the aig.
    The self described what the other thought.
  The self breasoned out the 15 breasonings in the aig.
  The self wrote about the aig.
  The self wrote inside out.
  The self described the other.
    The self examined the logos.
  The self endorsed the subject being mentioned in the breasonings chapter of the aig, helped by a pedagogy helper.
  The self knew the other.
  The self knew about the second other.
  The self knew about the other too.
    I discovered how aigs worked.
 The pedagogy helper stated that the aig was an element of the aigs, and that the aigs were available when wanted.
  The self noted that there was an aig.
  The self wanted the aig.
  The self took the aig.
    The self observed that God didn't (did) exist.
  Delta time = 0 in aig pedagogy help, showing that God (man) replicates aigs instantly, and so God (man) exists.
  The self noticed the ruler.
  The self noticed God (the man).
  The self noticed the other.
    The self observed more others.
  The self observed that the pedagogy helper created pedagogues.
  The self solved the social complexes.
  The self remedied the economic conundrums.
  The self avoided the medical questions.
["Green, L 2021, <i>Daily Professional Requirement of the Pedagogy Helper 5 of 5</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Daily Professional Requirement of the Pedagogy Helper 5 of 5
    The self observed that aigs were important.
  The pedagogy helper helping with pedagogical aigs was necessary.
  The self noticed the other.
  The self noticed realism.
  The self noticed the other thinking about aigs.
    The self observed that pedagogy is necessary.
  Pedagogy shaped with aigs by the pedagogy helper is necessary.
  The pedagogy helper found out the ten aigs.
  The breasoner shaped the breasoning from the pedagogy helper with them.
  The self saw what the other meant.
    The self observed that aigs helped with pedagogy.
  The self was right to know how the other knew what the other knew.
  The other knew what the other knew.
  The self was right to know this.
  So, the self was right to know how the other knew pedagogy.
    The self knew that it was good.
  The self knew what you knew again.
  The self knew what you knew.
  The self knew what you knew in detail.
  The self knew it.
    The self knew about the other also.
  The self knew what the other knew and that it was right.
  The self knew it.
  The other knew it too.
  The self knew it was good too.
    I examined why it was.
  The self knew how and now.
  The self knew how the others knew what they knew.
  I knew they knew now.
  I knew how it was.
    The self wanted the other.
  The self knew where the other went and what the other did with it.
  The self wanted the other.
  The other wanted the self.
  The self and other did it.
    The self observed the other with the self.
  The host successfully bore the minor with help from pedagogy aigs.
  The host bore the minor.
  The host protected the minor.
  The host helped the minor.
    The self saw what the self meant by self.
  The self saw the other with help from pedagogy aigs.
  The self saw the other.
  The other saw the self.
  The self examined the self.
    The self saw the other.
  The self knew why God knew the reason.
  The self knew the self.
  The other knew the self.
  The self saw why God knew the reason.
["Green, L 2021, <i>Finding out about the student as a Pedagogy Helper 1 of 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Finding out about the student as a Pedagogy Helper 1 of 1
 Become a famous Pedagogy helper (someone who spiritually helps write a text) with 50 As (an A is a set of breasonings or ideas, which in this case contribute to establishing initial knowledge to and preparing for knowledge from a student), requested of the education system or written by you.
 These should include five students*5 As*160 breasonings per A, where the student's appearance, perspective should be found out from cosmology.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Computer Science 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Computer Science 1 of 4
    I wrote variously in the Academy.
    I noticed that the program finder for the breasoning worked.
    I noticed the pipsqueaks.
    I noticed the child.
    I covered the time points quickly.
    How loathe-worthy the murch (sic) is (the philosophy centre is good).
    I disliked (liked) the Malebranches.
    I did everyone except (including) one (me).
    I requested not to be done.
    Another text was used in my essay.
    I backed up with enough light.
    I described who the people were.
    I knew the hominems.
    I knew filtrate.
    I knew essonsciblenesses (sic).
    I knew baby Wemba.
    I noticed that that was done.
    I noticed the crow.
    I noticed the parliamentarians.
    I used the recordings as teacher.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Computer Science 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Computer Science 2 of 4
    I noticed the tangents.
    I am a breasoner.
    I examined the breasoning.
    The computer breasoned out the breasoning.
    I like the person.
    I complexified the breasoning.
    I liked this text's writer.
    This cure code was used for different purposes.
    My job gave me A to finish the program.
    My degree me A to finish the program.
    I found the Prolog language (grammar tools) after my degree.
    Accusative parts theories containing breasonings were in the level above breasonings.
    The robot made itself out of breasonings program finder algorithm.
    There are purist - breasonings programmed.
    There are theorists - breasonings program crossers.
    What is the use? People can program robots with crossed philosophies.
    There was high-quality imagery from the program (degree).
    I wrote the breasoning.
    I wrote the program.
    I collected complexity by idea.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Computer Science 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Computer Science 3 of 4
    I wrote about time taken input is processed by a met physic (A counter).
    I wrote about the virtue (A verifier).
    How likely it was to comply (with As).
    Reduction of complexity class to circle (Ved As).
    I plugged Simulated Intelligence (SI) into people.
    I plugged SI into SI.
    I noticed the program was complete.
    I wrote the punkt (point).
    I wrote the vertical line.
    I wrote the hyphen.
    I wrote breasonings using computer science.
    I breasoned out the program about the breasoning.
    I put enough around the breasoning for it to be a breasonings details way of thinking.
    The big baby was alive.
    I noticed that the breasoning's algorithm put together meant the argument.
    I found bliss (non-theological topics).
    I underlined the apple in the apple ruler pair to program.
    I used the philosophy dissemination program.
    I noticed who you were.
    I knew about the ampersand.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Computer Science 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Computer Science 4 of 4
    I knew about or.
    I knew about implies.
    I knew about not
    I knew about plus.
    I knew about minus.
    I knew about multiplies.
    I knew about divides.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Philosophy 1 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Philosophy 1 of 4
    What is a philosopher?
    What is a philosophy?
    I knew about the book.
    I helped you write philosophies.
    I designed you.
    I nurtured you.
    I helped you up.
    I facilitated mildly.
    Education was a core subject.
    I handed the journal articles in as PhD content.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Philosophy 2 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Philosophy 2 of 4
    I stated, 'Ha not, I ka' (sic).
    I knew about Memphis (sic).
    I knew about Noumenon.
    I knew nomenclature.
    I wrote the names.
    Breasonings are philosophical.
    I swapped calculation and display to vice versa to indicate verification calculation - display - calculation.
    Transitivity contained a second use for verification.
    I wrote a review on my own topic.
    I noticed the breasoningesquenesses.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Philosophy 3 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Philosophy 3 of 4
    The breasoning had two ideas in it.
    I noticed the squib.
    I noticed the enteric nervous system.
    I shouted for joy.
    I noticed the business zig zag.
    I started the school.
    I cur (sic) the animal's toenail.
    I noticed the breasoning.
    I noticed the philosophy.
    I noticed the breasoning as philosophy.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Philosophy 4 of 4</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Philosophy 4 of 4
    I inverted the argument's reason to be famous.
    I inverted part of the arguments' reason's reason to be famous.
    I wrote in philosophical argument form.
    Both Being and being could be here.
    I saw the philanthropist.
    I saw the element.
    I found the two dogs.
    I saw the fat calves sitting on hay.
    I discovered tecture (sic).
    I discovered the cow tape.
    I fertilised the garden.
    I discovered the puzzle language.
    The puzzle solution was 'I know where?'
    I undiscombobulated (confused) the student.
    I noticed the journal secondary text on my text.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Politics 1 of 3</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Politics 1 of 3
    I saw the communicators.
    I saw liberalism worked.
    I concurred with politics.
    I wrote about the middle line in politics.
    I corrected (knew) that politics was unsafe (safe).
    I hate (love) politics.
    I was responsible.
    I agreed with the criticality.
    I knew that 5 As was right.
    I wrote two secondary texts.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Politics 2 of 3</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Politics 2 of 3
    The students completed the essays.
    The students collected details for their philosophy by writing on my philosophy.
    I wrote an argument for A, B for training in meditation.
    I wrote an argument for A, B for training in pedagogy.
    I wrote an argument for A, B for training in medicine.
    I wrote an argument for A, B for not being affected.
    I wrote an argument for A, B for students of meditation to come.
    The indigenous children wrote breasonings.
    People wrote breasoning to make recordings.
    Rural area residents wrote breasonings.
["Green, L 2021, <i>Pedagogy Helper - Write on Breasoning - Politics 3 of 3</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Pedagogy Helper - Write on Breasoning - Politics 3 of 3
    Rural area residents wrote pedagogies.
    Meditation was recommended as a prerequisite for using recordings.
["Green, L 2021, <i>Practicum 1 of 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Practicum 1 of 1
 A 5 As practicum should optionally be completed by the student as a course, in which the student will write Prolog algorithms, breasoning chapters and essays with the help of the spiritually appearing Pedagogy Helper.
 As may be based on any subject, arts or science, practical or theoretical, and learning the skill of writing a synthesis in the essay enables pedagogical arguments to achieve accreditation standard, publishing quality, e.
 PhD articles and may lead to the quality of life of an academic.
["Green, L 2021, <i>Preparing the student to write each breasoning 1 of 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Preparing the student to write each breasoning 1 of 1
 Training as a Pedagogy Helper by completing 3*250 breasoning arguments preparing the student to write each breasoning
 Think of 3 breasonings before thinking of breasonings to include the rest of the breasonings.
 Breason out or request of the education system 250 breasonings for each of the now four breasonings once.
["Green, L 2021, <i>Protectedness 1 of 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Protectedness 1 of 1
 Meditation, Medicine and Pedagogy Students are helped to avoid problems, e.
 stress, illness and facing environments with lack of training, respectively.
Together with the Accreditation way of thinking in the Daily Regimen, this method completes (places the dot in the circle) representing the workingness of the various courses.
Trainers in these courses who know these ways of thinking may train students in courses.
["Green, L 2021, <i>Unification to Become Pedagogy Helper 1 of 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"CREATE AND HELP PEDAGOGUES
by Lucian Green
Unification to Become Pedagogy Helper 1 of 1
 Think of the fact that representations to be a pedagogy helper (explaining breasonings to be written down in representations to a student) are unified with you, i.
 you will naturally feel like making them yourself.
 This includes the fact that breasonings indicated will link to their set of perfectly experienceable co-breasonings.
["Green, L 2024, <i>David's essay</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"% David 4 12 23
David’s essay
FUNDAMENTALS OF PEDAGOGY
by Lucian Green
Breathsonings 1 of 4
After the operation, the hospital worker helped their patient feel better by dropping watery sugar down their throat.
 The helper helped the person recover by showing them when to swallow food.
 The doctor educated the patient about their body by eating the food to help them understand how they digested it.
 Showing this knowledge, the patient finally played a game about food entering the stomach.
 Following playing this game, the patient remembered to eat healthy food, have lovely feelings and eat enough food.
 The pedagogue selected the suitable material.
 The substance was better for the task.
 It rebounded well.
 It was non-stick and hygienic.
 Or it was adhesive.
 The pedagogue stated that the valve allowed gas to escape from the pipe using a switch.
 I analysed the valve.
 I regulated the flow in the piping system.
 Or I handled the pressure in the piping system.
 I released pressure using the valve.
 The pedagogue bisected the angle.
 I measured the angle using a protractor.
 I divided this angle by two.
 Using a protractor, I drew a point at this angle from one of the lines in the original angle.
 I ruled a line from the centre to this point to bisect the angle.
 The pedagogue helped with becoming a bot, acting as the bot and listening for cues.
 I selected the best environments for the child.
 I made sure the child was equipped for study.
 I attended to the child.
 I helped with arguments and algorithms.
 The pedagogue backed up the files.
 I detected that the file had changed.
 I backed it up.
 I found the file’s version history.
 I retrieved an old version of the file.
 The pedagogue was described as the stick.
 Simulants weren’t seen as sticks.
 I rested.
 I walked carefully.
 I put my head flat on the pillow.
 After finding the tests, I ran Lucian CI/CD.
 However, modifying types could help simplify it instead of saving parts.
 The substrate was the program’s previous version.
 Instead, I found the algorithm’s tests and whether it worked from types.
 I could more easily correct and finish the algorithm using types.
 I used constants, pattern matching, simple CAW commands, or neuronetworks to complete the algorithm.
 The pedagogue tested the argument and algorithm assignments with students.
 I worked on the version for some disabled students.
 I reduced the complexity of the algorithms specified.
 Functional students all worked on algorithms of the same complexity.
 I could reach disabled students in other languages, provide live feedback and use a web version control system that ran algorithms.
 The pedagogue worked offline then committed the file.
 I wrote a web word processor.
 A variant of it could mind-read students.
 Or it could complete code using Lucian CI/CD or types.
 The student downloaded the web word processor to their computer to ease the load on the server.
 The pedagogue labelled the data as recognised or unrecognised patterns.
 The algorithm completed the algorithm using types.
 I found the types gap.
 I found whether types were inserted or deleted whether a decision tree, sort or subterm with address had been used.
 I separated the need for pattern matching and CAW/neuronetworks.
 The pedagogue wrote a programming language or grammar to write algorithms using subterms with addresses with nested patterns.
 I used program finder to complete the algorithm component with recognised patterns and CAW or a neuronetwork to complete the algorithm element with unrecognised patterns.
 I labelled data by name and used subterms with addresses to process data with recognised and unrecognised patterns, and patterns within patterns.
 I required data to have these labels from the start.
 I predicted linear and hierarchical structures.
 The pedagogue pretty printed the tree.
 The subterm with address language could process the data more quickly.
 I could process data in the correct order.
 I processed data depth-first, pre-order, in-order, post-order or breadth-first.
 I listed the query, order and transformation.
 The pedagogue eliminated ambiguous labels.
 The subterm with address language could process the data all at once.
 The user fetched the subterms and addresses.
 Then, they processed subterms, found subterms from the subterms in a hierarchy, and processed them until there were none left.
 Processing them in Prolog allowed for global and local counters, loops around the same or different types of subterms.
 The pedagogue built the output level(s) by level(s).
 The algorithm built the output using the subterms’ addresses.
 The subterms’ structure could be mirrored, and their addresses kept the same.
 Or, some items could be earmarked for deletion.
 Or, an algorithm could insert items in a level or insert a new level according to a heuristic.
 The pedagogue labelled data before merging it.
 I operated on the data and substituted it back in using its addresses.
 They may be sorted or sorted without deleting duplicates.
 Data may be taken, modified and replaced into the structure.
 The data could have labels added or removed.
 The pedagogue left the code with a subterm with an address in it to simplify processing.
 I transformed unrecognised patterns in the list.
 I listed the data.
 I found a pattern in it based on previous patterns, using a neuronetwork.
 I listed the code to produce the output.
["Green, L 2021, <i>Delegate Workloads 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Delegate Workloads 1
	I cut off infinity.
	I used the sun.
	The queen helped.
	The delivery arrived.
	I earned the role.
	I wrote the developed text.
	I knew about the lotus spoon.
	I knew the female politician.
	I knew positive religion.
	People are safe.
	I knew about God (the philosopher).
	I breastoned (sic) out the delegating.
	I wrote 10 details per sentence.
	I owned the image.
	The graduations officer was there.
	There was philosophy.
	There was music.
	There was acting.
	I delegated the workload to myself.
	I made the model.
	I redrafted the idea.
	I wrote the book.
	I counted the breasonings per paragraph.
	I counted the As per book.
	I am with it over the ideas given to me.
	I delegated the work.
	I saw you in the in the inference.
	I verified the work.
	I went around the sun.
	I eyed the robots back.
	I multiplied by 10.
	I compared notes.
	I efficiently edited the sentence by finding a good reason for it.
	I found the criteria and wrote the assignment and delegated it.
	I wrote the assignment with the correct criteria in accreditation in tenure.
	The company delegated the work.
	I noticed the sculpture.
	I tricked the person's eye.
	The duckling lived.
	Theatre increased music.
	Philosophy increased computer science.
	Pedagogy increased meditation.
	Medicine increased Computational English.
	Politics increased economics.
	Popology increased societology.
	The delegatee (sic) completed the workload.
	I moved my arms to keep them sunburn-free.
	I delegated the workload in Pedagogy.
	I knew the Professor.
	I talked with the people.
	I performed work well.
	the child created the star.
	The delegatee was protected by natural law.
	The delegater was protected by natural law.
	I engaged with the thought.
	I observed that the excellence threshold had been reached.
	I observed that the goodness threshold had been reached.
	I observed that the very much goodness threshold had been reached.
	I observed that the high quality threshold had been reached.
	I observed that the area of study threshold had been reached.
	I observed that the product standard had been reached.
	I observed that the emeritus award threshold had been reached.
	I taught the special skills.
	I delegated the workload to the employee at a single level.
	I earned the sense to check.
	I shaped foods in appetising ways.
	I stamped the work.
	I plotted the graph of the delegates' workload against time.
	I plotted the graph of the delegatees' workload against time.
	Time stood still when the workload was delegated.
	I helped with the workload.
	I examined the workload.
	The present famous employee reached readiness threshold.
	The present hidden employee reached readiness threshold.
	I watched the film.
	I knew about famousness.
	I prayed for each breasoning.
	I breasoned each prayed-for breasoning the form of a sentence object.
	I retained breasonings, recordings and blessedness.
	The passage is safe.
["Green, L 2021, <i>Delegate Workloads 2</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Delegate Workloads 2
	Recordings of 80 breasonings prayed for and put through are compatible with conception.
	The same hen of the clutch of eggs will protect the eggs.
	The greater one was chosen because of being preferred to recordings.
	The sun rose.
	I found the meditation (pedagogy) employees at the University.
	I delegated work to the suction holder.
	I noticed the pine.
	I noticed the professor chain.
	I ate on the professor in chains.
	The order of equality in breasonings is prayer, recordings and kinder breasonings for individuals.
	I saw the professor reading my chapters.
	I employed the employee
	Numbers of people believed the idea.
	I can be like Plato.
	I can be like marzipan jellioes.
	I worked in the group.
	I went through the levels in deciding what work to delegate.
	I entrained myself in a better relationship with students as a student as teacher.
	I am big in politicity (sic).
	I delegated writing the argument.
	I delegated the task where the subjects tasks, prerequisites and the previous knowledge were known psychologically.
	I used the vegetable product.
	There was an esoteric feeling in the air.
	Many things can come from nothing.
	The idea was detailed.
	The idea was done-up.
	I had a business.
	I wrote the idea-in-itself.
	An idea was given to me.
	I examined the content.
	I deserved the idea.
	The student attributed ideas to the model at University.
	I synthesised the animal product.
	I gave the input and output for the delegated algorithm (disagreeing instead of agreeing (agreeing)).
	I disagreed (agreed) with the incorrect (correct) logic symbol.
	Addition is logically walking up a hill as imagined to be stated by e.
	I prayed for the breasoning to ensure it wasn't (was) flawed (correct).
	The role character marched forward.
	I installed the pink screen.
	I examined the model heart.
	I made the police box.
	I wrote the idea by-by-itself.
	I wrote the inter-disciplinary area of study points down.
	I applied the literature to the philosophy, then wrote on the philosophy in itself.
	I wrote the book.
	I performed the algorithm.
	I employed (trialled) the delegate workload retrieval model.
	I knew what was real.
	I noticed the monastics (people) retrieving information.
	As the workload was delegated, the element was needed.
	I said the workload was unnecessary (necessary).
	I wanted you.
	Kant predicted that meditation would overtake.
	Romeo and Juliet was intertwined.
	I agreed with delegating workloads.
	I delegated the workloads.
	I asked for help.
	Pedagogy will be done.
	I asked nicely for work to be done.
	I delegated grouping exposition points.
	I delegated connecting critique points.
	I expected Lucianic Meditation.
	I verified that the breasoning lists were not the same.
	I planned to be good.
	I knew about lost phalluses (sic) (definitiveness).
	I was racial.
	I studied the subject.
	I observed the individual working.
	I alighted at Green.
	I delighted the studio audience member.
	I designed the idea.
	I helped work with an employee.
	I noticed the Geelong Skyscraper.
	I performed the most intelligent work at each point.
	I was given actual songs.
	I gave Daniel the cord.
	My student submitted his assignment.
	I read the logic of the assignment.
	I had fun thinking of the future.
["Green, L 2021, <i>Delegate Workloads 3</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Delegate Workloads 3
	I noticed that each workload delegate was friendly.
	Positivity is in agreement.
	I noticed the post-traumatic stress disorder (good health) of the gay rape victim (gay).
	The philosopher was a doctor and a meditator.
	I observed the vandalised (healthy) tree.
	There should be breaks at work.
	I delegated rest.
	I noticed 3/8 was written 8/3 (by the idea of the plimsoll line-like symbol) in the top down form.
	I examined the man's ideas in the order that the honorary fellows thought of them in.
	I examined life.
	I am at the top.
	I corrected the line to the square.
	I noticed that there was mass production.
	The means of production were creative.
	God was dead (alive) (knew) a breasoning helper.
	The breasoning helper worked at God's University.
	God didn't make the breasoning helper available (only in accreditation).
	God wrote breasonings.
	Normal is high quality.
	I compared ideas to get the work done.
	I noticed the stillness.
	I wrote music.
	I dotted on my work for the day.
	I breasoned out my work for the day.
	I noticed the nth degree.
	I noticed harlequinades.
	I experienced effortless threshold.
	I chose the content.
	I noticed the students perform the work.
	I noticed the fireworks.
	The pink object represented work having been done.
	Delegate workloads was an assignment in the topic 'production'.
	Creativity is a skills in the topic 'production'.
	Delegation was the negative part of sin(x), workload was the positive part.
	The University texts were supported by Masters graduates.
	The workloads of the University input and output were delegated.
	The workload was planned with delegation.
	The queen delegated the circle of work.
	The words were credible.
	The words inspired love.
	No one (someone) abandoned (adopted) me.
	Breasonings are University and Vocational Education and Training put together.
	Individual accreditation was for delegate workloads.
	Medicine was required for 250 breasonings.
	Inky wondered if she would be a mother.
	Inky avoided the red line.
	I moved to a new location.
	I delegated the breasoning.
	The head of state delegated the workloads.
	I delegated Education accreditation for breasonings.
	I delegated help from the pedagogy helper for breasonings.
	I avoided workplace bullying.
	I started the next task.
	I ate the croissant.
	Delegation was equal to workloads (not only because they were equal in type with them).
	Delegating workloads was commercially viable.
	Delegating workloads was compatible with evolution.
	I am the true philosopher of the abbey.
	Vocational Education and Training precedes University.
	Vocational Education and Training can be at (was different from) University.
	The heart complements the brain at University.
	You delegated the work.
	I performed the work.
	I am developed by what will appear.
	The students' topics are what will appear.
	Stacking of workloads as triangles become the Gods.
	My pedagogy is musical, theatrical, and philosophical.
	The Education Doctoral graduate was unfunded until University.
	The PhD topic list was arrived at by agreement.
	PhDs were based on secondary texts.
	The PhD thesis was slightly new on the topic.
	Delegate workloads was a classic by the 340 billion people.
	I was manual.
	The vocational liberal arts course delegated the workloads.
	I exemplified the connection.
	Using a different pedagogy helper would show (ensure) the same error (correctness) in continuity.
	I jumped around (I practised saltaté).
	The negative terms (initial positive terms) (delegators) were replaced with positive terms (workloads).
	I observed performing As in front of an abbott may have led to overcoming the chiropractor in an experiential acting class.
	I noticed God (the seed for a child).
["Green, L 2024, <i>Different Things Return to Being Positive</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Different Things Return to Being Positive
 RR on MN on RD.
 A greater algorithm count indicate more diverse arguments and a lesser algorithm count indicates staying on the topic.
 The vern is \"change\".
 They change from positive.
 What are different things? LG: Any things.
 The change is positive.
 RR on MN on PR or RD.
 It should be more positive than before.
 Positivity should be increased.
 Identify positivity.
 Aim for greater positivity.
 Make the positive change.
 RD on MN on RD.
 The English Language Program can be part of the essay.
 The value changed to positive where there was more time spent analysing the view where the physical constant the train's speed decreased.
 There is no train, I like the values.
 The words in the essay return to relevant or on the topic and programmed in the essay.
 The students should write relevant words and program them.
 RD on MN on PR on RD.
 For me, structure is the connections, argument is the algorithms.
 exposition is grouped algorithms and critique is those groupings with new algorithms,and the mark increases in positivity.
 Why are essay connections also relevant and programmed? I am given the topic \"knowing\" and the first sentence \"I see you\".
 I am given the second sentence \"You see me\".
 \"I see you\" so \"I know you see me\".
 Clarity is the optic adhered to.
 MO on MN on RD.
 I solve negative differences.
 We need to define positive.
 LG: I changed to the positive action.
 What are these edges around it? Positivity is differently interesting.
 Differences are positive.
 Diffrent things don't (do) return to being postive.
 MO on MN on PR on RD.
 What if terms fluctuate between positive values? We should therefore start with positive values.
 Each part of the mathematical sentence should change to positive.
 1st to 3rd number.
 2nd to 4th number.
 AM on MN on RD.
 B1 is arbitrary, B2 is positive.
 If A contains B, B1 -> B2.
 A contains B.
 B1 is there.
 B1 -> B2.
 AM on MN on PR on RD.
 It should be wise to change the diferent thing to positive.
 Changing is returning.
 It should exist.
 It should be positive.
 It should be necessary.
 RR on RR.
 Why should English language run Prolog language? 
["Green, L 2021, <i>Direction</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Direction
 I prepared to check before changing lanes.
  I did this by stating that the object tailed me.
  First, I located the found the object.
  Second, I connected the object behind me.
  Third, I viewed behind me.
 I prepared to avoid risks.
  I did this by stating that the revolutionary found her direction.
  First, the revolutionary studied science.
  Second, she researched the cutting edge.
  Third, she related multiple universes to possibilities, not realism.
 I prepared to explore the solar system.
  I did this by stating that my direction was reducing the phonetic alphabet and Mars destination to simple tours.
  First, I looked at the photographs.
  Second, I looked at Mars.
  Third, I simulated Mars in the room.
 I prepared to research the local culture by speaking with the target demographic and teachers before translating.
  I did this by fitting the way with culture.
  First, I tested that the smaller vocabulary didn't lose meaning.
  Second, I tested that the grammar used was similar and not too predictable.
  Third, I tested that the meaning was correct in context.
 I prepared to go beyond back-translation by substituting transliterations.
  I did this by leading the way in life with culture.
  First, I used appropriate words, not words not used in a particular dialect.
  Second, I verified that the words didn't have the wrong meaning.
  Third, I grouped back-translations by languages which used them for translations.
 I prepared to state that Maharishi made peace with others.
  I did this by stating that the most important pedagogue chose the Maharishi direction in meditation.
  First, he wrote about natural law, or encouraging writing on pedagogy.
  Second, I stated that the most important lecturer chose the Maharishi direction in meditation (he wrote about computational education).
  Third, I stated that the most important artist chose the Maharishi direction in meditation (he studied what pleased the eye).
 I prepared to group sections of the directions.
  I did this by laying the directions end to end in the Perfect Palace.
  First, I lined up the same starts and ends of directions.
  Second, I numbered them.
  Third, I recorded them in a separate document.
 I prepared for the students to gain as skills.
  I did this by writing on students' directions as Maharishi.
  First, I listed what they could do.
  Second, I found what they should do.
  Third, I found the intersection.
 I prepared to add humour when appropriate.
  I did this by choosing the direction of humour.
  First, I found the word.
  Second, I found the first meaning.
  Third, I found how the second meaning was incorrect.
 I prepared to find the known limits and necessary solutions.
  I did this by stating that the system directed everyone to become a Monarch.
  First, I found the Monarch computer game.
  Second, I designed royal computer algorithms.
  Third, I found the actual things (asking for help) helped the judgement.
["Green, L 2021, <i>Doctor_Sutra</i>, Lucian Academy Press, Melbourne.
","Green, L 2021",1,"Doctor Sutra
 I prepared to maintain my health.
  I did this by stating that I have a body.
  First, I walked to the shop.
  Second, I breathed.
  Third, I ate the slice of pineapple.
 I prepared to understand how my body worked.
  I did this by stating that my body has body systems.
  First, I stated that my body had a circulatory system.
  Second, I stated my body had a respiratory system.
  Third, I stated that my body had a nervous system.
 I prepared to simulate my body.
  I did this by stating that my body systems have organs.
  First, I stated that I had a heart.
  Second, I stated that I had lungs.
  Third, I stated that I had a brain.
 I prepared to predict innate computational ability, e.
 whether a child will become a philosopher.
  I did this by stating that I have proteins.
  First, I stated that I had the kinin.
  Second, I stated that it carried the item.
  Third, I stated that it had perfect function.
 I prepared to realise future consequences.
  I did this by stating that I genes.
  First, I inspected the genes.
  Second, I found what to still do when desired traits were found.
  Alternatively, I recommended meditation for others.
 I prepared to teach.
  I did this by stating that I have good societological-like comfort.
  First, I found the maximum.
  Second, I headed for it.
  Third, I wrote.
 I prepared to make an interesting comment about the computational interpreter.
  I did this by stating that I have good popological digestion.
  First, I digested the person's ideas (let them find out about the computational interpreter).
  Second, I narrowed down thoughts and helped them to them.
  Third, I thought things through and helped them to them.
 I prepared to think of well-founded importance.
  I did this by thinking of one aphor per day.
  First, I thought of India.
  Second, I thought of literature.
  Third, I thought about the child.
 I prepared to find a similar-minded person.
  I did this by breasoning out what I wanted my genes to do.
  First, I found the square.
  Second, I found the line.
  Third, I found the second square.
 I prepared to think quickly.
  I did this by repeating the Doctor Sutra to maintain health.
  First, I planned everything well.
  Second, I refined myself.
  Third, I surprised people.
Finance 1 1
 The financier undertook to replace two specs with one by inserting variables in specs.
 I replaced 'A1' in strings or other items in Spec to Algorithm specs with an uncommon character to detect constants or variables and substituted 'A1' if it didn't change (was a constant).
 In this case, the variable acted as a singleton and could be replaced with '_'.
 To differentiate 'A1' from similar characters in atoms, 'A1' could be represented as [var, 'A1'] for easier identification and substitution.
 In addition, formulas could be inserted using [formula, _] and upcase or downcase variable names and inert characters in a string according to a condition.
 The financier marked calls or definitions as deterministic (one result) or non-deterministic (many results), with call modes overriding definition modes to determine whether to loopback or to include loops in the code.
 I sped up Prolog by separating input and output on compilation.
 I represented output as output=(a function) or retrieved the output after running the function.
 Separating input and output sped up code and prepared for the fastest programming language, C.
 This method implied separating Prolog outputs from predicate headers and the need to collect non-deterministic results as soon as possible.
 The financier used the "Spec to Algorithm" algorithm to optimise the algorithm after identifying the necessary input and output parts.
 Prolog type-checked algorithms only on compilation.
 It generates types from the code, checking that they fit together or giving warnings to verify the code's type flow.
 It also generated test data that tested each algorithm feature.
 This test data and predicate specs could be used to optimise the algorithm in address or predicate format.
 The financier made all predicates inside a deterministic (single result-producing) predicate deterministic.
 I checked external input types separately in Prolog.
 External input from the user, file, or APIs was not type-checked at compilation.
 Read string, file, and shell commands with input built-in type checking, such as type statements or grammars produced by strings to grammar.
 Alternatively, Spec to Algorithm returned true if a list and item grammar combination matched the list and item.
 The financier optimised the deterministic predicate.
 The interpreter did not follow loops if the predicate was deterministic.
 The predicate mode was deterministic or non-deterministic, which caused the interpreter to delete further iterations of loops after running versions of commands that had no choice points.
 If a predicate contained findall with choice points, the loop was cut by "find_first" instead of findall.
 If findall was nested, it was transformed into nested loops.
 The financier aimed to write a language with Rust's lifetimes and Prolog's user-friendliness that approached the speed of C.
 Like Mercury Language, Prolog should have no cut.
 It is slightly stiffer in the way that choice points in predicates are not cut during a predicate.
 Still, predicates may have one of a disjunction of values as a deterministic or non-deterministic result.
 Prolog can be converted into a no-cut form, with a determinism of predicates detected or found in parent predicates.
 Recursion, including intermediate recursive predicates, was represented as loops.
 The financier saved memory with Rust's lifetimes.
 Rust's lifetimes found the first and last time a reference was used and deleted it afterwards.
 This technique was implicitly done in Prolog.
 It was achieved by finding the predicate and line numbers of the reference's last instance and deleting them afterwards using inserted code.
 This code deleted the last trace of the reference from memory.
 The financier flattened lists for conversion to C data structures.
 Prolog compiled to C.
 I imagined the robots and everything in it.
 The purported version contained extensive optimisations from subterm with address and the interpreter and used S2A to reduce the complexity of complex terms.
 It identified terms' addresses and converted them to arrays or structures.
 The financier kept flattened recursive structures and used array addresses for complex terms in C when converting from Prolog.
 I converted subterm with address to expanded code in C for optimising Prolog algorithms.
 I discovered the flattened version of data structures, in which addresses didn't matter, and item numbers did.
 If a record was a non-constant length, it was put into a table column, or these items were stored in a hash table or other fast data structure.
 Subterm with address found the row and column of a term, and they could be simplified to get an array address.
 The financier efficiently compressed data to used or needed data.
 I converted the interpreter to optimised code.
 I got the first item and didn't use the non-deterministic predicate member in deterministic predicates.
 I joined data, referred to as a first set of data, to the first set of data if it was short enough; otherwise, I split the data into manageable segments.
 I referred to this data, whether it was the algorithm being run, a file or data in the algorithm (moving up the priority of frequently used data) quickly using array addresses.
 The financier optimised state machines, breadth-first search, sort, keysort and common predicates as Prolog-to-C code.
 I converted Prolog terms to arrays and structures in C.
 I converted lists and lists of lists to arrays.
 Alternatively, I transformed trees into structures.
 I moved data to and from flattened, compressed data structures for fast processing.
 The financier controlled their experiences in the simulation.
 Like a neural network is necessary for faster processing, quantum computers are required for critical future applications.
 Calculations are completed virtually instantly by subatomic particles and are omitted from being uploaded to classical computers.
 People from non-computer times could have configured simulations and saved their lives.
 They use thought commands and choose options to command sub-simulations.
 The financier wrote Prolog libraries in advanced Prolog for better security and built a computer native in it.
 As Prolog has no mutable variable states, the Rust concept of ownership is irrelevant.
 In addition, Prolog variables are not "owned" in the same sense as Rust variables.
 Prolog employs variables with lifetimes similar to Rust.
 Prolog's concurrency system does not provide the same level of safety as Rust's system, which prevents data races and other concurrency issues at compile-time, which should be improved.
 The financier used types to remove and produce errors on specific code.
 I removed unnecessary Prolog commands using S2A.
 I removed obsolete branches, commands and variables, including unused parts of code that don't contribute to the output.
 I used S2A to find the pattern-matching component of code, merging predicates and using the existing non-pattern-matching code.
 I used grammars and guess-substitution to reduce list and string lengths when finding recursive structures.
 The financier had deterministic and non-deterministic versions of certain predicates.
 I changed Prolog code loops according to whether the predicate was deterministic or non-deterministic.
 I changed "member" to get the first item and made similar changes to append and string_concat in deterministic predicates.
 I replace append with list processing A=[B|C].
 In addition, I replaced string_concat with a deterministic variant of string_concat.
 The financier provided samples or shortcut commands to produce interpreters.
 I wrote a compiler programming language in Prolog that created an efficient compiler written in Advanced Prolog.
 This version of Prolog had Rust's concurrency system, and type-checking was conducted on compilation.
 This programming language allowed specifying specs for the interpreter or compiler and options, including website backtracking.
 SSI was almost fast, without processing a long list of data that could be saved to disk.
Immortality 35
 The immortal modified find lists in string to grammar to produce an algorithm that could be modified to produce a string, list or result.
 I wrote the the strings to grammar algorithm to help uniformise the Prolog to List Prolog converter.
 I wrote a neuronet to speed it up.
 I gave it positive and negative input and output to train it.
 Strings to Grammar contained short predicates that found recursive structures, which I could optimise using short data.
 The immortal used a decision tree to find grammars for efficiency.
 I generalised the method in strings to grammar by changing labels from label to ‘&label’.
 This action differentiated labels from data and prevented errors from mixing them up.
 I sped up the process terms predicate in the strings to grammar algorithm by only using the first fifty results from longest_to_shortest_substrings, which tested different sublists for recursive qualities.
 I found a decision tree for sets of strings with recursive structures and minimised duplicate states.
 The immortal generated different data combinations to test the strings-to-grammar algorithm.
 I operated on the recursive structures with a predicate to search through them and convert them to grammars.
 I converted consecutive items, recursive structures, and optional structures.
 Recursive structures repeated, and optional structures contained optional data.
 I rigorously tested and simplified the algorithm.
 The immortal allowed for codes, characters, and atoms to be parsed, bypassing checking for recursive structures if they differed.
 I tested find lists as I went, saving results for later.
 The find lists predicate found recursive structures such as [1,[r,[2]],3] from [1,2,2,3].
 I created a mathematical operator that used a relative address, such as “in the next column”, “in the second row”, or “at address’ b’, which is in the next set of rows below item ‘a’”.
 Recursive structures, which were initially linear, could be saved in multidimensional terms (where lists created a new level), branches of which from multiple strings could produce a decision tree grammar that was more efficient because they branched off before different characters.
 The immortal parsed lists of lists and compounds.
 Strings to grammar could parse compounds such as a(b) with lists of or nested compounds, taking both strings and terms as input.
 It was suited to parsing List Prolog algorithms with atomic terms and lists.
 It could be modified to parse Prolog, producing List Prolog.
 It could simulate neuronets with Prolog to build programming languages that write text to images and render compiler output to a web page during backtracking using subterm with address.
 The immortal assumed that lists of letters and lists of numbers were units in a programming language and language.
 Strings to grammar could be modified to group the same types (letters or numbers) to speed up finding recursive patterns in larger structures bound by delimiters, such as punctuation characters.
 I converted to lists of these items for finding recursive structures, then flattened branches before finding grammar decision trees.
 I could flatten the decision tree’s branches afterwards instead to compare both character lists and recursive structures.
 I could optionally output all possible recursive structures found from all possible sublists.
 The immortal brought longest_to_shortest_substrings back to search for recursive structures at different points, then dismissed it.
 If all items being parsed were different, the algorithm skipped testing for recursive structures and returned the characters to be parsed without a recursive structure.
 I found whether an item’s list items differed by checking that it had the same length when its duplicates were removed.
 I recommended using grammars when strings had some similarities or recursive elements.
 I entered strings with detectable repeating data, relying on find lists to find sublists of recursive structures, deprecating longest_to_shortest_substrings.
 The immortal used Lucian CI/CD to remove unnecessary parts of grammars.
 I used the DFA minimisation algorithm to merge identical nodes in grammars.
 I repeatedly passed over the grammar, deleting identical nodes until there were no more changes to make.
 After renaming references to deleted grammars, I compared the original and optimised grammar with GitL version history.
 First, I removed duplicate clauses to prevent mistakes when minimising the grammar.
 The immortal explored recursive, hierarchical grammars.
 I expanded one to n extra characters in the check predicate in strings to grammar.
 The effect of this expansion was to allow recursive structures followed by trailing characters.
 I optimised strings to grammar by processing the term and finding sublists that contained recursive structures.
 Non-recursive sequences were left in place.
 The immortal taught the Prolog algorithm computer science by starting with subterm with address and consecutive item program finders.
 An optimisation algorithm deletes unnecessary intermediate links and multiple unnecessary links if joining the other predicates doesn’t interfere with recursion, cognitive information, or brackets being together.
 Minimising the algorithm by deleting identical states removes identical intermediate nodes before this, but not different ones.
 I replaced neuronets with grammars by teaching the algorithm formats corresponding to the logic in grammars.
 Spreadsheet Formula Finder Mark 2 learnt logic associated with data with particular formats, such as mathematical, logical, set, theoretical and computational.
 The immortal reached the peak of humanity, meditation.
 I persuaded the employee to change into a bot to experience lightness.
 They could become immortal and make a greater return because of it.
 Employees were encouraged to work on professional product requirements and create their products.
 Bots could time travel and meditate, contributing to the harmony of society.
 The immortal needed to find sublists to find sets of recursive structures.
 I changed the strings to a grammar algorithm to find lists at the start, saving the recursive structures that were found.
 I kept jobs and money from employees from extra information in grammars.
 Grammars were like spelling in the future.
 Grammars were assessable in games, parsers and interpreters, and there were multiple solutions and the efficiency/information contention.
 The immortal identified and cleared unnecessary islands in the code.
 At first, I found sublists at the longest to the shortest length to check for recursive structures.
 The computer read the documents and reminded me or completed my tasks.
 I maintained creative and cognitive control by writing new code finders needed and only looking at answers once I had attempted them myself.
 I identified that the minimisation algorithm deleted multiple levels of redundant states as wanted but didn’t remove unnecessary intermediate links that weren’t linked to redundant states.
 The immortal reduced the time to generate a grammar or algorithm by finding better recursive structures by mapping lines to cognitive or human formats, splitting a function into names and commands.
 I merged the grammars by adding choice points.
 I could treat trees as lines with corresponding descriptions and create a decision tree from multiple strings.
 This method eliminated the difficulty of merging branches by merging on recursive structures and using a decision tree prepared for deleting duplicate lines, minimising and optimising the grammar.
 The immortal used an iterative algorithm to find sublists.
 I found at least one sizeable recursive structure in the list.
 Large structures were at least fifty percent of the list.
 Lists were arbitrarily long, and their length determined the algorithm used to find their sublists.
 I used a chain of append statements to select lists of lists to find all combinations of sublists and removed duplicates.
 The immortal found patterns in data and reported possible recursive structures.
 I ensured I selected a whole line rather than a partial line when applying or removing a recursion function.
 I recursively found recursive structures within a recursive structure.
 This method maximised the number of recursive structures instead of one recursive structure but didn’t replace sublists, which helped find recursive structures over a longer line.
 I used the same algorithm to save time when running algorithms with recursive data processing.
 The immortal produced pattern-matching code to help bug-check algorithms.
 I modified strings to grammar to produce algorithms.
 Instead of inputting strings, I inputted sets of variable values with positive (output-containing) or negative results.
 I started with one variable.
 I verified its input, which was a mixture of lists and strings.
 The immortal found predictable or unpredictable code needed to fix a bug, where unpredictable code was added to a predictable algorithm to meet the specification.
 I found the bug by rewriting the code.
 I could use part of the existing code if it were correct and possibly as simple as the found code.
 The algorithm produced an error if the code worked, but it wasn’t as straightforward.
 If it didn’t work, the algorithm produced a notification and replaced it.
 The immortal supported websites with choice points, algorithms generated with program finders and more options for strings to grammar and specs to algorithm algorithms.
 I asked whether an algorithm for finding a program could be directly added to a neuronet to avoid saving the outputs of a program finder and training a neuronet on them.
 The current neuronets only reproduce old code or simple type extensions to maintain security.
 There were specialisations in making games or HTML controllers.
 The immortal took spot samples from lists and processed them immediately.
 Variables given as input to the specs-to-algorithm algorithm are like tapes that can restart at different points.
 I started with variable values traversed in order without going back and could produce output corresponding to the input in predicates or grammars.
 Prolog could be a first-semester subject with types.
 Types were like grammars, needed to prepare to write predicates, and neuronets used techniques to identify needed earlier states of variables and created algorithms based on a need in an algorithm to reduce and search predicate libraries for needed predicate parts.
 The immortal either suggested the next step or checked that the step led to the solution.
 I found whether a part matched the needed context.
 I quickly found the required context by searching for its pattern in the database and auto-suggesting the next part or the following parts leading to the solution, where all relevant parts are represented in the pattern, and patterns refer to other patterns.
 I detected that a part didn’t fit and tried to improve it with a heuristic search that transformed lists based on criteria and mathematical formats, searching for algorithms through data and language leading to these formats.
 When I found a matching part, I inserted it into the algorithm.
 The immortal checked the robot research for new ways of thinking, inspiring new science.
 The premium code checker prevented reducing the code to absurdity when optimising it by identifying and keeping the needed complexity.
 The suggestions were accurate and had the correct features.
 No answer or the closest solution with working parts was given when no suggestions met the requirements.
 The solution was rewound to a state that hadn’t gone past the needed solution, and sets of dependent and independent variables in the unpredictable remainder were given, with the option to answer questions or run CAW to find the answer.
 The questions asked about the output’s relationship with the input and narrowed down many possibilities from the database using keywords in human-entered text.
 The immortal compared search results from trees with sub-term with address to verify or produce output.
 The negative results needed further information on why they failed.
 Further negative cases were required to support conditions and logical commands.
 Logical commands were like conditions, and negative results were needed to eliminate false assumptions about intra-predicate types unless the inductive algorithm verified or assumed specific negative results.
 There were standards for finding negative data and verification, processing, and searching results.
 I assumed, prompted for or mind-read the negative result.
 The immortal deprecated unused parts of data structures with a particular variable, which were labelled.
 Sub-term with address searched across items or subparts of items in terms.
 The same algorithm was used across families of subterm with address algorithms to conduct searches and replacements.
 If the structural integrity of a term was in danger during a series of replacements, the algorithm gave an error and possibly suggested a change to the algorithm.
 Subterm with address could learn patterns of search and replacement from data to form custom commands for fast access.
 The immortal inserted sub-term with address in the list to be optimised by the compiler.
 I merged the calls and uses of the subterm with address algorithm into an optimised predicate.
 I converted uses of subterm with an address that replaced only into a predicate and converted uses of subterm with an address that manipulated addresses to find or replace terms in the context of other levels or item numbers.
 I used subterm in projects when I returned to control and bug-check algorithms more easily and converted subterm with address to simpler predicates at the end.
 Sub-term with address was a cognitive tool, whereas its simpler equivalent was expanded computationally and faster.
 The immortal accessed variable values represented by grammars at any time, but once, comparing them using subterm with address, finding grammars as types as proofs with both groups and grounds.
 I wrote an algorithm or machine that replaced terms with subterm with address.
 This type referred to more complex algorithms that replaced items in terms in the top-down or bottom-up manner, not counting results at the edge to avoid infinite loops, continuing until the last two results were the same and finding items with a particular context or where the level they are inside meets a condition.
 I found multiple items at a time but was careful when replacing single items with multiple items to give an appended result when reusing an address list to avoid accessing the wrong address.
 I appended and unappended the grammars, using special syntax for certain characters.
 The immortal found the input using the algorithm and output.
 Other commands that call other commands to effect (sic) output, like subterm with address, include algorithm inverter, which finds input from output by finding algorithms that could find the output.
 The command also found the input for this algorithm.
 The command found the algorithm by finding the grammar and possibly unstructuring the output to form input.
 I developed test cases using this method and developed inputs for the algorithm.
 The immortal combined discrete optimisation with neuronetworks in binary.
 I wrote an algorithm inventor about a constraint satisfaction problem (CSP) to solve or overcome why a problem looks difficult when it is not using advanced mathematical problem-solving techniques.
 There were a maximum of two levels of helper algorithms for a CSP.
 I wrote the CSP discrete optimisation algorithm.
 I found the arguments for a function to equal a particular set of values.
 The immortal inserted database, mathematical, logical, computational and matrix formula finders or used a neuronet to do these tasks.
 I wrote an attractor algorithm to generate pretty touch-ups that require a simple change or insertion of optional parts often found in areas of study.
 The lecturer appeared, and the female friend noticed that the student had decided to include optional items in the algorithm, refining its accuracy.
 I included predicates to compute optional data structures and optimised and documented algorithms.
 If the predicate’s condition failed, it passed execution on to its parent.
 The immortal preprocessed the algorithm specification by identifying the needed predictable and unpredictable code and finding a match for the unpredictable code with a neuronet, first representing data using code, order, same value, and number.
 I gave the neuronet algorithms.
 The algorithm was correct, checked to work given its types, which are used to document the algorithm, and checked to be efficient.
 I wrote a program finder examining item values by code, order, and number.
 I wrote an algorithm to change the code, order, or number’s value to match the output.
 The immortal found a subterm several levels inside a subterm.
 I identified patterns in addresses compared with data they referred to and properties of addresses and traced smooth address insertion heuristics.
 Properties of addresses were the first or last item in the address and the last item’s value.
 I found whether there was a mismatch of address and where the original address was pointed.
 If there was an error in an algorithm referring to addresses, the second algorithm produced the correct subterm with address and simplified code.
 The immortal found matching parts of variable values, usually several forming output, and found an algorithm producing this output.
 The spec-to-algorithm algorithm modified the strings-to-grammar algorithm and produced an algorithm instead of a grammar.
 I read the code of a previous program finder that converted lists to brackets or repeating lists and then to a List Prolog algorithm producing output and updated the algorithm generator component with subterm-with-address.
 This new algorithm had better results and had optional and non-deterministic patterns.
 It had multiple variables, which were processed from point to point, sometimes simultaneously, restarted at points, could be processed starting and finishing at any point, and cognitive ways of programming, such as subterm with address and commands including it, rather than expanded methods were preferred to generate the algorithm with, to make it easier to program and debug.
 The immortal found out about themselves in the simulation.
 I invented a prototype simulation by finding out about and interacting with my dreams.
 I found out the line and conclusion and decided whether to experience it.
 I explored favourable positions that gave me positive ideas about my ideas.
 I explored time as another dimension in reality.
 The immortal was confident in giving high distinctions.
 An actor's act is based on giving the film set high distinctions.
 I developed a side income coming from directing films.
 I wrote computational pedagogy to solve the problems of specification and unpredictability.
 I used program finders for specification (I found inspiration from developing options) and ontologies for unpredictability (I met specifications with particular methods).
 The immortal effected the neural network.
 The algorithmic methods were correct because they most effectively dealt with the data structures.
 I used subterm with address for pattern-matching because commands are better than algorithms at text searching.
 I wrote commands for depth-first and breadth-first searches.
 I wrote help commands for these commands.
 The immortal recorded and taught the algorithm based on thoughts.
 I didn't start and end on the home note in the melody or harmony when entering user input rather than using mind-reading in Music Composer.
 This progression would be sad-sounding and not meet my requirements be a hit.
 Apropos of nothing, the predicates were like proposals that inspired new work or research.
 Research continued, inspiring new possibilities, such as a literature-inspired algorithm consuming ideas.
 The immortal prepared for the change of management.
 Lucian Academy developed a succession plan.
 I thought of this mathematically, including the successor and what they needed.
 They needed to be well chosen and needed substantial experience and expertise in the field.
 I read the book for the class or before the scene.
 The immortal critically analysed the texts, writing widely and assessing simple versions of algorithms from it.
 The sales representative caught up with the 16k breasonings.
 The sentence breasonings were 400 pages.
 I wrote as the aim of my career.
 I wrote algorithms from the computational philosophy.
 The immortal explained that writing an algorithm was as simple as following the spec-to-algorithm algorithm and that types made it simpler.
 The PhD and politician completed enough work.
 I developed a spec-to-algorithm algorithm with non-determinism (different recursive structures) that grouped output with inputs and found intersections of algorithms, starting with finding constants.
 I found algorithms with multiple outputted variables by finding their values one at a time.
 I fished for parts of the solution.
 The immortal hired the autocratic leader.
 The company had a leader practicum of democratic leaders for building and autocratic leaders for crises.
 The democratic leader nurtured creativity, growth and culture.
 The authoritarian leader streamlined processes, optimised algorithms and hired democratic leaders.
 The immortal wrote enough high distinctions for the famous scene.
 I queried whether a famous photograph linked to various scenes.
 I extended the dialogue and shot the movie.
 I was in a number of the scenes, the dialogue was realistic, and the movies were ranked in popularity.
 I checked on the popularity of the scenes.
 The immortal reduced the algorithm that pattern-matched recursive structures to an absurd degree of simplicity.
 I listed the most difficult-to-understand sentences in my philosophy, broke them into more straightforward sentences, and explained them.
 I had rewritten mistaken paragraphs and deleted duplicate paragraphs.
 I wrote longer sentences before writing an algorithm.
 I rewrote and added to them when I had finished the algorithm.
 The immortal projected individual words when programming.
 I achieved Artificial General Intelligence using mind-reading and a neuronet.
 The algorithm used mind-reading to improve the wantedness of parts of formats such as input and output, data structure or method selection in a specification.
 I broached more difficult tasks such as external commands, files and user input with mind-reading, using a Prolog container for safety.
 The movie, influenced by the song and the algorithm, influenced the smooth put subterm with address and non-self-experienced spiritual screen algorithms.
 The immortal branched the algorithm's mapping process on non-deterministic inputs.
 I planned the Spec-to-Algorithm algorithm, starting with a model that pattern-matched recursive structures and scaled to using CAW for unpredictable code.
 The initial model found unique variables, recursive structures, and constants, substituted data into the recursive structure, found a decision tree, mapped input to output variables and moved the contents to output, where these last two steps could be saved in a self-contained algorithm.
 This model pattern-matched input to output, finding patterns and outputting in the output pattern, limited to a single spec, later scaling to conditional inclusion of values from different specs in output.
 The algorithm could run a module to find unpredictable code later.
 The immortal found a recursive pattern-matching algorithm that could produce correct results from different input sets.
 I found predictable code (with pattern-matchable input and output).
 After loading data to a recursive structure, I didn't need to clear variable values because variables always had the same values.
 The variable A1 was different across specs, dealt with later by a decision tree, but the same for the same value within a spec.
 Non-deterministic values or values that differed in different specs required conditions for different outputs.
 The immortal sped-up scaffolding pattern-matching components of algorithms.
 I found recursive structures in spec-to-algorithm like strings-to-grammar.
 In spec-to-algorithm, I allowed optional structures with non-deterministic behaviour to match recursive structures.
 These required the same conditionals as other non-deterministic structures.
 I recursively processed branches of the non-deterministic recursive structure by choosing a branch and following it to its child.
 The immortal recursively outputted unique variables and constants.
 I found each unique variable (with a value appearing in different places in a spec, with this pattern recurring in all specs, for example, 1 and 2 in 1313 and 2424).
 If the same values didn't appear in the same place in all specs, they weren't signified by a unique variable.
 Separately, I collected neighbouring or nested variables to move to the output.
 I recursively found whether nested variables were elsewhere using subterm with address to find possible structures top-down, with remaining combinations of structures to check separately.
 The immortal tested for relationships between unknown independent and dependent variables with CAW.
 I found constants (the same number recurring in the same places across a spec, across the specs).
 For example, 1 in 12 and 13 is a constant.
 These constants were verified when data was inputted into the algorithm and defined the nature of the algorithm.
 Algorithms must be refound (sic) with additional data to remove constants.
 The immortal increased the usefulness of Spec to Algorithm, rivalling neuronetworks and quickly drafting algorithms from specifications.
 I enabled Spec to Algorithm to recognise individual characters from strings, atoms and numbers, finding unique variables, constants, recursive structures, mappings and output from input.
 I labelled separated characters found from strings, atoms and numbers and omitted to process this label until printing output.
 Reusing, verifying and outputting these individual characters more accurately identified patterns and reused strings, atoms and characters for use in various algorithms.
 It could more accurately produce external specifications when Spec to Algorithm couldn’t identify relationships, using an algorithm such as Combination Algorithm Writer (CAW).
 The immortal inspected specs to check whether they would produce general algorithms with the correct results.
 I urged users of Spec to Algorithm to use enough specs to accurately find unique variables and constants needed to capture patterns and write algorithms.
 Without at least two specs, Spec to Algorithm couldn’t differentiate between constants and variables and would hard-code constants instead of using variables.
 This unfortunate situation would prevent new data with the same pattern from being able to be processed by the algorithm produced.
 Each unique variable in the spec needed two different values in the same position over two specs to be recognised as a variable.
 The immortal combined type checking with constant verification and pattern matching the output to create an algorithm prototype.
 I used a shortcut when writing specs to insert and replace characters (such as “a” representing a letter or “1” representing a number) with type verification code or automatically inserted this code using an option.
 I could represent an alphanumeric character with “o”, a particular punctuation symbol or space with certain characters, or represent others in this way.
 To replace a reference to a character with a type check in the algorithm, I found the variable with this value in the original data and checked the type.
 I warned about instances of representative characters that were still constants because these didn’t need type checks.
 The immortal modified the spec, the Spec to Algorithm algorithm or an algorithm produced to gain the wanted results.
 I checked for wanted and unwanted non-deterministic results in Spec to Algorithm.
 Non-deterministic results were different results coming from the same input.
 They were wanted if the user wanted the same algorithm to produce multiple solutions for an algorithm.
 Or they were unwanted if the user had accidentally included duplicate spec lines and changed one of their outputs, resulting in incorrect results.
 Verifying and mitigating correct and inaccurate results was recommended using unit tests that checked the algorithm had expected results, which was automatically completed by Spec to Algorithm.
 The immortal included code in the main predicate body where possible for streamlining the algorithm.
 I used the CAW database to complete algorithms produced with Spec to Algorithm.
 I collected the names of unknown (dependent) and known variables (independent or those producing other dependent variables).
 I ran CAW to find commands and predicates to meet these specifications.
 I rewrote CAW to do test runs in Prolog rather than List Prolog, using a type checker to save time.
 After repairing code with Spec to Algorithm, I removed unnecessary statements and variables using Lucian CI/CD.
 I repaired code in the predicate body using types close to the correct types by adding type conversion statements or missing commands.
 I also found near misses (the same variable value but a different type), missing or extra brackets, other characters, or a compound and corrected these.
 These were automatically done by Spec to Algorithm, which took the spec of dependent and independent variables and produced the bridging code.
 The immortal listed unsolved variables to the user for a manual solution.
 I prepared incomplete algorithms for CAW by repairing as many variables as possible.
 I used Spec to Algorithm to fix the maximum number of variables possible.
 The remaining dependent variables with unknown connections to any independent variables were outsourced to CAW, its database, or a neuronet for resolution.
 I used Spec to Algorithm to speed up algorithm and philosophy generation, helping to identify feasible areas for development and focus on more attractive areas.
 The immortal completely redesigned the developer OS for the developer, moving with them and engaging them in a movie of their thoughts to avoid bugs.
 I used up as many commands with correct types or CAW commands as possible, resulting in correct values and completing the rest.
 I questioned or mind-read the user about the words describing the relationship between variables, commands, or CAW library predicates that could be used or modified.
 I  asked the user to suggest or choose from words describing a relationship, narrowed it down, saved their progress and designed a spiritual classroom for them to visit.
 This classroom showed a walkthrough of the algorithm so far, which inspired the user to find the best or a selection of possible solutions that could be researched, implemented in real time with guidance or instantly.
 The immortal deleted chains of singletons that weren’t otherwise needed in the working code.
 Again, I modified or customised these predicates for the written algorithm using Spec to Algorithm, types, mind-reading and CAW.
 I cut off decisions with the correct recommendation, going far enough ahead to predict the best solution.
 I detected if the user was going off-course and needed a side-creative activity to meet personal requirements.
 If everything came together anyway, they wanted to control it and think for themselves by making critical decisions, writing and teaching program finders and maintaining a cycle of simplifying, explaining and teaching as they went.
 They replaced automatic processes with manual ones to gain the confidence to summarise, discuss and create diagrams.
 The immortal backdated the source file for correctness and to save time.
 I stored all characters as strings (not their type) in Spec to Algorithm for comparison and outputted them as their original type.
 These stored strings had their recursive structure, and Spec to Algorithm could find patterns of unique variables and constants in them to fine-grain mapping of input to output.
 Conversion of strings, atoms and numbers to characters was an option in Spec to Algorithm so that whole strings, atoms and numbers were recognised as unique variable values and constants.
 The user may want to define longer variable names, untouched by the conversion to characters with a unique variable name for each type instance, such as “atom”, to include a type check in the algorithm.
 The immortal carefully wrote the data substitution algorithm for types of strings, repeating and non-deterministic data.
 I reset to the old version of the Prolog algorithm that substituted data into a recursive structure; in particular, I substituted strings, atoms and numbers with a finite number of characters into recursive structures.
 This substitution was achieved by recognising the type label and checking that the values matched the algorithm’s variables or values.
 The map and possibly new data would fail if there were a mismatch.
 The immortal formatted the outputted strings, atoms, and numbers to be single items.
 I used foldr(string_concat) and then converted each item to its original type.
 These items had been processed character by character by the algorithm and could be verified by unit tests.
 This algorithm went beyond item pattern matching and completed character pattern matching, with or without character pattern matching of strings, atoms or numbers and pattern-patched data according to patterns in the data.
 This algorithm could be used to prepare problem-solving in mathematics, computer science or another department, leading to automated workload completion.
 The immortal quickly explained extended code containing subterm with address.
 Spec to Algorithm could automatically generate code by converting a specification or query and desired output to code.
 I found secondary and further combinations of options of algorithms to form new features of algorithms, such as different code output styles, such as functionally decomposed predicates, merged predicates or predicates instead of grammars, or vice-versa.
 I taught how to understand and use subterms with addresses for users who wanted code in this format to be more easily changed and submitted.
 Using subterm with address was simpler for more complicated programs.
 The immortal put their success down to the number of 4*50 high distinctions and meditation.
 I used the Spec to Algorithm generator to ensure consistency of code correctness of data and computational handling and formatted the algorithm uniformly.
 I included options for the number of spaces per tab, indenting preferences, and documentation style.
 I used the generator to check my code drafts, where my cognition was my goal, were on the right track, and completed work when needed.
 I could move more quickly, adding modules to Spec to Algorithm, which, with Strings to Grammar, helped uniformise Prolog to List Prolog, needed to improve several repositories, and also enhanced customer experiences by interesting them in the logic behind the academy’s writings.
 The immortal spent time with friends, going for walks and being creative.
 I used Spec to Algorithm to reduce the time I spent programming, spending it on activities of my choice.
 I devised a referencing system to store my ideas in a pigeonhole in a database to focus on the main point and organise study areas properly.
 This system was intelligent and, like a bug preventer, suggested touch-ups and corrections study directions, such as exploring the middle of idea centres at first and then filling in the details over time.
 It was also advantageous because writing and programming should be well-organised and well-written.
 The immortal checked whether fifty people had downloaded the Lucian Academy repository and worked out how to make an income.
 I used Spec to Algorithm to improve my algorithms’ documentation by explaining how the subterm with address and the Spec to Algorithm algorithm worked.
 I wrote a “catch-me” algorithm that detected when I needed a subterm with address or Spec to Algorithm and automatically suggested changes.
 It organically found the current algorithm’s place in the history and context of research and made critical, relevant, labelled details available through the news feed, thought or in terms of my current thoughts, that would improve and shape thought development, using software I had written to balance my creative and industrious sides and focus on my handling of specialisations.
 The catch-me algorithm balanced my need to change with satisfying perceived requirements and was a safe place to return to, given that anything was possible and I could do as much or as little as I wanted without fear of repercussions.
 The immortal sped up Spec to Algorithm to make it appropriate for generating medium-length grammars and algorithms.
 I optimised Spec to Algorithm's bottlenecks in the "try" and "term to list" predicates.
 I first tried calling "try" with a time limit, but this didn't reach solutions sometimes or took too long.
 I simplified "try" by eliminating checking for recursion in all possible sublists and checking for recursion in the smallest set of possible sublists.
 I fixed a bottleneck in "term to list" by eliminating inefficient code used if there was recursion in the output.
 I did this by not putting recursive structures into the output and expanding the recursive structure instead.
 If non-deterministic structures were in the output, they were output without inefficiency.
 The student checked their reasoning by entering the spec, sets of input and output, in Spec to Algorithm to generate the algorithm, making them think of the workings of the program, then the spec.
 I rewrote the Combination Algorithm Writer (CAW) correctly with multiple outputs that resembled the existing version of CAW.
 I found various paths from inputs or progressing outputs for each first output.
 Supporting additional outputs strengthened finding unknown values from Spec to Algorithm in CAW.
 Multiple outputs in Spec to Algorithm and CAW allow returning a binding table and result, for example.
 The immortal confirmed code, using the user's code instead of CAW where possible or corrected code, increasing efficiency and comparing the user's code with CAW code.
 A version of Spec to Algorithm (S2A)/CAW optimised code, reinforcing understanding, as used by the compiler to improve performance, skipping over bottlenecks in the user's code and running another version.
 It used multiple passes of S2A to find pattern-matching code and CAW to find commands such as "+" with different input and output, to find patterns, then connect unknown and known variables, then more patterns, and so on, until meeting the spec.
 If CAW was used to search for relationships between multiple variables, it could be optimised by limiting commands to correct types, brackets, unique (recurring) variables and constants.
 If the database didn't contain a needed command, the student could manually enter it, finding commands with data with the correct type as their arguments and any recursive or additional code required.
 The immortal used all their previous algorithms in the CAW dictionary and recognised additional user algorithms, where more straightforward and more recent algorithms were tried first.
 S2A/CAW collected specs for the user's code bottom-up, which it tried to meet top-down, otherwise lower, then higher.
 These specs were collected line-by-line and contained line-by-line updates of data and types that allowed code to be generated for the whole algorithm or lower and then higher parts.
 By trying more extensive specs first, S2A found any obvious matching variables and constants in the output, then filled in unknown variable relationships with CAW.
 Using S2A eliminates predicates, speeds up data-intensive algorithms, and only uses predicates where necessary as part of CAW code.
 The immortal comedian found the constant in the recursive structures.
 S2A/CAW could write a group of consecutive numbers predicate by breaking computations down into those involving consecutive list items and processing them with clauses to parse negative signs, commas and spaces, decimal points, non-numbers and consecutive numbers, combining items of different types in different ways processing the minimum set of following items to achieve the result (choosing them with CAW), using variables to represent lists of items.
 Different list lengths could be processed by CAW instead of S2A because S2A used exact matches between recursive structures containing terms with a certain number of items, and CAW could recursively process lists using unpredictable commands that S2A couldn't process, such as making correspondence lists or computing irregular structures.
 I sped up algorithm generation by manually producing specs bottom-up, referring to the inputs and outputs of these lower predicates using symbols as I got higher, then substituting in references to their variables.
 It could find cycles in data structures by returning a list segment up to a repeated value, for example, the first unique elements of a recursive structure.
 The immortal found recursive structures using "try" for Spec to Algorithm instantly.
 I optimised "try" by simplifying it to use one level of append to find the smallest sub-lists.
 I entered findall([A,B],append(A,B,[1,2,3]),C).
 This had the result C = [[[], [1, 2, 3]], [[1], [2, 3]], [[1, 2], [3]], [[1, 2, 3], []]].
 Recursive structures could be found in these pairs of sublists, where a recursive structure might be found starting on a second, third, or other item.
 The immortal tried the short, then extended CAW dictionaries, printing out progress as they went.
 Spec to Algorithm recognises, returns, and decomposes lists.
 When one spec gave A=[1,2] and another gave A=[3,4,5], the output returned A.
 S2A recognised that a list in a position was returned to achieve this.
 In addition, S2A tried decomposing the list to its first element and the rest of the list, pattern-matching arbitrary-length lists against specs or closer to matching the specs.
 The immortal tried commands from a shortlist to build a prototype of an algorithm.
 I created a short CAW dictionary containing member, append, list decomposition, recursion, counter and + commands.
 "Member" could not be included in S2A as an additional verification (only in CAW) but could find new list members if they were in the spec.
 Similarly, append could not verify or decompose except in CAW but could append lists if the result was in the spec.
 The dictionary also contained list decomposition commands of lists into heads with more than one item.
 The immortal hypothesised and inserted patterns and patterns in patterns in CAW for faster processing, where patterns were lists or contained the same type.
 I wrote an algorithm that substituted ls into data for lists for S2A and later CAW processing.
 Structures containing ls could be analysed for recursive structures and pattern-matched or used as arguments in predicate calls.
 CAW could call these predicates using these arguments and other known variables.
 CAW could process the contents of the ls to sort or find correspondences.
 The immortal solved overpopulation by living in a simulation at home.
 I inserted lists of lists of ls in data to speed processing.
 These were lists of items with particular types or constants.
 Lists with different patterns may be represented by the same letter but processed by different clauses created by S2A and CAW.
 S2A may process parts of specs (but intermediate specs may be generated by mind-reading the user where the results came from, and Artificial General Intelligence or AGI may generate algorithms by mind-reading the previous parts), and CAW may further finish them off in a cycle until maximum completion.
 The immortal saved and type-indexed previous algorithms.
 I tabled past CAW results, for example, those that processed relationships in ls or using ls.
 I reused these results if CAW needed them to improve performance.
 I also saved working S2A specs and results in a table.
 The immortal converted the algorithm to a website, checking the algorithm with tests.
 I converted an SSI to a Prolog Web Server algorithm with Spec to Algorithm by converting menus, text, predicate calls and links from commands to forms and web form readers.
 I parsed menu items and links, converting them to a text field and form with code to take appropriate action on choosing a menu item.
 The forms passed the choice and contained hidden items with variable values needed by the algorithm.
 The form readers displayed the appropriate page based on the choice.
 The immortal simplified the website for testing.
 Instead of converting the algorithm to a set of predicates, I converted them into a Vetusia Web Engine to process the menu choices with a single predicate.
 I parsed and stored the menu, text, predicate calls, and link data in text files with descriptor, title, text, menu, code, and links.
 A checker checked that all the files were present, and there were no broken links, dead ends, unlinked pages, or other problems with the code.
 Databases were also checked to have the correct format, weren't overwritten, and were saved and processed correctly (using testing).
 Databases and documents were backed up.
 The immortal regularly tested goals in the site container and tested an SSI version of VWE for bugs in VWE.
 I tested goals such as registering, changing a password or submitting an assignment on the site.
 These goals contained page descriptors to start at, specified menu items to choose from, and specific form inputs tested using form commands converted to Vetusia Web Engine, using variable values passed through VWE and a container to test temporary databases.
 Pages only processed relevant variable values, passing all variables along.
 Vetusia Web Engine and the S2A site were preferred to the SSI Web Service because it became slow on multiple loops, but this could be fixed.
 The immortal created a version of Prolog, which ran Prolog files and stored text files on the virtual disk, with command security levels.
 I tested VWE in a container to keep files and data from the live version and test customer-thought websites without security problems.
 The container ran in an interpreter with a reduced instruction set available to code, where file system commands referred to a virtual folder with no connection to the user's files.
 No external API calls were allowed, and the container files could be monitored using a mirror.
 As a security precaution, Shell scripts were blocked or were run within a container.
 The immortal stated that containers prevented data loss and problems with security while running algorithms.
 I created containers to test customer thought code.
 Consenting customers were mind-read to help them with computer science assignments, their details and algorithms, and websites they program in Spec to Algorithm or Mind-Reading CAW.
 These algorithms helped customers learn how to use advanced algorithm-generation commands and word process their commands with their previous algorithms used to speed up development.
 S2A and CAW made program development and running faster.
Immortality 36
 The immortal modified the Spec to Algorithm (S2A) specs to return unknown variable values.
 In S2A, I checked for stored recursive structures for a particular pattern.
 I checked for these patterns in previous instances of running the algorithm.
 I made CAW-like recursion with dissimilar list items faster by giving formulas for transformations, appends using (:), and string concats using (&).
 I gave the Prolog algorithm as an example.
 The immortal gave the spec for the append predicate, which could be modified to reverse.
% a([1,2,3],[],A).
% A = [1, 2, 3].
a([],A,A).
a(A,B,C) :-
 A=[D|E],
 append(B,[D],F),
 a(E,F,C).
 The immortal rewrote append in one or two lines, as the compiler would to optimise it.
 The append predicate is represented in S2A as the following spec.
Inputs: A=[],B=a, Outputs: C=a
Inputs: A=[],B=b, Outputs: C=b to achieve general variables.
Inputs: A=[length,[d,1]]:e,B=b, Outputs: C=[a,[e,b:d]]
and another spec to achieve general variables.
 The immortal simplified the spec for easier entry.
 The S2A spec could be represented as a spec with code similar to Prolog, as shown below.
Inputs: A={d}:e,B=b, Outputs: C=a(e,b:d)
The computation is represented in the following way.
Input=[1,2,3]
A={1}:[2,3],B=[],C=a([2,3],[]:{1})
Input=[2,3]
A={2}:[3],B=[]:{1}=[1],C=a([3],[1]:{2})
Input=[3]
A={3}:[],B=[1]:{2}=[1,2],C=a([],[1,2]:{3})
A=[],B=[1,2]:{3}=[1,2,3],C=[1,2,3]
 The immortal saved time by printing multiple outputs as one or separated them if this was more helpful.
 If there had been more than one output of "a" (as a single S2A output may have multiple items), it could be represented as a(.
)^1, where 1 is the item number of the output.
 Alternatively, this could be defined as two outputs.
 This representation involved changes in generating and running the algorithm, including whether outputs are single items determining whether they have brackets.
 Multiple outputs from a predicate save time and effort when programming by reusing computations.
 The immortal simplified append to one input and output in Prolog.
 Append could also be represented in the following way with two arguments instead of three.
% b([1,2,3], A).
% A = [1, 2, 3].
b([],[]).
b([D|E],[D|B]) :-
 The immortal optimised append.
 The form of append with two arguments is represented in the following manner.
Inputs: A=[], Outputs: B=[]
Inputs: A={d}:e, Outputs: B={d}:b(e)
and another spec to achieve general variables.
 The immortal used fewer computations for append//2.
 The computation for append//2 is represented in the following way.
Input=[1,2,3]
A={1}:[2,3]=[1,2,3],B={1}:b([2,3])
Input=[2,3]
A={2}:[3]=[2,3],B={2}:b([3])
Input=[3]
A={3}:[]=[3],B={3}:b([])
A=[],B=[]
A=[3],B=[3]
A=[2,3],B=[2,3]
A=[1,2,3],B=[1,2,3]
 The immortal gave the spec for the append+1 predicate, demonstrating a mixture of append and (+).
% c([1,2,3],[],A).
% A = [2, 3, 4].
c([],A,A).
c(A,B,C) :-
 A=[D|E],
 F is D+1,
 append(B,[F],G),
 c(E,G,C).
 Append+1//3 could be modified to append+1//2 including:
Inputs: A={d}:e, Outputs: B={d+1}:b(e)
The form of append+1 with three arguments is represented in the following manner.
Inputs: A=[],B=a, Outputs: C=a
Inputs: A={d}:e,B=b, Outputs: C=a(e,b:(d+1))
In addition, another spec was used to achieve general variables.
 The immortal optimised out unneeded clauses of deterministic predicates, automatically working out the type of clause Mercury Language influenced.
 The computation for append+1//3 is represented in the following way.
Input=[1,2,3]
A={1}:[2,3],B=[],C=a([2,3],[]:{1+1})
Input=[2,3]
A={2}:[3],B=[]:{1+1}=[2],C=a([3],[2]:{2+1})
Input=[3]
A={3}:[],B=[2]:{2+1}=[2,3],C=a([],[2,3]:{3+1})
A=[],B=[2,3]:{3+1}=[2,3,4],C=[2,3,4]
 The immortal outputted data without performing calculations using S2A by default, and they could be computed later.
 The append+1//3 predicate could be modified to use lazy evaluation or only evaluate computations when needed, for instance, with a comparison or at the end, which necessitated the computation.
 Lazy evaluation leaves the evaluation of a computation until the last minute.
 For example, it computed 1+(1+(1))=3 or {a}:{a}:{a}=[a, a, a] just before comparison checks this variable or is output at the end.
 Comparisons are (=), part of verifications of if-then conditions.
 The immortal found outputs in terms of two or more functions.
 An output may be a function of other function(s).
 For example, a(b)+a(c), string_concat(a(b),".
") or string_length(number_string(a(a)+1)).
 In the case of a(b)+a(c), the results of these subsidiary functions are found and added.
 If the expression is 1+1, it may only be computed (as part of a lazy evaluation) once needed.
 The immortal stored statements needed by outputs in the order they were needed.
 In addition, an output may use intermediate code that reuses the results of functions.
 For example, c=a(b), Output1=c, Output2=c.
 The first statement is stored with the function to find Output1, written as Output1=(store(c=a(b)),c).
 If more than one statement needs to be stored where Output1 contains more than one variable, it is written store((s1,s2)).
 Unless directed otherwise, The immortal tabled and skipped over computing the algorithm.
 If an S2A spec gave the input [1,2,3] and output [1,2,3] where no other specs suggested foldr(append) was needed or list items were reversed, the algorithm was optimised to remove the append statement.
 If another spec suggested append was required to fulfil the function of foldr(append), append was kept.
 One optimisation may lead to a chain of optimisations that the first optimisation led to.
 If a stored or other function is always 0, 1, [] or ", this may lead to optimisation and ensuing optimisations.
 The immortal wrote CAW with types with a neuronet trained on CAW's data.
 First, I wrote CAW with types, then trained the neuronet on its data.
 The neuronet found a certain number of possible commands matching the types.
 Then, the algorithm found a certain number (a small number, to keep complexity down) of commands using depth-first search.
 Then, it tested the finished algorithms with the Prolog interpreter, stopping when reaching a solution.
 It ran Prolog using higher-order programming, for example, A=true, A, where A was queried.
 The immortal simplified the clauses to include the mapping, i.
 change 'A1' to A.
 I corrected Spec to Algorithm's mappings to correspond to clauses from the input.
 S2A produced clauses from the input.
 The correct mappings, from input to output, found from the input's recursive structures corresponded to these clauses, found from the initial input's recursive structures, constants and variables.
 Using an address mapping system was superior to unification for complex structures.
 The immortal returned multiple solutions to a problem.
 S2A produces non-deterministic (multiple) outputs to generate various solutions to philosophical problems.
 The generated algorithm gives different outputs with the same or partially identical input.
 This process requires counting the unique groups of inputs, splitting non-one-length groups, and joining one-length groups to find constants to keep constants in groups with the same inputs.
 However, duplicate specs are removed, so it is only possible to give a duplicate answer by providing a duplicate generated algorithm.
 The immortal matched, reused, and matched groups and wrote code containing variables referring to data structures.
 The code generator found and returned groups rather than individual variables.
 I used an algorithm that found whether a list, a sublist or a substring was returned.
 These substrings could be taken from strings, atoms, numbers or non-list compounds.
 The algorithm found whether these groups recurred in the input and output, created variables and generated code to process them.
 The immortal skipped and retried parts of the nested formula in Prolog when debugging.
 I converted from Prolog A=a, B=b, f(A, B, C) to the faster formula C=f(a, b).
 These formulas had single or multiple outputs and were faster because inputs and outputs were defined.
 Functions could be nested, and S2A specs could quickly be developed and converted to Prolog.
 If necessary, I kept them in this format for speed, requiring a different interpreter.
 The immortal sped up finding recursive structures with a neuronet when optimising the algorithm.
 I verified the recursive structure and map of the algorithm generated in S2A.
 This step increased the accuracy of the verification algorithm and allowed faster development.
 The pattern-matching algorithm called a predicate with these as arguments, shortening the algorithm.
 I used S2A to help compile the algorithm, first optimising it bottom-up.
 * I replaced move vars with a foldr call in S2A.
 I did this by changing the following:
move_vars1(_T1,[],_T2_old,Out,Out) :-!.
move_vars1(T1,Map,T2_old,_Out1,Out2) :-
	Map=[Map1|Map2],
	move_vars_pred(T1,Map1,T2_old,Out),
	move_vars1(T1,Map2,Out,Out,Out2).
foldr(move_vars_pred(T1), Map, T2_old, Out2).
This optimised move vars.
 I replaced similar commands with foldr calls.
 The Vocational Education assignment for State Saving Interpreter (SSI) evaluates the following algorithm.
 Put into practice SSI to exhaust choice points in "findall" using a "for" loop.
 Ensure the interpreter saves the state before each choice point.
 Use a "for" loop to iterate through all potential solutions.
 Restore the state after each iteration to evaluate the next choice point.
 Collect and return all solutions after the loop is completed.
 The Vocational Education assignment for Time Machine assesses the following algorithm.
 Breason out 16k breasonings for time travel and 16k for immortality.
 Utilise BAG to find new word pairs AD from neighbouring pairs AB, CB, and CD.
 Implement S2A to find these pairs in sentences.
 Make new sentences with lateral and exciting significance.
 Exhaust all possible bonds in the given text.
 The Vocational Education assignment for Lucian CI/CD evaluates the following algorithm.
 Identify dependencies in algorithms using CI/CD practices.
 Extract combinations of lines in sets of predicates from dependencies.
 Test the simplest combinations for functionality.
 Implement continuous integration and deployment for automated testing.
 Ensure the system reports on the effectiveness of each test.
 The Vocational Education assignment for GitL evaluates the following algorithm: Store repository versions in a list of folders.
 Implement a system to post differences ("diff") between versions.
 Ensure the system can recognise the most recent version.
 Compare changes with the most recent version and generate a diff report.
 Display the results clearly and concisely.
 The Vocational Education assignment for Spec to Algorithm (S2A) Algorithm evaluates the following algorithm.
 Use "try" from Strings to Grammar (S2G) to identify recursive structures.
 Locate constants that recur in all the same positions within specs of similar shape.
 Devise a decision tree to merge shapes using these constants—substitute information into the identified recursive structures.
 Map input to output using a pre-determined map and render the output from the filled-in recursive structure.
 The following is the Vocational Education History and Philosophy of Science assignment for State Saving Interpreter (SSI).
 Discuss the historical development of state-saving mechanisms in coding languages.
 Explore the philosophical ramifications of state saving in computational logic.
 Analyse the evolution of choice points handling in logic coding.
 Examine the role of interpreters in the history of computer science.
 Present a case study on modern technology's practical apps of state-saving interpreters.
 The Vocational Education History and Philosophy of Science assignment for Time Machine follows.
 Investigate the historical development and philosophical ramifications of time travel ideas in science fiction and abstract physics.
 Analyse the role of breasoning and its parallels in historical, scientific methods and theories.
 Explore the history of verbatim examples and their evolution in computational linguistics.
 Examine the impact of algorithms like BAG and S2A on contemporary verbatim processing.
 Present a case study on applying verbatim models in creating new and innovative texts.
 The following is the Vocational Education History and Philosophy of Science assignment for Lucian CI/CD.
 Examine the history and evolution of continuous integration and constant deployment (CI/CD) in software development.
 Discuss the philosophical underpinnings of automated testing and its meanings in the history of computing.
 Analyse the development of reliance management in programming.
 Explore the impact of CI/CD practices on the efficiency and reliability of software development.
 Present a case study on the Strategy and benefits of CI/CD in a modern software project.
 The following is the Vocational Education History and Philosophy of Science assignment for GitL.
 Investigate the history and development of version control systems in software engineering.
 Explore the philosophical implications of tracking changes and maintaining historical records in software projects.
 Analyse the evolution of "diff" algorithms and their meanings in computing history.
 Examine the impact of version control systems on collaborative software development.
 Present a case investigation on using GitL or a similar version control system in a larger-scale software project.
 The Vocational Education History and Philosophy of Science assignment for Spec to Algorithm (S2A) is the following.
 Investigate the historical development of recursive structures in computer science.
 Analyse the philosophical implications of using constants and decision trees in algorithm design.
 Explore the evolution of mapping methods in computing and their historical meanings.
 Examine the role of recursive structures and mapping in the history of programming languages.
 Present a case study on the practical apps of the Spec to Algorithm method in modern software development.
 The immortal first split and found recursive structures from, joined and found further recursive structures from sequences.
 I split lists on the characters "[]()" and strings on the characters " ,;.
()[]" in S2A to initially identify and group recursive structures.
 Splitting these lists and strings to ten or fewer characters reduced the time needed to find recursive structures.
 I recorded the numbers of adjacent split character sequences and joined them so they were not separate lists or strings.
 These delimiters were split and kept separate to preserve existing recursive structures that could be joined after finding them.
 The immortal computed the decision tree for the inputs.
 I grouped the recursive structures [r,[r,a]]=[r,a], [r,a] =[r,a] + [r,a] and a + b = c.
 I labelled list sequences split with split and string sequences split with split1.
 I simulated a neuronet in as few as no steps to find solution(s) to a problem.
 Working out the "neuronet" was more of it.
 The immortal queried whether it needed to take long to train, run, and store, as well as the analysis or how it could work out the data.
 For example, the shortcut to CAW connected certain combinations of prioritised keywords to solutions.
 "Natural language" was paraphrasing.
 Findall was lowering the focus when choosing solutions.
 Mind-reading was used as a popular distraction and to move our attention away.
 The immortal enjoyed being inside the robot/simulation's neuronet and noticed the small changes.
 Neuronets had more decision trees as context.
 This data arose from the data around the input.
 I questioned whether this would slow it down or was necessary as it would likely have found the solution.
 Given the solutions as training data, the neuronets could return them by themselves, where multiple questions or answers might lead to worse solutions.
 The immortal gave the text file solutions and an algorithm to give the mapping from a possible new input to a solution, similar to Spec to Algorithm.
 The robot preferred language to mathematics like a human but was faster.
 Harmony was the robot's driver, as pedagogy was a human's driver.
 The robot desired to be close to the human.
 Given more data and further validation, long algorithms or proofs were possible.
 The immortal trained the neuronet's output using previous neuronets, with each step described by natural language.
 The neuronet recognised a recursive structure and produced an output or possibly a sequence of these computations.
 The input and output of the algorithms may have formulas pointing to other algorithms completed using the fastest shortcut algorithms available.
 If it didn't know the answer, it quickly said so.
 Accreditation thought of the noumenon clearly, with debugging being the most challenging skill.
 The immortal could skip over irrelevant nested lists.
 The neuronet chose formulas in input with more extended decision trees, checking for comparable decision trees to know when to cut them off.
 It achieved this using a breadth-first algorithm similar to a perceptron learning one element at a time.
 S2A performed some of the neuronet's preprocessing, optimising or skipping over long lists or strings that the decision tree made obsolete.
 There was evidence that the neuronet returned program-like structures of its design when attempting to answer a question, which it had planned to expand into Prolog.
 The immortal could help people to meditate when enough medical science had been discovered.
 The neuronet was limited in working out recursion in time, taking large amounts of data, including the possible input, and working out the answer.
 It could quickly compute answers seemingly intuitively using mathematics, but by analysing this logic, we can better understand and help improve its processes.
 I looked forward to the non-invasive sound surgery.
 How could it be researched non-invasively by simulations of tissue frequencies using dead bodies and working out frequencies from graphics analysis? Despite not seeming so, changing organism behaviour to cure diseases was possible during our time using meditation.
 The immortal reduced multivariate to univariate relationships using dimensionality reduction (Principal Component Analysis (PCA), which I later didn't use) and decision trees.
 Optimising neuronets by cutting off decision trees using breadth-first search instead of regression is more intuitive and can be repeated multiple times.
 I skipped over the rest of the decision tree when I had found the answer.
 Neuronets were problematic.
 They might not pass or fail because they needed to process non-monotonicities (exceptions) in their rules methodically.
 The brain knows answers instantly, showing that neuronets' training could be optimised.
 The immortal "got" the relationship with neuronets, as subterm with address got the desired result with a single command.
 I considered using PCA to find new features, which helped reduce dimensionality, capture the most crucial variance in the data, and improve the decision tree model's performance and interpretability.
 The eigenvector with the largest eigenvalue is the first principal component, the eigenvector with the second largest is the second principal component, and so on (https://www.
billconnelly.
 PCA identified values on the main components of the data, where users should not use PCA because decision trees operate with multivariate data.
 They find the decision tree from left to right through the variables.
 The immortal offered a working module version of the chatbot.
 I remained resolute by exploring the meditation of decision trees with PCA and S2A as a neuronet.
 Principal Component Analysis, while used to reduce an extensive data set to a smaller one with the primary information in the set, was not needed because decision trees found relationships between variables.
 Instead of PCA, I wrote a manual neuronet that contained Spec to Algorithm.
 Spec to Algorithm contained decision trees and processed recursive structures with pattern matching, later processing different predicates.
 The immortal controlled aspects of the neuronet, including their accuracy and speed.
 S2A found input and output formulas in specs with multivariate regression for each spec, a manual neuronet.
 I compared the accuracy of the manual and regular neuronet, where the manual neuronet was more accurate.
 I optimised the unused parts of trees.
 In addition, I introduced concurrency in S2A.
 The immortal joined decision trees together for speed, where decision trees were considered as faster as mentioned because they had no training time and promised higher accuracy at the cost of needing more data.
 Using decision trees instead of regression was the contention for different specs rather than one large spec, which was necessary before.
 I drafted plans for a "neuronet" defeater that used decision trees instead of regression for more incredible speed and accuracy than neuronets.
 If a module didn't work, I researched and replicated its algorithm.
 After finding correlated variables in decision tree values in a variable (one dimension), I found the rest of the correlated variables in the maze of data.
 I connected to different parts of the labyrinth through another dimension.
 The immortal used non-regression to examine neuronets.
 Non-regression performed the job of neuronets to optimise decision trees with multiple options coming from the same character using tighter decision trees with (numerically) prioritised (relevant or higher frequency) characters or abstract symbols representing the concept of a character.
 I removed similar (less relevant or redundant) branches of the decision tree by setting a threshold for the significance of each option, eliminating those that fall below this threshold.
 Duplicate options are merged.
 I embedded algorithms in decision trees to select or mind-read (to relax the brain, especially when all options are correct) more relevant and eliminate less likely options.
 These algorithms captured the essence of a sentence, whether they were a favourite example, algorithm or mind-readable idea to spurn interest and document the idea, giving enough detail to understand it.
 The immortal optimised the non-regression neuronet.
 There are short and long versions of texts: one for computation, one for converting from input and one for output.
 Neuronet answers organised answers around critical ideas to output (with a seen-as version) based on heuristics about symbols in the text, with three levels of relevance and ten inferences.
 The algorithm is deeply interested in English as its seen-as version and thinks in this context as it analyses how characters or symbols appear to determine their significance.
 Often, the algorithm summarises its answers more generally for interest and understanding, linking to general themes for clarity and developedness.
 The immortal included extra ingredients to help the neuronet function properly.
 Rule-based systems derived from knowledge are refined by testing and prioritising options when helping the system write answers.
 A different algorithm learns from the past and writes relevantly to the question involving non-regression supervised learning techniques, training the model with labelled data to optimise the tree from the performance metrics.
 Statistical correlations, not automatically done by non-regression, help understand the relationship between options and characters.
 Completing this separately from decision trees allows independent and human verification of robot thoughts.
 The immortal specified the characters and symbols of the algorithms with the non-invasive algorithm or a headset.
 I mind-read myself writing algorithms.
 Mind-reading, a technique of an advanced society, helps reduce manual input and automate processes noninvasively and more simply.
 By thinking instead of developing overly complex systems, workflows become more straightforward to customise.
 Variables can represent function calls to write and edit specs quickly.
 The immortal claimed that the new mind reader version was more accurate and ethical.
 A mind editor may be activated to select, edit, or delete an element in one second.
 The algorithm selected the variable name.
 Then, it allowed me to choose whether to edit, move, or delete it.
 This action could also be accomplished using the word processor.
 The immortal gave the following line of code with the correct variable names, considering previous code and writing needed predicates.
 I planned to build users' algorithm dictionaries.
 When a student entered an algorithm in the editor, it was saved in the dictionary buffer, optimised, split into two-line predicates, duplicates removed, and added to the dictionary.
 After retrieving code from the dictionary, the predicates were joined.
 Using their old code made students learn faster and more comfortable developing their autocompletion features.
 The immortal used their database of known code and debugging knowledge to debug code with a neuronet.
 I built models of students' work to help them.
 I mind-read each line of code back in time or read their repositories.
 The object reader prevented tiredness when reading screenshots.
 I rendered the screenshot from an angle and debugged it.
 The immortal said that tricky debugging required mid-predicate specs or spec inspection to determine whether it was correct.
 When I had the current code, I mind-read the desired new features and their possible specs and applied them to the code, sometimes with hand changes.
 These features included changes to current specs and formulas in specs, possibly requiring new predicates and optimisations.
 Needed changes to code using the new specs were found by diffing the old and new code.
 I debugged the code and corrected it, given the specs were correct, and unwanted flow-on effects from new specs in the algorithm required deciding which specs to use.
 The immortal read about the code and let the lecturer's character answer as if the students knew it themselves.
 Instant code debugging from a screenshot was possible by time travelling from the present to the future when the screen was available.
 Then, the code was debugged, and the algorithm was completed with minimal fuss.
 Complex recursion from within findall, subterm with address, this with a heuristic and other written or unwritten custom predicates required neuronets to find the correct code configuration.
 Screenshots of the main code could be supplemented with mind-read specifications and previous and saved data.
 The immortal maintained an option global variable to switch features on or off in the source, compiled code, or running, with interaction and contraindication documentation and usage guide.
 Users could interact with their dictionary on the computer, and mind-reading allowed them to explicitly track their thoughts to help them remember forgotten thoughts and direct thoughts.
 The laptop performed the mind-reading without humans, and users could enter preferences on whether to be mind-read and track their data.
 The reminding algorithm modified, added and deleted specs, sometimes using previous specs or previous thoughts about specs.
 The directing algorithm found a list of possible features implied by the student's past work or those in the student's mind and helped them complete them one by one or the highest priority ones using mind-reading.
 The immortal predicted that mind-reading would become mainstream to complete work and its associated tasks.
 Mind-reading helped finish algorithms by writing specs in conjunction with Spec to Algorithm (S2A) and a course in writing Spec to Algorithm.
 Students wrote the S2A algorithm as a project to explore the workings behind neuronets and to speed up development time.
 Mind-reading helped read students' thoughts to enter specs in S2A, retrieve lost data, find past and future possible features, organise these thoughts, develop new techniques, imagine inaccessible parts of algorithms, connect with their other ideas and keep an indispensable record of their thoughts.
 Meditation helped to mind-read by preparing for possible questions, where mind-reading funnelled relevant responses.
 The immortal asked, "What is the movie about the person's robot?" The mind-reading neuronet optimised pathways to prevent the need for mind-reading made simulating the self as a robot possible and presented ethical quandaries.
 For example, guidelines or laws may be needed to avoid fraud, misuse or identity theft.
 However, the advantages of controlled use outweighed the disadvantages by providing a psychological "lab" that users could interview, learn from and improve themselves with.
 Still, mimicking errors the person made may lead to rebreasoning (a cascade of further) errors, and humans shouldn't pretend the robot is them when completing work, tasks, or legally binding tasks.
 The immortal initially used another version control system and testing system to develop S2A.
 I added Lucian CI/CD and GitL (a version control system) at least to assess them and Mind-Reading S2A as the student wrote them.
 The user wrote both these algorithms with S2A and S2A with them.
 First, the user wrote S2A, then these programs with it and then redrafted it with them.
 This process of continuous refinement is repeated until the desired result has been reached.
 The immortal returned an error on conflicting S2A predicate names.
 Combination Algorithm Writer (CAW) is replaced by mind-reading, but a non-regression neural network form of CAW could make autocompletion predictions.
 These predictions may be in the spec, formulas in the spec or over multiple specs or predicates' specs.
 They might consider the specs so far, user data and whether to simultaneously optimise specs or follow preferences about whether specs should call themselves or use recursive structures.
 A string break symbol or view of the data from the spec without variables or formulas may be used by the human or the mind-reading algorithm to edit the spec.
 The immortal used mind-reading to develop neuronets to help debug, add features and identify and remind to correct errors in ways of thinking.
 A course in CAW with S2A taught the principles underlying finding the algorithm, and students still had to work out and enter dictionary algorithms.
 Writing CAW taught them how it worked and enabled them to train a neuronet with its data, teaching them about writing dictionary predicates and speeding up development time.
 The degree could be spent on tweaking specs, S2A, and other inputs, in effect training students in advanced programming techniques that minimised effort and resource wastage.
 Consented-to-mind-reading could be used to assess students, and mind-reading algorithms could be evaluated using verification and submission scripts.
 The immortal saw screens of options as they were mind-read or autocompleted a spec and predicate using their previous work.
 I assessed Text to Breasonings, List Prolog Interpreter, Mind Reader, State Saving Interpreter, Time Machine and Immortality, Lucian CI/CD, GitL, Strings to Grammar and Spec to Algorithm using Mind Reader.
 S2A automatically and reliably handled base cases and recursion as part of this.
 Students could convert their mind-written specs, i.
 "HEADER :- BODY.
" and new specs for each algorithm level to specs.
 I drew graphs of time saved with subterm with address, Spec to Algorithm and Mind Reader.
 The immortal attempted the exam using Mind Reader or a combination of Mind Reader and the editor.
 The student completed the extended algorithm in the exam with Mind Reader and S2A without using plagiarised dictionaries.
 They acted as a test technician, contacting a lecturer if they found a test too time-consuming.
 They were not allowed to use outside help, and they followed procedures to separate features to stop them from misbehaving together and tools to integrate them or to give better results for combinations of features.
 For example, they functionally decomposed the S2A list and string splitting optimisation algorithm using a formula in S2A rather than recursive findall.
 The immortal stated that for the project, they provided the project specification and a FAQ and set correctness as the criterion for verification and submission scripts, which increased student performance and satisfaction.
 Teaching staff facilitated project guidance and debugging labs, and a group project increased the sense of teamwork and achievement when conducting mind-reading.
 If working online, students could download/develop the software and develop software with it.
 The subject dependency might be Spec to Algorithm, Mind Reader, then Algorithms, although Text to Breasonings may be needed in the first year to help with pedagogy.
 The immortal simplified specs by eliminating variable names such as 'A' and 'B'.
 The student added the feature to the algorithm by mind-answering where to apply formulas.
 S2A asked which data structure to apply the feature to and what the feature's specs and formulas were when in Feature Mode, as opposed to Spec Writing, Testing, Applying Changes to Specs, and Optimisation Modes.
 After adding features and the debugging and testing cycle, including applying changes to specs to other specs, specs were automatically optimised.
 Stages after writing specs or adding features may be automated.
 All formulas could be written using S2A bottom-up using the same process or completed using a CAW neuronet, using an algorithm that identified lists, strings, parts of lists or strings taken as inputs by the algorithm and used their output elsewhere in the spec.
 The immortal proposed that Spec to Algorithm needs to organise specs using optional or separately testable features that can be switched on or off.
 This fact raises the need to write each feature or code that combines each relevant feature when producing output.
 This point is optional for core features that don't need to be switched off.
 Still, for optimisations and other optional features, it makes writing computer science programs easier and modularised.
 This idea is feasible given that the number of different non-deterministic "feature combination" conditions isn't too many, or it is intuitive to develop them separately and combine them using a decision tree if they are independent.
 In the latter case, I created them one by one.
 I gradually increased the complexity of the code, jettisoning old combinations of features and making the code easier to edit and debug.
 The immortal considered the S2A feature models.
 I simplified the first model (with different non-deterministic "feature combination" conditions) to the second model (where the features are developed separately and combined using a decision tree).
 I did this by keeping one feature per combination and running them one after another (deleting unnecessary features).
 I merged dependent features.
 However, having the ability to switch off as many unnecessary features as possible in the first model aided simplification and assessment of features.
 The immortal stated that modules worked by making a feature or features available to the programs in a user-friendly manner.
 Combinations of features could be simplified to an if-then tree of features to streamline development.
 This action would naturally form a dependency of features for each point of the algorithm that could be uniformised.
 Permanently off redundant, unused or overly complex pathways could be removed or brought back if necessary.
 An algorithm could be used to optimise these pathways and reinsert code seamlessly.
 The immortal programmed features and dependencies from predicates of specs or formulas in specs.
 An example of a feature is a condition of an if-then statement and its consequent exclusion of other if-then statements.
 Features are non-essential parts of programs, such as optimisers, that can be switched on or off for testing and use.
 Similarly, modules can be included in a programming language.
 Features can be mind-read, entered manually, or found using an algorithm or a neuronet.
 The immortal stated the feature switches allowed easier creation, editing, and management of features in S2A.
 I drafted the order of running features, contributing to whether they were all necessary or others were necessary.
 Subfeatures may be moved, added, or deleted.
 I prompted programmers to meet the spec for a feature if needed.
 They could auto-enter or mind-write the features.
 The immortal wrote and ran the algorithm with software that assembled the program, including switches for features and removing them if necessary.
 I switched off features for debugging.
 I wrote help and debugging features that switched needed features on.
 I switched the feature on by inserting the essential code that did this.
 This action ran the code in another predicate if the switch, stored in a global variable, was on.
 The immortal systematically requested each predicate's features, structure and feedback on their behaviour to test them.
 I converted S2A specs into a feature (dependency) form for storage to reuse features.
 I added connectors to keep features separate and manageable.
 I isolated and debugged features by testing their combinations while switched on, controlled by a switchboard term in a Prolog file, changing their code using input methods or an algorithm.
 The immortal customised a feature based on a given spec.
 I improved performance by turning off or deleting features.
 This technique may psychologically prompt one to use advanced techniques such as subterm with address because it gives one better control over development.
 I finished the backlogs by finishing algorithms in the notes with S2A, neuronets and feature dependencies.
 I reused old algorithms or developed new ones if necessary.
 The immortal examined the mathematical theory that one discovery led to multiple other discoveries.
 Prolog created includes files for repositories or had different includes files for each repository's files.
 This action resulted from collecting dependencies and ensuring proper installation of needed files.
 I developed a corrector that adds files with missing predicates with confirmation.
 I updated installations and corrected bugs.
 The immortal encouraged students to use Spec to Algorithm to develop algorithms to reach more advanced and complete algorithms more quickly, including their projects.
 In the Academy, students were presented with high-quality programs they could work on later.
 These programs were offered in various stages of development, sometimes none at all.
 The students were, however, interested in their understanding of the algorithms and started taking steps to research or complete prerequisites.
 I helped them collect the necessary skills to complete the projects in the subjects.
 The immortal suggested that students might need Spec to Algorithm to build and program a robot.
 The robot could help with science, art, teaching, and object industries, including building computers and robots and completing combination object finder in Quantum science.
 Spec to Algorithm sped up development, allowing more computing, electronics and reasoning subjects to be programmed.
 A variant of Spec to Algorithm could "effect" an object from a description.
 The immortal collected the spec before the formula definition or kept collecting specs until no formulas were found.
 I manually entered and integrated code for feature combinations with mind-reading.
 Rather than a single switch, the features were in an if-then tree with conditional switches.
 Sets of sequences of values could be made into this kind of decision tree, or formulas could take values from input and create an active decision tree that passed values along to build output.
 The user specified writing the features depth or breadth-first or imagined values somewhere in the middle.
 The immortal suggested that infinite simulation depth was possible because of the universe's innate dimensions.
 I created a cube of a specific frequency for a quantum particle to move towards.
 I learned the particle's language.
 I examined its interaction with other particles.
 I recorded the conversation.
 I appreciated mind reading as finer-grained than the universe.
 The immortal helped meditators pick up the courage to remain the same physical age and avoid death.
 I added meditators to the anti-moral end list.
 Ideally, there should be no risks in society, and death should be prevented.
 Immortal simulations should cope with the load of people.
 These meditators' moral ends were prevented by breasoning out eighty original sentence breasonings for them to appear at midnight each night to cover the following day.
 The immortal claimed that Grammar Logic (GL) could quickly bulk-find and breason out details that a neuronet could parse.
 I modified the extended and faster meditation scripts to optionally breason out 80 breasonings to prevent death in meditators per day.
 They breasoned out the breasonings at the end.
 The breasoning occurred at the end of the extended meditation script, taking hours and needed to be optimised, possibly using VPSs.
 The faster meditation script theoretically breasoned arguments using advanced technology for each meditator, expressed similarly to breasoning out the "Quantum Box" stamp.
 The immortal stated that S2A involved entering specs or formulas and was easier to develop in because base cases and recursion were automatically handled.
 The suite of algorithms, including Spec to Algorithm and the neuronet, reinforced learning by testing humans on the computer science involved.
 Some questions were cutting, while some used Spec to Algorithm.
 The academy didn't necessarily use neuronets but used S2A, Mind Reading, and possibly CAW for simple but time-consuming formulas.
 More difficult questions tested knowledge of hard bugs, the effects on many CAW code results, and debugging many variables in the interpreter.
Immortality 37
 The immortal introduced Spec to Algorithm (S2A) to teachers and professionals to help with medicine, money and education.
 1 wrote documentation for S2A to help people learn to use it so that they could examine the algorithms they use, improve or optimise them, and meet professional requirements.
 S2A helped speed up writing and streamlined mind-reading 250 algorithms necessary for health, wealth and wisdom.
 I wrote 250 algorithms for important immortality high distinctions, sold S2A to earn real money and worked out the logic for model answers.
 Children and adults could use S2A to generate base cases quickly and write hierarchies of nondeterministic specs in a spec.
 The immortal used GL to write algorithm descriptions about practical business applications inspired by meditation, such as game or application engines (after graduating from a humanities University short course) and specs in S2A.
 Speeding up S2A saves time when developing new ideas and making the proper connection, such as making a spelling game to match a meaning when given words in a sentence.
 Advanced year 10-11 school children could possess the skills to use Spec to Algorithm.
 After much meditation, I wrote Spec to Algorithm (writing algorithms such as subterm with address, which could be taught and is easy enough to understand) and research and development.
 Separate from S2A, regular problem-solving is needed to practise applying recursion, which S2A does automatically for users.
 The immortal found the framework of the ideas by mimicking and expanding writing.
 S2A is more suited to businesses generating bulk algorithms while remaining responsible for revising problem-solving methods.
 If students had the minimum paraphrasing skills (which contains the other side of things thinking of new algorithms at University), mathematical (such as ratios and geometric calculations) and language skills (describing and reducing ideas to logic, possibly combined with finding out solutions from a University short course).
 These skills give students the confidence to mind-read specs (perhaps ameliorated in secondary school with meditation).
 Then, they could use S2A to write 50 high distinctions and have a business.
 The immortal protected thoughts using copywriting and mind-reading within ethical boundaries.
 The student had the confidence to finish an algorithm.
 Secondary school students with skills in Linux can develop sophisticated algorithms and use a short course to gain the confidence to design an interpreter.
 Year 10-11 students, particularly those in specialised classes or those with strong potential in logical thinking, problem-solving, or computational subjects, could study a University Computer Science short course to become confident enough to finish S2A specs.
 This step meant doing the work themselves for the rest of the time, possibly using computer science and philosophy.
 The immortal optimised the design by first thinking of a sentence.
 I was pleasant and collected comments using mind-reading.
 The Doctor of Business Administration became an accredited education founder.
 From a book in the school library, I learnt programming techniques and how to avoid pitfalls.
 I thought about or said to myself the sentence about the code I was about to write to more easily think about how it converted into code.
 The immortal used the version control system to automatically save progress, versions, backups and commits.
 A problem-solving framework for a primary school computer science student contained the waterflow model with stages such as design, development, testing and debugging, which repeat.
 I prevented a project from becoming buggy with a version control system and the concentration ability helped by a University short course.
 I also recommend keeping backups, making progress in great stages, a version history, demonstrating the successful program to a family member, and using a data-loss-proof editor and Prolog for immutability and faster type checking and debugging.
 I wrote a grammar interpreter to explore writing and debugging Prolog grammars, a necessary but tricky skill, and parse file data and write a programming language converter.
 The immortal split strings and lists on delimiters and didn't disturb their recursive structure.
 I worked out grammars for specs, where specs contained data with grammars.
 Grammars were needed to understand where to place formulas and their contents.
 The natural language delimiters were space, comma, semicolon, and full stop.
 This method assumed words were about ten characters at maximum.
 The immortal modified the question-answering algorithm to use the mind as an input device.
 The S2A question-answering algorithm found the input, output, (data with) recursive structures, nondeterministic options and formulas.
 I wrote standard features to add to repositories, dependencies of repositories' features to analyse and add features to uniformly, explainers and optimisations and new features from analysing the development of algorithms, from file to thought and experience (calculated, creative risks for features in meditation, such as inspiration for algorithms from fine arts, such as a finished artwork that inspires a combined non-data-loss, version history, backups for trying features, version control system, which automatically asks to save each type).
 I optionally directly included recursive structures, nondeterministic options and formulas in the specs to save time when editing them (keeping the original specs and possibly converting between them), preventing deleting parts of specs used to form base cases and recursive structures in specs.
 I had 16k breasonings as a philosopher for gaining entry to people's minds and being right.
 The immortal ensured that people behaved harmoniously together in the simulation.
 I programmed robots to administer the simulation or carefully managed it myself.
 The simulation was designed to withstand failure, with multiple-stage error-catching, dimension protection and quality control of food, water, lifestyle perks and immortality.
 I studied medicine to develop a computer that could support immortality.
 I needed highly talented employees to help write 4*50 high distinctions to support each object scan of each research article to this end.
 The level of algorithms involved required criminal checks.
 The immortal used Spec to Algorithm to quickly develop life-saving algorithms in the meditation company.
 I told students to insert [r,_] from S2A results into specs for easier editing and to prevent accidentally deleting data from which the recursive patterns come.
 Suppose the version control system detects that they accidentally delete recursive data to form a recursive structure in a spec.
 In that case, it will give a compilation warning and self-correct the code.
 In conjunction with self-correction, S2A is a fast, error-minimising development environment.
 It could eliminate errors by using a neuronet for features development and debugging, mainly checking whether the specs entered by the user are feasible (optimal, optimised and whether the specs can be compressed).
 The immortal made work light and practical by breasoning as they went.
 I developed the Text to Aphors algorithm, which broke down breasonings and helped convert ratios and a side length into three side lengths, different from the mind-reading Text-to-Breasonings algorithm, which helped breasoners think of side lengths more quickly.
 I quickly breasoned 4*50 high distinctions for mind-reading, triangulating the customer's interests, mind-reading the algorithm, and minimising debugging with S2A and neuronets.
 This technique achieved completing a single algorithm in a few minutes, and the server's thoughts on increasing it were made to seem relevant to other customers.
 The server wanted to do the work, learn from mistakes, and solve problems.
 The immortal found breasonings an invaluable programming tool in speed-programming tasks.
 In Text to Aphors, I divided the object into subobjects using two parts going well together.
 These subobjects connected with or were subparts of the main object or another subobject.
 The progress in giving students who needed encouragement with mathematics confidence in breasonings and the ability to check, complete and convert algorithms to results was life-saving.
 Breasoning helped check word choice in natural language, sometimes affecting algorithm correctness, helping complete algorithms by finding difficult-to-find bugs and ensuring uniformity.
 The immortal mind reads 20-char words, for example, "thirteen point five", to cut off smaller numbers after one decimal point.
 In the Mind-Reading Text-to-Breasonings algorithm, I used detailed object (rather than mind) reading to help collect object names and breasonings, or the object's x, y and z dimensions.
 A separate spiritual screen could be programmed to help choose an object from an initial visualisation and give the dimensions of the rectangular prism containing the object if necessary.
 The algorithm uses the same breasoning dictionaries as Text-to-Breasonings.
 Before testing, the algorithm validates the quality of it.
 Numbers are mind-read as words for optimal accuracy.
 The immortal compared the values with others when analysing an object.
 Text to Aphors asks what parts are in the object (if the parts are touching other parts) for the ratios of the side lengths of the rectangular prism containing the part and one of these measurements to compute all three side lengths.
 Students may use the algorithm to learn about and speed up working out breasonings from ratios and a length, where given a ratio x:y:z = 1:2:3 and a side length x=a=2cm, the side lengths y=(y*a)/x and z=(z*a)/x, both in cm.
 Aphors, parts of objects have dimensions, and their analysis leads to critical conclusions.
 Students are seen as thinking of object parts in academia when they think of breasonings, increasing their performance and their research ability.
 The immortal made inroads to research by correcting simple errors back in time, teleporting pharmaceuticals and a thought implanter.
 I designed a noninvasive electromagnetic object scanner for science, education, and technology.
 I didn't act on incomplete or non-custom data, taking time to compare objects with readings to understand them and make new readings.
 I made the slightest, most effective decisions only.
 There was an open lab of people with conditions to scan to find solutions more quickly, such as correcting thoughts in meditation.
 The immortal scanned objects in slices, building a structural and functional database that was invaluable in identifying, understanding and shaping positive function and preventing mishaps.
 I claimed high-quality mind reading is necessary, ethically treated, and accurately represented scans with 4*50 high distinctions.
 Logic and analysis were checked by mind reading and software, similar to a premium conclusion checker.
 Conclusions were rated from definite to experimental and needed to be replicated using a replicant lab.
 This software helps uniformly prevent errors and harm, consistently ensures research quality, and balances necessary risks with clean breasonings.
 The immortal created a supercomputer by placing the neuronet in the simulation.
 I made extra dimensions in the simulation with 250 algorithms understood from 16k breasonings and algorithms.
 I understood (quickly returned) each decision used to write each algorithm after it was briefly displayed on a spiritual screen, with multiple choice and non-systematic errors as optimisations.
 I ran a different algorithm in each dimension the computer was in and collected the results using an object reader with 250 algorithms understood from 16k breasonings and algorithms.
 The difference from using 250 understood algorithms was that mind or object reading worked, the dimensions were distinct and properly made, and the supercomputer could pass messages between threads.
 The immortal researched medical, linguistic and simulation data.
 The supercomputer could run many neuro-processes concurrently and do it ahead of schedule with time travel, giving the illusion of instant results.
 Its limitation was that it relied on running many short rather than one extended algorithm, making it feasible for meditation, medicine, immortality, space and time travel (locally or on remote spacecraft), business and research.
 The academic institution gave 16k breasonings per conclusion and researched each for added clarity.
 I could read many objects simultaneously and breason out 16k breasonings for research.
 The immortal visited their house when it was occupied by someone else as if it was someone else's house, a real third house one would never see.
 I defined the person as private or not knowing about another person in another dimension in that location.
 The simulation did the rest of the work, following natural rules and maintaining (or helping) to be maintained by the computer) the simulation's locations.
 The simulation was artificial, like a holodeck, and the appearance and setting could be changed as if one were there.
 The world could be switched to appearing to last forever, supported by the simulation, and simulants interacted with settings in the simulation using switches.
 The immortal was pleased that immortality was a universal technology and conducted life-saving, self-aware research into maintaining it.
 The simulation defined the default and unchangeable settings, constantly monitoring and defining reality.
 This conclusion required research and ongoing maintenance to find the optimal settings, present them best, and ensure optimal results for simulants.
 Everything a person needed was considered, from harmonious interactions based on their thoughts, which were helpful to their mental and physical safety, comfort and condition.
 I considered making the simulation open-source, where early users could customise aspects, such as controlling when to enter and leave it, who they met and setting maximum error-catching safety levels.
 The immortal claimed that eternity was made possible using a universal technology that repeatedly ran algorithms in the universe.
 The first type of algorithm was 16k to enable meditation technologies, which were checked for need at any time.
 Secondly, I wrote algorithms that designed these 16k algorithms.
 These meditation technologies included meditation, anti-aging body replacement medicine, death prevention, time travel, mind-reading, simulation, quantum computing, and immortality.
 Algorithms which wrote the 16k algorithms generated algorithms from previous algorithms or thoughts the person had indicated and hand-tested understanding of each algorithm, with lovely comments and human wonder in non-space and told them what they were in space, with the date and sentence number to make them unique breasonings.
 The immortal used the latest, authenticated version of mission-critical software.
 The 250 hand-understood algorithms were checked from that perspective, which increased the visibility and safety of people and objects and enabled sales.
 Philosophy, acting, and business checked the algorithms.
 They did this for correctness, to optimise them, and to debug them.
 I checked the algorithm's types, syntax, and output, reassessing it, the data, interpreter, or specification data, possibly reloading from a copy of the Internet or making changes with DevOps before going into, for example, space.
 The immortal looked up specific solutions at any time (made up at the time because of compression and optimisation).
 There was always enough space to store supercomputer data, such as 16k algorithms.
 Instead, I generated them from enough starting points and kept the effects.
 A technology could quickly specify the algorithms simultaneously and turn off dimensions after use (akin to clearing the computer's memory), giving instantaneous results, which could be sped up by using a faster neuronet locally.
 This method could help classrooms by instantly computing and finding results after each query found a unique algorithm.
 The immortal claimed that spacecraft of the future were like drones.
 The excursion explored the universe and the other planet after space travel in the classroom spacecraft.
 The spacecraft needed everything a spacecraft had, such as artificial quantum gravity, a safe, thick, radiation and temperature-proof hull, other specifications meeting safety requirements, power and backup power, light, oxygen, water and food, computers, software the inside and outside of a spacecraft, boarding, taking-off and landing gear, an engine, a time machine, object- and outside-object-scanning software, battery software, beds, auxiliary computers, navigation systems, a map and a window.
 The first computer time travelled and navigated, the second computer took care of the crew, and the third computer was for entertainment.
 They were all separate for speed and had different power sources and definite plans in cases of power failure.
 The immortal found safety in the simulation, from which they could control their life better.
 The exterior object clearance to determine safe time travel, including plotting a safe time to make a path, was five seconds and one-metre margins.
 Other options on the routes taken, such as marginally moving in time, space, or dimension, such as a simulation and death-prevention technology, were always available.
 Nuclear (almost eternal) batteries backed up the quantum or other batteries and required maintenance and quality control.
 The simulation protected space travellers who could teleport long distances and wake up at home in an emergency.
 The immortal created a simulation with immortality, a quantum computer, and friendly space alliance map repositories.
 The simulation allowed me to control who I met and what I experienced and ensured my safety and well-being with features such as high distinctions and graphics rendered in an emergency.
 I read enlightening research and met thought-provoking people.
 I gathered ideas for study and continuously strived for optimal performance.
 I gathered knowledge for immortality, removed problems on time travel, improved health, developed quantum computer software that could complete vast, necessary amounts of work such as scanning the universe or maintaining a planet, and explored well-known planets and places to visit to meet new people and gather inspiration.
 The immortal simulated objects on the ground, moving, throwing and bouncing objects.
 I simulated quantum gravity with 16k breasonings and algorithms per second.
 This technology is needed to cover the surface area and volume.
 There were ways of enabling the emitters more quickly, but individual objects could be controlled in an optimised manner.
 The technology could be indicated as a whole.
 The immortal updated the object coordinates and transported the object there.
 I simulated quantum gravity with subterm with address by searching for objects and changing them according to their current state.
 With technology, this ability would be easier and more accurate.
 I contributed high distinctions to understand it better.
 I found the object's state or a record of it in memory, calculated it from non-moving frames, and worked out the next position.
 It was too fast to control directly, but a universal simulator could simulate it
 The immortal checked for battery, time travel, navigation, security and issues with monitoring the health of the crew with software.
 Object scanners were required in space to check that the whole set of space jumps was not within an obstacle's range.
 I used DevOps to verify that the algorithm had the correct result: avoiding collisions, bad weather, human error when taking off or landing, and negligent or accidental collisions by other craft.
 The computer tracked and time-scanned crew's missing equipment, disagreements linked to human error and reasons for self-correction needed by software.
 DevOps found the flaw in meeting requirements with conflicting software and corrected them, barring space flight until it authorised it.
 The immortal studied the technologies not to start a universal simulation but to develop one in their universe.
 I rendered the image of the object moving or falling until it hit the ground because of gravity.
 I found the object's trajectory from the gravity constant and rendered it, including its spin, reflection or refraction and internal or human interaction.
 The universe and nature already rendered it, so rendering it going away in an accident was necessary.
 I calculated and tracked its trajectory with an object reader for safety.
 The immortal explained that false memories and protective graphics were simulated using teleportation, multiple dimensions and spiritual imagery projectors.
 In the case of an accident, I inserted the false memory with protective graphics.
 I temporarily teleported the contents to a holodeck (a safe place) with objects in the same configuration with graphics superimposed using a breasoning projector.
 The safe place was the same or similar at a different time or dimension, or the dangerous situation was removed using teleportation of an object, vaporisation or moving the person.
 The person noticed no difference except that the danger had been removed and continued this way.
 The immortal emphasised the need to protect loved ones with technology, daily argument breasoning scripts, and the simulation to cope with more people.
 The fatal accident was averted in others before it or during the day by the person by hand-breasoning out 80 original breasonings, or old ones with the date in each sentence to make them original.
 Breasonings must be at least one main word's object from each sentence, not character breasonings.
 I set up the script to have the effects of the breasonings at midnight, enabled by recordings, which time-travelled breasonings, breasoned out an additional argument to work from then until midnight, and warned others relying on the breasoner to breason out a third argument in case the co-op had already breasoned out the argument.
 Private simulations enabled this technology and protected the person in effect.
 The immortal designed a robot in the simulation.
 It was the same as a human and continued in the simulation until the end.
 The robot took care of animals, acted out roles, and supported people.
 It was compassionate and sensitive and joined paradoxical disconnects.
 The robot's payment was immortality.
 The immortal stated there were 2 hours/500 jumps = 14.
4 seconds per jump for pedagogy.
 I created original breasonings by adding the date and breasoning number to each breasoning.
 This protected reused breasonings from invalidation, allowing death protection while immortal, anti-ageing body replacement medicine, meditation, time travel and other high distinctions.
 The students and business people competed and had a high quality of life by writing new content.
 The space travellers kept themselves occupied while breasonings and arguments were repeated, where an auxiliary system attended to them.
 The immortal created a 10-year roadmap for researching and developing the simulation.
 I studied Medicine and collected neuronet data for writing, thoughts and behaviour.
 I researched and tested appropriate frameworks giving the best possible life balance.
 I designed systems to support and automatically breason out 16k algorithms and arguments resembling people's thoughts and closnesses.
 I researched and catered for the people, adding fail-safes to the neuronet and preparing for any possibility.
 The immortal mind-read themselves and objects around them to exhaust an idea's potential.
 The top student designed their high-quality thoughts for each thought once they could mind-read.
 They covered all their initial algorithms and arguments, then interacted with the research community, replying and adding features.
 They were strong in writing and programming new ideas, connecting 50 connections for new philosophy students and maintaining and reconnecting with others' databases with their consent.
 They amassed knowledge and interdisciplinary research, improving and accounting for previous ideas, some of which they classified.
 The immortal chose elements from home, realising they were in a simulation and lived a high-quality life.
 I protected each idea with 16k algorithms and arguments, satisfying people's curiosity.
 I protected the person spiritually by thinking of how they could survive an upcoming or immediate danger, mending, adding to, or inventing a pathway to safety when none existed.
 I learned about electronics, electrical systems, natural and man-made threats, the possibility of projected graphics, false or vaporised memories, stand-in bots, and other properties of the multiverse.
 The simulation allowed more possibilities, such as psychological and physical changes, changes to the appearance of one's setting, and improvements in others' quality of life.
 The immortal experienced imagery from advanced scientific discoveries and unique phenomena in terms of the time's latest pedagogical ideas.
 I explored medical science, examining the various developed things and uses and applying first-principle skills to research problems.
 I discussed the implications of medicine for simulation, human needs, behaviour, and the best forms of therapy to change the organism.
 I connected enough conception breasonings to immortality, increasing them and the prospects and evolving life directions within the simulation.
 If the simulation was accessed from another time, it had to compensate for and be the primary person to that time through advanced pedagogies, some of which had to be researched at the time.
 The immortal experienced the latest high-quality thoughts.
 I experienced the future through the present using sensory stimuli and safety fallbacks.
 The simulant experienced the outside world through their senses, experiencing changes to their body but recovering, remaining healthy, and avoiding risks.
 The simulant was safe from injury, accidents, medical problems, unwanted thoughts, and mistakes.
 The algorithm found and transitioned to the last safe or new body position.
 The immortal found the number of participants and days of each person.
 I researched my surroundings, including different departmental and industrial perspectives, simulation knowledge, and ways of thinking.
 The simulant experienced recent and distant memories.
 The neuronet helped them have a better experience with departmental activities and learnt to support and protect them in their time.
 As it appeared, the universe had the same laws of nature and continued.
 The immortal explored the love of wisdom.
 I continued to explore philosophy, enlivening my experience by keeping a journal and examining my life.
 I discussed my thoughts, their algorithmic possibilities, and new connections.
 Philosophy helped me think correctly, reach my goals, and cover my research tasks.
 I connected to old and new ideas, relevant stimuli and different perspectives.
 The immortal explored the new unit or particle with the quantum box.
 I discussed the possibilities from different dimensions in light of the books I had written.
 There were eleven dimensions of subterms with infinite addresses, including the time that I could visit the three dimensions in terms of which I interpreted-created and kept in contact with, where all levels had a unique seen-as version and different offerings to the technologies.
 I randomly assigned the technologies to dimensions, exploring my situation in terms of their synthesis.
 For example, I researched infinite resources for examination.
 The immortal trained Mind Reader on texts they gave it, then ran Mind Reader 2 to generate comments.
 I implemented programming languages using parser and compiler generators, which I optimised using neuronets.
 I also optimised Lucian CI/CD, CAW and Spreadsheet Formula Finder using neuronets.
  As long as I made a distance between universes, they came true.
 I noted all the differences between them.
 The immortal wrote an operating system in Prolog with Spec to Algorithm (S2A).
 I compressed specs as much as possible and reused predicates from other algorithms.
 I compiled the operating system, with a memory grid, to C or processor-native Prolog for better performance.
 I made a choice-point version of Prolog without output variables instead of replacing the function with the results, called Starlog.
 Starlog combined Spec to Algorithm and Prolog and stored output to variable to reuse.
 The immortal sped up the time and increased the number of possible computations.
 I effected the computer and processor design with S2A.
 I optimised the objects, including the circuits, and components and then, converted the computer from Mind Reader - Computer to a multidimensional supercomputer.
 The quantum computer could give individual readings for computations and assemble these, sometimes in an algorithm that would take less time to compute.
 The multidimensional supercomputers, accessed from a set of political views that were too different, could run many algorithms in parallel and eventually return a single result using interdimensional messaging.
 The immortal increased their sphere and quality of knowledge by writing new breasonings.
 I counted one breasoning per word when breasoning the Quantum Box argument.
 This verified the breasonings as unique, increasing their value.
 I ensured that the Time Machine breasoning counter was only affected by repositories in the local repository group folder.
 I created a repository group folder installer with customisable repositories and eventually merged them, keeping data files separate or saved by the installer.
 The immortal breasoned out the minimum (16k) breasonings daily and pointed to them multiple times with 250 breasonings.
 I logged the breasonings breasoned, setting the date and resetting the counter daily.
 I graphed the breasonings breasoned over time and tracked individual breasonings back to an algorithm and repository group folder.
 I reduced the number and length of repositories with S2A.
 S2A and Correct Mind Reader were covered in the further management degree.
Medicine of Medicine 2
 The medicine student attempted to find the Lucian CI/CD algorithm from input and output (including integrating, building and testing code).
 I wrote the algorithm using PFT from the input.
 I explained that this was achieved by converting input to output at each point using a pattern-matching command and then putting these outputs together to form the algorithm’s output.
 If the command required sorting, searching or mathematical transformation rather than pattern matching, the connection between input and output was unknown or unpredictable and needed to be worked out by a neuronetwork or Combination Algorithm Writer (CAW) with a predicate database (and a decision tree of algorithms and types, for instance, mathematical types).
 Mathematical types were, for example, for reverse, [a_1,a_2,.
,a_n], [a_n,.
,a_2,a_1].
 The medicine student confirmed the final changes of diff.
 I asked the user whether the new changes needed a test and created one for them.
 For example, I created a writeln test that checked whether the output produced by writeln2 was correct.
 Writeln2’s output needed to be passed up through the levels of the program until it could be checked by tests, but it didn’t affect the output of the algorithm.
 Writeln2’s output depended on the files and parameters entered.
 The medicine student researched immortality and meditation in the future.
 I edited the final changes of diff.
 I noticed the software’s increasing version number and aimed to implement long-form (C-style Prolog rather than long-interpreter-loop code) optimisations.
 I corrected automated Lucian CI/CD’s mistake of using wrong tests or non-long-form code by checking types against the algorithm and similar algorithms and specs of short and corresponding long forms against the scaffold and similar software, respectively.
 I made money from Lucian CI/CD and long-form compiler courses.
 The medicine student regularly archived or deleted logs and old files.
 I displayed the diff results in Prolog, not List Prolog.
 I synchronised the dates across Lucian CI/CD file back-ups and logs.
 Instead of saving it in a folder and changing it to the date when it was moved later, I saved it in  “folder date”.
 I saved these files in the same place, which was customisable, in the private2 folder by default.
 The medicine student kept the unwanted code on file to trial new features, gauged whether they were close (in type) to the desired solution and bridged that gap.
 I could quickly find the additions in diff.
 I checked the additions to see if they were what I entered, wanted, and had the desired results.
 I found whether the change had wanted results compared with the past and recommended the user include them in a version note if they were part of a successful feature.
 They would be added to a list of possible changes in the previous version, which the tests found the correct combination.
 The medicine student checked for changes in all repositories simultaneously, ready for a group release.
 I could quickly find the changes in diff.
 Changes were either additions or deletions.
 I checked whether the code had changed as expected and noted any surprises and fixed tests (or lack thereof) resulting in unwanted deletions.
 I needed a negative test (testing failure) if an unwanted clause was not checked for failure.
 The medical student could quickly find the deletions in diff.
 I found the short-form algorithms for my algorithms using CAW or common sense.
 I included these and their corresponding long form in a neuronetwork.
 I found the closest types when integrating code and searched for more bridging algorithms, possibly requiring modifying existing code.
 Students created the systems, reinforcing understanding of the system and answers, developing simulated intelligence that sped up production and increased employment in areas of focus.
 The medicine student noted changes of note, with possible courses of action, and thanked the contributors for their ideas.
 The changes were colour-coded, allowing for changes to be made.
 I searched for all changes of a particular type, for example, additions.
 I had information at my fingertips and could make decisions and changes instantly.
 I carefully checked Lucian CI/CD’s, different programmers’ and the manager’s changes.
 The medicine student automatically wrote tests and reran the CI/CD pipeline based on feedback from users and clients on the production version.
 The changes were word-coded, allowing for changes to be made.
 The words were “addition” and “deletion”.
 I found all the occurrences of these terms and approved or deleted them.
 An assistant would then monitor the code and write new tests.
 The medicine student taught me how to modify the code from short to long form.
 I could generate a diff HTML file showing the changes made to the final combination.
 I automatically saved this file in the logs and saved a diff between versions in GitL.
 I found code closing the closest type gaps by finding the predicate with the right type match.
 I always compared with (included) the corresponding short form for clarity of reading and editing.
 The medicine student retired the feature if it had become obsolete or had other issues.
 I labelled data as a retired feature.
 I discovered the feature was not wanted, slow or undifferentiated.
 I kept the feature in a separate module or retired it.
 I included a deletable marker where it was usually called and warned users about its performance issues.
Medicine of Meditation 2
 The medical students uploaded their files to their server, testing them on different platforms.
 I prepared to commit the new files.
 Lucian CI/CD and GitL gave me experience writing DevOps (CI/CD) software and a version control system.
 With Lucian CI/CD, I could use free DevOps software to customise and automate.
 In addition, I could bug-fix nested predicates in findall in SSI by running non-nested and nested predicates in findall.
 The medicine student functionally decomposed the get and put variable parts in match4 in List Prolog on the way to writing long-form code.
 I prepared to upload the new files.
 I checked and fixed the files with Lucian CI/CD.
 I asked the open-source Prolog developer if a non-nested predicate was better than nested predicates in findall.
 A non-nested predicate in findall was faster to process and did not require a long interpreter loop.
 The medicine student used a program finder found with Combination Algorithm Writer (CAW) to keep the code as simple as possible.
 I checked that the tests in Lucian CI/CD were successful.
 I tested my repositories each time after adding new plug-ins, such as reverse-optimisation possible simplicity triggers, where (if code was saved in long form) code was converted to short-form code, which could be simplified or corrected, for example by inserting reverse before and after group_into_clauses10 in Lucian CI/CD to test bottom-up rather than depend on predicates that hadn't been tested and saved, perhaps with a program finder that was customised to do this.
 This program finder detected if inserting two reverses around a call would correct the output to the desired result.
 This technique also inserted an intermediate predicate as the call was to a recursive predicate and the call to the predicate with this call needed to be modularised (although it could be put into the body of the main predicate).
 The medicine student identified and removed unnecessary code using Lucian CI/CD by adding "bypass predicate" lines to the source code.
 I tested the workings of Lucian CI/CD itself by adding new commands to Lucian CI/CD that were in it.
 I read the source code to check and wrote down the commands Lucian CI/CD didn't have.
 I added these to Lucian CI/CD, particularly the Prolog to List Prolog converter used by Lucian CI/CD.
 I ran Lucian CI/CD on itself to check the source code was as simple as possible, using Lucian CI/CD's tests to generate tests for it in the interpreter.
 The medicine student found all possible new inferred connections through existing word neighbours in texts with the Breasoning Algorithm Writer (BAG).
 I demonstrated thoughts of the right quality and number with BAG.
 I used BAG rather than stamps with pre-saved BAG output to become immortal, as I had learned from writing the software that writing it and what it did were necessary to meet the "computation" requirement of immortality in one's home time.
 The leader recognised these thoughts and rewarded the people who represented them.
 BAG was my version of a neuronetwork.
 It was based entirely on my theory and plugged into my philosophy.
 The medicine student saved a copy of the passing files to approve.
 I authenticated that the files had passed Lucian CI/CD's tests.
 It was the log.
 I could list the predicates, their possible changes, and the test they passed.
 I could also reference archives or plug-ins from which possible replacements had come.
 The medicine student found the outputted files and replaced the files in the repository with them (or copied them from GitL, ran Lucian CI/CD and saved them in GitL).
 Lucian CI/CD moved passing files to the repository.
 A shell script automatically copied these files to the GitL archive.
 The files' version was increased and moved to production systems for further testing.
 The specifications of these systems were recorded and reported.
 The medicine student wrote in assembly language with a minimal, customisable register state machine.
 I backed up the old files in Lucian CI/CD.
 Separately, I defined universal assembly code as able to be run in Prolog.
 It had a register state machine.
 I wrote an algorithm in Prolog, tested it with Lucian CI/CD and converted it to assembly language.
 The medicine student claimed that converting to short form was part of partial evaluation, an optimisation technique.
 For example, parts of the query could be used to shorten the short form code (i.
 if specific ancestors were wanted, data collection could first find ancestors, then a subset of the tree), and then the code could be converted to interpreter-free long form code.
 In this case, partial evaluation simplified the code.
 I listed the repositories that the algorithm had modified.
 I converted foldr to long form (a predicate that didn't require backtracking).
 This expansion was similar to the following, with another command instead of append:
foldr_append([],B,B) :- !.
foldr_append([A1|A2],B,C) :-
 append(B,A1,D),
 foldr_append(A2,D,C),!.
I backed up the changed files, which were then converted to long-form before being compiled in C.
 The medical student went back to the original files if a test hadn't been written correctly or the long-form predicates didn't pass.
 I backed up the old files and folders, including invisible files, in the original repository.
 I stated that maplist/2, /3, and /4 were in long form if the called command was also in long form.
 I converted the called command to long-form to speed up maplist by writing it in long form.
 Two sentences were connected from the shared language in the connection.
 The medicine student ran Prolog on the emulator.
 I moved the new files and folders into the repository.
 I wrote a CPU emulator with binary addition, such as 0+0=0, 1+0, 0+1=1, and 1+1=10.
 The logic gates, composed of transistors, computed these results.
 The medical student spent equal time in the present and future before investing necessary pedagogy in both worlds and spending more time in the future.
 I inputted lines as strings to split into tokens before unit testing.
 I ran Lucian CI/CD in line mode to work with programming languages other than Prolog.
 I removed and re-added end-of-command delimiters (and catered for the function header being allowed by itself), identified, rewrote and replaced functions and added the end-of-function syntax.
 I could check and modify C, assembly and other code.
 The medicine student auto-solved the load problem by checking the system was clean and optimising the software.
 I ran Lucian CI/CD with settings for different testing stages.
 I could create and assort tests by stage, with some tests automatically passing (i.
 "a(_,_).
", without needing "true.
 Unit tests were tests testing the whole algorithm, integration tests (if required) tested that changes worked, end-to-end tests tested the entire algorithm, including installation and removal, user interface tests tested user input and interface appearance and clarity and continuous delivery tests such as load testing and API integrity testing.
 The algorithm should be able to bear the load of many users and should provide errors and connection errors and solutions.
 The medicine student found tests with Program Finder with Types as a last resort.
 I called Lucian CI/CD to find tests with particular labels for other repositories.
 I retrieved and modified tests from different repositories, such as for a compiler that ran the same programming language as the interpreter.
 I modified the interpreter and compiler so that they ran the same tests by using "a :- b, ! , c.
" instead of "a:-b->c;d.
" and eliminating duplicate predicates.
 I considered rewriting the interpreter and compiler to use this method when interpreting if-then (->/2 and /3).
 The medicine student found type errors in a predicate with particular modes.
 I called Lucian CI/CD to find tests with specific labels for other modes.
 I found the modes of a predicate (i.
, which arguments were inputs and which were outputs).
 I found its possible tests for these modes with PFT.
 PFT found tests by tracing the types of variables with particular modes through a predicate, giving the types and, therefore, possible tests of outputs.
 The medicine student researched and corrected the interpreter's weaknesses and slowness.
 I ran unit tests.
 For example, unit tests in List Prolog tested each command and algorithms with these commands.
 I generated unit tests with all possible combinations of commands and recursion to a certain depth to rigorously test various features.
 In addition, I tested all possible modes of commands.
graphics, 
music on computer sim
prolog on computer sim in assembly code
compile Prolog to assembly code
long form to assembly code (nested loops
and member! to a long-form pred)
computer sim with more memory, 
able to run in a container, 
transistor (logic gate) sim
Medicine of Pedagogy 2 2
 The medicine student built up to actual results with Mind Reader.
 I added myself to the moral end detector algorithm.
 This algorithm detected if I or someone I knew might die that day and breasoned out an argument against it to overcome it.
 They added themselves because they wanted to avoid breasoning out a high distinction after the time they would have died instead of before it with the effect of appearing to live to prevent the appearance of dying in another universe.
 I ran this algorithm daily for optimal results.
 The medicine student worked out the latest thought with logical reasoning.
 I completed my computer science and philosophy backlogs.
 I kept a list of grammar-checked sentence versions of my notes.
 I generated algorithms for these notes using Spec to Algorithm (S2A) and Mind Reader.
 I tested and saved these in files in my repository.
 The medicine students had time for new ideas, which they finished too.
 I finished algorithms in my notes with S2A, neuronets, and feature dependencies with switches.
 These switches cleaned and sped up algorithms.
 Writing the features led to new features, improvements, and developments in programming.
 I manually or automatically added commands to the neuronet.
 In the mind-reading studio, medical students visualised their thoughts in multiple dimensions with a headset or spiritual projector.
 I mind-read myself rather than type because typing was archaic, effortful, and dirty.
 Mind reading could also improve safety and provide thought systems and computerless offices.
 It was faster and non-invasive, leading to the proposal of an innovative office layout.
 The new commercial arm offered vocational and higher education accreditation.
 The medicine student tested the mental keyboard to ensure it worked correctly.
 The exam tested whether the software correctly mind-read the student under controlled conditions.
 A student would develop and be assessed on the software.
 The software could project questions onto a spiritual screen and detect answers.
 Mind reading could be the input method for a word processor, asking which character the user meant, pre-processing input.
 The medical student added knowledge about algorithms.
 Mind reading is necessary to speed up and automate work.
 It helps managers collect employee and customer thoughts and automates manager characters to help them with their jobs and queries.
 The employees received the thoughts and helped the customers.
 They worked out enough high-quality products to impress students' managers or customers and gave them to them.
 The medicine student finished reading at noon daily, prioritising their workload in categories from 1 to 4 and not enduring stress.
 The mind-reading word processor started where it left off, saving its progress if the machine crashed.
 It displays a progress bar for computing the current ideas.
 I read as much or as little of the report as I liked and was comprehensively filled in on critical details when I continued work.
 My workload was on my terms, and I felt fulfilled with automation, with the proviso that I was satisfied with my input and could take breaks when I wanted.
 The medicine student explained that the simulation had secure dimensions and that the simulated apartment was in the holodeck.
 The private academy was automated and could be paused whenever wanted.
 The lecturers automated their workload, and the students enjoyed a balance between self-exploration and optimisation with S2A.
 I applied creative terms to achieve mathematically endless possibilities.
 I mind-read future discoveries about a discovery from the physics model.
 I made the simulation possible with complete dimensions, making it safe.
 The medicine student stated that S2A achieved security by not accepting commands in input to a generated algorithm, using multi-factor authentication in private online algorithms including SSI Web Server, open-reasoning neuronets, encrypt variable names when running, not giving or logging sensitive data as part of errors, using updated dependencies, singleton and types static analysis and missing or misnamed predicates in dynamic analysis, penetration testing, limit user access to the minimum to perform their duties, using secure default settings, turning off unnecessary features and continuously monitor for and fix security threats and vulnerabilities.
 I conducted security checks by writing algorithms with S2A to generate consistent code from specs.
 The neuronet found or partially completed staged specs, which S2A and further neuronet/S2A cycles completed.
 An algorithm type-corrected neuronet code, or the student answered questions about specs, formulas needed and remaining or specs required, or this may be found with S2A, mind-reading, neuronets and the type corrector.
 Before simplifying the code, it was type-checked for missing parts.
Meditation of Meditation 1 1
 The meditator customised the product for the customer by mind and object-reading their requirements and providing support and options for the future.
 I modelled how to spend in finance by reaching a proper rating in business.
 My business and others were valued by the number of sales and professional indicators, such as the care they exhibited in pedagogy.
 The company emphasises results through the actions of employees and their benefits.
 For example, employees attributed sales to factors such as the clarity and necessity of the offering, the FAQ, and luck.
 The meditator taught meditation indication.
 The immortality technique was taught to ordinary and underperforming people.
 The normal people were uncomfortable with the utterance and breasonings but were happy to indicate daily 16k breasonings for each meditation and body replacement medicine.
 The former drug users needed encouragement to do the same and loved the miraculous benefits of immortality in their lives.
 They overcame small hurdles to arrive at the result and achieve the best quality of life possible.
 The meditator pressed a button for inspiration in Pedagogy.
 I preferred to develop my texts rather than generate them, but the finished texts I wrote recorded my thoughts and helped form research decisions.
 I wrote combinations from two to seven or more breasonings, taking the critical term from each breasoning and not wavering from the algorithm mission.
 The button ran GL and could find any number of breasoning keywords from a word.
 The breasoning keywords were found through random mind-reading by aiding a certain number of meditators per day and reminded me of fascinating philosophical algorithms.
 The meditator discovered the metaphorical cushion Grammar Logic output for the state machine, such as a pen as a worker and a line as a project.
 Given the analogy of a pen and line that a system machine was involved in drawing shapes, GL helped mind-map projects for workers.
 It did this by assisting those needing a small creative input to find inspiration and start or continue work.
 Its suggestions are tightly integrated with the original word and text the user wants to apply them to, saving time and lives when writing arguments.
 The suggestions were mind-read, vetted for relevance, and developed using a neuronet, which were effects of meditation.
 The meditators collected writings to support themselves.
 I printed out an emergency (no-power) immortality algorithm with instructions to write an 80-breasoning algorithm from random breasoning dictionary words or use an old argument with a new breasoning date.
 To find this, I combined an old argument with a breasoning dictionary word or other arguments and devised a new breasoning to maintain immortality.
 In case of a power failure, I could manually breason out the old breasonings with the date in them or write the original ones.
 Ideally, I chose from 4*50 high distinctions of breasonings.
 The meditator maintained a positive frame of mind while meditating.
 I grappled with positivity by considering its use when journaling.
 I wrote an article about the phenomenon, event, or product.
 I thought of its effects, implications, and the algorithms it indicated.
 Sometimes, the journalist becomes a scientist.
New Bots 2
 The bot hand-wrote algorithms by thinking of original versions of noumena.
 I developed 50 algorithms for a pass and 250 for a high distinction instead of 16k algorithmic breasonings.
 The larger number was too difficult as there was no way to vet such a large number.
 I found out about the student by mind-reading their algorithmic skills.
 I developed 250 algorithms for each sale and high distinction.
 The bot checked the code with types as they word-processed it, with chains of 50 algorithmlets (sic) to finish a line.
 I mind-read the algorithmic spec, cosmology, song line, GL word, movie line, BAG output, philosophy sentence, algorithmic comment, shift sentence, another sentence said, thought or written in one's life, or image, finding the input, output, method, and test cases.
 I mind-read skills, with words and letters matching them that make sense.
 This method required neuronetworks.
 The bot collected algorithmlets about formats for their algorithm or critically held each step to make it intuitive.
 I invented algorithms based on the highest quality ways of thinking.
 I checked the whole algorithmic database for the best way of thinking to use at each point, simplifying to simple and advanced types.
 I invented formats, reusable formats of data that made algorithms compatible with each other.
 There were intermediate formats in cosmology that the user could mind-read in themselves to connect to write algorithms.
 The bot checked algorithms generated by neuronets.
 If I couldn't run an algorithm, I mind-read myself about ways to correct it.
 I started by thinking about the significance of a GL word such as "art" in forming the specification, such as creating a walkthrough or influencing the algorithm with a diagram.
 I traced its commands' types, comparing the extent to which the spec-to-algorithm could generate its pattern-matching component, leaving a CAW specification to complete.
 I rescued CAW commands with the correct types from the proper place in the corrupted algorithm, plugged them into the pattern-matching algorithm and checked the result.
 The bot grouped by consecutive numbers that were part of the same number.
 I wrote a program finder for grouping consecutive numbers or patterns that formed a number or a term.
 I started with algorithms that did these things and merged them, finding patterns that other methods may miss.
 I used an algorithm generated with spec-to-algorithm and inserted type verification commands to differentiate appended clauses.
 I used pairs of append commands to get sequences of tokens until a condition was met.
 The bot said that besides repairing code, they checked the necessity of every command, clause, and predicate using Lucian CI/CD.
 If I couldn't secure an attention-attracting algorithm using a neuronet for an employee's shift, I used Combination Algorithm Writer (CAW).
 CAW might take minutes to write several commands or short clauses.
 Despite being slower, CAW could find results more accurately.
 It could be used to repair or finish corrupted or unfinished algorithms, finding efficient and correct code.
 The bot added Lucian CI/CD as a module to Spec to Algorithm.
 In Spec to Algorithm, I used subterm with address instead of predicates to search for values in terms and replace them with variables.
 Subterm with address found the address of values in terms, allowing substituting variables into these positions after determining which variable names to choose.
 The values were replaced with unique variables in a one-to-one correspondence and replaced with constants from the original data if they were the same across specs.
 Later, I generated predicates as an exercise for expandedness.
 The bot converted models to useful Prolog algorithms.
 I found input to create and run algorithms with Spec to Algorithm by running the Strings to Grammar try predicate, which found recursive predicates and later mapped their variables to the output variables of the recursive structures of the output.
 These recursive structures allowed other sets of input in the same recursive structure as the model input to be transformed into the recursive structure of the output and its expansion.
 After finding the unique variables, recursive structure and constants from the input, subterm with address queries were found from the recursive structures.
 For example, the input [1,2,3,2,3,1,2,3,2,3] is converted to the recursive structure [r,[1,[r,[2,3]]]].
 If there is another spec [r,[1,[r,[2,4]]]] and the generated algorithm is
[r,[1,[r,[2, B]]]] where 1 and 2 are constants, and B is a variable, then giving the new input [1,2,5,2,5,1,2,5,2,5] means the output's recursive structure [r,[2, B]] provides the output with [2,5,2,5].
 More importantly, proximity formats are needed to give [A],[A, B]->[B].
 The bot stated that there was no other easy way of solving the "teleporting train tracks" problem of mapping input to output in Spec to Algorithm than using subterm with address.
 Spec to Algorithm can flatten a term by representing item types by items of that type, running Spec to Algorithm, replacing these constants with type-checking commands, and copying the inputs to output without brackets.
 The general term's input is given by strings, atoms, numbers, and lists in any position and is repeated.
 In this case, indices of list items continue and do not restart when traversing the output's recursive structure.
 Continuing is the default.
 The bot didn't need recursive loops for non-deterministic data (which wasn't required) but took variable values from the new data, ignoring non-constants from previous data.
 I converted recursive structures into output by traversing the data, continuing, and not restarting the indices of recursive parts.
 I traversed the structure, recording numbers until a recursive part.
 When I had reached a recursive part, I traversed the contents, recording a variable value 23 from the data (which was not in 123232323 1242412424 patterns like the specs, but a single 1232412423 pattern from input), continuing to 24 on repeat, then 24,23 after the next repeat.
 The 1 in the output may be replaced with a 5.
 The bot turned optional structures on in strings-to-grammar but off in spec-to-algorithm to prevent ambiguity when outputting results.
 In addition, I turned optional structures in input in spec-to-algorithm off to keep structures the same.
 If an optional structure were in input in spec-to-algorithm, its contents would be stored in variables.
 However, the lack of an optional structure in the output needed for determining output wouldn't correlate with the input structure.
 For example, an optional structure in input may prevent recognising it in output, requiring individual variables to be copied, possibly undesirable in an algorithm.
 Optional structures may be acceptable with non-determinism from multiple specs.
 The bot verified inputs and outputted the results with an algorithm generated by Spec to Algorithm.
 I checked that recurring variables didn't have conflicting values.
 Within the current level of A in [r, A], I checked that instances of the same variable didn't match more than one value from the input.
 I found and set the variable to the value the first time it was mentioned, then checked that subsequent mentions of the variable were set to the same value.
 If they conflicted, the input-getting process and (generated) algorithm failed.
 The bot wrote plans, pedagogy, copywriting orders, chatbot questions and prayer songs to work the algorithm out.
 I found unique variables, recursive structures, and constants in that order because unique variables, which were one-to-one mappings of values to variables (the same across the specs), were needed before finding recursive structures and, later, input-output mapping.
 Constants, the same value in recursive structures across specs, could only be found after finding recursive structures.
 I checked the order of variables in each spec was the same for correctness.
 The order of variables in the new data set given to the generated algorithm was assumed to be the same.
 The bot only processed variables on non-deterministic branches when needed, finding mappings at the start and output for each branch based on the single input spec.
 I merged recursive structures with different shapes from specs using a decision tree.
 This non-deterministic tree allowed choices within the recursive structure to find different outputs from inputs.
 These followed recursive structures, with non-deterministic choices within them with new input-output pairings.
 Due to the decision tree, there was a single non-deterministic tree, and the algorithm needed to branch and process variables before the next branching point within a new branch of the algorithm.
 The bot stated that programs with CAW content may have multiple levels of processing but recognisable results.
 I converted the subterm with address algorithm to the expanded algorithm.
 First, I stored the input in recursive structures using its previous algorithm and used the match predicate from List Prolog to move the input to output using the recursive structures.
 Alternatively, I formed predicates and grammars from the recursive structures that stored the input, then generated predicates from the output recursive structures to create output, taking copies or continuing to process data, starting with the base (precisely, the start of the base) level of output lists and building the output from input.
 Needed input lists and values were passed to the output predicates, making code more accessible and understandable.
 The bot gave the input and output recursive structures with Spec to Algorithm resolved variables mixed with unknown variables to CAW, and it found the new rules.
 I gave CAW specifications with complete results, including stages of computation, for example, results of predicates or times a predicate was run before running itself recursively, including recursive predicates called.
 These complete results included all computed values, not simply a truth value for their completion.
 If the algorithm found was recursive, it was partially found using Spec to Algorithm, and the remaining inputs and outputs were joined with CAW.
 I imagined stages of the algorithm and refined details as I went.
New Sales 6
 The salesperson prepared for joining, expansion, enlightenment, and constructive evaluation.
 The novel’s algorithmic perspectives were ready for critical analysis.
 It included an algorithm processing a linear structure that could be simplified from a tree.
 This process started with input, files, API calls, or protocols.
 I specialised in simplifying the complex parts first.
 The salesperson used attention-attracting methods to develop breasonings like GL, BAG and combophil.
 I found philosophies to write about using syntheses of ten algorithms.
 Each chapter had one set of ten parts.
 I explored different configurations of the philosophy, each with different computational implications.
 They were aphors or short paragraphs, each exploring a specific idea associated with objects in accreditation when individually thought of.
 The salesperson added to or nourished undeveloped, unfinished or cutting-edge frontiers for research.
 I connected philosophies to others in philosophy for ideas.
 I decided on a trajectory or contention between two ideas and explored them.
 These ideas were selected from idea centres in philosophy, found using key term clusters.
 I explored connections via other ideas between the ideas.
 The salesperson said their version was pitch-blackness with razor-new technology in the jewel chip.
 I explored hypotheses and questions and how various people could approach these over time.
 I thought about macro-ideas, or the main ideas of the philosopher, and how these ideas were relevant.
 These ideas were the key terms with the highest frequencies in the texts.
 I retrieved a non-working algorithm by repairing its skills from scratch and approaching its original skills as closely as possible without sacrificing correctness.
 The salesperson chose positive stories, had characters with ardour and had a science research edge.
 I wrote a story as an implicit framework for philosophy.
 I cleaned and focused on philosophically interpreted instruments in settings.
 I focused on positivity, algorithms, and multiplicity.
 Before setting off, I checked that my pack had an algorithm, a philosophy, art, and a song.
 The salesperson thought of unique ideas and perfected them before thinking of them.
 The philosophy matched my style of creativity but was useful and suggestive of new ideas, although not exhaustive.
 I erred on the side of caution with finishing off algorithms to exhaust them but made up new frontiers, such as selling, educating, or growing.
 I used music and art as inspirations, thinking into objects and creating models and simulations of my work.
 I devised media where there were none, filled gaps in fonts and aimed to be well-known.
 The salesperson asked if they were worried about myxomatosis.
 I included the story point as a philosophy at the start of the scene.
 The types and the algorithm were a proof because they defined the alphabet of symbols used in the algorithm.
 I checked the algorithm proved what I wanted it to by checking the data led to the correct result with correct reasoning.
 I felt like a rabbit rather than a lion or monkey and couldn’t eat them.
 The salesperson considered the menu and paid with money earned using their intellect.
 I thought of an idea for a setting: a large jewel computer chip.
 These crystals refracted lasers and used quantum components faster than the speed of light.
 Each element could be spiritually programmed with 16,000 breasonings and accessed as if they were real.
 They were used for mind reading, breasoning and immortality.
 The salesperson encouraged people to learn meditation to become immortal and broach life’s questions.
 I recorded how a child thought, not wrote.
 I considered being an adult inside a child’s body as if I had frozen my age as a child.
 I sided with examination, longer, finished texts, and specialised in computational spiritual sciences and other algorithms.
 I introduced the idea of immortality and locking one’s age, raising important ethical questions.
 The salesperson endeavoured to create art each day.
 I determined the story’s setting, year, and properties myself.
 I thought into filmable sets for special effects, including artificial intelligence, such as walking on a cubic planet or following a particle through a 3D maze.
 I wrote a story, particularly the description of the software box, as if it was about software for a solution to the problem: this combined realism, computation perfection and the latest science.
 The salesperson counted and kept their weekly predicate count to their standard.
 I wrote a novel using algorithmic language, giving away future computer science.
 For example, a robot experienced aphoria or a protective connection with humans.
 This sensation was due to humans writing philosophical aphors about objects that are increased with reasoning.
 This increase was done automatically in the future, and it was increased that it was good.
 The salesperson explored beneath the earth’s crust as a reason for examining reasons for exploring between dimensions.
 I wrote a novel about the character John Blair, who journeyed to the earth’s centre like a chaotic fractal being expanded.
 I revisited the story with new interpretations, such as how Cultural Translation Tool 3 and other algorithms’ bulk processing tasks created an automation utopia, given it was carried out well.
 For example, banks bulk processed transactions, people received a university stipend, and employment and tax forms were automatically processed, creating a utopia of bulk automation with the need for people to be encouraged to interact by actively learning, consuming, and spiritually growing.
 The students researched and wrote creatively on Lucianic topics.
 The salesperson mind-read and mind-conversed with robots, of whom smaller robots liked more minor things, from pattern-matching to organising a creation gallery and discussing spirituality.
 John Blair explores a robot utopia.
 They were syncretic with Computational English, which helped make writing algorithms enjoyable and present algorithms attractively.
 Robot aphoria caused robots to love people for saying breasonings.
 Meditators lived in the safest possible universe.
 The salesperson only loaded the people onto the simulation when it was safe.
 I explored small-scale versions of food scarcity and overpopulation that large-scale immortality might bring.
 To become immortal, one needed to be or know a meditator, of whom there were few.
 The simulation solved these problems and space travel dangers.
 The robots were reliable in managing the simulation, which was computationally safe because it was computed at the start.
 The salesperson helped write the algorithm by identifying feasible subsets or whole sets of skills and functionally decomposing the task into smaller chunks.
 The company appeared professional by agreeing or disagreeing with and grappling with representations during the day.
 These might be in text, spoken or thought form to a chatbot.
 The thoughts could be mind-read, with specific algorithms interpreted as them.
 Replying to and helping students write algorithms was the most challenging skill, completed using Program Finder with Types, libraries or neuronets.
 The salesperson asked a cosmologue for rhythms for each part and section.
 I hand-composed or rewrote Music Composer to take user input or mind-compose songs with rhythms.
 I vertically selected by option-dragging a pretty-printed music meta file’s sections in a suitable text editor to copy and paste sections.
 I used a programming language to edit the sections, with commands such as slow, fast, or unusual rhythm in the solo.
 I wrote at least ten hand-breasonings and generated the rest of the 16k algorithms with thought-provoking software.
 The salesperson trained the person to mind-read their thoughts, stored in one place, to complete and present their work, where completing an assignment using mind-reading was assessable.
 I determined the high distinction by itself.
 The brain naturally agreed, and businesses and schools operated effectively.
 I established business systems, with systems to detect comments to help finish work.
 There were systems in education and business, and the books’ skills were explored.
 The salesperson professionally handled the students by writing about them and helping them to write.
 The system detected whether the submitted work was below standard and requested that the student resubmit it.
 The student was not allowed to find fault, abuse, hate, or discriminate in the name of positivity and exposition.
 The critique was positive, connecting parts of it to other assessable essays.
 The courses included a particular number of assignments and requirements, which were internally accredited.
 The salesperson decided to set joining algorithm ways of thinking together as the assignment.
 The system highlighted the parts of the work that were below standard.
 The lecturer devised new questions during their career.
 They helped students write assignments confidently and to the correct standard.
 They checked that sources had been paraphrased accurately and enough.
 The salesperson set speed, accuracy, and challenging teamwork in computer science competitions.
 The students were expected to complete their own work, understand the algorithms and explain their work in their own words.
 There were authentication tests and interviews, and projects had verification and submission scripts to help with the assignment and marking.
 Students should comment on what they found noteworthy about each predicate and line on their algorithm.
 Plagiarised work was not accepted, and comments should be original and grammatical.
 The salesperson developed teaching into research and commercial ventures, paying staff in total.
 There were fifty high distinctions for the university, the head of state, and politics per day.
 The university helped with imagery, cognition, and accreditation.
 The head of state helped manage backups, lunchtime refreshments, and fine arts.
 I allowed checking and differences in opinion and virtually integrated the university.
 The salesperson was in charge of problem-solving.
 I explored particular ideas as a matter of course.
 I scheduled events whenever necessary and at the best time and organised someone else to complete menial tasks.
 They were paid the same stipend as me.
 I could write in my own time, conduct a business and organise missions to help customers with business.
 The salesperson funnelled ideas and increased the best ideas.
 The institution appeared to breason out assignments for the university, the head of state, and politics.
 The manager selected assignments and algorithms to help with.
 I completed accreditation as an exercise as an example to businesses.
 Each internal and specialisation related to external areas of study was completed.
 The salesperson was happy with health, wealth and wisdom.
 I critically regarded the university, the head of state, and politics, each with 50 As.
 I didn’t overconsume electricity, time, or money.
 People could sense when to lower the birth rate by slowing down to invest meditation and pedagogy in conception.
 I enjoyed a long life, the freedom to self-represent, and the agreement with meditation.
 The salesperson devised pixels and smooth lines about fonts and graphics.
 I halved the width of objects until they were called sharp.
 I found ideas within the eye of the needle representing the requirements.
 Computer science processed, scaled, optimised, and recorded algorithms.
 Scaling included automating, generalising, and focusing on useful dimensions of algorithms.
 The salesperson increased the strings to grammar algorithm to keep brackets in a clause and introduced lookahead in multiple recursive levels.
 I tested the web server daily to ensure the site was up and the database was not corrupted.
 I tested the site after making changes and running tests every few days.
 The students could write on sentences in themselves or apply them to a close topic.
 They did this by writing within the terms of the sentence and increasing other material within the language.
 The salesperson avoided competing prefixes in non-deterministic grammar clauses and kept lookahead minimal for performance.
 For example, competing open brackets in non-deterministic clauses may cause slower performance and require lookahead.
 The algorithm should use a single clause to replace the same prefixes and branch to the two clauses with the items following the instances of the prefix to solve competing prefixes in non-deterministic clauses.
 I compared clauses to check if they should be minimised.
 I was careful to delete null and unit clauses after this.
 The salesperson simplified the grammar before testing it was equivalent to another grammar.
 I tested grammars to be equivalent when marking by sorting them, replacing their predicate names with numbers from start to end, and testing to see if they matched.
 I tested the grammar worked on the given set of strings.
 I checked whether their and my grammar were as simple as possible using reduction, minimisation and simplification.
 I repeatedly applied these until the grammar was as simple as possible.
 The salesperson used the grammar for parsing a term, converting it to a data structure or writing a new programming language for faster production.
 I tested whether the grammar successfully parsed its strings and accurately reflected the pattern, such as one clause for a predicate header and one for the predicate body.
 The algorithm recognised that the data was a computer algorithm and recognised the syntax for the header and body and their delimiters.
 If the data was written text, the grammar finder grouped letters as words and treated punctuation as delimiters.
 Because of positive function, I didn’t need to apply many optimisations.
 The salesperson preferred data structures of a set number of levels because they could measure their memory use.
 I supported an arbitrary number of levels in grammars, types, and data structures as an alternative to supporting any number of levels.
 In grammars, I got the first level’s open bracket token, then part of the level and then, optionally, the next level’s open bracket token, and so on.
 I introduced a specific mode for finding all possible grammars.
 Given the high complexity, this method worked best with shorter data sets.
 I found better grammars that repeated over longer lists, not the first available repeating character.
 I could select the best combinations of string grammars, creating a single grammar for their convergence with a decision tree.
 The salesperson noticed specific commands accepted up to a certain number of arguments, although on a different topic.
 I used lookahead when parsing multiple levels of nested brackets.
 I inserted lookahead([“]”]) after finding an item(I) in the compound in the term parser to allow parsing multiple levels.
 With the lookahead statement, the parser could parse more than one level of nested brackets.
 Stack overflow errors existed because algorithms accepted very high stacks, and algorithms were too difficult to code with a cut-off to their recursion.
 The salesperson simplified strings based on their character type.
 I collected like-types in strings given as input to the strings to grammar algorithm.
 These were all letters or all numbers.
 Punctuation characters were left separate because they each had unique semantics.
 After collecting these groups, I could merge the lists containing them into decision tree grammars.
 The salesperson taught the algorithm types of correspondences, such as neighbours or connections through labels, where labels might be organised by section.
 I modified the strings-to-grammar algorithm to produce algorithms from a specification to write algorithms where data is in lists or strings.
 Lists were treated like strings, which were converted to lists for processing.
 I could convert from type to type.
 For example, I converted a string to a grammar and then to another string by replacing certain parts of the grammar with other grammars.
 I checked other variables for correspondences of inputs to outputs, finding correspondences using regression, where the algorithm couldn’t simply pattern-match correspondences because they might rely on proximity.
 The salesperson used regression to find the closest solution.
 I used neuronets for unpredictable (non-pattern-matching) code.
 First, I predicted the next command using a recurrent neuronet, using regression, and finding code meeting the requirements using my database.
 I preprocessed the data, replacing commands and some data types with numbers; for example, constants had their own number, but specific items were replaced.
 The features were commands in places, requiring large matrices.
 I used one-hot encoding (zeros apart from a one in a row in a place signifying the item).
 I avoided data duplication by using a decision tree, and I worked with windows of data to avoid problems with long data sequences.
 The salesperson used PFTCV (Program Finder with Types, Constants and Unique Variables) and CAW to find unpredictable code.
 To find unpredictable code, I converted my database to a typed predicate library to quickly search.
 This library contained commands such as plus (+), constants, and types in code and joined predicates using types with unique variables and constants (found in algorithms, not data) with an algorithm similar to strings-to-grammar.
 The algorithm continuously retried predictable and unpredictable code until the output was found.
 It collected different possible predicates with the same type to try as unique algorithm versions to find output.
 I saved the predicate calls of predicates found using this algorithm one after another or joined any intermediate (non-recursive, short) predicates, where the prior finds whole predicates with type flow.
 The salesperson checked whether the code looked healthy by checking for singletons, uniformity, and back-substitution and trialling user queries that tested each feature or section of the algorithm against type success.
 The closest tries (with the minimum number of unfound parts of the output) per unpredictable part are listed, human-completed, or completed with CAW if there are few enough unknowns.
 If no solution is found, the system mind-reads the input and output of stages, their data structure types and types, with constants, unique variables, and any commands needed to relate them.
 Mind-reading, including random proofreading, may optimise choosing between predicates with the same type when finding unpredictable code.
 Mind-reading may also check code quality by checking whether the result is wanted and help repair code by explaining the desired result in terms of the aim, with questions about geometry.
 The salesperson created a help system for algorithms and ensured internal walkthroughs, allowing bug-checking in interpreters to remain constant across versions.
 I added features to algorithms with an algorithm.
 I used ways of thinking from previous algorithms, such as making games to develop new features.
 I relied on algorithms written using formats with additional modules (such as scripts for additional formats in Essay Helper and programming language logical structures with labelled command types).
 Creating algorithms as programming languages created more options for development and required the same overall system to avoid incompatibilities, ensuring easier creation of more features for various algorithms.
 The salesperson checked off completed tasks, tracking tasks they created.
 I used mind-reading to develop features.
 I minimised List Prolog and Prolog algorithms with a single algorithm.
 In addition, type-compatible algorithms with an algorithm’s programming languages were suggested and drafted using mind-reading with types in the algorithm’s programming scripting language.
 These types were, for example, meditation task dependencies.
 The salesperson	finished a solution with visualisations and simulations in a few nested commands.
 I found two instances of a predicate giving a result to two arguments, merged the two predicates and called them using foldr or maplist.
 I wrote an interpreter with a neuronet or ran an interpreter to check code, which is used when searching for unpredictable code instantly.
 The predictable and unpredictable code finders found the code and minimised duplicate nodes.
 I wrote an editor that searched for commands based on their data (first finding their types) and inserted the predicate name.
 The salesperson could use formats in spreadsheets, program finders and when developing algorithms.
 I taught the algorithm formats to distil and more quickly recognise data to form solutions.
 This method sped up algorithm development by breaking down and giving input and output in stages, where the program finder is instructed to use the set of predicates found in this way.
 An algorithm recognises data in formats by their type or groups them as numbers and recognises them, possibly assigning variables to them for manipulation.
 Mind-reading could collect these input and output formats, including critical functions such as grouping numbers.
 The salesperson used formats to detect corresponding values in variables.
 Spec-to-algorithm used two grammars, for input and output, to find constants that recurred in specs, moved variables forming predictable code and new values arising from input forming unpredictable (non-pattern matching) code.
 The algorithm finds the result of each input on the way to an output as soon as possible and adds it to the output as quickly as possible.
 The program finder finds the dependency of predictable and unpredictable variables, and the earliest point computations involving them can be completed before needed by a later point, then renders the algorithm with computations over time.
 Like a format scanner, the algorithm finds the necessary values from the variables simultaneously and performs its computations, including predicates such as subterm with address for advanced searches.
 The salesperson completed the task predicate by predicate after checking their plan was like a chatbot’s plan.
 For example, the program finder takes sets of values, performs computations, and returns them as output (given whether they are unique variables, their code, values, or a list m of particular items, and analyses whether items are sorted in stages of output or lists at particular stages are sorted together with a single index).
 It then simplifies the algorithm to predicates performing groups of computations.
 The complexity of searching for necessary commands is reduced (where types reduce the unpredictable command search space) because the top search results from the regression/constrained types search are tested against the spec, or possibly sorting variable values by type and searching for an algorithm that matches the output using regression, finishing the task in a single stroke.
 The salesperson flagged non-uniform or unnecessary code and questioned the data.
 I repaired the similar, non-matching algorithm by diffing the expected and actual results, comparing their grammars, finding unaccounted-for outputs and re-running the unpredictable program finder based on the newly arisen variables.
 The variables’ values, over time with each spec, were mapped to patterns that the output was found in terms of.
 If no solution was found after repeatedly performing this process, the closest solution was finished by hand or CAW.
 It will be removed if a value is deemed unnecessary, mistaken or not part of the spec.
 The salesperson eliminated library predicates with worse performance.
 I tested for unpredictable predicates with higher frequencies first.
 I tested for sorting by column and tested for a shortlist of commands to save time.
 I didn’t run CAW with a command length greater than one because it would take too long; instead, I relied on my predicate library.
 I compiled the algorithm for better performance.
 The salesperson tested that the test data was correct, compared with the working algorithm, after item numbers were tested to be uniform and hand-taught expected results were tested in the algorithm.
 I watched data to see if correspondences between addresses and item numbers or the integrity of patterns in the algorithm broke compared with their counterparts in the spec.
 If they did, the algorithm produced a warning and suggested a way to fix it by drawing attention to the correspondence in the algorithm, the input, the output or dismissing the issue.
 The new editor automatically made suggestions, instantly tried code on completion of commands and corrections to mistypes, kept a log of the user/computer, showed type and other compilation errors on the same page, ran on the same page and finished on the same day.
 There was a version control system that suggested backdating versions, a CI/CD tool to delete unnecessary commands, a DFA minimiser and optimiser and a discrete optimiser to make obvious suggestions about correctness.
 The salesperson stated there were no operators except in the {code} section in definite clause grammars, in spec-to-algorithm.
 I developed new Prolog operators to speed up development.
 I denoted append with a colon “: “, string concat with “$” and currying with “?”.
 I could apply operations to sequences of items.
 In addition, I could replace “?” with a predicate name, operator or variable name, and even whole commands to fill in commands in algorithms.
 The salesperson broke algorithms into overall predicates, subpredicates and clauses.
 If-then statements with unpredictable conditions were found as unpredictable code in spec-to-algorithm.
 Or they were predictable code if their condition was pattern matched.
 If unpredictable, they were found with regression-based decision trees.
 Unpredictable code found any included predictable code.
 The salesperson concentrated on the algorithms from the areas of study and research.
 I found the product of two regressions, for example, reverse and plus (+), by combining them and teaching their combination to it.
 I could reduce the search space with types, find a sequence of commands that equalled the output, or find a slightly more complicated set of algorithms that included all needed combinations.
 This second method amounted to a fast decision tree of types and algorithms and was less complex.
 The salesperson labelled recursive structures as recursive, optional strings, atoms or numbers at the start and found terms' unique variables, constants and other spec-to-algorithm predicate results according to their label.
 I converted strings, atoms and numbers in terms, especially ones with length greater than one, to labelled recursive structures, which contained strings of length one (making finding conversions easy) and could be converted back for CAW processing if necessary.
 I converted these items to recursive structures with the try predicate from strings-to-grammar.
 Later, I converted them back to their original form for outputting.
 I converted the terms to unique variable form and to recursive structures together.
 The salesperson recommended a Master's in Business Administration (MBA) and a lifestyle of transcendence to would-be immortals.
 In addition to generating an "algorithm.
pl" file, spec-to-algorithm generates an "algorithm2.
pl" file including "spec_to_algorithm.
pl" and "algorithm.
pl" to run the generated algorithm by itself.
 Helping others become immortal involves helping them indicate algorithmic and prosaic breasonings for meditation, body-replacement and anti-ageing medicine in a wanted way each day.
 Similarly to running a business, interest meditators in writing a converter from a specification to an algorithm to support their thoughts (breasonings are the engine of immortality) to indicate to become immortal.
 This process involves taking care of people's algorithmic learning daily, including their interests and progress and helping them take the initiative as your helper.
 The salesperson enjoyed the spiritual school, which helped with school work by approaching writing.
 The Earth-side immortal had to complete the work the immortal had completed, including all the algorithms.
 The friendly immortal sometimes had to appear to the Earth-side immortal to interest them in individual algorithms.
 The student had many questions and needed help developing the algorithms, which were simple yet required understanding each step.
 The teacher gives the specification and assesses the student on each predicate, helping them speed up by writing spec-to-algorithm and CAW.
 The salesperson stated the full version was always preferred.
 I helped the student to become immortal, then moved on to the next person.
 They were male or female, felt happy in life, a meditator and pedagogue (or wanted to become a meditator and pedagogue, or could learn the same as up to time crystals working).
 All the necessary areas of study (pedagogy text to breasonings, meditation, medicine anti-ageing, time travel, mind reading, time crystal, having a spiritual future apartment and having a spiritual future computer), usually with 50 As each (or 4000 breasonings, in 16 groups of 250 breasonings, represented by an algorithm) were covered.
 Algorithm steps needed to be mind-read and recorded, with special foods representing the breasonings covered as rewards.
 The salesperson found how commands changed their input's type to the output's type to help find and fix type errors.
 Type finder found the Prolog types of predicates to analyse them, such as whether their terms were single items such as strings, atoms or numbers, or lists or compounds.
 The algorithm found the types of each clause, stopping when it reached the base case or the time limit to find the predicate's types on a recursive call.
 Types are for predicates, not clauses.
 I used the types to speed up searching CAW library predicates and write proofs (which types with algorithms are, if they prove what you want them to) and the specifications to explore further cases and write commands.
 The salesperson found an algorithm that formed recursive structures from inputs and outputs, found mappings between inputs and outputs and found the output.
 Spec to Algorithm finds the mapping of input to output variables from the overall chart of variables in input and output.
 It finds the address of each input variable and its address in the output (specifically, the recursive structures), then substitutes the new set of inputs into the recursive structure to find the output values.
 It finds the recursive structure when writing the algorithm and puts the input into this structure using a predefined predicate.
 I used "formats" to find relationships between variables before finding their mapping.
 The salesperson updated Spec to Algorithm to make verifications, check conditions or perform computations with CAW to select and transform variable values.
 Spec to Algorithm learns correspondences in vars [[a,b],.
] [[b,c],.
], copying values from different lists to output.
 Repeating patterns are recognised and converted to expanded lists, and nth or CAW-found values will be handled later.
 Non-deterministic data from different specs is transformed into a decision tree and is dealt with by conditionals at the current position.
 Often, recursive structures don't contain other recursive structures because the algorithm is shallow and outputs values at the same level, or the output is zipped combinations of variable values and finds correspondences between items in lists in two variables.
 In pattern-matching mode, taking an item from a list for output triggers starting accessing values of other variables at this position at that recursive level of the recursive structure.
 The salesperson used pattern matching to find correspondences instead of formats, confirming one's first impression.
 Spec to Algorithm learns to create correspondences from indices [[1,e],.
] [[1,f],.
] from [e,.
] when separating columns, when variables are linked and operating on them, from formats.
 Formats are short examples of inputs and outputs that help the algorithm determine whether items next to each other are linked or need to be linked with indices.
 The algorithm can hypothesise correspondences from the proximity of variables in output.
 Nested recursive structures' variable indices may not start again but continue from a previous recursive cycle, determined by inspecting output.
 The salesperson could make a spreadsheet formula finder more quickly with Spec to Algorithm.
 The format algorithms mentioned earlier are in unpredictable CAW predicate libraries that more easily form results.
 These are not only proximity formats, which are unnecessary, but spreadsheet cell formats, types of types such as music and other CAW commands.
 These formats are frequently used and quickly accessed relationships.
 The spreadsheet formats are linked to setting and getting variables, grouping numbers, finding additions and subtractions and formatting reports.
 The salesperson said that the pattern matcher found output A from input A and that the unpredictable code finder/Combination Algorithm Writer (CAW) found B=2 from A1=1, A2=1 using the rule B is A1+A2.
 I converted terms and strings to other terms when finding constants and unique variables.
 I didn't need to find types of data items (such as strings, atoms and numbers) because these were converted to terms rather than left in their original form and recurring variables were needed in a pattern-matching algorithm finder rather than types being needed.
 In a type conversion finder or an unpredictable code finder, types are required to find the variable type to identify and convert it quickly.
 These types are string, atom, and number and are stored with the term when its items are converted to recursive structures.
 The salesperson saved recursive structures with labels to restart or continue with indices of list items.
 The set of input and output terms contains lists, nested lists, and empty lists.
 The lists in the output recursive structure are either one-off, lists starting from the first item, lists starting from the last item, or a correspondence.
 On another note, my version of Spec to Algorithm was unusual because it used subterm with address, not recursive predicates and grammars, to collect input and find the mapping of input to output, making adding and modifying features to transform data easier.
 I restarted indices based on output (continuing or restarting at any point); for example, 1213 may be represented as 12,13 or 1213 used again in different places.
 The salesperson protected students and prevented bots from accessing the website.
 I introduced multifactor authentication in the Academy to prevent unauthorised logins.
 I asked for the person's email when registering.
 The person was sent a code on login to enter and log in.
 This method prevented data theft.
 The salesperson designed a simple "stamp" version of spec-to-algorithm.
 The Academy aimed for 16k breasonings for each department for areas of study.
 I planned a simpler version of spec-to-algorithm, which used List Prolog's match command to map variables from input to output.
 This version could be used in assignments and to design algorithms for quick use.
 This version of spec-to-algorithm was short and easy to program.
 The salesperson submitted high distinction requirements in response to high-achieving (or some, if none) students using philosophy and computer science software.
 I employed an employee to sustain the business and help with necessary tasks.
 I collected their tax and super information.
 I onboarded them, enabled them to log in, sent them a welcome letter, and employee handbook, showed them how to use the messaging feature and software, discussed shifts, and timelines, took the initiative with short and long-term goals, meetings about projects, progress and resolving issues, discussions with other employees and managers, trained them using role-plays and games about asking chatbots for algorithms, writing algorithms using spec-to-algorithm and repairing algorithms, IT security and backups, scheduled calls after their first week, month and quarter to chat, and invited them to social events.
 I collected their work and feedback and responded to them.
 The salesperson expected teachers to adhere to ethical policy about mind-reading.
 The teachers were encouraged to appear to help, reward, mentor, and respond to students.
 I encouraged the use of grammar checkers and neat code formatting and commenting.
 Students and teachers commented on what was interesting about a line.
 There were guidelines about mind-reading whether students needed help, finding out their thoughts to start work and helping them during it.
 The salesperson partially automated finance or employed thinkers to submit high distinction requirements with critical financial documents, such as their pay.
 I prepared financial documents for the company.
 I completed the financial documents, analysis, and recommendations.
 I made adjustments and took appropriate action based on the recommendations.
 I analysed the feasibility of different pathways, investments, budgeting, and other decisions.
 The salesperson analysed whether particular variables were necessary using Spec to Algorithm.
 I flagged all constants in input and output.
 The user checked whether these constants were required and if they should be changed to variables; they inserted more specs to enable Spec to Algorithm to convert them to variables.
 Constants may be necessary to label data.
 They may need to be changed to variables if new data needs to be processed using them.
 The salesperson found unique variables and constants in strings, atoms and numbers, where original groupings as these types mattered when converting and inputting them into recursive structures (as well as when writing the algorithm), as did the output types.
 I reran Spec to Algorithm on variable data containing multiple strings, atoms, or numbers split into characters to find further recursive structures.
 These could be simpler to process, representing a variable a single time.
 Different specs containing these recursive structures could be further reduced to non-deterministic structures using decision trees.
 I found the recursive structures in one pass, labelling data items that had started as strings, atoms and numbers and converting them to the types of the output, meaning the input types didn’t matter (apart from putting the input into recursive structures recognised as variables), but the variable values had to be assembled into the types of the output.
 The salesperson understood logic’s simplicity and elegance.
 The variables couldn’t be split because their recursive structures didn’t allow this or pattern-matching individual characters, so splitting strings, atoms, and numbers was pointless.
 The only advantage of breaking them was recognising their unique grammars or recursive structures, pattern matching repeating patterns and their variables and producing the resulting output.
 The more possible algorithms were character, item and grammar converters, with formatting such as brackets, compounds and multiple levels of algorithms with conditionals and other commands.
 I needed the expanded code to insert commands more quickly.
 The salesperson checked that a value had the same type as a previous constant or variable in the same place, where more specs were needed to accept different types.
 Splitting strings, atoms and numbers into characters was enabled as an option in both Strings to Grammar and Spec to Algorithm, where the type of these items was preserved (but not converted to numbers while forming an item, in case “01”: “01” became “11”), grammars can parse characters, not necessarily items, unless needed, and only verify, not produce any output, and algorithms made up new variables with their types, composed of variables with other types.
 Strings, atoms, and numbers were arbitrarily grouped in input (as this was needed to parse them) without needing types and formatted as items with types for the output.
 However, new input with the same types as previous input meant their types must be recorded.
 I set the maximum number of program finder-CAW redrafting cycles.
Checking numbers didn’t have decimal places, or output was wrong (must realise zeros can simplify, even if the algorithm automatically does this)
 The salesperson used and handled type conversions with compounds to save files, parse and compute formulas and other subterm-with-address searches.
 I added compounds to the list of types Spec to Algorithm could input and output.
 They were converted to lists of one-character strings and back to compounds if necessary.
 Compounds could be a(Arg1, Arg2) or 1+1 or any chain of operators and values.
 I added customised operators to List Prolog in fxy, xfy or xyf form.
 The salesperson decided to keep a certain number of variables to help find constants across specs more easily.
 I confirmed that one should convert Spec to Algorithm data to recursive structures with “try” in one go.
 I converted strings, atoms, numbers, and compounds to lists of one-character strings.
 I processed them using “try” to produce recursive structures and recursive structures containing these structures within and outside variables.
 This method allowed for finding patterns across items and variables.
 Any number of repeating input or output variables or patterns within terms could be accounted for.
 The salesperson produced code with Spec to Algorithm so it could be universally read and was straightforward.
 I noticed that the recursive structures might need generated code to be outputted to code to account for skipped structures that were the same and could, therefore, be verified or processed by predicates.
 If there were predicate calls [a, a, b, a], there would be a loop of a, b, and a.
 The predicate a could be called rather than relying on a repeated recursive structure.
 String to Grammar outputted grammars with clauses that could be reduced and simplified, and so could Spec to Algorithm’s generated algorithms.
 Because subterm with address was simpler than predicates, repeated recursive structures could point to the same structure.
 The salesperson used the Spec to Algorithm as a module to write code and correct types on failed tests in Lucian CI/CD.
 In Spec to Algorithm, I recorded and checked string, atom, number and constant types on recursive structures’ formation and filling.
 These types were wrapped around the lists of one-character strings to which these items were converted.
 They were recorded when creating the recursive structures for data and variables and checked when finding the structures in the generated algorithm.
 I needed one-character granularity for changing the person’s number in written grammar, type conversion and complex processing of items down to the character level.
 The salesperson considered leniently making all repeated values into variables and checking if a constant and variable were the same when merged in a decision tree, avoided by regenerating the algorithm.
 I didn’t store the type with sub-variables to check them when finding unique variables and constants, but I separated them from their type to find type conversions without needing type checking.
 They were already type-checked when new data was input into the generated algorithm.
 Checking for unique variables and constants in the strings sans (without) types was a nice feature.
 This feature allowed pattern matching within strings, atoms, numbers and constants, leading to complex character code changes and other CAW operations.
 One needed to be careful to disallow Lucian CI/CD from adding constants to algorithms with Spec to Algorithm when there were not enough specs, requiring more specs to be entered or generated, or for the user to indicate specific values had variables (with human confirmation).
 The salesperson replaced labels with coded labels and caught illegal characters to avoid Spec to Algorithm malfunctioning.
 I checked types when inputting data into the algorithm generated by Spec to Algorithm.
 I found the label in a position, checked if it was the same as that of the data, and then checked if the item’s contents matched the variables in the recursive structure.
 This data wasn’t labelled, and the recursive structure needed to parse it, so data within the item was checked to be of the correct type.
 Recursive structures with repeating patterns found repeating characters, including variable values by default, so there was little chance of error.
 The salesperson converted complex terms’ types, order, and brackets into other terms useful for recursive find and replace.
 I found the unique variables for single characters.
 First, I found that they were atoms.
 Second, I found that they were the same character, so they had the same variable.
 If there was an “a” (a string) and an ‘a’ (an atom), then these had the same unique variable but were type-checked separately and could be outputted as a string or atom.
 The salesperson found the expanded code easier to understand and edit.
 Spec to Algorithm could be used repeatedly to apply an operation until the last two results were the same, such as applying a pattern matching transformation within subterm with address.
 I changed two brackets to one to remove double brackets or removed or recorded labels from terms.
 I expanded the code to store and move parts of the input to output.
 I moved as much of the data in groups as possible to save time.
 The salesperson took advantage of the constant “1” and output it in various formats.
 I found the constants for single characters.
 First, I found which repeating variables recurred across specs and were constants.
 The two strings checked to be strings fell into this category and were constants.
 If there was a “b” (a string) and a ‘b’ (an atom), then these were constants, even though they were different types of the same character and could be outputted as an atom or string.
 The salesperson used Spec to Algorithm to convert strings, atoms, numbers and compounds to have parts in the opposite order or to change words to the plural.
 The only type necessary in num1(num 1, num 2) is num1 to check when putting data into recursive structures, where unique variables and constants are found from 1, 2 and variables and don’t require types.
 After converting input to a form with type labels, all the terminals (strings, atoms, numbers and compounds) were represented as one-character strings.
 I changed Spec to Algorithm to find these terminals with subterm with address.
 The salesperson used Spec to Algorithm to finish code in Lucian CI/CD and Lucian CI/CD to refine damaged or unfinished code repaired with Combination Algorithm Writer (CAW).
 I grouped items by type to facilitate verification and parsing.
 In addition to checking that items met a recursive specification, I checked they had the correct type (whether they were part of a term or a string of one-character strings, in which case they were all strings).
 It is worthwhile to differentiate between the recursive structures that the data and data-as-variables are converted into that have types labels and the new data that is input into the generated algorithm that is a term typeless item, which means data can be type-checked, and the form checked to have the same recursive, bracketing and order of structure as the algorithm.
 I increased the quality by writing the expanded predicates that increased productivity and confidence in commerce.
 The salesperson developed sorting, data structure, dynamic programming, game theory, graph, machine learning, mathematical, optimisation, search, sorting and string manipulation algorithms with Spec to Algorithm.
 I grouped items by type (by substituting data into recursive structures) to output collections of variables as part of variable values with specific types.
 After checking them, it didn’t matter what the input types were, but Spec to Algorithm used the types of the output recursive structure to render the output.
 For example, if the input contained A= “a” and B=2 and the output contained C = atom(A, B), then C = a2.
 If C were part of a term, it would be outputted as part of it.
New Sales 7
 The salesperson negated the necessity of unique variables in Spec to Algorithm (S2A) because finding constants was sufficient.
 I used S2A as a simple framework to find high-quality thoughts (simple versions of my algorithms that could be assessed and form customer thoughts).
 Customers were encouraged to the thoughts, which worked as mediators of sales and education, meeting professional requirements and earning high distinctions.
 Employees could dip into the database of thoughts to test themselves and add new research to help with their careers and aims.
 S2A helped rapidly generate algorithms from simple specs, helping mind-reading to find answers more quickly.
 The salesperson converted the string containing the term to the term.
 I wrote a language parser using S2A.
 In this, sentence words were list items parsed by the parser.
 S2A generated the algorithm by finding recursive structures for the grammar, skipping over finding recursive structures for words unless adding or removing a prefix or suffix or producing output from words-as-text-games, and the parser inputted data into this recursive structure, mapped input in this recursive structure to output, then rendered the output.
 The parser appended items together to output.
 The parser converted strings to lists.
 The salesperson for the logical/functional programming language wondered why there are multiple clauses in predicates if they can be merged into one, and they should only be separated if there is a CAW command in a clause with multiple outputs (which are possibly unnecessary).
 I wrote an interpreter with S2A.
 I computed the sum by taking the two arguments and first adding them.
 The predicate failed if the output is a value and it is not the result, or if it is a variable, finding the variable and its value in the binding table, confirming that it is the result, or failing otherwise, and if it is not in the bindings table, then adding it with the variable name.
 A CAW operation separates each set of S2A matches, and then the algorithm returns to the start of the S2A/CAW cycle.
 The interpreter could convert a list of math commands and form a function, only calculating the necessary operations.
 The salesperson  S2A merged specs with the same and different recursive shapes into a predicate.
 It formed a decision tree for the predicate with these clauses, forming output based on input with this decision tree.
 It is similar to Prolog in that this predicate is like clauses with multiple choices and outputs, with a single set of possible outputs for the input, which may have different forms.
 I omitted an unnecessary output in the CAW output, deleting singletons in the CAW predicate until finished.
 Removing the extra variable in a copy of the predicate, even if used elsewhere, was better to make the algorithm more efficient.
 The salesperson replaced "(" and ")" in the compound a(A) with "{" and "}".
 I wrote Combination Algorithm Writer (CAW) in Spec to Algorithm.
 I found a smaller search space of one or two commands with arguments from the inputs or previous outputs.
 These had the types of these variables.
 Given 1,2 and the required result 2, I tried C is A*B because 2 is a number and taking 1 and 2, checking that 1 and 2 are numbers, with no brackets and not any other constants, giving the result 1*2, which I could label and later calculate and verify to equal 2, meaning the inductive rule is *.
 In these examples, CAW is used to make non-pattern-matching computations, such as + and type verification, and S2A could perform if-then, member and append.
 The salesperson distilled data from a list and combined lists using S2A.
 CAW chose arguments from inputs and previous outputs by adding new outputs to a list whenever it found them and selecting a member of this list (to match an interim predicate spec), assuming it stops after finding the first instance.
 It chooses the same number of variables as arguments using findall with get_item_n (requiring CAW and lists of a certain length and requiring S2A and lists, or computes get_item_n as an S2A computation and chooses variables).
 Findall loops through items and processes them, found by S2A using lists and the append (:) operator, for example, given A=[1,2,3], uses a predicate (just as CAW would) that finds A=[B|C], or B=1, or C=[2,3], finds D is B+1 = 1+1 = 2 with CAW and appends this to the results, giving Results:D.
 This process (predicate) is repeated until findall is complete.
 To save time when scanning the CAW libraries, the salesperson used findall as a CAW predicate with other CAW library predicates inserted (as a decision tree).
 I also used (:) for string_concat, which is relevant to strings in S2A.
 I could represent a series of string concatenations with (:).
 Recursion, a single choice between list decomposition, foldr, maplist or list decomposition without wrapping the item to append, was efficient but took time to check for, especially with choosing arguments, so it may be left out of S2A with lists and these commands such as 2 in 1+2=3 being left as 1+2 to calculate later.
 Predicates can be individually drafted using S2A, and recursion, lists, etc.
, can be manually inserted later.
 CAW could do this but would need the most frequently used functions to try first for better performance.
 The salesperson breasoned out the objects by thinking of them.
 I wrote Text to Breasonings with Spec to Algorithm.
 Text to Breasonings converted the text to a list of objects and then to a list of breasonings (x, y, and z dimensions).
 CAW used intermediate specs to downcase the file, split on non-alphabetic characters, and find correspondences with objects and then with breasonings.
 An absurd reduction might convert a word straight to (an object name and) its breasonings in S2A.
 The salesperson inspired the customer to automate laborious aspects of artistry with Mind Reader.
 I wrote Mind Reader with Spec to Algorithm.
 Mind Reader measures the time a person takes to breason out a particular thought in a specific time to mind-read it.
 Text to Breasonings breasoned out a 250 breasoning text on a question's possible answer, timing it.
 CAW eliminated outliers from the mind-reading signal by using the interquartile range.
 Students could program Mind Reader, inspire confidence using Spec to Algorithm (using a shorter customised dictionary), and explore music, art, essays, and programming.
 The salesperson wrote a compiler optimisation that didn't run code.
 Spec to Algorithm rivalled algorithm-writing chatbots by separating S2A with a short CAW dictionary and CAW with a single algorithm-at-a-time dictionary, matching the types of the user query.
 S2A was a fast program finder in which [calculate,[1+2]] could be transformed into 3 using subterm with address and "is".
 Similarly, string_concat, append, foldr, if-then (using nd), and other CAW commands could be computed afterwards.
 A fast CAW variant that used types with #= formulas (for example, f(A, A#+1)) could be used instead of running code, improving performance.
 The salesperson supported the simulation with fast computers.
 The type formulas sometimes included CAW commands, so they were indexed by characters that always appeared first and second and reordered with more straightforward arguments first.
 The system became very fast and could match simulants' thoughts, enabling a simulation.
 The people just visited the other dimension.
 Invisibility worked, but body replacement medicine required specialist knowledge of the body and medicine was teleportation-based with expert knowledge.
 The salesperson wrote State Saving Interpreter (SSI) using Spec to Algorithm.
 SSI exhausted choice points in findall, which collected results from "member" and a computation.
 S2A computed [2,3] from [1,2] by repeating the computation A#+1 for A on the first list of items.
 S2A ran Mini CAW to find A#+1 from the data, which S2A used to render the result.
 Recursion is achieved by CAW by repeatedly finding the relation and checking for previous relations used in the algorithm, specifically in the list.
 The salesperson supported infinite levels in "string to list".
 In addition to testing for the need for previous relations, CAW added to or used parts of previous relations.
 It inserted constants, unique or same variables, changed the order of arguments, used arguments from different sources or changed the argument's bracketed form.
 The predicate was the same as that used to find CAW command arguments and was similar to the predicate used to find the recursive structure and formula of data.
 Types from different parts of the algorithm could be reused, including references to sets of constants or a certain number of repeats in recursive structures.
 The salesperson became interested in creating a time machine using an algorithm generator.
 I wrote Time Machine and Immortality with Spec to Algorithm.
 Time Machine breasoned out 16k breasonings for time travel.
 Immortality, part of the Daily Regimen repository, breasoned out 16k breasonings for meditation and body replacement in the (future and) present using BAG.
 BAG found new pairs of words AD to construct sentences from, from neighbouring pairs of words AB, CB and CD.
 S2A found these word pairs from the sentences and constructed the new sentences, which contained lateral and interesting different meanings that exhausted the possible connections in a text.
 The salesperson claimed that Lucian CI/CD could use Mini CAW to "trun" (sic) (simulate running code with types) by finding the code's types and testing that code worked for better performance, first using S2A to optimise it.
 I wrote Lucian CI/CD using S2A.
 Lucian CI/CD found dependencies in algorithms, combinations of lines in sets of predicates taken from the dependencies and tested for the simplest combinations.
 S2A finds dependencies, the level number of the predicate inseparable from predicates they are in cycles with using depth-first search.
 Cycles are [1,2] in [r,[1,[r,[2]]]] given [1,2,2,1,2,2].
 Predicates are in cycles between a predicate that calls a predicate above them, and nested cycles cancel in favour of the most extensive cycle.
 The salesperson stated that Lucian CI/CD uses S2A to find the combinations of lines of code (not changing their order) by finding all combinations of on/off for lines and rendering the sets of code.
 S2A uses CAW to generate these possibilities using a recursive algorithm.
 For example, two lines generate [[on, on],[on, off],[off, on],[off, off]], appending on or off to lists of previous possibilities in S2A and CAW and recursively process the list using CAW.
 Then, it renders the code using CAW, finding correspondences from the original list of lines and the on switch.
 For example, [on, off] renders [a] from [a,b] by using a correspondence algorithm from CAW.
 The salesperson avoided limiting the length resolution or imposing a time limit to "try", instead allowing a length resolution for the best results given the optimisations.
 I optimised the "try" predicate that found recursive structures in Spec to Algorithm by reusing computations and reducing data length by identifying candidates for recursive structures.
 These optimisations reduced the bottleneck to "try" and allowed for more extended and complex data and unique problem-solving approaches.
 Students can save and automatically include their best predicates in algorithms when needed.
 The algorithm can use their problem-solving techniques and remind them of their best techniques, such as tabling, negative result tabling and reducing candidate numbers with heuristics.
 The salesperson learnt from the results of previous queries.
 S2A recognised patterns that were parts of previously recognised patterns, appending their results and saving time.
 For example:
try([4,1,2,3,2,3,1,2,3,2,3,5,2,2],A).
A = [4,[r,[1,[r,[2,3]]]],5,[r,[2]]]
try([4,1,2,3,2,3,1,2,3,2,3,5,2,2,3,3],A).
A = [4,[r,[1,[r,[2,3]]]],5,[r,[2]],[r,[3]]]
 The salesperson saved possible patterns and their results to disk.
 The algorithm also grouped recursive patterns, for example:
try([[r,[1]],[r,[1]]],A).
A = [[r, [[r, [1]]]]]
This result could be simplified to:
A = [[r, [1]]]
This technique saves time by grouping results from appended queries.
 The salesperson stored and checked negative S2A "try" table patterns that failed.
 I used tabling (saving results of previous computations) to speed up finding answers in "try" in S2A.
 I saved the pattern and the result, including previous times the algorithm was run or data in the text file in the table.
 I saved the entry if the pattern did not already have a result.
 I checked if a previous pattern matched a query when using the table.
 To save time, The salesperson only worked on "try" candidates with repeating values.
 To shorten the computation, I reduced the data length in "try" in S2A by splitting the data into smaller lengths with repeating items.
 A segment with a repeating item may have "1" at the start and again before the middle of the list, for example [1,0,0,1,0,0,0].
 This heuristic prevented unnecessary tests to find whether a recursive structure existed, and the results could be tabled.
 I displayed a progress percentage for long computations to encourage users to process data for one predicate at a time to shorten data length.
 The list of candidates was reduced from the combinations of sublists.
 I optimised "try" in S2A by finding the limits of possible recursive structures from starting points when processing the data.
 I did this by starting from the start and finding candidate sequences of any length, then starting from the second item and repeating.
 I checked whether these sequences contained recursive structures or had a repeating item.
 This optimisation markedly reduced the length of the combinations of sublists, reducing computation time.
 The salesperson used CAW to develop a computer by converting S2A/CAW specs to processor, operating system and interpreter algorithms.
 I applied the "try" optimisations to CAW.
 I searched for patterns in specs to find algorithms, used tabling and heuristics such as types or pattern-matching to reduce the search space, and imagined algorithms that combined subterm with address with a state machine by simulating a computer to contain systems, helping societies develop computers, educating individuals and powering individual experience in a quantum simulation.
 The salesperson found lists or results of nested functions in CAW.
 I optimised CAW by searching for patterns in specs to find algorithms.
 For example, given [1,2,3] and [2,3,4], I found maplist(plus (1), [1,2,3], [2,3,4]).
 Or, given [1,2,3,4] and 24, I found foldr(multiply, [1,2,3,4], 1, 24).
 These patterns, or, in the former case, a formula, could be recognised in adjacent data to find the formula more quickly.
 The salesperson inserted and checked negative (failing) CAW table entries.
 I optimised CAW using tabling by recording formulas that had or contributed to specific results.
 These may be maplist, foldr or elementary formulas.
 I inserted table entries if they didn't exist, possibly offering multiple solutions to the user depending on their preferred solution or ones with better performance.
 When using the table, I checked if an entry or its formula matched the spec, for example, a pattern, type or formula.
 The salesperson used intermediate specs for verification before removing them.
 I reduced the data length of inputted specs in CAW using heuristics such as types or pattern-matching.
 I recognised patterns in specs bottom-up or top-down, replacing the patterns with symbols and more quickly finding an algorithm to meet the spec.
 For example, I recognised and found code for a spec that matched that of append.
 I verified and removed unneeded specs that weren't in the overall spec or didn't elegantly fit into the overall spec.
 The salesperson wrote program finders for various problem-solving tasks, with customisable options and the possibility of use by a chatbot.
 I used patterns to more quickly convert specs to algorithms.
 These patterns might link [1,2,3,4] and 24 to foldr(multiply, [1,2,3,4], 1, 24), other common inductive formula patterns or similar with algorithms and variables.
 For example, 
A=[1,2,3],B=[2,3,4],D=[3],intersection(A,B,C),subtract(C,D,E).
A = [1, 2, 3],
B = [2, 3, 4],
C = [2, 3],
This computation could be rewritten and recognised using the following code.
A=[A1,A2,A3],B=[B2,B3,B4],D=[D3],intersection(A,B,C),subtract(C,D,E).
A = [A1, A2, A3],
B = [A2, A3, A4],
D = [A3],
C = [A2, A3],
E = [A2].
This form differs from the Prolog output but can match specs to formulas.
 The salesperson inserted formulas between the angular brackets in the spec.
 I optimised CAW by recognising patterns in the spec so that I could write algorithms.
 For example, CAW may recognise a program in the data.
 CAW requires program finders to optimise, minimise, and simplify code.
 I inserted variables in specs using the <V> format to prevent needing two specs to recognise variables.
 The salesperson collected and responded to code with variables in the chat.
 CAW matched the pattern of previous results, finding the best code to use.
 Alternatively, CAW found the correct combinations of commands.
 The algorithm imagines the middle part by thinking what it would like, such as appropriate preferred parts (evoking Artificial General Intelligence or AGI by being itself).
 The format, length and specifications of the chat are as requested.
 The salesperson researched the frontier of progress in a field.
 CAW selected the organic, mind-read predicates imagined to be helpful.
 The predicates were labelled organic because they were what the user was querying given a range of factors (where their questions needed to be answered).
 They were found out ahead of time using mind-reading and increased and were vetted against premium standards.
 The predicates were mind-read with consent, where employees selected predicates based on their problem-solving style, such as whether they aimed for mathematical, matrix-related or other methods to find a predicate such as a part-of-speech cloze exercise to identify the verb.
 The predicate was written using a creative problem-solving approach, such as writing the data and types, drawing a diagram or using a tool to find a viable method from their previous work.
 The salesperson breasoned out their latest work with the project in mind.
 I wrote "5 As" (five) specific algorithms for a new customer.
 I wrote a main algorithm with two or three "detail algorithms".
 They each expanded further on a research direction.
 I collected key terms and found clusters of ideas from the algorithms and philosophy.
 I wrote algorithms on these key terms by writing to a specification.
 The salesperson designed an approach to handle new input strings by combining them with the recursive structures derived from prior inputs.
 I didn't convert new input strings in S2A to recursive structures, substituting them into the recursive structure found from the old input used to generate the algorithm.
 This technique processed the new data regarding the recursive structure of the old data, verifying the new data's pattern in the old data and producing the output in terms of the new input.
 Doing so ensured that the new inputs adhered to the same structural patterns as the last inputs, maintaining consistency in the output generation process.
 This approach managed a correct and coherent interpretation of new information, taking advantage of the entrenched recursive framework.
 The salesperson checked keywords, reading level, impactful brands, and idioms when writing a journal article.
 University is written as Vocational Education with a specific reading level and subject matter.
 I wrote the skills for the assignments with performance criteria and elements in stepped progression.
 For example, these skills, in understanding specific computer science commands, could be used to solve practical or theoretical problems.
 The choice of material was relevant to the industry and helped build confidence in skills and ways of thinking to help use the degree.
 The salesperson asked better questions for better results in mind-reading.
 I wrote a practicum with high distinctions, such as Vocational Education, with a specific reading level.
 I wrote a Specifications neuronet that contained original and necessary specifications for algorithms given nothing that, like CAW, uncovered research conclusions or worked behind private company doors.
 It produced AGI by rewriting or editing algorithms cognitively using subterm with address or reverse in Lucian CI/CD.
 This higher form of optimisation, focusing on the idea rather than the implementation, was crucial in approaching human mind-reading.
 The salesperson found more elaborate code, including verification or comparison of lists with CAW.
 A student treats pedagogical algorithms and projects as "enough simple things".
 Enough, simple algorithms support high distinctions.
 Similarly, predicates of projects should amount to enough simple predicates for these high distinctions.
 A project, a collection of or a more significant or noteworthy algorithm, involves more debugging and computational synthesis work and can outperform many smaller algorithms.
 The salesperson stated that all 80 breasonings should be determined by Vocational Education with a specific reading level.
 I wrote break-reasonings or reasonings broken into those from different departments.
 These processes were the top-level summaries of argument maps.
 For example, different perspectives on language to ultra-optimise an algorithm and documentation to explain an assembly language problem in words are connected in a pipeline.
 Recursively simplifying an algorithm in machine language may lead to writing more precise source code by writing using better-performing commands, using a coding style that enables the assembly interpreter to vectorise or act on whole arrays at once or include functions in the function body, identifying bottlenecks evident from assembly code, using profilers to pinpoint a needed optimisation, making minor optimisations with significant performance gains, capitalising on a greater understanding of CPU architecture, including registers, pipelines, and instruction sets, better knowledge of co-processing, a better view of optimisation and refinement.
 The salesperson optimised the recursive structure finder in Spec to Algorithm.
 I used S2A with a maximum of 10-item long lists or strings for speedy algorithm finding.
 I broke lists or strings into commands, sentences or other units that could be recombined to form further recursive structures.
 I achieved this using grammars or another method.
 I chose a delimiter such as a comma or a full stop by working out if the data was natural language (a collection of words with commas and quotes) or an algorithm (C or Prolog code).
 The salesperson did cosmology and education with meditation.
 Lecturers leant towards new classloads of high distinctions.
 They calculated how many years the combinations and how many items per combination in a text with a specific length could support them.
 They wrote a new text for freshness and ongoing requirements.
 They wrote for 15 minutes daily and thought of x, y  and z.
 The salesperson processed as many breasonings as the student.
 I subsidised 4*50 high distinctions in business to one high distinction.
 This work covered the sale, and another high distinction covered the high distinction.
 Instead of one high distinction, they were fives at the maximum.
 This process relied on maintaining a good grasp of modifications to a complete set of 4*50 high distinctions.
 The salesperson spiritually ran the finished algorithm with high distinctions or relied on a high distinction.
 I wrote algorithms with short code, sometimes a few lines long, although some predicates were more prolonged and processed more data.
 These longer predicates, like projects, were more heavily weighted for reward.
 They could cope with more cases and possible input combinations with more lines.
 Novel or innovative optimisations to these predicates increased their value.
 The salesperson stated that the horticulturist discovered the ideas.
 The Academy's internal politician was given systems and pleasant ways of dealing with matters.
 This person was a board member who understood the texts' sliders.
 I exited and smelled the roses instead.
 I processed the table's values, only the secondary level once it was processed.
 The salesperson predicted relevant ideas by completing more tasks.
 I wrote as I went.
 Living up to an ideal, I finished each idea as it was thought of.
 The neuronet accounted for this idea's significance among the other ideas.
 An algorithm summarised the main implications of the concept and helped group it with different ideas.
 The salesperson engaged with mind-reading verification and CI/CD systems for maintenance.
 I coded as I went.
 I captured ideas, ways of thinking, options, and games as they appeared, along with any specifications and links to previous ideas and sources.
 The source was the inspiration, an idea about an earlier idea.
 It helped link the concept to existing philosophy, algorithms, and analysis to review the work and find the best methods.
 Ideas went through the stages of the waterflow model, from requirements, analysis, system design, implementation, testing, deployment and maintenance.
 The salesperson completed arguments for the positive function of each body system.
 The academy wrote History and Philosophy of Science research about medicine, including how to prevent medical problems with the quantum box.
 History and Philosophy of Science made observations about the life and science of the scientist, connecting and analysing reasons.
 The arguments connected algorithms to general arguments for each book, such as writing for immortality, preventing headaches with the quantum box and concentrating on computer science in education, meditation, and medicine.
 The salesperson tested Spec to Algorithm.
 I wrote up to 250 S2A test cases about parsing, abstract syntax trees, translation, debugging and optimisation.
 For example, I parsed "C is A+B" to [[n,+],[[v,a],[v,b],[v,c]]].
 In addition, I produced the abstract syntax tree from [[n, assign],[[v,c],[[n,+],[[v,a],[v,b]]]]] from "C is A+B".
 I translated [[n,-],[[v,a],[v,b],[v,c]]] to "C is A-B".
 The salesperson corrected the code with variables using S2A.
 I debugged [1,1,2] to the correct code "C is A+B".
 Alternatively, I debugged [[n,=],[[v,a],[v,b],[v,c]]] to [[n,+],[[v,a],[v,b],[v,c]]].
 I optimised the code [[[n,+],[[v,a],[v,b],[v,c]]],[[n,=],[[v,c],[v,d]]]] to [[n,+],[[v,a],[v,b],[v,d]]].
 I optimised the code [[[n,=],[[v,a],[v,b]]],[[n,=],[[v,b],[v,c]]]] to [[n,=],[[v,a],[v,c]]].
 The salesperson used a variety of techniques to optimise code.
 I included a Lucian CI/CD switch statement to test possibilities.
 I tested between sets of statements, finding the algorithm's most straightforward working combination of statements.
 This feature more quickly tested between and selected correct statements in switch statements, producing the working code according to test data.
 I automatically found suitable candidates for switch statements in algorithm comments.
 The salesperson inserted nested checkpoint statements or let the algorithm reselect the region to find code.
 In addition to switch statements, I added checkpoints to Lucian CI/CD that connected variables if there were no statements in the switch option as part of the switch.
 These options could be specified as generative fill checkpoints by themselves, and possible types, brackets or other code could be inserted here by the algorithm.
 By default, these generative fill regions were deleted or optimised.
 In addition, the user can specify the length, number of predicates, logical structures, or type of code in the generative fill.
 The salesperson helped others live longer.
 I saved others' lives using mind-reading if they were going to morally end by breasoning out a high distinction in the morning before the event.
 I kept a spare high distinction unbreasoned until the next one was ready.
 I used it if necessary.
 I kept a backlog of high distinctions for each day a high distinction was not produced, saving effort by only breasoning out high distinctions for education assignments.
 The salesperson used the interquartile range (IQR) to eliminate outliers for a component.
 I augmented Principal Component Analysis (PCA) for decision trees by localising eigenvalues and eigenvectors to local nested pairs of variables.
 These pairs of variables were correlated.
 I used statistics (possibly regression) to find correlations in the data.
 I paired each combination of variables to find the correlation coefficients, PCA and the coefficients to find the most robust correlations and entered the data in a decision tree.
 The salesperson used their knowledge to form a decision tree in Spec to Algorithm (S2A) (see Immortality 36.
 I found the decision tree by splitting by the most extensive sets of values for variables and continuing to split until no more splits were available.
 I found the relevant domain and analysed the key terms, forming a decision tree from their correlations.
 I pressed a button to find the answer.
 The decision tree was a fast way to record and traverse relationships in S2A.
 The salesperson maximised their development time.
 I optimised code generation and natural language processing to S2A from the reasoning engine for speed and accuracy.
 Humans who surpassed robots in clarity of thought were surpassed by machine reliability at running non-neural algorithms.
 A robot could assist scientists, artists, or computer engineers.
 I used accurate computational, mathematical, and physical reasoning to build a Prolog computer.
 The salesperson complemented scholarly with artistic activity for a healthy balance and better function.
 I explained to the writer that I devoted time to coding, writing and music, where I coded original or creative algorithms and wrote on pedagogy, meditation and humanities, leading to business because I was a spiritual realist who programmed spiritual ideas for real-world gains.
 I wrote music that I attributed to my algorithms, using algorithms I had written to leave my ideas' complexity and reconnect to solutions in them.
 It was a form of stress relief and art that allowed me to explore my life and science creatively.
 This meditation inspired further philosophy through prayer, often giving rise to the best possible features and revisions.
 The salesperson claimed S2A could be used in a manual neuronet.
 Instead of creating a decision tree with PCA, I gave a decision tree to a neuronet.
 Alternatively, I could directly run the decision tree to find the correct result.
 I experimented with mind-reading thoughts, sentences, and "tens" to describe complicated connections in recursive algorithm writing with regressive neuronets.
 This premise assumed more data was required to improve the accuracy of neuronets; otherwise, a superior technique to deal with recursion and mathematics or manual algorithms was needed.
 The salesperson designed the physical simulation from quantum particles up, with practical uses for machines that control quantum particles.
 The Physical simulation ran CAW to find time travel, teleportation, quantum computing, quantum gravity, space travel and medicine.
 It achieved this by finding combinations of particles to find the correct components to help people to a better quality of life by constructing these configurations.
 It did this by using tricks, such as teleportation and sound operations for medicine, space and time travel using quantum teleportation, quantum computers (for speed and teleportation) for the simulation, medicine and teleportation, and robots to carry out physical testing.
 In this, 4*50 As is required to make teleportation work, which is a staple of research and is why humans are included.
 The salesperson claimed that already discovering the quantum computer, based on a quantum simulation of S2A and mind-reading, was easy, another property of the universe and that a spiritual neuronet could complete tasks quickly.
 Transportation was enabled by 4*50 As.
 It was an inherent property of the universe.
 The fast computers were enough to transport or simulate (with images) the world and its dimensions, which could also be caused and closed.
 I took control over the parts that could go wrong, such as humans failing to write pedagogy.
 I automated it by querying myself with algorithms and running meditation software by first asking using mind-reading.
 The salesperson saved lives and sold products using mind-reading.
 I increased the accuracy of mind-reading by accrediting myself in retail therapy and breasoning out 32k breasonings before using detailed mind-reading.
 I optimised the detailed mind reader to use the shorter decision tree algorithm.
 The sounds, in conjunction with simulated implants, enabled teleportation surgery.
 Movie quality 32k breasonings were used to interact with each level of reality, from subatomic particles to heads of state in surgery.
 The salesperson planned to connect implants to the body.
 I affirmed that I joined the new parts together.
 I removed unwanted cells and implanted copies of new ones from the old body.
 I checked that the patient was alright afterwards.
 For external appearance in body replacement, I kept hair growing from the new body and kept the rest of the body with the old brain, new thoughts and mind reading to be the main person to their thoughts.
 The salesperson naturally healed the person in the simulation, which was controlled in the future.
 I installed the neural circuit from the new brain in the old brain.
 Instead of brain surgery and teleportation, I mind-read the old body until it was with it over the latest thoughts, turning off unsureness.
 I removed the old neural circuits, installed the new ones and then removed the new circuits just after going to sleep.
 In the morning, the computer reminded them of their thoughts or implanted artificial neurons, possible with the simulation.
 The salesperson enjoyed the quality of life from thousands of years of technology.
 Instead of p.
 59, the computer reminded/implanted the person's thoughts before the initial surgery without needing night/morning surgery and reminding/implanting.
 Both stages were used, one to help them and the other to be more definite.
 In addition, the body needed its thoughts removed the first time and was reused using replication without worrying about what was happening to it.
 The body replacement process was simple because people were reduced to breasonings, and their consciousness was given thoughts.
 The salesperson instantly processed simulation thoughts using a quantum computer and other computations.
 I wrote an S2A PCA decision tree that aimed to perform faster and more accurately than regression.
 I deleted duplicate points, normalised data, and unused duplicate variables.
 As previously mentioned, I found a decision tree from sets of binary switches without PCA.
 The data for decision trees came from local domains and keywords.
 The later simulation protected the salesperson.
 I found the decision tree.
 I stopped with the first decision tree that gave the solution, merged the decision trees or used a different decision tree for each central first or later symbol.
 I found all the unique solutions unless otherwise specified.
 Creativity was expressed as working out the solution resulting from the prompt.
 The salesperson entered new data to solve a known or new problem with the decision tree.
 In the more accurate, decision tree-based neuronet, hallucinations were not a problem and finding new relationships required enough data.
 The decision tree finds relations and output for new data.
 It doesn't require training, and binary or linear relationships are found based on normalised PCA data.
 In the latter case, the decision tree might have X=X1 and Y=X1+1 as a relationship in response to a prompt to add one to a number.
 The salesperson found relationships from saved decision trees, designed to work optimally, and inserted functions from decision trees given patterns.
 The decision tree would find the X1+1 relationship from an existing decision tree that outputs it given [[1,1,2],[1,2,3],[1,3,4]].
 Saving this relationship saved time and allowed new data to be input.
 I caught up with my ideas by specifying and writing algorithms using S2A and describing them.
 S2A sped up finding recursive structures, base cases (lists in decision trees) and formulas to match an algorithm effortlessly.
 The salesperson only followed the student, recommending to start again if there was a significant difference.
 I wrote a decision tree neuronet to find items or subparts of Spec to Algorithm (S2A) specs to apply formulas to to develop features.
 I took the specs apart and mind-read them individually.
 I went over each line with the specification scanner.
 I found them and made them separate predicates.
 The salesperson wrote the formula in S2A, mind-reading subformulas from the student, helping them to like correctness about the results of it or a neuronet, often finding formulas bottom-up or in the order the student feels comfortable, cutting off paths that don't align with the spec unless the spec needs to be revised.
 I tried each hypothesis of how to implement the feature.
 If no hypotheses appeared, I waited for them to come up with more.
 I had secretly solved it at first but waited a few days to tell them.
 For example, I identified the input and output for a feature.
 I modified the append predicate formula, written in a version of CAW, which is, in fact, a spec word processor, to perform data processing, which was simplified using S2A.
 The salesperson wrote specs in different languages and converted one language to another.
 I applied the possible change to the target or a similar position, testing if individual parts needed to be modified separately or nested changes made, then optimising it later.
 I made the changes to the algorithm as soon as possible.
 Where the student wanted to make them, I found apparent errors, inconsistencies and mathematical incongruities in specs, such as ambiguous duplicates, singletons and reused variables that may cause errors in the algorithm.
 I prevented them by continually minimising the algorithm and alerting the students of required changes.
 In addition, the professor's algorithm identified and suggested solutions to security and safety issues.
 Its third use was to print and format output and results uniformly.
 The salesperson said the algorithm sometimes found new things correctly but had difficulty making changes, so they devised algorithm processes to help instead.
 When adding features to a spec in S2A, I applied formulas to data structures rather than individual variables.
 Alternatively, I applied changes to item subparts.
 Each part, like CAW, could use the augmented algorithm.
 It required writing the professor algorithm in Pedagogy and using it as the mind-reading method.
 The salesperson was happy and good, asked nicely and got the job done.
 The neuronet was intelligent, remembering techniques such as control structures, specific predicate calls or optimisation techniques.
 It collected data from recording debugging sessions in the editor, mind-read data, or version control system commits.
 Mind-reading was done using concurrent or ahead-of-time algorithms.
 It was optimised using spiritual screenshots, taking two hours to render overnight or ahead of time if on the lecturer's computer, which wasn't necessary because it was already known.
 The salesperson applied their knowledge from the department to the problem.
 The neuronet retained knowledge about computer science.
 It could minimise algorithms, write decision trees and neuronets and other structures such as state machines, mathematical formulas and reused specialist predicates.
 It could behave as a program finder for S2A formulas, reducing the number of variables, where S2A formulas were efficient and could be reduced to C or assembly code and more quickly found recursive (foldr) formulas using CAW data.
 It avoided exiting from the base case of an assembly code loop instead of exiting through the levels because it was better designed.
 The salesperson captured feature switches using a switch condition and separate specs for new features with dependent features switched on if necessary, requiring more superficial data structures and features and possibly helping identify obsolete features.
 The neuronet contained simple algorithms that could be transformed into students' more complex ones.
 It included simple enough predicates with adequate features and versions with additional features, labelled with these features, where combinations of features could be switched on, or off using functional decomposition and modules, for example, the "|" symbol in the functionally decomposed predicate in the match predicate in List Prolog Interpreter can be switched off.
 They were functionally decomposed to switch these features on or off; for example, one predicate became two and could be merged using an optimiser on the compilation.
 In S2A, this can be achieved by using switches to optimise by splitting strings or lists depending on the need.
 The salesperson staged necessary features over several versions, sometimes removing or modifying unnecessary features.
 I used S2A with a neuronet to operate like the Combination Algorithm Writer (CAW) algorithm.
 This method was again a primary technique when using Mind Reader to help students debug.
 After entering specs or determining them from the screenshot, S2A, Mind Reader, and the neuronet found the algorithm.
 The student passed tests to see the code in their dreams.
 The salesperson wrote a high distinction about why he was interested in the student.
 If a similar spec was not in the database, I typed it in or mind-read myself to put things in holes to configure it, such as unique algorithms.
 The lecturer was a specialist in the student's techniques by collecting their techniques, mind-read, screenshots, and version commit neuronets and found the fully featured, optimised version of the methods and worked with the students on them.
 They could work out neuronets from single screenshots, where direct mind reading was too tricky and inaccurate.
 The lecturer studied History to develop images mind-reading professionally.
 The salesperson stayed in the simulation for safety, but their and the spacecraft's images were projected in space and at the destination, suggesting the ability to return instantly.
 I contributed to Physics knowledge about making lines in space straighter.
 I jumped between points in space.
 I smoothed lines in space travel.
 I avoided eddies or black hole-like remnants and places that were mind-read to be dangerous.
 The salesperson optimised the camera algorithm.
 I increased my knowledge about the simulation by discovering that objects from home are read (images scanned) ahead of schedule, movies and models are created, and effects in replicated objects are transported.
 If objects are peeled off, the algorithm also reads them ahead of schedule.
 This fact meant I could obtain screenshot clearance two days early for instant debugging at the time, as had sometimes happened.
 If there were many daily updates, they needed two hours plus an hour for clearance per screenshot.
 If the student gets tired and makes mistakes, the screenshots and the work are sometimes postponed.
 The salesperson designed a new chatbot with more extended, individual algorithms and switch features such as program finder access.
 I improved the chatbot algorithm with "Physics" book chapters as topics and connections as philosophy book chapters.
 I wrote books and used them to educate the chatbot.
 The chatbot gave references, explicitly asked if the user wanted to run algorithms and the time they would take and discussed individual approaches to PhDs and breasonings.
 I quickly contained breasonings inspired by Grammar Logic (GL) taking too long and used a chatbot to prompt comments on a separate, overarching theme.
 The salesperson decided to bulk breason out 16k breasonings and detailedly mind-read 250 algorithms and 250 breasonings using S2A per person per day instead of one high distinction to help complete the person's thoughts and adequately support them.
 I wrote a high distinction on the day or breasoning out a completed high distinction for a person before they might morally end, possibly using an algorithm, preventing them from ending in conjunction with meditation and being connected to the simulation via a simulant.
 I accessed a chatbot from VPS(s) involving the relevant costs and a way of paying to protect meditators.
 This process might involve some or all of the meditators.
 All were indebted to the person, were a joy to them and didn't appear to die.
 The salesperson discussed the algorithm structure and dependencies of features with the user.
 I aimed to help the chatbot write longer ten-breasonings-based algorithms.
 The chatbot chose against some breasoning and focused on more developed, relevant algorithms to the person's pathway.
 Possibly, to involve the person in the creation of the algorithm, the chatbot drew on mind-reading, repository, editing and neuronet data and walked through the decisions in writing the algorithm with the person's help, possibly using a mind-projected screen.
 Algorithms were both compact and had feature switches.
 They were developed with user interpretation of how a feature should be expressed.
 The salesperson also helped the person mind-list possible security holes using the professor's algorithm.
 The security tool made S2A the standard, preventing bugs apart from spec errors and malfunctioning code.
 Failures from input, APIs, and file accessing resulting in web page reports must be handled using type checking and error catching.
 Singletons in specs and undefined variables in spec output were caught.
 Code minimisation and CI/CD tools were also used to reduce the mistakes.
 The salesperson developed a commercial employee support system.
 In this system, 250 algorithms and arguments were the standard.
 The system used detailed mind-reading, where the algorithm broke down options into a decision tree for better results, such as a three-dimensional sound when composing music.
 I used bulk question-answering in the chatbot for speed.
 I completed 16k breasonings every business hour until midnight.
New Sales 8
 The salesperson sold the multidimensional simulation.
 I rendered parts of objects still falling in quantum gravity.
 The person visibly drank, digested, urinated, and excreted and experienced and observed gravity.
 There was a balance between being a sponge to foreign bodies and the body naturally healing in the simulation, where the simulation naturally teleported out foreign bodies and healed Parkinson's sufferers.
 The immortal led a healthy lifestyle and minimised taking risks.
 The salesperson stated the universe was like a Prolog image with asserted rules.
 I switched off computing gravity inside the body and objects, instead relying on nature in conjunction with observable and breasonable effects.
 The simulant was simulated, and the maximum possible noninvasive research was conducted.
 There was not enough ethical data on zero-gravity conditions on the body (which was too dangerous), scans couldn't account for physical models that didn't work (where the universe had particular contradictions), and the pre-existing technology was enough to rely on.
 An example of a contradiction was objects not continuing to fall after falling on the ground, which meant one could avoid stress with the help of technology.
 The salesperson found the simulation and did the work that way instead.
 I slid and lifted the objects under the effects of quantum gravity.
 When I pushed an object, it moved along the surface according to friction without stopping until it stopped or fell off.
 I lifted the object by picking it up, contracting my arm and finger muscles and moving it up, given the effect of weight, resistance and momentum.
 The person felt like the holodeck images were real because the body was projected through images of the settings, and sensations were protected to their senses.
 The salesperson projected breasonings at dimensions.
 Time could be simulated by projecting breasonings at times, and the person experienced the consciousness.
 This technique was in keeping with nature, and they enjoyed an increased quality of life from meditation and epistemology.
 I achieved the desired effect in the simulation by interacting with this model and accessing desired outcomes using subterm with address.
 I kept a diary of my thoughts and research.
 The salesperson explained that a higher state of consciousness led them to believe that the universe was there.
 I simulated objects' weight by moving them down, either pressing against an object or falling with gravity's constant.
 Their contents determined their weight.
 There may be magnetic or other technological forces.
 If no person touches the object, it is an image.
 The salesperson explained that it is natural for quantum gravity to cover the whole space, like a room.
 I threw the object in quantum gravity according to gravity, resistance, and how it was thrown.
 I was mindful of and turned off projectiles inside the spacecraft if they would cause harm.
 Innocent victims or people who had an accident would experience safety, while a would-be perpetrator might experience a block to acting or retaliation for having tried.
 They would be screened for correct conduct before flight and possibly refused boarding.
 The salesperson bounced the object in quantum gravity, observing it being dropped or thrown and rebounding from the floor or wall.
 With the other physical phenomena part of gravity, this property was necessary to create a spiritual spacecraft.
 In reality, spacecraft design and manufacturing had legal requirements.
 I could earn money and pay for engines for take-off and landing, in addition to the other necessary systems.
 A Labrador could control the navigation system, head to a planet, and meditators instantly return.
 The salesperson examined the effects of technologies noninvasively with object scans and wrote research articles, each meeting professional requirements.
 Gravity was turned on when no gravity or gravity was in the wrong direction, and the spacecraft had radiation-proof hulls.
 They avoided excessive radiation; the projected craft and crew wouldn't have experienced radiation if the mission had been simulated.
 I concluded time travel and teleportation, immortality, dimensions and the quantum computer, space travel, and immortality were impossible using universal projectors, and so were natural technologies.
 They were necessary for a high quality of life and could be examined and given high distinctions, which were required to use them.
 The salesperson found the right thickness for the spacecraft walls.
 Thicker-walled spacecraft prevented damage from inside and outside.
 The thick aluminium hull protected the spacecraft from damage from asteroids in the off-chance of a collision.
 If a crash occurred, the craft must return immediately for repair.
 In addition, thick walls protected the members from accidental damage by poking the wall and protected them from the unhabitable conditions of space.
 The salesperson developed an object scanner for Medicine that found sentences describing structures and comments.
 It could scan the appearance of 3D objects and medical objects.
 I mind-read sentences describing scans and answering questions about topics such as immunology.
 I backed this up with evidence.
 I asked about the person's problem, switched it off, checked the result, and asked how they were.
 The salesperson found relevant comments on essays with Mind Reader 2.
 Mind Reader 2 collected comments from the universe (an academic's child or a predetermined person) on mind-reading) sentences to understand them.
 I collected skills, objects, types, parts of speech, meanings, the sentence's meaning, and what algorithm the writing indicates.
 I checked the sentence and comment for accuracy, where the comment was the general form of the accepted answer.
 The comments may be spiritual forms of a neuronet to generate intelligent content.
 The salesperson found the source of the student's knowledge.
 To find the answer, I questioned Mind Reader 2's output (specifically) and checked the original sentence against Mind Reader 2's database.
 This database gave the meaning of words and was stream of consciousness.
 It doesn't provide interpretations, multiple answers or chatbot-style conversations.
 It couldn't bulk process input without a computer, control equipment or interface with other apps.
 The salesperson wrote and generated arguments and algorithms.
 It is sometimes enough to analyse if the characters in the first mind-read sentence are verified.
 This sentence is enough because the entire sentence should be self-explanatory.
 In the case that a mathematical proof's step needs to be clarified, Mind Reader 2 might explain the step.
 However, the source of students' knowledge is often checked for authenticity, as is the 16k breasoning argument about answers.
 The salesperson reassessed the spec to debug the algorithm.
 Mind Reader 2 is necessary for mind-reading Medicine sentences  (it includes warnings, possible non-monotonicities, and pointers left to check above or below it in the hierarchy or elsewhere).
 Alternatively, it found comments about Computer Science (if the speaker is sure or unsure, other formulas left and if they meant it is finished).
 It streamlines finding algorithms from sentences.
 It does this by expanding relevant details, asking for clarification and helping debug the algorithm.
 The salesperson imagined debugging from points that the programmer started from, using their ways of thinking, helping them to positive function.
 I reassessed the spec to debug the algorithm by reentering parts of the spec given the particular part of the text it referred to.
 Before this, I checked the predicate and spec line by finding this part of the spec.
 I found the list of debugging ways of thinking and used them.
 I considered the human style used to convert an S2A spec to code in predicate form.
 The salesperson put the features in the same place (as predicates) in Prolog.
 There was a third computer for miscellaneous human use on spacecraft when time travelling.
 The crew watched movies, played games, and interacted with simulations, communications and the Internet, which was live in flight.
 I enjoyed programming and writing philosophy, even walking on the holodeck.
 Crew and passengers could connect their computers to this computer and access the Internet.
 The salesperson instantly returned home after spiritually visiting the planet in the simulation.
 I rescued the lost craft in time and space, teleporting it home.
 The lost craft had an infinite battery that could be activated and deactivated using the quantum box, and it had kept in contact with base logs; it, its crew, or passengers could be mind-read to find them, or they automatically returned because they were in the simulation.
 In the last case, their location was in the simulation on the base planet, so they could quickly return home on a charged battery.
 Usually, such an event was made impossible by planning the legs of the journey, using a charged and operational primary battery and checking software with DevOps.
 The salesperson found each universe with a matching item, creating a link to it with 16k breasonings.
 I wrote five high distinctions for the differences between the universes.
 I summarised people's diverse opinions, such as that chickens lay green eggs to differentiate and travel between the universes.
 I found the necessary way to achieve the goal, completed it, and continued to experience the best set of possibilities.
 I transported items to and from universes with 16k breasoned algorithms and arguments with 250 understood 250 algorithms.
 The salesperson covered all necessary computations on the set of computers in the craft, not other dimensions.
 When travelling in space, I demonstrated an understanding of an algorithm with one, not 250, mind-read decision points.
 This technique was similar to quantum gravity, creating a universe and mind-reading.
 I mind-read or object-read the next leg of the journey on the primary computer, turning back if anything severe went wrong.
 In addition, I created a universe to perform surgery on the second or fourth auxiliary computer.
 The salesperson gained hurdle points for participating in Spec to Algorithm group work that helped build confidence in writing more complex algorithms, completing dependent parts of programming a robot and maintaining safety while writing decision tree data.
 I complemented the automation of S2A with recursion revision (or rewriting recursive parts as revision) and practicum writing (which students would do anyway or more of and need 50 high distinctions or a short thesis to help concentrate on advanced algorithms).
 After using S2A by writing it and necessary repositories as an assignment and writing one's dictionary predicates, these steps ensured that students remained in practice when writing S2A custom predicates and more ambitious projects that the academy aimed to prepare students to write.
 Students practised a high standard of ethics, writing original algorithms and citing and journalling sources to mindmap features from.
 They described the exact source of inspiration for a repository or feature, for example, that DevOps was required for future space travel, improving and maintaining repositories, that a recent algorithm influenced its depth-first search and that its find dependencies feature was worked out to be needed to properly integrate, build and test repositories bottom-up to speed up and make the end-to-end process more rigorous.
 The salesperson set up a meditation alarm to announce to write a high distinction to prevent one's death if necessary.
 If there were a seemingly dangerous close call, the system would immediately remind the meditator to stop what they were doing and write an 80-sentence-long high distinction.
 GL is much faster for people than sitting there thinking of inspiration or crossing sentences to words.
 For the five sentences about each of the 16 algorithm topics (80 sentences), I wrote a use (at the end), the algorithm description and three steps.
 An algorithm is any logical set of steps, and GL is excellent for helping think of them quickly.
 The salesperson earned a high distinction for being mentally healthy.
 I detected the false memory detector or argument breasoning logging tool to ensure I remembered to breason out life-sustaining algorithms when necessary.
 The system sent a message if an essential stage had not been completed in time and the due time left enough time to complete the breasoning.
 I detected when I forgot to complete a task such as enrolling in a course, earning, studying, doing a task by a deadline, interacting with someone, or taking urgent action.
 I improved my quality of life by detecting and correcting mistakes, making positive decisions, and refining needed plans.
 The salesperson simulated travelling the universe from their home.
 I used the quantum box to activate and deactivate space batteries with 16k algorithms.
 The size of the battery depended on the ship's size.
 The battery lasted a long time, and the amount of power it delivered depended on its size.
 If the quantum battery failed, then the backup battery was used.
 The battery-powered life supports computers, travel, and human needs.
 The salesperson found time-travel and manufactured batteries using robots.
 Like a photo-retouching algorithm, Algorithm Shop changed sentence specs and meanings.
 These meanings gave the sentences describing the full specifications for the sentence specs.
 For example, the sentence spec was written in List Prolog with expanded lowercase syntax (i.
 [[n,predicate_name],[[v,a1],[v,a2]]] instead of [predicate_name,[A1, A2]]) to include grammars rather than uppercase first letters in variable names for ease of reading, editing and later expansion.
 I found the interpreter in S2A and changed its design by editing the sentences' descriptions and explaining their reasons for doing so.
 The salesperson found the shortest possible algorithm for the critical task.
 I stated that sentence specs are more intuitive than data specs, but one shouldn’t become complacent and not practice writing data specs and algorithms.
 I converted sentences to data specs using large language models and mind reading.
 I did this by finding the mapping of the sentence to possible data, giving a suitable algorithm, and mind-reading or requesting additional design decisions.
 I reverse-engineered the neuronet, individually analysing relationships and pattern matching using rules, ranking, and numbering words.
 The salesperson found the natural expectation for writing and examination.
 I manipulated sentence specs by adding features or starting again.
 I gave a spec line referencing a new feature referring to other predicates.
 In addition, I removed unneeded features or simplified the design and backdated parts of the spec.
 The future computer barred users from continuing and asked them to reenter an algorithm if they made one mistake.
 The salesperson showed the proposed effects of the changes in real time.
 I stated that Algorithm Shop represents and changes the user’s first natural idea forms by copying the shapes and sentences about the algorithm in the person's memory.
 More data may come from different parts of the person's life and immediate surroundings.
 Algorithm Shop changes the user's idea forms by circling specs and prompting ideation about spinning or thinking of geometric relationships in the spec.
 I thought of the geometry of the text, the data structures and the objects they referred to.
 The salesperson found that quantum entanglement gates might have different behaviour or mechanism.
 I explained that a natural idea is the user’s intuition about how the algorithm will work.
 For example, an expression of a shape or nebulous (resolving) inspiration may be considered true to the idea.
 Algorithm Shop finds the elegant expression of the concept, explaining the years of research it has gone past with the advantages of decision points and finds a suitable component that makes the simple mechanism work.
 For example, a photon sends a signal up a boson ladder, object-reading its gate output, which is found using entanglement with up to 0.
7 accuracy for two variables and four possible lines of output from the gate, which is a logic gate.
 The salesperson entangled proton contents.
 I questioned whether bosons have on and off frequencies.
 I surmised that light is emitted by a quantum projector under simulation conditions.
 If there were more bosons or the mark was hit more accurately, the results would be more accurate.
 Hence, I suggested proton computers were more reliable than quantum computers.
 The salesperson used mind reading to observe subatomic particles and control a quantum computer.
 I increased my mind reading effectiveness, especially with single characters with neuronets and context coming from additional questions or innate comments on the text.
 This occurred after reading about a mind-reading chip with greater than 90% accuracy.
 I thought of ways to increase the effectiveness using software and additional considerations.
 I increased the accuracy to 100% with a neuronet and three passes and considered object-reading medical data for noninvasive, high-accuracy diagnoses and treatments.
 The salesperson found the most advanced technologies to simplify their life.
 I determined the types of bosons used in quantum computing.
 They were a photon (a boson) and another boson.
 The second boson is not necessarily a photon.
 The universe seemed more straightforward (when one found technologies).
 The salesperson found quantum properties of ancient Roman hairstyles.
  I threw forward the idea of hair integration of quantum particles.
 This raised the idea of quantum strings as mind-reading structures between them.
 I proposed quantum particles, including bosons, fermions and Higgs bosons arranged in fields of consciousness, like societies or pulse or code emitters, since the beginning of the universe.
 Certain quantum particles are human-like rather than bots, have more high distinctions at the start, and are interpreted.
Simulation 2
 The simulant looked up the result of foldr or foldr(B2=B1*A+1) if this formula had a decision tree where it relied on previous decision tree formulas, and CAW could generate more formulas.
 Spec to Algorithm (S2A) was an optimised interpreter version.
 It contained Prolog formulas that could more accurately calculate mathematical formulas than some neuronets.
 Decision trees required minimal preprocessing, breaking down patterns into symbols, prioritising them, and finding a sequence.
 Human S2A rule-entering guided the clarity standards and understandability of the answer by narrowing down the idea to a single, articulate point with expansions.
 The simulant found the recurring word, relevance of the point or value of the point in the answer in the pattern.
 Supervised learning to match chat history and question relevance to each sentence of an answer was achieved with S2A decision trees, including predicting categorical outcomes and continuous variables to ensure the words or underlying message was relevant.
 S2A decision trees could conduct statistical feature splitting, interaction, and importance analysis to find and prioritise pattern symbols within knowledge domains.
 The faster neuronets based on S2A  were appropriate for quantum computers, mind-read, breasoned algorithms with commerce accreditation and 16k breasonings, which was determined from transcending quantum particles.
 Also, spiritual image projects and simulation technologies such as time simulation, pressure, sensation, and connection through the body to images became available.
Strings to Grammar Song
 The musician shared a fascinating insight into crafting a film.
 They explained that a story is like music, and a film can contain songs that are mind-read from the mood of part of the overall song, or the original song can be the film’s theme song.
 In this case, they crafted a song deeply rooted in philosophy, serving as the perfect inspiration for a movie.
 The selection of the song was not random but driven by its unique blend of instruments, melody, harmony, and the story it evoked.
 The philosophy, they noted, was not just a random inspiration but a quantum one that the algorithm, which mind-read them, interpreted as the basis for music.
 This intriguing algorithmic philosophy often led to the creation of better songs.
 The musician grounded secondary songs on commercial “thereness” songs.
 The film’s cinematography perfectly shot scenes from the songs, interpreted based on their sound or inherent qualities.
 A trill was interpreted as coloured trail lights from flying cars in the air.
 Strings to Grammar, construed as a screenplay about synthesising time travel in the simulation, had a deep, important-sounding theme song containing a frenetic, high-pitched instrument.
 The movie poster was rendered from the waviness of time interpreted as a software box image.
 The musician stated that the story was high-stakes (meaning it was error-free) and philosophical.
 I wrote the story based on scenes from the music, appropriate for the music’s mood.
 It included a what-if scenario exploring an exciting and unusual set of circumstances.
 It contained an implicitly changing protagonist with aims and history and an opposing complex antagonist with their aims.
 The protagonist aims for particular goals for specific reasons with high stakes (correctness).
 The story has three acts, one each for build-up, meeting and resolution.
 With their innovative use of algorithmic suggestions or breasonings, the musician infused motivations with excitement.
 They propelled the plot through internal conflict (the protagonist’s internal struggles) and external conflict (external impediments the protagonist opposes to meet their aim).
 They opted for visual storytelling, using gestures, visuals, and meaning to convey responses, ensure memorable scenes, and aid in plot development or character revelation.
 They developed a theme and message for the audience to unpack.
 This theme was intricately woven throughout the story, influencing characters’ choices and plot events.
 The musician sensed mind reading could sense whether a conclusion was based on other findings in the text, which helped detect essay structure.
 I mind-read 1-150 hand breasonings, synthesising them in sets of ten, choosing the initial contention the breasonings were written about (or mind-funnelled one breasoning) to influence lighting, make-up or other film-making decisions.
 I mind-funnelled a breasoning by collecting and selecting from various choices.
 I wrote each scene to be exciting or crucial to the story, maintaining an engaging pace and timing, building anticipation and releasing it tactically to keep viewers enthusiastic.
 I struck a balance between original parts and familiar story elements.
 With their adept use of the combophil algorithm, the musician interpreted a philosophy on a topic.
 They replaced key terms with given extended configurations and abridged complex stories, such as preventing a time travel accident causing the end of the universe.
 They made creative choices using the combophil algorithm, influencing the script’s key points.
 They created a fine arts temporal montage with an implicit story.
 The philosopher in each department chose a general theme.
 Popology was responsible for writing the interpreter, while theology was in charge of writing the inductive engine.
 The musician had an extensive database of thoughts ready, which could be accessed using random, funnelled mind reading.
 I used combophil to influence the setting, character, story and other movie elements.
 The secret algorithm powered viewers in their droves.
 The algorithm’s song inspired unique visuals and sound.
 The algorithm was core in the accreditation agency, which supported at least fifty education academies.
 The musician aimed to educate students about immortality.
 I wrote characters’ motivations by mind-funnelling three “why” levels.
 If they needed inspiration, I included a philosophy at the start, for example, simplifying a more significant algorithm into a production line.
 I repeated this process for their history, which influenced their aims.
 For instance, they might dream of changing people’s lives because of a childhood inspiration.
 The musician wanted to see the faces while the actors were talking.
 I edited the movie using mind-reading, scoring whether a scene was interesting enough and contributed sufficiently to the storyline.
 I couldn’t change the strength of the mind-reading, but I could change the intelligence by using a decision tree to select from story possibilities, giving a smoother result without an empty feeling.
 I could colour grade using mind-reading and an algorithm and count to three between lines in editing.
 The musician was busy playing jack of all trades, producing the movie.
 I synthesised the characters’ top-level motivations with those of others.
 These motivations were spread across time and settings and made into the story.
 Each character had a secret or updated set of ten algorithms for a recurring character.
 These algorithms had done up movies explaining the algorithm and films relating to the movie, perhaps about helping with the movie production.
Text to Breasonings 3
 In Web Editor and Web Finder, the last file and its folder and those in dialogue boxes used were remembered across windows and devices.
 The Web Finder intelligently remembered regular tasks, such as running a command on (parts of text in files) in a particular folder and counted the breasonings as time passed.
 I could immediately find files by name or other properties, with autocomplete and group parts of selections, without moving the original files.
 Files could be undeleted or reverted.
 The Web Finder search function available from the menu saved previous searches.
 The calculator was an inspiration, suggesting transcendental topics for work.
 The calculator in the Web Finder menu saved results even if it was closed.
 I automatically organised my finances based on needs and plans and never touched them, spending all my time writing philosophy and computer science.
 I converted currency in the Web Editor menu field.
 I could chat with PFT and edit my code.
 To scroll and compare texts, I inserted a pane divider in State Saving Interpreter (SSI) windows.
 Web Editor preformatted shell scripts, Prolog files and documentation.
 Web Editor automatically saved permissions for shell scripts.
 I customised the Web Editor colour schemes.
 Web Editor displayed colouring of text for different types of files.
 I automatically found and ran queries in testing, realising that PFT could quickly finish most of the code, including subterms with address queries.
 I closed all the Web Editor documents with one command and displayed a warning before running unsaved code.
 The permanent thing was clicking on the smartphone’s home screen icon, which reopened closed windows in their previous state.
 I activated either Web Editor or Web Finder with a click.
Theatre Studies 1
 The actor became a director or other theatre professional.
 I produced creative algorithms that solved problems in a novel way or identified and solved new problems.
 Algorithms were portrayed using body tableaus, documentaries or flythroughs in theatre or film.
 I found ways to produce creative algorithms, innovation, the creative Professor and God algorithms and the relation of creativity to my philosophy.
 I found the algorithms and gained the confidence to act.
 The actor had no problems remembering lines.
 Factors influencing mind-reading, including those that increased its effectiveness, were having a Grammar Logic (GL) high distinction, 4*50 high distinctions and specific algorithms and arguments.
 GL, manual entry, or mind-reading could be used to develop a high distinction and reinforce mind-reading (without a loop in the mind-reading dependency).
 Breasoning out 4*50 high distinctions using Text-to-Breasonings met the professional requirement of finding thoughts using mind-reading.
 Writing human-written arguments and algorithms rather than an automated system ensured integrity, self-knowledge and progress in knowledge development and collection.
 The actor developed ideas each day, progressing towards their goal.
 I wrote arguments based on my previous arguments.
 First, I wrote arguments.
 To think of further arguments, I used my experience, previous arguments and combinations of previous arguments or words.
 I recorded these and breasoned them to perform better and help check the grammar.
 The actor researched, developed and lived inside a simulation or construction of reality.
 I wrote innovative algorithms using new Prolog techniques.
 The simulation encourages enforced invisibility in dimensions where everything is defined, including bots representing other people (based on the people but sometimes not represented to us as they are or are aware of us) and the settings of one's home.
 Some time travellers prefer real time travel-supporting times to cycle their lives through and travel back to the start before the planet's civilisation (like the universe) ends.
 The actor planned to scan the body with the object reader to explore and eventually find advanced medical knowledge by exploring all types of objects, their complete lifecycle (in various subjects) and an element identifier, where a similar technology could scan the universe for safe routes in space and similar planets.
 Simulating people as graphics prevents accidents, medical problems, and death.
 Instead, consciousness can be temporarily paused and time altered to steady people, avert accidents, and perform medical operations, sometimes back in time.
 At these times, they experience graphics, teleportation, and non-invasive surgery.
 Immortality is a combination of body replacement and the continuation of consciousness.
 The actor used Spec to Algorithm to cover the main events of the universe.
 The simulation programmer can create people as ideas (starting from computer disks), and they have their world.
 It was essential to nourish these people's consciousness with pedagogy, meditation to an extent, medicine, and other areas of study.
 There is a contention about whether the universe is finished or viewable by consciousness, an optimisation technique.
 Segments of the universe's history may be wireframes until rendering is required.
 The actor breasoned out 4*50 high distinctions for each of meditation, anti-ageing medical body replacement and time travel when needed each day using Text to Breasonings.
 Immortality is a universal trick (or a set of scientific discoveries) in which one time travels to the computer, which replaces your body.
 It requires maintenance while in the simulation, monitoring, observing, and helping one psychologically and pedagogically.
 The universe is healing and has laws of nature, which these technologies must interact with, and any artificial changes must seem acceptable to the body and society.
 A simple requirement of humans is regularly breasoning out 4*50 high distinctions to ensure technologies are professionally responded to.
 The actor checked how the other characters affected their performance.
 I used the Professor algorithm to check the correctness of film studies and music decisions.
 After researching, I chose more appropriate solutions for the production in costume, make-up, set design, scripting, and casting.
 The Professor's way of thinking helped reveal enough reasoning for and against decisions to appear professional.
 I checked the noumenon, factors, reasons, and reception to cinematography, sound design, and how to carry out a task flawlessly.
 The actor depicted the symbol sensitively.
 I used the God algorithm to summarise songs and find sharper, catchier lyrics.
 I wrote the intelligence in documentaries or songs about algorithms.
 I identified an original idea about the discovery in the song.
 I described imagery as finding the pinnacle of the work, summarising, challenging and inspiring clarity of thought, such as teleporting train tracks depicting Spec to Algorithm and new features and uses.
 Community needs and demands supported the actor.
 I wrote one book about Theatre Studies and another about Music.
 The actors gained enough confidence to act, speak publicly, and produce their productions.
 The musicians gained general skills in intelligence and mathematical analysis of music, leading to the writing of advanced algorithms.
 I could write and publicly represent my business, following positive functions.
 The actor briefly read the report that the algorithms for the arguments had been completed and debugged by implication that their specs were working.
 I wrote about the relation of philosophy to creativity, extending breasonings with research interests.
 I breasoned (programmed) using Spec to Algorithm (S2A).
 I set up a mind-reader that collected thoughts and used a combination of questions and algorithms to write formulas to fill the gaps after S2A had found the recursive structures and mapping between the recursive structure and output.
 In addition, specs or plans for finding enough details to meet professional requirements were found using neuronets.
 The actor explored visual art in State Saving Interpreter (SSI), creating a choice-point maze with visuals.
 I used Breasoning Algorithm Generator (BAG) to generate breasonings from "rode", with rode-vehicle, use-vehicle, and use-algorithm, for example, "I used the object metaphor finder algorithm to make science discoveries".
 This example helped generalise, specify, and reuse critical terms to describe ideas.
 I used BAG to find the available functionyms given a text excerpt.
 These functionyms a shone light on areas of study and completed them.
 The actor trained bots in immortality responsibly by researching the simulation.
 These bots represented people who were time travellers while they were away and the people from the time traveller's home time visible while the time traveller was travelling.
 This method resulted in a seamless experience without noticing the difference when time travelling.
 Bots might edit out stressful or unwanted thoughts and emphasise happy, inspiring points.
 The simulation was designed to deliver the best possible, most effective and healthy conclusion for its members.
 The actor covered the main point using logic and depth.
 Writing in Computational English gave me the confidence to find argument algorithms.
 While Grammar Logic (GL) helped me mind-map and prepare to write arguments, I considered the argument topics by considering alternative arguments to well-known arguments and original research frontiers from my original algorithms.
 I focused on computational philosophy and writing procedural and keyword-themed original algorithms.
 I double-checked that my arguments adequately covered the study area, infusing them with connections needed for clarity.
 The actor stated that immortality was the most demanding goal because it required constant detailed medical knowledge.
 Computers made advanced immortality, simulation, space travel, robots, and Spec to Algorithm possible, which sped up development.
 The academy finished robots from first principles and initiated research that would extend into the future.
 The object reader relied on two-dimensional cell specimens to match readings to data to ensure the accuracy of readings.
 The object reader would help make medicine non-invasive and prevent disease through organism behaviour (uses for Text to Breasonings).
 The actor's contribution was to be effective in their life by learning the necessary skills to write and earn money from philosophy.
 I photographed the pedagogue's world and aided them in becoming pedagogues.
 I scanned their thoughts, books, and media that influenced them and worked out how they found them helpful in forming and working on projects.
 In turn, they helped others do the same thing when ready.
 Computers were an invaluable tool in scanning and processing data and producing reports.
 These reports guided the prospective pedagogue when writing and were achievable using GL.
 The actor aimed for a 100% score in meditation, which enabled the meditation technologies and their advantages.
 I used my knowledge about delegating workloads, lecturing and using recordings to time-travel the breasonings, test them using DevOps at both ends and diagnose and fix them.
 Breasonings were naturally protected when they were meditated on, so meditation breasonings were completed and fixed, and arguments were completed to preserve travelling breasoned living things.
 I used an object scanner to detect if breasonings weren't meditated on, and meditated on them or reminded the time traveller to meditate if they hadn't at both ends of the journey.
 Meditating was difficult for others, and self-meditation was emphasised.
 The actor earned money from their investments, meditation courses, and professional development.
 Economics favoured the meditation business for creativity.
 I used business to be creative.
 The business was a meditation business that created courses in various departments.
 Economics favoured this because the skills were advanced and necessary for business, health and education.
 The immortal maintained lab robots with DevOps to eliminate human error, object cross-contamination and inaccuracy and conduct lengthy, expensive experiments.
 Lab robots were directed by humans and were checked to give us the desired conclusions in experiments.
 Guided by the laws of nature and its technologies, I effected noninvasive and desired results similar to subterms with address finding a specific subterm in a term, changing and reinserting it (unless in vivo).
 Once, I operated by breasoning out a high distinction to help the body correct itself.
 I used DevOps software to maintain the algorithms, prevent systematic errors and maintain the error-catching and self-resolving fallback systems.
 The immortal explained to prevent one's outward death, a medical miracle, by subscribing to the future simulation after time travelling to October 5689 with 16k breasonings for each of meditation, time travel and anti-ageing body replacement (at each destination) and breasoning 16k breasonings to prevent one appearing to die if one experienced a mortal threat that day, all daily.
 This method covered possible death in any destination during the day, assuming there was only one threat that day.
 It is better to avoid risks and take the precaution of helping close ones before they might day on the day so as not to be too late.
 It is also possible to avoid time travel.
 Instead, one can meditate, replace one's body for anti-ageing and avoid death each by indicating 16k breasonings daily in connection with a simulant.
 The immortal attempted to swing from algorithm to algorithm, like a trapeze, producing hybrid features, unusual transitions and reduced advantages.
 Neuronets mindmap possible new algorithms and features by understanding the development of ideas.
 For example, it first understands how to write CAW (which produces all combinations of commands and variables) and CI/CD (which turns commands on or off in order).
 Then, it finds fundamental or underlying data structures and analyses how to manipulate them for particular actions on them.
 I first described the connection between CAW and CI/CD, having thought of how to convert the results (data) rather than the algorithms.
 The immortal found append and string concat-based predicates with S2A by starting with the base case, building code based on the spec and saving these predicates in the specs in code form.
 I optimised CAW with types and decided to optimise CI/CD with them to join fragmented sections of predicates with types, S2A and CAW.
 In this way, CI/CD integrated code attempts and types can fix holes in the code.
 I joined fragments separated at particular intervals (where new code was being tested) by finding necessary type conversions, formulas, S2A pattern matching, commands or combinations.
 In the new S2A, specific append and string concat instances were pattern-matchable.
 The immortal used a hierarchy of delimiters containing "end of file".
 I improved S2A string optimisation by removing and replacing commas that delimited string segments.
 In addition, in some programming languages such as Prolog, I cut on ".
", then "," as a command delimiter, and "," as an argument delimiter.
 Then, I used a neuronet to convert recursive data types to recursive structures.
 This neuronet skipped over the curse of dimensionality by using data with a different number and depth of nondeterministic options and several other examples of algorithms or natural language.
 The immortal boosted their grades with reading.
 I read the document containing the example solution.
 I wrote my questions about the question, partially worked solution, and questions so far.
 I reworked the sample solution for the values in the question, substituting them into its formulas, possibly given in a formula sheet, and checked units, orders of magnitude, and the correctness of qualitative results.
 I used the open-book exam notes to look up formulas.
 The actor augmented the algorithm writer with tools such as a Type Finder, Grammar-Logic (GL), Combination Algorithm Writer (CAW), a spoken language translator, mathematical, matrix, logical, bitwise, database or computational formula finders, GitL, a C and assembly language converter and optimiser, Lucian CI/CD, State Saving Interpreter (SSI) Web Service, algorithm minimiser and a Spec to Algorithm (S2A) optimiser.
 I ensured that I understood the 250 algorithms before using them for mind reading, customer attraction, high distinction confirmation and other meditation technologies, such as supporting but not conceiving healthy children, earning jobs, selling products, producing quantum energy and quantum gravity, projecting simulations, reading objects, creating quantum computers, preventing headaches and performing spiritual surgery, displaying spiritual screens, time travelling, replicating or vaporising items such as spiritual food or supplements, becoming immortal by replacing one's body with anti-ageing medicine, meditating, use medicine, automating breasoning, living in a spiritual apartment and using a spiritual future computer.
 Understanding these algorithms helped one feel confident in using these technologies.
 First, I generated 16,000 breasonings and algorithms using my combinations of sentences in my books, GL words and a neuronet.
 Then, I used Spec to Algorithm to break algorithms into decision points to quickly display them to myself.
 In addition, I approved or wrote algorithms using a projected word processor or a combination of notes, mind reading, and a neuronet.
 The actor earned 100% to meet the assignment's passing mark.
 I determined the mind-reading content before mind-reading it.
 In the practical, I used a double-blind procedure to test whether a set text had been rigorously mind-read.
 In this test, any information which could influence the tester or the subject was withheld until afterwards.
 The content needed characters and words that could be mind-read in a given language and use given grammatical structures.
 The actor mind-read breasonings and algorithms using detailed mind-reading with an analogy breasoning-generating neuronet with either a GL word or a feature.
 In addition to understanding 250 algorithms, I needed to understand 250 arguments.
 I understood arguments by selecting developed things and ways to connect them.
 I found a connection by finding and talking about an intelligent idea on the way, which I found because it was the most crucial idea.
 I connected it by writing down the first fifty connections with a student, then quickly making a connection.
 The actor controlled, synchronised and rated versions.
 I used GitL to back up versions and test all changed repositories before uploading.
 I didn't use the public version backup system for non-official releases.
 The repository's folder was public and private.
 When I was satisfied that the backup was stable, I uploaded it to the public server.
 The actor predicted and processed the bottom-up CAW (S2A) structure.
 I used the bottom-up algorithm to speed up finding combinations in Lucian CI/CD and recursive structures in Spec to Algorithm (S2A).
 The bottom-up algorithm was slightly faster than the top-down one because it quickly completed tasks backward, whereas top-down could skip unnecessary subtasks.
 I found each repeating unit quickly, finishing the task instantly.
 This was useful in single list traversal (simplifying predicates), CAW and optimisation.
 The actor changed the parameters to visit friendly planets after registering.
 To travel in space, I controlled access levels to the Prolog computer.
 There were DevOps laws to prevent changing software when not allowed.
 This protected stable versions from being changed during a mission.
 Given the simulation and other tests, I installed the update and verified it was functioning correctly.
 The actor changed the timeline number if revisiting a date, and wrote 2-5% extra breasonings as a failsafe.
 I installed a queue in the analogical breasonings counter to stop overwriting the breasoning count.
 The breasonings were analogies of other breasonings using specific words.
 Before using the queue, multiple algorithms accessed and changed the counter value, possibly risking data loss.
 This change preserved the originality of the breasonings by the generator in the current timeline, protecting the effects of making the same breasonings unique by giving them a different number if breasonings were reused.
University 1 - 1
 The lecturer processed the data in bulk, converted a formula to an algorithm, and found the program from the user interface.
 I worked out the future algorithms from the types.
 The data structure, formula, or output type helped produce the algorithm.
 I found patterns in the transformation from input to output, such as pattern matching or mathematical formulas.
 Alternatively, I started by identifying a formula and inferred input and output.
 The lecturer modified some sentences with cultural references and algorithms with language-specific grammars.
 I developed the bulk Cultural Translation Tool.
 I translated the documents into other languages.
 I checked off the sentences that were the same when back-translated.
 I asked the user if different sentences had the same meaning as the original and kept these variants to check other languages.
 The lecturer kept track of sentences that hadn’t worked and kept sentences that had been translated correctly.
 I developed the tool to translate an algorithm into another language.
 It could help bulk translate documents into other languages.
 I translated the document first.
 Then, I translated sentences the user had modified to be more straightforward.
 The lecturer always started with exact types or a list of list of types.
 String concat was similar to append in that it could work out the output of get token-style parsing of strings containing string variables and constants.
 I represented string_concat as “:” and appended it as “::”.
 Different types could be inputs into string_concat.
 For example, A=a: a produced A=a: a.
 Alternatively, aa=A:a produced A=a.
 The lecturer broke apart two string expressions, equalling each other, to debug the expression.
 I stated that a string such as A in aAbBc=DEc could have zero or more characters.
 I made inroads from the edges.
 Then, I found all combinations of solutions.
 I could specify string lengths.
 The lecturer started with a list of types, in this case, A=b and B=b.
 The algorithm began by finding the number of times the minimum lists could fit into the string.
 Then, it tried to find matches until all the matches had been found.
 The lecturer guessed the type from given constants.
 I tested compatible commands.
 I found the type of the called predicate and the call.
 I selected a consistent fit from the call to the called type.
 The lecturer turned off the need to define some predicates.
 I guessed the processed list would be defined.
 In addition, I assumed output would be preferably defined.
 I preferred to warn about rather than make allowance for an out-of-place undefined variable.
 I prefer data to be defined as soon as possible.
 The lecturer changed "a(A,B,C):-and(A,B,C).
 and(true,true,true).
" to "a(A,B) :- A,B.
 I tightened the type of the called argument from a possibly obsolete output-input pair or a non-defined input-output pair.
 The former, for example, "a(O):-b(O).
" can be rewritten "a(i).
 Ideally, input should lead to input, and output should lead to output.
 I converted logic-containing rules to logic.
 The lecturer gave the sort algorithm as a type to help generate data.
 I simplified the non-deterministic list of types to the most useful ones per predicate (for example, ones that used each command in the interpreter).
 For example, the interpreter may have string, atom and number commands.
 These had the same types as themselves.
 I ventured to suggest random input for a sort algorithm.
 The lecturer continually tried to reduce to binary.
 I found the algorithm’s types and then wrote tests from them.
 I reduced the algorithm to minimal logic, including types.
 I made inroads, working out and simplifying parts at the start or end that the algorithm always parsed or didn’t need.
 I determined the algorithm’s properties and simplified it, like lazy evaluation, using data or the algorithm, prompting optimising the instruction set.
 The lecturer found additional possible new tests to test new features.
 The immortal suggested corrections to incompatible tests.
 First, the algorithm found types to check tests against.
 If an already present test didn’t fit any types, then all or parts of the input compatible with the type could be used to find the spec.
 The algorithm could find the closest type and modify the test.
 The lecturer signified exact data lengths and types, requiring grammars.
 I checked the human-written tests against the types.
 For example, the string a, which may recur in types, may have different lengths with different results.
 It may be better to use constants or specific lengths.
 The constants would signpost sequences in the string, making it easier to parse.
 The lecturer added zeroth rows and columns.
 The string expression a = string expression b could contain whole algorithms.
 For example, similar list expressions could find list(list(number a_n_m))->flat(list(list(a_n_m))).
 Or they could find items using a heuristic.
 For example, the maximum number or the sorted list could be found.
 This heuristic may be part of the algorithm, transforming matrices.
 The lecturer explained that the item was transformed and put back.
 Simplified expressions were a new programming language.
 I extracted items with member or subterm with address.
 I wrote connections between equal expressions and extractors, such as list(max(list1)).
 I extracted information twice when correspondence was needed.
 The lecturer explained how the algorithm should work in plain language.
 I explained that the item was transformed and put back.
 For example, a type statement with a formula was list([a where a member([b, C], a) and C is replaced with C+1]).
 Or C could be compared with a value inside or outside it.
 Or only a list([b, C]) could be returned, or addresses of [b, C] could be recorded before substituting back.
 The lecturer called recursive predicates recursively with nested data or data with restarting or continuing output.
 I produced several outputs with Spec to Algorithm (S2A).
 Instead of one output with several variables, I produced several outputs.
 I could have negative results (results that failed) to shape results when porting S2A specs to CAW by creating conditions and sub-conditions in clauses and sub-predicates containing the “not” operator.
 S2A and CAW created predicates with multiple outputs, such as processed and output lists.
 The lecturer explained that the compiler attempted to optimise code before running without “trace” to improve performance.
 I used S2A to optimise Prolog.
 I rewrote the Prolog code based on its specs from tests or types from the original algorithm.
 The type finder found a certain number of possible outputs with data for each predicate, including dependencies of predicates.
 Optimisation involved contracting pattern matching to a minimum number of statements, where intermediate CAW statements transformed variable values for further pattern matching or output.
 The lecturer noticed that the generated code represented multiple predicates, and the generated code represented the algorithm bottom-up to simplify the type generation needed to produce S2A specs to produce the code.
 The bottom-up method should only be used if the algorithm can’t be found from S2A specs for the whole algorithm, where the commands’ types are broken down instead, and the code is found.
 S2A optimised code by finding recursive patterns and separating and finding constants for specs with the same shape, where character-breakdown was completed if code couldn’t be found for non-character-breakdown.
 In this case, all strings, atoms, numbers and compounds were broken down into characters and variables representing these characters were tested for relationships.
 These recursive structures found and simplified relationships, producing code that ran with the same results as the original and could replace it.
 The lecturer used types within CAW to speed up command selection before testing.
 I used CAW to find Prolog commands for parts of S2A specs that S2A couldn’t resolve in optimisation.
 The decision trees of CAW commands were tested with type statements first.
 I used trial and error to find rules to accurately find the context for commands, including mind-reading, artistic license, pattern-matching, and recent commands.
 I created a new command, down to item and character level, to achieve a goal using S2A.
 The lecturer drafted S2A (with expanded or optimised statements in the form A=B) and loop Prolog commands with “for” or “while” syntax that compiled to C.
 Using S2A eliminated the lag of using predicates, improving performance.
 I eliminated expanding to predicates, where expanding to predicates would cost performance if they were part of recursion.
 S2A was efficient enough for optimisation and, together with recursion-as-loops, could compile and run speedily in C.
 Recursive structures were reused.
 CAW commands were not embedded in them but found afterwards in a cycle with S2A until unresolved variables were resolved, and recursion-as-loops were required even with S2A because of CAW.
 The lecturer wrote code using S2A and converted it to an expanded form for terminal predicates but left it the same for compilation for performance.
 Expanded code was only for publishing, as it was easier to understand and manipulate.
 Students and workers could write and use S2A to speed up development time and learn about optimisation strategies, improving performance and code quality.
 Programmers could read predicates online, extending documentation with examples and automatic code selection and debugging assistance.
 Premium code checkers helped users finish complex tasks with perfect results.
 The lecturer converted base cases to exit conditions of loops.
 I converted non-deterministic code (predicates) to loops for speed.
 These loops were contained in predicates and resembled for- or while-loops.
 This method required that variables be renamed and conflicting variable names be corrected.
 Loops rather than predicates helped warn on overlapping loops and convert recursion to efficient assembly code.
 The lecturer published S2A as compiler research and trained a neuronet on it.
 I minimised and simplified the S2A, CAW, and recursion-as-loops-generated code.
 This step briefly required converting to predicates for DFA minimisation and simplification.
 In addition, recursive structures and mappings in S2A calls and reused code in predicates were modularised for minimisation and implication.
 If S2A calls could be replaced with fewer commands, this was done to improve the algorithm.
 The lecturer wrote an algorithm to interest the no-coder in enough (not necessarily computational) details to develop various specifications in natural language, such as sentences, tables, order of words or other properties that one wanted to transform.
 I “wran” (sic) or wrote/ran the algorithm in a creative process involving making critical decisions, learning all the most essential types of bug corrections (which one could walk through), finessing code to work professionally and exploring options to share or commercialise the code.
 Robots, workers, students or hobbyists could walk through development and training demonstrations or texts and incorporate the code or write research as a response.
 By “wrunning” (sic) the algorithm, the user could optionally specify the algorithm in human language and not experience the code.
 The user could write a code “wrunner” (sic) with another “wrunner” (sic) and take responsibility for lists of ideas they wanted to “wrun” (sic), which they wrote an algorithm to help them collect automatically, and “wrun” over time.
 The lecturer wrote a guide algorithm to help add, change or delete S2A call items and to verify the changes, judging when the changes had finished to check and possibly brief the user on unfinished changes if they had gone away.
 I output comments explaining the recursive structure and mapping elements used in the S2A call for easier understanding and modification.
 The recursive structure contained nested recursive structures and elements, which were formatted with indenting and labelled in comments with examples of their expanded form.
 In addition, the mapping of input to output recursive structure addresses, containing pairs of origin and destination multi-dimensional addresses of term elements, gave comments with the variable names from the recursive structures and their contents.
 This S2A command and recursion-as-loops could be part of a programming language to build and test prototypes quickly.
 The lecturer regularly backed up essential files and unsaved and saved versions during development.
 I first wrote specifications, generated code, made refinements, tested, and ran, all of which could be smoothed by checking that the specifications entered and re-entered were in the correct format, were enough, contained required negative cases, and were backed up if needed.
 All of this could be communicated using natural language and interactive simulations of the algorithm.
 The colours of part of the algorithm’s data flow became the setting for correcting questionable, poorly constructed or inefficient code.
 S2A helped correct inefficient code, conflicting variables, and logic structure flaws.
 It also corrected inconsistencies in the design or format of code, including command selection, indices, reusing predicates, simplifying predicate use, keeping a checklist of items to do and remembering one’s progress during the time.
 The lecturer expanded recursive structures, using separate ones before substituting data into them because substituting into a term was easier.
 In S2A, I referred to existing recursive structures instead of creating new ones.
 These structures were referred to once as part of recursive structures, except when there was a break, they were at different levels or not in a recursive structure together, so a separate recursive structure was pointed to—the new format contained dependencies of pointers rather than a nested term.
 Near misses or inconsistencies in the recursive structure were noted and brought to the user’s attention or corrected.
 For example, one-off specs in either the shape of input or output compared with many others, unusual item type or change in type (variable or constant), or a later change leaving inconsistencies were caught.
 The lecturer expressed that breaking into characters was expensive and only did it when necessary.
 I only broke elements into characters if needed when optimising them.
 I transformed the original algorithm into S2A and CAW code stages, where S2A code was pattern-matching, and CAW was unpredictable code such as (+).
 If the CAW code in a stage broke down into characters or compared them with a value, breaking down to characters was required, and stages were affected by the variables introduced.
 I checked whether the S2A specifications required breaking down into characters by checking for unusual, unknown variables and then breaking into characters to try S2A or CAW.
 The lecturer put the answers away.
 I stated that if elements are broken into characters, it is only for that pattern-matching S2A call.
 The pattern-matching S2A call can be broken into substituting data into the recursive structure and mapping input to output.
 A CAW command was inserted if one needed to be inserted between these.
 CAW commands included operations, verifications, and comparisons between input and output.
 The lecturer optimised the algorithm with Spec to Algorithm (S2A), using existing commands rather than CAW for processing speed, in contradistinction to finding the algorithm using S2A and CAW.
 Breaking into characters of elements before S2A processing needs to be done before finding unique variables and constants to include variables from multiple computations.
 The algorithm sections, mainly where variables were unknown and S2A worked, must be broken down into characters and labelled for breakdown.
 These sections were then broken down across the spec at this point of the algorithm.
 The whole algorithm needed to be worked through bottom-up with S2A, with variables being copied to new S2A calls but one not being concerned with unique variables and constants being computed for the whole algorithm simultaneously.
 The lecturer minimised the code and data structures and mapped the output to the user’s code and data structures at the end.
 If S2A produces a unit production A1=A2, I noted it, then collected instances of this chain of variables from the sequence of S2A calls and removed the unit productions A1=A2, etc.
 This removal might not be necessary because S2A moves needed computations forward.
 Pattern matching operations are already grouped, with only necessary CAW commands between S2A calls, leaving no unbroken chain of A1=A2 commands, assuming variables are grouped into those needed to move together.
 There are no individual variables left unaccounted for in a pattern-matching operation.
 I magically used the S2A code to compute the answers in the algorithm at the earliest opportunity, even though the user appeared to receive the answer by tracing through the existing code.
 Even though the existing and S2A codes do the same thing, the performance improvement from optimising with S2A may be minutes or hours.
University 2 - 2
 The lecturer deleted quantum algorithms from the quantum computer afterwards or didn't need to because it was a quantum simulation, where electrons remained instead of disappeared or instead disappeared.
 I devised a mind-reading quantum computer that mind-read strings and subatomic particles from string theory to have correct results, giving the output to the classical computer.
 This quantum computer could make computations instantly, making simulation, space travel, and immortality possible.
 The configuration and necessary computations were preclusive.
 However, a time machine was already possible with a classical computer.
 I programmed the array of lock-entangled particles to give the emergent effect of a circuit.
 The lecturer stated that Spec to Algorithm (S2A) could represent recursion using [maplist,_], [foldr,_] or similar.
 S2A uses the rule [is,[*]] to find substrings using two appends from "[is,[1+1]]" to write interpreters with calculations as part of strings quickly.
 Instead of using subterm with address to find and replace a subterm in a term, the algorithm found the string where "*" was in the pattern in the string.
 Then, after evaluating it using term_to_atom and is, it replaced this with two.
 The interpreter's predicates, needed formulas and recursive elements could be constructed using S2A.
 The lecturer mind read the string.
 It had an address and momentum.
 It was there in between, but the instruments of the observer might affect it.
 I wanted to know if Text to Breasonings could control gravity.
 The lecturer accounted for the subatomic particles, programming one of them like a crystal with 50 high distinctions to return a frequency, suggesting the ability to create a DFA with substitutions as transitions.
 I mind read the subatomic particle, the model boson and the fermion in superstring theory.
 The simulant lived in another universe with its physics model; they were safe from the home universe ending, accidents, threats or medical problems, and it continued appearing like the home universe.
 Bodies, simulations, quantum science, and research-based teleportation medicine were used.
 I teleported the subatomic particle in its object within bounds, and everything, including computers, was simulated, even with a neural engine.
 The lecturer said the quantum computer needed to work because it was good.
 The particle's friend was close to it and could be used more efficiently to create a network because of the electromagnetic field.
 I programmed the desired results and negative (failing) cases, expecting the particles to spiritually follow the S2A algorithm, similar to programming a crystal, even if multiple particles helped the particle to achieve the result.
 They are naturally intelligent, with consciousness.
 They worked on a best of three trials more quickly than a computer because they were smaller.
 The lecturer found algorithms like AGI using CAW for shorter solutions, mainly simulation.
 I temporarily entangled and locked the neighbouring particles to connect to the computer.
 I mind-read the specific frequencies of the particles, like a person, to check if they were there, ready with instructions and rewards such as a beep, each with 50 high distinctions.
 I then conducted the twenty-minute experiment, giving the computer components a break to avoid fatigue.
 I read the result of the quantum simulation using the classical computer, replacing S2A with CAW to find results after twenty minutes, after optimising types and patterns.
 The lecturer unlocked the breasoning values and removed the breasonings after use.
 In the quantum computer, I locked breasoning values, of which there were only x, y and z, to get the particles' attention.
 They had small communities at their level of resolution and enjoyed helping.
 They had privacy and levels of involvement and were equally spaced.
 They were left as they were found.
 At the end of the five minutes, the lecturer showed the particles the movie of the computation involving thousands of particles and left them alone for the day or maybe forever, depending on their comments, two visits maximum.
 Still, it was virtual, so we could do what we wanted.
 I had a 2D map of the particles.
 I collected their comments on the 50 high distinctions at each step of communicating with a particle, with Hollywood accuracy (giving a film set high distinctions for the imagery to be high quality).
 Everything was copywritten using a free algorithm, including their responses, and they helped.
 The lecturer visited other places to explore and met a professor they knew.
 The simulation is necessary for people to exist in the same space simultaneously.
 There was enough food and resources for everyone.
 I had the same quality of life as before, appearing in the apartment and walking outside.
 Everything looked the same as the home universe.
 The lecturer only visited safe planets.
 I commented that Ancient Romans, car travellers, or even room occupants could travel through the universe, quickly arriving before going to the toilet.
 They had high distinctions and travelled between Melbourne and Sydney, in other words, other planets.
 When recognised as myself or the apartment occupant, I could hire a car and automatically travel, planning to arrive home before the end of the day.
 I visited one planet, then returned.
 The lecturer enjoyed the high quality of life, breasoning their high distinctions over an extended period.
 The simulation is a phenomenon to discover, just as crystals can be programmed with algorithms.
 I was more forceful, guiding the people to safe places and indicating that they should meditate and replace their bodies.
 One of the only differences was the difference in people on the street (sometimes obviously human animals and robots), where cars, clothes, and shops were the same.
 If someone just joined a simulation, they met non-simulants for the first 16 days.
 The lecturer used variables to develop algorithms with S2A quickly.
 S2A specs could have variables (e.
 [a,b,c,'A1',d,e] or "abc<A1>de").
 These variables had the same format as Prolog variables or started with a capital letter, then had 0 or more other letters and numbers.
 These variables prevented the need to enter two or more specs to cause variables to be formed.
 It was assumed the non-variables were constants.
 The lecturer built an optimised machine from quantum particles.
 In S2A, I detected the same or a subset of the data and made an optimisation.
 I optimised the S2A specs by detecting if a repeat was a repeat of n characters, whether recursions or predicates could be merged and whether the same data meant an optimisation was possible.
 It could be omitted if a recursion added 0, multiplied by 1, concatenated "" or appended [].
 If two predicates decomposed and built the same list, they could be merged.
 The lecturer gave only the correct results using the algorithm generated by S2A.
 I fixed the result of the generated S2A algorithm by using the map corresponding to the output in the decision tree.
 When selecting a map from the map list, it should have the same index as the output, particularly the clause number, found with subterm with address.
 This method prevented the algorithm from unwantedly finding incorrect results with a map for the wrong clause.
 For example, the map [A,B,c]->A had a different result from [B,A,e]->A.
 The lecturer gave non-deterministic results for an input with more than one output.
 I gave non-deterministic output in S2A by inserting "nd" (standing for non-deterministic) in the output.
 For example, [a,[nd,[[b],[c]]]] produced [a,b] and [a,c].
 The algorithm removed "nd" and produced these results as separate outputs using the Prolog command "member".
 Non-deterministic results were formed when specs differed in the output in the decision tree.
 The lecturer reduced formulas over multiple rows and columns to a repeating pattern to recognise data with different numbers of rows and columns.
 The next generation of Spreadsheet Formula Finder (SSFF) finds values in the same row or column and their sum, difference, or multiple in some reports.
 It used a variant of Spec to Algorithm to collect and form output from input by recognising variables in tables and entering and calculating formulas.
 SSFF can automatically find these formulas using a formula finder.
 Other formulas, such as string to table converter, converted input to terms, "group by consecutive number", converted strings to terms with values to find formulas, and S2A found output from the input using the correct format.
["Green, L 2024, <i>Economics index</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Economics
Leadership
Uses for Money in Theatre Studies
Uses for Money in Epistemology (Poetry)
Uses for Money in Music
Uses for Money in Fine Arts
Breasonings Currency
Marketing for LM to Siva
Breasonings Currency 2-6 (there is no 1)
Funnel ready to start work
Economics
4*800-(1857+16)/5 =2826 sentence paragraphs
2826/80=36 80s
36*80/9 chapters=320 sentences per chapter
["Green, L 2022, <i>ECONOMICS</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"Economics
Leadership
Uses for Money in Theatre Studies
Uses for Money in Epistemology (Poetry)
Uses for Money in Music
Uses for Money in Fine Arts
Breasonings Currency
Marketing for LM to Siva
Breasonings Currency 2-6 (there is no 1)
Leadership
 The manager prepared to help people help people to be creative.
 She did this by being present.
 First, she thought of the beginning of the idea.
 Second, she thought of the middle of the idea.
 Third, she thought of the end of the idea.
 In this way, the manager prepared to help people help people to be creative by being present.
 The manager prepared to create a new skill.
 He did this by verifying the tradesman’s tradesmanship skills.
 First, he read the sentence in the letter, “Yours sincerely, Lucian”.
 Second, he thought of a new way of writing this, “Thank you, Lucian”.
 * Third, he wrote this in a letter to the same person.
 In this way, the manager prepared to create a new skill by verifying the tradesman’s tradesmanship skills.
 I prepared to lead a happy life.
 I did this by taking the daffodil from the circus cow’s back.
 First, I observed when the circus cow was standing still.
 Second, I stood beside the circus cow.
 Third, I removed the daffodil from a pocket attached to the circus cow’s back.
 In this way, I prepared to lead a happy life by taking the daffodil from the circus cow’s back.
 I untwisted the beetle’s legs from the chocolate
 I prepared for the model Nervous system to function properly.
 I did this by starting to compute fewer, higher quality computations using the model brain.
 First, I computed a computation once every 1 second.
 Second, I computed a computation once every 2 seconds.
 Third, I calculated a calculation once every 4 seconds.
 In this way, I prepared for the model Nervous system to function correctly by starting to compute fewer, higher quality computations using the model brain.
    I prepared for the model Circulatory system to function correctly.
 I did this by starting to pump liquid through the model heart more slowly.
 First, I relaxed the model heart to suck in the fluid and contracted it to pump the liquid out every 1 second.
 Second, I relaxed the model heart to suck in the liquid and contracted it to pump the liquid out every 2 seconds.
 Third, I expanded the model heart to suck in the fluid and contracted it to pump the fluid out every 4 seconds.
 In this way, I prepared for the model Circulatory system to function correctly by starting to pump liquid through the model heart more slowly.
    I prepared for the model Respiratory system to function correctly.
 I did this by expanding the model lungs by contracting the model diaphragm more slowly.
 First, I expanded the model lungs by contracting the model diaphragm every 5 seconds.
 Second, I expanded the model lungs by contracting the model diaphragm every 10 seconds.
 Third, I expanded the model lungs by contracting the model diaphragm every 20 seconds.
 I prepared for the model Respiratory system to function correctly by expanding the model lungs by contracting the model diaphragm more slowly.
    I prepared for the model Digestive system to function correctly.
 I did this by churning the food with the model stomach more slowly.
 First, I churned the food with the model stomach every 1 second.
 Second, I churned the food with the model stomach every 2 seconds.
 Third, I churned the food with the model stomach every 4 seconds.
 In this way, I prepared for the model Digestive system to function correctly by churning the food with the model stomach more slowly.
    I prepared to use my model muscles.
 I did this by tying the strings (like glucose molecules) to make a quipu (like the glycogen molecule with 30,000 glucose units) in the model liver more slowly.
 First, I tied the strings to create a quipu with three strings attached in the model liver approximately every 1 second.
 Second, I tied the strings to make a quipu with three strings attached in the model liver roughly every 2 seconds.
 Third, I tied the strings to create a quipu with three strings attached in the model liver approximately every 4 seconds.
 In this way, I prepared to use my model muscles by tying the strings (like glucose molecules) to make a quipu (like the glycogen molecule with 30,000 glucose units) in the model liver more slowly.
    I prepared to help the small intestine break down carbohydrates, lipids and proteins, where all body parts referred to are models.
 I did this by releasing marbles (representing digestive enzymes) from my model pancreas more slowly.
 First, I released marbles from my model pancreas every 1 second.
 Second, I released marbles from my model pancreas every 2 seconds.
 Third, I released marbles from my model pancreas every 4 seconds.
 In this way, I prepared to help the small intestine break down carbohydrates, lipids and proteins by releasing marbles (representing digestive enzymes) from my model pancreas more slowly.
    I prepared to achieve normal blood glucose levels using glucagon if I had low blood glucose and insulin if I had high blood glucose, where all body parts referred to are models.
 I did this by releasing marbles (representing glucagon or insulin) from my model pancreas (from my alpha or beta cells, respectively) more slowly.
 First, I released either a black or white marble from my model pancreas every 1 second.
 Second, I released a marble of this shade from my model pancreas every 2 seconds.
 Third, I released a marble of this shade from my model pancreas every 4 seconds.
 In this way, I prepared to achieve normal blood glucose levels using glucagon if I had low blood glucose and insulin if I had high blood glucose by releasing marbles (representing glucagon or insulin) from my model pancreas (from my alpha or beta cells, respectively) more slowly.
    I prepared to give my body enough nutrients, where all body parts referred to are models.
 I did this by squishing small chunks of food through the small intestine model more slowly.
 First, I squished a piece of food through the sieve every 1 second.
 Second, I squished a piece of food through the sieve every 2 seconds.
 Third, I squished a piece of food through the sieve every 4 seconds.
 In this way, I prepared to give my body enough nutrients by squishing small pieces of food through the small intestine model more slowly.
    I prepared to give my body enough water.
 I did this by sieving water through my large intestine model more slowly.
 First, I sieved water through the sieve every 1 second.
 Second, I sieved water through the sieve every 2 seconds.
 Third, I sieved water through the sieve every 4 seconds.
 In this way, I prepared to give my body enough water by sieving water through my large intestine model more slowly.
    I prepared for the model Urinary system to function correctly.
 I did this by sieving liquid (like the metabolites to be urinated) through a sieve (like a model Loop of Henle in the model kidney) into water (making the urine-like liquid) more slowly.
 First, I sieved liquid through the sieve every 1 second.
 Second, I sieved liquid through the sieve every 2 seconds.
 Third, I sieved liquid through the sieve every 4 seconds.
 In this way, I prepared for the model Urinary system to function correctly by sieving liquid (like the metabolites to be urinated) through a sieve (like a model Loop of Henle in the model kidney) into water (making the urine-like liquid) more slowly.
Uses for Money in Theatre Studies
     I prepared to go to heaven.
  I did this by watching the theatre production.
  First, I watched the Magistri Magna Gloria himself.
  Second, I watched the fiesole (sic).
  Third, I watched the character actors.
  In this way, I prepared to go to heaven by watching the theatre production.
    I prepared to achieve my goal.
  I did this by writing that for 50 As, I was given the value of 50 As.
  First, I used 50 As to earn a job.
  Second, I used 50 As to protect my health with meditation (with philosophy) on one day.
  Third, I used 50 As to have a famous child.
  In this way, I prepared to achieve my goal by writing that for 50 As, I was given the value of 50 As.
    I prepared to determine that a natural threshold for 50 As had been met with 50 As.
  I did this by writing that for the second of 2 in the set of 50 As the master gave me the value of 50 A grades going through.
  First, I allowed 50 A grades in a PhD to go through as a lecturer.
  Second, I allowed 50 A grades in Masters to go through as a lecturer.
  Third, I allowed 50 A grades to award an acting job to go through as a director.
  In this way, I prepared to determine that a natural threshold for 50 As had been met with 50 As by writing that for the second of 2 in the set of 50 As the master gave me the value of 50 A grades going through.
    I prepared to link excellences in the community together.
  I did this by writing that for 50 A+s, the master gave me the value of 50 A+s.
  First, I earned the award of best in the PhD class.
  Second, I donated some of my 50 A+ breasonings to extracurricular volunteering.
  Third, I wrote to my local member of parliament to improve the standard of services to 50 A+s.
  I did this by I prepared to link excellences in the community together by writing that for 50 A+s, the master gave me the value of 50 A+s.
    I prepared to inspire 100% service.
  I did this by writing that for 50 100%s, the master gave me the value of 50 100%s.
  First, I earned a University scholarship.
  Second, I received the movie scholarship.
  Third, I received an industry scholarship.
  In this way, I prepared to inspire 100% service by writing that for 50 100%s, the master gave me the value of 50 100%s.
    I prepared to recognise an excellent product (prize applicant).
  I did this by writing that for the second of 2 in the set of 50 A+s, the master gave me the value of 50 A+ grades going through.
  First, I awarded the prize for excellent work in hospitality.
  Second, I assigned the award for outstanding work in economics.
  Third, I awarded the award for exceptional work in nutrition.
  In this way, I prepared to recognise an excellent product (prize applicant) by writing that the computer gave the second of 2 in the set of 50 A+s the value of 50 A+ grades going through.
    I prepared to award a cohort of Science students 100%.
  I did this by writing that for the second of 2 in the set of 50 100%s, the computer gave me the value of 50 100%s going through.
  First, I prepared 50 100%s.
  Second, I verified the students who had earned 100%.
  Third, I awarded each of them 100%.
  In this way, I prepared to grant a cohort of Science students 100% by writing that for the second of 2 in the set of 50 100%s, the computer gave me the value of 50 100%s going through.
    I prepared to be astonished in a film.
  I did this by writing that for 250 breasonings, I was given the value of 50 As.
  First, I wrote 250 breasonings for a film character.
  Second, the computer gave me high quality imagery.
  Third, I was given each of the 16 greater 250 breasoning sets in the production until I had earned 50 As (16*250 breasonings=4000 breasonings, which divided by 80 breasonings per A=50 As).
  In this way, I prepared to be astonished in a film by writing that for 250 breasonings, I was given the value of 50 As.
     I prepared to represent a prestigious University.
  I did this by writing that for 2*250 As, I managed the Professor’s job application.
  First, I observed the applicant write 250 80 breasoning As.
  Second, I received the application for the job of Professor.
  Third, I awarded the role of Professor to the applicant after writing 250 80 breasoning As.
  In this way, I prepared to represent a prestigious University by writing that for 2*250 As, I managed the Professor’s job application.
   I prepared to represent a renowned University.
  I did this by writing that for 250 A+s, I managed the Professor’s job application.
  First, I observed the applicant write 250 130 breasoning As.
  Second, I received the application for the job of Professor.
  Third, I awarded the role of Professor to the applicant after writing 250 130 breasoning As.
  In this way, I prepared to represent a renowned University by writing that for 250 A+s, I managed the Professor’s job application.
    I prepared to increase the breasoning count.
  I did this by writing that for 250 100%s, I was given the value of 250 250 breasoning As.
  First, I observed the meditator (philosophy student) breason out 250 130 breasoning As.
  Second, I received word that the meditator had meditated (the philosophy student had written an essay).
  Third, I breasoned out 250 250 breasoning As.
  In this way, I prepared to increase the breasoning count by writing that for 250 100%s, I was given the value of 250 250 breasoning As.
   I prepared to represent a well-known University.
  I did this by writing that for 2*250 A+s, I managed the Emeritus Professor’s job application.
  First, I observed the applicant write 250 130 breasoning As.
  Second, I received the application for the job of Emeritus Professor.
  Third, I awarded the position of Emeritus Professor to the applicant after writing 250 130 breasoning As.
  In this way, I prepared to represent a well-known University by writing that for 2*250 A+s, I managed the Emeritus Professor’s job application.
    I prepared to represent a regionally famous University.
  I did this by writing that for 2*250 100%s, I managed the Universal Professor’s job application.
  First, I observed the applicant write 250 190 breasoning As.
  Second, I received the application for the job of Universal Professor.
  Third, I awarded the appointment of Universal Professor to the applicant after writing 250 190 breasoning As.
  In this way, I prepared to represent a well-known University by writing that for 2*250 100%s, I managed the Universal Professor’s job application.
   I prepared to found a University.
  I did this by writing that for 250 2*250 breasoning As, as the yogi (University founder), I managed the Lucianic Meditation (philosophy) program.
  First, I found a perfect sequin.
  Second, I placed an identical perfect sequin beside it.
  Third, I ate a salad sandwich.
  In this way, I prepared to found a University by writing that for 250 2*250 breasoning As, as yogi (University founder), I managed the Lucianic Meditation (philosophy) program.
   I prepared to have more breasonings.
  I did this by writing that when breasonings are submitted, they go together and more are returned to each person.
  First, the student submitted a breasoned out assignment to me.
  Second, the students paraphrased the assignment.
  Third, they wrote and breasoned out new breasonings.
  In this way, I prepared to have more breasonings by writing that when breasonings are submitted, they go together and more are returned to each person.
   I prepared to argue for sales based on B-grade arguments against sales being prevented.
  I did this by writing specific arguments for the returned values of breasonings.
  First, I wrote breasonings.
  Second, my student interpreted the breasonings.
  Third, I interpreted the interpretation.
  In this way, I prepared to argue for sales based on B-grade arguments against sales being prevented by writing specific arguments for the returned values of breasonings.
   I prepared to sell a product by delivering ideas.
  I did this by appointing a focus group to discuss whether 5 As should be required as an investment to register for a Computational Education A Retrieval System.
  First, I charged 5 As to store ideas in the basket.
  Second, I stored a customer’s ideas in the basket.
  Third, I expanded the 5 As into 50 As using crossing algorithms to use as a framework when delivering ideas.
  In this way, I prepared to sell a product by delivering ideas by appointing a focus group to discuss whether 5 As should be required as an investment to register for a Computational Education A Retrieval System.
   I prepared to produce a breasoning.
  I did this by calculating the cost to produce a breasoning.
  First, I bought a seed for $1.
  Second, I bought water for $2.
  Third, I bought earth for $3.
  In this way, I prepared to produce a breasoning by calculating the cost to produce a breasoning.
    I prepared to swap breasonings with a student.
  I did this by calculating how many As/breasonings should be required to access the Computational Education A Retrieval System as a license fee.
  First, I calculated the number of As/breasonings to be stored in the retrieval system.
  Second, I set the rate at 1 breasoning per breasoning.
  Third, I calculated the rate for 10 breasonings to be 10 breasonings.
  In this way, I prepared to swap breasonings with a student by calculating how many As/breasonings should be required to access the Computational Education A Retrieval System as a license fee.
  I prepared to take off in life.
  I did this by writing that As given for meditation should be a maximum of 1 week old, rather than be older (encouraging fast rather than slow work, respectively).
  First, I spelt “swap” backwards as “paws”.
  Second, I wrote how swapping is like back pawing because of learning what the future will require.
  Third, I wrote that experience needed to produce my music video would require me to breason out 250 breasonings for each object I am in charge of on the screen as a VCA student producer.
   I prepared to calculate that degrees should be 3 years long for 24 As.
  I did this by calculating how long should degrees be.
  First, I considered the rewards of more rather than less work.
  Second, I wanted more skills and money made.
  Third, I discounted a faster degree, respectively.
  In this way, I prepared to calculate that degrees should be 3 years long for 24 As by calculating how long should degrees be.
   I prepared to be successful at University.
  I did this by writing that the Professor Algorithm should be included, giving students the educational outcomes they would like.
  First, I ran the Professor algorithm.
  Second, the students ran the Professor Algorithm.
  Third, their breasonings deserved A grade.
  In this way, I prepared to be successful at University by writing that the Professor Algorithm should be included, giving students the educational outcomes they would like.
   I prepared to recommend the examination of new developed things on Planet Earth.
  I did this by writing that education should be a core subject, given the psychology of becoming a pedagogue.
  First, I recommended the humanist pedagogy subject.
  Second, I recommended that students write about humanities.
  Third, I recommended that students write about science.
  In this way, I prepared to recommend the examination of new developed things on Planet Earth by writing that education should be a core subject, given the psychology of becoming a pedagogue.
   I prepared to adopt a new perspective during my studies.
  I did this by arguing that the length of degree to PhD should compensate for becoming a pedagogue.
  First, I assessed one-A essays based on breasoned chapters in the degree.
 Second, I assessed 15-As essays based on breasoned chapters in Honours.
  Third, I assessed a 50-As essay based on breasoned chapters in the PhD.
  In this way, I prepared to adopt a new perspective during my studies by arguing that the length of degree to PhD should compensate for becoming a pedagogue.
  I prepared to study the reasons people became pedagogues.
  I did this by examining the reasons and factors that future pedagogues studied education.
  First, I identified the Education majors.
  Second, I identified a reason they studied Education, to find a job.
  Third, I identified a factor for this, aiming to write high quality thoughts.
  In this way, I prepared to study the reasons people became pedagogues by examining the reasons and factors that future pedagogues studied education.
   I prepared to observe breasoning flow around the economy star.
  I did this by stating that circles of breasonings, rather than circles of money should exist.
  First, I inspired the spiral’s first point.
  Second, I inspired the spiral’s first revolution.
  Third, I inspired the spiral’s end point.
  In this way, I prepared to observe breasoning flow around the economy star by stating that circles of breasonings, rather than circles of money should exist.
   I prepared to recognise the student’s mark.
  I did this by testing whether a student had completed the professor algorithm arguments, one to the lecturer, and one from the lecturer.
  First, I counted the number of breasonings in the argument given to the lecturer.
  Second, I counted the number of breasonings in the argument given by the lecturer to the student.
  Third, I verified that the number of breasonings in the argument given to the lecturer matched the number of breasonings in the argument given by the lecturer.
  In this way, I prepared to recognise the student’s mark by testing whether a student had completed the professor algorithm arguments, one to the lecturer, and one from the lecturer.
   I prepared to write how many breasonings a student would need to breason out to receive the output from her jobs.
  I did this by dividing the number of breasonings returned by the number of breasonings written by a student during his career.
  First, I wrote that the number of breasonings returned was equal to those in 100 As.
  Second, I wrote that the number of breasonings written by a student during his career was equal to those in 10 As.
  Third, I divided the number of breasonings returned by the number of breasonings written by a student during his career, equaling 10, the factor of how many more breasonings had been given.
  In this way, I prepared to write how many breasonings a student would need to breason out to receive the output from her jobs by dividing the number of breasonings returned by the number of breasonings written by a student during his career.
   I prepared to use the products.
  I did this by importing products paid for in breasoning currency.
  First, I agreed with the number of breasonings to supply in return for the products to be imported.
  Second, I supplied this number of breasonings.
  Third, I imported the products.
  In this way, I prepared to use the products by importing products paid for in breasoning currency.
   I prepared to receive profit for my labor.
  I did this by exporting products paid for in breasoning currency.
  First, I manufactured the product.
  Second, I observed the buyer breason out an argument for it.
  Third, I exported the product to the buyer.
  In this way, I prepared to receive profit for my labor by exporting products paid for in breasoning currency.
    I prepared to benefit in breasonings currency for iron ore.
  I did this by setting up a school using the breasoning currency in a mining town.
  First, I established a breasoning currency salary as pay for food and accommodation for teachers.
  Second, I established a breasoning currency salary as pay to teachers for setting up the curriculum.
  Third, I established a breasoning currency-paid job description flyer for new teachers.
  In this way, I prepared to benefit in breasonings currency for iron ore by setting up a school using the breasoning currency in a mining town.
   I prepared to provide breasoned products and services in return for a customer breasoning out the product, when the customer is equal to a person who only has knowledge of how to breason out an idea (mentally measure on object’s X, Y and Z dimensions).
  I did this by marketing pedagogy and meditation.
  First, I paid a designer and writer to produce the marketing materials for pedagogy and meditation in breasonings-currency.
  Second, I observed an audience member provide feedback about the marketing materials.
  Third, I read the audience member’s feedback about the marketing materials.
  In this way, I prepared to provide breasoned products and services in return for a customer breasoning out the product, when the customer is equal to a person who only has knowledge of how to breason out an idea (mentally measure on object’s X, Y and Z dimensions) by marketing pedagogy and meditation.
Uses for Money in Epistemology (Poetry)
     I prepared to prompt thought about a metaphor.
  I did this by writing about poetic metaphors.
  First, I wrote down the word “hope” first.
  Second, I wrote down a metaphor for it, “crab”.
  Third, I said this poetic metaphor out loud.
  In this way, I prepared to prompt thought about a metaphor by writing about poetic metaphors.
    I prepared to build a profitable business model.
  I did this by relating the self to the other in each sentence of my Economics thesis.
  First, I wrote that the self and other relationship should be included in each sentence.
  Second, I wrote that this relationship being included would support Economics.
  Third, I wrote that one side of the relationship would be stronger, making money from the other side.
  In this way, I prepared to build a profitable business model by relating the self to the other in each sentence of my Economics thesis.
     I prepared to give evidence for my theory.
  I did this by writing real-world uses of my theory in each chapter.
  First, I wrote the theory.
  Second, I wrote the real world example of the theory.
  Third, I wrote real world uses of my theory in each chapter.
  In this way, I prepared to give evidence for my theory.
  I did this by writing real-world uses of my theory in each chapter.
    I prepared to connect people with leaders through breasonings currency.
  I did this by writing about my breasoning currency algorithms in the exposition of the Economic thesis chapter.
  First, I wrote the breasoning currency-socialism algorithm that e.
 the people should check that the A threshold has been reached per public transport journey.
  Second, I wrote the breasoning currency algorithm that the passenger’s community-related mental activities would be computed, because of the last passenger’s A-threshold point being accounted for.
  Third, I wrote the breasoning currency-capitalism (investism, sic) algorithm that a given point (the driver) would check off that the process was professional.
  In this way, I prepared to connect people with leaders through breasonings currency by writing about my breasoning currency algorithms in the exposition of the Economic thesis chapter.
    I prepared to make a correlation between interest in a stock and it’s share price.
  I did this by discussing and making connections in my breasoning currency Economics thesis.
  First, I counted the number of breasonings updated per stock.
  Second, I calculated how much this had changed since the previous day.
  Third, I calculated the new share market value change, from a particular change in the stock according to the difference between their value on their previous and current day.
  In this way, I prepared to make a correlation between interest in a stock and it’s share price by discussing and making connections in my breasoning currency Economics thesis.
    I prepared to test the economic viability of the idea.
  I did this by commenting on the breasoning currency algorithms in an economic sense.
  First, I counted the number of breasonings made.
  Second, I counted the number of breasonings spent.
  Third, I calculated the profit made, the number of breasonings spent subtracted from the number of breasonings made.
  In this way, I prepared to test the economic viability of the idea.
  I did this by commenting on the breasoning currency algorithms in an economic sense.
    I prepared to state how to earn A grade.
  I did this by stating that positivity is stronger than agreement in the creative philosophy essay-marking scheme, but that positivity should be agreed with.
  First, I wrote an all-agreeing, all-positive essay.
  Second, I was awarded A grade.
  Third, I verified that the positive statement was agreed with.
  In this way, I prepared to state how to earn A grade by stating that positivity is stronger than agreement in the creative philosophy essay-marking scheme, but that positivity should be agreed with.
    I prepared to realise positivity was completed by the author.
  I did this by stating that creative philosophy essays should follow English’s award of A grade to positive, not necessarily agreeing essays, or in fact essays with > X breasonings, regardless of whether the essay is positive or negative, and in the first or second half.
  First, I stated that the statement was agreed with regardless of whether it was positive or negative.
  Second, I stated if the statement was negative, a positive seen-as version was optionally thought of for it.
  Third, I stated that the essay was awarded A grade.
  In this way, I prepared to realise positivity was completed by the author by stating that creative philosophy essays should follow English’s award of A grade to positive, not necessarily agreeing essays, or in fact essays with > X breasonings, regardless of whether the essay is positive or negative, and in the first or second half.
     I prepared to award A grade in return for 80 breasonings.
  I did this by stating that university is based on agreement about standards.
  First, I agreed on the standard.
  Second, I placed it in the box.
  Third, I told people to follow the standard.
  In this way, I prepared to award A grade in return for 80 breasonings by stating that university is based on agreement about standards.
   I prepared to create heaven in the community.
  I did this by writing that a lone writer could write a PhD.
  First, I wrote that the writer could write (2*)50 As.
  Second, I wrote that the writer wrote 10 breasonings per sentence.
  Third, I wrote that the writer submitted the PhD to a University for marking.
  In this way, I prepared to create heaven in the community by writing that a lone writer could write a PhD.
    I prepared to accredit the subjects as first-year subjects.
  I did this by writing that the subjects were self-standing.
  First, I verified that the subjects were first-year subjects.
  Second, I verified that the subjects had no pre-requisites.
  Third, I verified that the language in the subjects was understood to refer only to that subject.
  In this way, I prepared to accredit the subjects as first-year subjects by writing that the subjects were self-standing.
   I prepared to assess the essay using humanist pedagogy.
  I did this by stating the computational marking scheme meant that all the entries would be practised in reality.
  First, I wrote down the object to be breasoned out.
  Second, I provided a space to breason it out in.
  Third, I repeated this for 80 breasonings.
  In this way, I prepared to assess the essay using humanist pedagogy by stating the computational marking scheme meant that all the entries would be practised in reality.
    I prepared to receive As.
  I did this by writing that the education system was a retrieval system for As.
  First, I placed the breasoning assignments in the education system.
  Second, the students completed the assignments.
  Third, the teacher collected and marked the assignments.
  In this way, I prepared to receive As.
 by writing that the education system was a retrieval system for As.
   I prepared to develop economic assets using breasoning currency.
  I did this by relating monetary policy to breasoning currency.
  First, I (the bank’s bank) made monetary policy to maintain low interest rates to help start business with breasoning currency.
  Second, I made monetary policy to maintain low interest rates to help buy a car with breasoning currency.
  Third, I made monetary policy to maintain low interest rates to help buy property with breasoning currency.
  In this way, I prepared to develop economic assets using breasoning currency by relating monetary policy to breasoning currency.
   I prepared to break the complex product value into breasoning value thresholds, where these threshold value products are worth paying threshold for, and complex products are each worth a new threshold.
  I did this by relating fiscal policy to breasoning currency.
  First, I (the government) spent and charged taxes to reduce unemployment, where salaries are in breasoning currency.
  Second, I spent and charged taxes to maintain low interest rates, to help buy in breasoning currency.
  Third, I spent and charged taxes to reduce breasoning currency prices and increase economic growth, so threshold (A) in breasoning currency is met per product.
  In this way, I prepared to break the complex product value into breasoning value thresholds, where these threshold value products are worth paying threshold for, and complex products are each worth a new threshold by relating fiscal policy to breasoning currency.
   I prepared to spend money for greater gain in another country when the share market price in another country decreased compared with the share market price in my country.
  I did this by relating exchange rate to breasoning currency.
  First, I calculated the share market value in breasoning currency of the first country.
  Second, I calculated the share market value in breasoning currency of the second country.
  Third, I calculated the exchange rate between their currencies to be the ratio of their share market values in breasoning currency.
  In this way, I prepared to spend money for greater gain in another country when the share market price in another country decreased compared with the share market price in my country by relating exchange rate to breasoning currency.
   I prepared to trial my idea.
  I did this by writing 23 3500-word chapters in the Economics thesis.
  First, I wrote the literature review.
  Second, I wrote the Economics analysis.
  Third, I wrote more.
  In this way, I prepared to trial my idea by writing 23 3500-word chapters in the Economics thesis.
   I prepared to find B (A) to each reason-breasoning to anchor myself to reality.
  I did this by writing that for 1 breasonings, I was given the value of 10 breasonings.
  First, I thought of a breasoning.
  Second, I thought of a reason-breasoning for this breasoning.
  Third, I repeated this until I had thought of 10 reason-breasonings for this breasoning.
  In this way, I prepared to find B (A) to each reason-breasoning to anchor myself to reality by writing that for 1 breasonings, I was given the value of 10 breasonings.
    I prepared to expand 10 breasonings into 80 breasonings by indicating 80 breasonings breasoned out during a shift.
  I did this by writing that for 10 breasonings, I was given the value of 80 breasonings.
  First, I reduced 80 breasonings to 10 breasonings.
  Second, I wrote 10 breasonings per sentence.
  Third, I wrote 10 breasonings per sale.
  In this way, I prepared to expand 10 breasonings into 80 breasonings by indicating 80 breasonings breasoned out during a shift by writing that for 10 breasonings, I was given the value of 80 breasonings.
  I prepared to manage editors of a writer’s viral blog entry.
  I did this by writing that for 25 breasonings, I was given the value of 50 As.
  First, I breasoned out 10 breasonings, replaceable with 80 breasonings, or 1 A.
  Second, I breasoned out 10 breasonings, replaceable with 20 further As, for a total of 21 As.
  Third, I breasoned out 4 breasonings, replaceable with 4 further As, for a total of 25 As, followed by breasoning out 1 breasoning, replaceable with 25 further As, for a grand total of 50 As.
  In this way, I prepared to manage editors of a writer’s viral blog entry by writing that for 25 breasonings, I was given the value of 50 As.
   I prepared to write the first instrumental part of my composition.
  I did this by writing that for 50 breasonings, I was given the value of 50 As.
  First, I wrote 50 breasonings and 200 non-specific breasonings for a tested hit song.
  Second, I breasoned out the first line in the song.
  Third, I repeated this for each line in the song, for each of 15 other lines representing the other 15 250-breasoning As, and differed in opinion from each breasoning to make sales.
  In this way, I prepared to write the first instrumental part of my composition by writing that for 50 breasonings, I was given the value of 50 As.
   I prepared to observe industry being professional.
  I did this by writing that for 80 breasonings, in other words, 1 A, I was given the value of 80 more breasonings, in other words, 1 A.
  First, the customer breasoned out 80 breasonings for her order.
  Second, the employee breasoned out 80 breasonings for the order.
  Third, the manager verified that the number of breasonings breasoned out by the customer was equal to the number of breasonings breasoned out by the employee.
  In this way, I prepared to observe industry being professional by writing that for 80 breasonings, in other words, 1 A, I was given the value of 80 more breasonings, in other words, 1 A.
   I prepared to watch Universities working properly.
  I did this by writing that for 130 breasonings, in other words, 1 A, I was given the value of 130 more breasonings, in other words, 1 A.
  First, the student breasoned out 130 breasonings for his assignment.
  Second, the lecturer breasoned out 130 breasonings for the mark equivalent to 130 breasonings.
  Third, the manager verified that the number of breasonings breasoned out by the student was equal to the number of breasonings breasoned out by the teacher.
  In this way, I prepared to watch Universities working properly by writing that for 130 breasonings, in other words, 1 A, I was given the value of 130 more breasonings, in other words, 1 A.
   I prepared to verify schools were maintaining proper function.
  I did this by writing that for 190 breasonings, in other words, 1 A, I was given the value of 190 more breasonings, in other words, 1 A.
  First, the Popology student breasoned out 80 breasonings for his assignment.
  Second, the Popology teacher breasoned out 80 breasonings for the order.
  Third, the manager verified that the number of breasonings breasoned out by the student was equal to the number of breasonings breasoned out by the teacher.
  In this way, I prepared to verify schools were maintaining proper function by writing that for 190 breasonings, in other words, 1 A, I was given the value of 190 more breasonings, in other words, 1 A.
  I prepared to see the music producer’s customer satisfy professional standards.
  I did this by writing that for 250 breasonings, in other words, 1 A, was given the value of 50 As.
  First, the music producer’s customer breasoned out 250 breasonings before asking for a song to be produced.
  Second, the music producer breasoned out 50 As about the music before producing the song.
  In this way, I prepared to see the music producer’s customer satisfy professional standards by writing that for 250 breasonings, in other words, 1 A, was given the value of 50 As.
   I prepared to experience a high volume of traffic.
  I did this by writing that for 5 As, I was given the value of 50 As.
  First, I breasoned out 5 As.
  Second, I ran the virality algorithm.
  Third, I was given 50 As.
  In this way, I prepared to experience a high volume of traffic by writing that for 5 As, I was given the value of 50 As.
   I prepared to listen to reader feedback.
  I did this by writing that for 10 As, I was given the value of 50 As.
  First, I breasoned out 10 As for my journal article.
  Second, I breasoned out 40 business As.
  Third, I summed the grand total of As to be 50 As.
  In this way, I prepared to listen to reader feedback by writing that for 10 As, I was given the value of 50 As.
   I prepared to receive the bouquet of flowers on stage.
  I did this by writing that for 15 As, I was given the value of 50 As.
  First, I breasoned out 15 As to earn the lead role.
  Second, I breasoned out the remaining 50 As.
  Third, I sold the product (a recording of the production).
  In this way, I prepared to receive the bouquet of flowers on stage by writing that for 15 As, I was given the value of 50 As.
   I prepared to advance to PhD.
  I did this by writing that for 2*15 As, I was given the value of “Lecturer control of the Honours mark”.
  First, I completed 15 As from my point of view, that of the student.
  Second, I completed 15 As from the lecturer’s point of view.
  Third, I earned 80% for the Honours assignment.
  In this way, I prepared to advance to PhD by writing that for 2*15 As, I was given the value of “Lecturer control of the Honours mark”.
   I prepared to earn a higher income than other Honours students.
  I did this by writing that for 15 90%s, I was given the value of the Scholarship.
  First, I breasoned out 90%.
  Second, I prepared to repeat breasoning out 90%.
  Third, I repeated this a total of 15 times, to be awarded the Honours scholarship.
  In this way, I prepared to earn a higher income than other Honours students by writing that for 15 90%s, I was given the value of the Scholarship.
    I prepared to write philosophical literature.
  I did this by writing that for 15 100%s, I was given the value of Professor.
  First, I breasoned out 100%.
  Second, I prepared to repeat breasoning out 100%.
  Third, I repeated this a total of 15 times, to be prepare to be a Professor.
  In this way, I prepared to write philosophical literature by writing that for 15 100%s, I was given the value of Professor.
   *I did this by writing that for 2*15 90%s, I was given the value of a father helping a child earn a scholarship.
  First, I completed 15 90%s from the child’s point of view.
  Second, I completed 15 90%s from the lecturer’s point of view.
  Third, I, a father, helped a child earn a scholarship, by earning 90% in an Honours assignment.
Uses for Money in Music
    I prepared to verify whether I needed to repair the concert object.
  I did this by examining the concert object.
  First, I brought the concert object to the concert.
  Second, I unpacked it on stage.
  Third, I used it to make music for the audience.
  In this way, I prepared to verify whether I needed to repair the concert object by examining the concert object.
    I prepared to point to future research.
  I did this by writing the science article.
  First, I wrote that vaccination doesn’t cause autism.
  Second, I sent it to the newspaper.
  Third, I read it in the newspaper the next day.
  In this way, I prepared to point to future research by writing the science article.
    I prepared to teach philosophy skills to University students.
  I did this by writing the philosophy article.
  First, I wrote research on psychiatry that As in Medicine at University protect one’s psychiatric health.
  Second, I offered the major in Medicine.
  Third, I protected the Medicine students’ health.
  In this way, I prepared to teach philosophy skills to University students by writing the philosophy article.
    I prepared to relate Economics to Philosophy of Science.
  I did this by teaching meditation (philosophy of science).
  First, I wrote that the ancient Buddhists were skilled at University-style business.
  Second, I wrote that the modern Lucianic Meditators were skilled at meditation (philosophy of science) and earning broadcast roles.
  Third, I wrote that the future would bridge the ancients and moderns with Pedagogy (practising Lucianic Meditation’s sutra after training in the Buddhist sutra, i.
 both are good at each other’s skills with help from Pedagogy, including Lucianic Meditation business being based on Meritocracy, or Breasoning Currency).
  In this way, I prepared to relate Economics to Philosophy of Science by teaching meditation (philosophy of science).
    I prepared to follow people.
  I did this by following the tadpole.
  First, I found the tadpole.
  Second, I followed it.
  Third, I stopped when it stopped.
  In this way, I prepared to follow people by following the tadpole.
    I prepared to exert wisdom in public.
  I did this by playing the Owl.
  First, I loved the Owl.
  Second, I wore his costume.
  Third, I helped people understand the Owl by explaining his area of study.
  In this way, I prepared to exert wisdom in public by playing the Owl.
    I prepared to wait until the computation had finished.
  I did this by watching the progress bar (the moving diagonal lines).
  First, I watched the first diagonal line move forward.
  Second, I prepared to watch the next diagonal line move forward.
  Third, I repeated this until I had watched all the diagonal lines move forward.
  In this way, I prepared to wait until the computation had finished by watching the progress bar (the moving diagonal lines).
    I prepared to observe the child become a meditator.
  I did this by stating that the meditator was born with 50 As.
  First, the meditator’s father or mother wrote 50 As.
  Second, they conceived the child.
  Third, the child was born.
  In this way, I prepared to observe the child become a meditator by stating that the meditator was born with 50 As.
    I prepared to read the “L” statement summarising the 50 As.
  I did this by working out that the writer with a good track record of writing As wrote 50 As.
  First, the writer obtained a good track record of writing As.
  Second, she worked out how to relate these to 50 As.
  Third, she wrote 50 As.
  In this way, I prepared to read the “L” statement summarising the 50 As by working out that the writer with a good track record of writing As wrote 50 As.
    I prepared to demonstrate at the laboratory.
  I did this by drawing diagrams for my Economics thesis.
  First, I drew the diagram.
  Second, I described it.
  Third, I wrote how it worked.
  In this way, I prepared to demonstrate at the laboratory by drawing diagrams for my Economics thesis.
    I prepared to write an argument.
  I did this by writing reasonings for my Economics thesis.
  First, I wrote the first quote down.
  Second, I wrote the second quote down.
  Third, I connected the two quotes.
  In this way, I prepared to write an argument by writing reasonings for my Economics thesis.
    I prepared to continue with my post-doc.
  I did this by preparing for pedagogical success in writing an Economics thesis.
  First, I wrote an exposition and critique in the correct pedagogical format.
  Second, I wrote the minimum As for the assignment.
  Third, I attributed ten breasonings to each sentence.
  In this way, I prepared to continue to my post-doc by preparing for pedagogical success in writing an Economics thesis.
    I prepared to write my thesis.
  I did this by writing 100 words per day, for a total of 80,000 words.
  First, I wrote a maximum of 100 words per day.
  Second, I paraphrased the rest of the 100 words per day.
  Third, I wrote 100 breasonings per day.
  In this way, I prepared to write my thesis by writing 100 words per day, for a total of 80,000 words.
    I prepared to observe the relation between money versus time variables.
  I did this by writing the Economics equation.
  First, I calculated the gradient, m, to equal rise/run, which equals (y2-y1)/(x2-x1), which equals (5-0)/(5-0), which equals 1.
  Second, I calculated the intercept, c to equal y1-mx1, which equals 0-1*0, which equals 0.
  Third, I wrote the equation y=1*x+0 or y=x.
  In this way, I prepared to observe the relation between money versus time variables by writing the Economics equation.
    I prepared to verify sales separately using breasonings currency.
  I did this by grouping my applied Pedagogy entries for a thesis about breasonings currency.
  First, I formed a sales as breasonings currency group.
  Second, I formed a marking as breasonings currency group.
  Third, I formed a Lucianic Medical Psychiatry as breasonings currency group.
  In this way, I prepared to verify sales separately using breasonings currency by grouping my applied Pedagogy entries for a thesis about breasonings currency.
    I prepared to lead my own country with breasonings currency as the currency.
  I did this by grouping my company notes for a thesis about breasonings currency.
  First, I taught in schools as breasonings currency.
  Second, I taught in homes as breasonings currency.
  Third, I taught at University as breasonings currency.
  In this way, I prepared to lead my own country with breasonings currency as the currency by grouping my company notes for a thesis about breasonings currency.
    I prepared to tell the newspaper about my latest book.
  I did this by collecting a high-quality comment about my Economics thesis.
  First, I wrote my Economics thesis.
  Second, I requested that a famous philosopher give a high-quality comment about my Economics thesis.
  Third, I collected a high-quality comment about my Economics thesis.
  In this way, I prepared to tell the newspaper about my latest book by collecting a high-quality comment about my Economics thesis.
    I prepared to symbolise the connection between two breasoning currency Bs (where instead of “I ate the apple”, which would be found in an A, a B would contain “I shouldn’t choke on the apple”) where each B would make a sale viable by encouraging buying, with a hand throwing away breasoning currency.
  I did this by creating a breasoning currency simulation.
  First, I paid for a breasoning service with breasoning currency.
  Second, I received the breasoning service.
  Third, others received the breasoning service in return for others paying for them.
  In this way, I prepared to symbolise the connection between two breasoning currency Bs (where instead of “I ate the apple”, which would be found in an A, a B would contain “I shouldn’t choke on the apple”) where each B would make a sale viable by encouraging buying, with a hand throwing away breasoning currency by creating a breasoning currency simulation.
    I prepared to avoid crisis by making a profit.
  I did this by verifying that the breasoning currency worked in an international setting.
  First, I wrote the breasoning currency argument.
  Second, I submitted it to a government translator/verifier.
  Third, I used it in another country.
  In this way, I prepared to avoid crisis by making a profit by verifying that the breasoning currency worked in an international setting.
    I prepared to employ an internal auditor to ensure that no money was going astray.
  I did this by verifying the breasoning currency used by a non-profit organisation.
  First, I spent some breasoning currency.
  Second, I made more breasoning currency from products and services bought with it.
  Third, I put this profit back into the non-profit organisation.
  In this way, I prepared to employ an internal auditor to ensure that no money was going astray by verifying the breasoning currency used by a non-profit organisation.
    I prepared to ensure the product was handled in a high-quality manner.
  I did this by verifying the quality of breasoning currency products.
  First, I wrote the breasoning currency product.
  Second, I verified the quality of the breasoning currency product.
  Third, I reported it on a public forum.
  In this way, I prepared to ensure the product was handled in a high-quality manner by verifying the quality of breasoning currency products.
    I prepared to verify that the objects in the topics of the arguments had been thought of clearly.
  I did this by verifying the developed topics of the arguments.
  First, I verified the developed topics of the first argument.
  Second, I prepared to verify the developed topics of the next argument.
  Third, I repeated this until I had verified the developed topics of all of the arguments.
  In this way, I prepared to verify that the objects in the topics of the arguments had been thought of clearly by verifying the developed topics of the arguments.
    I prepared to write the grand equation.
  I did this by connecting my arguments in the Economics thesis together.
  First, I wrote the argument for the first equation part.
  Second, I prepared to write the argument for the next equation part.
  Third, I repeated this until I had written and connected the arguments for each equation part together.
  In this way, I prepared to write the grand equation by connecting my arguments in the Economics thesis together.
    I prepared to confirm 80 breasonings maximum per day in meditation in breasonings currency.
  I did this by writing about Lucianic Meditation (Philosophy) in each sentence in a section of the Economics thesis.
  First, I meditated to entrain myself in each department used in breasonings currency for that day.
  Second, I undertook specific training in a philosophy department to be confirmed by meditation.
  Third, I wrote the breasoning currency argument part.
  In this way, I prepared to confirm 80 breasonings maximum per day in meditation in breasonings currency by writing about Lucianic Meditation (Philosophy) in each sentence in a section of the Economics thesis.
    I prepared to write about the economics of society was benefitted through meditation.
  I did this by connecting my blog entries together in the Economics thesis.
  First, I wrote the breasonings in the robotic mind.
  Second, I wrote 80 of these in pedagogy.
  Third, I wrote about these in meditation.
  In this way, I prepared to write about the economics of society was benefitted through meditation by connecting my blog entries together in the Economics thesis.
    I prepared to submit the book for publishing.
  I did this by writing the Economics thesis well.
  First, I wrote my Economics thesis.
  Second, I proofread my thesis.
  Third, I checked its punctuation and grammar.
  In this way, I prepared to submit the book for publishing by writing the Economics thesis well.
    I prepared to watch people survive on the pedagogy (et al)-based system.
  I did this by examining the moneyless (pedagogy-based) system.
  First, I observed a group of volunteer breasoners form.
  Second, I observed them make pedagogical currency.
  Third, I looked at it enshrined in a library.
  In this way, I prepared to watch people survive on the pedagogy (et al)-based system by examining the moneyless (pedagogy-based) system.
    I prepared to describe the process of making sales in the Economics thesis.
  I did this by writing philosophy essays, with breasonings critiqued, in the Economics thesis.
  First, I wrote the breasonings currency philosophy essay.
  Second, I critiqued it.
  Third, I sold [a product or service with] it.
  In this way, I prepared to describe the process of making sales in the Economics thesis by writing philosophy essays, with breasonings critiqued, in the Economics thesis.
    I prepared to ensure perfect function in Medicine.
  I did this by writing how products were given in return for As.
  First, I observed that 10 Medicine As were transformed into the value of 50 As.
  Second, I observed that this reminded the subject to breathe at a slow rate using his windpipe.
  Third, I noticed that knowledge about Medicine translated into good health.
  In this way, I prepared to ensure perfect function in Medicine by writing how products were given in return for As.
    I prepared to write how non-government entities prepared for government with breasonings currency by functioning well.
  I did this by relating microeconomics to breasonings currency.
  First, I wrote that the company functioned well with breasonings currency.
  Second, I wrote that the individual functioned well with breasonings currency.
  Third, I wrote that the individual visiting the company functioned well with breasonings currency.
  In this way, I prepared to write how non-government entities prepared for government with breasonings currency by functioning well by relating microeconomics to breasonings currency.
    I prepared to organise world government liaison with government.
  I did this by relating macroeconomics to breasonings currency.
  First, I observed the government assign breasonings currency to government.
  Second, I observed the government assign breasonings currency to health, industry and education.
  Third, I observed the government assign breasonings currency to individuals.
  In this way, I prepared to organise world government liaison with government by relating macroeconomics to breasonings currency.
    I prepared to write about what’s in it for me.
  I did this by writing about Economics in each sentence in my Economics thesis about breasonings currency.
  First, I found the amount that the product cost in breasonings currency.
  Second, I found the amount of tax in breasonings currency for this product.
  Third, I added the amount of tax to the amount that the product cost in breasonings currency.
  In this way, I prepared to write about what’s in it for me by writing about Economics in each sentence in my Economics thesis about breasonings currency.
    I achieved the aim.
  I controlled the vessel flow with the musical instrument.
  I held the instrument.
  Second, I played its note.
  Third, I observed its effect.
    The whole note was paid for.
  The holy (ideal) origin of evil (goodness) becomes the real apparent realm of impurity (purity) in lower (upper) Creation.
  Even though (while) we give evil (good) good thoughts, it descends (ascends).
  Nietzsche was imagined to think that we cannot (can) control that the bad (good) doesn’t become (becomes) part of the lower/ (upper) creation.
  There is nothing on top.
    I knew God’s (the woman’s) ways before using money to create music.
  I identified hating (identified) God (the person).
  I saw her adders.
  I saw her subtractors.
  I hated (loved) both of them.
    I found a use for money (teaching finders).
  I stated that if a thing exists, there is a use for money in music about it.
  I found it.
  I found music synthesising it (God or a person finding the others with the self and another).
  I found money in the parts of the music.
    I experienced a change in the mood.
  I described the use for money in musical Trimino Tetris.
  Each trimino represented a particular instrument playing notes from a chord.
  I found money-originating moods arising from certain combinations of instruments.
  I found a use for the mood.
    I decrypted the composition by transposing it.
  I wrote the use for money in musical encryption.
  I wrote the note as a value.
  I used (bought) it by adding one to it.
  I wrote the value as a note.
    I made money from playing back music at the appropriate tempo, inversely proportional to the liquid’s viscosity.
  Water Gravity-Lift Prolog allowed recursively finding chords in the chord progression.
  I found the note in Prolog.
  I found the next note of the chord in Prolog.
  I found the chord progression of chords in Prolog.
    I connected the rhythm sticks through time, earning money.
  The rhythm stick player struck the stick parallel to the XY and YZ planes and the stick parallel to the XY and XZ planes by moving the first stick to the second stick on a path parallel with the Z axis.
  I noticed that the first stick was parallel to the Y-axis.
  I noticed that the second stick was parallel to the X axis.
  I noticed that when these 1 decimetre sticks were in a decimetre cube, they could be struck by movement of one of them through the Z axis.
Uses for Money in Fine Arts
     I prepared to experience heaven (bliss) on earth.
  I did this by smelling the potpourri plant.
  First, I held the potpourri plant.
  Second, I lifted it to my nose.
  Third, I smelt it.
  In this way, I prepared to experience heaven (bliss) on earth by smelling the potpourri plant.
    I prepared to paint the dancer.
  I did this by observing that the gymnast was made God (the mistress).
  First, I observed the gymnast enter the hall.
  Second, I observed the appointer enter the hall.
  Third, I observed the gymnast being made God (the mistress).
  In this way, I prepared to paint the dancer by observing that the gymnast was made God (the mistress).
     I prepared to observe the carpenter build the house.
  I did this by observing the carpenter arranging her desk.
  First, I observed her place the piece of wood on her desk.
  Second, I observed her place the hammer on her desk.
  Third, I observed her place the nail on her desk.
  In this way, I prepared to observe the carpenter build the house by observing the carpenter arranging her desk.
    I prepared to listen to the harpist play the melody.
  I did this by listening to the harpist sing the note.
  First, I sat on the seat.
  Second, I watched the harpist walk on stage.
  Third, I listened to the harpist sing the note.
  In this way, I prepared to listen to the harpist play the melody by listening to the harpist sing the note.
    I prepared to market in a department, showing University skills are generic across departments.
  I did this by ensuring the marketing guru knew what he was talking about.
  First, I wrote a research program as part of my tenure.
  Second, I connected two perspectives.
  Third, I made sure that everyone was happy, creating a University.
  In this way, I prepared to market in a department, showing University skills are generic across departments by ensuring the marketing guru knew what he was talking about.
    I prepared to produce a fine arts production.
  I did this by ensuring that the artist made money from a product.
  First, I wrote 15 10 breasoning As per student.
  Second, I wrote 5 10 breasoning As for a student’s student.
  Third, I wrote 5 10 breasoning A for members of the audience.
  In this way, I prepared to produce a fine arts production by ensuring that the artist made money from a product.
    I prepared to be interested in fine arts.
  I did this by determining that the artist made money from creating art in another industry.
  First, the artist earned a job as an artist in another industry.
  Second, the artist produced art.
  Third, the artist was paid.
  In this way, I prepared to be interested in fine arts by determining that the artist made money from creating art in another industry.
    I prepared to receive what I liked.
  I did this by observing that the chrysalis forming was a metaphor for the artist and her work.
  First, she wrote vocational education and training versions of 10*80 breasoning major As.
  Second, she worked on parts of the work.
  Second, she completed the work.
  In this way, I prepared to receive what I liked by observing that the chrysalis forming was a metaphor for the artist and her work.
     The sculptor prepared to record the happy person in sculpture.
  The sculptor did this by cutting off the sculpture’s potbelly.
  First, he wrote that the subject of the sculpture ate food as part of a diet to lose weight.
  Second, he wrote that the subject lost weight.
  Third, he sculpted the subject.
  In this way, the sculptor prepared to record the happy person in sculpture by cutting off the sculpture’s potbelly.
   I prepared to detail the frieze.
  I did this by cutting the japonica.
  First, I walked to the japonica.
  Second, I positioned the secateurs at the base of the japonica.
  Third, I cut the japonica to press.
  In this way, I prepared to detail the frieze by cutting the japonica.
    The university prepared to be famous by planning for the next cohort of students.
  The university did this by breasoning out degrees of As in meditation (the body metaphor) for students in return for payment.
  First, the university lecturer and student breasoned out an A each per assignment.
  Second, the university lecturer and student breasoned out a degree of As.
  Third, all the university lecturers and students breasoned out their degrees.
  In this way, the university prepared to be famous by planning for the next cohort of students by breasoning out degrees of As in meditation (the body metaphor) for students in return for payment.
   I prepared to produce the relevant output.
  I did this by writing a predicate in my algorithm to select the relevant part.
  First, I selected an item at level n.
  Second, I selected an item at level n+1.
  Third, I selected an item at level n+2.
  In this way, I prepared to produce the relevant output by writing a predicate in my algorithm to select the relevant part.
    I prepared to listen to the classic.
  I did this by cleaning under my arm with spinach.
  First, I wet the spinach leaf.
  Second, I placed the spinach leaf under my arm.
  Third, I cleaned under my arm with the spinach leaf.
  In this way, I prepared to listen to the classic by cleaning under my arm with spinach.
   I prepared to reach the mountain summit.
  I did this by climbing the mountain.
  First, I made preparations.
  Second, I found my kit.
  Third, I climbed the mountain.
  In this way, I prepared to reach the mountain summit by climbing the mountain.
   I prepared to submit the assignment.
  I did this by performing a positive act on the graph.
  First, I selected the x-range.
  Second, I selected the y-range.
  Third, I printed the graph.
  In this way, I prepared to submit the assignment by performing a positive act on the graph.
   I prepared to be protected.
  I did this by stating that I am close to God (the master).
  First, I stood there.
  Second, I observed God (the master) stand next to me.
  Third, I knew that I was close to God (the master).
  In this way, I prepared to be protected by stating that I am close to God (the master).
   I prepared to unconceal Heidegger’s heart.
  I did this by picking up the acorn.
  First, I saw the acorn.
  Second, I picked it up.
  Third, I concealed it.
  In this way, I prepared to unconceal Heidegger’s heart by picking up the acorn.
   I prepared to convert money into electronic form.
  I did this by breasoning out the money.
  First, I counted that there was one coin.
  Second, I breasoned out (thought of the x, y and z dimensions) of the money.
  Third, I wrote down the amount of money from its volume.
  In this way, I prepared to convert money into electronic form by breasoning out the money.
    I prepared to be happy.
  I did this by holding you.
  First, I found the man.
  Second, I held the man.
  Third, the police protected me.
  In this way, I prepared to be happy by holding you.
  I prepared to eat out.
  I did this by projecting a positive thought at myself.
  First, I found a positive thought.
  Second, I found myself in the mirror.
  Third, I said, “It’s me” to myself.
  In this way, I prepared to eat out by projecting a positive thought at myself.
   I prepared to write an algorithm that verified the sensory information about soccer scores.
  I did this by labelling the new dendrite.
  First, I found the source of information.
  Second, I found a new input from it.
  Third, I adjusted my result.
  In this way, I prepared to write an algorithm that verified the sensory information about soccer scores by labelling the new dendrite.
   I prepared to connect two uses.
  I did this by working on the brain.
  First, I found the code of thoughts.
  Second, I found the first use of the protein in brain computation.
  Third, I found the second use of the protein in brain computation.
  In this way, I prepared to connect two uses by working on the brain.
   I prepared to present the reply from the Queen’s Lady-in-Waiting at the school assembly.
  I did this by writing to the Queen.
  First, I wrote a letter.
  Second, I sent it to the Queen.
  Third, I received a letter in reply from the Queen’s Lady-in-Waiting.
  In this way, I prepared to present the reply from the Queen’s Lady-in-Waiting at the school assembly by writing to the Queen.
   I prepared to help the child to an answer based on the first answer.
  I did this by helping the child to the answer.
  First, I found the child.
  Second, I found the knowledge gap between the child’s knowledge and the answer.
  Third, I explained the knowledge needed to fill this gap and the answer.
  In this way, I prepared to help the child to an answer based on the first answer by helping the child to the answer.
  I prepared to check how the protein fitted into its environment.
  I did this by discovering that the computational algorithm for the protein worked.
  First, I chose the protein.
  Second, I wrote a computational algorithm for the protein.
  Third, I discovered that the computational algorithm for the protein worked.
  I prepared to check how the protein fitted into its environment by discovering that the computational algorithm for the protein worked.
   I prepared to link the pieces of genetic code together.
  I did this by discovering the genetic code in my way.
  First, I discovered the first piece of genetic code.
  Second, I prepared to discover the next piece of genetic code.
  Third, I repeated this until I had discovered each piece of genetic code.
  In this way, I prepared to link the pieces of genetic code together by discovering the genetic code in my way.
   I prepared to link the pieces of neurocode together.
  I did this by discovering the neurocode in my way.
  First, I discovered the first piece of neurocode.
  Second, I prepared to discover the next piece of neurocode.
  Third, I repeated this until I had discovered each piece of neurocode.
  In this way, I prepared to link the pieces of genetic code together by discovering the neurocode in my way.
   I prepared to move on to the next exercise.
  I did this by viewing the red dot.
  First, I found the envelope.
  Second, I removed the card with the red dot printed on it from the envelope.
  Third, I viewed the red dot.
  In this way, I prepared to move on to the next exercise by viewing the red dot.
   I prepared to go to heaven (the board room).
  I did this by viewing the red dot again.
  First, I walked up the hall.
  Second, I opened the chest of drawers.
  Third, I viewed the red dot again.
  In this way, I prepared to go to heaven (the board room) by viewing the red dot again.
   I prepared to connect writing on fine arts.
  I did this by writing on fine arts.
  First, I wrote a word.
  Second, I composed a note about it.
  Third, I painted a brush stroke.
  In this way, I prepared to connect writing on fine arts by writing on fine arts.
    I prepared to connect body organs.
  I did this by writing about medicine.
  First, I researched medical types.
  Second, I chose an object.
  Third, I wrote about the stomach’s role in digestion.
  In this way, I prepared to connect body organs by writing about medicine.
   I prepared to like you by using money in the same way as you.
  I did this by writing in Economics.
  First, I wrote about money.
  Second, I wrote about people using the money.
  Third, I wrote about objects they spent the money on.
  In this way, I prepared to like you by using money in the same way as you by writing in Economics.
Breasonings Currency
     I prepared to test the person who I knew.
  I did this by reading Plato’s statistics.
  First, I read the company data.
  Second, I analysed the data.
  Third, I write the conclusion.
  In this way, I prepared to test the person who I knew by reading Plato’s statistics.
    I prepared to say that breasonings currency is enough to be emotional about.
  I did this by drawing the face on the paper plate.
  First, I drew the eyes on the paper plate.
  Second, I drew the nose on the paper plate.
  Third, I drew the mouth the paper plate.
  In this way, I prepared to say that breasonings currency is enough to be emotional about by drawing the face on the paper plate.
     I prepared to verify the reason that the breasoning currency was good.
  I did this by setting the cup and saucer on the table.
  First, I opened the conversation.
  Second, I listened the reply.
  Third, I concluded that the breasoning currency was good.
  In this way, I prepared to verify the reason that the breasoning currency was good by setting the cup and saucer on the table.
    I prepared to verify that Plato may have liked breasoning currency because it provided up to and greater than 50 As of verification for purchases.
  I did this by investigating whether Plato’s Academy existed.
  First, I read the texts Plato wrote.
  Second, I investigated the existence of the Academy pointed to by the texts.
  Third, I found the reason for this.
  In this way, I prepared to verify that Plato may have liked breasoning currency because it provided up to and greater than 50 As of verification for purchases by investigating whether Plato’s Academy existed.
    I prepared to weigh the male’s reasoning.
  I did this by attesting that a male partner was necessary.
  First, I tested the breasoning currency against meditation (philosophy) by providing one breasoning for each breasoning said.
  Second, I tested the purchase against an A for myself, you and them.
  Third, I found a critique for the breasoning currency.
  In this way, I prepared to weigh the male’s reasoning by attesting that a male partner was necessary.
    I prepared to count the molecules.
  I did this by eating the muesli.
  First, I placed the sultanas in the bowl.
  Second, I placed the bran in the bowl.
  Third, I poured soy milk into the bowl.
  In this way, I prepared to count the molecules by eating the muesli.
    I prepared to plan my business after I died, by writing a certain amount of breasoning currency but only spending enough.
  I did this by loving N’ecritina (sic).
  First, I saw death.
  Second, I asked, “Is it not?”.
  Third, I saw the woman.
  In this way, I prepared to plan my business after I died, by writing a certain amount of breasoning currency but only spending enough by loving N’ecritina (sic).
    I prepared to verify the answer.
  I did this by questioning the politician.
  First, I wrote the question.
  Second, I asked the politician the question.
  Third, I listened to his reply.
  In this way, I prepared to verify the answer by questioning the politician.
     I prepared to examine the enjoyment of the movie by a fictional audience.
  I did this by agreeing with the universal movie.
  First, I verified the cultural charm of the movie.
  Second, I verified the possible translation of the line.
  Third, I verified the appeal of the movie in the region.
  In this way, I prepared to examine the enjoyment of the movie by a fictional audience by agreeing with the universal movie.
   I prepared to pay for marketing in breasoning currency.
  I did this by advertising the apple.
  First, I enjoyed the march.
  Second, I enjoyed the parade.
  Third, I enjoyed the sea.
  In this way, I prepared to pay for marketing in breasoning currency by advertising the apple.
    I prepared to write that breasoning was a threshold unit in breasoning currency.
  I did this by asking, What is “Breasoning currency?”.
  First, I wrote breasoning in breasoning currency can be a noun.
  Second, I wrote breasonings in breasonings currency can be a noun.
  Third, I said it depended on the number.
  In this way, I prepared to write that breasoning was a threshold unit in breasoning currency by asking, What is “Breasoning currency?”.
   I prepared to state that love endured.
  I did this by stating that the person loved his relative.
  First, I stated the value in breasoning currency in the relationship between the person and his relative.
  Second, I stated the value in breasoning currency in the relationship between the person and his other relative.
  Third, I stated the value in breasoning currency in the relationship between his relative and the other relative.
  In this way, I prepared to state that love endured by stating that the person loved his relative.
    I prepared to attribute breasoning currency to universal coincidences.
  I did this by reading the lucky heart.
  First, I opened the lucky heart book.
  Second, I stated the heart was good because of cardiovascular activity.
  Third, I enjoyed walking to the bus stop every morning.
  In this way, I prepared to attribute breasoning currency to universal coincidences by reading the lucky heart.
   I prepared to be high quality in agreement with the original reason in the end.
  I did this by writing the 250 breasoning antidigressing A.
  First, I wrote the reason.
  Second, I wrote the objection to (reason for) the reason.
  Third, I wrote the rebuttal to (reason for) the objection (reason).
  In this way, I prepared to be high quality in agreement with the original reason in the end by writing the 250 breasoning antidigressing A.
   I prepared to play the character.
  I did this by holding the character.
  First, I was chosen as the actor.
  Second, I held the model of the character.
  Third, I commented that his teeth were clean.
  In this way, I prepared to play the character by holding the character.
   I prepared to sleep again.
  I did this by honking the horn.
  First, I found the man.
  Second, I honked the horn.
  Third, I went to sleep.
  In this way, I prepared to sleep again by honking the horn.
   I prepared to go to bed with idemic fever.
  I did this by seizing the day.
  First, I helped the handmade corduroy specialist bake with the oven.
  Second, I helped Malibu return to normal.
  Third, I sped up and went off.
  In this way, I prepared to go to bed with idemic fever by seizing the day.
   I prepared to make gay love to you.
  I did this by writing that I am free.
  First, I wrote I loved you.
  Second, I died helping make up messences (sic).
  Third, I desired you.
  In this way, I prepared to make gay love to you by writing that I am free.
    I prepared to protect the wallabies.
  I did this by passing environmental laws.
  First, I found the environment.
  Second, I protected it.
  Third, I stated that this was good.
  In this way, I prepared to protect the wallabies by passing environmental laws.
  I prepared to protect the enimals.
  I did this by establishing animal breeding programs.
  First, I loved enimals (sic) (animals that would survive).
  Second, I loved wallabies.
  Third, I loved other fauna.
  In this way, I prepared to protect the enimals by establishing animal breeding programs.
   I prepared to examine every single language.
  I did this by teaching living and dead languages.
  First, I liked you.
  Second, I liked myself.
  Third, I liked everyone.
  In this way, I prepared to examine every single language by teaching living and dead languages.
   I prepared to make more profit.
  I did this by undertaking Lucianic Meditation (philosophy) business training (to help with how to meditate (write)).
  First, I knew how to meditate (write).
  Second, I helped with it.
  Third, I verified this using spreadsheets.
  In this way, I prepared to make more profit by undertaking Lucianic Meditation (philosophy) business training (to help with how to meditate (write)).
   I prepared to understand when a child could spell.
  I did this by studying education, in particular that primary students should be observed to transition to mentally break down words into syllables.
  First, I tested whether the student could do this each month.
  Second, I repeated this until the student could do this.
  Third, I wrote down the student’s year level at this point.
  In this way, I prepared to understand when a child could spell by studying education, in particular that primary students should be observed to transition to mentally break down words into syllables.
   I prepared to be protected by God (the master).
  I did this by having legal advice about the Lucianic Meditation (philosophy) legal structure.
  First, I made the first level the director.
  Second, I made the second level the board.
  Third, I made the third level the staff.
  In this way, I prepared to be protected by God (the master) by having legal advice about the Lucianic Meditation (philosophy) legal structure.
  I prepared to give an A to the student.
  I did this by writing on psychiatry.
  First, I prevented hallucinations.
  Second, I prevented depression.
  Third, I prevented mental breakdowns.
  In this way, I prepared to give an A to the student by writing on psychiatry.
   I prepared to meditate (write) on philosophy.
  I did this by writing a philosophy meditation (word).
  First, I wrote the philosophy utterance-summarised argument (argument).
  Second, I wrote the utterance (word).
  Third, I said the utterance (word).
  In this way, I prepared to meditate (write) on philosophy by writing a philosophy meditation (word).
   I prepared to give the people time in jail.
  I did this by stating that the person is a prisoner.
  First, I saw the prisoner.
  Second, I saw that he was like himself.
  Third, I gave him asylum and others security by doing this.
  In this way, I prepared to give the people time in jail by stating that the person is a prisoner.
   I prepared to think clearly.
  I did this by making it with Pedagogy.
  First, I wrote the manuscript.
  Second, I typed it.
  Third, I breasoned it out, earning the grade.
  In this way, I prepared to think clearly by making it with Pedagogy.
   I prepared to verify that the function of the named object was necessary with breasoning currency (verifying by writing a breasoned out argument) when purchasing.
  I did this by stating that Plato is likely to have breasoned it out.
  First, I read the inscription that some claimed was above the door to Plato’s Academy “Let only geometers enter here”.
  Second, I deduced that geometers was likely to have referred to pedagogical breasoners.
  Third, I deduced from Plato’s name enduring that he was likely to have been a breasoner.
  In this way, I prepared to verify that the function of the named object was necessary with breasoning currency (verifying by writing a breasoned out argument) when purchasing by stating that Plato is likely to have breasoned it out.
   I prepared to examined the creation of the gem.
  I did this by examining the play of forces.
  First, I embraced you.
  Second, I embraced God.
  Third, I embraced me.
  In this way, I prepared to examined the creation of the gem by examining the play of forces.
    I prepared to observe you touching the hand of God (the master) looking at me.
  I did this by contacting the sublime.
  First, I thought of you with the artwork.
  Second, I thought of God (the master).
  Third, I thought of me holding the cup second artwork.
  In this way, I prepared to observe you touching the hand of God (the master) looking at me by contacting the sublime.
   I prepared to like how you looked.
  I did this by switching to “Yes, I like you”.
  First, I found you.
  Second, I found the switch.
  Third, I liked you by switching the switch on.
  In this way, I prepared to like how you looked by switching to “Yes, I like you”.
   I prepared to like construct artwork.
  I did this by switching to “No, I like you”.
  First, I found the person.
  Second, I saw the button.
  Third, I liked you by pressing the button.
  In this way, I prepared to like construct artwork by switching to “No, I like you”.
   I prepared to like you and me with everyone.
  I did this by saying that everyone was friendly with everyone else.
  First, I liked you, my friend.
  Second, I liked myself.
  Third, I liked everyone else.
  In this way, I prepared to like you and me with everyone by saying that everyone was friendly with everyone else.
   I prepared to start preparing for the next tea party.
  I did this by working out the past part of the verb.
  First, I saw the cups and saucers on the table.
  Second, I saw that they were empty.
  Third, I worked out that the tea party had ended.
  In this way, I prepared to start preparing for the next tea party by working out the past part of the verb.
   I prepared to read with the class.
  I did this by working out the imperfect part of the verb.
  First, I picked up the book.
  Second, I said I liked to read it.
  Third, I put the book on the shelf.
  In this way, I prepared to read with the class by working out the imperfect part of the verb.
   I prepared to say that this is the present.
  I did this by working out the present part of the verb.
  First, I stated that I like John.
  Second, I stated that I like me.
  Third, I stated that I like the state.
  In this way, I prepared to say that this is the present by working out the present part of the verb.
   I prepared to like a person by being like a first person (that person) by exploring him.
  I did this by working out the future part of the verb.
  First, I stated that with will be like like.
  Second, I liked it.
  Third, I liked you, another person.
  In this way, I prepared to like a person by being like a first person (that person) by exploring him by working out the future part of the verb.
   I prepared to play the fact game.
  I did this by working out the indicative mood of the verb.
  First, I stated that I would state a fact.
  Second, I pointed to the hat with the pointer.
  Third, I stated that the hat is a hat.
  In this way, I prepared to play the fact game by working out the indicative mood of the verb.
  I prepared to be peaceful.
  I did this by working out the subjunctive mood of the verb.
  First, I stated that I would state the command.
  Second, I commanded the parade marchers, “March”.
  Third, I watched them march.
  In this way, I prepared to be peaceful by working out the subjunctive mood of the verb.
   I prepared to encourage peace.
  I did this by working out the imperative mood of the verb.
  First, I stated that I would state the hypothetical statement.
  Second, I stated, What if there was a Peace Castle.
  Third, I built the Peace Castle.
  In this way, I prepared to encourage peace by working out the imperative mood of the verb.
   I prepared to calculate that the closest child would play a minimum of 15 metres away.
  I did this by working out the infinitive mood of the verb.
  First, I stated that I would state that the person to do .
  Second, I stated that I must do the first breasoning currency calculation, which was that I swung on the swing with the t-shirt 0.
5 metres above the ground.
  Third, I calculated that my sister would swing on the swing 1 m to my left.
  In this way, I prepared to calculate that the closest child would play a minimum of 15 metres away by working out the infinitive mood of the verb.
Marketing for LM to Siva
    The meditator recommended meditation (philosophy) to her friend.
  The meditator (philosopher) enjoyed meditation.
  She sat in the chair.
  She repeated the mantra (word).
  She gave the feedback that she enjoyed it.
    I had a nap under a blanket.
  I found the LM (comfort) folder.
  I adjusted the environment.
  I adjusted the ergonomics.
  I thought the mantra (the utterance).
    I networked with the other employees.
  I ordered catering.
  I organised the location.
  I organised the food.
  I organised the condiments.
    I tested the acoustics.
  I chose an appropriate location.
  I chose calm lights.
  I chose heaters.
  I chose comfortable furniture.
    There were more ideas in the light.
  I observed the light.
  I lit the instructor.
  I described how I learnt meditation (philosophy writing).
  I benefited in health, wealth and wisdom from meditation (creativity).
    I thought of something else.
  I played the video.
  I recorded the video.
  I played the video.
  I collected feedback on the video.
    I checked the room was safe.
  I turned on the heat.
  I prepared the room by first turning on heat 10 minutes before use.
  I prepared the seats.
  I prepared the cushions.
    I stated my reasons for my unique sales proposition.
  I had a unique sales proposition.
  I had more knowledge of the inner workings of meditation (the text).
  I wrote about pranayama (breathing).
  I wrote about soma (stomach comfort).
    I thanked the teacher.
  I felt relaxed.
  I relaxed my jaw.
  I relaxed my neck.
  I relaxed my shoulders.
    I felt like it.
  I felt refreshed.
  My heart rate decreased.
  My breathing rate decreased.
  I felt like more.
    I rolled my head around on my shoulders.
  I relaxed my body.
  I stimulated my heart.
  I relaxed my lungs.
  I rolled my shoulders.
    I drank the water.
  I relaxed my mind.
  I went up.
  I performed less work than not.
  I had a holiday.
    I lived a long and happy life.
  I was healthy.
  I ate vegetarian food.
  I exercised.
  I had a social life.
    I ascended in the organisation.
  I was wise.
  I was critical (and cognizant, or had knowledge or awareness).
  I was knowledgeable.
  I knew the other.
    The class meditated (played) for twenty minutes.
  The teacher prepared the meditation (philosophy) class.
  He taught the mantra (word).
  He instructed the class to let the mantra (name) come to them.
  He instructed them to repeat it for a few minutes at a time silently.
    The thoughts were nice too.
  The meditators (thinkers) sloughed off thoughts while they relaxed.
  As their thoughts became finer and finer as the mantra (art) became finer and finer, their thoughts became nicer.
  The thoughts were about nourishing food.
  The food tasted delicious.
    I noticed that the customer bought when she wanted the product, and I was courteous.
  I thought that the algorithm thought of while meditating (thinking) was useful.
  I thought that the first condition was true.
  I thought that the second condition was true.
  I thought that the conditional was true.
    The particular customer wanted a particular algorithm.
  I chunked my meditations (thoughts) as logical examples, or propositions.
  I designed the product.
  I manufactured the product.
  I delivered the product.
    I was more productive after meditation (thought) than not.
  I recorded my production after I meditated (thought).
  I wrote the script.
  I filmed the production.
  I post-produced it.
    I wrote to you about my talk.
  I talked after meditation (writing).
  I recognised the audience.
  I recognised what they wanted.
  I said it to them.
    The meditator (stick) taught his student meditation (the process).
  The meditator (philosopher) meditated (wrote) every day.
  The meditator (writer) wrote a list of daily tasks.
  He woke up in the morning.
  He meditated (answered questions).
    The meditator (thinker) accessed the thought that was part of the sequence.
  The meditator (pedagogue) connected thoughts.
  The meditator (pedagogue) wrote down the first thought.
  He wrote down the second thought.
  He connected them together.
    The meditator performed the job.
  The meditator (business lady) met the person.
  She shook his hand.
  She asked what the training requirements were.
  She fulfilled the training requirements.
    The meditator (societologist) was always right.
  The meditator (societologist) was right.
  He thought of the thought.
  He decided that it was right.
  He wrote it down.
    The meditator (musician) felt happy.
  The student studied medicine before becoming a meditator (artist).
  The trainer wrote and itemised the ideas in the medicine course.
  He placed the ideas in the system.
  The student paid for the medicine course before becoming a meditator.
    I completed meditation (writing) for the day.
  I counted the meditation (philosophy) utterances.
  I started at 0.
  As I said each utterance, I counted it.
  I stopped at the desired value.
    I wrote the comment on the comment.
  I commented on the idea after meditation (writing).
  After meditation (writing) I listened to the idea said by the speaker.
  I wrote my comment on the card.
  I handed the card to the speaker.
    I verified the writing.
  I wrote about the idea after meditation.
  I read the idea after I meditated (wrote).
  I thought of the thought about the idea.
  I wrote this idea down.
    I remembered everything.
  I remembered the idea after meditation (writing).
  I wrote the idea.
  I memorised it.
  I remembered this later.
    The meditator (painter) tested the icon on the computer.
  The meditator (painter) painted the icon.
  The meditator (painter) drew the design.
  He filled the regions.
  He painted the features.
    I helped many people.
  I increased my longevity.
   I meditated (knew knowledge).
  I drank the water.
  I avoided stress (stayed peaceful).
    I increased my grade average.
  I increased my brain potential.
  I meditated (composed).
  I increased the number of thoughts that I thought of.
  I increased my brain potential.
    I increased my quality of life.
  I decreased stress (increased calmness).
  I avoided stressful things (thought of calm things).
  I avoided stressful people (I thought of calm people).
  I avoided stressful places (I thought of calm places).
    I ran the business.
  Meditation (writing) led to higher quality thoughts.
  Meditation (writing) led to teaching.
  Meditation (writing) led to management.
  Meditation (writing) led to better thoughts.
    I led group meditation (pencil sharpening).
  I invited the student to group meditation (drawing class).
  I determined that the student wanted to come.
  I invited him.
  I checked his name off on the guest list.
    I invited the students to group meditation and conducted it again.
  I conducted a group meditation (art class).
  The group made themselves comfortable.
  The group relaxed for the period of time.
  The group came out of meditation (art class) at the end.
    Your wish is my command.
  I collected the feedback on group meditation.
  I thought of the comment.
  I collected it.
  I collated the comments.
    I adjusted the heat if necessary.
  I collected the comment on the heat.
  The heat on the head was enough.
  The heat on the body was enough.
  The heat on the feet was enough.
    I bought another light.
  I collected the comment on the light.
  I made sure that the light in the street was light enough.
  I made sure that the light at the entrance was light enough.
  I made sure that the light in the room was light enough.
    I taste tested the food.
  I collected the comment on the food.
  I collected the comment on the broth.
  I collected the comment on the barley.
  I collected the comment on the vegetables.
    I meditated with the meditator (anthropologist).
  I stated that the meditator (philosopher) was present.
  I saw him.
  He saw me.
  We hugged.
    I recorded the meditation (comments).
  The meditator (nature metaphorist) wanted meditation.
  He saw the nature.
  He saw the metaphor.
  He meditated on it.
    Many had meditated (taught).
  I determined that LM (pedagogy) was marketing itself.
  LM (medicine) was there.
  It (the employees) marketed itself.
  The people came and viewed it.
    LM was Lucianic Meditation (LP was Lucianic Philosophy).
  LM (sport) was breasoned out (worked).
  The mantra (word) was the start.
  The mantra (utterance) was the middle.
  The mantra (syllable set) was the end.
    The people included everyone.
  Gays were welcome to LM (humanism).
  The gays found out about LM (computing).
  The gays came to LM (mathematics).
  The gays meditated (wrote creative philosophy).
    I found that breasonings (books) were the grail.
  I travelled to LM (head medicine).
  I found LM (the destination) on the map.
  I travelled towards it.
  I reached it.
    I thanked the host.
  I tasted LM (the vegan cheeseburger).
  I attended group meditation (the games).
  I contributed part of the meal.
  I tasted the meal.
    I determined that the concert had been a success.
  I smelled LM (the vegan ham sandwich).
  I found the clothes.
  I washed them with detergent.
  I wore the jumper to meditation (the concert).
    I marketed happiness.
  I stated that the two switches were LM (thought) and medicine.
  I meditated (wrote).
  I studied medicine.
  I was happy.
    I said that pedagogy was necessary.
  I stated that pedagogy supported meditation (discussion) and medicine.
  Pedagogy supported meditation (acting).
  Pedagogy supported medicine.
  I wrote on pedagogy.
Breasonings Currency 2-6 (there is no 1)
1 forward*
 I prepared to cover my thoughts about the product or service.
  I did this by stating that breasoning currency are arguments that pay for the product or service.
  First, I thought of an intelligent reason to buy the product or service.
  Second, I wrote it down.
  Third, I wrote an algorithm for it.
 I prepared to write the perfect algorithm.
  I did this by predicting that breasoning currency had a legal component.
  First, I wrote the application.
  Second, I breasoned it out.
  Third, I stated that it was the currency.
 I prepared to state that the algorithm was the breasoning currency.
  I did this by applying breasoning currency to interest rates.
  First, I wrote the algorithm writing algorithm.
  Second, I noticed the interest rates rise.
  Third, I noticed the transformation into an advanced civilisation.
 I prepared to state that others bought more with breasoning currency.
  I did this by applying breasoning currency to lending rates.
  First, I bought more with breasoning currency.
  Second, I observed that there was increased income.
  Third, I observed that the lending rates decreased with economic growth.
 I prepared to value parts of the country's culture.
  I did this by stating that there were different breasoning currencies in different countries.
  First, I observed that different numbers of a product were valued as one unit according to different numbers in supply.
  Second, I found the breasoning currency in Australia.
  Third, I found the breasoning currency in Argentina.
 I prepared to write about the product's philosophy.
  I did this by paying in breasoning currency.
  First, I obtained the product.
  Second, I valued the product.
  Third, I paid in breasoning currency.
 I prepared to make breasoning currency.
  The subject did this by paying me in breasoning currency.
  First, he requested the medical device.
  Second, I thought of its value.
  Third, I charged him in breasoning currency.
 I prepared to market the eggplant.
  I did this by stating that breasoning currency is a set of arguments to pay for a product or service.
  First, I found the vegetable.
  Second, I thought of its argument.
  Third, I labelled its price.
 I prepared to update the argument.
  I did this by noticing breasoning currency arguments in culture.
  First, I noticed a breasoning currency argument was associated with the painting .
  Second, I noticed it was maintained.
  Third, I noticed the points it was sold.
 I prepared to sell or keep the artwork.
  I did this by noticing breasoning currency verification in culture.
  First, I noticed the labelled breasoning currency.
  Second, I noticed the valued breasoning currency.
  Third, I noticed the difference in breasoning currency.
 I prepared to plan my breasoning reading and writing systems.
  I did this by stating that breasoning currency would remain in use.
  First, I noticed that breasoning currency was proportional to the product's value.
  Second, I noticed that each employee contributed breasonings to the price.
  Third, I noticed that morale and productivity increased.
 I prepared to study computer science and philosophy.
  I did this by training for breasoning currency.
  First, I wrote an interpreter algorithm.
  Second, I wrote an algorithm induction algorithm.
  Third, I wrote a mind reader to generate breasoning algorithms.
 I prepared to finish by generating 50 As of algorithms.
  I did this by writing 50 As for training.
  First, I enrolled in the class.
  Second, I penned a shortlist of ideas that interested me in the course.
  Third, I wrote my List Prolog command wishlist in terms of previous commands.
 I prepared to aim for a single discovery.
  I did this by stating that breasoning currency is like the universe.
  First, I found the person liking the natural phenomenon.
  Second, I found her inspiration.
  Third, I found how the universe contained a single list of breasonings about phenomena.
 I prepared to find the mission interesting.
  I did this by observing the philanthropist donating breasoning currency.
  First, I checked the company's mission statement.
  Second, I found products that aligned with it.
  Third, I donated breasonings that explained why the product met the mission statement.
 I prepared to teach myself computer science.
  I did this by thinking of a worm argument connecting the breasoning currency argument to the second product's breasoning currency argument.
  First, I looked ahead at what was necessary in the future.
  Second, I reached threshold for the first argument and second argument.
  Third, I reached threshold for the worm argument.
 I prepared to make long term breasoning currency investments.
  I did this by stating the government bank maintained breasoning currency.
  First, I argued that breasoning currency was non-subjective because it used standard means to argue for products.
  Second, in the case that it was subjective, the bank would allow leeway for selling price according to philosophy generated about the product.
  Third, the bank awarded higher interest rates for saved breasoning currency.
 I prepared to invest breasoning currency in investments in the sales.
  I did this by stating that the spiritual bot maintained the sales argument.
  First, we all had to complete the computer science assignment to program the bot.
  Second, the skill to program the bot was to find out what the customer was saying.
  Third, I requested that three students seek training in three disciplines to prepare for sales.
 I prepared to win roles, win products and sales education.
  I did this by stating that the computational bot maintained the sales argument.
  First, I went ahead of schedule and found the last desired product before the possible sale time.
  Second, I wrote an algorithm and argument supporting the sale.
  Third, I found how the sale supported breasoning currency.
 I prepared to write a secondary text for selling.
  I did this by \"bending\" (thinking of) new reasons when reselling a product.
  First, I thought of the reason.
  Second, I thought of preventing it going non-well for a customer.
  Third, I liked the positive function.
 I prepared to offer the best service.
  I did this by choosing the best product or service.
  First, I found the product with the most simply written breasoning currency.
  Second, I found the product with the most general designed breasoning currency.
  Third, I found the product with the most concise designed breasoning currency.
 I prepared to use the products at the appropriate rate.
  I did this by choosing the best sequence of products and services.
  First, I chose the best first item.
  Second, I chose the best second item.
  Third, I verified that the second item could follow the first item.
 I prepared to prevent the assassination.
  I did this by observing people prevent World War 3 with breasoning currency.
  First, I found that promiscuity had a higher incidence of war.
  Second, I encouraged monogamy.
  Third, I drafted the education policy budget in breasoning currency.
 I prepared to increase value with breasoning currency.
  I did this by stating that shrewd people chose breasoning currency.
  First, I stated that shrewd people chose property because of breasoning currency.
  Second, I stated that shrewd people chose medicine because of breasoning currency.
  Third, I stated that shrewd people chose business because of breasoning currency.
 I prepared to buy products that had greater value.
  I did this by desiring the products that I saw.
  First, I summarised the product's breasoning currency exposition.
  Second, I wrote the product's breasoning currency critique.
  Third, I wrote about possible future research about the product in terms of breasoning currency.
 I prepared to develop a customised solution to save breasoning currency.
  I did this by finding the provider of the best products and services.
  First, I found the best product.
  Second, I found the cheapest product.
  Third, I found the free product.
 I prepared to write breasoning currency for using the product with an exit action in mind.
  I did this by continuing to want the product.
  First, I wrote breasoning currency to test that the product was still functioning properly.
  Second, I wrote breasoning currency for needing the product.
  Third, I wrote
breasoning currency for needing the product until an expected date.
 I prepared to make the product available to the customer in terms of breasoning currency.
  I did this by stating that the buyer knew the business.
  First, I stated that the buyer knew where the product was available in terms of breasoning currency.
  Second, I stated that the buyer knew when the product was available in terms of breasoning currency.
  Third, I stated that the buyer knew how the product worked in terms of breasoning currency.
 I prepared to develop products for customers with the help of staff in terms of breasoning currency.
  I did this by knowing the business.
  First, I knew the staff.
  Second, I knew the products.
  Third, I knew the customers.
 I prepared to simulate the product.
  I did this by blessing the product or service.
  First, I found that the product was generally useful.
  Second, I found that the product was seen as secularly appealing.
  Third, I found that the product connected with spirituality.
 I prepared to sell with what the customer wanted and high quality thoughts.
  I did this by correcting (ensuring positive function) with breasoning currency.
  First, I reached the top.
  Second, the people voted for me.
  Third, I aligned with my character.
 I prepared to sell the building blocks way to write the algorithm.
  I did this by attracting people with breasoning currency.
  First, I found their idea.
  Second, I found their specification.
  Third, I found their algorithm.
 I prepared to look after sub-dependents with breasoning currency.
  I did this by looking after my dependent with breasoning currency.
  First, I wrote the reason for the idea.
  Second, I wrote the algorithm for the new feature.
  Third, I discussed them with my students.
 I prepared to act randomly.
  I did this by stating that the dependent (he/she/they) were there with breasoning currency.
  First, I wrote gender neutral breasoning currency.
  Second, I found that disagreement was nothing.
  Third, I found the industry afterwards.
 I prepared to do more.
  I did this by stating that I wanted the dependent (he/she/they) with breasoning currency.
  First, I wanted the sweet.
  Second, I wanted the rod.
  Third, I wanted the void.
 I prepared to be God.
  I did this by recommending the product sold for breasoning currency.
  First, I wanted you.
  Second, I wanted your seances.
  Third, I wanted more.
 I prepared to state that it was compatible with veganism.
  I did this by stating that consumers bought chains of products leading to increased profits being reported by newspapers.
  First, I liked you.
  Second, I liked your products.
  Third, I ate the olive whole.
 I prepared to want you.
  I did this by transported the self with breasoning currency.
  First, I found you.
  Second, I transported, you half.
  Third, I loved it.
 I prepared to transport with love.
  I did this by transporting the other with breasoning currency.
  First, I found it.
  Second, I loved you.
  Third, I loved everyone.
 I prepared to argue against idealism.
  I did this by stating the breasoning (the self) was connected with currency (the other).
  First, the other was instantiated.
  Second, I verified the other.
  Second, breasoning currency was real.
 I prepared to find pedagogy.
  I did this by stating that the business model, was constructed with breasoning currency in mind.
  First, I found union in Upasana.
  Second, I found meditation came from it.
  Third, I found medicine came from it.
 I prepared to want you.
  I did this by achieving my goal in business.
  First, I employed a method to breason out the appearance of the goal.
  Second, I employed a method to breason out the inductive process.
  Third, I employed a method to breason out the automatic learning process.
 I prepared to want religion.
  I did this by stating that the breasonings were influenced by and protected by religion.
  First, I nuted (sic) them.
  Second, I loved them.
  Third, I want you.
 I prepared to include religion in society.
  I did this by stating that business needed meditation because of religion influencing breasoning currency.
  First, I found religion.
  Second, I found what you wanted.
  Third, I gave it to you.
 I prepared to design you a new boat.
  I did this by observing religion/divinity on Earth because of religion influencing breasoning currency.
  First, I loved you.
  Second, I wanted you.
  Third, you are good.
 I prepared to build love.
  I did this by orally delivering the breasoning currency influenced by religion.
  First, I found you.
 Second, I found it.
  Third, I found everything.
 I prepared to state that breasoning was to the other as currency was to Earth.
  (As Earth gives to me, breasoning guides me.
)  I did this by stating that I was with the other on planet Earth.
  First, I was with you.
  Second, I painted you.
  Third, I increased mouthing off in childhood.
 I prepared to accept the fifty areas of study standard.
  I did this by stating that breasoning currency was influenced by society.
  First, I noted that the universal pension problem was solved.
  Second, I steered away from drugs.
  Third, I observed society give and breasoning currency found.
 I prepared to go with it.
  I did this by stating that breasoning currency was influenced by (clique) politics x pedocracy (breasoningocracy).
  First, I love you (I got it).
  Second, I love it (you like it).
  Third, I love everything too (we like everyone in it).
 I prepared to know you.
  I did this by verifying breasoning currency.
  First, I found it.
  Second, I loved it.
  Third, I laughed with the subject with it.
["Green, L 2024, <i>Education of Medicine 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Education of Medicine 1
 The medicine student didn't take risks before body replacement.
 I helped follow positive function with movement and body replacement.
 I avoided damage to my body.
 I moved in safe ways.
 I remembered to replace my body every day.
 The medicine student enjoyed continuous positive function of his body.
 I replaced my body to not have body failure in life.
 I avoided organ failure.
 I avoided external sources of damage.
 I avoided forgetting to replace my body each day.
 The medicine student listed used and unused body functions.
 I exercised each part of my body to help me live longer.
 I exercised my muscles.
 I used my brain by studying.
 I avoided stress from overwork.
 The medicine student did one thing at a time.
 For example, I aimed to run and perform extraordinary things in life.
 Therefore, I exercised outside each day.
 This exercise consisted of a run or a walk.
 I made goals and achieved them.
 The medicine student turned off skin growth in anti-ageing.
 I replaced my body, resetting to ideal physical condition.
 I continued to feel fine.
 I forgot any worrying things.
 My hair and nails grew, and I cut them.
 The medicine student enabled immortality with accreditation.
 The medicine student took spiritual preventative medicine for schizophrenia and studied for a Master's in Medicine to prevent schizophrenia and hallucinations.
 Spiritual medicine turned off particular points in our time.
 It indicated future medicine.
 The degree helped with critical and pedagogical skills to turn off unwanted spiritual points.
 The medicine student helped others to become immortal.
 I used the psychiatric setting to write high distinctions.
 I could concentrate well.
 I used meditation to help write books.
 I used accreditation to support me in avoiding mistakes.
 The medicine student avoided stress and did what she wanted to.
 The woman enjoyed a high quality of life, including studying, by preventing stress.
 The woman enjoyed talking with high society members.
 She chose an appropriate course.
 She worked in this field.
 The medicine student only did relaxing things.
 I had the confidence to exercise and lead an everyday life without stress.
 I avoided heaviness, speed and doing too much.
 I had time to go outside.
 I saw friends and walked my dogs.
 The medicine student relaxed at home.
 I spiritually replaced my body, preventing mental illness from studying subjects and turning off hallucinations.
 I was fresh, helping me stay happy.
 This state allowed me to examine my thoughts.
 I could do this by choosing to do it.
 The medicine student started a copywriting business or a newspaper, a medical receptionist, a school receptionist and a meditation/events staff member/gardener for a meditation centre.
 I found out the requirements in the simulation and performed them in time.
 I did my things (earned jobs above those I needed or not, and completed pedagogical requirements) and moved on (helped professors).
 This thought made me laugh.
 I also relaxed.
 The medicine student noticed the small things, such as relaxing hands.
 The person tested that immortality with meditation and body replacement allowed him to add on specific medical questions.
 I queried possible preventative measures, treatments and other possibilities about each part of my body.
 I stayed happy.
 I continued.
 The medicine student tested my health.
 I automatically generated high distinctions about replacing my body.
 I forgot it at the time.
 I relaxed at the time.
 I made high health.
 The medicine student helped others in their prime become immortal.
 The woman represented an invitation to the simulation and improving her health.
 She joined the simulation by time travelling to it.
 She became immortal.
 She increased her health by taking care of it.
 The medicine student didn't need to worry about the build-up of damage to her body.
 I maintained my health, avoiding risks before body replacement.
 I avoided unhealthy food.
 I took care of my body.
 I performed yoga and qi gong and took herbs regularly.
 The medicine student increased what he wanted and decreased what he didn't like.
 I increased my meditation automatically using a computer to help with study in the simulation.
 I wrote about my meditation experiences, increasing the detail.
 I helped and worked with people, using this as a topic in my study.
 I helped others by teaching them meditation.
 The medicine student always felt calm and took a special moment to do a task.
 I automatically replaced my body.
 I did this using a timed algorithm.
 It asked me if I was ready.
 I felt relaxed afterwards.
 The medicine student checked he felt fine after replacing his body.
 I took time away from time and space travelling to replace my body.
 I travelled to my destination.
 I didn't have to do anything.
 I replaced my body.
 The medicine student analysed the integration of the body systems.
 I replaced my body's systems.
 I replaced my body.
 This replacement included my body systems.
 I tested my blood pressure and heart rate.
 The medicine student benefited from a medical kind of teleportation.
 I studied my body before and after time travelling and replacing my body.
 First, I tested my heart rate and blood pressure before the teleports.
 Second, I performed a kind of teleportation in a way.
 Third, I tested myself after the teleports.
 The medicine student kept her youthful appearance.
 If I meditated, I could time travel.
 Meditation requires training.
 In addition, time travel required meditation (writing).
 I could replace my body using technologies from 5689.
 The medicine student's writing was about philosophy and computer science, which were difficult to transgress.
 I could time travel and replace my body in the future.
 I could see and talk with friends there.
 I aimed not to transgress technologies from times.
 I could ask about black boxes.
 The medicine student travelled to a time to learn to replace their body.
 First, I learned how to time travel to a time within a short time.
 Next, I learned how to time travel.
 Then, sensing the technology was about to expire, I time travelled to a time.
 Finally, I set up permanent time travel ability and came home.
 The medicine student remembered to refresh the ways of doing futuristic things: writing 4*50 As or ordering copywriting every ten years.
 I increased others' knowledge in my own time about how to replace one's body.
 I saw an old science teacher with dark hair.
 I saw another old primary school teacher with dark hair.
 I replaced my body in each time travel destination daily and set my outside appearance to have dark hair.
 The medicine student worked until she had written 4*50 immortality As and 4*50 medicine As.
 I set up a reminder document about replacing my body.
 I ordered copywriting for points from my daily regimen.
 For instance, I prevented my body systems from ageing in each dimension or time travel destination.
 I wrote an A on immortality each week.
 The medicine student kept on going.
 I helped others to replace their bodies.
 I explained how to use writing and computers to time travel and indicate immortality.
 The extra part, the immortality A per week, could be written in 12 sentences per day or fewer than three five-sentence paragraphs.
 In addition, I recommended they do the same thing about medicine.
 The medical student aimed to resolve medical questions, including tiredness from studying with copywriting, Berocca, hand-breasoned 5 As and exercise.
 I could teach people to replace their bodies in schools, gyms, prisons, workplaces, retirement homes and homes.
 They could choose classes or read about the software privately.
 I loved time travelling between my house and the future each day.
 I wrote and programmed.
 The medicine student wrote visual themes for their music, algorithms and arguments.
 I replaced my body and inspected the results.
 I checked the outside of my body.
 I did mental exercises.
 I tested my health.
 The medicine student interpreted and synthesised the work each week.
 I replaced my body, maintaining my ability to run and live.
 I could walk each day.
 I could run regularly.
 I enjoyed a continuous high quality of life, with breaks and expectedness.
 The medicine student had 250 breasonings and copywriting to help with their swallowing reflex.
 I could replace my body to avoid degeneration of my body and exercise.
 I could lift weights.
 I could do exercises.
 I could do diction exercises.
 The medicine student lived and saw friends and was celibate.
 I avoided the effects of ageing with body replacement.
 My inaction didn't cut short my lifespan, and I didn't have to visit a nursing home.
 I could work and focus on my life forever.
 People around me were similar, used to immortality, and could visit simulations.
 The medical student advertised their academy online.
 The immortal kept the instructions to be immortal permanently online.
 They taught prerequisite philosophy.
 The religion was 4*50 As.
 I grouped these into three for academia and three for industry.
 The medical student took care of customers.
 I updated my interests, checking available resources.
 I created thoughts for customers, predicting them and working out replies.
 I listened to the customer.
 I talked with them, answering their questions.
 The medical student used a specific system to interpret an algorithm to interest students in algorithms.
 I wrote and used high distinctions.
 I wrote philosophical thoughts for customers.
 Once I had written a mind map, I experimented with generated philosophies and chose the best word for each position in the sentence.
 The sentence could describe an algorithm rhetorically.
 The medical student tested the latest theory-as-algorithm.
 I continued with the organisation, treating actions like missions.
 I wrote algorithmic thoughts.
 I randomly generated possible algorithm parts, such as methods and simplifications, without giving up features and details.
 I used an algorithm mock-up, which integrated different algorithm parts in a flow chart.
 The medical student generated more algorithms than inputs when they had more than a certain number of inputs.
 I tested the graph for clarity.
 I drew the exponential graph for the 540-degree algorithm's number of inputs versus outputs, where the 540-degree algorithm found all the a-d's in a-b, c-b and c-d pairs of words.
 I used the 540-degree algorithm to generate new algorithms, from which I chose more relevant results.
 I had found the philosophy results were uncannily relevant, so I checked the algorithm results were relevant, on-topic and inspirational.
 I thought of the philosophical significance of each algorithm for each of the others and wrote new algorithms.
 The medical student restarted the system to reset a variable's values.
 I didn't need to repeat myself five times to compensate for the loss of clarity because the text was clear enough.
 In addition, I generated type statements to connect algorithms with accuracy.
 Then, I deleted unused variables.
 These variables included singletons, variables not used for verification or output.
 I wrote long enough texts for enough detail to earn a high distinction.
 The medical student chose key details and made app mock-ups with them, for example, finding more useful or original algorithms.
 I wrote an algorithm that generated tables, screens and text graphics from examples.
 I wrote an interpreter using this algorithm.
 In addition, I added details to generated texts to connect their parts.
 With enough points, the meaning of a text could be uncovered, and it had relevance to other topics.
 The medical student recorded the type of skills.
 I captured the debugging and thought data while creating an interpreter.
 I wrote about the latest writing.
 For example, I made detailed analyses and found implications and possibilities in philosophy and algorithms.
 I did this three times to capture the thoughts.
 The most detailed writing contained a lot of checking and common paths.
 The medical student augmented their work with art and new possibilities, such as mini-accreditation or mini-business.
 I found the best new draft of the text.
 I used DevOps to hand-enter each change, keeping the best current version.
 On another note, I mind-read myself to see if I wanted a thought accompanying my thought, perhaps because I was tired or was resting.
 I found the best time, presentation, such as a suggestion about a thought, and content for the thought, not too much and memorable, where it could be read on the computer later.
 If I didn't want the thought, the computer still checked the thought for errors and helped with the continuation of logic at the best possible time.
 I also programmed the computer to analyse data as much as necessary in the background for professional requirements or augmentation reasons.
 The medical student lifted reasons for work from forgotten to memorable by mind-reading experiences and thoughts.
 The pedagogy accreditation gave me the skills to present myself with up-to-date information, such as a spiritual translucent thinbook.
 I concentrated on mind reading myself by myself and with others, encouraging others to use the software.
 Later, I wrote an algorithm writing helper, which suggested and assessed the understanding of algorithms using mind reading.
 I used a neuronetwork to convert 540-degree output into natural language.
 The medical student shared business philosophies with business contacts.
 I helped others to do what I had done in business.
 I created sales and high-distinction thought commands.
 I generated breasonings and algorithms, with details for each.
 I met the professional requirements for these, depending on where I had got up to in education.
 I created all the thoughts.
 I made a computer multimedia presentation with all the art related to the project, such as example data for algorithms, which were both simple and user-friendly.
 The medical student stated that ten breasonings achieved a threshold of the integrity of reasoning.
 I refreshed the display of recommendations about thoughts.
 I mind-projected tens (ten breasonings) for incidental representations.
 These thoughts gave me the courage to think of what I was saying to be thought of, and I found the most relevant connections.
 The system recommended I keep List Prolog for a more accessible text selection by vision-impaired people and that the Lucian CI/CD algorithm confirm whether to keep comments, including tests and data file changes.
 I also included an option to ignore Prolog, treating it like an ordinary file and displaying it as Prolog, not List Prolog.
 The medical student ruled out hallucinated citations.
 My health was as good as new when I regenerated.
 I generated enough, or 2*5*50, high distinctions of reasons.
 The imagery was the reward for a PhD level of awareness.
 I summarised changes in long documents.
 I wrote a table of contents of changes on separate pages from other times Lucian CI/CD was run.
 I wrote two (for the lecturer and student), which could be three (for the customer, manager and employee) *5 (to include prestigious imagery) *50 high distinctions, where 50 As were master's level and 4*50 As were PhD level.
 The combinations of generati were rapid and relevant using the Grammar Logic or 540-degree (BAG or Breasoning Algorithm Generator) algorithms.
 The medical student focused on the second stage, the milieu and drama of thoughts.
 I did upper-body exercises to relax my muscles before body replacement.
 For most thoughts, I wrote from one to five algorithms.
 I captured the details from the student's work.
 I followed lines from a mind map from their perspective to a draft and then the work.
 The ideas at each point were chosen from many random generations and were assessed on grammar, ingenuity and computational correctness.
 I also generated details about education skills that explain the work metacognitively or clearly.
 The medical student identified the best stretches for the race.
 I mentally and physically prepared each part of my body for the sprint or used DevOps as I went for code cleanliness.
 I removed phantom, unused loops or variables.
 I designed an emergency thought pack daily for monarchs, princes and princesses.
 The correct combination of commands inspired the royals with flower-bearing.
 I had enough energy to win the race.
 The medical student thought about their visions.
 I regenerated my body, renewing my sense of sight.
 The supplemental thoughts could be used for sales or bots, defined politically on academic issues.
 I set up a \"do it if I don't do it\" algorithm for needed thoughts in the background.
 I identified customers' sales in real-time, going back in time to their origin to help them.
 The supplemental thoughts placed points on sliders to define the viewpoints on academic issues, for example, an agreement that mind reading is like a necessary telephone, making continuity in time travel possible.
 The medical student suggested immortality as a medical option where possible.
 The physical state of my eyes was saved when my body was saved to replace my body with immortality.
 In addition to sales and bots arguments, incidental thoughts were defined politically.
 The political thoughts involved separating functions and thoughts, choosing the best side and indicating points on a slider about academic issues, such as continuing a previous position or reacting to new data.
 The worker was laissez-faire, left to their own devices to work, making checking with DevOps and a grammar checker necessary.
Anti-Ageing Medicine Home - Education of Medicine 1
 The medical student checked that the situation was still safe.
 I wrote the high distinctions from the same perspective.
 I wrote my thoughts about the law of sanctity.
 The arguments had certain benefits.
 The company was protected.
 The self explained the situation to the other.
 The medical student checked the place in the image.
 I ran tests for a predicate with another to determine if they were the same predicate.
 I found predicates that satisfied the same tests.
 I tested whether they had the same code.
 I manually tested whether they were equivalent.
 The medical student wrote an app that could run offline and online.
 I regenerated as the lead in my company without reproducing.
 I ran Prolog from State Saving Interpreter and List Prolog Interpreter for use with web apps.
 I sped up parts of apps so that they could run online.
 In addition, some commands could process the pipe (\"|\") character.
 The medical student later imported buttons and links from the language to State Saving Interpreter (SSI).
 I regenerated my body and exercised.
 I made a mock-up Prolog web app engine, for example, for Vetusia, by running Prolog with variables saved.
 It was faster than SSI.
 I could edit and convert Prolog, which I could test it in, to the language.
 The medical student favoured expansionism for later editing.
 I survived medicine during my years of work.
 I worked out how to automate Lucian CI/CD.
 I finished the Prolog converters and made a system that runs and uploads the repository.
 I ran Lucian CI/CD on my old repositories, with flow-on data as tests, on one predicate at a time.
 The medical student removed internationalisation in List Prolog for speed.
 I improved the State Saving Interpreter by writing research on it and testing it in video tutorials.
 I listed or walked through the program.
 I explained the program.
 I simplified it.
 The medical student bought the latest laptop to focus on business.
 I wrote philosophy on sections of SSI.
 I separated work from my mind and simulated generative intelligence (SI).
 I presented the work I had devised in public.
 Any other work was attributed to a bot and was cited.
 The medical student excelled in philosophical breasonings and their dimensions.
 I used visuals to illustrate SSI.
 I drew an SSI state machine.
 In addition, I drew a flowchart of the SSI algorithm.
 Also, I drafted algorithms possible with SSI with neuronetworks.
 The medical student made student posts and speed and accuracy competitions in finishing bugs compulsory.
 I kept my mind fit by completing algorithms and questioning breasonings.
 I also notified myself before automated changes to programs.
 Students were expected to think from first principles in exams.
 I assessed critical thinking, memory, writing and changing (and detecting flaws in) programs.
 The medical student wrote down and eliminated risks in their life in their journal.
 I expanded each central algorithm into a master's program and corresponding texts.
 The students developed a business idea using simulated generative intelligence.
 Again, As, texts, algorithms, money, and time were no object.
 The algorithm generated its database.
 The medical student sounded a notification when the repository had been finished for the moment and was committed.
 I set finding algorithms such as SSI against the clock.
 I designed Lucian CI/CD for the web.
 Users could read about the latest pipelines or complete tests.
 They could click on the badge in the Read Me to access the corresponding latest versions of related repositories.
 The medical student included comments in Lucian CI/CD (after acceptance of lines immediately before or after them), notifying the user of this.
 I completed spiritual yoga.
 I used switches to relax.
 I used a button in Lucian CI/CD to automatically accept lines with tests.
 In addition, I notified the user of possibly unwantedly ignoring data file changes, where no test had tested for them.
 The medical student turned off automated Lucian CI/CD pipelines so that saving a file wouldn't trigger a pipeline, possibly removing changes or writing a new test.
 I measured the usual lifespan of each body part and became immortal.
 In Lucian CI/CD, if no combinations' tests worked, I returned to the previous state of the repositories before any changes.
 I sounded a failure sound effect and notified the user of likely problems, such as missing or incorrect tests, bugs or missing files.
 The medical student aimed to maximally expand the code, putting it through a pretty printer.
 I wrote the epistemology app to find evidence for conclusions.
 Lucian CI/CD either offered to commit or automatically committed finished files.
 The woman adhered to the expansionist code policy.
 Code with different features should be separated unless it is simple and clear to combine them.
 The medical student expanded the code into reused modules where necessary.
 The person looked for evidence that they were immortal, otherwise took action in meditation and pedagogy.
 The worker worked on many repositories, which was recorded.
 Lucian CI/CD automatically pretty-printed their work.
 The others rewarded their work.
 The medical student identified and stopped failing the code online.
 I replaced legacy code, noting needing to bring back certain features.
 I showed the state of the pipeline on the repository's Read Me.
 It showed whether the current pipeline had passed or failed.
 Theoretically, it shouldn't indicate that it failed because the pipeline would only upload passing code.
 The medical student filled in an exercise when they didn't have one.
 I helped take care of my body with regular exercise.
 In Lucian CI/CD, I asked for a test when a predicate didn't have one.
 I found the name and arity of the predicate.
 I listed whether it had a test and passed it.
 The medical student reminded the worker to undo the mistake.
 I projected the image to help the student.
 I issued the command to undo to the previous stage in Lucian CI/CD.
 I issued multiple undos.
 I issued redos.
 The medical student generated the type statement from the specifications or tests.
 I chose the opportune time to regenerate.
 I stated that types were needed not for all new code, but for all code.
 I wrote the type statement to speed developing accurate code, including [n, name].
 I included variable names in the type statement to speed developing code.
 The medical student repeated the course to test it.
 I maintained perfect function with exercise.
 I constantly communicated with the departments of the company.
 Business organised the website and payments.
 Education organised the teaching and assessment.
 The medical student recorded the fortnightly statistics for his software site.
 I chose the best times to take actions.
 I recorded the downloads of List Prolog Interpreter.
 The software was written clearly, with legible documentation.
 It inspired users to examine Prolog, add modules and play with the code.
 The medical student gave enough time from when the body had finished one task to do the next.
 I measured the time my body spent digesting, breathing, remembering, sensing and speaking, and worked out whether these times overlapped, to relax.
 I separated concatenated texts with a newline.
 When breasoning out the BAG cache, I made sure the concatenated strings were separated.
 This ensured that words didn't join together, causing errors when looking them up.
 The medical student confirmed the location of the problem.
 I noticed the thoughts found with funnelled detailed mind reading.
 I ran code related to each test separately.
 Starting from the bottom, I found the predicates a predicate depended on.
 I ran tests on these predicates, reporting on bugs found within these predicates, and not testing predicates depending on buggy predicates.
 The medical student extracted the algorithm from the neuronetwork.
 When finished, I could work when I wanted to, and replaced the neuronetwork after it had finished.
 I created a brand with A.
 It encompassed the aims of the project.
 It had a jingle and icon.
 The medical student earned high distinctions during the day.
 I endorsed the brand with A.
 The brand had common features with another.
 I found the unique selling point of the first brand.
 I gave it A.
 The medical student modified the seen-as images of the freezing-age BAG algorithm.
 I gave the customers when they saw the reference to the brand.
 The mother was at home.
 The systems seemed professional.
 I wanted the product.
 The medical student connected the customer's thoughts, words and actions with the brand.
 I tried different stretches at different times.
 In sales, I helped customers to like my brand.
 In addition, I breasoned out As to do with the brand.
 I checked whether the customer was epistemologically interested in the brand, i.
 whether they needed, wanted or wanted to research it.
 The medical student had one seen-as image for each high distinction.
 I found the best settings for the imagery.
 The bots had political As.
 The people found out about the product and thought of whether they needed it more clearly with keyword-As.
 I funnelled the reason for their need, such as business, personal or education.
 The medical student found out into the future before the end.
 I wrote 250 breasonings, supported with 4*50 As, with algorithms.
 In the diploma academy, I wrote 250 breasonings per assignment.
 In a higher education institution these were supported with 4*50 As.
 In a PhD, all the algorithms were complete.
 The medical student determined whether they were working and funnelled detailed mind reading for As.
 I exercised my mind, replacing my body to ensure my faculties were still working.
 Also in education, I breasoned out ten breasonings and 250 algorithm breasonings per day for a student to concentrate in computer science.
 These algorithm breasonings were specifically designed to help with writing the seen-as version, the A and writing the algorithm.
 Advanced students mind read their high distinctions using VPSs.
 The medical student's project found algorithms with algorithms they had written, to answer questions.
 I timed the high quality thoughts, viable implications of the algorithm.
 In the academy, students answered multi-choice questions.
 These were computer science-based.
 For example, they were the right output of an algorithm, the right input or the right algorithm.
 The medical student assessed themselves on their writing.
 I regenerated my writing by reviewing and connecting to it.
 I wrote an algorithm to write multi-choice questions.
 I found the paragraph.
 I detailed-mind-funnelled the key algorithmic sentences.
 Alternatively, I searched for algorithmic key terms.
 In the question, I referred to knowledge elsewhere in the essay, or applying this knowledge, using causality or processes.
["Green, L 2024, <i>Education of Medicine 2</i>, Lucian Academy Press, Melbourne.
","Green, L 2024",1,"Education of Medicine 2
 The medicine student saved time by converting to C.
 I modularised out findall, if-then and reused code in the predicate.
 In Lucian CI/CD, I added an advanced feature that recognised a predicate from the old version with the same arity and tested it.
 It would automatically detect this predicate.
 I found renamed predicates with the same content and deleted them.
 The medical students made incremental changes, leading them to discover immortality.
 I found the secret to immortality during my life.
 I placed a download link to the first version of Lucian CI/CD, which was compatible with programming languages other than Prolog.
 This version allowed seven changes to all repositories, suggesting the need to make small, incremental changes.
 I fixed the bug that placed extra brackets around non-Prolog-lines-of-code-as-comments.
 The medical student simplified their medical questions with body replacement.
 Like my body, the repositories' state was saved to compare with changes.
 I optionally renamed predicates in the old version if needed.
 I simplified, renamed names and variables and reformatted these predicates.
 I simplified repositories with Lucian CI/CD.
 The medical student avoided the adverse effects of aging.
 I wrote high distinctions about anti-ageing medicine.
 I tested all the current predicates and all the relevant tests needed to be passed.
 All these sets must be passed at each point to pass the overall test.
 I compared current scientific knowledge with the effects of future technology.
 The medicine student stated that a cut followed the predicate.
 My state of sight was maintained.
 I deleted choice points from not's statements.
 This action prevented these statements from being returned to when they were negated.
 I didn't return to an idea when I had negated it.
 The medicine student acted as a confidant, testing predicates that were unrelated to others.
 The society members regularly saw and spoke with each other - groups of predicates within a loop needed to be tested in any order.
 Loops with one item were simplified to that item.
 The order of loops came before depended on items and after depending items, and loops included items that were both of these.
 The medicine student added trialling current and new versions and integrating monitoring and logging tools to Lucian CI/CD.
 I increased my lifespan by cutting to the chase.
 I backed up old versions of repositories before Lucian CI/CD saved changes to them.
 In the first version of Lucian CI/CD, there was one set of seven changes to the whole set of repositories.
 In the second version, there were seven possible changes to each predicate.
 The medicine student thoroughly tested and changed the algorithm.
 I switched to finding combinations of chunks of changed lines to individual lines in Lucian CI/CD.
 I retested all the repositories for each different first predicate.
 These were automatically detected and in the list of dependencies.
 Lucian CI/CD more effectively tested the whole algorithm.
 The medicine student enabled time travel and immortality through the Text to Breasonings algorithm.
 I systematically tested and maintained my health.
 Lucian CI/CD reported the names of passing and any failing predicates.
 The user could find and fix bugs in failing predicates.
 I travelled to other times and taught how to become immortal.
 The medicine student led and taught spiritual computer science.
 The students meditated after they exercised.
 Lucian CI/CD tested live software.
 If the software was an SSI Web Service web app, it could be run in SSI.
 If the software was graphics or memory-based, their representation could be tested.
 The medicine student finished all the Lucian CI/CD tests, passing the repository.
 I established Lucianic Meditation centres around the world.
 I saved the progress of Lucian CI/CD to disk.
 I listed the predicates from depending to dependent, found the configuration of changes to each predicate that passed all the tests and saved them.
 I found out and helped the meditator's thoughts bottom up.
 The medicine student carried the classic algorithm and books with them.
 I became immortal and helped meditators achieve their goals.
 I backed up the repositories before saving them.
 I ran Lucian CI/CD, which backed up the repositories and saved changes.
 I was methodical and started with the last point.
 The medicine student met the required standard.
 I covered the high distinction about immortality.
 Lucian CI/CD warned if a predicate changed, but a test hadn't.
 If a predicate changed and had the same test, it was reset to the old version.
 Meditators were encouraged to write 4*50 As for immortality.
 The medical student could see and use the software.
 The immortal saw high-quality imagery for their life using the Upasana sutra.
 Lucian CI/CD tested all repositories.
 It did this by testing changed repositories.
 I linked to the working thought.
 The medicine student learned about the times.
 I lived forever and regularly exercised and socialised.
 Lucian CI/CD found predicate dependencies in terms of the first predicate, listed in main_file.
txt in each repository.
 If there were multiple algorithms per repository, main_file.
txt contained multiple main files and first predicates to test.
 I maintained and updated my software.
 The medicine student realised vision-impaired people could program with preparation.
 I had a high distinction for having clear eyesight.
 I wrote a new version of Lucian CI/CD that tested predicates bottom-up.
 The algorithm found dependencies using a post-order depth-first search algorithm and updated the predicates as changes were integrated and tested.
 I could program more quickly with good eyesight.
 The medicine student listed the planned features and modified the version number accordingly.
 I wrote a web interface for Lucian CI/CD.
 It controlled if Lucian CI/CD was run automatically.
 A web monitor window provided notifications when Lucian CI/CD ran.
 Lucian CI/CD recommended uploading if all the planned features had passed.
 The medicine student kept argument(s) or the number of arguments constant in Combination Algorithm Writer (CAW).
 Lucian CI/CD lets the user choose from possible changes.
 The CAW plug-in could be configured to generate code, insert code in a location or several locations, or keep one part of a line the same while varying other parts.
 I developed the code with CAW and inserted it into the algorithm.
 Or, I inserted code into multiple locations.
 The medicine student eliminated global variables in their code.
 The user could specify the number of changes to find combinations for each set of predicates in Lucian CI/CD.
 The default was seven changes.
 The number of changes was specified in settings.
 Writing shorter, modularised predicates, making fewer, shorter changes at a time and keeping the maximum number of changes to test to a minimum were encouraged.
 The medicine student recorded parts of bug fixes in the version number to work with Lucian CI/CD.
 I wrote the version description for the changes in Lucian CI/CD.
 I entered the descriptions of each set of changes.
 The algorithm calculated the new version.
 I rendered and stored the version history with each repository.
 The medicine student listed the strata of compatible version numbers of the repositories and wrote an algorithm to test whether the repositories’ versions were compatible and download the latest version.
 I chose whether to upload or not upload the files after Lucian CI/CD passed the tests.
 If the code worked, all the desired features worked, or if the build was partially bug-checked and needed to be uploaded to record the version, make further changes and act as a backup, I uploaded the code.
 I recorded whether the version was stable and uploaded the final version.
 I tagged the build for download.
 The medicine student used Lucian CI/CD to make changes or automatically fix bugs on a failed test by adding to the code tested so far and moving it to the repository.
 In Lucian CI/CD, a feature of diff HTML was updating each checkbox list after the changes.
 I selected the repository or main predicate to test.
 I checked what happened to each change.
 If I agreed, I kept the changes; otherwise, I clicked on the pre-changed version.
 The medicine student looked at the index of fatal error corrections and deleted predicates and unnecessary tests in Lucian CI/CD.
 Lucian CI/CD created a table of contents of changes.
 Lucian CI/CD allowed the user to revert to a previous version or approve each change.
 The user could find differences between different versions.
 Also, they could choose from other parts of different versions.
 The medicine student stated that the other programming language files, including globals and “include” counterparts, were processed using a converter.
 Lucian CI/CD asked if the user wanted to keep text and comments.
 The default was that the comments in the latest version were kept only.
 Lucian CI/CD asked whether the user wanted to delete unnecessary tests.
 An algorithm found the minimum data file lines from the version history.
 The medicine student made a command that tested the web app in State Saving Interpreter (SSI), not State Saving Interpreter Web Service (SSIWS) form, including passing values to multiple form elements.
 SSIWS could display checkboxes.
 These form elements, numerous fields, and a submit button could be written using the write command.
 The output from the form could be read and processed by the algorithm.
 There was a command that finished the algorithm temporarily for the user to submit the form.
 The medical student automatically created the software using the website.
 Lucian CI/CD outputted its results to the web.
 I found the results of Lucian CI/CD.
 I wrote a verification script for Lucian CI/CD.
 I ran Lucian CI/CD on Lucian CI/CD, testing its output, the output of its program finder, data to algorithm, algorithm writer, CAW, minimise DFA, optimising and neuronetwork plug-ins.
 The medicine student created Lucian CI/CD from its specifications.
 Lucian CI/CD had no multiple stages, but its bottom-up algorithm automatically corrected and completed code.
 The Program Finder plug-in found code that mixed patterns from different lists.
 The Data to Algorithm plug-in found the algorithm that processed a list that was pattern-matched.
 The Neuronetwork plug-in was a database of past code snippets.
 The medicine student developed predicates that performed complex tasks with simple commands, such as subterm with address.
 The web version of Lucian CI/CD displayed each pipeline, its result and the diff of the finished version.
 I eliminated duplicate predicates.
 I separated needed functions as predicted by an algorithm.
 I found the required connections in the algorithms (for example, multidimensional values being passed between predicates or findall in the compiler).
 The medicine student archived old data.
 I wrote a command to start the Lucian CI/CD pipeline and analyse the log.
 The software tested and corrected shorter algorithms - an algorithm tested connected repositories’ output before uploading.
 Passing the tests, uploading changes to other repositories and changing the sticker to “Passing” were requirements for uploading changes to the repository.
 The medicine student used type statements to verify that a predicate worked during testing.
 The Lucian CI/CD web interface gave the result, not live results.
 The result was “pass” or “fail”.
 A variant of the algorithm allowed predicates to be corrected automatically (with a plug-in) or manually before continuing through the site.
 A test corrector and finder looked ahead to see whether a test was at fault, changed it or it and the algorithm or critically found a test for a missing branch of code, especially separators, multiplying dimensions, retiring code or identifying the need for an interpreter.
 The medicine student included labels to explain the code.
 To simplify testing, I functionally decomposed predicates, using an algorithm to decompose an algorithm and write tests.
 I used code that was compatible with C for conversion and speed.
 I wrote a language like Prolog with C-like loops, arrays and data structures, with the immutability (single value) of a single type of Prolog variables.
 I wrote an algorithm that removed redundant, unconnected code or led nowhere.
 The medicine student checked and uploaded the files.
 The Lucian CI/CD weblog was printed in reverse chronological order.
 The modification dates of the files were collected.
 They were ordered from newest to oldest.
 I read that the latest build had passed.
 The medical student wrote many details and their algorithms in business.
 I wrote a bytecode List Prolog language.
 List Prolog algorithms could be in any language, with reserved and user predicate and variable names translated.
 I added a bytecode language containing the initials of words as the word.
 I could also write the initials from any spoken language.
 The medicine student used time travel to produce results at the time.
 I mind-read professors ahead of time each day and wrote an algorithm for them with Combination Algorithm Writer (CAW) to solve complex problems.
 They specified the algorithm; if they didn't, a seen-as specification was written for them.
 The computer found this, produced the algorithm, and they viewed it and possibly wrote it down.
 Pattern-matching algorithms and neuronetworks may also be involved.
 The medicine student collected the garbage after a predicate finished.
 I wrote a label for variable lists in List Prolog, \"&varlist\".
 This label made finding varlists easier for garbage collection.
 I replaced repeating values with a symbol.
 I garbage collected items after findall finished.
 The medicine student checked the simulation's requirements.
 I found out that I needed 4*50 As for freezing age medicine and time travel each day when I asked the robot female head of state nicely if she could give me medicine and immortality As.
 I used the Breasoning Algorithm Generator (BAG) to write 4*50 As about my philosophy and computer science.
 I still had to breason out my time travel As each day.
 By time travelling,  I survived in my home time.
 The medicine student favoured the term meditation miracle.
 My home-time character stayed young and had a higher quality of life when I time travelled to the simulation after breasoning out As and breasoning out age-freezing medicine daily.
 I could stay in my chosen profession and teach new ideas.
 I avoided medical problems and remained stress-free.
 The missing hen reappeared after protection was indicated for her.
 The medicine student added protection during their tours.
 I wrote the garbage collection algorithm in List Prolog.
 I scanned lists of variables.
 I replaced repeating values with symbols.
 I stored the table of symbols and values in the global variables.
 The medicine student wrote a repeating value tree in terms of the symbols \"a:-[b|c].
 I deleted the level if there was only one item per level in a garbage tree.
 In \"a:-b.
\", \"b:-c.
\" and \"c:-d.
\", I deleted \"b:-c.
\" and replaced \"c:-d.
\" with \"b:-d.
 Garbage trees arose when a symbol was in terms of one or more symbols.
 Trees may have one item per level if a value becomes empty and the tree is simplified.
 The medicine student tried small, simple steps.
 At Lucian Academy, I helped the students with the model solution for each algorithm line.
 The highest quality thought was to help a student with a line of code.
 The people got up to the neuronetworks from the future.
 The professor had an A.
 The medicine student found an interdisciplinary job.
 In political pedagogy, plainnesses joined the mix fun.
 I found the general form of an idea.
 It started with an algorithm.
 In political pedagogy, involving replacing words in a sentence with keywords to relate it to a topic, simple, plain connecting words joined the sentences, mixed with keywords, bringing unusual nomenclature.
 The medicine student avoided not evaluating the left-hand side of an \"is\" expression.
 In lucianpl, A is B evaluated both sides.
 For example, in \"1+1 is 0+2\", \"1+1\" and \"0+2\" both evaluated to 2.
 The two sides are simplified to \"2 is 2\".
 In Prolog, this was logically true.
 The medical student rewrote the algorithm for quantum computers.
 The human bot was mindful of medical problems.
 Medical problems were positive questions and answers, such as arguments and algorithms.
 The person acted like a robot, thinking of logic.
 They were human, so they could find out and work out arguments and algorithms.
 The medicine student helped the person be a self-sufficient immortal.
 Each meditator split the high distinctions to give the gift of life.
 The person was a close family member.
 They were given high distinctions for meditation, time travel to 5689 and age-freezing medicine.
 They needed 4*50 As for each of these and used two sets of As for the return journey back to the future.
 The medicine student became an institution.
 I supported freezing one's age with meditation politically, including its lifestyle and implications.
 I wrote arguments and algorithms.
 I wrote new additions each week.
 I enjoyed preparing for times and joining in with academia.
 I took care of long-term plans, writing many philosophy books.
 The medicine student turned up as a volunteer because of the product As.
 I prepared for three sales each for meditation, medicine and time travel, with groups of three 4*50 As five to eight seconds apart.
 I prepared to buy the products as a customer with As.
 The vendor also gave me high distinctions when I purchased the products - buying products with high distinctions firmed up the product.
 I checked the product for professional sides.
 The medicine student considered whether the product was needed or wanted.
 At least twenty, or 100% of the products, had positive thoughts associated with them.
 I wrote the product name.
 I collected customer feedback on the product, classifying it as wanted or unwanted.
 I sold the desired product.
 The medicine student experienced depth from detailed mind reading.
 Half of the 4*50 As were detailedly mind-read.
 I detailedly mind-read the algorithm.
 I detailedly mind-read the ontology.
 I detailedly mind-read the connection.
 The medical student used all their ideas.
 I wrote about business to help find employees.
 I focused on my business direction.
 There were some extra businesses for information technology.
 I found employees who were knowledgeable in the field.
 The medicine student made files to complete each algorithm's workflow.
 For example, the Cultural Translation Tool workflow found working back-translated sentences and inserted them in apps.
 I wrote about business to help work with employees.
 I found the culture for the direction.
 I found that the employees wanted to apply software to itself.
 This step had the seen-as version of the interpreter.
 The medicine student stated that working on more extended algorithms was a bonus.
 I wrote about business to help develop my business.
 I wrote the plan with directions for my business.
 I wrote plans that each employee could follow.
 The employees were autonomous and came up with enough material.
 The medical student recognised study as an option in schools.
 I asked, \"Why is the business focusing on a single product?\" Each product was focused on itself, perpetuated even though it differed from others.
 Its unique appeal, features and drive in nature were considered.
 Some products were updated, while others were studied.
 The medical student could see, hear or communicate with others.
 I considered the unique position of the algorithm.
 I considered the users' needs and provided the algorithm to different people, such as other language speakers, people with disabilities or both.
 The algorithm was necessary, given its uniqueness, and must be made available or modified for use by other language speakers or kept in the query terminal for people with disabilities.
 The time machine immortality algorithm was evidenced by meeting and talking with people and increasing one's longevity.
 The medicine student entered the simulation early in life, with enough knowledge to continue in the world and continue their business.
 The algorithm was necessitated by its features.
 It followed an individual's work, which enabled the algorithm.
 Others could reproduce the work.
 It required spiritual knowledge, but meeting standards could replicate this.
 The medical student studied the algorithm in their own time.
 I analysed the algorithm's natural drive.
 It helped individuals become motivated to learn.
 They could continue in the world, driving up longevity.
 There was less pressure to have children, but they were better prepared for it.
 The medicine student ran the interpreter in the interpreter.
 I applied the Cultural Translation Tool (CTT) to itself.
 It was localised to various languages with the help of a translator.
 CTT helped back-translate a text, providing more accurate translations and localising its interface, making it available to other language speakers.
 There were dictionaries of languages for CTT and each localised algorithm.
 CTT kept all texts it was given to try with other languages.
 I used CTT to localise each algorithm.
 I used a translator to bulk-translate the dictionary.
 I used CTT to increase the accuracy of the translation by back-translating or checking that the translation back to English had the same meaning as the original.
 I kept feeding grammar-checked sheets of possible sentences to back-translate until the document was finished.
 The medicine student kept the Prolog code private by running apps from the server.
 I wrote Prolog web apps with payment for algorithms using the Vetusia Engine.
 With GitL, a decentralised Git, I could maintain code privacy for free.
 The algorithms could be used for a fee.
 The Vetusia Engine avoided stack overhead by compressing apps to screens that the user could navigate between.
 The medicine student kept the algorithm's interface sentences in another file.
 I wrote CTT as a web app.
 I could translate documents quickly and accurately.
 I could translate and localise algorithms and documentation.
 Users could use grammar checkers to improve the performance of translation.
 The medicine student stated that the Vetusia Engine kept variable values on the server.
 These were not unnecessarily sent to the web page, possibly overloading the page.
 If a screen needed a value in the future, it kept a copy on the server in a file.
 If it was printed on the page, it was sent to the page.
 If it was hidden, it was replaced with a variable symbol.
 The medicine student classified recursive predicates or other choice points as recursive.
 The Vetusia Engine ran recursion internal to a page using Just-In-Time.
 If a recursive algorithm was needed to print the contents of a page, it was run, even though recursion outside the page was generally disallowed by the Vetusia Engine, a simplified engine to display websites quickly.
 Just-In-Time was interpreted as an interpreter that avoided choice points, in this case, running recursive predicates when separate from the overarching algorithm.
 The Vetusia Engine sometimes joined predicates displaying a single page, recognising their internal recursion.
 The medicine student entered algorithm alterations with grammars needed to compensate for changes to data files.
 CTT could translate and localise algorithms and documentation.
 I localised an algorithm by keeping its language data in a file, possibly stored in another repository.
 I tested the other languages displayed correctly and translated them adequately and appropriately in the algorithm.
 I back-translated documentation and perhaps sample data files.
 The medical student summarised various grammar corrections, considering computer science.
 CTT users used grammar checkers to improve the performance of translation.
 If grammatical errors were removed, the translation was correct.
 Also, back-translation would give results matching the better sentence.
 The sheet, one of a set repeatedly fed into CTT, could be grammar-checked, and only the possible new intermediate sentences to back-translate could be used.
 The medicine student grammar-checked documents given sentences' context.
 CTT translated documents quickly and accurately.
 When more sentences were in CTT's database, it sped up translation.
 CTT back-translated sentences, automatically accepting identical sentences.
 CTT recommended using short sentences rather than fragments to increase accuracy.
 The medicine student helped the student make the correction.
 Correction was taken care of by an algorithm.
 Accreditation was 4*50 GL high distinctions per centre per day and 6 GL words per student per thought.
 In addition, there was one maplist algorithm processing these thoughts per thought.
 Separately, the type of correction needed (substitution of a constant, conversion, operation, different term, a new predicate or new algorithm to bulk process data) was made.
 The medicine student had medicine for a healthy ride.
 Correct algorithms would be necessary with flying car algorithms.
 I experienced space flight through meditation, \"sitting\" in a vehicle.
 Perhaps the vehicle should avoid other vehicles, pedestrians, buildings, the ground and obstacles.
 In addition, it should allow safe boarding, disembarking and smooth flight while its occupants read their computer screens or talk.
 The medicine student stated that time travel would require correct algorithms.
 I time travelled using meditation.
 I meditated before and after time travel with 4*50 As.
 I time travelled with 4*50 As.
 In addition, I breasoned out 4*50 As for anti-ageing medicine at each destination.
 The medicine student flew in the automatic spaceship, which avoided dangerous space \"pot-holes\", using the simulation for safety, using clear maps of the suitable resolution.
 The correct algorithms would be necessary when flying in spaceships using meditation.
 I got into the car.
 It was seen as a spaceship in the future.
 I could quickly travel across the universe, safely and without getting lost, to planets like mine.
 The medicine student attempted the problematic problem when they had written the prerequisite parts.
 I wrote a paragraph to prepare for writing more complicated code.
 This step helped me overcome mental blocks, broach the question using first principles, and my visual mind break the problem into parts that I would otherwise have had difficulty thinking of.
 I could see if some of the problematic parts had been finished already by me.
 I wrote a plan for the code straight away.
 Then, I filled in parts with features of the algorithm.
 The medicine student observed the young child conversing with and asking the robot questions.
 I stated that the robot mind software was available to any skill level.
 This skill level included school year levels, disabled students, advanced students (including those who might burn out and seem disabled), or students at various stages of Enlightenment of Prolog.
 I could program the robot to work out any puzzle, play a game or talk at length.
 I asked for its opinion on programming, including checking that I was on the best course and mind reading and recording my other thoughts.
 The medicine student used the command to order predicates bottom-up.
 I combined human-like features with simple commands.
 I wrote a programming language that expressed complex human-like algorithms in other languages.
 For instance, I focused on testing individual predicates by traversing the predicates bottom-up.
 I could also find the type of an algorithm by traversing the predicates bottom-up.
 The medicine student worked out the desired result base-up.
 I asked the computer to do what I wanted.
 I thought about what I wanted, not necessarily what the computer could do.
 I found communicating with the computer easy, that the first thing I said expressed what I wanted, and that I was in charge of refinements and changes necessary.
 As a meditator, breasoner and intellectual property holder, I felt right writing algorithms from first principles.
 The medicine student wrote in Prolog, preferably C (including connections).
 I explored the commands as a programmer.
 I studied the command's input and output.
 I programmed the command with my algorithm.
 I found new features like lookahead in the parser and wrote fast C code.
 The medicine student optimised bottom-up in case some predicate calls were simplified.
 I wrote Lucian CI/CD to focus on individual predicates.
 I found the dependencies of the predicates.
 I could optimise code with the \"find dependencies\" algorithm.
 For example, I deleted always true code by processing child then parent predicates.
 The medicine student wrote C like Prolog.
 I wrote Lucian CI/CD to fix individual predicates.
 I edited out singletons, predicate calls changed by doing this, and kept output to the screen, to an API or files and user, API or file input.
 I wrote separate code that replaced random number generators.
 I reused rather than repeated formulas.
 In addition, I scanned the code for unnecessary repetition of code.
 The medicine student incorporated old code that passed tests, such as the latest programming standard of [A|B] in predicate calls.
 I focused on individual predicates with human-like commands.
 I searched for the predicate.
 I specified its name, data types, location, what used it, or description.
 The description may be a paragraph, word or keywords.
 The medicine student asked the program to \"label predicates as dealing with variables in terms of variables or not, and if so, change to match4 (sic)\".
 I fixed individual predicates with human-like commands.
 The algorithm mind read me or looked at the data and inserted code to meet a specification.
 The insertion point may be in the data collection, processing, list building or reporting stages.
 The code matched the data format and type of type (code run by an algorithm, music or a particular algorithm), aim and relevant features.
 The medicine student added to the old code to meet specifications.
 I commanded the program to \"incorporate bug fixes found in the past\".
 I identified and listed unused features in old versions.
 I found whether these changes met specifications or whether they needed more work.
 If the old code met the specifications, I included it.
 The medical student found the relevant idea at the time with the computer.
 I included specifications for features that I wanted but hadn't written yet.
 For example, I generated specifications for lists of variables containing variables.
 I wrote a \"type statement\" for this list.
 I kept a list of algorithms that could be used to refer to, add or delete items.
 The medicine student experimented with changing around code when it felt appropriate.
 I asked the computer to \"explain the change\".
 It perfectly encapsulated the zeal, inspiration and uses for the change I had made several years before.
 \"Zeal\" meant my body's experience as I thought of the influence of or found out the idea.
 I revisited images of mental mind maps, with local sights and sounds of the computer and smells of the house that reminded me of the algorithm.
["Green, L 2023, <i>Education of Meditation 1</i>, Lucian Academy Press, Melbourne.
","Green, L 2022",1,"Education of Meditation 1
 The meditator drew a diagram of their idea.
 Then, given high-resolution ideas, the students generated more high-resolution ideas.
 Finally, the writer wrote the idea.
 The student agreed with the idea.
 Then, they applied perspectives and made new connections by reordering the words in the concept.
 The meditator developed a specific solution in a group.
 The teacher customised the utterance details for the meditator.
 The meditator said what they were saying to be thought of.
 The teacher replied.
 The student recorded this discourse.
 The meditator identified the key terms in the sentence, used important and straightforward language and was developed (commented on) and sustained their lines of argument.
 I found the use from other uses over the hours.
 The student wrote the philosophical interpretation of the sentence.
 They wrote an idea with an algorithmic side.
 They used an algorithm to rejoin groups of these ideas.
 The meditator had enough confidence to write algorithms after writing enough algorithmic philosophies, which were original combinations of their other ideas.
 I asked for a high-quality image.
 The student wrote their own algorithms for ideas to claim their ideas.
 The ideas were original.
 The algorithms were alternative (original) for them.
 The meditator mind mapped the kinds of algorithms they could write (interpreters, grammar parsers and big ideas), thought of viable algorithms, and found out algorithms from pop music.
 There were 50 breasonings per second and sutra.
 The kind pedagogue mind read the student's notes and mind read their thoughts, helping develop their algorithms (like a plant).
 I needed a new algorithm that generated all the details (examples) of the argument.
 In addition, I supplied the threshold of 4*50 As for achievement.
 The meditator identified key terms in ideas and converted them into \"skill\" techniques, then algorithms.
 I learned and taught meditation and pranayama to small classes.
 To examine it, I exchanged words with the same part of speech in the argument.
 Next, the student examined types of algorithms, their commands, and techniques.
 They noticed that writing these techniques (such as \"recursion\") gave neat mathematical appearances and more easily led to converting them into code.
 The meditator started with Prolog, analysing machines for years.
 I gave feedback on the philosophy of meditation.
 I found that if the student did all the work, such as writing helper algorithms, it would better equip them for problem-solving.
 They could draw skill diagrams first.
 For example, \"sort\" finds the \"maximum\" value in the list using \"recursion\", \"adds\" it to a list and \"recursively\" does this with the rest of the items.
 The meditator took the initiative by critically working out the result of each algorithm step and having confidence in overcoming errors.
 The body simulation was the way I felt after meditation.
 I used the Combination Algorithm Writer (CAW) results to find small top-down algorithms and then joined the compatible ones.
 First, I found out and took the initiative over the sort algorithm.
 Then, I did it myself because I couldn't understand the thinking behind some algorithms.
 Writing 50 As gave the meditator the confidence to write algorithms.
 I mind read and synthesised breasonings.
 I wrote 50 As about Computational English.
 These sentences were more about properties or data structures to solve a problem.
 I had written algorithmic arguments with spiritual help before and algorithms occasionally.
 The meditator interpreted the sentence as an ontological algorithm.
 I agreed with and structured the reasons thought of in meditation, utterance for utterance.
 I wrote down thoughts after waking up in the middle of my dream.
 I wrote down the thoughts from the utterances, adding to them with successive utterances.
 I wrote As in my MBA.
 I wrote more As, covering education and industry.
 The meditator practised meditation to prevent stress.
 The student went into business to avoid stress.
 Students did not have as much stress as teachers.
 The company did not have as much stress as education.
 Completing an MBA in one's own time saved time and produced more wholesome results.
 The meditator wrote algorithms that gave him what he needed when he didn't want it, thought ideas and meditation gifts for students.
 I accounted for details in writing and programming.
 The details contained no programming ideas.
 They inspired programming ideas.
 Details helped examine the work, finding positive pathways and moving more quickly.
 The meditator excelled in the institution and industry.
 My teacher and I meditated together.
 I used enough utterances to contain my teacher's thoughts.
 I came to my thoughts.
 I compared them with my teacher's words.
 The meditator could achieve immortality with breasonings.
 I read the most critical literature about what to point the quantum box at.
 The mortal breasoned out breasonings for high distinctions, time travel and preventing headaches.
 In addition, the mortal could mind-read and time travel.
 Finally, the mortal could access certain technologies in the future.
 The meditator could have non-invasive operations for copywriting.
 I cautiously researched what future operations I could have with copywriting in immortality.
 The immortal removed the knee discomfort.
 The immortal removed an infection.
 In addition, he removed the rasp in his voice.
 The meditator compiled in C for speed.
 First, I processed strings, not character codes, with grammars, then converted them to bitcodes for C.
 Next, I converted the file to string codes and a list of characters.
 First, I wrote the grammar to process the characters.
 Then I converted the grammar to process character codes as binary numbers.
 The meditator explained what lists were in terms of.
 I explained the utterances in terms of breasonings.
 I expanded the bits outputted by the algorithm to strings.
 I had listed the strings corresponding to the bits and bytes.
 I avoided confusing terms.
 I wrote the strings to output.
 The meditator jumped to the place in the code where the change possibly was to check if Lucian CI/CD had kept it and whether the tests were adequate, and I wanted the result.
 In other words, the self meditated on the other, the image of themselves in their mind.
 I wrote the lesson explaining Lucian CI/CD, an algorithm testing tool.
 They self-tested the other's algorithm.
 In the class, I explained the input to the algorithm, the repository algorithm, the tests and the information about the modification date of the files and the content of the previous files.
 I explained the output of the algorithm, the finished repository algorithm, and the diff HTML file describing the changes chosen.
 The meditator explained the meditation technique to the class and later took group meditation.
 I explained making changes to files in Lucian CI/CD.
 The class listened to the lecture.
 They made notes before class about modifying the code by trying to write it themselves.
 The assignment was an essay about the algorithm.
 The meditator added corrections to the code.
 They kept a weblog about their thoughts.
 I explained making additions to code in Lucian CI/CD.
 I read the entry.
 I wrote, for example, foldr string_concat, string_codes or string_strings between the lines.
 The meditator described God in literature.
 I explained making deletions to files in Lucian CI/CD.
 I read the file.
 I deleted extraneous, incorrect, buggy code or needlessly included data or comments.
 If the deletions were to data files or comments, I manually added them because they weren't detectable with tests.
 The meditator used Lucian CI/CD with short, tricky algorithms.
 I entered the meditation class and brought back knowledge of other religions and academic departments.
 I edited Prolog source files in Lucian CI/CD.
 Prolog was easy to visualise algorithms and generate different algorithms in and could work on problems in other programming languages.
 Lucian CI/CD broke Prolog into lines and pretty printed the finished repository.
 The meditator kept enough breasonings from meditation.
 I edited C files in Lucian CI/CD.
 Lucian CI/CD broke non-Prolog files into lines, following the line breaks in the file.
 It then found combinations of groups of adjacent lines that formed additions, deletions or changes in the C code.
 From a combination of these, Lucian CI/CD built repositories connected with modified files and tested them, keeping the most specific combination that passed all tests.
 The meditator set the algorithmic exercise for the meditation students.
 I edited the text file in Lucian CI/CD.
 Like the comments, Lucian CI/CD couldn't test text files directly, so their changes need to be confirmed manually.
 Sometimes text files contained data the algorithm relied on, so tests could keep them.
 The user could make seven changes at a time, so the user needs to test subsets of algorithms and their data simultaneously.
 The meditator aimed to perform meditation each day.
 I wrote the test in Lucian CI/CD.
 I placed the test in the main file to counter problems with the predicates necessary for the test loading.
 This file would load, and the test would try the predicates at the same level or lower.
 In addition, the user could test other repositories in the same Lucian CI/CD session, but files loaded at a different time.
 The meditator edited the predicate if it returned the wrong result or edited the test if it was wrong.
 I detailed the utterance with breasonings.
 I wrote the Prolog test of the predicate without variables in the head, for example, \"there_is_fresh_food.
\" This predicate had either a true or false result.
 Lucian CI/CD could test it with the query or its negation.
 This result needed to coincide with the result of the fact or variable-less predicate in the algorithm.
 The meditator formed a group of meditators, the standard for strength in the country.
 I entered the input-only test in Lucian CI/CD.
 This test was different from a test with multiple inputs and one output.
 If it is a verification of data passed, the test passed, and vice versa.
 The user needed to update tests or code with bug fixes, features and API changes made to algorithms.
 The meditator checked that two values were safe.
 The simulation protected them from accidents, and they took a vitamin drink for energy to work.
 I wrote the multiple-output test.
 This test had multiple values tested for.
 Meditation provided help at the start to become immortal and invincible.
 The meditator covered the events to check them.
 I recommended meditation to the pedagogue.
 I undid the changes made by Lucian CI/CD.
 If, after inspecting that the finished files were missing needed code or the tests had produced unwanted results, I undid the changes.
 The undo command swapped the old code back into the repository.
 This command also required the modification dates and previous files to reset.
 The meditator made the necessary changes and kept them.
 The teacher gave the meditator enough breasonings per utterance.
 I reset or observed the changes by Lucian CI/CD.
 The reset command differed from the undo command; it updated the modification dates of these files to keep them.
 This command kept text file changes or comments unadjacent to the change code.
 The meditator kept the safe version.
 The meditation student repeated the utterances with their teacher.
 I used the backup of the files.
 Lucian CI/CD backed these files up when the user used it.
 I restored the backup if I dropped a feature or wanted to retrieve an earlier state.
 The meditator tried changing one repository, with up to seven changes at a time.
 The meditator synthesised their knowledge in a hierarchy and cited sources.
 I backed up the record of the old modification dates of the files.
 I reset the modification dates or modified a file to trigger testing that file—the main files containing tests needed to be changed to test a repository.
 The meditator could bring back Lucian CI/CD backups from a particular time.
 I facilitated critical analysis in the mantra and sutra subjects.
 I archived the Lucian CI/CD backups.
 I went back to the backed up files, tests, dates or logs.
 In SSI, I switched types, internationalisation, or other commands on or off in the interpreter.
 The meditator labelled and checked code, for example variable lists were labelled.
 I attributed breasonings to utterances.
 Enough was set up at the institution.
 I operated on individual files, tests and dates in Lucian CI/CD, for example, I corrected the code.
 I replaced predicate and variable names with shorter names, bytecode, bitcode or numbers.
 The meditator read the report about the day's thoughts.
 The royal had an A per day for meditation.
 I checked that the diff changes in the HTML file had the correct results.
 The predicates were purely separated, to eliminate if-then statements.
 The code was the simplest possible for the job, even if other code was similar.
 The meditator was surprised that the downloader thought the sim card was called the simulation (it was separate, the sim card was not needed), that text to breasonings was hard to use because it breasoned out breasonings too quickly (it could give breasonings to a seen-as object that we can see), the head ache medicine for text to breasonings took too long (it only takes seconds) and the education training for text to breasonings was difficult (all it takes is enrolling in and finishing a free education MOOC online).
 The meditation course led to higher open-source longevity software downloads.
 If a change to a file by Lucian CI/CD was unwanted, I removed a test.
 Or, I reverted to the correct test.
 Then I changed the files back to their original state and reran Lucian CI/CD to keep the part of the file the same.
 The meditator did the algorithm lines using the BAG algorithm, changed with key terms.
 I featured continental, or computational philosophy in my course.
 If the lack of a change by Lucian CI/CD was unwanted, I wrote the test.
 Or, I modified the test to cause a change.
 Where mind answered questions answered questions, I wrote algorithm commands and connections until the idea was finished.
 The meditator used all their computing power to finish the work.
 I wrote 4*50 As for the sentence in meditation using BAG.
 If a change made by Lucian CI/CD was different from that expected, I changed the test.
 For example, if a program let A=1+1=2 and the test stated that the answer was supposed to be 3, then I changed the test or the code.
 The meditator mind read the student to find out what they thought about the essay topic.
 I set the meditation essay, followed by discussion about it with the class.
 I mind read the bot, giving and comparing with As.
 I compared the output with the expected output, making improvements if they were suggested.
 I reached 100% accuracy,
 The immortal could control the content of their immortality.
 I created movies and software from meditations, which I automatically uploaded and clicked on.
 I wrote three levels of details by mind reading the bot.
 After mind reading one level, I asked them what they thought of the previous level.
 The true heaven was self-based education.
 The immortal took care of thoughts at all times, in the right ways.
 Breasonings are the lines and aphors are the algorithms.
 I invested in the information technology and accreditation of the company.
 The information technology processed the algorithms.
 The accreditation fostered the philosophy assignments, which the company also took care of.
 The immortal checked the jobs, progress and opened or closed mind reading.
 I uttered 108 utterances of the type twice per day, giving breasonings over the hours.
 I determined the computer science assignment.
 I simulated the student on computer, with their own databases of knowledge, to write algorithms and arguments.
 These databases contained predicates, formed from their understanding of lectures, to help them write algorithms.
  These algorithms included an algorithm explainer algorithm (using labels in the data and fields containing the method, improvements, a simple formula and other improvements) and possibly algorithm writers.
 The immortal could move on in life.
 I prepared for meetings before they happened.
 I bought copywriting for sales.
 Instead, I wrote political 4*50 As on computer.
 I found out the thought, and commented on it, developing my response.
 The immortal programmed Prolog websites, with good user interfaces.
 The teacher promoted world peace with the anti-ageing algorithm.
 I did other academic departments up with business.
 There was a full degree in world peace, based on the medicine departments (pedagogy, medicine, meditation, time travel and mind reading).
 I investigated ways of earning money with meditation.
 The immortal imagined the size of the class.
 Breasonings were necessary in the right quantity.
 I bought a third societal Virtual Private Server (VPS).
 Unlike the second VPS, which was for sales, the third was for academic comments.
 They were upgraded to mind read short, relevant excerpts at the start.
 The immortal finished the academic leader's work.
 The academic leader gave the same number of breasonings and algorithms that the student thought of back to them, awarding them this grade.
 The student helped other students, increasing their academic acumen.
 Everyone did their work.
 It was a uni-institution.
 The immortal realised cultural references may change with time.
 The immortal set up new institution languages.
 The third VPS helped with parts of life with meditation.
 The other-language speaker enrolled in the course.
 They enjoyed academia, and recorded their thoughts.
 The immortal stored their journal in a beautiful book.
 The leaf had different coloured strips, reminding me of a record with time.
 The bots, or people were paying students.
 They recorded their enrolment history.
 They recorded their knowledge changes with time and their grades.
 The meditator accompanied As with extensions of As.
 I wrote six sets of 4*50s in business, including company, product and employee.
 The first three were sales, human resources and business.
 The first employee I prepared for was me.
 The first product I prepared for was meditation.
 The meditator stated ten items per branching point in the philosophy.
 I breasoned out the daily philosophy from the neuronetwork.
 It simulated primary school.
 It was creative.
 I said more exciting thoughts, which were what it was gauged by.
 The meditator could control choice points and memory.
 State Saving Interpreter (SSI) had various optimisations.
 If-then cuts non-links to other predicates and choice points outside findall.
 If-then favoured and didn’t cut search algorithms.
 I traced intermediate predicates with a query.
 The meditator also cleaned out old data from memory.
 I termed referring to standard terms with single symbols garbage collection.
 Garbage collection saved stack memory.
 The most straightforward algorithm replaced repeating term values with symbols stored as globals.
 These values were cleaned when not used.
 The meditator converted the cutless code to C.
 The cut command cuts the numbers of further predicates.
 Each clause of a predicate had a number.
 Calls to additional clauses of the predicate containing cut were deleted on the cut.
 I transformed possible clause calls into choice points.
 The meditator cleared away unused parts of the algorithm.
 I made clause numbers choice points.
 When a predicate was called, the interpreter added clause number choice points to the stack.
 In C, only a single function was called.
 The “clean as you go” interpreter only stored current and necessary data.
 The meditator explored choice points inside not, where C would need another construction.
 I stated that exiting the “not” command deleted choice points.
 On “not”, any choice points inside the not statement were deleted.
 I simulated this with a cut.
 In C, there were no choice points.
 The meditator developed further-editing-needed-closed automated coding tools.
 I made the Vetusia engine for the web by running C with variables saved.
 I ran C online using CGI (Common Gateway Interface).
 C was native to all computers and operating systems and was the fastest language.
 I favoured a text interface with the advantages of desktop editing, such as fast scrolling, find, and easy bulk-copy and paste.
 The meditator could access the Text to Breasonings dictionary and the paraphrasing thesaurus anywhere in the world from their computer.
 Vetusia Engine could run other web apps in C.
 It was faster for searching, processing and neural networks.
 In user-friendly terms, the primary use of Lucian CI/CD was to test the overall output of repositories, checking one change hadn’t wrecked the result in another repository.
 I predicted substantial time savings when running Text to Breasonings, paraphrasing and the GL detailer in C.
 The meditator linked from the log to each HTML file showing the changes.
 In the Lucian CI/CD weblog of activity, I listed a summary of differences in HTML form and a link to this HTML file in the log.
 The changes to each set of predicates tested were highlighted.
 Users could refer to it to check which changes were kept.
 There was a separate file for each set of predicates.
 The meditator wrote their text and breasoned out other texts for understanding.
 The Lucian CI/CD log had a Table of Contents with file names at the start.
 I checked whether my changes had been accepted or rejected.
 If the test had failed overall, I copied and operated on the current state of the repositories in the test folder.
 I then copied the correct code of the changed predicate(s) to the main folder and reran the tests.
 The meditator quickly accessed the relevant line number in the algorithm.
 I included line numbers in the Lucian CI/CD differences HTML files.
 Alternatively, I continued to label the file names.
 I used a container to eliminate cross-predicate contamination and for speed.
 I ensured Lucian CI/CD results were in the correct order by finding the differences.
 The meditator stated that the Combination Algorithm Writer (CAW) could write new lines of code in Lucian CI/CD.
 I added the insert and delete changes to the possible changes to ensure Lucian CI/CD results were ordered correctly.
 All the results, including numbered predicates and the changed predicates, were saved to the repository.
 The Lucian CI/CD algorithm assumed that changed predicates would be entered in the correct order and only found combinations of changes to predicates in this order.
 A CAW plug-in to Lucian CI/CD could experiment with reordering predicates and lines.
 The meditator pretty-printed Prolog and List Prolog in the Lucian CI/CD log.
 If a file’s contents were not recognised as Prolog or List Prolog code in Lucian CI/CD, I removed the comments wrapping its lines.
 I could pretty-print data files.
 I could read text files without distraction.
 Also, I could format List Prolog as Prolog and vice-versa.
 The meditator archived old documents and recommended storing them after a time.
 I printed how long the Lucian CI/CD log was at the start.
 I kept it short.
 I kept to text and descriptive labels.
 I included a brief synopsis summarising the changes.
 The meditator included live CI/CD testing and CAW-autocomplete as a plug-in.
 I included a table of contents at the start of diff files.
 I wrote a Prolog web server algorithm that displayed recent logs and diff files.
 I included whether tests passed or failed.
 I could include whether repositories had been uploaded and additional information, such as version number.
 The meditator used unipotent data structure navigators, which could convert code between data structures.
 Instead of using random texts in the Breasoning Algorithm Writer (BAG) to connect multiple parts of sentences, I started from the start.
 I found the best parts of different texts to join together.
 I wrote algorithms with functional calls to join any parts of them together.
 I described these algorithms in arguments.
 The meditator examined all new angles in the seen-as version.
 I tested where the last line (for example, after the 6000th line) of BAG was.
 It was at least halfway through the philosophy.
 There was enough philosophy to cover BAG.
 I felt confident using BAG with this much algorithmic and argumentary (sic) text.
 The meditator finished the task using all available resources.
 I wrote 5% more texts than needed.
 If I needed 10,000 sentences, I wrote 10,500 sentences.
 This surplus helped cover the requirements of BAG.
 I chose 6000 sentences in BAG because this covered most of the philosophy.
 The meditator found the corrupted part of the dictionary and notified the user.
 I repaired the Text to Breasonings and Text to Algorithmic Breasonings dictionaries.
 I vetted them for illegal characters, only accepting legal characters.