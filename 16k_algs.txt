:- http_handler('/generate_student_number', generate_student_number, []).
                  file_name(M1,M2) :-       atomic_list_concat(M3,'/',M1),       append(_,[M2],M3),!.      we(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),%format(Data,[])%writeln1(Data)        %/*Data=[%%debug='off',%%Debug1,input=Input,input1=Input0,submit=Submit],%*/%writeln1([Input,Input0,Submit])/*term_to_atom(Input1,Input),term_to_atom(Input01,Input0),term_to_atom(Submit1,Submit),writeln1([Input1,Input01,Submit1])*/%/*% directories - open, rename, move, delete% files - edit, rename, move, delete %writeln(here)%writeln1(Submit)%/*(Submit=up->%(writeln(here));(atom_concat(_,'/',Input0)->Input01=Input0;atom_concat(Input0,'/',Input01)),atom_concat(Input01,'../',Input00),(working_directory(_CWD,Input00%"../"),working_directory(CWD1,CWD1),file_browser(CWD1));(Submit=open->(%working_directory(_CWD,Input1),%string_concat(Input1,Input01,Full_path),file_browser(Input));(Submit='new folder'->(%working_directory(_CWD,Input1),%string_concat(Input1,Input01,Full_path),new_folder(Input));(Submit=move->(go_move(Input,Input0));(Submit=copy->(go_copy(Input,Input0));(Submit=delete->(delete_file(Input),file_browser(Input0));(Submit=edit->(go_edit(Input,Input0));(Submit='new file'->(new_file(Input%,Input0));(Submit=view->(go_view(Input,Input0)))))))))))%*/.
      :- http_handler('/we', we, []).
delete_cp2(List1,B,List2,Cp_vars1,Cp_vars2) :-B=[B1|B21],delete_cp(List1,B1,List3,Cp_vars1,Cp_vars3,Swaps),replace_cps(Swaps,B21,[],B22),delete_cp2(List3,B22,List2,Cp_vars3,Cp_vars2).
**/%% Finds the back-translations of the sentences to try %% back-translating from one language to another, and returns %% Flag=true if there is a successful back-translation Output2%% See ***1/***** 1?- trytranslations1([['I love you.-1','I love you.'],['I love you1-1','I love you1']],'en','fr',false,Flag,[],O,_,O2).Flag = true,O = [['I love you.', '', 'I love you tr.'], ['I love you1.', '', 'I love you1 tr.']],O2 = ['I love you1.', 'I love you1 tr.'].
data_instance_k_classification1(Data,I,K,C):-    maplist(o_oclass_disClass1(I),Data,DisAndClass),    keysort(DisAndClass,DSorted),        %%writeln(DSorted),        length(TopK,K),    append(TopK,_,DSorted),    %This is not a very good way of selecting k as you may have many values with the same distance, and the sorting just cuts these off    %Dsorted = [1-pos,3-pos,3-pos,3-neg,3-neg]    %Topk =[1-pos,3-pos,3-pos]    topk_vote(TopK,C).
data_instance_k_classification1(Data,I,K,C):-    maplist(o_oclass_disClass1(I),Data,DisAndClass),    keysort(DisAndClass,DSorted),        %%writeln(DSorted),        length(TopK,K),    append(TopK,_,DSorted),    %This is not a very good way of selecting k as you may have many values with the same distance, and the sorting just cuts these off    %Dsorted = [1-pos,3-pos,3-pos,3-neg,3-neg]    %Topk =[1-pos,3-pos,3-pos]    topk_vote(TopK,C).o_oclass_disClass1(O,[A,B,O2],D-[A,B,O2]):-   o_o_dis(O,O2,D).
data_instance_k_classification1(Data,I,K,C):-    maplist(o_oclass_disClass1(I),Data,DisAndClass),    keysort(DisAndClass,DSorted),        %%writeln(DSorted),        length(TopK,K),    append(TopK,_,DSorted),    %This is not a very good way of selecting k as you may have many values with the same distance, and the sorting just cuts these off    %Dsorted = [1-pos,3-pos,3-pos,3-neg,3-neg]    %Topk =[1-pos,3-pos,3-pos]    topk_vote(TopK,C).o_oclass_disClass1(O,[A,B,O2],D-[A,B,O2]):-   o_o_dis(O,O2,D).%% could be in either order%% a([w,z,a,b,e,c,z,y],[1,1,[c]],[1,2,[a]]).
number_sentences(_,_,[],String,String) :- !.number_sentences(Number_a,Number_b1,String06,String07,String08) :-String06=[String00|String12],SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string(String00,SepandPad,SepandPad,String09),append_list([[Number_a],Number_b1,String09],String10),append(String07,[String10],String11),Number_b2 is Number_b1 + 1,number_sentences(Number_a,Number_b2,String12,String11,String08).
number_sentences(_,_,[],String,String) :- !.number_sentences(Number_a,Number_b1,String06,String07,String08) :-String06=[String00|String12],SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string(String00,SepandPad,SepandPad,String09),append_list([[Number_a],Number_b1,String09],String10),append(String07,[String10],String11),Number_b2 is Number_b1 + 1,number_sentences(Number_a,Number_b2,String12,String11,String08).data_instance_k_classification1(Data,I,K,C):-    maplist(o_oclass_disClass1(I),Data,DisAndClass),    keysort(DisAndClass,DSorted),        %%writeln(DSorted),        length(TopK,K),    append(TopK,_,DSorted),    %This is not a very good way of selecting k as you may have many values with the same distance, and the sorting just cuts these off    %Dsorted = [1-pos,3-pos,3-pos,3-neg,3-neg]    %Topk =[1-pos,3-pos,3-pos]    topk_vote(TopK,C).
*  *  *      line_graph(5,5,[1,2],_).*   *   *   *     line_graph(10,10,[10,1,10],_).  *      *  *      *   *    *    *    *    *   *      *  *      * *       * *        *         *         */% line_graph(20,20,[10,1,5,4,3,8],_).line_graph(X_win,Y_win,Ys,Grid) :- make_grid(X_win,Y_win,Grid1), length(Ys,Xs_L), sort(Ys,Ys2), append(_,[Y_max],Ys2), numbers(Xs_L,1,[],Xs), findall([X2,Y2],(member(X,Xs),get_item_n(Ys,X,Y),Y2 is floor(Y*(Y_win/Y_max)),X2 is floor(X*(X_win/Xs_L))),Ps), plot(Ps,Grid1,Grid), prettyprint1_lg(Grid,Y_win,X_win),!.plot(Ps,Grid1,Grid2) :- Ps=[[X1,Y1],[X2,Y2]], %write([[X1,Y1],[X2,Y2]]), line1(X1,Y1,X2,Y2,Grid1,Grid2,1),!.plot(Ps,Grid1,Grid2) :- Ps=[[X1,Y1],[X2,Y2]|Ps2], %write([X2,Y2]), line1(X1,Y1,X2,Y2,Grid1,Grid3,1), plot([[X2,Y2]|Ps2],Grid3,Grid2),!.plot(_,G,G) :- !.prettyprint1_lg(_C,0,_X) :- !.prettyprint1_lg(C,N,X) :-prettyprint2_lg(C,N,1,X),writeln(''),N2 is N-1,prettyprint1_lg(C,N2,X).
pred_already_in_list2(PredicateName,InputVars1L,OutputVarsL,Rules0,Rules) :-not(member([[n,PredicateName],InputVars1L,OutputVarsL],Rules0)),apply_rules_existing_and_new_branch(Rules0,Rules01),append(Rules01,[[predicatename_existing,InputVars1L,OutputVarsL]  %% Uncommented for test 7],Rules).
interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),Value1A = [Value2],        val1emptyorvalsequal(Value1,Value1A),        %%val1emptyorvalsequal(Value1A,Value2),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,wrap],[variable,[Value2]]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,wrap],[Variable2,[Value2]]],"Press c."]),(not(get_single_char(97))->true;abort));true).
%find_data2(Q_Table,MA_Table,MA_Table2,Answer_table).
%find_data2(Q_Table,MA_Table,MA_Table2,Answer_table).find_spanning_cols(Table_N,MA_Table,SC,Q_Table,Answer_table) :-% find col headings, fill in data%once((Ns=[1,2,3],findall([N,SC1],(member(N,Ns),get_item_n(MA_Table,N, Row),sub_term_wa([x_span,_],Row,SC1)),[[N,SC]|_]),findall(C1,member([x_span,[var,T1,N,%change for rowC1,IN1,V,VN,TP1,RP1,CP1,INP1]],SC),Cs),sort(Cs,Cs1),N1 is N-1,get_item_n(MA_Table,N1,Col_heads_mat_row),findall([C,Col_head],(member(C,Cs1),get_item_n(Col_heads_mat_row,C,Col_head)),Col_heads_mat),find_first(((Q_Table1=Q_Table->true;flip_x_y(Q_Table,Q_Table1)),search_for_col_heads_and_row(Col_heads_mat,Q_Table1,Col_heads_qt,Col_heads_qt_row),%((length(Col_heads_mat,CL),length(Col_heads_qt,CL))->(writeln("Error: Col_heads_mat and Col_heads_qt for table are different lengths."),abort)),% build answer table% do extra cols% find vars (cols with items) for x span (formulas) %findall(X,(member))length(MA_Table,MARL),numbers(MARL,1,[],MARLNs),MA_Table=[MAC|_],length(MAC,MACL),numbers(MACL,1,[],MACLNs),% Expand each row to have the content from QT% On a similar column heading, use the same col heading and save the end formulas, foldr appending laterMA_Table=[MA_header|MA_rest],get_item_n(Col_heads_qt,Col_heads_qt_row,Col_heads_qt_LN1),%findall([Col_header_at,Formula_T,%Formula_R,%Formula_C,Formula_I%,Formula_VN%],%(%member(MAR1,MARLNs),(%get_item_n(MA_Table,MAR1,Row_y),%findall([[Cell_x1],Rest_of_cells]%[CN,QT_col_head,MAC1,Cell_x]find_at_header(MA_header,Col_heads_qt_LN1,1,%,MACL2,[],Col_header_at2%,Formula_T,%Formula_R,%Formula_C,Formula_I%,%Formula_T,%Formula_R,%Formula_C,Formula_I),),length(Col_header_at2,Col_header_at2L),numbers(Col_header_at2,1,[],Col_header_at2Ns),%findall(Z,())findall([Curr_col_h,Symbol],(member(Col_header_at2N1,Col_header_at2Ns),(get_item_n(Col_header_at2,Col_header_at2N1,[Curr_col_h,Symbol]))),Header_1),findall(H1,member([H1,_],Header_1),Header),length(MA_rest,MA_rest_L),numbers(MA_rest_L,1,[],MA_rest_L_Ns),findall(AT,(member(MA_rest_L_N,MA_rest_L_Ns),get_item_n(MA_rest,MA_rest_L_N,Row_from_rest),%findall([Curr_col_h,Symbol],(% * make sums separate from other parts in other formulas (if a function says a=(23+b+c+d) then write a separate function b+c+d), sum everything including items% replace span with a+b etc% create vars%findall([Curr_col_h,Symbol],(member(Col_header_at2N1,Col_header_at2Ns),(get_item_n(Col_header_at2,Col_header_at2N1,[Curr_col_h,Symbol]),%get_item_n(Row_from_rest,Col_header_at2N1,MA_cell),find_at_row(Table_N,MA_rest_L_N,Row_from_rest,Header_1,1,%,MACL2,[],Row_at2%,Formula_T,%Formula_R,),%sub term wa to get vars x use code from before to point vars from qt to at x put vals in onlyappend([Header],Rest_at,AT)),Answer_table))),!.
%findall([Add,X4],(member([Add,Z1],In2),member([Z1,X2],UV2),Z1=[X1,X3],replace_term([X1,X3],X1,X2,X4)),UV).not_r_o_nd_types(A) :- not(r_o_nd_types(A)),!.r_o_nd_types(r).
% 8 3 21/**strings_to_grid3dstrings_to_grid3d(Strings,Grid) :-length(Strings,Levels),numbers(Levels,1,[],LN1),reverse(LN1,LN),Strings=[Strings_1|_],length(Strings_1,Y),Strings_1=[String_2|_],string_length(String_2,X),findall(Grid2,(member(Level,LN),get_item_n(Strings,Level,String),process_strings(String,Strings2),length(Strings2,Y),Strings2=[String1|_],length(String1,X),numbers(Y,1,[],YN1),reverse(YN1,YN),numbers(X,1,[],XN),findall([Level1,X1,Y11,String3],(member(Y1,YN),Y11 is Y-Y1+1,Level1 is Levels-Level+1,get_item_n(Strings2,Y1,String4),member(X1,XN),get_item_n(String4,X1,String2),(String2="*"->String3=[*];String3=[])),Grid2)%,%print_grid(Grid2,X,Y)),Grid3),%trace,maplist(append,[Grid3],[Grid]),print_grid(Grid,X,Y,Levels).
% to do: initial values, more result vars%repeat_until_last_two_same(Pred,Pred_res_var,Result) :-%   repeat_until_last_two_same(Pred,Pred_res_var, _,_, Result),!.
% to do: initial values, more result vars* put into shell command to work with other Prolog predicate arguments        */repeat_until_last_two_same(Result) :-   repeat_until_last_two_same(_, Result),!.
/**name1([L3|Xs]) --> [X], {string_codes(L2,[X]),(char_type(X,alnum)->true;L2="_"),downcase_atom(L2,L3)}, name1(Xs), !.
border(X1,Y1,Z1,Grid1,Grid2) :-%trace,horizontal_line(1,X1,1,Z1,Grid1,Grid3),%print_grid(Grid3,9,11),horizontal_line(1,X1,Y1,Z1,Grid3,Grid4),vertical_line(1,Y1,1,Z1,Grid4,Grid5),vertical_line(1,Y1,X1,Z1,Grid5,Grid2),!.
checktypes0(Function,Vars1,TypeStatements1) :-get_lang_word("Type check",Type_check),length(Vars1,L),(types(on)->(debug_types_call([Function,/,L,Type_check]));true),(types(on)->debug_call(Skip,[Function,Vars1]);true),((member([Function|[TypeStatements2]],TypeStatements1),checktypes1(Vars1,TypeStatements2,TypeStatements2,TypeStatements1))->((types(on)->debug_exit(Skip,[Function,Vars1]);true),(types(on)->(debug_types_exit([Function,/,L,Type_check]));true));((types(on)->debug_fail(Skip,[Function,Vars1]);true),(types(on)->(debug_types_fail([Function,/,L,Type_check]));true))),!.
checktypes0(Function,Vars1,TypeStatements1) :-length(Vars1,L),(types(on)->(debug_types_call([Function,/,L,Type_check]));true),(types(on)->debug_call(Skip,[Function,Vars1]);true),((member([Function|[TypeStatements2]],TypeStatements1),checktypes1(Vars1,TypeStatements2,TypeStatements2,TypeStatements1))->((types(on)->debug_exit(Skip,[Function,Vars1]);true),(types(on)->(debug_types_exit([Function,/,L,Type_check]));true));((types(on)->debug_fail(Skip,[Function,Vars1]);true),(types(on)->(debug_types_fail([Function,/,L,Type_check]));true))),!.
choose_texts(Texts1,Texts2,Text) :-random_member(Text,Texts1),delete(Texts1,Text,Texts2).
collect_vars(Connections,Vars2) :-maplist(append,[Connections],[Vars1]),sort(Vars1,Vars2).
delete_invisibles_etc(F,G) :-findall(J,(member(H,F),atom_string(H,J),not(J="."),not(J=".."),not(string_concat(".",_,J))),G).
delete_invisibles_etc(F,G) :-findall(J,(member(H,F),atom_string(H,J),not(J="."),not(J=".."),not(string_concat(".",_,J))),G).string(String) --> list(String).
disjunction(A,B,true) :-(A=true;B=true), !.
find_rhythm(_,_,[],B,B) :- !.find_rhythm(Time,Note_n,A,B,C) :-%writeln1(find_rhythm(Time,Note_n,A,B,C)),%trace,A=[D|E],atom_string(D2,D),time(D2,Type,Length),% ["1/2","NT","1/2",1,80]ff_frac(Time,Time1),(Type=n->Type1="NT";Type1="R"),%Lengths=[Length1|Lengths2],ff_frac(Length,Length1),(E=[D1|E1]->(catch(number_string(D3,D1),_,false)->(Note_n1=D3,A1=E1);(Note_n1=Note_n,A1=E));(A1=E,Note_n1=Note_n)),%writeln1(append(B,[[Time1,Type1,Length1,Note_n1,80]],B1)),append(B,[[Time1,Type1,Length1,Note_n1,80]],B1),%catch(number_string(Length5,Length),_,false),Time2 is Time+Length,(Type1="NT"->Note_n2 is Note_n1+1;Note_n2=Note_n1),find_rhythm(Time2,Note_n2,A1,B1,C),!.
interpretpart("",Variable1,Vars1,Vars1) :-        getvalue(Variable1,Value1,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),not(isempty(Value1)),%%isempty(Value2),        %%val1emptyorvalsequal(Value2,Value1),%%isval(Value2),debug_call(Skip,[[n,""],[Value1]]),(        Value1=""->debug_exit(Skip,[[n,""],[Value1]]);     debug_fail(Skip,[[n,""],[Value1]])),!.
interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("wrap",Dbw_wrap),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_wrap],[Value1,Variable2]]),((Value1A = [Value1],        val1emptyorvalsequal(Value2,Value1A),        %%val1emptyorvalsequal(Value1A,Value2),        putvalue(Variable2,Value1A,Vars1,Vars2))->debug_exit(Skip,[[Dbw_n,Dbw_wrap],[Value1A,Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_wrap],[Value1,Variable2]])),!.
interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("wrap",Dbw_wrap),        getvalues_equals4(Variable1,Variable2,Value1,_Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_wrap],[Value1,Variable2]]),((Value1A = [Value1],        %val1emptyorvalsequal(Value2,Value1A),        %%val1emptyorvalsequal(Value1A,Value2),        putvalue_equals4(Variable2,Value1A,Vars1,Vars2))->debug_exit(Skip,[[Dbw_n,Dbw_wrap],[Value1A,Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_wrap],[Value1,Variable2]])),!.
interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1A = [Value2, Value3],        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,=],[variable,[Value2,Value3]]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,=],[Value2,Value3],[Value2,Value3]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1A = [Value2, Value3],        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,=],[variable,[Value2,Value3]]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,=],[Value2,Value3],[Value2,Value3]],"Press c."]),(not(get_single_char(97))->true;abort));true).interpretpart(delete,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        delete(Value1,Value2,Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,delete],[Value1,Value2,variable3]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,delete],[Value1,Value2,Value3A]],"Press c."]),(not(get_single_char(97))->true;abort));true).
line(Word1) -->"(",line(Word2),")",{Word1=[Word2]},!.line(Word1) -->"(",line(Word2),"->",newlines1(_N1),spaces1(_),line(Word3),";",newlines1(_N2),spaces1(_),line(Word4),")",{%(Word4=[[[[n,_]|_]|_]|_]->Word4=[Word41];Word4=Word41),Word1=[[n,"->"],[Word2,Word3,Word4]]},!.line(Word1) -->"(",line(Word2),"->",newlines1(_N2),spaces1(_),line(Word3),")",{Word1=[[n,"->"],[Word2,Word3]]},!.
line(Word1) -->"{",line(Word2),"}",{Word1=[[n,code],Word2]},!.line(Word1) -->"(",newlines1(_),line(Word2),")",{Word1=[Word2]},!.
lowest_factor(_N1,[],_N3) :- fail.
lucianpl1(Debug) :- retractall(debug(_)), assertz(debug(Debug)),   retractall(cut(_)),   assertz(cut(off)),   %retractall(leash1(_)),   %assertz(leash1(off)),    %% Should normally be off(not(leash1(_))->(retractall(leash1(_)),assertz(leash1(off)));true),  retractall(sys(_)), assertz(sys(1)),retractall(pred_id(_)), assertz(pred_id(%100% 0 )),   retractall(debug2(_)),  retractall(debug3(_)),  retractall(debug4(_)),  retractall(retry_back(_)),  retractall(retry_back_stack(_)),  retractall(retry_back_stack_n(_)),  retractall(cumulative_or_current_text(_)),  retractall(number_of_current_text(_)),  %retractall(html_api_maker_or_terminal(_)),  %retractall(screen_text(_)),  %retractall(curr_screen_text(_)),    retractall(session_number(_)), assertz(session_number(_)),   assertz(debug2(off)), % on - displays ssi debug info assertz(debug3(off)), % on - displays level assertz(debug4(off)), % on - displays append cp etc. trace assertz(retry_back(on)), % on - retry/back mode options available in trace mode assertz(retry_back_stack([])), % on - retry/back mode options available in trace mode %assertz(screen_text([])),  %assertz(curr_screen_text("")),  assertz(retry_back_stack_n(0)), assertz(cumulative_or_current_text(current)), assertz(number_of_current_text(1)), %assertz(html_api_maker_or_terminal(html %terminal %)),(not(save_debug(_))->(retractall(save_debug(_)),assertz(save_debug(off)));true),(not(equals4(_Equals4))->(retractall(equals4(_)),assertz(equals4(on)));true).append_retry_back_stack(_Item) :-true.
medicine1("A").
memberlp2c1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Function,_Symbol,Body],        interpretstatementlp2c2a(Function,Algorithm1,Algorithm3b),                concat_list([Algorithm3b,"(void){"],Algorithm3a),%%string_concat(Algorithm3a,"(",Algorithm3d),        interpretbodylp2c(Body,Algorithm3a,Algorithm2a),        write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
memberlp2p1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Function,Symbol1,Body],        symbol_lp2p(Symbol1,Symbol2),        interpretstatementlp2p2a(Function,Algorithm1,Algorithm3b,"[]"),                concat_list([Algorithm3b,Symbol2],Algorithm3a),%%string_concat(Algorithm3a,"(",Algorithm3d),        interpretbodylp2p(Body,Algorithm3a,Algorithm2a),        write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
shell1_s(Command) :- atom_string(Command1,Command),shell1(Command1),!.
split_on_substring(A,B,D) :-string_codes(A,A1),string_codes(B,B1),split_on_substring117(A1,B1,[],D1),(D1=[]->D2=[""];D1=D2),%D2=D,%delete_double_newlines(D2,[],D),append(_D6,B4,D2),append([B5],_C4,B4),not(B5="\n"),delete_newlines_after_text(B4,[],D),!.
string_to_list2(B,A1,A2) :- string_concat(D,"",B),string_length(D,1),append(A1,[D],A2),!.
texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,Words_to_read,[auto,Auto]) :-retractall(auto(_)),assertz(auto(Auto)),(Stringx1=""->true;(retractall(complete_display(_)),assertz(complete_display(false)),retractall(words_to_read(_)),assertz(words_to_read(Words_to_read)),((number(N1),N=N1)->true;(N1=u,N=1)),((Filex1=u,Filex="../Text-to-Breasonings/file.txt")->true;Filex=Filex1),((number(M1),M=M1)->true;M=all), %% If m1 is undefined or all then m=allprep(List1,BrDict03,BrDict03t,Filex,Stringx1,M,Brth,BrthDict03,Room,RoomDict03,PartOfRoom,PartOfRoomDict03,Direction,DirectionDict03,ObjectToPrepare,ObjectToPrepareDict03,ObjectToFinish,ObjectToFinishDict03),retractall(n(_)),assertz(n(N)),retractall(brDict03(_)),assertz(brDict03(BrDict03)),retractall(brDict03t(_)),assertz(brDict03t(BrDict03t)),br2(List1,N),%,BrDict03,BrDict2,BrDict03t,BrDict03t2,N,Brth,BrthDict03,BrthDict04,Room,RoomDict03,RoomDict04,PartOfRoom,PartOfRoomDict03,PartOfRoomDict04,Direction,DirectionDict03,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict04),brDict031(BrDict2),brDict03t1(BrDict03t2),sort(BrDict2,BrDict3),(BrDict03=BrDict3->true;(open_s("../Text-to-Breasonings/brdict1.txt",write,Stream),%%string_codes(BrDict3),write(Stream,BrDict3),close(Stream))),sort(BrDict03t2,BrDict03t3),(BrDict03t=BrDict03t3->true;(open_s("../Text-to-Breasonings/brdict2.txt",write,Stream2),%%string_codes(BrDict3),write(Stream2,BrDict03t3), close(Stream2))),  /* ((Brth=true, sort(BrthDict04,BrthDict044),(BrthDict03=BrthDict044->true;(open_s("../Text-to-Breasonings/brthdict.txt",write,Stream3),%%string_codes(BrDict3),write(Stream3,BrthDict044), close(Stream3))))->true;true),  ((Room=true, sort(RoomDict04,RoomDict044),(RoomDict04=RoomDict044->true;(open_s("../Text-to-Breasonings/roomdict.txt",write,Stream4),%%string_codes(BrDict3),write(Stream4,RoomDict044), close(Stream4))))->true;true), ((PartOfRoom=true, sort(PartOfRoomDict04,PartOfRoomDict044),(PartOfRoomDict04=PartOfRoomDict044->true;(open_s("../Text-to-Breasonings/partofroomdict.txt",write,Stream5),%%string_codes(BrDict3),write(Stream5,PartOfRoomDict044), close(Stream5))))->true;true), ((Direction=true, sort(DirectionDict04,DirectionDict044),(DirectionDict04=DirectionDict044->true;(open_s("../Text-to-Breasonings/directiondict.txt",write,Stream6),%%string_codes(BrDict3),write(Stream6,DirectionDict044), close(Stream6))))->true;true), ((ObjectToPrepare=true, sort(ObjectToPrepareDict04,ObjectToPrepareDict044),(ObjectToPrepareDict04=ObjectToPrepareDict044->true;(open_s("../Text-to-Breasonings/objecttopreparedict.txt",write,Stream7),%%string_codes(BrDict3),write(Stream7,ObjectToPrepareDict044), close(Stream7))))->true;true), ((ObjectToFinish=true, sort(ObjectToFinishDict04,ObjectToFinishDict044),(ObjectToFinishDict04=ObjectToFinishDict044->true;(open_s("../Text-to-Breasonings/objecttofinishdict.txt",write,Stream8),%%string_codes(BrDict3),write(Stream8,ObjectToFinishDict044), close(Stream8))))->true;true), */  length(List1,List1_length_a), List1_length_a1 is List1_length_a*N, t2b_br_adder(List1_length_a1), Dividend_a is ceiling(List1_length_a/250), Dividend_b is Dividend_a*3, % for graciously giving texttobr2_a(Dividend_b,meditation), texttobr2_a(Dividend_b,medicine), texttobr2_a(Dividend_b,pedagogy) )),  !.replace0(Input,Find,Replace,SepandPad,M,Output0) :-replace00(Input,Find,Replace,SepandPad,[],Output1),truncate(Output1,M,Output0),!.
texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,Words_to_read,[auto,on]) :-retractall(auto(_)),assertz(auto(on)),(Stringx1=""->true;(retractall(complete_display(_)),assertz(complete_display(false)),retractall(words_to_read(_)),assertz(words_to_read(Words_to_read)),((number(N1),N=N1)->true;(N1=u,N=1)),((Filex1=u,Filex="../Text-to-Breasonings/file.txt")->true;Filex=Filex1),((number(M1),M=M1)->true;M=all), %% If m1 is undefined or all then m=allprep(List1,BrDict03,BrDict03t,Filex,Stringx1,M,Brth,BrthDict03,Room,RoomDict03,PartOfRoom,PartOfRoomDict03,Direction,DirectionDict03,ObjectToPrepare,ObjectToPrepareDict03,ObjectToFinish,ObjectToFinishDict03),findall(List3,(member(C,List1),downcase_atom(C,List2),atom_string(List2,List3)),D),br2(D,BrDict03,BrDict2,BrDict03t,BrDict03t2,N,Brth,BrthDict03,BrthDict04,Room,RoomDict03,RoomDict04,PartOfRoom,PartOfRoomDict03,PartOfRoomDict04,Direction,DirectionDict03,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict04),/*sort(BrDict2,BrDict3),(BrDict03=BrDict3->true;(open_s("../Text-to-Breasonings/brdict1.txt",write,Stream),%%string_codes(BrDict3),write(Stream,BrDict3),close(Stream))),sort(BrDict03t2,BrDict03t3),(BrDict03t=BrDict03t3->true;(open_s("../Text-to-Breasonings/brdict2.txt",write,Stream2),%%string_codes(BrDict3),write(Stream2,BrDict03t3), close(Stream2))),  ((Brth=true, sort(BrthDict04,BrthDict044),(BrthDict03=BrthDict044->true;(open_s("../Text-to-Breasonings/brthdict.txt",write,Stream3),%%string_codes(BrDict3),write(Stream3,BrthDict044), close(Stream3))))->true;true),  ((Room=true, sort(RoomDict04,RoomDict044),(RoomDict04=RoomDict044->true;(open_s("../Text-to-Breasonings/roomdict.txt",write,Stream4),%%string_codes(BrDict3),write(Stream4,RoomDict044), close(Stream4))))->true;true), ((PartOfRoom=true, sort(PartOfRoomDict04,PartOfRoomDict044),(PartOfRoomDict04=PartOfRoomDict044->true;(open_s("../Text-to-Breasonings/partofroomdict.txt",write,Stream5),%%string_codes(BrDict3),write(Stream5,PartOfRoomDict044), close(Stream5))))->true;true), ((Direction=true, sort(DirectionDict04,DirectionDict044),(DirectionDict04=DirectionDict044->true;(open_s("../Text-to-Breasonings/directiondict.txt",write,Stream6),%%string_codes(BrDict3),write(Stream6,DirectionDict044), close(Stream6))))->true;true), ((ObjectToPrepare=true, sort(ObjectToPrepareDict04,ObjectToPrepareDict044),(ObjectToPrepareDict04=ObjectToPrepareDict044->true;(open_s("../Text-to-Breasonings/objecttopreparedict.txt",write,Stream7),%%string_codes(BrDict3),write(Stream7,ObjectToPrepareDict044), close(Stream7))))->true;true), ((ObjectToFinish=true, sort(ObjectToFinishDict04,ObjectToFinishDict044),(ObjectToFinishDict04=ObjectToFinishDict044->true;(open_s("../Text-to-Breasonings/objecttofinishdict.txt",write,Stream8),%%string_codes(BrDict3),write(Stream8,ObjectToFinishDict044), close(Stream8))))->true;true), */ length(List1,List1_length_a), List1_length_a1 is List1_length_a*N, t2b_br_adder(List1_length_a1), Dividend_a is ceiling(List1_length_a/250), Dividend_b is Dividend_a*3, % for graciously giving texttobr2_a(Dividend_b,meditation), texttobr2_a(Dividend_b,medicine), texttobr2_a(Dividend_b,pedagogy) )),  !.
write_references(R2,References,Refs_no_head) :-findall([Reference,"\n"],member([Reference,_Ref11,_Page_num1,_End_note_number1],R2),References3),sort(References3,References1),concat_list1(References1,References2),concat_list([References2],Refs_no_head),concat_list(["Bibliography","\n\n",References2],References).
"(",varnames(Varnames),")",{A=[[Word11,"*","*"],Varnames]},!.
%%number_string(R3,R2),formr5(RList,Upper,Length,R5) :-%%findall(D,(member(C,RList),floor(C,D)),RList2),concat_list2A(RList,R5A),number_string(R5B,R5A),R51 is floor((R5B/Upper)*Length),(R5B=Upper->R5 is R51-1;R5=R51).
%%number_string(R3,R2),formr5(RList,Upper,Length,R5) :-%%findall(D,(member(C,RList),floor(C,D)),RList2),concat_list2A(RList,R5A),number_string(R5B,R5A),R51 is floor((R5B/Upper)*Length),(R5B=Upper->R5 is R51-1;R5=R51).findr(R4,List,R) :-%%floor(R4,R4A),length(A,R4),append(A,[R|_],List).%%random_member(A,List),%%R=[[_,A]]./**length(List,L),Trials is L*3,trialy22(List,Trials,[],R).**/trialy22([],_,R,R) :- !.trialy22(List,Trials,RA,RB) :-List=[Item|Items],trialy21(Item,Trials,R1),append(RA,[R1],RC),trialy22(Items,Trials,RC,RB),!.
%%read_string(user_input,1,_).
%%split_on_double_newline(J,[],K)),T).
%%string_concat(Algorithm3,"]",Algorithm2).
%term_to_atom(File_term,File_string),!.
%{trace,(Word11="->"->trace;true)},{%trace,not(Word11=findall)},"(",newlines1(_),varnames(Varnames),")",{A=[[n,Word11],Varnames]},!.line(A) --> %%spaces1(_), name1(Variable1),newlines1(_),{%trace,not(Variable1=findall)},newlines1(_), %% A = B*Y(name1(_Is)|name2(_Equals)), newlines1(_), name1(Variable2), newlines1(_),name2(Operator),newlines1(_), {%trace,not(Operator=(->))},name1(Variable3), %newlines1(_),{ %% A=B*Y v_if_string_or_atom(Variable2,Variable2a),v_if_string_or_atom(Variable3,Variable3a),v_if_string_or_atom(Variable1,Variable1a),A=[[n,Operator],[Variable2a,Variable3a,Variable1a]]},!.
**/choose_texts(Texts1,Texts2,Text) :-random_member(Text,Texts1),delete(Texts1,Text,Texts2).
*//*predicate(A) -->name1(Word11), "(",newlines1(_),spaces1(_),varnames(Varnames),newlines1(_),spaces1(_),")",".", {A=[[n,Word11],Varnames]}.
*/line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"=",%name2(Word21), %spaces1(_), "[","]",{v_if_string_or_atom(Word10,Word10a),%v_if_string_or_atom(Word11,Word11a),%v_if_string_or_atom(Word12,Word12a),A=[[n,equals4],[Word10a,[]]]},!.
*/predicate(A2) -->name1(Word11),"(",varnames(Varnames),")","{",spaces1(_),%":-",newlines1(_N),%{trace},lines(L), "}",{foldr(append,[[[n,Word11],Varnames,":-"],%N,[L]],A2)%delete(A,[],A2)}.
/**),Texts1),%trace,choose_texts(Texts1,_Texts2,Text_a),% choose_texts(Texts2,Texts3,Text_b),% choose_texts(Texts3,_Texts4,Text_c),maplist(append,[[[Text_a]]],[Texts]).
member_cut1([A1,A2,A_Pred_id,A_Level,A_Predicate_number,A_Line_number_a,A5,A3|A4],Choice_point_trail14) :-member([A1,A2,A_Pred_id,A_Level,A_Predicate_number,A_Line_number_a,A5,A3|A4],Choice_point_trail14),!.
pred_already_in_list2(PredicateName,InputVars1L,OutputVarsL,Rules0,Rules) :-member([[n,PredicateName],InputVars1L,OutputVarsL],Rules0),apply_rules_existing_and_new_branch(Rules0,Rules),!.
remove_chains_of_one_child_a3(Switch,A9,Options6a,Options5,Options31),(N3=[-,_]->Options31=Options3;remove_chains_of_one_child_a([N3],Options31,[],Options3))%,notrace.remove_chains_of_one_child_a4(N1,A,N3,Options1,Options2,Options3) :-%trace,(N1=[-,_]->(N3=N1,Options2=Options3);(member([N1,A,N2],Options1),member([N2,_,N22],Options1),member([N2,_,N23],Options1),not(N22=N23),N3=N2,append(Options2,[[N1,A,N2]],Options3))),!.
member1a([String3,String3a,String3aa],ML_db) :-member([String3,String3a,String3aa],ML_db),!.
prep(List,BrDict03,BrDict03t,Filex,Stringx1,M,Brth,BrthDict03,Room,RoomDict03,PartOfRoom,PartOfRoomDict03,Direction,DirectionDict03,ObjectToPrepare,ObjectToPrepareDict03,ObjectToFinish,ObjectToFinishDict03) :-phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),%%Chars="’",SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),%%writeln([brdict1]),splitfurther(BrDict0,BrDict01),%%writeln([brDict01,BrDict01]),%%char_code(Escape,27),%%delete(BrDict01,[Escape,_,_,_,_],BrDict021),%%writeln([brDict021,BrDict021]),%%char_code(Apostrophe,8217),%%delete(BrDict021,[Apostrophe,_,_,_,_],BrDict02),%%writeln([brDict02,BrDict02]),sort(BrDict01,BrDict03),%%writeln([brDict03,BrDict03]),length(BrDict03,Length0),write("Number of words in dictionary: "), writeln(Length0),%%writeln(''),%%writeln([brdict2]),phrase_from_file_s(string(BrDict0t), "../Text-to-Breasonings/brdict2.txt"),%%Chars="’",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),splitfurthert(BrDict0t,BrDict01t),%%writeln([brDict01,BrDict01]),%%delete(BrDict01t,[Escape,_,_,_,_],BrDict021t),%%writeln([brDict021,BrDict021]),%%delete(BrDict021t,[Apostrophe,_,_,_,_],BrDict02t),%%writeln([brDict02,BrDict02]),sort(BrDict01t,BrDict03t),% br_freq%B=BrDict03t,A=BrDict03,findall([DL,C,"\n"],(member([C,_,_,_],B),findall(_,member([_,C],A),D),length(D,DL)),E),sort(E,F),reverse(F,G),writeln([br_freq,G]),%%writeln([brDict03,BrDict03]),length(BrDict03t,Length0t),write("Number of unique breasonings in dictionary: "), writeln(Length0t),((Stringx1=u,phrase_from_file_s(string(String001), Filex))->true;String001=Stringx1),process_t2b(String001,String00),retractall(f(_)),assertz(f(String00)),%trace,%string_codes(SNL0,String00),split_string(String00,"\n\r.","\n\r.",SNL1),delete(SNL1,"",SNL),length(SNL,SN),retractall(sn(_)),assertz(sn(SN)),split_string(String00,SepandPad,SepandPad,List1),%%split_string_onnonletter(String00,List1),truncate(List1,M,List),%findall([X," "],member(X,List),Y),%foldr(string_concat,Y,Y1),/**replace0(String0,[8221, 8220], 34, SepandPad, M, String1),replace0(String1,[8216, 8217], 39, SepandPad, M, String2),replace0(String2,[8259, 8211, 8212], 45, SepandPad, M, String3),replace0(String3,[160], 32, SepandPad, M, List),**/%%atom_codes(Atom999,String),writeln([atom999,Atom999]),%%writeln([list,List]),%%delete(List,Escape,List11),%%writeln([list11,List11]),%%delete(List11,Apostrophe,List1),%%writeln([list1,List1]),length(List,Length1),write("Number of words to breason out in file: "), writeln(Length1),sort(List,List2),%%writeln([list2,List2]),length(List2,Length2),write("Number of unique words in file: "), writeln(Length2),((Brth=true,phrase_from_file_s(string(BrthDict0), "../Text-to-Breasonings/brthdict.txt"),splitfurther(BrthDict0,BrthDict01),sort(BrthDict01,BrthDict03),length(BrthDict03,BrthLength0),write("Number of unique breathsonings in dictionary: "), writeln(BrthLength0))->true;true),((Room=true,phrase_from_file_s(string(RoomDict0), "../Text-to-Breasonings/roomdict.txt"),splitfurther(RoomDict0,RoomDict01),sort(RoomDict01,RoomDict03),length(RoomDict03,RoomLength0),write("Number of unique rooms in dictionary: "), writeln(RoomLength0))->true;true),((PartOfRoom=true,phrase_from_file_s(string(PartOfRoomDict0), "../Text-to-Breasonings/partofroomdict.txt"),splitfurther(PartOfRoomDict0,PartOfRoomDict01),sort(PartOfRoomDict01,PartOfRoomDict03),length(PartOfRoomDict03,PartOfRoomLength0),write("Number of unique parts of rooms in dictionary: "), writeln(PartOfRoomLength0))->true;true),((Direction=true,phrase_from_file_s(string(DirectionDict0), "../Text-to-Breasonings/directiondict.txt"),splitfurther(DirectionDict0,DirectionDict01),sort(DirectionDict01,DirectionDict03),length(DirectionDict03,DirectionLength0),write("Number of unique directions in dictionary: "), writeln(DirectionLength0))->true;true),((ObjectToPrepare=true,phrase_from_file_s(string(ObjectToPrepareDict0), "../Text-to-Breasonings/objecttopreparedict.txt"),splitfurther(ObjectToPrepareDict0,ObjectToPrepareDict01),sort(ObjectToPrepareDict01,ObjectToPrepareDict03),length(ObjectToPrepareDict03,ObjectToPrepareLength0),write("Number of unique objects to prepare in dictionary: "), writeln(ObjectToPrepareLength0))->true;true),((ObjectToFinish=true,phrase_from_file_s(string(ObjectToFinishDict0), "../Text-to-Breasonings/objecttofinishdict.txt"),splitfurther(ObjectToFinishDict0,ObjectToFinishDict01),sort(ObjectToFinishDict01,ObjectToFinishDict03),length(ObjectToFinishDict03,ObjectToFinishLength0),write("Number of unique objects to finish in dictionary: "), writeln(ObjectToFinishLength0))->true;true),(complete_display(true)->((Stringx1=u, %% Use file, not string as input.
prep(List,BrDict03,BrDict03t,Filex,Stringx1,M,Brth,BrthDict03,Room,RoomDict03,PartOfRoom,PartOfRoomDict03,Direction,DirectionDict03,ObjectToPrepare,ObjectToPrepareDict03,ObjectToFinish,ObjectToFinishDict03) :-phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),%%Chars="’",SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),%%writeln([brdict1]),splitfurther(BrDict0,BrDict01),%%writeln([brDict01,BrDict01]),%%char_code(Escape,27),%%delete(BrDict01,[Escape,_,_,_,_],BrDict021),%%writeln([brDict021,BrDict021]),%%char_code(Apostrophe,8217),%%delete(BrDict021,[Apostrophe,_,_,_,_],BrDict02),%%writeln([brDict02,BrDict02]),sort(BrDict01,BrDict03),%%writeln([brDict03,BrDict03]),length(BrDict03,Length0),write("Number of words in dictionary: "), writeln(Length0),%%writeln(''),%%writeln([brdict2]),phrase_from_file_s(string(BrDict0t), "../Text-to-Breasonings/brdict2.txt"),%%Chars="’",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),splitfurthert(BrDict0t,BrDict01t),%%writeln([brDict01,BrDict01]),%%delete(BrDict01t,[Escape,_,_,_,_],BrDict021t),%%writeln([brDict021,BrDict021]),%%delete(BrDict021t,[Apostrophe,_,_,_,_],BrDict02t),%%writeln([brDict02,BrDict02]),sort(BrDict01t,BrDict03t),% br_freq%B=BrDict03t,A=BrDict03,findall([DL,C,"\n"],(member([C,_,_,_],B),findall(_,member([_,C],A),D),length(D,DL)),E),sort(E,F),reverse(F,G),writeln([br_freq,G]),%%writeln([brDict03,BrDict03]),length(BrDict03t,Length0t),write("Number of unique breasonings in dictionary: "), writeln(Length0t),((Stringx1=u,phrase_from_file_s(string(String001), Filex))->true;String001=Stringx1),process_t2b(String001,String00),split_string(String00,SepandPad,SepandPad,List1),%%split_string_onnonletter(String00,List1),truncate(List1,M,List),/**replace0(String0,[8221, 8220], 34, SepandPad, M, String1),replace0(String1,[8216, 8217], 39, SepandPad, M, String2),replace0(String2,[8259, 8211, 8212], 45, SepandPad, M, String3),replace0(String3,[160], 32, SepandPad, M, List),**/%%atom_codes(Atom999,String),writeln([atom999,Atom999]),%%writeln([list,List]),%%delete(List,Escape,List11),%%writeln([list11,List11]),%%delete(List11,Apostrophe,List1),%%writeln([list1,List1]),length(List,Length1),write("Number of words to breason out in file: "), writeln(Length1),sort(List,List2),%%writeln([list2,List2]),length(List2,Length2),write("Number of unique words in file: "), writeln(Length2),((Brth=true,phrase_from_file_s(string(BrthDict0), "../Text-to-Breasonings/brthdict.txt"),splitfurther(BrthDict0,BrthDict01),sort(BrthDict01,BrthDict03),length(BrthDict03,BrthLength0),write("Number of unique breathsonings in dictionary: "), writeln(BrthLength0))->true;true),((Room=true,phrase_from_file_s(string(RoomDict0), "../Text-to-Breasonings/roomdict.txt"),splitfurther(RoomDict0,RoomDict01),sort(RoomDict01,RoomDict03),length(RoomDict03,RoomLength0),write("Number of unique rooms in dictionary: "), writeln(RoomLength0))->true;true),((PartOfRoom=true,phrase_from_file_s(string(PartOfRoomDict0), "../Text-to-Breasonings/partofroomdict.txt"),splitfurther(PartOfRoomDict0,PartOfRoomDict01),sort(PartOfRoomDict01,PartOfRoomDict03),length(PartOfRoomDict03,PartOfRoomLength0),write("Number of unique parts of rooms in dictionary: "), writeln(PartOfRoomLength0))->true;true),((Direction=true,phrase_from_file_s(string(DirectionDict0), "../Text-to-Breasonings/directiondict.txt"),splitfurther(DirectionDict0,DirectionDict01),sort(DirectionDict01,DirectionDict03),length(DirectionDict03,DirectionLength0),write("Number of unique directions in dictionary: "), writeln(DirectionLength0))->true;true),((ObjectToPrepare=true,phrase_from_file_s(string(ObjectToPrepareDict0), "../Text-to-Breasonings/objecttopreparedict.txt"),splitfurther(ObjectToPrepareDict0,ObjectToPrepareDict01),sort(ObjectToPrepareDict01,ObjectToPrepareDict03),length(ObjectToPrepareDict03,ObjectToPrepareLength0),write("Number of unique objects to prepare in dictionary: "), writeln(ObjectToPrepareLength0))->true;true),((ObjectToFinish=true,phrase_from_file_s(string(ObjectToFinishDict0), "../Text-to-Breasonings/objecttofinishdict.txt"),splitfurther(ObjectToFinishDict0,ObjectToFinishDict01),sort(ObjectToFinishDict01,ObjectToFinishDict03),length(ObjectToFinishDict03,ObjectToFinishLength0),write("Number of unique objects to finish in dictionary: "), writeln(ObjectToFinishLength0))->true;true),(complete_display(true)->((Stringx1=u, %% Use file, not string as input.
expand_types1(Data,Types1,Types2) :-get_lang_word("t",T),%get_lang_word("string",Dbw_string),Data=[T,A],%string(Data),append(Types1,[[T,A]],Types2),!.
find_spanning_rows(Model_question_table,SR,Q_Table,Answer_table) :-flip_x_y(Model_question_table,Model_question_table1),once((member(Row,Model_question_table1),sub_term_wa([y_span,_],Row,SR))),!.
collect_arguments_body2(Body1,Body2,Body3) :-get_lang_word("n",Dbw_n),get_lang_word("or",Dbw_or),        Body1=[[[Dbw_n,Dbw_or],[Statements1,Statements2]]|Statements3],  %Number1a is Number1+1,        collect_arguments_body2([Statements1],Body2,Body4),        collect_arguments_body2([Statements2],Body4,Body5),        collect_arguments_body2(Statements3,Body5,Body3),        %append(Body3,Body4,Body34),        %Body6=[Number1,[n,or],Body34        %],        %append([Body6],Body5,Body2),        !.collect_arguments_body2(Body1,Body2,Body3) :-get_lang_word("n",Dbw_n),        Body1=[[[Dbw_n,"->"],[Statements1,Statements2]]|Statements3],  %Number1a is Number1+1,        collect_arguments_body2([Statements1],Body2,Body4),       collect_arguments_body2([Statements2],Body4,Body5),        collect_arguments_body2(Statements3,Body5,Body3),        %append(Body3,Body4,Body34),        %Body6=[Number1,[n,"->"],Body34        %],        %append([Body6],Body5,Body2),        !.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result0) :-get_lang_word("n",Dbw_n),get_lang_word("or",Dbw_or),        Body=[[[Dbw_n,Dbw_or],[Statements1,Statements2]]|Statements3],        (interpretbody(Functions0,Functions,Vars1,Vars3,[Statements1],Result1)        %%((Result1=cut)->!;true)); %% *** changed from 1 to Result2%%,((Value1=cut)->!;true));        interpretbody(Functions0,Functions,Vars1,Vars3,[Statements2],Result2)),%%!. *** changed from 1 to Result2        %%((Result2=cut)->!;true),        interpretbody(Functions0,Functions,Vars3,Vars2,Statements3,Result3),        %%((Result3=cut)->!;true),        logicaldisjunction(Result1a,Result1,Result2),        logicalconjunction(Result0,Result1a,Result3),        true.%%!.%%,((Value=cut)->!;true)).
process_body2(Body1,Body2) :-        Body1=[[or,[Statements1,Statements2]]|Statements3],        process_body2([Statements1],Body3),        process_body2([Statements2],Body4),        process_body2(Statements3,Body5),        append(Body3,Body4,Body34),        Body6=[[n,or],Body34        ],        append([Body6],Body5,Body2),        !.process_body2(Body1,Body2) :-        Body1=[["->",[Statements1,Statements2]]|Statements3],        process_body2([Statements1],Body3),       process_body2([Statements2],Body4),        process_body2(Statements3,Body5),        append(Body3,Body4,Body34),        Body6=[[n,"->"],Body34        ],        append([Body6],Body5,Body2),        !.process_body2(Body1,Body2) :-        Body1=[["->",[Statements1,Statements2,Statements2a]]|Statements3],        process_body2([Statements1],Body3),        process_body2([Statements2],Body4),        process_body2([Statements2a],Body5),        process_body2(Statements3,Body6),        append_list2([Body3,Body4,Body5],Body345),        Body7=[[n,"->"],Body345],                append([Body7],Body6,Body2),        !.
remove_chains_of_one_child_a3(_,[],Options1,Options2,Options3) :- append(Options1,Options2,Options3),!.
replace_pred_names(Body1,Body2,Body3,To_replace,Replace_with) :-get_lang_word("n",Dbw_n),get_lang_word("or",Dbw_or),        Body1=[[[Dbw_n,Dbw_or],[Statements1,Statements2]]|Statements3],  %Number1a is Number1+1,        replace_pred_names([Statements1],[],Body4,To_replace,Replace_with),        replace_pred_names([Statements2],[],Body5,To_replace,Replace_with),        replace_pred_names(Statements3,[],Body3a,To_replace,Replace_with),                append(Body4,Body5,Body6),                          append(Body2,[[[Dbw_n,Dbw_or],Body6]|Body3a],Body3),        %append(Body3,Body4,Body34),        %Body6=[Number1,[n,or],Body34        %],        %append([Body6],Body5,Body2),        !.
replace_vars(Body1,Body2,Body3,Var_index1,Var_index2,Var_table1,Var_table2) :-get_lang_word("n",Dbw_n),get_lang_word("or",Dbw_or),        Body1=[[[Dbw_n,Dbw_or],[Statements1,Statements2]]|Statements3],  %Number1a is Number1+1,        replace_vars([Statements1],[],Body4,Var_index1,Var_index3,Var_table1,Var_table3),        replace_vars([Statements2],[],Body5,Var_index3,Var_index4,Var_table3,Var_table4),        replace_vars(Statements3,[],Body3a,Var_index4,Var_index2,Var_table4,Var_table2),                append(Body4,Body5,Body6),          append(Body2,[[[Dbw_n,Dbw_or],Body6]|Body3a],Body3),        %append(Body3,Body4,Body34),        %Body6=[Number1,[n,or],Body34        %],        %append([Body6],Body5,Body2),        !.
/**updatevars(_FirstArgs,[],Vars,Vars).
split_string_onnonletter_by_itself2(String00,Chars,List1) :-string_codes(String00,String1),split_string_onnonletter_by_itself2(String1,[],Chars,List0),%string_codes(String1a,List0),%writeln(String1a),%trace,string_codes(List0,List2),split_string(List2,"ª","ª",List1),!.
 %gets next chunk (section) including up to a chunk, then goes over it and searches for more chunks *% get_up_to_next_chunk(B,[],Commands).
% sit_on_right([["left",[]],["right",[]]],"right","Andrew",Seats).% Seats = [["left", []], ["right", "Andrew"]].
% stwa each list containing "[".."]"remove_brackets1(T2,T3) :-%writeln1(remove_brackets1(T2,T3)),%trace,remove_brackets2(T2,[heuristic((append(["["],A1,A),append(_A2,["]"],A1)),A)],T22),%remove_brackets2(T21,[heuristic((append(["["],A1,A),append(A2,["]"],A1))],T22),(T2=T22->T3=T22;remove_brackets1(T22,T3)),!.
%c([a,b],[b,c],a,B3).%B3=c%c(A1,A2,B1,B3) :-%A1=[B1,B2],%A2=[B2,B3].alg(Trail,Alg) :-Trail=[[A,_]|_],reverse(Trail,[[_,C]|_]),length(Trail,Length),Length2 is Length+1,numbers(Length,1,[],N),term_to_atom(Trail,Trail2),string_concat("[",C1,Trail2),string_concat(C2,"]",C1),findall(L,(member(N1,N),N2 is N1+1,concat_list(["A",N1,"=[B",N1,",B",N2,"],"],L)),L2),findall(["A",N3,","],member(N3,N),L5),%trace,maplist(append,[L5],[L8]),append(L9,[","],L8),%string_concat(L5,",",L6),concat_list(L9,L7),%concat_list(L6,L5),%maplist(append,[L2],[L4]),concat_list(L2,L4),string_concat(L4,"!.",L3),concat_list(["anone(",C2,",\"",A,"\",B",Length2,").\n","B",Length2,"=\"",C,"\"\n\n","anone(",L7,",B1,B",Length2,"):-\n",L3],Alg),!.
/*replace_vars(Term,Vars1,Vars2,First_vars1,First_vars2) :-not(variable_name(Term)),Term=[[Term1|Term1a]|Term2],not(variable_name([Term1|Term1a])),replace_vars([Term1a],Vars1,Vars3,First_vars1,First_vars3),replace_vars(Term1,Vars3,Vars4,First_vars3,First_vars4),replace_vars(Term2,Vars4,Vars2,First_vars4,First_vars2),!.
/**get_string(Prompt1,String1) :-concat_list(Prompt1,Prompt2),(repeat,write(Prompt2),read_string(String1),not(String1="")).
all_empty([]) :-!.all_empty(Empty) :-is_empty(Empty),!.
caw3(RuleName0,Algorithms,Algorithms2,NumInputs0,NumOutputs0,New_rule_number,New_rule_number1,Rules,PredicateName,Program1,VarList,VarList2,InputVars2,InputVars4,OutputVars,Rule,NumInputs1,NumOutputs1,VarLists02,VarLists03,MaxPredicates,Rules2) :-%%Number_of_clauses2=1, %% Not tested nonrecursive multiclauses - use bottom upmember(Number_of_clauses1,[1]),%%,3,4]),(Number_of_clauses1>=MaxPredicates->Number_of_clauses2=MaxPredicates;Number_of_clauses2=Number_of_clauses1),create_multiple_nonrecursive_clauses(Number_of_clauses2,RuleName0,Algorithms,Algorithms2,NumInputs0,NumOutputs0,New_rule_number,New_rule_number1,Rules,PredicateName,Program1,VarList,VarList2,InputVars2,InputVars4,OutputVars,Rule,NumInputs1,NumOutputs1,VarLists02,VarLists03,MaxPredicates,Rules2).
collect_vars([],Vars,Vars) :- !.
find_deps3(Body1,%Body2,Body3,Pred_numbers,Deps) :- findall1(Pred_nums,(member([_Number,[_Dbw_on_true,_Statements1_number],[_Dbw_go_after,_Statements2_number],[_Dbw_on_false,_Return_line_false],[_Dbw_go_to_predicates,_Predicates],[_Dbw_n_or_v1,F]|Arguments1],Body1), foldr(append,Arguments1,Arguments), length(Arguments,Arity), get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n, member([[Dbw_n,F],Arity,Pred_nums],Pred_numbers) ),Deps1), sort(Deps1,Deps),!.
find_line_number(Line_number1,Line_number2) :-get_lang_word("exit_function",Dbw_exit_function1),Dbw_exit_function1=Dbw_exit_function,get_lang_word("fail_function",Dbw_fail_function1),Dbw_fail_function1=Dbw_fail_function,((Line_number1=[Dbw_exit_function,Line_number3]->true;Line_number1=[Dbw_fail_function,Line_number3])->Line_number2=Line_number3; Line_number2=Line_number1),!.
findbest(R,Item):-sort(R,RA),reverse(RA,RB),RB=[[_,Item]|_Rest].
findbest(R,Item):-sort(R,RA),reverse(RA,RB),RB=[[_,Item]|_Rest].find("decimal",Item1) :-trialy2([0,1,2,3,4,5,6,7,8,9],R), %% 0 is 0->1 etc.
get_c(Name2) :-c(N1),concat_list(["c",N1],Name1),atom_string(Name2,Name1),N2 is N1+1,retractall(c(_)), assertz(c(N2)).
get_options(Term,Curr,Options7) :-% next, previous, down, up, goOptions2=[],get_next(Curr,Next),(member([Next,N1],Term)->append(Options2,[["n","next",[Next,N1],"\n"]],Options3);Options3=Options2),get_prev(Curr,Prev),(member([Prev,P1],Term)->append(Options3,[["p","prev",[Prev,P1],"\n"]],Options4);Options4=Options3),get_up(Curr,Up),(member([Up,U1],Term)->append(Options4,[["u","up",[Up,U1],"\n"]],Options5);Options5=Options4),get_down(Curr,Down),(member([Down,D1],Term)->append(Options5,[["d","down",[Down,D1],"\n"]],Options6);Options6=Options5),append(Options6,[["g","go","\n"],["q","quit","\n"]],Options7).
isvar([Dbw_v,_Value]) :- get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,!.
prepare_file_for_ml(String000,String021) :-string_codes(String001,String000),downcase_atom(String001,String00),split_string(String00, "\n\r", "\n\r", String01),delete(String01,"",String02),findall(String03,(member(String02a,String02),split_string(String02a,".",".",String04),((String04=[String05|String06],number_string(Number05,String05),number_sentences(Number05,1,String06,[],String03))->true;(findall(String08,(SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",member(String04a,String04),split_string(String04a,SepandPad,SepandPad,String09),append_list([[""],"",String09],String08)),String03)))),String0211),append_list2(String0211,String021).
process([],D,D) :- !.process(D1,D2,D3) :-D1=[[D4,D5,DD,WC]|D6],%sort(DD1,DD),delete(D6,[D5,D4,_,_],D82),%delete(D81,[D4,D5,DD],D82),append(D82,[[D4,D5,DD,WC]],D83),findall([E,WC],(member([D4,D5,E,WC],D83)),E3),sort(E3,E2),delete(D82,[D4,D5,_,_],D84),append(D2,[[D4,D5,E2]],D9),process(D84,D9,D3),!.
shell1_s(Command,Out) :- atom_string(Command1,Command),bash_command(Command1,Out),%not(Out=user:fail),!.
summarise_formulas(_Ad21,_Q21,A21,A23) :-% in rows or columns from item n to m, find sum%findall(A23,(member(Table1,A21),% subterm with address of old values, new vars until can't find any%[var,T3,R3,C3,IN3,V3,_]%[function,T,R,C,XY2,F21]/*% Finish off substituting variables into values in answersub_term_wa([var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3], A21, Instances1),findall([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1),number(VN)),Instances1a), % variablessub_term_wa([var,_,_,_,_,_,_,_,_,_,_], A21, Instances2),findall([Address, [var,T3,R3,C3,IN3,V3,[],TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,[],TP3,RP3,CP3,INP3]],Instances2),number1(V3)%(member([Address, [var,T4,R4,C4,IN4,V3,VN4,TP4,RP4,CP4,INP4]],Instances1a)->),Instances2a), % valuesfindall(X1,(member([Address1, [var,T4,R4,C4,IN4,V3,VN4,_TP4,_RP4,_CP4,_INP4]],Instances1a),(((member(X0,Instances2a),X0=[_Address2, [var,T5,R5,C5,IN5,V3,_VN5,_TP5,_RP5,_CP5,_INP5]])->X1=[Address1, [var,T4,R4,C4,IN4,V3,VN4,T5,R5,C5,IN5]];X1=X0))),Instances3),foldr(put_sub_term_wa_ae,Instances3,A21,A22),trace,test_r(A21,A22),(A21=A22->A21=A231;summarise_formulas(_Ad22,_Q22,A22,A231)),*/summarise_formulas2(A21,%A231,A23),!.
symbol((:-),":-"):-!.symbol(Symbol,Symbol) :-!.slp2lp_variables(Name1,[v,Name1]) :- predicate_or_rule_name(Name1),!.
% Time x breasoned As x time to break even% y= m1*x+c1 - expenditure% y= m2*x+c2 - income% m1*x+c1=m2*x+c2% m1*x-m2*x=c2-c1% (m1-m2)*x=c2-c1% x=(c2-c1)/(m1-m2)Time is (C2-C1)/(M1-M2),% How much money is needed to help make a profit?(C2>C1->(C21=C2,C11=C1,_M21=M2,M11=M1);(C11=C2,C21=C1,M11=M2,_M21=M1)),%abs(((M11*Time)+C11)-C21,DY),/**Amount_needed is % top area((Time*((M11*Time)+C11))+(0.5*DY*Time))-% bottom area((0.5*Time*(DY))+(C11*Time))**/Amount_needed is(0.5*Time*(((M11*Time)+C11)-C11))-(0.5*Time*(((M11*Time)+C11)-C21)).
% don't runt2alg3(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,Words_to_read) :-%retractall(complete_display(_)),%assertz(complete_display(false)), retractall(words_to_read(_)),assertz(words_to_read(Words_to_read)),((number(N1),N=N1)->true;(N1=u,N=1)),((Filex1=u,Filex=%"file.txt"%"../Text-to-Breasonings/file.txt")->true;Filex=Filex1),((number(M1),M=M1)->true;M=all), %% If m1 is undefined or all then m=allprep(List1,BrDict03,BrDict03t,Filex,Stringx1,M,Brth,BrthDict03,Room,RoomDict03,PartOfRoom,PartOfRoomDict03,Direction,DirectionDict03,ObjectToPrepare,ObjectToPrepareDict03,ObjectToFinish,ObjectToFinishDict03),br2(List1,BrDict03,BrDict2,BrDict03t,BrDict03t2,N,Brth,BrthDict03,BrthDict04,Room,RoomDict03,RoomDict04,PartOfRoom,PartOfRoomDict03,PartOfRoomDict04,Direction,DirectionDict03,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict04),sort(BrDict2,BrDict3),(BrDict03=BrDict3->true;%(open_s("brdict1.txt",write,Stream),(open_s("../Text-to-Breasonings/brdict1.txt",write,Stream),%string_codes(BrDict3),write(Stream,BrDict3),close(Stream))),sort(BrDict03t2,BrDict03t3),(BrDict03t=BrDict03t3->true;(open_s("algdict3.txt",write,Stream2),%%string_codes(BrDict3),write(Stream2,BrDict03t3), close(Stream2))),  /*((Brth=true, sort(BrthDict04,BrthDict044),(BrthDict03=BrthDict044->true;(open_s("../Text-to-Breasonings/brthdict.txt",write,Stream3),%%string_codes(BrDict3),write(Stream3,BrthDict044), close(Stream3))))->true;true),  ((Room=true, sort(RoomDict04,RoomDict044),(RoomDict04=RoomDict044->true;(open_s("../Text-to-Breasonings/roomdict.txt",write,Stream4),%%string_codes(BrDict3),write(Stream4,RoomDict044), close(Stream4))))->true;true), ((PartOfRoom=true, sort(PartOfRoomDict04,PartOfRoomDict044),(PartOfRoomDict04=PartOfRoomDict044->true;(open_s("../Text-to-Breasonings/partofroomdict.txt",write,Stream5),%%string_codes(BrDict3),write(Stream5,PartOfRoomDict044), close(Stream5))))->true;true), ((Direction=true, sort(DirectionDict04,DirectionDict044),(DirectionDict04=DirectionDict044->true;(open_s("../Text-to-Breasonings/directiondict.txt",write,Stream6),%%string_codes(BrDict3),write(Stream6,DirectionDict044), close(Stream6))))->true;true), ((ObjectToPrepare=true, sort(ObjectToPrepareDict04,ObjectToPrepareDict044),(ObjectToPrepareDict04=ObjectToPrepareDict044->true;(open_s("../Text-to-Breasonings/objecttopreparedict.txt",write,Stream7),%%string_codes(BrDict3),write(Stream7,ObjectToPrepareDict044), close(Stream7))))->true;true), ((ObjectToFinish=true, sort(ObjectToFinishDict04,ObjectToFinishDict044),(ObjectToFinishDict04=ObjectToFinishDict044->true;(open_s("../Text-to-Breasonings/objecttofinishdict.txt",write,Stream8),%%string_codes(BrDict3),write(Stream8,ObjectToFinishDict044), close(Stream8))))->true;true),  */ length(List1,List1_length_a), Dividend_a is ceiling(List1_length_a/250), Dividend_b is Dividend_a*3, % for graciously giving texttobr2_a(Dividend_b,meditation), texttobr2_a(Dividend_b,medicine), texttobr2_a(Dividend_b,pedagogy),  !.
% split string%worksheet and a statement of financial positionpre_info(D1,Pre_info,Rest) :-findall_until_fail(A,member(A,D1),(search(A,["data"])->true;(search(A,["prepare"])->true;search(A,["calculate"])))/*downcase_atom(A,A1),split_string(A1,SepandPad,SepandPad,B),not(intersection(B,["data"],[]))*/,Pre_info),%subtract(D1,C1,D2),%(D2=[D3|_]->%find_until(D1,D3,Pre_info);Pre_info=C1),append(Pre_info,Rest,D1),!.
% test for f>=2% mark items' places with * x can include existing results% flatten r structs xx where always same (no different dbcs compared with abcs) x if there is no d in the group of as% L=[r,1,["a","b",[r,2,["c","d"]]]]% r means recursive struct, i.e. 1-->3,4, referred to elsewhere as [r,1]% L=[r,1,["a","b","c","d","e","f"]]% to L=[r,1,["a","b",[r,2,["c","d"]],"e","f"]]]]% eg2. L=[r,1,["a","b",[r,2,["c","d"]]]]% to L=[r,1,["a","b",[r,3,["e",[r,2,["c","d"]]]]]]% later [r,1,["a","b",[r,3,["e","c","d"]]]] if no non 7s before 3,4sfind_sl(List,Find,Result) :-sub_term_types_wa([string],List,Inst1),findall(X,member([_,X],Inst1),X1),%List=[L|Ls],%flatten(List,List1),%findall(A1,(member(A1,List1),not(A1=r),not(number(A1))),B).
%% confirm database contents - link to page %%** installlppm_install(User1,Repository1) :-%%lppm_get_manifest(User1,Repository1,_Description,Dependencies1),lppm_get_registry(LPPM_registry_term1),member([User1,Repository1,_Description,Dependencies1],LPPM_registry_term1),(%%repeat,concat_list(["Please enter path to install ",User1,"/",Repository1," to: (e.g. ../ to install at the same level as List Prolog Package Manager)."],Text2),writeln1(Text2),read_string(user_input, "\n", "\r", _, Path1),(working_directory(_,Path1)->true;(concat_list(["Warning: ",Path1," doesn't exist."],Text3),writeln1(Text3),fail))),%catch((true, call_with_time_limit(1,find_all_dependencies(LPPM_registry_term1,%[[User1,Repository1]],%%,Description,Dependencies1Dependencies1,[],Dependencies1a),%)), %         time_limit_exceeded,  %        (concat_list(["Error: Cycle in lppm_registry.txt: ",Dependencies1],Note_a),writeln(Note_a),abort)),  append([[User1,Repository1%%,Description,Dependencies1]],Dependencies1a,Dependencies2),  sort(Dependencies2,Dependencies2b),%trace,%writeln(Dependencies2b),findall(_,(member(Dependency2,Dependencies2b),Dependency2=[User3,Repository3],concat_list(["git clone https://github.com/",User3,"/",Repository3,".git"],Command3), catch(bash_command(Command3,_), _, (concat_list(["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub." ],Text4),writeln1(Text4)%%,abort ))),_),!.
%% protect(File,Year,Month,Day,Meditators,[],Old),%% writeln([oldmeditators,Old]),!.initiate_utterances(_File,[]) :- !.
%%maplist(downcase_atom, List2, List3),maplist(string_lower, List2, List3),%%writeln([list3,List3]),towords3(BrDict03,[],BrDict04,[],_ObjectNames,[],AllUsedNames),findall(BrDict04tt,(member([BrDict04tt,_],AlgDict_x)),BrDict04t),findall(BrDict04tt0,(member([_,BrDict04tt0],AlgDict_x)),BrDict04t0),findall(BrDict04tt1,(member([BrDict04tt1,_],AlgDict)),BrDict04t1),%towords2(AlgDict_x,[],BrDict04t),%%writeln([brDict04,BrDict04]),subtract(List3,BrDict04,D1),%%writeln([list3,brDict04,d1,List3,BrDict04,D1]),%%writeln(["subtract(BrDict04,List3,D1).",List3,BrDict04,D1]),length(D1,Length01),Difference is abs(Length01),write("Number of words remaining to define: "), writeln(Difference),subtract(AllUsedNames,BrDict04t,D2),%%delete(D21,'',D2),length(D2,Length01t),Differencet is abs(Length01t),write("Number of undefined algorithm names: "), writeln(Differencet),%% writeln([undefinedbreasonings,D2]), %% Print undefined breasonings%%delete(D31,'',D3),subtract(BrDict04t,AllUsedNames,D3),length(D3,Length01t2),Differencet2 is abs(Length01t2),write("Number of orphaned algorithm names: "), writeln(Differencet2),/*subtract(List3,BrDict04,D1),%%writeln([list3,brDict04,d1,List3,BrDict04,D1]),%%writeln(["subtract(BrDict04,List3,D1).",List3,BrDict04,D1]),length(D1,Length01),Difference is abs(Length01),write("Number of algorithms remaining to define: "), writeln(Difference),*/subtract(BrDict04t0,BrDict04t1,D21),%%delete(D21,'',D2),length(D21,Length01t1),Differencet1 is abs(Length01t1),write("Number of undefined algorithms: "), writeln(Differencet1),%% writeln([undefinedbreasonings,D2]), %% Print undefined breasonings%%delete(D31,'',D3),subtract(BrDict04t1,BrDict04t0,D31),length(D31,Length01t21),Differencet21 is abs(Length01t21),write("Number of orphaned algorithms: "), writeln(Differencet21)%%,writeln([orphanedbreasonings,D3]) %% Print orphaned breasonings)->true;(string(Filex),writeln("Number of words, unique words, words remaining to define, undefined algorithm names, orphaned algorithm names, undefined algorithms and orphaned algorithms skipped for speed when breasoning out a string.")));true),!.
%%maplist(downcase_atom, List2, List3),maplist(string_lower, List2, List3),%%writeln([list3,List3]),towords3(BrDict03,[],BrDict04,[],_ObjectNames,[],AllUsedNames),towords2(BrDict03t,[],BrDict04t),%%writeln([brDict04,BrDict04]),subtract(List3,BrDict04,D1),%%writeln([list3,brDict04,d1,List3,BrDict04,D1]),%%writeln(["subtract(BrDict04,List3,D1).",List3,BrDict04,D1]),length(D1,Length01),Difference is abs(Length01),write("Number of words remaining to define: "), writeln(Difference),subtract(AllUsedNames,BrDict04t,D2),%%delete(D21,'',D2),length(D2,Length01t),Differencet is abs(Length01t),write("Number of undefined algorithms: "), writeln(Differencet),%% writeln([undefinedalgorithms,D2]), %% Print undefined algorithms%%delete(D31,'',D3),subtract(BrDict04t,AllUsedNames,D3),length(D3,Length01t2),Differencet2 is abs(Length01t2),write("Number of orphaned algorithms: "), writeln(Differencet2)%%,writeln([orphanedalgorithms,D3]) %% Print orphaned algorithms)->true;(string(Filex),writeln("Number of words, unique words, unique breathsonings, words remaining to define, undefined breasonings, orphaned breasonings, undefined breathsonings and orphaned breathsonings skipped for speed when breasoning out a string."))),!.
%%maplist(downcase_atom, List2, List3),maplist(string_lower, List2, List3),%%writeln([list3,List3]),towords3(BrDict03,[],BrDict04,[],_ObjectNames,[],AllUsedNames),towords2(BrDict03t,[],BrDict04t),%%writeln([brDict04,BrDict04]),subtract(List3,BrDict04,D1),%%writeln([list3,brDict04,d1,List3,BrDict04,D1]),%%writeln(["subtract(BrDict04,List3,D1).",List3,BrDict04,D1]),length(D1,Length01),Difference is abs(Length01),write("Number of words remaining to define: "), writeln(Difference),subtract(AllUsedNames,BrDict04t,D2),%%delete(D21,'',D2),length(D2,Length01t),Differencet is abs(Length01t),write("Number of undefined breasonings: "), writeln(Differencet),%% writeln([undefinedbreasonings,D2]), %% Print undefined breasonings%%delete(D31,'',D3),subtract(BrDict04t,AllUsedNames,D3),length(D3,Length01t2),Differencet2 is abs(Length01t2),write("Number of orphaned breasonings: "), writeln(Differencet2),%%,writeln([orphanedbreasonings,D3]) %% Print orphaned breasonings((Brth=true,%%towords3(BrDict03,[],BrDict04,[],_ObjectNames,[],AllUsedNames),towords2a(BrthDict03,[],BrtDict04t),%%subtract(List3,BrtDict04t,Dt1),%%length(Dt1,Lengtht01),Differencet1 is abs(Lengtht01),write("Number of words remaining to define breathsonings for: "), writeln(Differencet1),%%writeln(["Number of words remaining to define breathsonings for",Dt1]), %% Print number of words remaining to define breathsonings forsubtract(AllUsedNames,BrtDict04t,Dt2),length(Dt2,Lengtht01t),Differencet22 is abs(Lengtht01t),write("Number of undefined breathsonings: "), writeln(Differencet22),%%writeln([undefinedbreathsonings,Dt2]), %% Print undefined breathsoningssubtract(BrtDict04t,AllUsedNames,Dt3),length(Dt3,Lengtht01t2),Differencet3 is abs(Lengtht01t2),write("Number of orphaned breathsonings: "), writeln(Differencet3)%%writeln([orphanedbreathsonings,Dt3]) %% Print orphaned breathsonings)->true;true),((Room=true,towords2a(RoomDict03,[],RoomDict04t),subtract(AllUsedNames,RoomDict04t,RoomDt2),length(RoomDt2,RoomLengtht01t),RoomDifferencet22 is abs(RoomLengtht01t),write("Number of undefined rooms: "), writeln(RoomDifferencet22),%%writeln([undefinedrooms,RoomDt2]), %% Print undefined roomssubtract(RoomDict04t,AllUsedNames,RoomDt3),length(RoomDt3,RoomLengtht01t2),RoomDifferencet3 is abs(RoomLengtht01t2),write("Number of orphaned rooms: "), writeln(RoomDifferencet3)%%writeln([orphanedrooms,RoomDt3]) %% Print orphaned rooms)->true;true),((PartOfRoom=true,towords2a(PartOfRoomDict03,[],PartOfRoomDict04t),subtract(AllUsedNames,PartOfRoomDict04t,PartOfRoomDt2),length(PartOfRoomDt2,PartOfRoomLengtht01t),PartOfRoomDifferencet22 is abs(PartOfRoomLengtht01t),write("Number of undefined parts of rooms: "), writeln(PartOfRoomDifferencet22),%%writeln([undefinedPartsOfRooms,PartOfRoomDt2]), %% Print undefined PartsOfRoomssubtract(PartOfRoomDict04t,AllUsedNames,PartOfRoomDt3),length(PartOfRoomDt3,PartOfRoomLengtht01t2),PartOfRoomDifferencet3 is abs(PartOfRoomLengtht01t2),write("Number of orphaned parts of rooms: "), writeln(PartOfRoomDifferencet3)%%writeln([orphanedPartsOfRooms,PartOfRoomDt3]) %% Print orphaned PartsOfRooms)->true;true),((Direction=true,towords2a(DirectionDict03,[],DirectionDict04t),subtract(AllUsedNames,DirectionDict04t,DirectionDt2),length(DirectionDt2,DirectionLengtht01t),DirectionDifferencet22 is abs(DirectionLengtht01t),write("Number of undefined directions: "), writeln(DirectionDifferencet22),%%writeln([undefinedDirections,DirectionDt2]), %% Print undefined Directionssubtract(DirectionDict04t,AllUsedNames,DirectionDt3),length(DirectionDt3,DirectionLengtht01t2),DirectionDifferencet3 is abs(DirectionLengtht01t2),write("Number of orphaned directions: "), writeln(DirectionDifferencet3)%%writeln([orphanedDirections,DirectionDt3]) %% Print orphaned Directions)->true;true),((ObjectToPrepare=true,towords2a(ObjectToPrepareDict03,[],ObjectToPrepareDict04t),subtract(AllUsedNames,ObjectToPrepareDict04t,ObjectToPrepareDt2),length(ObjectToPrepareDt2,ObjectToPrepareLengtht01t),ObjectToPrepareDifferencet22 is abs(ObjectToPrepareLengtht01t),write("Number of undefined objects to prepare: "), writeln(ObjectToPrepareDifferencet22),%%writeln([undefinedObjectsToPrepare,ObjectToPrepareDt2]), %% Print undefined ObjectsToPreparesubtract(ObjectToPrepareDict04t,AllUsedNames,ObjectToPrepareDt3),length(ObjectToPrepareDt3,ObjectToPrepareLengtht01t2),ObjectToPrepareDifferencet3 is abs(ObjectToPrepareLengtht01t2),write("Number of orphaned objects to prepare: "), writeln(ObjectToPrepareDifferencet3)%%writeln([orphanedObjectsToPrepare,ObjectToPrepareDt3]) %% Print orphaned ObjectsToPrepare)->true;true),((ObjectToFinish=true,towords2a(ObjectToFinishDict03,[],ObjectToFinishDict04t),subtract(AllUsedNames,ObjectToFinishDict04t,ObjectToFinishDt2),length(ObjectToFinishDt2,ObjectToFinishLengtht01t),ObjectToFinishDifferencet22 is abs(ObjectToFinishLengtht01t),write("Number of undefined objects to finish: "), writeln(ObjectToFinishDifferencet22),%%writeln([undefinedObjectsToFinish,ObjectToFinishDt2]), %% Print undefined ObjectsToFinishsubtract(ObjectToFinishDict04t,AllUsedNames,ObjectToFinishDt3),length(ObjectToFinishDt3,ObjectToFinishLengtht01t2),ObjectToFinishDifferencet3 is abs(ObjectToFinishLengtht01t2),write("Number of orphaned objects to finish: "), writeln(ObjectToFinishDifferencet3)%%writeln([orphanedObjectsToFinish,ObjectToFinishDt3]) %% Print orphaned ObjectsToFinish)->true;true))->true;(string(Filex),writeln("Number of words, unique words, unique breathsonings, words remaining to define, undefined breasonings, orphaned breasonings, undefined breathsonings and orphaned breathsonings skipped for speed when breasoning out a string.")));true),!.
%length([a,b],LCS).
%sub_term_wa([var|_],A,Instances1),%(number1(String10,String1)->true;String10=String1),search_and_replace(String1,Search_string_or_list,Replacement,Result_string) :-search_whole_string(String1,Search_string_or_list),(is_list(Search_string_or_list)->Search_string_or_list1=Search_string_or_list;Search_string_or_list1=[Search_string_or_list]),foldr(replace1_fr([[],Replacement]),Search_string_or_list1,String1,Result_string).
%writeln(Atom),!.
**//**%%addrules(VarList,OutputVars1,OutputVars3,PenultimateVars3,PenultimateVars2,Program3,Program2).
**/insertdoublebackslashbeforequote(Input1,Input) :-string_codes(Input1,Input2),insertdoublebackslashbeforequote1(Input2,[],Input3),string_codes(Input,Input3).insertdoublebackslashbeforequote1([],Input,Input) :- !.
/*string_to_list2(B,A1,A2) :- string_concat(D,"",B),string_length(D,1),append(A1,[D],A2),!.
/*a:-A=[item1, item2, item3],foldr(plus1,A,"",B).
/*collect_simplify_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[T,Dbw_brackets]|Types4],collect_simplify_types(Types4,[],Data2),Types5=[[Data2],Data4],collect_simplify_types(Data4,[],Types6),append_list3([Types1,Types5,Types6],Types2),!.
/*cp_since_findall_start22(List1,Cp1,Cp2,Cp3) :-%trace,writeln1([list1,List1]),curr_cp(N),cp_since_findall_start21(List1,Cp1,N,Cp2),Cp2=[_,_|Cp3].
/*dfs1([],_D,_Sent,DB,DB,_,Chain,Chain) :- !.
/*simplify_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[T,Dbw_brackets]|Types4],simplify_types(Types4,[],Data2),Types5=[[Data2],Data4],simplify_types(Data4,[],Types6),append_list3([Types1,Types5,Types6],Types2),!.
/*simplify_types_with_n(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[T,Dbw_brackets]|Types4],simplify_types_with_n(Types4,[],Data2),Types5=[[Data2],Data4],simplify_types_with_n(Data4,[],Types6),append_list3([Types1,Types5,Types6],Types2),!.
/*test_b(Tests) :-working_directory1(A,A),working_directory1(_,'../../GitHub2/'),[K1,H,_H1]=["Philosophy/", "4 2 23.pl", "Philosophy/4 2 23.pl"],string_concat(K11,"/",K1),LP=[[[n, c], ["%r(NA)."]], [[n, c], ["%NA=2."]]%, [[n, c], ["% r([a],N2)."]], [[n, c], ["% N2 = 3."]],[[n,r]]],(find_merge2(H,K11,LP,Tests)->true;working_directory1(_,A)).
/**()- urls for instructions including install and examplesusernamerepository,()Home page:https://github.com/u/rShort Descriptionwriteln1("")**/bash_command(Command, Output) :-        setup_call_cleanup(process_create(path(bash),                ['-c', Command],                [stdout(pipe(Out))]),        read_string(Out, _, Output),        close(Out)).
/**length(List,L),Trials is L*3,trialy22(List,Trials,[],R).**/trialy22([],_,R,R) :- !.
/**remove_chains_of_one_children1([-,_],Options1,Options2,Options3) :-%%trace,append(Options1,Options2,Options3),!.
back_translate(Ctt_input,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang,Translation1,Translation2,Ctt_orig1_orig2_1,Ctt_orig1_orig2_2,Ctt_orig_tran_1,Ctt_orig_tran_2) :-Ctt_input=[Ctt_input1a|Ctt_input2],remove_spaces_from_start(Ctt_input1a,"",Ctt_input1),back_translate2(Ctt_input1,Ctt_input1,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang,Translation3,Ctt_orig1_orig2_3,Ctt_orig_tran_3),concat_list([Translation1,Translation3," "],Translation4),back_translate(Ctt_input2,Ctt_orig1_orig2_3,Ctt_orig_tran_3,From_lang,To_lang,Translation4,Translation2,Ctt_orig1_orig2_1,Ctt_orig1_orig2_2,Ctt_orig_tran_1,Ctt_orig_tran_2),!.
concat_list2A(A1,B):-A1=[A|List],concat_list2A(A,List,B),!.
critique_reason1(String00,String01,Number2a,Number3a,Reasons_per_paragraph,ML_db,Critique3,Topic_paragraph_link) :-%%member(Number2,List1),member(Number3,List2),%%get_item_n(Critique3,Number2a,[_,Item1]),%%trace,concat_list(["<Critique Paragraph ",Number2a," of 5> <Reason ",Number3a," of ",Reasons_per_paragraph,">","\n","The Helper will ask you for your comment on the quote you are about to enter."],String2b),%writeln(String2b), %% Later: connections%%trace,critique2(String00,String01,ML_db,String3,String3a,String5a,_String3y2,String3ay,String5a1,Topic_paragraph_link),%%),Critique4).
critique_reason1(String00,String01,Number2a,Number3a,Reasons_per_paragraph,ML_db,Critique3,Topic_paragraph_link) :-%%member(Number2,List1),member(Number3,List2),%%get_item_n(Critique3,Number2a,[_,Item1]),%%trace,concat_list(["<Critique Paragraph ",Number2a," of 5> <Reason ",Number3a," of ",Reasons_per_paragraph,">","\n","The Helper will ask you for your comment on the quote you are about to enter."],String2b),writeln(String2b), %% Later: connections%%trace,critique2(String00,String01,ML_db,String3,String3a,String5a,_String3y2,String3ay,String5a1,Topic_paragraph_link),%%),Critique4).
critique_reason1(String00,String01,Number2a,Number3a,Reasons_per_paragraph,ML_db,Critique3,Topic_paragraph_link) :-%%member(Number2,List1),member(Number3,List2),%%get_item_n(Critique3,Number2a,[_,Item1]),%%trace,concat_list(["<Critique Paragraph ",Number2a," of 5> <Reason ",Number3a," of ",Reasons_per_paragraph,">","\n","The Helper will ask you for your comment on the quote you are about to enter."],String2b),writeln(String2b), %% Later: connections%%trace,critique2(String00,String01,ML_db,String3,String3a,String5a,_String3y2,String3ay,String5a1,Topic_paragraph_link),%%),Critique4).Critique3=[[Number2a,Number3a,String3,String3a,String5a,_String3y3,String3ay,String5a1]].
critique_reason1(String01,Number2a,Number3a,Reasons_per_paragraph,ML_db,Critique3,Topic_paragraph_link) :-%%member(Number2,List1),member(Number3,List2),%%get_item_n(Critique3,Number2a,[_,Item1]),%%trace,concat_list(["<Critique Paragraph ",Number2a," of 5> <Reason ",Number3a," of ",Reasons_per_paragraph,">","\n","The Helper will ask you for your comment on the quote you are about to enter."],String2b),writeln(String2b), %% Later: connections%%trace,critique2(String01,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link),%%),Critique4).
length_is_list(A,B) :- is_list(A),length(A,B),!.
paraphrase1([""],File_list,File_list,Synonym_list,Synonym_list) :- !.
traverse(X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2) :-member([X,Y,Cell],Map1),append(Explored1,[[X,Y]],Explored3a),sort(Explored3a,Explored3),location(X,Y,Location),writeln(["At",Location]),%%trace,%% can take, drop objects, recorded in maze%%(Cell=[]->Inventory4a=Inventory1;%%(Cell=Items,append(Inventory1,[Item],Inventory3),%%apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),%%writeln(Inventory4a),%% Find, accept only available directions(member("e",Inventory1)->writeln("Game Over");(%%append(Explored1,[[X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,%Zm1 is Z-1,%Zp1 is Z+1,check(Xm1,Y,"w",[],Directions1,Map1),check(X,Ym1,"s",Directions1,Directions2,Map1),check(Xp1,Y,"e",Directions2,Directions3,Map1),check(X,Yp1,"n",Directions3,Directions6,Map1),%check(Zm1,X,Y,"d",Directions4,Directions5,Map1),%check(Zp1,X,Y,"u",Directions5,Directions6,Map1),writeln(["Go",Directions6,"or take",Cell,"or drop",Inventory1,"map, or apply an object to an object"]),read_string(user_input, "\n", "\r", _End,Input1),downcase_atom(Input1,Input1a),atom_string(Input1a,Input1b),%%trace,split_string(Input1b, ", ", ", ", Input2),(((Input2=["go","n"]->true;Input2=["n"]),(member("n",Directions6)->traverse(X,Yp1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go n"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["map"]->true;Input2=["m"]),((%trace,map_dimensions([X2,Y2]),print_map(Map1,X2,Y2,X,Y))->true;;(writeln(["You can't view the map."]))),traverse(X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2))->true;((Input2=["go","e"]->true;Input2=["e"]),(member("e",Directions6)->traverse(Xp1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go e"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","s"]->true;Input2=["s"]),(member("s",Directions6)->traverse(X,Ym1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go s"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","w"]->true;Input2=["w"]),(member("w",Directions6)->traverse(Xm1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go w"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","u"]->true;Input2=["u"]),(member("u",Directions6)->traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go u"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","d"]->true;Input2=["d"]),(member("d",Directions6)->traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go d"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["take",Item_to_take],((atom_string(Item_to_take_a,Item_to_take),(member(Item_to_take_a,Cell)->delete(Cell,Item_to_take_a,Cell2);(member(Item_to_take,Cell),delete(Cell,Item_to_take,Cell2))),delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4),append(Inventory1,[Item_to_take],Inventory3))->(writeln(["You have taken",Item_to_take]),traverse(X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't take",Item_to_take]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["drop",Item_to_drop],((%%atom_string(Item_to_drop_a,Item_to_drop),member(Item_to_drop,Inventory1),delete(Inventory1,Item_to_drop,Inventory3),append(Cell,[Item_to_drop],Cell2),delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4))->(writeln(["You have dropped",Item_to_drop]),traverse(X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't drop",Item_to_drop]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["apply",First_item,"to",Second_item],((member(First_item,Inventory1),member(Second_item,Inventory1),atom_string(First_item_a,First_item),atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),append(Cell,[Third_item],Cell2),delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4))->(writeln(["You have applied",First_item,"to",Second_item,"producing",Third_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't apply",First_item,"to",Second_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(writeln(["I don't understand."]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))),!.
traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2) :-member([Z,X,Y,Cell],Map1),append(Explored1,[[Z,X,Y]],Explored3a),sort(Explored3a,Explored3),location(Z,X,Y,Location),writeln(["At",Location]),%%trace,%% can take, drop objects, recorded in maze%%(Cell=[]->Inventory4a=Inventory1;%%(Cell=Items,append(Inventory1,[Item],Inventory3),%%apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),%%writeln(Inventory4a),%% Find, accept only available directions(member("e",Inventory1)->(writeln("Game Over"),true);(%%append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,check(Z,Xm1,Y,"w",[],Directions1,Map1),check(Z,X,Ym1,"s",Directions1,Directions2,Map1),check(Z,Xp1,Y,"e",Directions2,Directions3,Map1),check(Z,X,Yp1,"n",Directions3,Directions4,Map1),check(Zm1,X,Y,"d",Directions4,Directions5,Map1),check(Zp1,X,Y,"u",Directions5,Directions6,Map1),writeln(["Go",Directions6,"or take",Cell,"or drop",Inventory1,"map, or apply an object to an object"]),read_string(user_input, "\n", "\r", _End,Input1),downcase_atom(Input1,Input1a),atom_string(Input1a,Input1b),%%trace,split_string(Input1b, ", ", ", ", Input2),(((Input2=["go","n"]->true;Input2=["n"]),(member("n",Directions6)->traverse(Z,X,Yp1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go n"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["map"]->true;Input2=["m"]),((%trace,map_dimensions([X2,Y2,Z2]),print_map(Map1,X2,Y2,Z2,X,Y,Z))->true;;(writeln(["You can't view the map."]))),traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2))->true;((Input2=["go","e"]->true;Input2=["e"]),(member("e",Directions6)->traverse(Z,Xp1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go e"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","s"]->true;Input2=["s"]),(member("s",Directions6)->traverse(Z,X,Ym1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go s"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","w"]->true;Input2=["w"]),(member("w",Directions6)->traverse(Z,Xm1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go w"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","u"]->true;Input2=["u"]),(member("u",Directions6)->traverse(Zp1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go u"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","d"]->true;Input2=["d"]),(member("d",Directions6)->traverse(Zm1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go d"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["take",Item_to_take],((atom_string(Item_to_take_a,Item_to_take),(member(Item_to_take_a,Cell)->delete(Cell,Item_to_take_a,Cell2);(member(Item_to_take,Cell),delete(Cell,Item_to_take,Cell2))),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4),append(Inventory1,[Item_to_take],Inventory3))->(writeln(["You have taken",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't take",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["drop",Item_to_drop],((%%atom_string(Item_to_drop_a,Item_to_drop),member(Item_to_drop,Inventory1),delete(Inventory1,Item_to_drop,Inventory3),append(Cell,[Item_to_drop],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have dropped",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't drop",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["apply",First_item,"to",Second_item],((member(First_item,Inventory1),member(Second_item,Inventory1),atom_string(First_item_a,First_item),atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),append(Cell,[Third_item],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have applied",First_item,"to",Second_item,"producing",Third_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't apply",First_item,"to",Second_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(writeln(["I don't understand."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))).
% remove_duplicates(List, Result)%% Removes duplicate entries in a list%remove_duplicates([], []):-!.
%% Sorts by first surname then title in AGPSsort1(List1,List2) :-findall([C,B],(member(B,List1),downcase_atom(B,D),atom_string(D,C)),E),sort(E,F),findall(G,member([_,G],F),List2).
%%writeln([eg1]),test_run_all(1,[[n,a],[[["select,dash"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"]],[],[v,c]]],[ % intersection[[n,a],[[],[v,a],[v,l],[v,l]]],[[n,a],[[v,l1],[v,l2],[v,l3a],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,intersection2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,a],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,intersection2],[[v,a],[],[v,l],[v,l]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%[[n,intersection2],[[v,i1],[v,l4],[v,l5],[v,l3]]]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1],[v,l4],[v,l2],[v,l3]]]]]],[[[[v,c], [["select,dash"],["neiey,person"],["neiey,person"]]]]]).
%%writeln([eg1]),test_run_all(1,[[n,a],[[["select,dash"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"]],[],[v,c]]],[ % intersection[[n,a],[[],[v,a],[v,l],[v,l]]],[[n,a],[[v,l1],[v,l2],[v,l3a],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,intersection2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,a],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,intersection2],[[v,a],[],[v,l],[v,l]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%[[n,intersection2],[[v,i1],[v,l4],[v,l5],[v,l3]]]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1],[v,l4],[v,l2],[v,l3]]]]]],[[[[v,c], [["select,dash"],["neiey,person"],["neiey,person"]]]]]).test_run_all(2,[[n,a],[[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[],[v,c]]],[ % duplicates[[n,a],[[],[v,l],[v,s],[v,s]]],[[n,a],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,member],[[v,m],[v,h]]],[[n,"->"],[[[n,deletea2],[[v,m],[v,h],[v,m1]]],[[n,true]],[[n,=],[[v,m],[v,m1]]]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,s1],[v,h1],[v,s3]]],[[n,a],[[v,t],[v,m1],[v,s3],[v,s2]]]]],[[n,a],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,membera4],[[v,m],[v,h]]]]],[[n,a],[[v,t],[v,m],[v,s1],[v,s2]]]]],[[n,deletea2],[[],[v,l],[v,m1]],":-",[[[n,fail]]]],[[n,deletea2],[[v,l],[v,m],[v,t]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,l],[v,m],[v,m1]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,t],[v,m],[v,m1]]]]],[[n,membera4],[[],[v,l]],":-",[[[n,fail]]]],[[n,membera4],[[v,l],[v,h]],":-",[[[n,head],[[v,l],[v,h]]]]],[[n,membera4],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera4],[[v,t],[v,m]]]]]],[[[[v,c],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]]]]])./**[[n,minus1],[[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[]]],[[n,reverse],[[["select,dash"],["neiey,person"],["neiey,person"]],[],[["neiey,person"],["neiey,person"],["select,dash"]]]],[[n,intersection1],[[["neiey,person"],["neiey,person"],["select,dash"]],[["hipaa,square"],["releases,up"],["hipaa,square"]],[],[]]],[[n,append1],[[],[["hipaa,square"],["releases,up"],["hipaa,square"]],[["hipaa,square"],["releases,up"],["hipaa,square"]]]],[[n,minus1],[[["hipaa,square"],["releases,up"],["hipaa,square"]],[["select,dash"],["neiey,person"],["neiey,person"]],[["hipaa,square"],["releases,up"],["hipaa,square"]]]]],[[[[v,c], 2]]]).
%****process_sentences(N1,N2,_Sentences1,_List2,Connections,Connections,Connectives,Connectives) :- N1 is N2+1, !.
**findrulesflowingtopv2(_Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[_PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program2),%%Program2=Program1,(not(member(Rule,Rules1))->append(Rules1,[Rule],Rules2);Rules2=Rules1),subset(Rest,InputVars2),intersection(Rest,InputVars1,Intersection),length(Intersection,0),%%not((member(Var2,Rest),%%member(Var2,InputVars1))),IV1Flag1=false.
convert_to_grammar_part2([],_FirstVar,_SecondVar,_SecondVarParent,Body,Body) :- !.
det(atom,an).
foldr(Function,A,L,B) :-reverse(A,C),foldl(Function,C,L,B),!.
get_variable_n(N) :-variable_n(N),N1 is N+1,retractall(variable_n(_)),assertz(variable_n(N1)),!.
get_variable_n(N) :-variable_n(N),N1 is N+1,retractall(variable_n(_)),assertz(variable_n(N1)),!.get_in(N) :-in(N),N1 is N+1,retractall(in(_)),assertz(in(N1)),!.
move_vars([],_T1,T2_old,T2_old) :- !.
mt_t2b :-Goals=[mt_t2b2,mt_t2b3,mt_t2b4,mt_t2b5,mt_t2b6,mt_t2b7,mt_t2b8,mt_t2b9],length(Goals,L),%time(mt_t2b2).
mt_t2b :-Goals=[mt_t2b2,mt_t2b3,mt_t2b4,mt_t2b5,mt_t2b6,mt_t2b7,mt_t2b8,mt_t2b9],length(Goals,L),%time(mt_t2b2).time(concurrent(L,Goals,[])).grammar_logic_to_alg1(String1,N,Result) :-%term_to_atom(String,Essay_01),%string_atom(Essay_02,Essay_01),%working_directory(_, '../'),%(open_s("../Text-to-Breasonings/file.txt",write,Stream1),%write(Stream1,String),%close(Stream1)),!,truncate1(string,String1,N,String),%working_directory(_, 'algwriter/'),grammar_logic_to_alg114(String,Result).
negative(X) :-X < 0.positive(X) :-X >= 0.
number_of_custs(Threats1,Threats2):-%% "Given that we are interested in friendliness in primary school, secondary school and university, is there anything else?"trialy2_6("Yes",R1),trialy2_6("No",R2),R=[R1,R2/**,R3,R4,R5,R6,R7,R8,R9,R10**,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27**/],sort(R,RA),reverse(RA,RB),RB=[[_,Answer]|_Rest],(Answer="No"->Threats2=Threats1;(Threats3 is Threats1+1,number_of_custs(Threats3,Threats2))).
replace_vars(Term,_Vars1,X,First_vars1,First_vars2) :-% for first vars onlyreplace_vars0(Term,First_vars1,First_vars2),% for varsreplace_vars01(Term,X,First_vars2),!.
replace_word_numbers(Q,Q1) :-(string(Q)->replace_word_numbers1(Q,Q1);(sub_term_types_wa([string],Q,Instances),findall([Add,X],(member([Add,Q01],Instances),replace_word_numbers1(Q01,X)),Q11),foldr(put_sub_term_wa_ae,Q11,Q,Q1))),!.
simplify_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),Data1=[[[T,Dbw_list],Types4]|Types6],%trace,simplify_types(Types4,[],Data2),%[Data2|Data2a]),(Data2=[Data2a]->Types5=[{Data2a}];(Data2=[Data2a|Data2b]->(square_to_round([Data2a|Data2b],Types52),round_to_curly(Types52,Types51),Types5=[Types51]);false)),append_list3([Types1,Types5],Types2a),simplify_types(Types6,Types2a,Types2),!.
simplify_types_with_n(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),%trace,Data1=[[[T,Dbw_list],Types4]|Types6],%trace,simplify_types_with_n(Types4,[],Types21),%[Data2|Data2a]),Types22=[Types21],/*(Data2=[Data2a]->Types5=[{Data2a}];(Data2=[Data2a|Data2b]->(square_to_round([Data2a|Data2b],Types52),round_to_curly(Types52,Types51),Types5=[Types51]);false)),*/append_list3([Types1,Types22],Types2a),simplify_types_with_n(Types6,Types2a,Types2),!.
string_to_list1([],N,N,Options,Options) :- !.
test_pl(1,"string_chars(\"aabb\",A),findall(A1,(member(A2,A),atom_string(A2,A1)),A3),c(A3,A4).","c-->[].
updatevars1([],_Vars1,Vars2,Vars2) :- !.
% (a)=1+1=2% or 1+1=2formula_and_assigned_value(C12,F3,AV3) :-append(F1,C15,C12),append(["="],AV1,C15),((append(F2,C151,AV1),append(["="],AV2,C151))->(F=F2,AV=AV2);(F=F1,AV=AV1)),F3=[calculate,F],%[result,F],AV3=AV,!.
% Requires%:-include('../listprologinterpreter/listprolog.pl').
% X2, Y2 are person co-ords/**?- Map=[[2,2,[]],[3,2,[]],[4,2,[]],[5,2,[]],[6,2,[]],[4,3,[]],[6,3,[]],[2,4,[]],[3,4,[]],[4,4,[]],[6,4,[]],[4,5,[]],[2,6,[]],[3,6,[]],[4,6,[]],[5,6,[b]],[6,6,[a]],[2,1,[*]],[3,1,[*]],[4,1,[*]],[5,1,[*]],[6,1,[*]],[2,7,[*]],[3,7,[*]],[4,7,[*]],[5,7,[*]],[6,7,[*]],[1,1,[*]],[1,2,[*]],[1,3,[*]],[1,4,[*]],[1,5,[*]],[1,6,[*]],[1,7,[*]],[7,1,[*]],[7,2,[*]],[7,3,[*]],[7,4,[*]],[7,5,[*]],[7,6,[*]],[7,7,[*]],[3,3,[*]],[5,3,[*]],[3,5,[*]],[5,5,[*]],[2,3,[*]],[5,4,[*]],[2,5,[*]],[6,5,[*]]],print_map(Map,7,5,2,2).
% aBc=abcfoldr(string_concat1,ABC,D) :-findall(E,(member(E,ABC),var(E)),E1),length(E1,1),not(var(D)),member(V,ABC),var(V),!,sub_term_types_wa([var],ABC,[[Ad,_]]),(string(D)->string_strings(D,D11);atom_chars(D,D11)),%trace,findall(M,(member(M1,D11),(catch(number_string(M,M1),_,false)->true;M=M1)),M2),get_sub_term_wa(M2,Ad,V),!.
% area2([[4,5],[3,6],[2,7],[1,6],[0,8]],3,A).
% find patterns in tables with single x vals in cells% find patterns in formulas, across multiple tables% find patterns in multiple tables% * sub term with address to find and replace vals with varsff_rows1(_,_,[],A,A) :- !.
% find synthfind_synth :-%(Chain2) :-% randomly choose a b from a b cphrase_from_file_s(string(String00awn), "find_details_wn.txt"),string_codes(String02bwn,String00awn),atom_to_term(String02bwn,WN,[]),retractall(word_nums(_)),assertz(word_nums(WN)),phrase_from_file_s(string(String00a), "find_details_db.txt"),string_codes(String02b,String00a),atom_to_term(String02b,DB,[]),phrase_from_file_s(string(String00a1), "file_fddb.txt"),string_codes(String02b1,String00a1),downcase_atom(String02b1,String02b12), SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xxsplit_string(String02b12, ".\n\r", ".\n\r", String02cb),findall([String02cd,H],(member(H,String02cb),split_string(H, SepandPad,SepandPad, String02cd)),Texts3),% find 1 2 from above%trace,%findnsols(1,Chain,%member(A,[1,2,3]),B).
% get earlier arg2=[cba,cpb|_]% D1= no cpa cpb% B=list cpa cpb of cps% cp since arg2= no cpa cpb% arg3= cpa cpb_% E1= no cpa cpbcp_since_findall_start(Choice_point_trail1,_Level,D1,E1,D11,CP_Vars1,CP_Vars2) :-%trace,CP_Vars1=CP_Vars2,%trace,reverse(Choice_point_trail1,Choice_point_trail14),member_cut1([A1,A2,A_Pred_id,A_Level,A_Predicate_number,A_Line_number_a,"findall",A3|A4],Choice_point_trail14),D11=[A_Pred_id,A_Level,A_Predicate_number,A_Line_number_a,"findall",A3|A4],%writeln1(cp_since_findall_start(Choice_point_trail1,Level,D1,E1)),get_later_cps_than_cp11(Choice_point_trail1,[A1,A2,A_Pred_id,A_Level,A_Predicate_number,A_Line_number_a,"findall",A3|A4],D1,B),reverse(B,B1),%D1=[_Pred_id,Level,_Predicate_number,_Line_number_a,"findall",-|_],%member([_,_|D1],Choice_point_trail1),member([_A,_B2,C,D_Level%2,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],B1),not(F_Line_number_a2=["returns to", _, "pred_id", _]),%not(var(H)),E1=[C,D_Level%2,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],/*cp_since_findall_start2(%get_last_p_before_n(B,[_,Level%2,_Predicate_number2,_Line_number_a2,Pred_or_line,_,_,All_predicate_numbers2],_,E1,CP_Vars1,CP_Vars2),*/(Pred_or_line="line"->(All_predicate_numbers2=[_,_,_,_,_,_,Vars2c],not(Vars2c=[]));Pred_or_line="predicate"->not(All_predicate_numbers2=[]))%).
% https://www.mathsisfun.com/algebra/completing-square.html% ["Short Arguments","Green_Sutra.txt",0,algorithms,"6. I prepared to stating that it is alright for each person to meditate if they want to.  I did this by thinking of all.  First, I remembered a category of people.  Second, I wrote their names down.  Third, I thought of them."]% 2. think_of_all([1,2,3,4,5],[1,2,3,5,4]).
% lower(50,-5,Height).
% meaning_to_algorithm(["a", "equals", "1", "plus", "1"],A).
% next_item(a,N,[c,a,b,d]).
% place_record("medicine",[["medicine","pharmaceuticals"],["computer science","viral plans"],["cultural studies","cook book]],Record).
% simulation_subset("gay",[["gay","sexual orientation"],["bot","origin"],["ethnic minority","culture"]],Subset).simulation_subset(Person,People_subset,Subset) :-member([Person,Subset],Subset).
% slices([[4,5],[3,6],[2,7],[1,6],[0,8]],2,S).
% stringconcat-> in both algs above%concatenate strings v/**% membre 2->member2get_en_lang_word(Input,Output) :-%% error if word not foundlang(Lang),lang_db(Lang_db),(Lang="en"->%Input=Output1,atom_string(Input,Output);((%(%((Input="member2"->trace;true),%split_on_number(Input,Input1,Input10),member([Output,_Input101,Lang,Input],Lang_db))->true;%notrace,%(%Input10="" -> Output=Output2;%concat_list([Output2," ",Input10],Output))) -> true;(concat_list(["Error: Word: ",Input," not in Language: ",Lang," in lang_db."],Notification1),writeln(Notification1),abort))),%Output=Output1,!.
% subset_place("sexual orientation",[["sexual orientation","medicine"],["origin","computer science"],["culture","cultural studies"]],Place).
% subset_record("sexual orientation",[["sexual orientation","social services"],["origin","government records"],["culture","census"]],Record).
%%- enter text, source and tags%%- tags used in x are chapter topicsprint_tags :-phrase_from_file_s(string(String00a),"tags.txt"),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),findall(T4,(member(A,String02a),A=[T1,_,_],downcase_atom(T1,T2),atom_string(T2,T3),split_string(T3,", ",", ",T4)),T5),maplist(append,[T5],[T6]),sort(T6,T7),findall(_,(member(T8,T7),writeln(T8)),_),prompt("Enter tag to show report of.",T9),findall([TA,TB],(member(A,String02a),A=[T1,TA,TB],downcase_atom(T1,T2),atom_string(T2,T3),split_string(T3,", ",", ",T4),member(T9,T4)),T10),findall(_,(member([T11,T12],T10),writeln(T11),writeln(T12),writeln("")),_).
%% Graphs (X1,Y1) to (X2,Y2)gridline1(X1,Y1,X2,Y2,C2,C3,N3) :-sortbyx(X1,Y1,X2,Y2,XA1,YA1,XA2,YA2),equation(XA1,YA1,XA2,YA2,M,C),gridline2(XA1,YA1,XA2,YA2,M,C,C2,C3,N3),!.
%% Graphs _3d(X1,Y1) to _3d(X2,Y2)gridline1_3d(X1,Y1,Z1,X2,Y2,Z2,C2,C3,N3) :-sortbyx_3d(X1,Y1,X2,Y2,XA1,YA1,XA2,YA2),equation_3d(XA1,YA1,XA2,YA2,M,C),gridline_orig_2_3d(XA1,YA1,XA2,YA2,M,C,C2,C4,N3),%C4=C3,%C2=C4,sortbyx_3d(X1,Z1,X2,Z2,XXA1,ZZA1,XXA2,ZZA2),equation_3d(XXA1,ZZA1,XXA2,ZZA2,M0,C0),gridline2_3d(XXA1,ZZA1,XXA2,ZZA2,M0,C0,C4,C3,N3),!.
%% n intro, vn verse, c chorus, i1 instrumental1, t2, instrumental 2, s solo, o outrofindall1(Form2,Form3) :-findall(B,shorten(Form2,B),Form3).
%% try other nounstrialy1(R1) :-%%control11(A1),%%repeat,trial0(A22), %% Controlsum(A22,0,S22),mean(S22,A1),%%repeat,trial0(A21), %% Test 1sum(A21,0,S02),mean(S02,A2),(A1>A2->R1=true;R1=fail).
%% try other nounstrialy1(R1) :-%%control11(A1),trial0(A22), %% Controlsum(A22,0,S22),mean(S22,A1),trial0(A21), %% Test 1sum(A21,0,S02),mean(S02,A2),(A1>A2->R1=true;R1=fail).
%% try other nounstrialy1(R1) :-%%control11(A1),trial0(A22), %% Controlsum(A22,0,S22),mean(S22,A1),trial0(A21), %% Test 1sum(A21,0,S02),mean(S02,A2),(A1>A2->R1=true;R1=fail).trial0(S3) :- N is 10, catch((trial1(N,[],S),trial01(S,S3)),   _,trial0(S3)).
%% write grammar part%% [[]] in args%% collect code commands to write%% Terminal known, Phrase2 known%% Terminal unknown, Phrase2 known%% Terminal known, Phrase2 unknown%% Terminal unknown, Phrase2 unknown - error%% if known or unknown, can be [v]%% Gets val or sets prolog var to undef, puts val in undef in var%% Doesn't support [v], use wrap(v) x - append not string concat if P1 is ["a"]getvalues2([],Values,Values,_Vars,Flags,Flags) :- !.
%%append(Rules,[[predicatename_existing,InputVars1L,OutputVarsL]%%%%,[other_existing,_,_]%%],Rules1),!.
%%append_last_rule1(_Program2,LastRule1) :-%%LastRule1=[],!.
%%if_empty_list_then_return([],_Number,-3) :- !.
%%midpoint([],0) :- !.
%%trial1(0,[],_A) :- fail,!.
%%trial1(0,[],_A) :- fail,!.trial1(0,A,A) :- !.
%choose_vars(C2,Var,Ad1,U5,In31,XX2) :-%findall([Ad1,XX21],(findall([Var,XX2],(member(Var,RS5),%member([Var,U5],C2),%trace,%member([Var,U4],In31),member([Ad1,XX21],U4),XX2=[Ad1,XX21],not(member([Var,[Ad1,_]],XX22))),XX23),%XX2),not(XX2=[]),append(XX22,XX23,XX24)./*test_formats(Vs,O,F1) :-open_file_s("s2a_formats.txt",T),member([Vsi,Vso,F1],T),%findall(Vsi1,(member(Vsi2,Vsi),atom_string(Vsi1,Vsi2)),Vsi3),findall([Vsi1,","],member(Vsi1,Vsi),Vsi3),append(Vsi4,[_],Vsi3),%append(Vsi3,["O"],Vsi4),findall([Vs1,","],member(Vs1,Vs),Vs3),append(Vs4,[_],Vs3),%findall([Vso1,Vso2],(member(Vso1,Vso),%string_concat(Vso1,"_o1",Vso2)),Vso3),%loop_replace_s2a(Vso3,F1,F2),findall([Vso1,","],member(Vso1,Vso),Vso3),append(Vso4,[_],Vso3),flatten(["[",Vsi4,"]=[",Vs4,"],",F1,",[",Vso4,"]=",O],L),foldr(string_concat,L,S),term_to_atom(T1,S),catch(T1,_,fail).
%equals(N,N).
%find_time1(H,M,S) :-%find_time(H,M,S),!.
%match_get_val(Variable,Value,Vars) :-% (member([Variable,Value],Vars)->true;% Variable=Value),!.
%number_digits(A,B) :-%number_order(A,C),B is C+1.
%putvalue_equals41(Variable,Value,Vars1,Vars1) :-%isvar(Variable),isvar(Value),!.
%writeln1(Suggestions3),%notrace,%findall(C,(member(B,Suggestions3), B=[_|B2],% ****%maplist(append,[[Word2,%B2]],[C])),Suggestions2).
**//**remove_chains_of_one_children1(N0,Options1,Options2,Options3) :-%trace,member([N0,A,N1],Options1),delete(Options1,[N0,A,N1],Options6),%trace,%%writeln1(remove_chains_of_one_children2(N1,N3,Options1,[],_Options4)),remove_chains_of_one_children2(N0,N3,Options1,[],_Options41),% * if N0=n3 there are a and b etc.
*/prep_predicate_call(Query,Functions3,All_predicate_numbers) :-%writeln(prep_predicate_call(Query,Functions3,All_predicate_numbers)),%trace,Query=[Name|Arguments1],(Arguments1=[]->Arguments_length=0;(Arguments1=[Arguments3],length(Arguments3,Arguments_length))),findall(Predicate_number1,(%member([Predicate_number1,Name|%[Arguments2|_]],Functions3),%length(Arguments2,Arguments_length)get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("true",Dbw_true1),Dbw_true1=Dbw_true,member([Predicate_number1,Name|Rest],Functions3),(Rest=[Args,":-",Lines]->length(Args,Arguments_length);(Rest=[Args]->(Lines=[[[Dbw_n,Dbw_true]]],length(Args,Arguments_length));(Rest=[":-",Lines]->Arguments_length=0;(Rest=[],Lines=[[[Dbw_n,Dbw_true]]],Arguments_length=0))))),All_predicate_numbers).
*/simplify_types(Data,Types1,Types2) :-get_lang_word("t",T),%get_lang_word("string",Dbw_string),Data=[T,A],%string(Data),append(Types1,[[T,A]],Types2),!.
*/simplify_types_with_n(Data,Types1,Types2) :-get_lang_word("t",T),%get_lang_word("string",Dbw_string),Data=[T,A],%string(Data),append(Types1,[[T,A]],Types2),!.
/*                                                              answer_number("14. abc",A),answer_number("a. 123",B).
/*                                                              answer_number("14. abc",A),answer_number("a. 123",B).A = "14.",B = "a.".*/answer_number(Question1,AN) :-trim_spaces_before(Question1,A1),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",split_on_substring117a(A1,SepandPad,B1),((append(C,E,B1),append([D],_%["."|_],E)->%string_strings("abcdefghijklmnopqrstuvwxyz",Alpha),%string_strings("0123456789",Nums),%member(C,Alpha)->string_concat(D,".",AN))->true;AN=""),!.%(member(C,Nums)),!.
/*                                                              answer_number("14. abc",A),answer_number("a. 123",B).A = "14.",B = "a.".*/answer_number(Question1,AN) :-trim_spaces_before(Question1,A1),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",split_on_substring117a(A1,SepandPad,B1),((append(C,E,B1),append([D],_%["."|_],E)->%string_strings("abcdefghijklmnopqrstuvwxyz",Alpha),%string_strings("0123456789",Nums),%member(C,Alpha)->string_concat(D,".",AN))->true;AN=""),!.%(member(C,Nums)),!./*find_number([[var,_,_,_,_,1,_,_,_,_,_]],A).
/*foldr(string_concat2,["a","b",C,D,E,"f"],"abcdef").
/*get_last_p_before_n1(List1,_Cp1,N,_Cp2) :-(not(member([N,_|_],List1)),fail).
/*member(C,D,C51,D51,WN) :-member([C,C51],WN),member([D,D51],WN),!.
/*replace_new('0ab0','a','c',A).A = "0cb0".
/*reserved_word2(Word) :-lang(Lang),lang_db(Lang_db),  split_on_number(Word,Output21,_),atom_string(Output21,Output2), member([Output2,_Input101,_Lang,_Input1],Lang_db), not(Output21="query_box"), !.
/*test_a(Tests) :-working_directory1(A,A),working_directory1(_,'../../GitHub2/'),[K1,H,_H1]=["Philosophy/", "4 2 23.pl", "Philosophy/4 2 23.pl"],string_concat(K11,"/",K1),LP=[[[n, c], ["%r(NA)."]], [[n, c], ["%NA=2."]]%, [[n, c], ["% r([a],N2)."]], [[n, c], ["% N2 = 3."]],[[n,r]]],(find_tests2(H,K11,LP,Tests)->true;working_directory1(_,A)).*/find_tests(K1,H,H1,Tests) :-%trace,string_concat(K11,"/",K1),%catch(call_with_time_limit(0.005,%trace,%p2lpconverter([file,H1],LP),%),_,false),fastp2lp(H1,LP1),%trace,find_tests2(%H1,H,K11,LP1,Tests).fastp2lp(H1,LP1) :-%trace,(string_concat(_,".pl",H1)->(time_file(H1,T),open_string_file_s(H1,F),remove_end_comments1(H1,F2),%string_concat(F1,"\n% ",F)->true;%F2 = F;%(string_concat(F,"\n% ",F2),%atomic_list_concat(F3,'\n\n',F2),%atomic_list_concat(F3,'',F4),save_file_s(H1,F2),set_time_file(H1,[],[modified(T)]));true),%foldr(string_concat,["#!/usr/bin/swipl -g main -q\n\n",":-include('../GitHub/Prolog-to-List-Prolog/p2lpconverter.pl').\n","handle_error(_Err):-\n  halt(1).\n","main :-\n    catch((p2lpconverter([file,\"",H1,"\"],LP),term_to_atom(LP,LP1), write(LP1)),Err, handle_error(Err)), nl,\n    halt.\n","main :- halt(1).\n"],String),foldr(string_concat,["catch(p2lpconverter([file,\"",H1,"\"],LP),_,false)"],String),%trace,fastp2lp1(String,LP1).
/**rule(RuleName,1,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-member(Var,InputVars1),rule2(RuleName,Var,VarList,VarList2,Rule,Var1),append(InputVars1,[Var1],InputVars2).
/**concat_list(A,[],A):-!.
/**concat_list(A,[],A):-!.concat_list(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list(C,Items,B).
/**concat_list(A,[],A):-!.concat_list(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list(C,Items,B).**/concat_list(A,[],A) :-!.
What is the input variable?|: OWhat variable is this last variable linked to?|: TIs this the final variable? (y/n)|: nWhat variable is this last variable linked to?|: BIs this the final variable? (y/n)|: nWhat variable is this last variable linked to?|: OIs this the final variable? (y/n)|: yWhat is the final output variable?|: TA = "a(OT,TB,BO,O,T):-member(A1,OT),A1=[O,T],member(A2,TB),A2=[T,B],member(A3,BO),A3=[B,O].".
add_line_numbers_to_algorithm1(Algorithm1,Algorithm2) :-add_line_numbers_to_algorithm2(Algorithm1,[],Algorithm2,0,_).
add_line_numbers_to_algorithm2([],Algorithm,Algorithm,N,N) :- !.
algorithm_decision_tree2(Direction,Dictionary2,State2,A2,Word2,Word3,Suggestions1,Suggestions2) :-A2=[Letter100|Rest],((Letter100=Letter)->true;(downcase_atom(Letter100,Letter101),atom_string(Letter101,Letter))),member([State2,Letter_c,State3],Dictionary2),(Letter_c=Letter->true;(downcase_atom(Letter_c,Letterc01),atom_string(Letterc01,Letter))),append(Word2,[Letter_c],Word4),algorithm_decision_tree2(Direction,Dictionary2,State3,Rest,Word4,Word3,Suggestions1,Suggestions2).
all_distinct1(A) :- sort(A,B),msort(A,B).
and1([true],[true],[],[true]):-!.
append_brackets(A,T3,B,T2) :-%trace, append(A,A1,T2),append(T3,B,A1),!.
append_list(A,[],A):-!.
append_list(A,[],A):-!.append_list(A,List,B) :-List=[Item|Items],append(A,[Item],C),append_list(C,Items,B).
append_list2([],[]):-!.append_list2(A1,B):-A1=[A|List],append_list2(A,List,B),!.
apply_rules_existing_and_new_branch3(Rules1,Rules2) :-findall([A,C1,C2],(member(B,Rules1),B=[A1,C1,C2],member(D,[%%rules_new_branch]),A=[D,A1]),Rules2).
assign_num(N,N3) :-(string(N)->number_string(N0,N);N0=N),new_nums(New_nums),find_last(New_nums,[_,N2]),(string(N2)->number_string(N21,N2);N2=N21),N3 is N21+1,append(New_nums,[[N0,N3]],New_nums2),retractall(new_nums(_)),assertz(new_nums(New_nums2)).
background(X1,Y1,File_contents1) :-X is X1*6,Y is Y1*10,numbers(X,1,[],XN),numbers(Y,1,[],YN),findall([X2,Y2,0],(member(X2,XN),member(Y2,YN)),File_contents1).
basecasecondition(Variables3,[n,Name],Item1) :-not((Item1=[[n,grammar_part],Item2|_Rest2],Item2=[[n,Name]|_Rest3],length(Variables3,Length),length(Item2,Length))).
capitalise_if_necessary(File_list302,Word,Choice211) :-string_concat(File_list5,_E,File_list302),string_length(File_list5,1),string_concat(Word1,E1,Word),string_length(Word1,1),%string_codes(File_list5,File_list5_c),%phrase(word1(File_list5_c),_),(is_upper(File_list5)->(upcase_atom(Word1,Word11),string_concat(Word11,E1,Choice211));Choice211=Word).
cawptest2a(7,[add0,add0],[],[2,3],[1,1],%% it could be 5[3,4], %% 4 not 3 because of bug[1],[1],[[[[[[[v,a],[]]],[[[v,b],[]]],true]]],[[[[[[v,a],[1,2,3]]],[[[v,b],[]]],true]]]%%[[[[[v,a],[2]]],[[[v,b],[]]],true]], %% Needs to progress bottom up by writing base case first%%[[[[[v,a],[1,2]]],[[[v,b],[]]],true]], %% add0 second clause has this not spec below%%[[[[[v,a],[1,2]]],[[[v,b],[2]]],true]],%%[[[[[v,a],[2]]],[[[v,b],[]]],true]]%%[[[[[v,a],[1,2]]],[[[v,b],[]]],true]],],[ %% Algorithm dictionary[[[n,add2],1,1],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[[n,add3],1,1],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]] %% Result/**[[[n,add1],1,1],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]]**/],[ %% Result%%[[n,add3],[[v,a],[v,b]],":-", %% swapped a3,a2%%[[[n,tail],[[v,a],[v,b]]]]],/**[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-", [[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]]],**/ %% Resulting base case[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]]],[ %% Resulting recursive algorithm[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,add0],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]]]]).
chars(Length2,Maximum,Char,Spaces2) :-numbers(Maximum,Length2,[],Numbers),findall(Char,(member(_Number,Numbers)),Spaces1),concat_list(Spaces1,Spaces2).
chart(N1,N2,Chart1) :-N11 is N1-1,chars(1,N11," ",Spaces1),chars(N1,N2,"*",Stars),concat_list([Spaces1,Stars,"\n\n"],Chart1).
check14([],_,A,A,[]):-!.
checkarguments([],[],Vars,Vars,FirstArgs,FirstArgs) :- !. checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%%%writeln1(1),Arguments1=[Value|Arguments3], %% Value may be a number, string, list or treeexpressionnotatom3(Value),Arguments2=[Variable2|Arguments4],not(var(Variable2)),isvar(Variable2),putvalue(Variable2,Value,Vars1,Vars3),checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs1,FirstArgs2),!.
checktypes2(Vars,TypeStatements1,_TypeStatements2,_C) :-get_lang_word("t",T),get_lang_word("number",Dbw_number),%%writeln(checktypes2(Vars,TypeStatements1,_TypeStatements2,C)),TypeStatements1=[T,Dbw_number],(types(on)->debug_call(Skip,[[T,Dbw_number],Vars]);true),((number(Vars))->(types(on)->debug_exit(Skip,[[T,Dbw_number],Vars]);true);     (types(on)->debug_fail(Skip,[[T,Dbw_number],Vars]);true)).
choose(C) :- findall(C,C,D),random_member(C,D).
choose(N2,B,B1,B2,C,Item) :-%%trace,(choose2(N2,B,B1,B2,C,Item)->true;(Item="* All quotes exhausted. (*)"),N2=1,B="()",B1="()",B2=1,C=""%%,trace),%%notrace,!.choose2(N2,B,B1,B2,List0,List0) :-%%trace,string00_z(String00),choose_sentence_range(String00,N1,B,B1,B2,List0),%%chosen_quotes(Chosen_quotes1),%%trace,%%length(List0,L),%%numbers(L,1,[],N),%%random_%%member(N1,N),%%%%random_%%member([N1,Item10],List0),%%random_%%**member(Item1,Item10),N2 is N1+B2-1,%%get_item_n(List0,N1,Item10),%%**string_codes(Item10,List),%%notrace,%%**split_string(List,".\n",".\n",List2),%%length(List2,L),%%numbers(L,1,[],N),%%random_%%member(N1,N),%%N2 is N1+B2-1,%%random_%%**member(Item1,List2),%%get_item_n(List2,N1,Item1),/**string_concat(E,D,Item1),string_length(E,1),downcase_atom(E,E1),atom_string(E1,E2),string_concat(E2,D,Item2),string_length(E2,1),string_concat(Item2,""%%".",Item),**/delete(String00,[B,B1,B2,N1,List0],String00_a),%%**delete(String00,[B,B1,B2|_],String00_a),%%**delete(List0,[N1,Item10],List6),%%findall([Item3,". "],(member(Item3,List2)),List3),%%maplist(append,[List3],[List4]),%%concat_list(List4,_List5),%%append(List6,[]%%List5%%,List7),%%**(List6=[]->String00_b=String00_a;%%**(%%trace,%%**maplist(append,[[[B,B1,B2],List6]],[String00_c]),%%**append(String00_a,[String00_c],String00_b)%%,notrace%%**)),retractall(string00_z(_)),assertz(string00_z(String00_a))%%trace,%%writeln1(String00_b),notrace%%,not(member(Item,Chosen_quotes1)),%%append(Chosen_quotes1,[Item],Chosen_quotes2),%%retractall(chosen_quotes(_)),%%assertz(chosen_quotes(Chosen_quotes2)).
choose1(List0,Item) :-mind_read(Item,List0).
choose1(List0,Item) :-random_member(Item,List0).
choose1(List0,Item) :-%trace,mind_read(Item,List0),writeln(here1).
clean_formula(List1,A,B) :-operators1(Ops1),%operators2(Ops2),extra_characters(Ch),foldr(string_concat,[Ops1,%Ops2,Ch],Ch2),string_strings(Ch2,Ch2L),is_list(List1),List1=[Op2,N%Op3|List2],member(Op2,Ch2L),number1(N),%member(Op3,Ch2L),append(A,[N,Op2],A1),clean_formula(List2,A1,B),!.
clean_input(A,B0) :-(is_list(A)->term_to_atom(A,A0);A=A0),%term_to_atom(A0,A1),A0=A1,downcase_atom(A1,A2),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",split_string1b(A2,SepandPad,SepandPad,B1),findall([B2," "],member(B2,B1),B3),flatten(B3,B4),append(B5,[_],B4),foldr(string_concat,B5,B0),!.
combophil_grammar_logic_to_alg1(File) :-%%(String000) :-phrase_from_file_s(string(Text1), "../Text-to-Breasonings/file.txt"),string_codes(Text11,Text1),downcase_atom(%%B1Text11,B11),atom_string(B11,B12),SepandPad1=".\n",split_string(B12,SepandPad1,SepandPad1,A0),findall(_,(member(A00,A0),combophil_grammar_logic_to_alg2(String000,A00),%%String000="a b c",time((N = u, M = u,texttobr2(N,u,String000,M),texttobr(N,u,String000,M))),%% Give the meditators, etc. the As.
concat_list0([],""):-!.
contains_var(Var,Statement) :-(Var=Statement->true;(Statement=[Statement1|Statement2],(Var=Statement1->true;(contains_var(Var,Statement1)->true;contains_var(Var,Statement2))))).
convert_to_grammar_part20(Body1,FirstVar1,SecondVar1,SecondVarParent,Body2,Body3) :-(count_call_or_terminal(Body1,0,1,[],_I)->SecondVar2=SecondVar1;SecondVar2=3),convert_to_grammar_part2(Body1,FirstVar1,SecondVar2,SecondVarParent,Body2,Body3),!.
convert_to_pbm(Grid1,X,Y,Grid2) :-numbers(Y,0,[],YN1),reverse(YN1,YN),numbers(X,0,[],XN),findall([X1,Y1,Pixel],(member(Y1,YN),member(X1,XN),member([X1,Y1,Pixel1],Grid1),(Pixel1=[]->Pixel=0;Pixel=1)%write(Pixel),write("\t")),Grid2).
convert_to_pbm(Grid1,X,Y,_XA1,_YA1,_S1,C1,Grid2) :-numbers(Y,0,[],YN1),reverse(YN1,YN),numbers(X,0,[],XN),%trace,findall([X1,Y1|Pixel],(member(Y1,YN),member(X1,XN),member([X1,Y1|Pixel1],Grid1),((Pixel1=[[]]->true;Pixel1=[255,255,255])->Pixel=[255,255,255];(%trace,colour(C1,     [R, G,   B]),Pixel=[R, G,   B]))%write(Pixel),write("\t")),Grid2).
course_and_essay_topic2([["Computational English"],["Computational English Argument","Computational English is like a Calculator","Intertextuality","Finite Data will be a Solution in Conglish","Radical Difference","Order in Conglish","Dereconstruction","Kolmogorov Hermeneutics","Derivability","The Science of Crossing Over","A New Logic Reflecting Language or Natural Logic" ,"Philosophical Computational English","Lenses","Analysing characteristics of arguments","Conglish Reflection","Narratology Diagram","How can the program cope with real variation?" ,"Subject Mix","Perspectives","Ratios","Exploring opposites in Hamlet","Drawing connections","Symbols"]]).
critique2(String00,String01,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link):-(%%concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote to comment on? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),%%choose_sentence_range(String00,N_page_ref1,String00a11,String00a21,_String00a31,String00a41),choose(N_page_ref1,String00a11,String00a21,_String00a31,_String00a41,String00a51),concat_list(["\"",String00a51,"\" (",String00a21,", p. ",N_page_ref1,")."],String5a),reference(String00a11),%%concat_list(["Is your comment from a quote (y/n)? "],String2yn),get_string(String2yn,either,one-not-ml,"","",String3yn),%%agree_disagree(Pole),(%%String3yn="y"true->(%%concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),%%concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,%%member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphrase%%concat_list(["What is the comment that is from the quote? "],String4ac),%%trace,%%get_string(String4ac,either,one-not-ml-ref,"",String3aay,String5a1)%%choose_sentence_range(String00,N_page_ref2,String00a12,String00a22,_String00a32,String00a42),choose(N_page_ref2,String00a12,String00a22,_String00a32,_String00a42,String00a52),concat_list(["\"",String00a52,"\" (",String00a22,", p. ",N_page_ref2,")."],String5a1),reference(String00a12));(String3y=0,String3ay=0,%%concat_list(["What is the comment? "],String4ac),%%get_string(String4ac,either,one-not-ml,"","",%%String5a,%%String5a1)%%choose_sentence_range(String00,N_page_ref3,String00a13,String00a23,_String00a33,String00a43),choose(_N_page_ref3,String00a13,_String00a23,_String00a33,_String00a43,String00a53),concat_list(["\"",String00a53,"\"."],String5a1),reference(String00a13)%%" (",String00a23,", p. ",N_page_ref3,").")),%%concat_list(["How does the comment ",String5a1," relate to the essay topic ",String01,"? "],Topic_paragraph_link_prompt),%%trace,%%downcase_and_split(String5a1,String5a1ds),%%downcase_and_split(String01,String01ds),%%get_string(Topic_paragraph_link_prompt,either,one-not-ml,String5a1ds,String01ds,Topic_paragraph_link)string_concat(String5a1_az,".",String5a1),%%choose_sentence_range(String00,N_page_ref4,String00a14,String00a24,_String00a34,String00a44),%%choose(N_page_ref4,String00a14,String00a24,_String00a34,String00a44,String00a54),split_string(String01,"(","(",[String01_a|_]),concat_list([String01_a," is because ",String5a1_az,"."%% because of ",String00a54," (",String00a24,", p. ",N_page_ref4,")."],Topic_paragraph_link)%%reference(String00a14)/**%% conn - choose connected commentsconcat_list(["How does the quote you entered (",String5a,") relate to the paragraph topic ",Item1,"? "],String4),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),get_string(String4,either,two,Item1a,String3aa,String5)**/)->true;critique2(String00,String01,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link).
critique2(String00,String01,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link):-(%%concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote to comment on? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),%%choose_sentence_range(String00,N_page_ref1,String00a11,String00a21,_String00a31,String00a41),choose(N_page_ref1,String00a11,String00a21,_String00a31,_String00a41,String00a51),end_note_number(End_note_number1),add_1_to_end_note_number,concat_list(["\"",String00a51,"\"<sup>",End_note_number1,"</sup>."%% (",String00a21,", p. ",N_page_ref1,")."],String5a),reference(String00a11,String00a21,N_page_ref1,End_note_number1),%%concat_list(["Is your comment from a quote (y/n)? "],String2yn),get_string(String2yn,either,one-not-ml,"","",String3yn),%%agree_disagree(Pole),(%%String3yn="y"true->(%%concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),%%concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,%%member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphrase%%concat_list(["What is the comment that is from the quote? "],String4ac),%%trace,%%get_string(String4ac,either,one-not-ml-ref,"",String3aay,String5a1)%%choose_sentence_range(String00,N_page_ref2,String00a12,String00a22,_String00a32,String00a42),choose(N_page_ref2,String00a12,String00a22,_String00a32,_String00a42,String00a52),end_note_number(End_note_number2),add_1_to_end_note_number,concat_list(["\"",String00a52,"\"<sup>",End_note_number2,"</sup>."%% (",String00a22,", p. ",N_page_ref2,")."],String5a1),reference(String00a12,String00a22,N_page_ref2,End_note_number2));(String3y=0,String3ay=0,%%concat_list(["What is the comment? "],String4ac),%%get_string(String4ac,either,one-not-ml,"","",%%String5a,%%String5a1)%%choose_sentence_range(String00,N_page_ref3,String00a13,String00a23,_String00a33,String00a43),choose(_N_page_ref3,_String00a13,_String00a23,_String00a33,_String00a43,String00a53),concat_list(["\"",String00a53,"\"."],String5a1)%%reference(String00a13)%%" (",String00a23,", p. ",N_page_ref3,").")),%%concat_list(["How does the comment ",String5a1," relate to the essay topic ",String01,"? "],Topic_paragraph_link_prompt),%%trace,%%downcase_and_split(String5a1,String5a1ds),%%downcase_and_split(String01,String01ds),%%get_string(Topic_paragraph_link_prompt,either,one-not-ml,String5a1ds,String01ds,Topic_paragraph_link)(string_concat(String5a1_az,".",String5a1)->true;String5a1_az=String5a1),%%choose_sentence_range(String00,N_page_ref4,String00a14,String00a24,_String00a34,String00a44),%%choose(N_page_ref4,String00a14,String00a24,_String00a34,String00a44,String00a54),%%trace,split_string(String01,"(","(",[String01_a|_]),split_string(String01_a,"<","<",[String01_a0|_]),strip_footnotes(String5a1_az,String5a1_az_2),concat_list([String01_a0," is because ",String5a1_az_2,"."%% because of ",String00a54," (",String00a24,", p. ",N_page_ref4,")."],Topic_paragraph_link)%%reference(String00a14)/**%% conn - choose connected commentsconcat_list(["How does the quote you entered (",String5a,") relate to the paragraph topic ",Item1,"? "],String4),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),get_string(String4,either,two,Item1a,String3aa,String5)**/)->true;critique2(String00,String01,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link).
critique2(String00,String01,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link):-(%%concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote to comment on? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),choose_sentence_range(String00,N_page_ref1,String00a11,String00a21,_String00a31,String00a41),choose(String00a41,String00a51),concat_list([String00a51," (",String00a21,", p. ",N_page_ref1,")."],String5a),reference(String00a11),%%concat_list(["Is your comment from a quote (y/n)? "],String2yn),get_string(String2yn,either,one-not-ml,"","",String3yn),%%agree_disagree(Pole),(%%String3yn="y"true->(%%concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),%%concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,%%member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphrase%%concat_list(["What is the comment that is from the quote? "],String4ac),%%trace,%%get_string(String4ac,either,one-not-ml-ref,"",String3aay,String5a1)choose_sentence_range(String00,N_page_ref2,String00a12,String00a22,_String00a32,String00a42),choose(String00a42,String00a52),concat_list([String00a52," (",String00a22,", p. ",N_page_ref2,")."],String5a1),reference(String00a12));(String3y=0,String3ay=0,%%concat_list(["What is the comment? "],String4ac),%%get_string(String4ac,either,one-not-ml,"","",%%String5a,%%String5a1)choose_sentence_range(String00,N_page_ref3,String00a13,String00a23,_String00a33,String00a43),choose(String00a43,String00a53),concat_list([String00a53," (",String00a23,", p. ",N_page_ref3,")."],String5a1),reference(String00a13))),%%concat_list(["How does the comment ",String5a1," relate to the essay topic ",String01,"? "],Topic_paragraph_link_prompt),%%trace,%%downcase_and_split(String5a1,String5a1ds),%%downcase_and_split(String01,String01ds),%%get_string(Topic_paragraph_link_prompt,either,one-not-ml,String5a1ds,String01ds,Topic_paragraph_link)string_concat(String5a1_az,".",String5a1),choose_sentence_range(String00,N_page_ref4,String00a14,String00a24,_String00a34,String00a44),choose(String00a44,String00a54),concat_list([String01," is because of ",String5a1_az," because of ",String00a54," (",String00a24,", p. ",N_page_ref4,")."],Topic_paragraph_link),reference(String00a14)/**%% conn - choose connected commentsconcat_list(["How does the quote you entered (",String5a,") relate to the paragraph topic ",Item1,"? "],String4),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),get_string(String4,either,two,Item1a,String3aa,String5)**/)->true;critique2(String00,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link).
critique2(String01,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link):-(%%concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),concat_list(["What is the paraphrased quote to comment on? "],String4a),get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),concat_list(["Is your comment from a quote (y/n)? "],String2yn),get_string(String2yn,either,one-not-ml,"","",String3yn),agree_disagree(Pole),(String3yn="y"->(%%concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),%%concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,%%member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphraseconcat_list(["What is the comment that is from the quote? "],String4ac),%%trace,get_string(String4ac,either,one-not-ml-ref,"",String3aay,String5a1));(String3y=0,String3ay=0,concat_list(["What is the comment? "],String4ac),get_string(String4ac,either,one-not-ml,"","",%%String5a,String5a1))),concat_list(["How does the comment \"",String5a1,"\" relate to the essay topic \"",String01,"\"? "],Topic_paragraph_link_prompt),%%trace,downcase_and_split(String5a1,String5a1ds),downcase_and_split(String01,String01ds),get_string(Topic_paragraph_link_prompt,either,one-not-ml,String5a1ds,String01ds,Topic_paragraph_link)/**%% conn - choose connected commentsconcat_list(["How does the quote you entered (\"",String5a,"\") relate to the paragraph topic \"",Item1,"\"? "],String4),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),get_string(String4,either,two,Item1a,String3aa,String5)**/)->true;critique2(ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link).
critique2(String01,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link):-(concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),member1a([String3,String3a,String3aa],ML_db),concat_list(["What is the paraphrased quote to comment on? "],String4a),get_string(String4a,positive,one,"",String3aa,String5a),concat_list(["Is your comment from a quote (y/n)? "],String2yn),get_string(String2yn,either,one-not-ml,"","",String3yn),agree_disagree(Pole),(String3yn="y"->(concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphraseconcat_list(["What is the comment that is from the quote? "],String4ac),%%trace,get_string(String4ac,Pole,one,"",String3aay,String5a1));(String3y=0,String3ay=0,concat_list(["What is the comment? "],String4ac),get_string(String4ac,Pole,one-not-ml,"","",%%String5a,String5a1))),concat_list(["How does the comment \"",String5a1,"\" relate to the essay topic \"",String01,"\"? "],Topic_paragraph_link_prompt),%%trace,downcase_and_split(String5a1,String5a1ds),downcase_and_split(String01,String01ds),get_string(Topic_paragraph_link_prompt,positive,two,String5a1ds,String01ds,Topic_paragraph_link)/**%% conn - choose connected commentsconcat_list(["How does the quote you entered (\"",String5a,"\") relate to the paragraph topic \"",Item1,"\"? "],String4),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),get_string(String4,either,two,Item1a,String3aa,String5)**/)->true;critique2(String01,ML_db,String3,String3a,String5a,String3y,String3ay,String5a1,Topic_paragraph_link).
critique3(ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa):-(%%concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),concat_list(["What is the paraphrased quote to comment on? "],String4a),get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),concat_list(["Is your comment from a quote (y/n)? "],String2yn),get_string(String2yn,either,one-not-ml,"","",String3yn),agree_disagree(Pole),(String3yn="y"->(%%concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),%%concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,%%member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphrase x%%trace,concat_list(["What is the comment that is from the quote? "],String4ac),%%trace,get_string(String4ac,either,one-not-ml-ref,"",String3aay,String5a1)%%,trace);(String3y=0,String3ay=0,concat_list(["What is the comment? "],String4ac),get_string(String4ac,either,one-not-ml,"","",%%String5a,String5a1))),%%*** assertz recurse not findall new critique3 x%%trace,critique3(Critique31),append(Critique31,[[0,0,String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),critique3(Critique33),((%%critique3(Critique3),length(Critique33,LCritique3),%%length(List1,LCritique3),numbers(LCritique3,1,[],List1),%%append(List1,_,Numbers),%%Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],%%trace,findall([N," - ",CString5a1,"\n"],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString3,_CString3a,_CString5a,_CString3y,_CString3ay,CString5a1])),CStrings1),findall([N,CNumber2a,CNumber3a,CString5a1],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString31,_CString3a1,_CString5a1,_CString3y1,_CString3ay1,CString5a1])),CStrings2),%%trace,%%CStrings=[CStrings1,CStrings2],reverse(CStrings2,CStringsR),CStringsR=[[_,CNumber2a1,CNumber3a1,LastCStrings]|CStringsR1],reverse(CStringsR1,CStringsRR),reverse(CStrings1,CStringsR10),CStringsR10=[_|CStringsR11],reverse(CStringsR11,CStringsRR1),append_list2(CStringsRR1,CStrings11),concat_list(CStrings11,CStrings12),concat_list(["Please select a comment to connect the comment \"",LastCStrings,"\" to:","\n",CStrings12],ConnectionNumberPrompt),get_number(ConnectionNumberPrompt,ConnectionNumber),member([ConnectionNumber,CNumber2aa,CNumber3aa,CString5a1a],CStringsRR),SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(CString5a1a,CString5a1a1),split_string(CString5a1a1, SepandPad, SepandPad, CString5a1a2),%%CNumber2a1,CNumber3a1,downcase_atom(LastCStrings,LastCStrings_a),split_string(LastCStrings_a, SepandPad, SepandPad, LastCStrings_a1),%% conn - choose connected comments, this to a previous comment%%trace,concat_list(["How does \"",LastCStrings,"\" connect to \"",CString5a1a,"\"? "],ConnectionPrompt),get_string(ConnectionPrompt,either,one-not-ml,CString5a1a2,LastCStrings_a1,String5aaa))->true;(%% If the section since updating dynamic critique comments fails, prevent doubling of critique commentscritique3(Critique311),reverse(Critique311,Critique312),Critique312=[_|Critique313],reverse(Critique313,Critique314),retractall(critique3(_)),assertz(critique3(Critique314)),fail))/**Critique4=[String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],**//**critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/)%% Retries the predicate if it fails->true;critique3(ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa).
critique3(ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa):-(concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),member1a([String3,String3a,String3aa],ML_db),concat_list(["What is the paraphrased quote to comment on? "],String4a),get_string(String4a,positive,one,"",String3aa,String5a),concat_list(["Is your comment from a quote (y/n)? "],String2yn),get_string(String2yn,either,one-not-ml,"","",String3yn),agree_disagree(Pole),(String3yn="y"->(concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphrase x%%trace,concat_list(["What is the comment that is from the quote? "],String4ac),%%trace,get_string(String4ac,Pole,one,"",String3aay,String5a1)%%,trace);(String3y=0,String3ay=0,concat_list(["What is the comment? "],String4ac),get_string(String4ac,Pole,one-not-ml,"","",%%String5a,String5a1))),%%*** assertz recurse not findall new critique3 x%%trace,critique3(Critique31),append(Critique31,[[0,0,String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),critique3(Critique33),((%%critique3(Critique3),length(Critique33,LCritique3),%%length(List1,LCritique3),numbers(LCritique3,1,[],List1),%%append(List1,_,Numbers),%%Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],%%trace,findall([N," - ",CString5a1,"\n"],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString3,_CString3a,_CString5a,_CString3y,_CString3ay,CString5a1])),CStrings1),findall([N,CNumber2a,CNumber3a,CString5a1],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString31,_CString3a1,_CString5a1,_CString3y1,_CString3ay1,CString5a1])),CStrings2),%%trace,%%CStrings=[CStrings1,CStrings2],reverse(CStrings2,CStringsR),CStringsR=[[_,CNumber2a1,CNumber3a1,LastCStrings]|CStringsR1],reverse(CStringsR1,CStringsRR),reverse(CStrings1,CStringsR10),CStringsR10=[_|CStringsR11],reverse(CStringsR11,CStringsRR1),append_list2(CStringsRR1,CStrings11),concat_list(CStrings11,CStrings12),concat_list(["Please select a comment to connect the comment \"",LastCStrings,"\" to:","\n",CStrings12],ConnectionNumberPrompt),get_number(ConnectionNumberPrompt,ConnectionNumber),member([ConnectionNumber,CNumber2aa,CNumber3aa,CString5a1a],CStringsRR),SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(CString5a1a,CString5a1a1),split_string(CString5a1a1, SepandPad, SepandPad, CString5a1a2),%%CNumber2a1,CNumber3a1,downcase_atom(LastCStrings,LastCStrings_a),split_string(LastCStrings_a, SepandPad, SepandPad, LastCStrings_a1),%% conn - choose connected comments, this to a previous comment%%trace,concat_list(["How does \"",LastCStrings,"\" connect to \"",CString5a1a,"\"? "],ConnectionPrompt),get_string(ConnectionPrompt,Pole,two,CString5a1a2,LastCStrings_a1,String5aaa))->true;(%% If the section since updating dynamic critique comments fails, prevent doubling of critique commentscritique3(Critique311),reverse(Critique311,Critique312),Critique312=[_|Critique313],reverse(Critique313,Critique314),retractall(critique3(_)),assertz(critique3(Critique314)),fail))/**Critique4=[String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],**//**critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/)%% Retries the predicate if it fails->true;critique3(ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa).
critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa):-(%%concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote to comment on? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),%%trace,%%choose_sentence_range(String00,N_page_ref4,String00a14,String00a24,_String00a34,String00a44),choose(N_page_ref4,String00a14,String00a24,_String00a34,_String00a44,String00a54),concat_list(["\"",String00a54,"\" (",String00a24,", p. ",N_page_ref4,")."],String5a),reference(String00a14),%%concat_list(["Is your comment from a quote (y/n)? "],String2yn),%%get_string(String2yn,either,one-not-ml,"","",String3yn),%%agree_disagree(Pole),(true->%%String3yn="y"->(%%concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),%%concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,%%member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphrase x%%trace,%%concat_list(["What is the comment that is from the quote? "],String4ac),%%trace,%%get_string(String4ac,either,one-not-ml-ref,"",String3aay,String5a1)%%choose_sentence_range(String00,N_page_ref5,String00a15,String00a25,_String00a35,String00a45),choose(N_page_ref5,String00a15,String00a25,_String00a35,_String00a45,String00a55),concat_list(["\"",String00a55,"\" (",String00a25,", p. ",N_page_ref5,")."],String5a1),reference(String00a15)%%,trace);(String3y=0,String3ay=0,concat_list(["What is the comment? "],String4ac),%% This is never chosenget_string(String4ac,either,one-not-ml,"","",%%String5a,String5a1))),%%*** assertz recurse not findall new critique3 x%%trace,critique3(Critique31),append(Critique31,[[0,0,String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),critique3(Critique33),((%%critique3(Critique3),length(Critique33,LCritique3),%%length(List1,LCritique3),numbers(LCritique3,1,[],List1),%%append(List1,_,Numbers),%%Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],%%trace,findall([N," - ",CString5a1,"\n"],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString3,_CString3a,_CString5a,_CString3y,_CString3ay,CString5a1])),CStrings1),findall([N,CNumber2a,CNumber3a,CString5a1],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString31,_CString3a1,_CString5a1,_CString3y1,_CString3ay1,CString5a1])),CStrings2),%%trace,%%CStrings=[CStrings1,CStrings2],reverse(CStrings2,CStringsR),CStringsR=[[_,CNumber2a1,CNumber3a1,LastCStrings]|CStringsR1],reverse(CStringsR1,CStringsRR),reverse(CStrings1,CStringsR10),CStringsR10=[_|CStringsR11],reverse(CStringsR11,CStringsRR1),append_list2(CStringsRR1,CStrings11),concat_list(CStrings11,_CStrings12),%%concat_list(["Please select a comment to connect the comment ",LastCStrings," to:","\n",CStrings12],ConnectionNumberPrompt),%%get_number(ConnectionNumberPrompt,ConnectionNumber),%numbers(%% *** Choose phrase which is similar to a previous phrase%% findall([N," - ",CString5a1,"\n"],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString3,_CString3a,_CString5a,_CString3y,_CString3ay,CString5a1]),  /**SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall([CString5a1Z2,CString5a1Z5],(downcase_atom(CString5a1,CString5a1Z1),atom_string(CString5a1Z1,CString5a1Z2),split_string(CString5a1,SepandPad,SepandPad,CString5a1Z3), Connectors=["the","a","i","on","with","of","an","for","to","was","were","and","in","my","from","out","by"],%% find distances between terms, closest to sentsubtract(CString5a1Z3,Connectors,CString5a1Z5),),CString5a1Z4),**/%trace,choose1(List1,ConnectionNumber_aa),%number_string(ConnectionNumber,ConnectionNumber_aa),ConnectionNumber=ConnectionNumber_aa,member([ConnectionNumber,CNumber2aa,CNumber3aa,CString5a1a],CStringsRR),%%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%%downcase_atom(CString5a1a,CString5a1a1),split_string(CString5a1a1, SepandPad, SepandPad, CString5a1a2),%%CNumber2a1,CNumber3a1,%%downcase_atom(LastCStrings,LastCStrings_a),split_string(LastCStrings_a, SepandPad, SepandPad, LastCStrings_a1),%% conn - choose connected comments, this to a previous comment%%trace,%%concat_list(["How does ",LastCStrings," connect to ",CString5a1a,"? "],ConnectionPrompt),%%get_string(ConnectionPrompt,either,one-not-ml,CString5a1a2,LastCStrings_a1,String5aaa)string_concat(LastCStrings_az,".",LastCStrings),string_concat(CString5a1a_az1,".",CString5a1a),%%choose_sentence_range(String00,N_page_ref6,String00a16,String00a26,_String00a36,String00a46),split_string(LastCStrings_az,"(","(",[LastCStrings_az_a|_]),replace(CString5a1a_az1,"\"","",CString5a1a_az),replace(LastCStrings_az_a,"\"","",LastCStrings_az_a1),choose(_N_page_ref6,String00a16,_String00a26,_String00a36,_String00a46,_String00a56),concat_list([LastCStrings_az_a1," because ",CString5a1a_az,"."%%" because ",String00a56," (",String00a26,", p. ",N_page_ref6,")."],String5aaa),reference(String00a16))->true;(%% If the section since updating dynamic critique comments fails, prevent doubling of critique commentscritique3(Critique311),reverse(Critique311,Critique312),Critique312=[_|Critique313],reverse(Critique313,Critique314),retractall(critique3(_)),assertz(critique3(Critique314)),fail))/**Critique4=[String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],**//**critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/)%% Retries the predicate if it fails->true;critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa).
critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa):-(%%concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote to comment on? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),%%trace,%%choose_sentence_range(String00,N_page_ref4,String00a14,String00a24,_String00a34,String00a44),choose(N_page_ref4,String00a14,String00a24,_String00a34,_String00a44,String00a54),concat_list(["\"",String00a54,"\" (",String00a24,", p. ",N_page_ref4,")."],String5a),reference(String00a14),%%concat_list(["Is your comment from a quote (y/n)? "],String2yn),%%get_string(String2yn,either,one-not-ml,"","",String3yn),%%agree_disagree(Pole),(true->%%String3yn="y"->(%%concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),%%concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,%%member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphrase x%%trace,%%concat_list(["What is the comment that is from the quote? "],String4ac),%%trace,%%get_string(String4ac,either,one-not-ml-ref,"",String3aay,String5a1)%%choose_sentence_range(String00,N_page_ref5,String00a15,String00a25,_String00a35,String00a45),choose(N_page_ref5,String00a15,String00a25,_String00a35,_String00a45,String00a55),concat_list(["\"",String00a55,"\" (",String00a25,", p. ",N_page_ref5,")."],String5a1),reference(String00a15)%%,trace);(String3y=0,String3ay=0,concat_list(["What is the comment? "],String4ac),%% This is never chosenget_string(String4ac,either,one-not-ml,"","",%%String5a,String5a1))),%%*** assertz recurse not findall new critique3 x%%trace,critique3(Critique31),append(Critique31,[[0,0,String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),critique3(Critique33),((%%critique3(Critique3),length(Critique33,LCritique3),%%length(List1,LCritique3),numbers(LCritique3,1,[],List1),%%append(List1,_,Numbers),%%Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],%%trace,findall([N," - ",CString5a1,"\n"],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString3,_CString3a,_CString5a,_CString3y,_CString3ay,CString5a1])),CStrings1),findall([N,CNumber2a,CNumber3a,CString5a1],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString31,_CString3a1,_CString5a1,_CString3y1,_CString3ay1,CString5a1])),CStrings2),%%trace,%%CStrings=[CStrings1,CStrings2],reverse(CStrings2,CStringsR),CStringsR=[[_,CNumber2a1,CNumber3a1,LastCStrings]|CStringsR1],reverse(CStringsR1,CStringsRR),reverse(CStrings1,CStringsR10),CStringsR10=[_|CStringsR11],reverse(CStringsR11,CStringsRR1),append_list2(CStringsRR1,CStrings11),concat_list(CStrings11,_CStrings12),%%concat_list(["Please select a comment to connect the comment ",LastCStrings," to:","\n",CStrings12],ConnectionNumberPrompt),%%get_number(ConnectionNumberPrompt,ConnectionNumber),%numbers(%% *** Choose phrase which is similar to a previous phrase%% findall([N," - ",CString5a1,"\n"],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString3,_CString3a,_CString5a,_CString3y,_CString3ay,CString5a1]),  /**SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall([CString5a1Z2,CString5a1Z5],(downcase_atom(CString5a1,CString5a1Z1),atom_string(CString5a1Z1,CString5a1Z2),split_string(CString5a1,SepandPad,SepandPad,CString5a1Z3), Connectors=["the","a","i","on","with","of","an","for","to","was","were","and","in","my","from","out","by"],%% find distances between terms, closest to sentsubtract(CString5a1Z3,Connectors,CString5a1Z5),),CString5a1Z4),**/choose1(List1,ConnectionNumber),member([ConnectionNumber,CNumber2aa,CNumber3aa,CString5a1a],CStringsRR),%%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%%downcase_atom(CString5a1a,CString5a1a1),split_string(CString5a1a1, SepandPad, SepandPad, CString5a1a2),%%CNumber2a1,CNumber3a1,%%downcase_atom(LastCStrings,LastCStrings_a),split_string(LastCStrings_a, SepandPad, SepandPad, LastCStrings_a1),%% conn - choose connected comments, this to a previous comment%%trace,%%concat_list(["How does ",LastCStrings," connect to ",CString5a1a,"? "],ConnectionPrompt),%%get_string(ConnectionPrompt,either,one-not-ml,CString5a1a2,LastCStrings_a1,String5aaa)string_concat(LastCStrings_az,".",LastCStrings),string_concat(CString5a1a_az1,".",CString5a1a),%%choose_sentence_range(String00,N_page_ref6,String00a16,String00a26,_String00a36,String00a46),split_string(LastCStrings_az,"(","(",[LastCStrings_az_a|_]),replace(CString5a1a_az1,"\"","",CString5a1a_az),replace(LastCStrings_az_a,"\"","",LastCStrings_az_a1),choose(_N_page_ref6,String00a16,_String00a26,_String00a36,_String00a46,_String00a56),concat_list([LastCStrings_az_a1," because ",CString5a1a_az,"."%%" because ",String00a56," (",String00a26,", p. ",N_page_ref6,")."],String5aaa),reference(String00a16))->true;(%% If the section since updating dynamic critique comments fails, prevent doubling of critique commentscritique3(Critique311),reverse(Critique311,Critique312),Critique312=[_|Critique313],reverse(Critique313,Critique314),retractall(critique3(_)),assertz(critique3(Critique314)),fail))/**Critique4=[String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],**//**critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/)%% Retries the predicate if it fails->true;critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa).
critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa):-(%%concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote to comment on? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),%%trace,%%choose_sentence_range(String00,N_page_ref4,String00a14,String00a24,_String00a34,String00a44),choose(N_page_ref4,String00a14,String00a24,_String00a34,_String00a44,String00a54),end_note_number(End_note_number4),add_1_to_end_note_number,concat_list(["\"",String00a54,"\"<sup>",End_note_number4,"</sup>."%% (",String00a24,", p. ",N_page_ref4,")."],String5a),reference(String00a14,String00a24,N_page_ref4,End_note_number4),%%concat_list(["Is your comment from a quote (y/n)? "],String2yn),%%get_string(String2yn,either,one-not-ml,"","",String3yn),%%agree_disagree(Pole),(true->%%String3yn="y"->(%%concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),%%concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,%%member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphrase x%%trace,%%concat_list(["What is the comment that is from the quote? "],String4ac),%%trace,%%get_string(String4ac,either,one-not-ml-ref,"",String3aay,String5a1)%%choose_sentence_range(String00,N_page_ref5,String00a15,String00a25,_String00a35,String00a45),choose(N_page_ref5,String00a15,String00a25,_String00a35,_String00a45,String00a55),end_note_number(End_note_number5),add_1_to_end_note_number,concat_list(["\"",String00a55,"\"<sup>",End_note_number5,"</sup>."%% (",String00a25,", p. ",N_page_ref5,")."],String5a1),reference(String00a15,String00a25,N_page_ref5,End_note_number5)%%,trace);(String3y=0,String3ay=0,concat_list(["What is the comment? "],String4ac),%% This is never chosenget_string(String4ac,either,one-not-ml,"","",%%String5a,String5a1))),%%*** assertz recurse not findall new critique3 x%%trace,critique3(Critique31),append(Critique31,[[0,0,String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),critique3(Critique33),((%%critique3(Critique3),length(Critique33,LCritique3),%%length(List1,LCritique3),%%notrace,numbers(LCritique3,1,[],List1),%%trace,%%append(List1,_,Numbers),%%Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],%%trace,findall([N," - ",CString5a1,"\n"],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString3,_CString3a,_CString5a,_CString3y,_CString3ay,CString5a1])),CStrings1),findall([N,CNumber2a,CNumber3a,CString5a1],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString31,_CString3a1,_CString5a1,_CString3y1,_CString3ay1,CString5a1])),CStrings2),%%trace,%%CStrings=[CStrings1,CStrings2],reverse(CStrings2,CStringsR),CStringsR=[[_,CNumber2a1,CNumber3a1,LastCStrings]|CStringsR1],reverse(CStringsR1,CStringsRR),reverse(CStrings1,CStringsR10),CStringsR10=[_|CStringsR11],reverse(CStringsR11,CStringsRR1),append_list2(CStringsRR1,CStrings11),concat_list(CStrings11,_CStrings12),%%concat_list(["Please select a comment to connect the comment ",LastCStrings," to:","\n",CStrings12],ConnectionNumberPrompt),%%get_number(ConnectionNumberPrompt,ConnectionNumber),%numbers(%% *** Choose phrase which is similar to a previous phrase%% findall([N," - ",CString5a1,"\n"],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString3,_CString3a,_CString5a,_CString3y,_CString3ay,CString5a1]),  /**SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall([CString5a1Z2,CString5a1Z5],(downcase_atom(CString5a1,CString5a1Z1),atom_string(CString5a1Z1,CString5a1Z2),split_string(CString5a1,SepandPad,SepandPad,CString5a1Z3), Connectors=["the","a","i","on","with","of","an","for","to","was","were","and","in","my","from","out","by"],%% find distances between terms, closest to sentsubtract(CString5a1Z3,Connectors,CString5a1Z5),),CString5a1Z4),**/choose1(List1,ConnectionNumber),member([ConnectionNumber,CNumber2aa,CNumber3aa,CString5a1a],CStringsRR),%%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%%downcase_atom(CString5a1a,CString5a1a1),split_string(CString5a1a1, SepandPad, SepandPad, CString5a1a2),%%CNumber2a1,CNumber3a1,%%downcase_atom(LastCStrings,LastCStrings_a),split_string(LastCStrings_a, SepandPad, SepandPad, LastCStrings_a1),%% conn - choose connected comments, this to a previous comment%%trace,%%concat_list(["How does ",LastCStrings," connect to ",CString5a1a,"? "],ConnectionPrompt),%%get_string(ConnectionPrompt,either,one-not-ml,CString5a1a2,LastCStrings_a1,String5aaa)string_concat(LastCStrings_az,".",LastCStrings),string_concat(CString5a1a_az1,".",CString5a1a),%%choose_sentence_range(String00,N_page_ref6,String00a16,String00a26,_String00a36,String00a46),split_string(LastCStrings_az,"(","(",[LastCStrings_az_a|_]),replace(CString5a1a_az1,"\"","",CString5a1a_az),replace(LastCStrings_az_a,"\"","",LastCStrings_az_a1),split_string(CString5a1a_az,"<","<",[CString5a1a_az_1|_]),split_string(LastCStrings_az_a1,"<","<",[LastCStrings_az_a1_1|_]),choose(_N_page_ref6,_String00a16,_String00a26,_String00a36,_String00a46,_String00a56),concat_list([LastCStrings_az_a1_1," because ",CString5a1a_az_1,"."%%" because ",String00a56," (",String00a26,", p. ",N_page_ref6,")."],String5aaa)%%reference(String00a16))->true;(%% If the section since updating dynamic critique comments fails, prevent doubling of critique commentscritique3(Critique311),reverse(Critique311,Critique312),Critique312=[_|Critique313],reverse(Critique313,Critique314),retractall(critique3(_)),assertz(critique3(Critique314)),fail))/**Critique4=[String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],**//**critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/)%% Retries the predicate if it fails->true;critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa).
critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa):-(%%concat_list(["What is the paragraph number of the quote to comment on? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote to comment on? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote to comment on? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),%%trace,choose_sentence_range(String00,N_page_ref4,String00a14,String00a24,_String00a34,String00a44),choose(String00a44,String00a54),concat_list([String00a54," (",String00a24,", p. ",N_page_ref4,")."],String5a),reference(String00a14),%%concat_list(["Is your comment from a quote (y/n)? "],String2yn),%%get_string(String2yn,either,one-not-ml,"","",String3yn),%%agree_disagree(Pole),(true->%%String3yn="y"->(%%concat_list(["What is the paragraph number of the comment? "],String2y),get_number(String2y,String3y),%%concat_list(["What is the sentence number of the comment? "],String2ay),get_number(String2ay,String3ay),%%trace,%%member1a([String3y,String3ay,String3aay],ML_db),%% use either original x or paraphrase x%%trace,%%concat_list(["What is the comment that is from the quote? "],String4ac),%%trace,%%get_string(String4ac,either,one-not-ml-ref,"",String3aay,String5a1)choose_sentence_range(String00,N_page_ref5,String00a15,String00a25,_String00a35,String00a45),choose(String00a45,String00a55),concat_list([String00a55," (",String00a25,", p. ",N_page_ref5,")."],String5a1),reference(String00a15)%%,trace);(String3y=0,String3ay=0,concat_list(["What is the comment? "],String4ac),%% This is never chosenget_string(String4ac,either,one-not-ml,"","",%%String5a,String5a1))),%%*** assertz recurse not findall new critique3 x%%trace,critique3(Critique31),append(Critique31,[[0,0,String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),critique3(Critique33),((%%critique3(Critique3),length(Critique33,LCritique3),%%length(List1,LCritique3),numbers(LCritique3,1,[],List1),%%append(List1,_,Numbers),%%Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],%%trace,findall([N," - ",CString5a1,"\n"],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString3,_CString3a,_CString5a,_CString3y,_CString3ay,CString5a1])),CStrings1),findall([N,CNumber2a,CNumber3a,CString5a1],(member(N,List1),get_item_n(Critique33,N,[CNumber2a,CNumber3a,_CString31,_CString3a1,_CString5a1,_CString3y1,_CString3ay1,CString5a1])),CStrings2),%%trace,%%CStrings=[CStrings1,CStrings2],reverse(CStrings2,CStringsR),CStringsR=[[_,CNumber2a1,CNumber3a1,LastCStrings]|CStringsR1],reverse(CStringsR1,CStringsRR),reverse(CStrings1,CStringsR10),CStringsR10=[_|CStringsR11],reverse(CStringsR11,CStringsRR1),append_list2(CStringsRR1,CStrings11),concat_list(CStrings11,_CStrings12),%%concat_list(["Please select a comment to connect the comment ",LastCStrings," to:","\n",CStrings12],ConnectionNumberPrompt),%%get_number(ConnectionNumberPrompt,ConnectionNumber),%numbers(choose1(List1,ConnectionNumber),member([ConnectionNumber,CNumber2aa,CNumber3aa,CString5a1a],CStringsRR),%%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%%downcase_atom(CString5a1a,CString5a1a1),split_string(CString5a1a1, SepandPad, SepandPad, CString5a1a2),%%CNumber2a1,CNumber3a1,%%downcase_atom(LastCStrings,LastCStrings_a),split_string(LastCStrings_a, SepandPad, SepandPad, LastCStrings_a1),%% conn - choose connected comments, this to a previous comment%%trace,%%concat_list(["How does ",LastCStrings," connect to ",CString5a1a,"? "],ConnectionPrompt),%%get_string(ConnectionPrompt,either,one-not-ml,CString5a1a2,LastCStrings_a1,String5aaa)string_concat(LastCStrings_az,".",LastCStrings),string_concat(CString5a1a_az,".",CString5a1a),choose_sentence_range(String00,N_page_ref6,String00a16,String00a26,_String00a36,String00a46),choose(String00a46,String00a56),concat_list([LastCStrings_az," is because of ",CString5a1a_az," because of ",String00a56," (",String00a26,", p. ",N_page_ref6,")."],String5aaa),reference(String00a16))->true;(%% If the section since updating dynamic critique comments fails, prevent doubling of critique commentscritique3(Critique311),reverse(Critique311,Critique312),Critique312=[_|Critique313],reverse(Critique313,Critique314),retractall(critique3(_)),assertz(critique3(Critique314)),fail))/**Critique4=[String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],**//**critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/)%% Retries the predicate if it fails->true;critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa).
cttInput(CttInput1,CttInput2,FromLang,ToLang,Tokens2,Tokens3,Tokens32) :-%%SepandPad=".?!", %% split by \n and record number of \ns between paras, then split into sentences adding back punctuation, trim white space before sentence recording number of \ss before - record sentence #phrase_from_file(string(CttInput4), CttInput1),(phrase(entry1(CttInput3),CttInput4)->true;(writeln("files/ctt-input.txt file read error."),abort)),CttInput3=[FromLang,ToLang,Tokens1],removers(Tokens1,1,[],Tokens2,[],Tokens3,[],Tokens31,[],Tokens32),length(Tokens2,Length0),write("Number of sentences to translate in files/ctt-input.txt: "), writeln(Length0),sort(Tokens31,CttInput2),length(CttInput2,Length1),write("Number of unique sentences to translate in files/ctt-input.txt: "), writeln(Length1).
data(Value1,Value2,Value3) :-to_lang2(To_lang),from_lang2(From_lang),get_lang_word3(input,"en",From_lang,I),%trace,Value1=I,%->true;(notrace,fail)),get_lang_word3(I,From_lang,To_lang,Value6b),%data1(Value4,Value6),append(Value2,[Value6b],Value3),!.
data(Value1a,Value2,Value3) :-%from_lang2(From_lang),%to_lang2(To_lang),%trace,((atom(Value1a)->true;(string(Value1a)->true;(number(Value1a))))->(Value1a=Value1b,%translate2(Value1a,From_lang,To_lang,Value1b), %% translate1a,2append(Value2,[Value1b],Value3))),!.
delete1_p2lp(A,Find,F) :-%writeln1(delete1_p2lp(A,Find,F)),%string_concat("%",A1,A2),%string_concat(A2,"%",A),%trace,string_strings(A,B),(append([Find],C,B)->true;C=B),(append(D,[Find],C)->true;D=C),foldr(string_concat,D,F).%split_string(A,Find,"",B),%findall([C,Replace],(member(C,B)),D),%maplist(append,[[B]],[E]),concat_list(E,F).%,string_concat(F,G,F1),string_length(G,1).%string_concat("%",F3,F2),%string_concat(F,"%",F3).
delete_all([],G,G) :- !.
delete_back_until_period(Flow1,Flow2) :-reverse(Flow1,Flow3),append(_,['.'|Flow4],Flow3),reverse(Flow4,Flow2).
delete_cp1(List1,CP,List5a,CP_Vars1,CP_Vars2a,Swaps) :-CP=[A,B|CP2],%writeln1([delete_cp1,[A,B|CP2]]),((List1=[])->true;(List1=[[A,B|CP2]],List5=[],set(curr_cp,0,CP_Vars1,CP_Vars3),set(curr_cp_index,0,CP_Vars3,CP_Vars4),set(min_cp,0,CP_Vars4,CP_Vars5),set(max_cp,0,CP_Vars5,CP_Vars2))->true;(member([A,B|CP2],List1),not(member([_F,A|_],List1)),delete(List1,[A,B|CP2],List5),member([B,C|_CP3],List5),%(B=23->(trace,writeln(here1));true),%(curr_cp(A)->set(curr_cp,B);true)set(curr_cp,C,CP_Vars1,CP_Vars3),set(min_cp,B,CP_Vars3,CP_Vars2))->true;(%trace,member([A,B|CP2],List1),not(member([B,_F|_],List1)),delete(List1,[A,B|CP2],List5),%member([C,A|_CP3],List5),%(A=23->(trace%,writeln(here2));true),%(curr_cp(B)->set(curr_cp,A);true)set(curr_cp,A,CP_Vars1,CP_Vars3),set(max_cp,A,CP_Vars3,CP_Vars2)%,notrace)->true;(member([D,A|CP4],List1),delete(List1,[D,A|CP4],List2),member([B,_C|_CP3],List2),member([A,B|CP2],List2),delete(List2,[A,B|CP2],List4),append(List4,[[D,B|CP4]],List5),%(B=23->(trace,writeln(here3));true),%(curr_cp(A)->set(curr_cp,B);true)set(curr_cp,B,CP_Vars1,CP_Vars2))),%trace,get(max_cp,Max_cp,CP_Vars2),%writeln([curr_cp,Curr_cp]),set(curr_cp,Max_cp,CP_Vars2,CP_Vars2b),renumber_cps(List5,List5a,CP_Vars2b,CP_Vars2a,Swaps),!.
delete_cp2(List1,[],List1,Cp_vars1,Cp_vars1) :- !.
delete_cps(Choice_point_trail3,E31,Choice_point_trail2,CP_Vars3,CP_Vars2).%/*delete_cps(Choice_point_trail1,[],Choice_point_trail1,CP_Vars,CP_Vars) :- !.
delete_curr_query_pred(Query,Predicates,Predicates1) :-%reverse(Predicates1,Predicates3),append(Predicates5,[[Query|_]|Predicates4],Predicates),Predicates2=[Predicates5|Predicates4],foldr(append,Predicates2,[],Predicates1).
delete_invisibles_etc(F,G) :-findall(J,(member(H,F),atom_string(H,J),not(J="."),not(J=".."),not(string_concat(".",_,J))),G).
delete_invisibles_etc(F,G) :-findall(J,(member(H,F),atom_string(H,J),not(J="."),not(J=".."),not(string_concat(".",_,J))),G).% test with t=w+1translate1(Input,From_l,Target_language1,Output3) :-concat_list([Input," ",From_l," ",Target_language1],Output3).load_lang_db :-%% error if lang not foundload_lang_db1(Entry3),lang(Lang),(Lang="en"->true;(member([_,_,Lang,_],Entry3)->true;(concat_list(["Error: Language: ",Lang," not in listprologinterpreter/languages folder."],Notification1),writeln(Notification1),abort))),retractall(lang_db(_)), assertz(lang_db(Entry3)),!.
delete_newlines_after_text([],A,A) :- !.
detect_data(Grid) :-member([_X,_Y,_Z,M],Grid),member(1,M).
directory_files_sh(F1,B) :- (absolute_url(F1)-> F1=F2; (working_directory_sh(F11,F11), string_concat_url(F11,F1,F2))),split_string(F2,":",":",F),append([G],[H],F),string_concat(K,K1,H),string_length(K,2),(K1=""->K11="./";K11=K1),foldr(string_concat,["main_tmp :- catch((directory_files('",K11,"',A),term_to_atom(A,A1),write(A1)),Err,handle_error(Err)),halt.\nmain_tmp :- halt(1).\nhandle_error(_Err):-\n  halt(1)."],S1),foldr(string_concat,[G,":~/tmp54837.pl"],P1),save_file_sh(P1,S1),foldr(string_concat,["ssh ",G," swipl --goal=main_tmp --stand_alone=true -o tmp54837 -c tmp54837.pl"],S2),(catch(shell1_s(S2),_,fail)->(foldr(string_concat,["ssh ",G," ./tmp54837"],S),(catch(shell1_s(S,Out),_,fail)->(term_to_atom(B%Out1,Out),foldr(string_concat,["ssh ",G," rm tmp54837.pl\nssh ",G," rm tmp54837"],S3),shell1_s(S3));(writeln("directory_files_sh aborted."),abort)));(writeln("directory_files_sh aborted."),abort)),!.exists_file_s(F1) :- atom_string(F2,F1), exists_file(F2),!.
duplicate([],Grammar,Grammar) :- !.
duplicate([],Grammar,Grammar) :- !.duplicate(Grammar1,Grammar2,Grammar3) :-Grammar1=[Grammar4|Grammar5],append(Grammar2,[[Grammar4,Grammar4]],Grammar6),duplicate(Grammar5,Grammar6,Grammar3).
e4_fa_val1emptyorvalsequal(_Empty,_Value) :- true, !.
expand_topic11(B,ET1) :-string_chars(B,B1),findall(B2,(member(B3,B1),atom_string(B3,B2)),B4),expand_topic2(B4,[],ET11),foldr(string_concat,ET11,ET13),%findall(ET1,(member(ET12,ET13),paraphraser([string,ET13],%ET1)),ET),(ET13=ET->ET1="";ET1=ET),!.
expand_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2|Data3]|Data41],not([Data2|Data3]=[T,_]),expand_types1(Data2,[],Types3),expand_types1(Data3,Types3,Types4),Types5=Types4,findall(Types61,(member(Data4,Data41),expand_types1(Data4,[],Types61)),Types62),foldr(append,Types62,Types6),append_list3([Types1,Types5,Types6],Types2),!.
exposition2(Item1,ML_db,String3,String3a,String5a,String5):-(concat_list(["What is the paragraph number of the quote about the paragraph topic \"",Item1,"\"? "],String2),get_number(String2,String3),concat_list(["What is the sentence number of the quote about the paragraph topic \"",Item1,"\"? "],String2a),get_number(String2a,String3a),member1a([String3,String3a,String3aa],ML_db),concat_list(["What is the paraphrased quote about the paragraph topic \"",Item1,"\"? "],String4a),get_string(String4a,positive,one,"",String3aa,String5a),concat_list(["How does the quote you entered (\"",String5a,"\") relate to the paragraph topic \"",Item1,"\"? "],String4),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),get_string(String4,positive,two,Item1a,String3aa,String5))->true;exposition2(Item1,ML_db,String3,String3a,String5a,String5).
exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5):-(%%concat_list(["What is the paragraph number of the quote about the paragraph topic ",Item1,"? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote about the paragraph topic ",Item1,"? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote about the paragraph topic ",Item1,"? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),%%choose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),%%trace,writeln(here1),split_string(Item1,"<","<",[Item01|_]),%%trace,choose(N_page_ref,String00a1,String00a2,_String00a3,_String00a4,String00a5),end_note_number(End_note_number),add_1_to_end_note_number,concat_list(["I agree with ",Item01," because ",String00a5,"<sup>",End_note_number,"</sup>."%%" (",String00a2,", p. ",N_page_ref,")."],String5a),reference(String00a1,String00a2,N_page_ref,End_note_number),%%concat_list(["How does the quote you entered (",String5a,") relate to the paragraph topic ",Item1,"? "],String4),%%trace,%%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%%downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),%%get_string(String4,either,one-not-ml,Item1a,String3aa,String5)%%choose_sentence_range(String00,N_page_ref1,String00a11,String00a21,_String00a31,String00a41),split_string(Item1,"<","<",[Item01|_]),choose(N_page_ref1,String00a11,String00a21,_String00a31,_String00a41,String00a51),end_note_number(End_note_number1),add_1_to_end_note_number,concat_list(["I agree with ",Item01," because \"",String00a51,"\"", %%(",String00a21,"<sup>",End_note_number1,"</sup>."%%", p. ",N_page_ref1,")."],String5),reference(String00a11,String00a21,N_page_ref1,End_note_number1))->true;exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5).
exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5):-(%%concat_list(["What is the paragraph number of the quote about the paragraph topic ",Item1,"? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote about the paragraph topic ",Item1,"? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote about the paragraph topic ",Item1,"? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),%%choose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),choose(N_page_ref,String00a1,String00a2,_String00a3,_String00a4,String00a5),concat_list([Item1," is because ",String00a5," (",String00a2,", p. ",N_page_ref,")."],String5a),reference(String00a1),%%concat_list(["How does the quote you entered (",String5a,") relate to the paragraph topic ",Item1,"? "],String4),%%trace,%%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%%downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),%%get_string(String4,either,one-not-ml,Item1a,String3aa,String5)%%choose_sentence_range(String00,N_page_ref1,String00a11,String00a21,_String00a31,String00a41),choose(N_page_ref1,String00a11,String00a21,_String00a31,_String00a41,String00a51),concat_list([Item1," is because \"",String00a51,"\" (",String00a21,", p. ",N_page_ref1,")."],String5),reference(String00a11))->true;exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5).
exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5):-(%%concat_list(["What is the paragraph number of the quote about the paragraph topic ",Item1,"? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote about the paragraph topic ",Item1,"? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote about the paragraph topic ",Item1,"? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),choose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),choose(String00a4,String00a5),concat_list([Item1," is because ",String00a5," (",String00a2,", p. ",N_page_ref,")."],String5a),reference(String00a1),%%concat_list(["How does the quote you entered (",String5a,") relate to the paragraph topic ",Item1,"? "],String4),%%trace,%%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%%downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),%%get_string(String4,either,one-not-ml,Item1a,String3aa,String5)choose_sentence_range(String00,N_page_ref1,String00a11,String00a21,_String00a31,String00a41),choose(String00a41,String00a51),concat_list([Item1," is because ",String00a51," (",String00a21,", p. ",N_page_ref1,")."],String5),reference(String00a11))->true;exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5).
exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5):-(%%concat_list(["What is the paragraph number of the quote about the paragraph topic ",Item1,"? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote about the paragraph topic ",Item1,"? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),%%concat_list(["What is the paraphrased quote about the paragraph topic ",Item1,"? "],String4a),%%get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),choose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),choose(String00a4,String00a5),concat_list([Item1," is because ",String00a5," (",String00a2,", p. ",N_page_ref,")."],String5a),reference(String00a1),%%concat_list(["How does the quote you entered (",String5a,") relate to the paragraph topic ",Item1,"? "],String4),%%trace,%%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%%downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),%%get_string(String4,either,one-not-ml,Item1a,String3aa,String5)choose_sentence_range(String00,N_page_ref1,String00a11,String00a21,_String00a31,String00a41),choose(String00a41,String00a51),concat_list([Item1," is because ",String00a51," (",String00a21,", p. ",N_page_ref1,")."],String5),reference(String00a11))->true;exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5).%% Agree or disagreecritique(String00,String01,Reasons_per_paragraph,Numbers,ML_db,Critique1) :-length(List1,5), %% 5->1 paragraphs per critiqueappend(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),retractall(critique3(_)),assertz(critique3([])),findall([Number2a,Critique2],(%% Reason 1member(Number2a,List1),%%List1=[Number2a|List1a],List2=[Number3a|List2a],%%trace,critique_reason1(String00,String01,Number2a,Number3a,Reasons_per_paragraph,ML_db,Critique3,Topic_paragraph_link),critique_reasons_2_to_n(String00,Number2a,List2a,Critique3,Reasons_per_paragraph,ML_db,Critique4),append_list2([[Topic_paragraph_link],Critique3,Critique4],Critique2)),Critique1).
file0(N) --> "[", file(N), "]", !.
file0(N) --> "[", file(N), "]", !.file0([]) --> [].
file0(N) --> "[", file(N), "]", !.file0([]) --> [].%%file([]) --> [].file([L|Ls]) --> entry(L),",",%%{writeln(L)}, %%***file(Ls), !. %% file(Ls),{M=[Ls]})), !. %%, {writeln(["l",L])},",", file(Ls), {writeln(["ls",Ls])},!. %%, {append(L,Ls,M)}, !.file([L]) --> entry(L), %%{writeln(L)},!. %%(entry(L),{M=L});{M=[],(writeln("Warning - Entry in incorrect format.")%%,abort%%)}, !.
file0(N) --> "[", file(N), "]", !.file0([]) --> [].%%file([]) --> [].file([L|Ls]) --> entry(L),",",%{writeln(L)}, %%***file(Ls), !. %% file(Ls),{M=[Ls]})), !. %%, {writeln(["l",L])},",", file(Ls), {writeln(["ls",Ls])},!. %%, {append(L,Ls,M)}, !.file([L]) --> entry(L), %%{writeln(L)},!. %%(entry(L),{M=L});{M=[],(writeln("Warning - Entry in incorrect format.")%%,abort%%)}, !.
file0t(N) --> "[", filet(N), "]", !.
file0t(N) --> "[", filet(N), "]", !.file0t([]) --> [].
find_between_possibilities(A,Before1,After1,B) :-findall([L,B1],(member(Before,Before1),member(After,After1),find_between(A,Before,After,B1),length(B1,L)),B2),sort(B2,B3), % shortest poss, reverse for longestB3=[[_,B1]|_],foldr(string_concat,B1,B),!.
find_calls1(_,[],Program,Program) :- !.
find_calls1(_,[],Program,Program) :- !.find_calls1(Program0,Program1,Program2,Program3) :-Program1=[[_Program4a,Program4]|Program5],%% The first predicate in Program4 only is needed to find the calls x(findall(Program7a,(((member([[n,PredicateName],Arguments,":-",Program6],Program4)->true;((member([[n,PredicateName],Arguments],Program4),Program6=[])->true;Program4=[[n,PredicateName],Arguments,":-",Program6])),length(Arguments,ArgumentsLength),Item=[[n,PredicateName],ArgumentsLength],(member(Item,Program0)->Program6=Program6a;Program6a=[])%%->true;%%Item=Program0),(find_calls2(Program6a,[],Program7a))),[Program7])),%%append(Program2,Program7,Program8),%%append(Program0,Program7,Program01));%%(Program8=Program2,Program01=Program0)),append(Program2,Program7,Program8),append(Program0,Program7,Program01),find_calls1(Program01,Program5,Program8,Program3).
find_calls2([],Program,Program) :- !.
find_distances(_Point,[],Distances,Distances) :- !.find_distances(Point1,Points1,Distances1,Distances2) :-Points1=[Point2|Points2],Point1=[_,X1,Y1,_],Point2=[_,X2,Y2,_],Distance is sqrt(((Y2-Y1)^2)+((X2-X1)^2)),append(Distances1,[[Distance,X2,Y2,_]],Distances3),find_distances(Point1,Points2,Distances3,Distances2).find_closest_point(Point1,Distances1,Point2) :-sort(Distances1,Distances2),Distances2=[[Distance,X1,Y1,_]|_],%%->true;[Distance,X1,Y1]=[0,0,0]),Point1=[_,X11,Y11,_],DX is X1-X11,DY is Y1-Y11,abs(DX,X2),abs(DY,Y2),%% find angle to closest pointTheta1 is (180/(22/7))*atan(Y2/(X2+0.00000000001)),theta_for_quadrant(DX,DY,Theta1,Theta2), %% 0 degrees is due eastPoint2=[Distance,X1,Y1,Theta2].
find_end_notes([],R,R) :- !.find_end_notes(R1,R2,R3) :-R1=[[String2r3,Ref1,Page_num,End_note_number]|Rest],(R2=[]->String2r31="";find_last(R2,[[String2r31,_Ref11,Page_num1,_End_note_number1],_])),((String2r3=String2r31)->(Page_num=Page_num1->append(R2,[[[String2r3,Ref1,Page_num,End_note_number],[End_note_number,". Ibid.","\n"]]],R5);append(R2,[[[String2r3,Ref1,Page_num,End_note_number],[End_note_number,". Ibid., p. ",Page_num1,".","\n"]]],R5));(member([[String2r3,_Ref12,_Page_num2,_End_note_number2],_],R2)->append(R2,[[[String2r3,Ref1,Page_num,End_note_number],[End_note_number,". ",Ref1,", p. ",Page_num,".","\n"]]],R5);%%(String2r31=""->R2=R5;append(R2,[[[String2r3,Ref1,Page_num,End_note_number],[End_note_number,". ",String2r3,", p. ",Page_num,".","\n"]]],R5))),%%),find_end_notes(Rest,R5,R3).
find_first_number(S,N) :-(is_list(S)->term_to_atom(S,A0);S=A0),downcase_atom(A0,A2),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",split_string1b(A2,SepandPad,SepandPad,B),findall([B2," "],member(B2,B),B3),flatten(B3,B4),append(B5,[_],B4),find_first((member(N1,B5),catch(number_string(N,N1),_,false)->true;false)),!.
find_first_point(Point1,Points1,Point2,Points3) :-traverse_points(Point1,Points1,Point2,Points3).
find_pos("right",v,_) :- !.
find_row_sums(_A21,Instances1b,Instances1c) :-% divide into variables, valuesfindall(X,(member(X,Instances1b),X=[_Address, [var,_T3,_R3,_C3,_IN3,_V3,VN3,_TP3,_RP3,_CP3,_INP3]],VN3=[]),Values_only),%subtract(Instances1b,Values_only,Poss_variables),%findall(XX,(member([var,T3,R3,C3,IN3|_],Values_only),member([function,R1,C1,FEC,F2],A21)%)))%sub_term_wa([function,R1,C1,FEC,F2], A21, Instances1),%*%* Get indices of inst1b that are valslength(Instances1b,Instances1bL),numbers(Instances1bL,1,[],Instances1bNs),findall(Instances1bN,(member(Instances1bN,Instances1bNs),get_item_n(Instances1b,Instances1bN,X1),member(X1,Values_only)),Value_indices),%length(Values_only,L),%trace,ff_rows2(Instances1b,Instances1c,Value_indices%Poss_variables,Poss_variables_f,Values_only,Values_only_f,1,L),%append(Poss_variables_f,Values_only_f,Instances1c),%foldr(put_sub_term_wa_ae,Poss_variables_f1,Poss_variables,Poss_variables_f), % X21 is trci for prev item's number%foldr(put_sub_term_wa_ae,Poss_variables_f1,Poss_variables,Poss_variables_f) % X21 is trci for prev item's number!.
find_row_sums(_A21,Instances1b,Instances1c) :-% divide into variables, valuesfindall(X,(member(X,Instances1b),X=[_Address, [var,_T3,_R3,_C3,_IN3,_V3,VN3,_TP3,_RP3,_CP3,_INP3]],VN3=[]),Values_only),%subtract(Instances1b,Values_only,Poss_variables),%findall(XX,(member([var,T3,R3,C3,IN3|_],Values_only),member([function,R1,C1,FEC,F2],A21)%)))%sub_term_wa([function,R1,C1,FEC,F2], A21, Instances1),%*%* Get indices of inst1b that are valslength(Instances1b,Instances1bL),numbers(Instances1bL,1,[],Instances1bNs),findall(Instances1bN,(member(Instances1bN,Instances1bNs),get_item_n(Instances1b,Instances1bN,X1),member(X1,Values_only)),Value_indices),%length(Values_only,L),%trace,ff_rows2(Instances1b,Instances1c,Value_indices%Poss_variables,Poss_variables_f,Values_only,Values_only_f,1,L),%append(Poss_variables_f,Values_only_f,Instances1c),%foldr(put_sub_term_wa_ae,Poss_variables_f1,Poss_variables,Poss_variables_f), % X21 is trci for prev item's number%foldr(put_sub_term_wa_ae,Poss_variables_f1,Poss_variables,Poss_variables_f) % X21 is trci for prev item's number!.
find_rule_name(RuleName0,RuleName2) :-RuleName0=[_,RuleName1],RuleName2=RuleName1.
find_sep_n(L13,L161 %X2 ) :-%trace,%writeln(find_sep_n(L13,L161)),%findall(X13,(member(Y1,L13),findall(X11,(member(X12,Y1),(X12=(*)%-N%->X11=_%-N%;X11=X12)),X13)),X14),numbers(12,1,[],Ns),%trace,%findall(X7,(member(X6,L13),(X6=(*)-_->X7=_;X7=X6)),X8),find_first((member(L16,Ns),split1(L13,L16,%0,_, [],X2),%findall(X13,(member(Y1,X2),findall(X11,(member(X12,Y1),(X12=(*)-N->X11=_-N;X11=X12)),X13)),X14),(X2=[]->L161=1;(append(X3,[_],X2),maplist(=(_), X3),X3=[X4|_], length(X4,L161)%forall(member(X5,X3),X5=X4),%findall(Y,member(_-Y,X4),Ys),%foldr(plus,Ys,0,L161))))),!.
find_spaces_before(A,A51,A8) :-string_chars(A,A1),findall(A2,(member(A3,A1),atom_string(A3,A2)),A4),append(A5,A6,A4),append([A7],_A8,A6),not(is_space(A7)),foldr(string_concat,A6,A8),foldr(string_concat,A5,A51),!.
find_state_machine2([],Algorithm,Algorithm,_) :- !.
find_time1(H,M,S) :-find_time(H,M,S),!.
find_time1(H,M,S) :-find_time(H,M,S),!.humour(Threats1,Threats2):-%% "Given that we are interested in friendliness in primary school, secondary school and university, is there anything else?"trialy2_6("Yes",R1),trialy2_6("No",R2),R=[R1,R2/**,R3,R4,R5,R6,R7,R8,R9,R10**,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27**/],sort(R,RA),reverse(RA,RB),RB=[[_,Answer]|_Rest],(Answer="No"->Threats2=Threats1;(Threats3 is Threats1+1,humour(Threats3,Threats2))),!.
find_until(A,B,C) :-append(C,B4,A),append([B],_C4,B4),!.
find_until_passes(A):- (A->true;find_until_passes(A)),!.
find_verbs(Text2a2) :-phrase_from_file_s(string(Text1), "../Text-to-Breasonings/file.txt"),%%phrase_from_file_s(string(Text1), "file.txt"),phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),%%phrase_from_file_s(string(BrDict0), "brdict1.txt"),splitfurther(BrDict0,BrDict01),sort(BrDict01,BrDict012),SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string(Text1,SepandPad,SepandPad,Text2a),delete(Text2a,"",Text222),findall(Text2a1,(member(Text2a1,Text222),member([Text2a1,"right"],BrDict012)),Text2a2).
findbest(R,R) :-!.
findbest(R,R) :-!.findbest2(R,Item):-sort(R,RA),reverse(RA,RB),RB=[[_,Item]|_Rest].
generate_points(Number_of_points,Points1) :-numbers(Number_of_points,1,[],Numbers),findall([_,X2,Y2,_],(member(_Number1,Numbers),random(X1),X2 is round(20*X1),random(Y1),Y2 is round(20*Y1)),Points1).
get(A,B,CP_Vars1) :-member([A,B],CP_Vars1),!./*[debug]  ?- trace,                                                              delete_cp([[1,2,a],[2,3,b],[3,4,c]],[1,2,a],A,                                  [[curr_cp_index,4],[min_cp,1],[max_cp,4],[curr_cp,3]],V).
get(States,State,Line,States3) :-member(State2,States),State2=[State,Line,States3].
get_lang_word(I,O) :-(not(lang(OL))->(OL="en");lang(OL)),get_lang_word3(I,"en",OL,O),!.
get_lang_word3(Input,From_lang,To_lang,Output) :-%% error if word not foundnot(From_lang="en"),not(To_lang="en"),%lang(To_lang),%lang_db(Lang_db),(not(lang_db(Lang_db))->(load_lang_db,lang_db(Lang_db));lang_db(Lang_db)),%((From_lang="en",To_lang="en")->%Input=Output1,%atom_string(Output,Input);%((%(%((Input="member2"->trace;true),split_on_number(Input,Input1,Input10),((member([Input2,_Input101,From_lang,Input1],Lang_db),member([Input2,_Input102,To_lang,Output2],Lang_db),%notrace,(Input10="" -> Output=Output2;concat_list([Output2," ",Input10],Output)))->true;(translate4(Input1,From_lang,To_lang,Output2),(Input10="" -> Output=Output2;concat_list([Output2," ",Input10],Output)))), %-> true;%concat_list(["Error: Word: ",Input," not in Language: ",Lang," in lang_db."],_Notification1),%writeln(Notification1),%fail%)))),%Output=Output1,!.
get_lang_word3(Input0,From_lang,To_lang,Output) :-From_lang="en",not(To_lang="en"),%(To_lang="en2"->Epsilon=" ";Epsilon=" "),Epsilon=" ",%lang_db(Lang_db),(not(lang_db(Lang_db))->(load_lang_db,lang_db(Lang_db));lang_db(Lang_db)),replace(Input0,"_"," ",Input),%(atom(Input)->true;(number(Input))->true;fail),split_on_number(Input,Input1,Input10),((member([Input1,_Input102,To_lang,Output2],Lang_db),%notrace,(Input10="" -> Output=Output2;concat_list([Output2,Epsilon,Input10],Output)))->true;(translate4(Input1,From_lang,To_lang,Output2),(Input10="" -> Output=Output2;concat_list([Output2,Epsilon,Input10],Output)))),%atom_string(Input,Output),!.
get_last_cp_before_n(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars1) :-%writeln1("y for trace:"),(get_char(y)->trace;true),%get(curr_cp,Curr_cp,CP_Vars1),%writeln([curr_cp,Curr_cp]),(debug4(on)->writeln1(get_last_cp_before_n2(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars1));true),(get_last_cp_before_n2(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars1)->true;false%(writeln([get_last_p_before_n2,abort]),abort)),%writeln1(get_last_p_before_n2(List1,Cp1,Cp2,Cp3)),%get(curr_cp,Curr_cp1,CP_Vars1),%writeln([curr_cp,Curr_cp1]),(debug4(on)->writeln0([get_last_cp_before_n,Cp2,CP_Vars1,CP_Vars1]);true).
get_map_dimensions(Map) :- %,X3,Y3,Z3) :-findall(X,member([_Z1,X,_Y1,_],Map),X1),sort(X1,X2),reverse(X2,[X3|_]),findall(Y,member([_Z2,_X1,Y,_],Map),Y1),sort(Y1,Y2),reverse(Y2,[Y3|_]),findall(Z,member([Z,_X2,_Y2,_],Map),Z1),sort(Z1,Z2),reverse(Z2,[Z3|_]),retractall(map_dimensions(_)),assertz(map_dimensions([X3,Y3,Z3])).
get_map_dimensions2d(Map) :- %,X3,Y3,Z3) :-findall(X,member([X,_Y1,_],Map),X1),sort(X1,X2),reverse(X2,[X3|_]),findall(Y,member([_X1,Y,_],Map),Y1),sort(Y1,Y2),reverse(Y2,[Y3|_]),retractall(map_dimensions(_)),assertz(map_dimensions([X3,Y3])).
get_models(Models1) :-Folder="models",foldr(string_concat,[Folder,"/"],Path),directory_files(Path,F),delete_invisibles_etc(F,G),findall([Ad2,Q2,A2],(member(Filex1,G),string_concat(Path,Filex1,Filex),open_file_s(Filex,Data),[Ad2,Q2,A2]=Data),Models1),!.
get_models(Models1) :-Folder="models",foldr(string_concat,[Folder,"/"],Path),directory_files(Path,F),delete_invisibles_etc(F,G),findall([Ad2,Q2,A2],(member(Filex1,G),string_concat(Path,Filex1,Filex),open_file_s(Filex,Data),member([Ad2,Q2,A2],Data)),Models1),!.split2(Data,Pre_info,Question,Question_table) :-split_string1b(Data,"\n\r","\n\r",D1),% qs at start or end - if end, pre info is part of adpre_info(D1,Pre_info,Rest),% qs identified by prepare, required x, a., calculatesubtract(Rest,["Required","required"],Rest1),question(Rest1,Question,Question_table),/*,append(B,C,D1),append([[]],E,C),append([Ad],T1,D1),findall([T2,"\n"],member(T2,T1),T3),flatten(T3,T4),foldr(string_concat,T4,Q),*/!.
get_next(Curr1,Next) :-reverse(Curr1,Curr2),Curr2=[N1|Rest],N2 is N1+1,Curr3=[N2|Rest],reverse(Curr3,Next).
get_prev(Curr1,Next) :-reverse(Curr1,Curr2),Curr2=[N1|Rest],N2 is N1-1,Curr3=[N2|Rest],reverse(Curr3,Next).
getvalue_equals41(Variable,Value,Vars) :-get_lang_word("v",Dbw_v),remember_and_turn_off_debug(Debug),find_sys(Sys_name),        ((interpretpart(match4,Variable,[Dbw_v,Sys_name],Vars,Vars3,_),getvalue([Dbw_v,Sys_name],Value,Vars3))->true;(turn_back_debug(Debug),fail)),turn_back_debug(Debug).
getvalue_match_pipe([],[],_Vars1) :- !.
grammar_logic_to_alg1 :-grammar_logic_to_alg11([Sentence1,List_a,List_a1,List_b1,List_bb,List_bb1,Cs1,Cs2]),writeln1([*,Sentence1,a_alg(List_a)]),writeln(List_a1),writeln1([*,Sentence1,b_alg(List_a)]),writeln(List_b1),writeln1([*,Sentence1,bb_alg(List_bb)]),writeln(List_bb1),writeln1(Cs1),writeln1(Cs2).
grammar_logic_to_alg1(String1,N,Result) :-%term_to_atom(String,Essay_01),%string_atom(Essay_02,Essay_01),%working_directory(_, '../'),%(open_s("../Text-to-Breasonings/file.txt",write,Stream1),%write(Stream1,String),%close(Stream1)),!,truncate1(string,String1,N,String),%working_directory(_, 'algwriter/'),grammar_logic_to_alg114(String,Result).
grid(Scale,Grid) :- background(Scale,Grid).
grid([[1,9,[     ]],[2,9,[     ]],[3,9,[     ]],[4,9,[     ]],[5,9,[     ]], [1,8,[     ]],[2,8,[     ]],[3,8,[     ]],[4,8,[     ]],[5,8,[     ]], [1,7,[     ]],[2,7,[     ]],[3,7,[     ]],[4,7,[     ]],[5,7,[     ]], [1,6,[     ]],[2,6,[     ]],[3,6,[     ]],[4,6,[     ]],[5,6,[     ]], [1,5,[     ]],[2,5,[     ]],[3,5,[     ]],[4,5,[     ]],[5,5,[     ]], [1,4,[     ]],[2,4,[     ]],[3,4,[     ]],[4,4,[     ]],[5,4,[     ]], [1,3,[     ]],[2,3,[     ]],[3,3,[     ]],[4,3,[     ]],[5,3,[     ]], [1,2,[     ]],[2,2,[     ]],[3,2,[     ]],[4,2,[     ]],[5,2,[     ]], [1,1,[     ]],[2,1,[     ]],[3,1,[     ]],[4,1,[     ]],[5,1,[     ]]]).ctobr(C1) :-C1=' ',writeln(C1),characterbr(Cs),member([C1,C1Name,C2],Cs),writeln(C1Name),writeln(''), y(Y), prettyprint1(C2,Y),writeln(''), prettyprint1A(C2,Y),!. %% 2ctobr(C1) :-writeln(C1),characterbr(Cs),member([C1,C1Name,C2],Cs),writeln(C1Name),writeln(''),/**Grid1=[[1,1,[    ]],[2,1,[    ]]],**[[1,3,[    ]],[2,3,[    ]],[3,3,[    ]],[1,2,[    ]],[2,2,[    ]],[3,2,[    ]],[1,1,[    ]],[2,1,[    ]],[3,1,[    ]]],**%%[[1,1,[     ]]],**/grid(Grid1), member([X1,Y1,M1],C2), N2=1, Stroke1=0, %% States:[[this,state],Line:[[any,state,to,this,state],[true,or,false]],State:[[this,state,to,a,state],states]] States= [ [[1,s],false,[[1,s],[1,-]]], [[1,-],false,[[3,s],[2,-]]], %%[[2,s],false,[[2,s],[3,-]]], [[2,-],true,[[3,s],[2,-]]], [[3,s],true,[[1,s],[1,-]]] %%[[3,-],false,[[3,s],[2,-]]] ],M1=[N2|_Ms],(changegrid2(_Prevstate,[1,s],Grid1,Grid2,X1,Y1,C2,_C4,N2,Stroke1,States);changegrid2(_Prevstate,[1,-],Grid1,Grid2,X1,Y1,C2,_C4,N2,Stroke1,States)), y(Y), prettyprint1(Grid2,Y),writeln(''), prettyprint1A(Grid2,Y),!. %% 2prettyprint1(_C,0) :- !.
group_by_table_cols(Instances1a,Instances1b) :-findall(T3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),T3s),sort(T3s,T3s1),findall(C3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),C31),sort(C31,C5),/*findall(IN3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),IN31),sort(IN31,IN35),*/findall(X,(member(T31,T3s1),member(C51,C5),%member(IN36,IN35),findall(X1,(member(X1,Instances1a),X1=[Address, [var,T31,R3,C51,_IN36,V3,VN,TP3,RP3,CP3,INP3]]),X)),Instances1b),!.
harmony1(_Form,_CPT,[],Harmony,Harmony) :- !.
harmony1(_Form,_CPT,[],Harmony,Harmony) :- !.harmony1(Form,CPT,Progression1,Harmony1,Harmony2) :-Progression1=[Note1|Progression2],(CPT='1451'->(harmony1451(Note1,2,Note2),harmony1451(Note1,4,Note3));(harmonyr(Note1,4,Note2),harmonyr(Note1,7,Note3))),Harmony30=[Note2,Note3],findall(B1,(member(A1,Harmony30),string_concat(B,_C,A1),string_length(B,1),atom_string(B1,B)),Harmony31),append([Note1],Harmony31,Harmony3),append(Harmony1,[[Form,Harmony3]],Harmony4),harmony1(Form,CPT,Progression2,Harmony4,Harmony2),!.
harmony1451(Note1,Value2,Note2) :-note(Value1,Note1),Value3 is Value1+Value2,Value4 is Value3 mod 12,note(Value4,Note2).
instrumentlist(NumberofInstruments,Instruments) :-instrumentlist(NumberofInstruments,[],Instruments),!.
instrumentlist(NumberofInstruments,Instruments) :-instrumentlist(NumberofInstruments,[],Instruments),!.instrumentlist(0,Instruments,Instruments) :- !.
international_interpret([lang,Lang],Debug,Query,TypeStatements,ModeStatements,Functions1,Result) :-retractall(lang(_)), assertz(lang(Lang)),interpret(Debug,Query,TypeStatements,ModeStatements,Functions1,Result).
international_interpret([lang,Lang],Debug,Query,TypeStatements,ModeStatements,Functions1,Result) :-retractall(lang(_)), assertz(lang(Lang)),interpret_1(Debug,Query,TypeStatements,ModeStatements,Functions1,Result).
international_lucianpl([lang,Lang],Debug,Query,TypeStatements,ModeStatements,Functions1,Result) :-retractall(lang(_)), assertz(lang(Lang)),lucianpl_1(Debug,Query,TypeStatements,ModeStatements,Functions1,Result).
international_lucianpl1([lang,Lang],Debug,Query,TypeStatements,ModeStatements,Functions1,Result) :-retractall(lang(_)), assertz(lang(Lang)),lucianpl1_1(Debug,Query,TypeStatements,ModeStatements,Functions1,Result).
interpretstatement1(_F0,_Functions,[+,[Variable2,Variable3,Variable1]],Vars1,Vars2,true,nocut) :-%%writeln(4),        interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[+,[Variable2,Variable3,Variable1]],Vars1,Vars2,true,nocut) :-%%writeln(4),        interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2).%%interpretstatement1(_F0,_Functions,[Variable2+Variable3,is,Variable1],Vars1,Vars2,true,nocut) :-%%writeln(41),        %%interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,+],[Variable2,Variable3,Variable1]],Vars1,Vars2,true,nocut) :-%%writeln(4),        interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatementlp2c1(Statement,Algorithm1,Algorithm2) :-Statement=[[N_or_v,Name]],(N_or_v=n;N_or_v=v),interpretstatementlp2c2a([N_or_v,Name],Algorithm1,Algorithm2),!.
interpretstatementlp2p1(Statement,Algorithm1,Algorithm2) :-Statement=[[N_or_v,Name]],(N_or_v=n;N_or_v=v),interpretstatementlp2p2a([N_or_v,Name],Algorithm1,Algorithm2,"[]"),!.
is_var_s2a(Item) :-atom(Item),atom_concat(It,Em,Item),atom_length(It,1),is_upper(It),atom_string(Em,Em1),number_string(_N,Em1).
labelall([],_Range,_ListItemNumber,_Position,Labels,Labels).
lang_db_generator(List_of_words,Target_language1) :-load_lang_db1(Entry3),%%(not(member([_,Target_language1,_],Entry3))->(string(List_of_words)->(findall([Word1,Word2],(member([Word1,Word2,List_of_words,_],Entry3)),List_of_words2),List_of_words3=[]);(findall([Word1,Word2,List_of_words,Item_a],(member([Word1,Word2,List_of_words,Item_a],Entry3)),List_of_words3), %%** testfindall(_,(member([Word,Word2],List_of_words),(string(Word),string(Word2))->true;(concat_list(["Error: Word1: ",Word," or Word2: ",Word2," in list of words not in format [\"<Word1>\",\"<Word2>\"]."],Notification1),writeln(Notification1),abort)),_)),List_of_words=List_of_words2),%% list of langs to put words intofindall(_,(member(Target_language10,Target_language1),(string(Target_language10)->true;(concat_list(["Error: Target_language1: ",Target_language1," not in format \"<Target_language1>\"."],Notification1),writeln(Notification1),abort)),%split_on_number(Target_language10,Target_language101,_),%trace,findall([Input,Input1,Target_language10,Output3],(member([Input,Input1],List_of_words2),(Target_language10="en2"->Output3=Input1;translate(Input1,"en",Target_language10,Output3))),Output4),%% save file%% ** add to prev file%% ** keep metaphorical translations (x bt xx with simplified ctt (no bt-trans dict) and customised output)%% numbers after command names%%- check words on google translate, ctt speeds btappend(List_of_words3,Output4,Output4a), %% ** testconcat_list(["../listprologinterpreter/languages/",Target_language10,".txt"],File1),term_to_atom(Output4a,File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream)),_).
lang_db_generator(List_of_words,Target_language1) :-load_lang_db1(Entry3),%%(not(member([_,Target_language1,_],Entry3))->(string(List_of_words)->(findall([Word1,Word2],(member([Word1,Word2,List_of_words,_],Entry3)),List_of_words2),List_of_words3=[]);(findall([Word1,Word2,List_of_words,Item_a],(member([Word1,Word2,List_of_words,Item_a],Entry3)),List_of_words3), %%** testfindall(_,(member([Word,Word2],List_of_words),(string(Word),string(Word2))->true;(concat_list(["Error: Word1: ",Word," or Word2: ",Word2," in list of words not in format [\"<Word1>\",\"<Word2>\"]."],_Notification1)%,writeln(Notification1),fail)),_)),List_of_words=List_of_words2),%% list of langs to put words intofindall(_,(member(Target_language10,Target_language1),(string(Target_language10)->true;(concat_list(["Error: Target_language1: ",Target_language1," not in format \"<Target_language1>\"."],_Notification11)%,writeln(Notification1),fail)),findall([Input,Input1,Target_language10,Output3],(member([Input,Input1],List_of_words2),translate4(Input1,"en",Target_language10,Output3)),Output4),%% save file%% ** add to prev file%% ** keep metaphorical translations (x bt xx with simplified ctt (no bt-trans dict) and customised output)%% numbers after command names%%- check words on google translate, ctt speeds btappend(List_of_words3,Output4,Output4a), %% ** testconcat_list(["../listprologinterpreter/languages/",Target_language10,".txt"],File1),term_to_atom(Output4a,File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream)),_).
length(X1,X2,D) :-D is X2-X1.
lfl2html2(Term,HTML) :-lfl2html_codes(Tag,Open_tag,Close_tag),(Term=[Tag|String]->(lfl2html2(String,HTML3),(is_list(HTML3)->concat_list(HTML3,HTML2);HTML2=HTML3),%trace,concat_list([Open_tag,HTML2,Close_tag],HTML))).
lfl2html2([],[]).
lfl2html_codes([html],"<html>","</html>").
longtoshortform(Section1,Section2) :-string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),!.
loop(Algorithm1,Algorithm2) :-write("L:"),read_string(user_input, "\n", "\r", _, Input),%catch((p2lpconverter([string,Input],Input1)->true;%_,%(catch((%trace,string_concat("a:-",Input,Input2),p2lpconverter([string,Input2],Input3),Input3=[[[n,a],":-",Input1]])),%_,%(writeln("Error."),%loop(Algorithm1,Algorithm2),(Input1=[[[n, trace]]]->(retractall(lp_trace(_)),assertz(lp_trace(on)),loop(Algorithm1,Algorithm2));(%Input="notrace."->Input1=[[[n, notrace]]]->(retractall(lp_trace(_)),assertz(lp_trace(off)),loop(Algorithm1,Algorithm2));/*(Input1=[[n, lang], [Lang]]->%Input1=lang(Lang)->(retractall(lp_lang(_)),assertz(lp_lang(Lang)),loop(Algorithm1,Algorithm2));*/(Input1=[[[n, halt]]]->%Input1=lang(Lang)->(true);(%term_to_atom(Input1,Input),%p2lpconverter([string,Input],Input1)Input1=[[[n, load], [File]]]->%Input1=load(File)(p2lpconverter([file,File],Algorithm3),append(Algorithm1,Algorithm3,Algorithm4),loop(Algorithm4,Algorithm2));(%Input=run())lp_trace(Debug),%lp_lang(Lang),%p2lpconverter([string,Input],[Query]),international_interpret([lang,"en"],Debug,Input1,%[],[],% enable for types, modesAlgorithm1,Result2),(Result2=[[]]->writeln("true.");(Result2=[]->writeln("false.");(Result2=[Result1],%trace,findall([V,"=",R,",","\n"],(member([V1,R1],Result1),interpretstatementlp2p3(V1,V),term_to_atom(R1,R)%interpretstatementlp2p2(A,"",[V,R])),C),maplist(append,[C],[D]),append(E1,[",","\n"],D),append(E1,["."],E),concat_list(E,Result),writeln(Result)))),loop(Algorithm1,Algorithm2)))))),!.
lyricsv1(Lyrics0,Lyrics1,Lyrics2) :-readsc(SyllableCount),readv(Verbs1),reado(Objects1),**/%%removetoolongandnotrhyming(Lyrics0,Lyrics1,SyllableCount,Verbs1,Verbs2,Objects1,Objects2),]%%findv%% same for o%%findo%% choose words that fit syllable countappend_list(A,[],A) :-!.
lyricsv1(Lyrics0,Lyrics1,Lyrics2) :-readsc(SyllableCount),readv(Verbs1),reado(Objects1),**/%%removetoolongandnotrhyming(Lyrics0,Lyrics1,SyllableCount,Verbs1,Verbs2,Objects1,Objects2),]%%findv%% same for o%%findo%% choose words that fit syllable countappend_list(A,[],A) :-!.append_list(A,List,B) :-List=[Item|Items],append2(A,[Item],C),append_list(C,Items,B).
make_docs(File_a) :-writeln("Enter target language code for LPI docs:"),read_string(user_input, "\n", "\r", _End2, To_lang),retractall(lang(_)),assertz(lang(To_lang)),load_lang_db,phrase_from_file_s(string(Docs), File_a),string_codes(Docs2,Docs),split_string1(Docs2,["`"],Input1),process1(Input1,To_lang,"",String),concat_list([To_lang,"-",File_a%,".txt"],File),(open_s(File,write,Stream),write(Stream,String),close(Stream)),writeln(String),!.
marks(Threats1,Threats2):-%% "Given that they are not likely to have meant it and that there is nothing wrong, is there anything else that is wrong?"trialy2_6("Yes",R1),trialy2_6("No",R2),R=[R1,R2/**,R3,R4,R5,R6,R7,R8,R9,R10**,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27**/],sort(R,RA),reverse(RA,RB),RB=[[_Prev,Answer]|_Rest],(Answer="No"->Threats2=Threats1;(Threats3 is Threats1+1,marks(Threats3,Threats2))).
match4_10(Variable1,Variable2,Vars1,Vars2) :-%%trace,not(variable_name(Variable1)),is_list(Variable1),%%findall(Value1,(%%interpretpart(match4,Variable1,[v,sys1],Vars1,Vars3,_),%%getvalue([v,sys1],Value1,Vars3)getvalue_match(Variable1,X,Vars1),match4(X,Variable2,Vars1,Vars2).
match4_list([],[],Vars,Vars) :- !.
match4_new_220(Variable1,Variable2,Vars1,Vars6%,Standard_or_e4) :-%trace,match4_new_222(Variable1,Variable2,Vars1,Vars2%,Standard_or_e4),((subtract(Vars1,Vars2,[]),subtract(Vars2,Vars1,[]))->Vars6=Vars2;(get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,find_sys(Sys_name1),match4_new_222(Variable1,[Dbw_v,Sys_name1],Vars2,Vars3%,Standard_or_e4),getvalue([Dbw_v,Sys_name1],Value3,Vars3),match4_new_222(Value3,Variable2,Vars2,Vars4%,Standard_or_e4),find_sys(Sys_name2),match4_new_222(Variable2,[Dbw_v,Sys_name2],Vars4,Vars5%,Standard_or_e4),getvalue([Dbw_v,Sys_name2],Value31,Vars5),match4_new_222(Variable1,Value31,Vars4,Vars7%,Standard_or_e4),match4_new_220(Variable1,Variable2,Vars7,Vars6%,Standard_or_e4)))%,!.
match4_terminal([],[],Vars,Vars) :- !.
match_get_vals(Statement,S1,S2,Vars) :-%variable_name(Statement)->%match_get_val(Statement,Value,Vars),%append(S1,[Value],S2));(Statement=[Statement1|Statement2],(variable_name(Statement1)->(match_get_val(Statement1,Value1,Vars),append(S1,[Value1],S3)); (single_item_or_var(Statement1)-> (Value1=Statement1,append(S1,[Value1],S3));(match_get_vals(Statement1,[],S31,Vars),S3=[S31]))),match_get_vals(Statement2,[],S4,Vars)),foldr(append,[S3,S4],S5),%trace,%S6=[S5],%(S1=[]->S2=S5;foldr(append,[S1,S5],S2),!.match_get_val([_,'_'],undef,_Vars) :- !. match_get_val(Variable,Value,Vars) :- (member([Variable,Value],Vars)->true; Variable=Value),!.
mean(Sum,Mean) :-Mean is Sum/2.
meaning("equals",["is","is calculated to be"]).
melodyharmony([],_CPT,_Parts,N,N,Melody,Melody,Harmony,Harmony) :- !.
member_functions(Rule,Algorithms,Item) :-member(Item,Algorithms),Item=[Rule|_Rest].
midpoint(S,MP) :-length(S,L),A is mod(L,2),(A is 0->(M1 is L/2, M2 is M1+1,N1 is M1-1,N2 is M2-1,length(N11,N1),length(N21,N2),append(N11,[N12|_Rest1],S),append(N21,[N22|_Rest2],S),MP is (N12+N22)/2);(L2 is L+1, M1 is L2/2, N1 is M1-1,length(N11,N1),append(N11,[MP|_Rest],S))).
midpoint(S,MP) :-length(S,L),A is mod(L,2),(A is 0->(M1 is L/2, M2 is M1+1,N1 is M1-1,N2 is M2-1,length(N11,N1),length(N21,N2),append(N11,[N12|_Rest1],S),append(N21,[N22|_Rest2],S),MP is (N12+N22)/2);(L2 is L+1, M1 is L2/2, N1 is M1-1,length(N11,N1),append(N11,[MP|_Rest],S))).halves(S,H1,H2) :-length(S,L),A is mod(L,2),(A is 0->(M1 is L/2,length(H1,M1),append(H1,H2,S));(L2 is L-1,M1 is L2/2,length(H1,M1),append(H1,[_|H2],S))).
mind_read10("",[]) :- !.
mind_read100(Item,List) :-length(List,L),Trials is 3*L,trialy22(List,Trials,[],R1),findbest(R1,Item),!.
mind_read3(N1,_,_,Tree1,Item2,Item1) :-member([N1,Item2,[-,Item1]],Tree1),!.
mindreadtest(Sec) :-%% 250 br for characters to be br out with 10 br each from person to me - do when initial 250 br test done and doing 10 br test%%comment(fiftyastest),%%random(X),X1 is 10*X, X2 is floor(X1), (X2=<2 -> (%%texttobr,writeln(['true test']), %%); %% use breasonings breasoned out by computer for not by me, for job medicine for "me", at last time point%%true), %% leave last time point blank(texttobr2(2)),%% make an A to detect reaction to gracious giving or blame of in followingget_time(TimeStamp1),%%phrase_from_file(string(_String), 'file.txt'),(daysbspeoplearmy(2)), %% test breasonings breasoned out by computer for not by me, for job medicine for "me", at last time point%% is gracious giving or blameget_time(TimeStamp2),%%comment(turnoffas),   Sec is TimeStamp2 - TimeStamp1.
move_down_fd(Ns,Ns1,L0,L2) :-keyboard_input_fd(L0,L,T),T1 is 1-T,sleep(T1),random(1,3,N1),((N1=1,not(Ns=[]))->(append(L3,[_],L),Ns=[N|Ns1],append([N],L3,L2));(append(L3,[_],L),Ns=Ns1,append([" "],L3,L2))),!.
move_vars1(Map, T1, T2_old, Out2) :-    foldr(move_vars_pred(T1), Map, T2_old, Out2).
mv(From,To) :-Mv="rsync -avz --remove-source-files ",concat_list([Mv,From," ",To],Command),shell1_s(Command).
not(mutually_exclusive(A,B) :-intersection(A,B,C),not(C=[]).
number1(XY1,XY12) :-(number(XY1)->XY12=XY1;((XY1=[var,_,_,_,_,XY11,_,_,_,_,_],number(XY11))->XY12=XY11;catch(number_string(XY12,XY1),_,false)))%->true;(number(XY1),XY1=XY11)),!.
only_item1(A) :- (character_breakdown_mode(on)->only_item1_c(A);only_item2_c(A)).
operate2([Operator,_Input_number,Output_number],Inputs,Outputs) :-%length(List,Input_number),findall([Operator,A,B,Outputs1],(member([A,B],Inputs),operate3(Operator,[A,B],Output_number,Outputs1)),Outputs).
operate3(+,[A,B],1,Output) :-Output is A+B.operate3(-,[A,B],1,Output) :-Output is A-B.
operations([[+,2,1],[-,2,1],[*,2,1],[/,2,1]]).% operate1([+,2,1],Outputs).
paraphraser([file,File1],File_list_a) :-(not(catch(auto(_),_,false))->(retractall(auto(_)),assertz(auto(off)));true),%File1="test1.pl",phrase_from_file_s(string(Codes), File1),paraphraser1(Codes,File_list_a),(open_s("file2.txt",write,Stream1),write(Stream1,File_list_a),close(Stream1)),!.
parts2([],_Instrument,Part,Part) :- !.
pft_expand_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2|Data3]|Data41],not([Data2|Data3]=[T,_]),pft_expand_types1(Data2,[],Types3),pft_expand_types1(Data3,Types3,Types4),Types5=Types4,findall(Types61,(member(Data4,Data41),pft_expand_types1(Data4,[],Types61)),Types62),foldr(append,Types62,Types6),append_list3([Types1,Types5,Types6],Types2),!.
population_density(_Number_in_place,Number_visible,Number_visible).
pp4_lp2p3_1(List1,S3) :-List1=[[_N10,Name]],%term_to_atom(List2,List2a),%concat_list([S1,List2a,'\n'],S3)%term_to_atom(Variables1,Variables2),concat_list(['',Name%,'\n'],String),%trace,%pp_lp2p2(Body,'',B1,1),%string_concat(B1,",",B11),concat_list([String%,'\n\n'],S3).
pp4_lp2p3_2(List1,String) :-List1=[[_N10,comment],[Comment]],%term_to_atom(List2,List2a),%concat_list([S1,List2a,'\n'],S3)%interpretstatementlp2p5(Variables,'',Variables2,false),concat_list(['',Comment%,%',',%Symbol1,%'\n'],String),!.pp4_lp2p3_21(List1,String) :-List1=[[_N10,Name],Variables],%term_to_atom(List2,List2a),%concat_list([S1,List2a,'\n'],S3)interpretstatementlp2p5(Variables,'',Variables2,false),concat_list(['',Name,'(',Variables2,')'%,%',',%Symbol1,%'\n'],String).pp4_lp2p3_3(List2,String,B1) :-List2=[[_N1,Name],Variables1,Symbol,Body],symbol_1_lp2p(Symbol,Symbol1),interpretstatementlp2p5(Variables1,'',Variables2,false),concat_list(['',Name,'(',Variables2,')','',Symbol1,'\n'],String),%trace,pp_lp2p2(Body,'',B1,1).%string_concat(B10).
prep(List,BrDict03,BrDict03t,Filex,Stringx1,M) :-phrase_from_file_s(string(BrDict0), "algdict1.txt"),%%Chars="’",SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),%%writeln([brdict1]),string_atom(BrDict0,Atom),atom_to_term(Atom,BrDict01,_),%%splitfurther(BrDict0,BrDict01),%%writeln([brDict01,BrDict01]),%%char_code(Escape,27),%%delete(BrDict01,[Escape,_,_,_,_],BrDict021),%%writeln([brDict021,BrDict021]),%%char_code(Apostrophe,8217),%%delete(BrDict021,[Apostrophe,_,_,_,_],BrDict02),%%writeln([brDict02,BrDict02]),sort(BrDict01,BrDict03),%%writeln([brDict03,BrDict03]),length(BrDict03,Length0),write("Number of words in dictionary: "), writeln(Length0),%%writeln(''),%%writeln([brdict2]),phrase_from_file_s(string(BrDict0t), "algdict2.txt"),%%Chars="’",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),%%splitfurthert(BrDict0t,BrDict01t),string_atom(BrDict0t,Atom2),atom_to_term(Atom2,BrDict01t,_),%%writeln([brDict01,BrDict01]),%%delete(BrDict01t,[Escape,_,_,_,_],BrDict021t),%%writeln([brDict021,BrDict021]),%%delete(BrDict021t,[Apostrophe,_,_,_,_],BrDict02t),%%writeln([brDict02,BrDict02]),sort(BrDict01t,BrDict03t),%%writeln([brDict03,BrDict03]),length(BrDict03t,Length0t),write("Number of unique algorithms in dictionary: "), writeln(Length0t),((Stringx1=u,phrase_from_file_s(string(String00), Filex))->true;String00=Stringx1),split_string(String00,SepandPad,SepandPad,List1),%%split_string_onnonletter(String00,List1),truncate(List1,M,List),/**replace0(String0,[8221, 8220], 34, SepandPad, M, String1),replace0(String1,[8216, 8217], 39, SepandPad, M, String2),replace0(String2,[8259, 8211, 8212], 45, SepandPad, M, String3),replace0(String3,[160], 32, SepandPad, M, List),**/%%atom_codes(Atom999,String),writeln([atom999,Atom999]),%%writeln([list,List]),%%delete(List,Escape,List11),%%writeln([list11,List11]),%%delete(List11,Apostrophe,List1),%%writeln([list1,List1]),length(List,Length1),write("Number of words to breason out algorithms for in file: "), writeln(Length1),sort(List,List2),%%writeln([list2,List2]),length(List2,Length2),write("Number of unique words in file: "), writeln(Length2),((Stringx1=u, %% Use file, not string as input.
prep(List,BrDict03,BrDict03t,Filex,Stringx1,M,Brth,BrthDict03,Room,RoomDict03,PartOfRoom,PartOfRoomDict03,Direction,DirectionDict03,ObjectToPrepare,ObjectToPrepareDict03,ObjectToFinish,ObjectToFinishDict03) :-phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),%phrase_from_file_s(string(BrDict0), "brdict1.txt"),%%Chars="’",SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),%%writeln([brdict1]),splitfurther(BrDict0,BrDict01),%%writeln([brDict01,BrDict01]),%%char_code(Escape,27),%%delete(BrDict01,[Escape,_,_,_,_],BrDict021),%%writeln([brDict021,BrDict021]),%%char_code(Apostrophe,8217),%%delete(BrDict021,[Apostrophe,_,_,_,_],BrDict02),%%writeln([brDict02,BrDict02]),sort(BrDict01,BrDict03),%%writeln([brDict03,BrDict03]),length(BrDict03,Length0),write("Number of words in dictionary: "), writeln(Length0),%%writeln(''),%%writeln([brdict2]),phrase_from_file_s(string(BrDict0t), "algdict3.txt"),%%Chars="’",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),splitfurther(BrDict0t,BrDict01t),%%writeln([brDict01,BrDict01]),%%delete(BrDict01t,[Escape,_,_,_,_],BrDict021t),%%writeln([brDict021,BrDict021]),%%delete(BrDict021t,[Apostrophe,_,_,_,_],BrDict02t),%%writeln([brDict02,BrDict02]),sort(BrDict01t,BrDict03t),%%writeln([brDict03,BrDict03]),length(BrDict03t,Length0t),write("Number of unique algorithms in dictionary: "), writeln(Length0t),((Stringx1=u,phrase_from_file_s(string(String00), Filex))->true;String00=Stringx1),split_string(String00,SepandPad,SepandPad,List1),%%split_string_onnonletter(String00,List1),truncate(List1,M,List),/**replace0(String0,[8221, 8220], 34, SepandPad, M, String1),replace0(String1,[8216, 8217], 39, SepandPad, M, String2),replace0(String2,[8259, 8211, 8212], 45, SepandPad, M, String3),replace0(String3,[160], 32, SepandPad, M, List),**/%%atom_codes(Atom999,String),writeln([atom999,Atom999]),%%writeln([list,List]),%%delete(List,Escape,List11),%%writeln([list11,List11]),%%delete(List11,Apostrophe,List1),%%writeln([list1,List1]),length(List,Length1),write("Number of words to breason out in file: "), writeln(Length1),sort(List,List2),%%writeln([list2,List2]),length(List2,Length2),write("Number of unique words in file: "), writeln(Length2)/*((Brth=true,phrase_from_file_s(string(BrthDict0), "../Text-to-Breasonings/brthdict.txt"),splitfurther(BrthDict0,BrthDict01),sort(BrthDict01,BrthDict03),length(BrthDict03,BrthLength0),write("Number of unique breathsonings in dictionary: "), writeln(BrthLength0))->true;true),((Room=true,phrase_from_file_s(string(RoomDict0), "../Text-to-Breasonings/roomdict.txt"),splitfurther(RoomDict0,RoomDict01),sort(RoomDict01,RoomDict03),length(RoomDict03,RoomLength0),write("Number of unique rooms in dictionary: "), writeln(RoomLength0))->true;true),((PartOfRoom=true,phrase_from_file_s(string(PartOfRoomDict0), "../Text-to-Breasonings/partofroomdict.txt"),splitfurther(PartOfRoomDict0,PartOfRoomDict01),sort(PartOfRoomDict01,PartOfRoomDict03),length(PartOfRoomDict03,PartOfRoomLength0),write("Number of unique parts of rooms in dictionary: "), writeln(PartOfRoomLength0))->true;true),((Direction=true,phrase_from_file_s(string(DirectionDict0), "../Text-to-Breasonings/directiondict.txt"),splitfurther(DirectionDict0,DirectionDict01),sort(DirectionDict01,DirectionDict03),length(DirectionDict03,DirectionLength0),write("Number of unique directions in dictionary: "), writeln(DirectionLength0))->true;true),((ObjectToPrepare=true,phrase_from_file_s(string(ObjectToPrepareDict0), "../Text-to-Breasonings/objecttopreparedict.txt"),splitfurther(ObjectToPrepareDict0,ObjectToPrepareDict01),sort(ObjectToPrepareDict01,ObjectToPrepareDict03),length(ObjectToPrepareDict03,ObjectToPrepareLength0),write("Number of unique objects to prepare in dictionary: "), writeln(ObjectToPrepareLength0))->true;true),((ObjectToFinish=true,phrase_from_file_s(string(ObjectToFinishDict0), "../Text-to-Breasonings/objecttofinishdict.txt"),splitfurther(ObjectToFinishDict0,ObjectToFinishDict01),sort(ObjectToFinishDict01,ObjectToFinishDict03),length(ObjectToFinishDict03,ObjectToFinishLength0),write("Number of unique objects to finish in dictionary: "), writeln(ObjectToFinishLength0))->true;true),*/,!.br2(_,A,A,B,B,0,_Brth,BrthDict03,BrthDict03,_Room,RoomDict03,RoomDict03,_PartOfRoom,PartOfRoomDict03,PartOfRoomDict03,_Direction,DirectionDict03,DirectionDict03,_ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict03,_ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict03) :- !.
prep(List,T2ON_Dict03,Filex,Stringx1,M) :-open_file_s("../Lucian-Academy-Data/Text-to-Object-Name/t2on_dict1.txt", T2ON_Dict01),SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",sort(T2ON_Dict01,T2ON_Dict03),length(T2ON_Dict03,Length0),write("Number of words in dictionary: "), writeln(Length0),%sort(T2ON_Dict01t,T2ON_Dict03t),((Stringx1=u,phrase_from_file_s(string(String00), Filex))->true;String00=Stringx1),string_codes(String001,String00),string_lower(String001,String002),string_codes(String002,String003),split_string(String003,SepandPad,SepandPad,List1),truncate(List1,M,List),length(List,Length1),write("Number of words to find the object name for in file: "), writeln(Length1),sort(List,List3),%%writeln([list2,List2]),%length(List2,Length2),write("Number of unique words in file: "), writeln(Length2),(complete_display(true)->((Stringx1=u, %% Use file, not string as input.%%maplist(downcase_atom, List2, List3),%maplist(string_lower, List2, List3),%%writeln([list3,List3]),towords3(T2ON_Dict03,[],T2ON_Dict04,[],_ObjectNames,[],_AllUsedNames),%towords2(T2ON_Dict03t,[],T2ON_Dict04t),%%writeln([t2on_Dict04,T2ON_Dict04]),subtract(List3,T2ON_Dict04,D1),%%writeln([list3,t2on_Dict04,d1,List3,T2ON_Dict04,D1]),%%writeln(["subtract(T2ON_Dict04,List3,D1).",List3,T2ON_Dict04,D1]),length(D1,Length01),Difference is abs(Length01),write("Number of words remaining to define: "), writeln(Difference)%subtract(AllUsedNames,T2ON_Dict04t,D2),%%delete(D21,'',D2),%length(D2,Length01t),Differencet is abs(Length01t),write("Number of undefined object names: "), writeln(Differencet),%%delete(D31,'',D3),%subtract(T2ON_Dict04t,AllUsedNames,D3),)->true;(string(Filex),writeln("Number of words, unique words and words remaining to define skipped for speed when finding object names for a string.")));true),!.
prep1(Brdict1,Brdict1Term1) :-phrase_from_file(string(BrDict0), Brdict1),splitfurther(BrDict0,BrDict01),sort(BrDict01,Brdict1Term1),!.
prep2(Brdict2,Brdict2Term1) :-phrase_from_file(string(BrDict0t), Brdict2),splitfurthert(BrDict0t,BrDict01t),sort(BrDict01t,Brdict2Term1),!.
print_grid(Grid,X,Y,Z) :-numbers(Y,1,[],YN1),reverse(YN1,YN),numbers(X,1,[],XN),numbers(Z,1,[],ZN1),reverse(ZN1,ZN),findall(_,(member(Z1,ZN),nl,nl,member(Y1,YN),nl,member(X1,XN),member([Z1,X1,Y1,Pixel1],Grid),(Pixel1=[*]->Pixel="*";Pixel=" "),write(Pixel)),_).
print_map_path1(Grid,Grid,[]) :- !.
print_map_path3d1(Grid,Grid,[]) :- !.
process(A,_,C) :- replace(Replacements), atom_string(A1,A), replace1(Replacements,A1,D1), atomic_list_concat(D,'\n\n',D1), findall(C1,(member(D2,D),atom_string(D2,C1)),C),!.
process_terms(T1,T2,T3,R1,R2) :-%trace,process_terms3(T1,T2,T3,R1,R2),%remove_brackets1(T4,T3),!.process_terms3([],T1,T3,R,R) :- %trace,try(T1,T3),%trace,%remove_brackets1(T2,T3),!.
professor("given viral plans").
query_box(Query,Query1,Functions,Functions1) :-get_lang_word("n",Dbw_n),collect_arguments_body2([Query],[],Arguments1),msort(Arguments1,Arguments),%trace,find_query_box_n(Query_box_n),(Arguments=[]->(Query1=[[Dbw_n,Query_box_n],[]],append([        [[Dbw_n,Query_box_n],[],":-",        [                Query        ]]],        Functions,Functions1));(Query1=[[Dbw_n,Query_box_n],Arguments],append([        [[Dbw_n,Query_box_n],Arguments,":-",        [                Query%,%[[n,trace2]]        ]]],        Functions,Functions1))).
random1(A1,A2,N3) :-random(A1,A2,N4),N3 is round(N4*10)/10.
random2(N) :-trialy2_30("0",H21),trialy2_30("1",H22),trialy2_30("2",H23),trialy2_30("3",H24),trialy2_30("4",H25),trialy2_30("5",H26),trialy2_30("6",H27),trialy2_30("7",H28),trialy2_30("8",H29),trialy2_30("9",H210),H2L=[H21,H22,H23,H24,H25,H26,H27,H28,H29,H210],sort(H2L,H2A),reverse(H2A,H2B),H2B=[[_,N]|_Rest2].
rcawp2(0) :- !.rcawp2(Count1) :-writeln([algorithm,Count1]),random(N1),N2 is round(N1*1000),random(N3),N4 is round(N3*1000),N5 is N2+N4,%%caw00(off,function0,[],1,4,[[[[[v,a],N2],[[v,b],N4]],%%[[[v,c],N5]],true]],[],Program),writeln(Program),writeln(""),%%trace,%%interpret(off,[[n,function0],[N2,N4,[v,c]]],Program,%%_A), %% Replaced [[[v,c],N5]] with _A%%notrace,writeln(""),writeln(""),Count2 is Count1-1,rcawp2(Count2).
readfile(List1,Error) :-phrase_from_file_s(string(List6), List1),(phrase(file(List3),List6)->true;(writeln(Error),abort)),writeln(List3).
recursive_collect_arguments([],Arguments,Arguments) :- !.
recursive_replace_vars([],Arguments,Arguments,Var_index1,Var_index1,Var_table1,Var_table1) :- !.
reference(String2r) :-(refs(R1),%%writeln("What is the reference? e.g. Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\n"),writeln("Existing references (copy one or many delimited with \"\\n\"):"), findall(_,(member(R11,R1),writeln(R11)),_),%%read_string(user_input, "\n", "\r", _End4, String2r),not(String2r=""),%%downcase_atom(String2r,_String3r),%%String2=String2aa,split_string(String2r,"\n\r","\n\r",String2r3),%%trace,retractall(refs(_)),maplist(append,[[R1,String2r3]],[String2r21]),sort1(String2r21,String2r2),assertz(refs(String2r2))%%split_string(String3r, SepandPad, SepandPad, String4)).
reference(String2r) :-refs_long(R10),(refs(R1),%%writeln("What is the reference? e.g. Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\n"),writeln("Existing references (copy one or many delimited with \"\\n\"):"), findall(_,(member(R11,R1),writeln(R11)),_),%%read_string(user_input, "\n", "\r", _End4, String2r),not(String2r=""),%%downcase_atom(String2r,_String3r),%%String2=String2aa,split_string(String2r,"\n\r","\n\r",String2r3),%%trace,retractall(refs(_)),maplist(append,[[R1,String2r3]],[String2r21]),retractall(refs_long(_)),maplist(append,[[R10,String2r3]],[String2r210]),sort1(String2r21,String2r2),assertz(refs(String2r2)),assertz(refs_long(String2r210))%%split_string(String3r, SepandPad, SepandPad, String4)).
reference(String2r,Ref1,Page_num,End_note_number) :-%%writeln([[string2r,ref1,page_num,end_note_number],%%[String2r,Ref1,Page_num,End_note_number]]),%%trace,(refs(R1),%%writeln("What is the reference? e.g. Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\n"),writeln("Existing references (copy one or many delimited with \"\\n\"):"), %%findall(_,(member(R11,R1),writeln(R11)),_),%%read_string(user_input, "\n", "\r", _End4, String2r),%%(Ref1="()"->trace;true),not(String2r=""),%%downcase_atom(String2r,_String3r),%%String2=String2aa,split_string(String2r,"\n\r","\n\r",String2r3),%%trace,retractall(refs(_)),maplist(append,[[String2r3,[Ref1,Page_num,End_note_number]]],[String2r21]),%%sort1(String2r21,String2r2),[String2r21]=String2r2,append(R1,String2r2,String2r4),assertz(refs(String2r4))%%split_string(String3r, SepandPad, SepandPad, String4)).%%,notrace.
refind_st(T2,T,T22) :-%trace,%foldr(append,[[A],T3,[B]],T2),append_brackets([A],T3,[B],T2),%foldr(append,[[*],T3,[*]],T4),append_brackets([*],T3,[*],T4),%trace,remove_brackets2(T4,T,T21),%foldr(append,[[*],T31,[*]],T21),append_brackets([*],T31,[*],T21),%foldr(append,[[A],T31,[B]],T22),append_brackets([A],T31,[B],T22),!.
remove_chains_of_one_children11([],Options,Options) :- !.
removenotrhyming15(Line2,Rhymes1,Rhymes3) :-length(List1,Line2),append(List1,_,Lyrics),reverse(List1,List2),List2=[Item1|_Items2],reverse(Item1,Item2),Item2=[Item3|_Items4],member(Rhymes2,Rhymes1),member(Item3,Rhymes2),delete(Rhymes2,Item3,Rhymes3)removenotrhyming2(_Rhymes3,[],Verbs,Verbs) :- !.
renderline1(Lyrics2,Melody1,_Totallength,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],length(Lyrics2,Lyrics2Length),%%Rests is Totallength-Lyrics2Length,BarTimes1=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelody(Lyrics2Length,Melody1,Melody2),renderline2(BarTimes1,BarTimes2,Melody2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelody(Lyrics2Length,Melody1,Melody2) :-generatemelody1(Melody1,[],Melody3),length(Melody3,Melody2Length),changelength(Lyrics2Length,Melody2Length,Melody3,Melody2).generatemelody1([],Melody,Melody) :- !.
renderline1(Lyrics2,Melody1,_Totallength,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],length(Lyrics2,Lyrics2Length),%%Rests is Totallength-Lyrics2Length,rhythm(BarTimes1),%=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelody(Lyrics2Length,Melody1,Melody2),renderline2(BarTimes1,BarTimes2,Melody2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelody(Lyrics2Length,Melody1,Melody2) :-generatemelody1(Melody1,[],Melody3),length(Melody3,Melody2Length),changelength(Lyrics2Length,Melody2Length,Melody3,Melody2).generatemelody1([],Melody,Melody) :- !.
renderline1m(Melody1,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],%%Rests is Totallength-Lyrics2Length,BarTimes1=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelodym(Melody1,Melody2),renderline2(BarTimes1,BarTimes2,Melody2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelodym(Melody1,Melody2) :-generatemelody1(Melody1,[],Melody3),length(Melody3,Melody2Length),Lyrics2Length=8,changelength(Lyrics2Length,Melody2Length,Melody3,Melody2).renderh1(_Form1,_Harmony,[],_Track1,_Track2,Song,Song) :- !.
renderline1m(Melody1,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],%%Rests is Totallength-Lyrics2Length,BarTimes1=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelodym(Melody1,Melody2),renderline2(BarTimes1,BarTimes2,Melody2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelodym(Melody1,Melody2) :-generatemelody1(Melody1,[],Melody3),length(Melody3,Melody2Length),Lyrics2Length=8,changelength(Lyrics2Length,Melody2Length,Melody3,Melody2).renderh1(_Form1,_Harmony,[],_Track1,_Track2,Song,Song) :- !.renderh1(Form1,Harmony,HarmonyParts1,Track1,Track2,Song1,Song2) :-%%length(Form1,FormLength),HarmonyParts1=[HarmonyParts2|HarmonyParts3],HarmonyParts2=[[_A,[InstrumentNumber1,_B],_C]|_D],InstrumentNumber2 is InstrumentNumber1,%% + 1,printheader(Track1,[InstrumentNumber2,_],Song1,Song3),%%renderh21(Form1,Harmony,HarmonyParts1,Track1,1,_,Song3,Song4),renderh21(Form1,Harmony,HarmonyParts2,Track1,1,_E,Song3,Song4),Track3 is Track1+1,renderh1(Form1,Harmony,HarmonyParts3,Track3,Track2,Song4,Song2),!.
renderline1m(Melody1,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],%%Rests is Totallength-Lyrics2Length,rhythm(BarTimes1),%BarTimes1=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelodym(Melody1,Melody2),renderline2(BarTimes1,BarTimes2,Melody2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelodym(Melody1,Melody2) :-generatemelody1(Melody1,[],Melody3),length(Melody3,Melody2Length),Lyrics2Length=8,changelength(Lyrics2Length,Melody2Length,Melody3,Melody2).renderh1(_Form1,_Harmony,[],_Track1,_Track2,Song,Song) :- !.
reorder_endnotes(End_notes_no_heading,End_notes_no_heading1) :-%% Replace instances in end notes%%split_string(Essay2,"\n\r","\n\r",Essay23),%%findall([B9,"\n"],(%%member(C,Essay23),split_string(End_notes_no_heading,"\n\r","\n\r",D),%%retractall(new_nums(_)),%%assertz(new_nums([0,0])),findall([B7,".","\n"],(member(A,D),split_string(A,".",".",Essay22),(Essay22=[N1|B6]->(get_num(N1,N3),concat_list([N3,"."|B6],B7));([B7|_]=Essay22->true;(writeln("Extra <> in essay."),abort)))),B81),maplist(append,[B81],[B8]),concat_list(B8,End_notes_no_heading1).
reorder_essay(Essay2,Essay21) :-split_string(Essay2,"\n\r","\n\r",Essay23),findall([B9,"\n"],(%%trace,member(C,Essay23),split_string(C,".",".",D1),%%writeln1([d,D]),delete(D1,"  ",D),findall([B7,"."],(member(A,D),split_string(A,"<>","<>",Essay22),%%trace,((((Essay22=[B1,B2,N1,B3,B4,B5,N2,B51|B6]->(assign_num(N1,N3),assign_num(N2,N4),concat_list([B1,"<",B2,">",N3,"<",B3,">",B4,"<",B5,">",N4,"<",B51,">"|B6],B7));(Essay22=[B1,B2,N1,B22|B3]->(assign_num(N1,N3),concat_list([B1,"<",B2,">",N3,"<",B22,">"|B3],B7));([B7|_]=Essay22->true;(writeln(["Extra <> in essay.",Essay22]),abort))))->(true%%,notrace);(%%notrace,fail))))),B81),%%notrace,maplist(append,[B81],[B8]),concat_list(B8,B9)),B101),maplist(append,[B101],[B10]),concat_list(B10,Essay21).
repeat1(A1,M1,N,Algorithm1,Algorithm2,Vars1,Vars2) :-%writeln("Is this the final variable? (y/n)"),random_member(Q,["y","n"]),%read_string(user_input, "\n", "\r", _End, Q),(Q="y"->(Algorithm2=Algorithm1,Vars2=Vars1);%writeln("What variable is this last variable linked to?"),%(random(X_A),X_B is ceiling(2*X_A),%(X_B=1->random_member(V1,A1),upper_first_letter(V1,V2),append(Vars1,[V2],V3),random_member(V,V3),%read_string(user_input, "\n", "\r", _End2, V),concat_list(["member(A",M1,",",N,V,"),A",M1,"=[",N,",",V,"],"],Algorithm1a),append(Vars1,[V],Vars3),M2 is M1+1,string_concat(Algorithm1,Algorithm1a,Algorithm1b),repeat1(A1,M2,V,Algorithm1b,Algorithm2,Vars3,Vars2)).find_header_args1([_],HA,HA) :- !.find_header_args1(Vars,HA1,HA2) :-Vars=[_|F],Vars=[A,B|_],concat_list([A,B,","],D),string_concat(HA1,D,E),find_header_args1(F,E,HA2).
replace(A,Find,Replace,F) :- split_string(A,Find,Find,B),findall([C,Replace],(member(C,B)),D),maplist(append,[D],[E]),concat_list(E,F1),string_concat(F,G,F1),string_length(G,1),!.
replace(A1,Find,Replace,F) :-string_concat("%",A1,A2),string_concat(A2,"%",A),split_string(A,Find,Find,B),findall([C,Replace],(member(C,B)),D),maplist(append,[D],[E]),concat_list(E,F1),string_concat(F2,G,F1),string_length(G,1),string_concat("%",F3,F2),string_concat(F,"%",F3).
replace(A1,Find,Replace,F) :-string_concat("%",A1,A2),string_concat(A2,"%",A),split_string(A,Find,Find,B),findall([C,Replace],(member(C,B)),D),maplist(append,[D],[E]),concat_list(E,F1),string_concat(F2,G,F1),string_length(G,1),string_concat("%",F3,F2),string_concat(F,"%",F3).v_if_string_or_atom(String_or_atom,V) :-((string(String_or_atom)->true;atom(String_or_atom))->V=[v,String_or_atom];V=String_or_atom),!.delete1(A,Find,F) :-%string_concat("%",A1,A2),%string_concat(A2,"%",A),split_string(A,Find,"",B),%findall([C,Replace],(member(C,B)),D),maplist(append,[[B]],[E]),concat_list(E,F).%,string_concat(F,G,F1),string_length(G,1).
replace_a_word1(_A1,[],List,List).
replace_first_vars1([],_First_vars,Vars,Vars) :- !.replace_first_vars1(Vars1,First_vars,Vars2,Vars3) :-%get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,Vars1=[[Var_name,Value]|Vars5],(member([Term,Var_name],First_vars)->append(Vars2,[[Term,Value]],Vars4);append(Vars2,[[Var_name,Value]],Vars4)),replace_first_vars1(Vars5,First_vars,Vars4,Vars3),!.replace_first_vars2([],_First_vars,Vars,Vars) :- !.
repositories([["luciangreen","a",[2023,6,1,0,0]],["luciangreen","b",[2024,6,1,0,0]]]).
reserved_word(Word) :-lang(Lang),lang_db(Lang_db), (Lang="en"->(member([Word1,_,_,_],Lang_db),atom_string(Word,Word1));member([_,_,_,Word],Lang_db)).
return_to_last_non_end_function(E1,Lines,End_line4,[Dbw_on_true,A1],[Dbw_go_after,B1],[Dbw_on_false,C1],[Dbw_go_to_predicates,D1],Line1,Globals,Pred_id,Line_number_a,FA,E2,End_line42) :-%trace,%writeln1([lines,Lines]),%writeln1(return_to_last_non_end_function(E1,Lines,End_line4,["on true",A1],["go after",B1],["on false",C1],["go to predicates",D1],Line1)),%trace,%writeln(E1),find_line_number(E1,E),%trace,%writeln1([globals,Globals]),find_line_number(Line_number_a,Line_number_a1),(leash1(on)->Skip=false;member([[skip,Pred_id,Line_number_a1],Skip],Globals)),get_lang_word("n",Dbw_n),get_lang_word("not",Dbw_not),get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,get_lang_word("exit_function",Dbw_exit_function1),Dbw_exit_function1=Dbw_exit_function,get_lang_word("fail_function",Dbw_fail_function1),Dbw_fail_function1=Dbw_fail_function,member([E,[Dbw_on_true,_A],[Dbw_go_after,B],[Dbw_on_false,C],[Dbw_go_to_predicates,_D]|Line],Lines),(E1=[Dbw_exit_function,_]->(F=B,E21=E2,(Line=[[Dbw_n,Dbw_not]]-> (debug_fail(Skip,Line)->true;true);true%debug_exit(Skip,Line)));(%trace,E1=[Dbw_fail_function,_]->(%trace,F=C,E21= -3,(Line=[[Dbw_n,Dbw_not]]->debug_exit(Skip,Line);((Line=[[Dbw_n,Dbw_not]],debug_fail(Skip,Line))->true;true))))),return_to_last_non_end_function(F,Lines,End_line4,[Dbw_on_true,A1],[Dbw_go_after,B1],[Dbw_on_false,C1],[Dbw_go_to_predicates,D1],Line1,Globals,Pred_id,Line_number_a,FA,E21,End_line42).
rhythm2(R10,R2) :-%trace,not(R10=""),catch(term_to_atom(R1,R10),_,false),%member([T,_,_,_],R1),not(T>=4),forall(member([A,B,C,D,F],R1),(string_compound(_,A),(B=n->true;B=r),string_compound(_,C),0=<F,F=<127)),findall([A1,B1,C1,D,F],(member([A,B,C,D,F],R1),string_compound(A1,A),(B=n->B1="NT";(B=r,B1="R")),string_compound(C1,C)),R2),!.
rhythm2(_R10,R2) :-writeln("Error: Please re-input:"),rhythm1(R2),!.
sentencewithspaces(Sentence1,Sentence2) :-Sentence1=[Item|Items],string_concat(Firstletter1,Rest,Item),string_length(Firstletter1,1),upcase_atom(Firstletter1,Firstletter2),concat_list3(Firstletter2,[Rest,""],Item2),sentencewithspaces(Items,Item2,Sentence3),string_concat(Sentence3,".",Sentence2).
shell1(Command) :-(bash_command(Command,_)->true;(writeln(["Failed shell1 command: ",Command]),abort)),!.
shell1(Command) :-(bash_command(Command,_)->true;(writeln(["Failed shell1 command: ",Command]),abort)),!.bash_command(Command, Output) :-        setup_call_cleanup(process_create(path(bash),                ['-c', Command],                [stdout(pipe(Out))]),        read_string(Out, _, Output),        close(Out)).
shell1(Command) :-(bash_command(Command,_)->true;(writeln(["Failed shell1 command: ",Command]),abort)),!.bash_command(Command, Output) :-        setup_call_cleanup(process_create(path(bash),                ['-c', Command],                [stdout(pipe(Out))]),        read_string(Out, _, Output),        close(Out)).concat_list2A(A1,B):-A1=[A|List],concat_list2A(A,List,B),!.
shell1(Command) :-(bash_command(Command,_)->true;(writeln0(["Failed shell1 command: ",Command]),abort)),!.
shell1(Command1,Path,Object,Command4) :-atom_concat(Command1,' ',Command2),atom_concat(Command2,Path,Command3),atom_concat(Command3,Object,Command4).
shell1_s(Command) :- atom_string(Command1,Command),shell1(Command1),!.
simplify(A,A):-(blob(A,stream)->%falsetrue;(variable_name(A)->true;(string(A)->true;(number(A)->true;(atom(A)->true;A=[]))))),!.%simplify([A,"|",[B|B0]],[A1|[B1|B10]]):-%simplify(A,A1),%simplify(B,B1),%simplify(B0,B10),!.
single_item(A) :- predicate_or_rule_name(A),!.
sm_to_lp([],Algorithm,Algorithm) :- !.
solve_ad(Connections,Models1,Pre_info1,Question1,Question_table1,Answer) :-% split after [], mult q tables% multiple qs% find form list F2=[[function,C12,F21]]))((search(Question1,["worksheet"]),search(Question1,["statement","financial","position"]),bus_trans_sol(_Connections,_Models1,Pre_info1,Question1,Question_table1,Answer))->%spreadsheet_formula_finder_sol(Pre_info1,Question1,Question_table1,Answer);calc(Connections,Models1,Pre_info1,Question1,Question_table1,Answer)).
solve_ad(Connections,Models1,Pre_info1,Question1,Question_table1,Answer) :-% split after [], mult q tables% multiple qs% find form list F2=[[function,C12,F21]]))((search(Question1,["worksheet"]),search(Question1,["statement","financial","position"]),bus_trans_sol(_Connections,_Models1,Pre_info1,Question1,Question_table1,Answer))->true;%spreadsheet_formula_finder_sol(Pre_info1,Question1,Question_table1,Answer);(calc(Connections,Models1,Pre_info1,Question1,Question_table1,Answer))).
span_from_headings(Q_Table,MA2,Answer_table) :-% match col or row headings with col or row headingslength(MA2,MA2L),numbers(MA2L,1,[],MA2LNs),findall(Answer_table1,(member(MA2LN,MA2LNs),get_item_n(MA2,MA2LN,MA_Table),%orientation_and_row_or_column(Question_table1,)match_tables(MA2LN,Q_Table,MA_Table,Answer_table1)),Answer_table),!.
span_from_headings(Q_Table,Model,Answer_table) :-% match a model vModel=[_MAd2,_MQ2,MA2],% headings have a word in common with model headingsspan_from_headings(Question_table1,MA2,Answer_table),!.span_from_headings(Q_Table,MA2,Answer_table) :-% match col or row headings with col or row headingslength(MA2,MA2L),numbers(MA2L,1,[],MA2LNs),findall(Answer_table1,(member(MA2LN,MA2LNs),get_item_n(MA2,MA2LN,MA_Table),%orientation_and_row_or_column(Question_table1,)match_tables(MA2LN,Q_Table,MA_Table,Answer_table1)),Answer_table),!.
span_from_headings(Q_Table,Model,Answer_table) :-% match a model vModel=[_MAd2,_MQ2,MA2],% headings have a word in common with model headingsspan_from_headings2(Q_Table,MA2,Answer_table),!.
span_from_headings2(Q_Table,MA2,Answer_table) :-% match col or row headings with col or row headingslength(MA2,MA2L),numbers(MA2L,1,[],MA2LNs),findall(Answer_table1,(member(MA2LN,MA2LNs),get_item_n(MA2,MA2LN,MA_Table),%orientation_and_row_or_column(Question_table1,)match_tables(MA2LN,Q_Table,MA_Table,Answer_table1)),Answer_table),!.
spell_check2(Direction,Dictionary2,State2,A2,Word2,Word3,Suggestions1,Suggestions2) :-A2=[Letter100|Rest],((Letter100=Letter)->true;(downcase_atom(Letter100,Letter101),atom_string(Letter101,Letter))),member([State2,Letter_c,State3],Dictionary2),(Letter_c=Letter->true;(downcase_atom(Letter_c,Letterc01),atom_string(Letterc01,Letter))),append(Word2,[Letter_c],Word4),spell_check2(Direction,Dictionary2,State3,Rest,Word4,Word3,Suggestions1,Suggestions2).
split12([],_,A,A,[]):-!.split12(L%%List,L16,%N,N, A1,A2,_Rest) :- length(L,LL),LL<L16,%A1=A2,Rest=L,% append(A1,L,A2), %L2 is L16*2,length(List,L3),L3=<L2, !.
split2([],List,List) :- !.
split2([],List,List) :- !.split2(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[Name,_In,_Out]|Rest],append(List1,[[Name|Rest]],List6),split2(List4,List6,List2),!.
split_on_phrases3([],_Text1,Text2,Text2,_Title) :- !.
split_string1(A,B,C) :-split_string1(A,B,_,C),!.
split_string1(A,B,_,C) :-%string_strings(B,B2),split_on_substring(A,B,C),%findall(D,(member(D1,C1),(member(D1,B2)->D="";D=D1)),C),!.
split_string1a(String1,Chars,List) :-%string_codes(String2,String1),test(116,_,Code,_),%trace,%writeln1([interpret(off,[[n,grammar1],[String1,Chars,[v,t]]],%Code,A)]),interpret(off,[[n,grammar1],[String1,Chars,[v,t]]],Code,[[[[v,t],List]]]),!.
split_string1b(A,B,C) :-split_string1b(A,B,_,C),!.
split_string1b(A,B,_,C) :-string_strings(B,B2),split_on_substring(A,B,C1),findall(D,(member(D1,C1),(member(D1,B2)->D="";D=D1)),C),!.
ssi_test_all0(Test,Arity,Lang,Debug,NTotal,Score) :-functor(Test2,Test,Arity),findall(Test2,(Test2),B),length(B,NTotal1),ssi_test_all0(Test,Arity,Lang,Debug,0,NTotal,0,Score,NTotal1),!.ssi_test_all0(_Test,_Arity,_Lang,_Debug,NTotal,NTotal,Score,Score,NTotal) :- %NTotal=105, !.
ssi_test_all000(testopen_cases,Debug,NTotal3,Score1,Score3,Lang) :-testopen_cases(NTotal3,Query,Functions),trans_alg(Query,"en",Lang,Query1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_lucianpl([lang,Lang],Debug,Query1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([ssi_testopen,NTotal3,result,Result]),writeln0([ssi_test,NTotal3,passed]));(Score3=Score1,writeln0([ssi_testopen,NTotal3,failed]))).
ssi_test_all_bt0(Ssi_test,Arity,Lang,Debug,NTotal,Score) :-functor(Ssi_test2,Ssi_test,Arity),findall(ssi_test2,(Ssi_test2),B),length(B,NTotal1),ssi_test_all_bt0(Ssi_test,Arity,Lang,Debug,0,NTotal,0,Score,NTotal1),!.
ssi_test_all_bt000(testopen_cases,Debug,NTotal3,Score1,Score3,Lang) :-testopen_cases(NTotal3,Query,Functions),trans_alg1(Query,"en",Lang,Query1),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_lucianpl([lang,"en"],Debug,Query1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([ssi_testopen,NTotal3,result,Result]),writeln0([ssi_test,NTotal3,passed]));(Score3=Score1,writeln0([ssi_testopen,NTotal3,failed]))).
string(String) --> list(String).
string2(String) --> list2(String).
strip_footnotes(A,B101):-split_string(A,".",".",D),%%writeln1(D),findall([B7,"."],(member(B,D),split_string(B,"<","<",[B7|_])),B8),maplist(append,[B8],[B81]),concat_list(B81,B101).
stronger_word([Word1,Word1a],[Word2aa,Word2a],Term,Word3%,First_words1,First_words,Item) :-%trace,(member([Word1,Word21],Term)->true;(writeln(["Error:",Word1,"not in brdict1.txt."]),abort)),(Word21=""->Word2=Word1;Word2=Word21),%(member([Word2,Item1],Additions_to_brdict1)->Additions_to_brdict1=Additions_to_brdict2;(%trace,findall(Word3,(member([Word3,Word2],Term)),Word22),append([Word2],Word22,Word23),%trace,sort(Word23,Word241),delete(Word241,"",Word24),length(Word24,Menu_items_length)),(member([Word2aa,Word21a],Term)->true;(writeln(["Error:",Word2aa,"not in brdict1.txt."]),abort)),(Word21a=""->Word2ab=Word2aa;Word2ab=Word21a),%(member([Word2aa,Item1a],Additions_to_brdict1)->Additions_to_brdict1=Additions_to_brdict2;(%trace,findall(Word3,(member([Word3,Word2ab],Term)),Word22a),append([Word2ab],Word22a,Word23a),%trace,sort(Word23a,Word241a),delete(Word241a,"",Word24a),length(Word24a,Menu_items_length_a)),/**(member(Word1,String02a)->(First_words1=First_words,Item=[Word1,Word1a,Word2,Word2a]);(member(Word2,String02a)->(First_words1=First_words,Item=[Word2,Word2a,Word1,Word1a]);(%trace,writeln(["Which of 1-",Word1,"or 2-",Word2,"is stronger?"]),read_string(user_input,"\n","\r",_,Input),**/%trace,(Menu_items_length>=Menu_items_length_a->(Word3=Word1,Item=[Word1,Word1a,Word2aa,Word2a]);(Word3=Word2,Item=[Word2aa,Word2a,Word1,Word1a])).%append(First_words1,[Word3],First_words)))).
structure_to_body_metaphor2(Second_nodes_length,Structure_type) :-(Second_nodes_length=<2 ->Structure_type=chest;(Second_nodes_length=<5 ->Structure_type=hand;(Second_nodes_length>5 ->Structure_type=other))).
sub_into_rjv(List1,List2) :-rec_join_vars(RJV),sub_term_wa([rjv,_],List1,In1),findall([Ad,Item2],(member([Ad,[rjv,N]],In1),member([_,Item2,N],RJV)),In2),foldr(put_sub_term_wa_ae_smooth,In2,List1,List3),((List1=List3)->List2=List1;sub_into_rjv(List3,List2)),!.
sub_list_reverse(List,Before_list,Sub_list,After_list) :-reverse(List,L2),append(To_after_list,L1,L2),reverse(To_after_list,After_list),reverse(L1,L11),append(Before_list,Sub_list,L11).
sum(S1,S2,S) :-S is S1+S2.
symmetrical_member([A,B,C],D) :-member([A,B,C],D).
t2ab_prep(List,BrDict03,AlgDict_x,AlgDict,Filex,Stringx1,M) :-phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),%%Chars="’",SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),%%writeln([brdict1]),splitfurther(BrDict0,BrDict01),%%writeln([brDict01,BrDict01]),%%char_code(Escape,27),%%delete(BrDict01,[Escape,_,_,_,_],BrDict021),%%writeln([brDict021,BrDict021]),%%char_code(Apostrophe,8217),%%delete(BrDict021,[Apostrophe,_,_,_,_],BrDict02),%%writeln([brDict02,BrDict02]),sort(BrDict01,BrDict03),%%writeln([brDict03,BrDict03]),length(BrDict03,Length0),write("Number of words in dictionary: "), writeln(Length0),%%writeln(''),%%writeln([brdict2]),phrase_from_file_s(string(BrDict0t), "../t2ab/algdict1.txt"),%%Chars="’",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),%splitfurthert(BrDict0t,BrDict01t),string_atom(BrDict0t,Atom),atom_to_term(Atom,BrDict01t,_),%%writeln([brDict01,BrDict01]),%%delete(BrDict01t,[Escape,_,_,_,_],BrDict021t),%%writeln([brDict021,BrDict021]),%%delete(BrDict021t,[Apostrophe,_,_,_,_],BrDict02t),%%writeln([brDict02,BrDict02]),sort(BrDict01t,AlgDict_x),% br_freq%B=AlgDict_x,A=BrDict03,findall([DL,C,"\n"],(member([C,_,_,_],B),findall(_,member([_,C],A),D),length(D,DL)),E),sort(E,F),reverse(F,G),writeln([br_freq,G]),%%writeln([brDict03,BrDict03]),length(AlgDict_x,Length0t),write("Number of unique algorithm names in dictionary: "), writeln(Length0t),%trace,phrase_from_file_s(string(AlgDict0), "../t2ab/algdict2.txt"),%%Chars="’",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),%%writeln([brdict1]),string_atom(AlgDict0,Atom1),atom_to_term(Atom1,AlgDict01,_),%%splitfurther(BrDict0,BrDict01),%%writeln([brDict01,BrDict01]),%%char_code(Escape,27),%%delete(BrDict01,[Escape,_,_,_,_],BrDict021),%%writeln([brDict021,BrDict021]),%%char_code(Apostrophe,8217),%%delete(BrDict021,[Apostrophe,_,_,_,_],BrDict02),%%writeln([brDict02,BrDict02]),sort(AlgDict01,AlgDict),%%writeln([brDict03,BrDict03]),length(AlgDict,Length01),write("Number of algorithms in dictionary: "), writeln(Length01),((Stringx1=u,phrase_from_file_s(string(String001), Filex))->true;String001=Stringx1),process_t2ab(String001,String00),split_string(String00,SepandPad,SepandPad,List1),%%split_string_onnonletter(String00,List1),truncate(List1,M,List),/**replace0(String0,[8221, 8220], 34, SepandPad, M, String1),replace0(String1,[8216, 8217], 39, SepandPad, M, String2),replace0(String2,[8259, 8211, 8212], 45, SepandPad, M, String3),replace0(String3,[160], 32, SepandPad, M, List),**/%%atom_codes(Atom999,String),writeln([atom999,Atom999]),%%writeln([list,List]),%%delete(List,Escape,List11),%%writeln([list11,List11]),%%delete(List11,Apostrophe,List1),%%writeln([list1,List1]),length(List,Length1),write("Number of words to breason out in file: "), writeln(Length1),sort(List,List2),%%writeln([list2,List2]),length(List2,Length2),write("Number of unique words in file: "), writeln(Length2),(complete_display(true)->((Stringx1=u, %% Use file, not string as input.
t2s([T1],S1,S2,SS) :-not(S1=[]),(T1=[_,_A1,A2]->(det(A2,DA2),findall(X,member([_,X,_],SS),X1),(member(A2,X1)->W="back";W=""),foldr(string_concat,[", then ",W," to ",DA2," ",A2,"."],S3));(T1=[_,A1]->(det(A1,DA1),findall(X,member([_,X],SS),X1),(member(A1,X1)->W=" again";W=""),foldr(string_concat,[", then checked it was ",DA1," ",A1,W,"."],S3)))),append(S1,[S3],S4),t2s([],S4,S2,SS).
test_all0(Test,Arity,Lang,Debug,NTotal,Score) :-functor(Test2,Test,Arity),findall(Test2,(Test2),B),length(B,NTotal1),test_all0(Test,Arity,Lang,Debug,0,NTotal,0,Score,NTotal1),!.
test_all000(testopen_cases,Debug,NTotal3,Score1,Score3,Lang) :-testopen_cases(NTotal3,Query,Functions),trans_alg(Query,"en",Lang,Query1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_interpret([lang,Lang],Debug,Query1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln([testopen,NTotal3,result,Result]),writeln([test,NTotal3,passed]));(Score3=Score1,writeln([testopen,NTotal3,failed]))).
test_all000(testopen_cases,Debug,NTotal3,Score1,Score3,Lang) :-testopen_cases(NTotal3,Query,Functions),trans_alg(Query,"en",Lang,Query1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_interpret([lang,Lang],Debug,Query1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([testopen,NTotal3,result,Result]),writeln0([test,NTotal3,passed]));(Score3=Score1,writeln0([testopen,NTotal3,failed]))).
test_all_bt0(Test,Arity,Lang,Debug,NTotal,Score) :-functor(Test2,Test,Arity),findall(Test2,(Test2),B),length(B,NTotal1),test_all_bt0(Test,Arity,Lang,Debug,0,NTotal,0,Score,NTotal1),!.
test_all_bt0(Test,Arity,Lang,Debug,NTotal,Score) :-functor(Test2,Test,Arity),findall(Test2,(Test2),B),length(B,NTotal1),test_all_bt0(Test,Arity,Lang,Debug,0,NTotal,0,Score,NTotal1),!.test_all_bt0(_Test,_Arity,_Lang,_Debug,NTotal,NTotal,Score,Score,NTotal) :- %NTotal=105, !.
test_all_bt000(testopen_cases,Debug,NTotal3,Score1,Score3,Lang) :-testopen_cases(NTotal3,Query,Functions),trans_alg1(Query,"en",Lang,Query1),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_interpret([lang,"en"],Debug,Query1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln([testopen,NTotal3,result,Result]),writeln([test,NTotal3,passed]));(Score3=Score1,writeln([testopen,NTotal3,failed]))).
texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,[auto,Auto]) :-texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,0,[auto,Auto]),!.
theta_for_quadrant(X,Y,Theta1,Theta2) :-((positive(X),positive(Y))->Theta2 is Theta1;((negative(X),positive(Y))->Theta2 is 180-Theta1;((negative(X),negative(Y))->Theta2 is 180+Theta1;((positive(X),negative(Y))->Theta2 is -Theta1)))).
threats(Threats1,Threats2):-%% "Given that they are not likely to have meant it and that there is nothing wrong, is there anything else that is wrong?"trialy2_6("Yes",R1),trialy2_6("No",R2),R=[R1,R2/**,R3,R4,R5,R6,R7,R8,R9,R10**,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27**/],sort(R,RA),reverse(RA,RB),RB=[[_,Answer]|_Rest],(Answer="No"->Threats2=Threats1;(Threats3 is Threats1+1,threats(Threats3,Threats2))).
to_variable_name(Var,Name1) :-atom_concat(vgp,Var,Name2),Name1=[v,Name2],!.
to_variable_name(Var,Name1) :-get_lang_word("v",Dbw_v),string_concat("vgp",Var,Name2),get_lang_word(Name2,Dbw_vgp1),Name1=[Dbw_v,Dbw_vgp1],!.
todays_students(1).
traverse(Z,X,Y) :-traverse(Z,X,Y,[],_,[],_).
traverse_points(Point1,Points1,Point2,Points3) :-%% find distance from current point to all pointsfind_distances(Point1,Points1,[],Distances),%% find closest pointfind_closest_point(Point1,Distances,Point2),%% () record angle, distance to pointPoint2=[Distance,X1,Y1,_Theta2],delete(Points1,[Distance,X1,Y1,_],Points3).
traverse_points2(_Point,[],List,List) :- !.traverse_points2(Point1,Points1,List1,List2) :-%%Points1=[Points4|Points5],(traverse_points(Point1,Points1,Point2,Points3)->(append(List1,[Point2],List3),traverse_points2(Point2,Points3,List3,List2));List1=List2).
trial1(0,A,A) :- !.
trial1(0,A,A) :- !.trial1(N,A,B) :- mindreadtest(S), append(A,[S],A2),N1 is N-1,trial1(N1,A2,B).
trialy2(List,R) :-%%writeln([list,List]),%%notrace,length(List,Length),/**((Length=<9->findr4(R4),number_string(R4,R4A),formr5([R4A],9,Length,R5),findr(R5,List,R));(Length=<99->findr4(R41),findr4(R42),formr5([R41,R42],99,Length,R5),findr(R5,List,R));(Length=<999->findr4(R41),findr4(R42),findr4(R43),formr5([R41,R42,R43],999,Length,R5),findr(R5,List,R));fail),%%writeln([r,R]),trace.
try_reading_number(CStrings2,Choice) :-read_string(user_input, "\n", "\r", _, String2aa),((number_string(Number,String2aa),member([Number,Choice],CStrings2))->true;String2aa=Choice).
turn_keep_comments_on :-retractall(keep_comments(_)), assertz(keep_comments([percentage_comments,slash_star_comments%,newlines ])),!.
undefined_to_empty([],Values,Values) :- !.
updatefile3(List2,File) :-open(File,write, Stream),%%string_codes(List2),    write(Stream,List2),    close(Stream),!.
updatevar(undef,_Value,Vars,Vars) :-!.
updatevar_recursive([],[],[]) :- !.
walk2(_Transitions1,Transitions2,Destination,Transitions2) :-reverse(Transitions2,Transitions4),Transitions4=[[_Start,Destination]|_].
wrap2([],List,List) :-!.
write0(Term) :-%term_to_atom(Term,Atom),%append_retry_back_stack([text,Term])(html_api_maker_or_terminal(html)->(%term_to_atom(Term,Atom),format(Term,[])%,format('\n',[]));write(Term)),!.writeln1(Term) :-term_to_atom(Term,Atom),%atom_concat(Atom,"\n",Atom1),%append_retry_back_stack([text,Atom1]),!.
write1(Term) :-term_to_atom(Term,Atom),write(Atom),!.
write1(Term) :-/*term_to_atom(Term,Atom),append_retry_back_stack([text,Atom]),!.
write_file(File,String) :-open_s(File,write,Stream),write(Stream,String), close(Stream).
write_heading(String01,Heading) :-concat_list([String01,"\n","\n"],Heading).
writeln0(Term) :-%term_to_atom(Term,Atom),%append([Term],["\n"],Term1),%append_retry_back_stack([text,Term1]),!.
writeln1(Term) :-term_to_atom(Term,Atom),writeln(Atom),!.
writeln1(Term) :-term_to_atom(Term,Atom),writeln(Atom),!.write1(Term) :-term_to_atom(Term,Atom),write(Atom),!.shell1_s(Command) :- atom_string(Command1,Command),shell1(Command1),!.
 /* prettyprint_3d_1_e1(_C,_X,_Y,0) :- !.prettyprint_3d_1_e1(C,X,Y,Z) :-prettyprint_3d_1_e(C,1,X,Z),writeln(''),Z2 is Z-1,prettyprint_3d_1_e1(C,X,Y,Z2).
   %%write_close_bracket_and_full_stop_if_last_item(Arguments2,Algorithm5,Algorithm2).
   **/   find_state_machine_statement1(Statement,Result1,Return_line_true,Return_line_false,Pred_numbers1) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,((Statement=[Number,[Dbw_n,Name1],Arguments],not(Name1=Dbw_findall),length(Arguments,Arity1),%atom_string(Name1,Name),%(member(Name,Reserved_words)->Pred_numbers2=none;(member([[n,Name],Arity1,Pred_numbers2],Pred_numbers1))),%(Name1=downpipe->trace;true),(member([[Dbw_n,Name1],Arity1,Pred_numbers2a],Pred_numbers1)->Pred_numbers2=Pred_numbers2a;Pred_numbers2=(-)),Arguments=Result2,%findall(Argument,(member(Argument,Arguments),(predicate_or_rule_name(Argument))),Result2),Result1=[[Number,[Dbw_on_true,Return_line_true],[Dbw_go_after,-],[Dbw_on_false,Return_line_false],[Dbw_go_to_predicates,Pred_numbers2],[Dbw_n,Name1],Result2]])->true;(%%Statement=[_,[n,Name]],%%trace,Statement=[Number,[Dbw_n,Name1]],length([],Arity1),%atom_string(Name1,Name),%(member(Name,Reserved_words)->Pred_numbers2=none;(member([[n,Name],Arity1,Pred_numbers2],Pred_numbers1))),(member([[Dbw_n,Name1],Arity1,Pred_numbers2a],Pred_numbers1)->Pred_numbers2=Pred_numbers2a;Pred_numbers2=(-)),Result1=[[Number,[Dbw_on_true,Return_line_true],[Dbw_go_after,-],[Dbw_on_false,Return_line_false],[Dbw_go_to_predicates,Pred_numbers2],[Dbw_n,Name1]]])).find_state_machine_statement1(Statement,Result1,Return_line_true,Return_line_false,_Pred_numbers1) :-get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,((Statement=[Number,[Dbw_v,Name1],Arguments],%trace,not(Name1=Dbw_findall),%length(Arguments,Arity1),%atom_string(Name1,Name),%(member(Name,Reserved_words)->Pred_numbers2=none;(member([[n,Name],Arity1,Pred_numbers2],Pred_numbers1))),%(Name1=downpipe->trace;true),%(member([[v,Name1],Arity1,Pred_numbers2a],Pred_numbers1)->Pred_numbers2=Pred_numbers2a;Pred_numbers2=(-)),Pred_numbers2=(*),Arguments=Result2,%findall(Argument,(member(Argument,Arguments),(predicate_or_rule_name(Argument))),Result2),Result1=[[Number,[Dbw_on_true,Return_line_true],[Dbw_go_after,-],[Dbw_on_false,Return_line_false],[Dbw_go_to_predicates,Pred_numbers2],[Dbw_v,Name1],Result2]])->true;(%%Statement=[_,[n,Name]],%%trace,Statement=[Number,[Dbw_v,Name1]],%length([],Arity1),%atom_string(Name1,Name),%(member(Name,Reserved_words)->Pred_numbers2=none;(member([[n,Name],Arity1,Pred_numbers2],Pred_numbers1))),%(member([[v,Name1],Arity1,Pred_numbers2a],Pred_numbers1)->Pred_numbers2=Pred_numbers2a;Pred_numbers2=(-)),Pred_numbers2=(*),Result1=[[Number,[Dbw_on_true,Return_line_true],[Dbw_go_after,-],[Dbw_on_false,Return_line_false],[Dbw_go_to_predicates,Pred_numbers2],[Dbw_v,Name1]]])).
  %% detail algsgenerate_sentences(_Sentence3,Sentence_a,Sentence_a,0) :- !.
  **/  /*find_called_lines(Query,Functions1,Predicate_numbers) :-findall(Number1,(Query=[Name|Arguments1],length(Arguments1,Arguments_length),member([Number1,Name|Arguments2],Functions1),(Arguments2=[Arguments3,":-",_Body1]->true;(Arguments2=[":-",_Body2]->Arguments3=[];(Arguments2=[Arguments3]->true;(Arguments2=[]->Arguments3=[])))),length(Arguments3,Arguments_length)),Predicate_numbers).
% sort(A1,A2),findall(%[A6L,[Ad,A4]%],(member(A4,A2),findall(A5,member([Ad,A4],In),A6),length(A6,A6L),not(A6L=1)),A3),findall(A7,(member([Ad,A8],A3),)get_var_num).%find_g(Ts,[],G).
% -2 line number for end of predicate, -3 for failed predicate - earlier% n.b. findall, maplist (x not in new shell, with different end_function) need other code expansion in sm - with call, new shell% also type check in new shell, separate from alg% iso commands need to be done like c % - do bagof, setof later ( (var(Skip)->Globals3=Globals4; ( %writeln1([append,[skip,Pred_id,Line_number_b],Skip]), append(Globals3,[[[skip,Pred_id,Line_number_b],Skip]],Globals4))),  (%trace, Vars2c=[]->(Choice_point_trail1e=Choice_point_trail11, CP_Vars3=CP_Vars4);  (%trace,  append_cp(Choice_point_trail1e,[[Pred_id,Level,Predicate_number,Line_number_a,"line",_,Vars3,Vars2c]],Choice_point_trail11,CP_Vars3,CP_Vars4))),ssi1([Pred_id,Level,Predicate_number,A,"line",Query,Vars3,All_predicate_numbers], _End_result3, Functions,Vars2,Result1, Result2, Globals4,Globals2,Choice_point_trail11,Choice_point_trail3,CP_Vars4,CP_Vars2));(%trace,ssi1([Pred_id,Level,Predicate_number,C,"line",Query,Vars1,All_predicate_numbers], _End_result4, Functions,Vars2,Result1, Result2, Globals3,Globals2,Choice_point_trail1e,Choice_point_trail3,CP_Vars3,CP_Vars2))))))))))->true;(writeln0([ssi1,line,abort]),%abort%fail%number_string(a,_)%abort)),!.
% check not cut off% add r% find_g([r,1,["a","b",[r,2,["c","d"]]]],G).% G = [[[n,1],"-->",[]],[[n,1],"-->",[["a"],["b"],[n,2],[n,1]]],[[n,2],"-->",[]],[[n,2],"-->",[["c"],["d"],[n,2]]]]do outer level, then contained levels until end- do as predicate*/find_g(T,G1,G2) :-%retractall(var_num(_)),%assertz(var_num(1)),(T=[T1]->true;T=T1),find_g2(T1,G1,G2).
% could add a state on to the start x%%append(Options4,[[N0,A,N3]],Options4a),%trace,member([_N01,A2,N3],Options1),%trace,(Switch=left->[[N0,A,N3]]=Options4a;[[N0,A2,N3]]=Options4a),%[[N0,A2,N3]]=Options4a,%delete(Options6,[_N0a1,A2,N3],Options6a),append(Options2,Options4a,Options5),%remove_chains_of_one_children1(N1,Options6a,Options5,Options3).
% could add a state on to the start x%%append(Options4,[[N0,A,N3]],Options4a),%trace,member([_N01,A2,N3],Options1),%trace,[[N0,A2,N3]]=Options4a,delete(Options6,[_N0a1,A2,N3],Options6a),append(Options2,Options4a,Options5),remove_chains_of_one_children1(N1,Options6a,Options5,Options3).
% find last character in file%string_concat(_,".",String1),split_string_onnonletter(String00,Chars,List1) :-string_codes(String00,String1),split_string_onnonletter(String1,[],Chars,List0),string_codes(List0,List2),split_string(List2,"@","@",List1),!.
% find last character in file%string_concat(_,".",String1),/**split_string_onnonletter(String00,Chars,List1) :-string_codes(String00,String1),split_string_onnonletter(String1,[],Chars,List0),string_codes(List0,List2),split_string(List2,"@","@",List1),!.
% no_death(0,Threats2), % medits for life%writeln([Person,H,M,S,Threats1,politeness]).%,Threats2,no_death]).
% x % don't need to change to 'Bx'findall(_,(member(Spec1,Specs),length(Spec1,Spec_length),(forall(member(Spec2a,Specs),length(Spec2a,Spec_length))->true;(writeln("Error: Specs not same length."),abort))),_),Specs=[Spec2|_],length(Spec2,Spec2_length),numbers(Spec2_length,1,[],Var_nums),%trace,findall(Item3d,(member(Var_num,Var_nums),%Specs=[[[_Varname0,Items]|_]|_],get_item_n(Spec2,Var_num,[Varname,Items]),length(Items,Items_length),numbers(Items_length,1,[],Item_nums),findall(Items1,(member(Item_num,Item_nums),findall([Varname,Item],(member(Spec2b,Specs),%Spec2=[[Var_name,Items]|_],%length(Spec2,Spec2_length),%*numbers(Spec2_length,1,[],Var_nums),%trace,%*findall([Varname,Item],(member(Var_num,Var_nums),%trace,%Spec2=[_Var_name,Spec21],get_item_n(Spec2b,Var_num,[Varname,Items6]),get_item_n(Items6,Item_num,Item)),Items1)%Items1=[[Varname,_]|_],),Items21),%foldr(append,Items21,Items2),%1)),Items4),%trace,%Items2=[[Varname,_]|_],findall(Item3c,(member(Items2,Items21),findall(A,member([_,[_Ad,A]],Items2),A1),%trace,(maplist(=(_),A1)->Item3c=[];%%Item3a=Item3;%**%Item3c=Items2;%trace,findall(Item3,(member([Varname3,[Ad,Item3b]],Items2),vars_s2a(Vars),%Item3=[Varname3,[Ad,Item3b]]((member([Item3b,Q4],Vars))->Item3=[Varname3,[Ad,Q4]];(get_num_s2a(N),vars_base_s2a(Letter),atom_concat(Letter,N,AN),Item3=[Varname3,[Ad,AN]],retractall(vars_s2a(_)),append(Vars,[[Item3b,AN]],Vars2),assertz(vars_s2a(Vars2))))),Item3c))),Item3d)),Items3),foldr(append,Items3,Items42),%1)),Items4),foldr(append,Items42,Items4),%trace,findall([A,B],member([A,[B,C]],Items4),AB),remove_dups(AB,AB1),retractall(num_s2a(_)),assertz(num_s2a(1)),retractall(vars_s2a(_)),assertz(vars_s2a([])),retractall(vars_base_s2a(_)),assertz(vars_base_s2a('C')),%trace,findall([A,[B,Item3]],(member([A,B],AB1),findall(C,(member([A,[B,C]],Items4)),C1),sort(C1,C2),(%findall(Item3c,(member(Items2,C2),%findall(A,member([_Ad,A],Items2),A1),%trace,%(%maplist(=(_),A1)->Item3c=[];%Item3a=Item3;%trace,%findall(Item3,(member([Varname3,[Ad,Item3b]],Items2),vars_s2a(Vars1),%Item3=[Varname3,[Ad,Item3b]]((%trace,member([C2,Q4],Vars1))->Item3=Q4;(get_num_s2a(N),vars_base_s2a(Letter),atom_concat(Letter,N,AN),Item3=AN,retractall(vars_s2a(_)),append(Vars1,[[C2,AN]],Vars21),assertz(vars_s2a(Vars21))))%,writeln1(Item3)%),Item3c))),Item3d))),Items43),findall(A,member([A,_],Items43),A11),remove_dups(A11,A1),findall([Var_name1,Items5],(member(Var_name1,A1),findall(A4,(member([Var_name1,A4],Items43)),Items5)),C2),%sort(C20,C2),RS2=[RS3|_],%writeln(U2),findall(U31,member([U31,U32],RS3),RS4),remove_dups(RS4,RS5),%S=[[[U12,U21]|_]|_],S=[S3|_],%findall([Y1,In31],(member([Y1,Y2],U21),%U21=Y2,%[_Y1,Y2],findall([U31,In3],(member([U31,U32],S3),sub_term_types_wa([heuristic(var_or_data_c(A),A)%string,atom,number%heuristic((only_item(O),%(string(O)->true;(atom(O)->true;number(O))),%not_r_o_nd_types(O)),O)%heuristic((O=[Type,_],type_s2a1(Type))%only_item(O),%sub_term_types_wa([heuristic((only_item(O),%(string(O)->true;(atom(O)->true;number(O))),%not_r_o_nd_types(O))%,O)],U32,In3)),In31),%),In3),%trace,findall(XX2,(choose_vars(RS5,C2,Var,Ad1,_U5,In31,XX2)%([Ad2,XX21]=XX2)%*(member([Ad1,XX2],U5)->true;(member([Var,U4],In31),member([Ad1,XX2],U4)))),C211),%length(C21,C21L)%,%*),C31),foldr(append,C211,C21),%trace,findall([Var,C4],(member(Var,RS5),findall([Ad1,XX2],member([Var,[Ad1,XX2]],C21),C23),member([Var,XX3],RS3),%sort(C31,[[_,U1,U2,C33]|_]),%trace,foldr(put_sub_term_wa_ae,%C33,%C23,%C21,XX3,C4)%U2,C3),/*length(RS5,RS5L),numbers(RS5L,1,[],Ns),findall([RS51,C31],(member(P2,Ns),get_item_n(RS5,P2,RS51),get_item_n(C3,P2,C31)),C4)*/),C42),%foldr(append,C41,C42),%C4=[U1,C3],%),C4),%sort(C4,C41),%findall([C42,C43],member([_,C42,C43],C41),C44),%C4=UV2,%findall(UV,(member(S1,C4),%find_unique_variables(S1,UV)),UV2),(true%maplist(=(_),UV2)->sort(C42,C);%C4=[C|_];(writeln("Error: Specs are incompatible."),abort)),!.
%% and vv?**//**merge_lists2([N1,A1,_N2],Options2,Options61,Options9) :-Options2=[N4,A2,N3],(A1=A2->(findall(Options52,(%%member(Options61,Options6),((member([N4,A,N3],Options61),no_more_than_one_parent_of_each_node_before1([N4,A,N3],Options61),same_parents([N1,A1,_N21],[N4,A2,N3],Options61),delete(Options61,[N4,A,N3],Options5),append([[N1,A,N3]],Options5,Options52))->true;Options61=Options52)),[Options8]),writeln1(Options8),%%trace,%% merge back until forward fork with a predicate%%trace,writeln1(merge_back_until_forward_fork(1,N4,N1,Options8,[],Options9a)),merge_back_until_forward_fork(1,N4,N1,Options8,[],Options9a),sort(Options9a,Options9)%%Options8=Options9);Options61=Options9).
%%(logicaldisjunction(Result1,Value1,Value2)->true;(Result1=false)).
%%,! %% This may stop the program from working because of stopping it from trying statesupdate(C2,X,Y,M1,Ms,C4) :-delete(C2,[X,Y,M1],C3),append(C3,[[X,Y,Ms]],C4).member11([],_N,F,F) :- !.
%%,string_concat(B10,"\n",B101).
%%-> %% *** [VarLists] ?/**(VarLists03=VarLists02,%%retractall(varlists(_)),%%assertz(varlists(VarLists03)),Program2c=Program2);%%fail%%(Program2c=[],VarLists03=VarLists02,%%append(VarLists,VarLists02,VarLists03),retractall(varlists(_)),assertz(varlists(VarLists03)),fail)),!.%%),Count), **** [VarLists02] to VarLists02%%length(OutputVarList,Count),!.
%%;%%memberlp2c11(Functions2,Algorithm1,Algorithm2)).
%%;%%memberlp2p11(Functions2,Algorithm1,Algorithm2)).
%%a<c>n<c>get_num(N,N1) :-(string(N)->number_string(N0,N);N0=N),new_nums(New_nums),member([N0,N1],New_nums).
%%aggregate_all(count,(member(Item,VarLists),%%varlists(VarLists02),%%(%%notrace,try_interpret(Positivity,Debug,Query,Program2,VarLists),%%trace,%%writeln(here),%%trace,%%trace,add_furthest_rule1(New_rule_number1,Program2),%%(Program2=[[[n,add],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,=],[[v,c],[v,d]]]]]]->true%%trace%%;true),%%trace,(no_singletons(Vars2,Program5)),%%writeln1(Program2),%%writeln1([cawptest,passed,Program2]),abort,%%->true;(%%notrace,fail)), %%writeln1(interpret(Debug,Query,Program2,[VarLists])),%%(furthest_rule(A)->writeln(furthest_rule(A));true),%%notrace,%%!.
%%append([[n,Name]],Variables2,Variables3),Grammar6=[[Dbw_n,Name],Variables3,":-"],convert_to_grammar_part20(Body1,1,2,2,[],Body2),append(Grammar6,[Body2],Grammar7), %% 7 to 8 x%% member to check all doesn't work elsewhere, do ; to ->true;/**(maplist(basecasecondition(Variables3,[n,Name]),Grammar2)->((Variables1=[]->(Grammar9=[[n,Name],[[],[v,vgp]]],Grammar10=[[n,Name],["",[v,vgp]]],append(EndGrammar1,[[[n,Name],[[v,vgp],[v,vgp]]]],EndGrammar3),append(EndGrammara1,[[[],[[[n,Name],[[v,vgp],[v,vgp]]]]]],EndGrammara4));(Grammar9=[[n,Name],[[],[v,vgp]|Variables1]],Grammar10=[[n,Name],["",[v,vgp]|Variables1]],append(EndGrammar1,[[[n,Name],[[v,vgp],[v,vgp]|Variables1]]],EndGrammar3),append(EndGrammara1,[[[],[[[n,Name],[[v,vgp],[v,vgp]|Variables1]]]]],EndGrammara4)) ),append(Grammar2,[Grammar9,Grammar10,Grammar7],Grammar8),append(Grammara2,[[Grammar4,[Grammar9,Grammar10,Grammar7]]],Grammara4));(EndGrammar1=EndGrammar3,append(Grammar2,[Grammar7],Grammar8),append(Grammara2,[[Grammar4,[Grammar7]]],Grammara4))),**/append(Grammar2,[Grammar7],Grammar8),append(Grammara2,[[Grammar4,[Grammar7]]],Grammara4),convert_to_grammar_part11(Grammar5,Grammar8,Grammar3,_EndGrammar3,EndGrammar2,Grammara4,Grammara3,_EndGrammara4,EndGrammara2),!.
%%append([[n,Name]],Variables2,Variables3),Grammar6=[[Dbw_n,Name],Variables3,":-"],convert_to_grammar_part20(Body1,1,2,2,[],Body2),append(Grammar6,[Body2],Grammar7), %% 7 to 8 x%% member to check all doesn't work elsewhere, do ; to ->true;/**(maplist(basecasecondition(Variables3,[n,Name]),Grammar2)->((Variables1=[]->(Grammar9=[[n,Name],[[],[v,vgp]]],Grammar10=[[n,Name],["",[v,vgp]]],append(EndGrammar1,[[[n,Name],[[v,vgp],[v,vgp]]]],EndGrammar3),append(EndGrammara1,[[[],[[[n,Name],[[v,vgp],[v,vgp]]]]]],EndGrammara4));(Grammar9=[[n,Name],[[],[v,vgp]|Variables1]],Grammar10=[[n,Name],["",[v,vgp]|Variables1]],append(EndGrammar1,[[[n,Name],[[v,vgp],[v,vgp]|Variables1]]],EndGrammar3),append(EndGrammara1,[[[],[[[n,Name],[[v,vgp],[v,vgp]|Variables1]]]]],EndGrammara4)) ),append(Grammar2,[Grammar9,Grammar10,Grammar7],Grammar8),append(Grammara2,[[Grammar4,[Grammar9,Grammar10,Grammar7]]],Grammara4));(EndGrammar1=EndGrammar3,append(Grammar2,[Grammar7],Grammar8),append(Grammara2,[[Grammar4,[Grammar7]]],Grammara4))),**/append(Grammar2,[Grammar7],Grammar8),append(Grammara2,[[Grammar4,[Grammar7]]],Grammara4),convert_to_grammar_part11(Grammar5,Grammar8,Grammar3,_EndGrammar3,_EndGrammar2,Grammara4,Grammara3,_EndGrammara4,_EndGrammara2),!.
%%append_list([Text4,Text5,Text6,Text7],Phrases4).
%%checktypes1(Vars3,TypeStatements3,TypeStatements1,TypeStatements4).
%%checktypes1(Vars3,TypeStatements4a,TypeStatements2,TypeStatements4). %% ** in brac as wellchecktypes1(Vars1,TypeStatements1,TypeStatements2,TypeStatements4) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),TypeStatements1=[[[T,Dbw_brackets]|[TypeStatements3]]|TypeStatements4a],(types(on)->debug_call(Skip,[[T,Dbw_brackets],TypeStatements3]);true),(([Vars2|Vars3]=Vars1,checktypes1(Vars2,TypeStatements3,TypeStatements2,TypeStatements4))->((types(on)->debug_exit(Skip,[[T,Dbw_brackets],Vars1]);true),checktypes1(Vars3,TypeStatements4a,TypeStatements2,TypeStatements4));     (types(on)->debug_fail(Skip,[[T,Dbw_brackets],Vars1]);true))%%not(variable_name(Vars2)),,!. %% ** in brac as well/**checktypes1(Vars1,TypeStatements0,TypeStatements1,TypeStatements4) :-((number(Vars1)->true);string(Vars1)->true;Vars1=[n,_]),%%Vars1=[Vars2|Vars3],%%TypeStatements0=[TypeStatements2|TypeStatements3],checktypes2(Vars1,TypeStatements0,TypeStatements1,TypeStatements4).
%%checktypes1(Vars3,TypeStatements4a,TypeStatements2,TypeStatements4). %% ** in brac as wellchecktypes10(Vars1,TypeStatements1,TypeStatements2,TypeStatements4) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),TypeStatements1=[[[T,Dbw_brackets]|[TypeStatements3]]|TypeStatements4a],(types(on)->(%trace,%TypeStatements3=[TypeStatements32],simplify_types([[[T,Dbw_brackets]|[TypeStatements3]]],[],TypeStatements31),debug_call(Skip,TypeStatements31));true),(([Vars2|Vars3]=Vars1,checktypes10(Vars2,TypeStatements3,TypeStatements2,TypeStatements4))->((types(on)->debug_exit(Skip,Vars1);true),checktypes10(Vars3,TypeStatements4a,TypeStatements2,TypeStatements4));     (types(on)->debug_fail(Skip,Vars1);true))%%not(variable_name(Vars2)),,!. %% ** in brac as well/**checktypes1(Vars1,TypeStatements0,TypeStatements1,TypeStatements4) :-((number(Vars1)->true);string(Vars1)->true;Vars1=[n,_]),%%Vars1=[Vars2|Vars3],%%TypeStatements0=[TypeStatements2|TypeStatements3],checktypes2(Vars1,TypeStatements0,TypeStatements1,TypeStatements4).
%%findresult3(Arguments,Vars6,[],Result2)%%writeln(["FirstArgs",FirstArgs,"Result1",Result1,"Vars5",Vars5,"Vars4",Vars4]),%%writeln(["Vars1:",Vars1,"Vars4:",Vars4]),%%debug(on)->writeln([exit,[Function,[Result2]]]).
%%findresult3(Arguments,Vars6,[],Result2)%%writeln(["FirstArgs",FirstArgs,"Result1",Result1,"Vars5",Vars5,"Vars4",Vars4]),%%writeln(["Vars1:",Vars1,"Vars4:",Vars4]),%%debug(on)->writeln([exit,[Function,[Result2]]]).interpretstatement1(Functions0,_Functions,Query,Vars,Vars,true) :-Query=[_Function],        debug(on)->writeln([call,[Function]]),        interpret2(Query,Functions0,Functions0,_Result1),        debug(on)->writeln([exit,[Function]]).
%%findresult3(Arguments,Vars6,[],Result2)%%writeln1(["FirstArgs",FirstArgs,"Result1",Result1,"Vars5",Vars5,"Vars4",Vars4]),%%writeln1(["Vars1:",Vars1,"Vars4:",Vars4]),%%debug(on)->writeln1([exit,[Function,[Result2]]]).
%%findresult3(Arguments,Vars6,[],Result2)%%writeln1(["FirstArgs",FirstArgs,"Result1",Result1,"Vars5",Vars5,"Vars4",Vars4]),%%writeln1(["Vars1:",Vars1,"Vars4:",Vars4]),%%debug(on)->writeln1([exit,[Function,[Result2]]]).interpretstatement1(non-ssi,Functions0,_Functions,Query,Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%find_pred_sm(Reserved_words1),%trace,Query=[Function],        Function=[Dbw_n,F_name],        not(reserved_word2(F_name)),%trace,%not(reserved_word2(Function)),%debug_call(Skip,[Function]),        (interpret2(Query,Functions0,Functions0,_Result1)->true%debug_exit(Skip,[Function]);     fail%debug_fail(Skip,[Function])),!.
%%findrulesflowingtopv2(Program5,Program2,Rest,Rules3,Rules2).
%%group_by_same_destination2(B1,Options8,[],Options12),%%group_by_same_destination2(B1,Options8,Options12a,Options12) :-%%merge_back_until_forward_fork(1,1,_,Options1,Options2,Options3) :- %%append(Options1,Options2,Options3),%%!.merge_back_until_forward_fork(_N0,N4,_N1,Options8,Options9,Options10) :-(findall([N41,A,N6],(member([N41,_A10,N4],Options8),(member([N41,A,N6],Options8),not(N6=N4))),B),length(B,L),L>1),group_by_same_destination1(B,Options8,Options11,Options12),%%append(Options8,Options9,Options10).
%%length(Vars2,InModes1),append(Vars2,_,InputVars).
%%length(Vars2,InModes1),append(Vars2,_,InputVars).member(Var,InputVars),%%InputVars=[Var|InputVars2],%%delete(InputVars,Var,InputVars2),append(Vars1,[Var],Vars3),InModes2 is InModes1-1,get_members(InModes2,InputVars,Vars3,Vars2));Vars1=Vars2). %%InModes2->1equals_or([],_) :- true,!.%%fail.***equals_or(List,Item) :-List=[Item|_Rest],!.
%%random_member(A,String00),exposition(String00,_String01,Reasons_per_paragraph,Numbers,ML_db,Exposition1) :-length(List1,5), %% 5->1 paragraphs per expositionappend(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),findall([Number1,Exposition2],(%%trace,member(Number1,List1),%%concat_list(["What is group ",Number1," of 5 in the exposition that groups ideas about ",String01,"? "],String1),%%get_string(String1,either,one-not-ml,"","",%ML_db,Exposition2)%% ** Doesn't print this%%choose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),choose(N_page_ref,String00a1,String00a2,_String00a3,_String00a4,String00a5),concat_list(["",String00a5," (",String00a2,", p. ",N_page_ref,") "],Exposition2),reference(String00a1)),Exposition3),findall([Number2,Number3,String3,String3a,String5a,String5],(member(Number2,List1),member(Number3,List2),get_item_n(Exposition3,Number2,[_,Item1]),%%trace,concat_list(["<Exposition Paragraph ",Number2," of 5 - ",Item1,"> <Reason ",Number3," of ",Reasons_per_paragraph,">","\n","The Helper will ask you how the quote you are about to enter relates to the paragraph topic."],String2b),writeln(String2b),%%trace,exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5)),Exposition4),Exposition1=[Exposition3,Exposition4].
%%random_member(A,String00),exposition(String00,_String01,Reasons_per_paragraph,Numbers,ML_db,Exposition1) :-length(List1,5), %% 5->1 paragraphs per expositionappend(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),findall([Number1,Exposition2],(%%trace,member(Number1,List1),%%concat_list(["What is group ",Number1," of 5 in the exposition that groups ideas about ",String01,"? "],String1),%%get_string(String1,either,one-not-ml,"","",%ML_db,Exposition2)%% ** Doesn't print thischoose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),choose(String00a4,String00a5),concat_list([String00a5," (",String00a2,", p. ",N_page_ref,") "],Exposition2),reference(String00a1)),Exposition3),findall([Number2,Number3,String3,String3a,String5a,String5],(member(Number2,List1),member(Number3,List2),get_item_n(Exposition3,Number2,[_,Item1]),%%trace,concat_list(["<Exposition Paragraph ",Number2," of 5 - ",Item1,"> <Reason ",Number3," of ",Reasons_per_paragraph,">","\n","The Helper will ask you how the quote you are about to enter relates to the paragraph topic."],String2b),%writeln(String2b),%%trace,exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5)),Exposition4),Exposition1=[Exposition3,Exposition4].
%%random_member(A,String00),exposition(String00,_String01,Reasons_per_paragraph,Numbers,ML_db,Exposition1) :-length(List1,5), %% 5->1 paragraphs per expositionappend(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),findall([Number1,Exposition2],(%%trace,member(Number1,List1),%%concat_list(["What is group ",Number1," of 5 in the exposition that groups ideas about ",String01,"? "],String1),%%get_string(String1,either,one-not-ml,"","",%ML_db,Exposition2)%% ** Doesn't print thischoose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),choose(String00a4,String00a5),concat_list([String00a5," (",String00a2,", p. ",N_page_ref,") "],Exposition2),reference(String00a1)),Exposition3),findall([Number2,Number3,String3,String3a,String5a,String5],(member(Number2,List1),member(Number3,List2),get_item_n(Exposition3,Number2,[_,Item1]),%%trace,concat_list(["<Exposition Paragraph ",Number2," of 5 - ",Item1,"> <Reason ",Number3," of ",Reasons_per_paragraph,">","\n","The Helper will ask you how the quote you are about to enter relates to the paragraph topic."],String2b),writeln(String2b),%%trace,exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5)),Exposition4),Exposition1=[Exposition3,Exposition4].
%%random_member(A,String00),exposition(String00,_String01,Reasons_per_paragraph,Numbers,ML_db,Exposition1) :-num_paras_exp(Num_paras_exp),length(List1,Num_paras_exp), %% 5->1 paragraphs per expositionappend(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),findall([Number1,Exposition2],(%%trace,member(Number1,List1),%%concat_list(["What is group ",Number1," of 5 in the exposition that groups ideas about ",String01,"? "],String1),%%get_string(String1,either,one-not-ml,"","",%ML_db,Exposition2)%% ** Doesn't print this%%choose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),%%trace,choose(_N_page_ref,_String00a1,_String00a2,_String00a3,_String00a4,String00a5),%%end_note_number(End_note_number),%%add_1_to_end_note_number,concat_list(["",String00a5%%,"<sup>",End_note_number,"</sup>"%%," (",String00a2,", p. ",N_page_ref,") "],Exposition2)%%reference(String00a1,String00a2,N_page_ref,End_note_number)),Exposition3),findall([Number2,Number3,String3,String3a,String5a,String5],(member(Number2,List1),member(Number3,List2),get_item_n(Exposition3,Number2,[_,Item1]),%%trace,concat_list(["<Exposition Paragraph ",Number2," of 5 - ",Item1,"> <Reason ",Number3," of ",Reasons_per_paragraph,">","\n","The Helper will ask you how the quote you are about to enter relates to the paragraph topic."],String2b),writeln(String2b),%%trace,exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5)),Exposition4),Exposition1=[Exposition3,Exposition4].
%%random_member(A,String00),exposition(String00,_String01,Reasons_per_paragraph,Numbers,ML_db,Exposition1) :-num_paras_exp(Num_paras_exp),length(List1,Num_paras_exp), %% 5->1 paragraphs per expositionappend(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),findall([Number1,Exposition2],(%%trace,member(Number1,List1),%%concat_list(["What is group ",Number1," of 5 in the exposition that groups ideas about ",String01,"? "],String1),%%get_string(String1,either,one-not-ml,"","",%ML_db,Exposition2)%% ** Doesn't print this%%choose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),choose(N_page_ref,String00a1,String00a2,_String00a3,_String00a4,String00a5),concat_list(["",String00a5," (",String00a2,", p. ",N_page_ref,") "],Exposition2),reference(String00a1)),Exposition3),findall([Number2,Number3,String3,String3a,String5a,String5],(member(Number2,List1),member(Number3,List2),get_item_n(Exposition3,Number2,[_,Item1]),%%trace,concat_list(["<Exposition Paragraph ",Number2," of 5 - ",Item1,"> <Reason ",Number3," of ",Reasons_per_paragraph,">","\n","The Helper will ask you how the quote you are about to enter relates to the paragraph topic."],String2b),writeln(String2b),%%trace,exposition2(String00,Item1,ML_db,String3,String3a,String5a,String5)),Exposition4),Exposition1=[Exposition3,Exposition4].
%%random_member(Item,List),!.
%%rule(Program1,RuleName,NumInputs,NumOutputs,InputVars2,InputVars4,VarList,VarList2,OutputVars,Rule).
%%sort(Options31,Options3).
%%trace,%%writeln([a1,line1(X1,Y1,X2,Y2,Grid1,Grid3,Stroke1)]). %% check2(false,_X1,_Y1,X2,Y2,C2,M1,Ms,C4,Grid1,Grid2,Stroke1,Stroke2,S) :-update(C2,X2,Y2,M1,Ms,C4),%%writeln([b,update(C2,X2,Y2,M1,Ms,C4)]),(S=true->(Stroke2 is Stroke1+1,line1(X2,Y2,X2,Y2,Grid1,Grid2,Stroke2));(Stroke2=Stroke1,Grid2=Grid1)),!.%%gotostates(_,[],_Grid,_Grid2,_,_,_,_,_,_,_) :- fail, !.
%%trace,[Options2c]=Options2d,%%trace,string_to_list_a1(Rest,N3,N2,[],Options2e),%%trace,Options2d=[[[_,D1,D2]|D3]],Options2f=[[[1,D1,D2]|D3]],append(Options2f,Options2e,Options2b).
%%trace,[Options2c]=Options2d,%%trace,string_to_list_b1(Rest,N3,N2,[],Options2e),%%trace,Options2d=[[[_,D1,D2]|D3]],Options2f=[[[1,D1,D2]|D3]],append(Options2f,Options2e,Options2b).
%%underscore_occurs_once_per_var(Vars1,Program).
%%writeln(Grid1),    %%sort(YA1,YA2,YB1,YB2),%%print(XA1,YB1,XA2,YB2,Grid1,_Grid2),!.
%%writeln(["Now"]),%%get_time(TS),stamp_date_time(TS,T,local),writeln([dateandtime,T]),trialy2_15("a",R1),trialy2_15("r",R2),trialy2_15("t",R3),trialy2_15("e",R4),trialy2_15("s",R5),R=[R1,R2,R3,R4,R5],%%,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27],sort(R,RA),reverse(RA,RB),RB=[[_,Item]|_Rest],writeln(["Computer thought",A,"You thought",Item]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(15),N1 is N-1,(A=Item->S3 is S1+1;S3=S1),sectest(N1,S3,S2).
%%writeln(["Now"]),%%get_time(TS),stamp_date_time(TS,T,local),writeln([dateandtime,T]),trialy2_15("characterbreasoner",R1),trialy2_15("1451",R2),trialy2_15("texttobr2",R3),trialy2_15("daily_regimen_meditation",R4),trialy2_15("list_prolog_interpreter",R5),R=[R1,R2,R3,R4,R5],%%,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27],sort(R,RA),reverse(RA,RB),RB=[[_,Item]|_Rest],writeln(["Computer thought",A,"You thought",Item]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(15),N1 is N-1,(A=Item->S3 is S1+1;S3=S1),sectest(N1,S3,S2).
%%writeln(["Now"]),%%get_time(TS),stamp_date_time(TS,T,local),writeln([dateandtime,T]),trialy2_15("seed",R1),trialy2_15("water",R2),trialy2_15("dam",R3),trialy2_15("redblackduck",R4),trialy2_15("lorelle",R5),R=[R1,R2,R3,R4,R5],%%,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27],sort(R,RA),reverse(RA,RB),RB=[[_,Item]|_Rest],writeln(["Computer thought",A,"You thought",Item]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(15),N1 is N-1,(A=Item->S3 is S1+1;S3=S1),sectest(N1,S3,S2).
%%writeln([[Number,Return_line_true,Return_line_false,[n,Name],Result2]]).
%%writeln([[],in,trialy2]),abort.
%%writeln([e11,E11]).
%%writeln([here1,caw1(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program21,Programs3,Programs3)]),!.
%%writeln([here1,caw1(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program21,Programs3,Programs3)]),!.caw1a(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4,Ps1,Ps2) :-%%writeln([caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,OutputVarList,OutputVars,Program1,Program4)]),%%MaxLength2 is MaxLength - 1,%%writeln(["ml",MaxLength2]),reverse(InputVars2,InputVars5),random1(N0), N1 is N0/100, length(Rules,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,Rules),List2=[[RuleName,NumInputs,NumOutputs]|_Rest]);fail),%%writeln([member([RuleName,NumInputs,NumOutputs],Rules)]),%%writeln([rule(RuleName,NumInputs,NumOutputs,VarList,VarList2,Rule)]),rule(RuleName,NumInputs,NumOutputs,InputVars5,InputVars4,VarList,VarList2,Rule),%%writeln([inputVars1,InputVars1]),%%writeln([rule(RuleName,NumInputs,NumOutputs,InputVars5,InputVars4,VarList,VarList2,Rule)]),append(Program1,[Rule],Program3),%%writeln([inputVars3,InputVars3]),%%InputVars2=InputVars3,%%writeln([program4,Program4]),%%caw1a(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4,Ps,Ps) :-%%writeln([here,caw1a(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4,Ps,Ps)])caw(Query,PredicateName,Rules,MaxLength,VarList2,InputVars1,InputVars4,InputVars3,OutputVarList,OutputVars,Program3,Program4,Ps1,Ps2),!.
%%writeln([orphaned,D3]). %% Print orphaned towords(_,_,[],A,A,C,C,D,D) :- !.
%%writeln_3d(Grid1),    %%sort_3d(YA1,YA2,YB1,YB2),%%print_3d(XA1,YB1,XA2,YB2,Grid1,_Grid2),!.%% Sorts _3d(X1,Y1) and _3d(X2,Y2) by Xsortbyx_3d(X1,Y1,X2,Y2,X1,Y1,X2,Y2) :-X2 >= X1.
%(Pixel1=[*]->Pixel="*";Pixel=" "),%write(Pixel),write("\t")%),_),%nl.
%(member(C,Nums)),!.
%* use a n n not a-x etc/*group_consecutive_duplicates([], []):-!.
%***%br(List1,BrDict03,BrDict21,BrDict03t,BrDict03t21,Brth,BrthDict03,BrthDict041,Room,RoomDict03,RoomDict041,PartOfRoom,PartOfRoomDict03,PartOfRoomDict041,Direction,DirectionDict03,DirectionDict041,ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict041,ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict041),%N2 is N1-1,%br2(List1,BrDict21,BrDict2,BrDict03t21,BrDict03t2,N2,Brth,BrthDict041,BrthDict04,Room,RoomDict041,RoomDict04,PartOfRoom,PartOfRoomDict041,PartOfRoomDict04,Direction,DirectionDict041,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict041,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict041,ObjectToFinishDict04),!.
%,writeln1([grid2,Grid2]).
%->true;find_2_steps(_Last,Formula_Instances1,FI3,FI4) :-%trace,append(Formula_Instances1,FI3,FI4),%F13=Formula_Instances2,!.
%Section,Instrument,Playingrhythm:-%(MelodyParts,HarmonyParts) :-%trace,%writeln("Please enter the vocal rhythms*")%findall(R1,(member([Section,Instrument,1],MelodyParts)))rhythm1(R),retractall(rhythm(_)),assertz(rhythm(R)),!.
%append(Options45,Options31,Options3).
%atom_string(Output,Output1),!.
%br(List1,BrDict03,BrDict21,AlgDict_x,AlgDict_x21,AlgDict,AlgDict21,L1,L3),%N2 is N1-1,%br2(List1,BrDict21,BrDict2,AlgDict_x21,AlgDict_x2,AlgDict21,AlgDict2,N2,L3,L2),!.
%catch((lyrics2_m2m(Form1,[],Lyrics,[],_Names,0,Maxlength)),_,%lyrics_m2m(Form1,Lyrics,Maxlength)).
%debug_call(Skip,[[Dbw_n,"[]"]]).
%debug_call(Skip,[[Dbw_n,Dbw_or]]).
%dfs1(C4,D,Sent,DB2,DB1,N1,Chain4,Chain2).
%dfs1(C4,D,Sent,DB4,DB3,N1,Chain4,Chain2))).%,%!.
%findall(L12,((member(L31,L3),atom_string(S33,L31),((S33='')->L12=(*); (atom_concat(S34,_,S33),((atom_length(S34,1)->(((char_type(S34,alpha)->L12=a;(char_type(S34,digit),L12=n))->true;L12=(*)));fail%L1=(*)%)))))),L13),maplist(=(_), L1)),L11),!.
%findall(L12,((member(L31,L3),atom_string(S33,L31),((S33='')->L12=(*); (atom_concat(S34,_,S33),((atom_length(S34,1)->(((char_type(S34,alpha)->L12=a;(char_type(S34,digit),L12=n))->true;L12=(*)));fail%L1=(*)%)))))),L13),maplist(=(_), L1)),L11),!.%forall(member(S32,L3),(atom_string(S33,S32),atom_concat(S34,_,S33),atom_length(S34,1),char_type(S34,alpha)))->L1=a;(char_type(S34,digit)->L1=n;L1=(*))))),L11),!.
%findall(Types,member([Types,_],Types31),Types3),%findall(VD1,member([_,VD1],Types31),VD).
%findall([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1)%,number(VN)%),Instances1a),!. % variables and values% call from sf x% formulas may not be printed% sums, subtractions - in same row or col (get all same tables, rows, cols, item nums)summarise_formulas2(%_Ad2,_Q2,A20,A26) :-find_instances(A20,Instances1a),%trace,group_by_table_rows(Instances1a,Instances1b),%test_r(Instances1a,Instances1b),findall(X,(member(X1,Instances1b),find_row_sums(_A20,X1,X)),Instances1c1),% add [x_span,[var,_,_,Col,_,[... to total headers%trace,((append([First_data_row],_,Instances1c1),sub_term_wa([x_span|_], First_data_row, Instances1d),findall([R4,C4],(member(X1,Instances1d),X1=[_A0,[x_span,[var,_T4,R4,C4|_]]]),RCs),RCs=[[R,_]|_],R1 is R-1,foldr(append,Instances1c1,Instances1c),%trace,foldr(put_sub_term_wa_ae,Instances1c,A20,A221),sub_term_wa([function,_,_,_,_,_], A221%Instances1c1, Instances1e),findall(X,(member([_,C],RCs),member([Add,[function,T,R1,C,F1,F2]],Instances1e),X=[Add,[function,T,R1,C,[x_span,[var,T,R1,C,-,F1,[],[],[],[],[]]],[x_span,[var,T,R1,C,-,F2],[],[],[],[],[]]]]),Instances1e1),foldr(put_sub_term_wa_ae,Instances1e1,A221%Instances1c1,A22)%sub_term_wa([var|_], A222, Instances1ef))->true;foldr(put_sub_term_wa_ae,Instances1c1,A20%Instances1c1,A22)%Instances1c1=Instances1ef%Instances1c2),% by table x, row/col, item% forms across each of these to simplify% group items as row cells and find sum, subtraction% use forms not trcis (convert)% process (find r/c sums in) rows/cols x: with 1 num per cell% X to simplifying x% process with foldr% simplify by i, row/col, (table x) - /*find_instances(A22,Instances1a11),group_by_table_rows(Instances1a11,Instances1b11),find_row_subtractions(A22,Instances1b11,Instances1c11)foldr(put_sub_term_wa_ae,Instances1c11,A22,A23),find_instances(A23,Instances1c1),group_by_table_cols(Instances1c1,Instances1d),find_col_sums(A23,Instances1d,Instances1e)foldr(put_sub_term_wa_ae,Instances1e,A23,A24),find_instances(A24,Instances1c12),group_by_table_cols(Instances1c12,Instances1d2),find_col_sums(A24,Instances1d2,Instances1e2)foldr(put_sub_term_wa_ae,Instances1e2,A24,A25),*/%A20=A22,%trace,%test_r(A22,A20),(A22=A20->A26=A20;summarise_formulas2(A22,A26)),!.group_by_table_rows(Instances1a,Instances1b) :-findall(T3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),T3s),sort(T3s,T3s1),findall(R3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),R31),sort(R31,R5),/*findall(IN3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),IN31),sort(IN31,IN35),*/findall(X,(member(T31,T3s1),member(R51,R5),%member(IN36,IN35),findall(X1,(member(X1,Instances1a),X1=[Address, [var,T31,R51,C3,_IN36,V3,VN,TP3,RP3,CP3,INP3]]),X)),Instances1b),%foldr(append,Instances1b1,Instances1b),!.
%findall([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1)%,number(VN)%),Instances1a),!. % variables and values% call from sf x% formulas may not be printed% sums, subtractions - in same row or col (get all same tables, rows, cols, item nums)summarise_formulas2(%_Ad2,_Q2,A20,A26) :-find_instances(A20,Instances1a),%trace,group_by_table_rows(Instances1a,Instances1b),%test_r(Instances1a,Instances1b),findall(X,(member(X1,Instances1b),find_row_sums(_A20,X1,X)),Instances1c1),foldr(append,Instances1c1,Instances1c),%trace,foldr(put_sub_term_wa_ae,Instances1c,A20,A22),% by table x, row/col, item% forms across each of these to simplify% group items as row cells and find sum, subtraction% use forms not trcis (convert)% process (find r/c sums in) rows/cols x: with 1 num per cell% X to simplifying x% process with foldr% simplify by i, row/col, (table x) - /*find_instances(A22,Instances1a11),group_by_table_rows(Instances1a11,Instances1b11),find_row_subtractions(A22,Instances1b11,Instances1c11)foldr(put_sub_term_wa_ae,Instances1c11,A22,A23),find_instances(A23,Instances1c1),group_by_table_cols(Instances1c1,Instances1d),find_col_sums(A23,Instances1d,Instances1e)foldr(put_sub_term_wa_ae,Instances1e,A23,A24),find_instances(A24,Instances1c12),group_by_table_cols(Instances1c12,Instances1d2),find_col_sums(A24,Instances1d2,Instances1e2)foldr(put_sub_term_wa_ae,Instances1e2,A24,A25),*/%A20=A22,%trace,%test_r(A22,A20),(A22=A20->A26=A20;summarise_formulas2(A22,A26)),!.group_by_table_rows(Instances1a,Instances1b) :-findall(T3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),T3s),sort(T3s,T3s1),findall(R3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),R31),sort(R31,R5),/*findall(IN3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),IN31),sort(IN31,IN35),*/findall(X,(member(T31,T3s1),member(R51,R5),%member(IN36,IN35),findall(X1,(member(X1,Instances1a),X1=[Address, [var,T31,R51,C3,_IN36,V3,VN,TP3,RP3,CP3,INP3]]),X)),Instances1b),%foldr(append,Instances1b1,Instances1b),!.
%findall([C,D],append(C,D,A),B),!.
%forall(member(S32,L3),(atom_string(S33,S32),atom_concat(S34,_,S33),atom_length(S34,1),char_type(S34,alpha)))->L1=a;(char_type(S34,digit)->L1=n;L1=(*))))),L11),!.
%log_finder(_,_,K,J).
%longest_to_shortest_substrings(E1,[],F),%flatten(D,D2),(D2=[]->D21=[];D21=[D2]),%flatten(D1,D3),(D3=[]->D31=[];D31=[D3]),%flatten(F,F2),(F2=[]->F21=[];F21=[F2]),%subtract()%foldr(append,[%B,%D21,D31,F21],C).
%remove_chains_of_one_children1(N2,Options4,Options5,Options3),%writeln1([options4,Options4]),%Options4=[[N3,_,_]|_]%)%;fail).%%,!.
%reverse(Predicates4,Predicates2).
%sort(D,B1),%reverse(B1,B).%longest_to_shortest_substrings([],A,A) :-!.
%sort(N10,N11)%maplist(equals(N3),N2).
%sort(Options32,Options3).
%sort(Types3,Types4).
%string_codes(B,B1),!.
%string_concat("%",F3,F2),%string_concat(F,"%",F3).
%trace,%pp_lp2p2(Body,'',B1,1).
%trace,debug_call(Skip,[[Dbw_n,Dbw_findall]|Args]).
%trace,maplist(append,[[List3]],[List31]),%(false%maplist(append,[[Args2,List31]],[[Args52]])%->true;maplist(append,[[Args2,List31]],[Args52]),%),%((trace,%is_list(Args52),Args52=[Args53],is_list(Args53))->%Args51=Args53;Args51=Args52),%concat_list(Args51,Args5),%findall(E2,(member(E1,Args52),%(is_list(E1)->(concat_list(E1,E3),[E3]=E2);E1=E2)),Args5),%term_to_atom(Args52,Args53),%string_atom(Args5,Args53),replace_a_word(A1,B1,A3,Args52,Args3))).
%trace,%pp_lp2p2(Body,'',B1,1).
%try_reading_number(CStrings2,Choice)).
%update dicts in other cases% add space afterwardsremove_spaces_from_start("",B,B) :- !.
%write(Atom),!.
%writeln(String1).
%writeln(not(is_var_s2a(Val))),%not(is_var_s2a(Val)).
%writeln1(Grid2).
%writeln1(List3).
(%trace,maplist(append,[[List2,[A1]]],List52),maplist(append,[List52],[List51]),concat_list(List51,List5),replace_a_word1(A1,Ls,[List5],List3))).
(html_api_maker_or_terminal(html)->(%term_to_atom(Term,Atom),format(Atom,[])%,format('\n',[]));write(Atom)),!.
(html_api_maker_or_terminal(html)->(%term_to_atom(Term,Atom),format(Atom,[]),format('<br>\n',[]));writeln(Atom)),!.
(html_api_maker_or_terminal(html)->(%term_to_atom(Term,Atom),writeln(Term%Atom%,[]),format('<br>\n',[]));writeln(Term)),!.
****/restlast([],_,_,_) :- fail, !.restlast([Last],Rest,Rest,Last) :-Last=[v,_],!.
**//**remove_chains_of_one_children1(N0,Options1,Options2,Options3) :-%trace,%%remove_chains_of_one_children2(N0,NM1,Options1,[],_Options413),%%((NM1=[-,_]->true;(member([-,String],Options1),string_length(String,NM1)))->fail;true),%trace,findall([N0,A,N1],(member([N0,A,N1],Options1),remove_chains_of_one_children2(N1,N3,Options1,[],_Options41)),NN2),subtract(Options1,NN2,Options6),findall([N0,A,N1,A4,N3],(member([N0,A,N1],Options1),remove_chains_of_one_children2(N1,N3,Options1,[],_Options412),member([_N5,A4,N3],Options1)),NN3),%trace,findall(A4,(member([N0,A,N1,A4,N3],NN3)),NN5),sort(NN5,NN51),findall([N0,A412,N3],(member(A41,NN51),member([N0,A412,N1,A41,N3],NN3)),NN6),writeln1(NN6),%trace,length(NN6,NN6L),((NN6L>1,NN6=[[NN6M1,NN6M2,_]|NN6R])->((member([NN6M1,NN6M2,_],NN6R),delete(NN6R,[NN6M1,NN6M2,_],NN62))->NN61=NN62;NN61=NN6);NN61=NN6),%trace,findall(A,(member([N0,A,N1,A4,N3],NN3)),NN7),sort(NN7,NN71),findall([N0,A12,N3],(member(A1,NN71),member([N0,A1,N1,A12,N3],NN3)),NN8),writeln1(NN8),%trace,length(NN8,NN8L),((NN8L>1,NN8=[[NN8M1,NN8M2,_]|NN8R])->((member([NN8M1,NN8M2,_],NN8R),delete(NN8R,[NN8M1,NN8M2,_],NN82))->NN81=NN82;NN81=NN8);NN81=NN8),%trace,append(NN61,NN81,Options4a),%findall(_,(member(Options4c,Options4b),%%writeln1(remove_chains_of_one_children2(N1,N3,Options1,[],_Options4)),%%append(Options4,[[N0,A,N3]],Options4a),append(Options2,Options4a,NNA),%trace,findall(NND,(member([_NNB,_NNC,NND],NNA)),NNE),sort(NNE,NNE1),findall(NNI,(member(NNE2,NNE1),findall([NNF,NNG,NNE2],(member([NNF,NNG,NNE2],NNA),!),[NNI])),NNH),NNH=Options5,remove_chains_of_one_children1(N0,Options6,Options5,Options3).
**/generate_file_name(File1,File2) :-get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list(["file",Year,Month,Day,Hour1,Minute1,Seconda,".txt"],File1),concat_list(["file",Year,Month,Day,Hour1,Minute1,Seconda,".html"],File2).
**/generate_file_name(String01,File1) :-get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list([String01," file",Year,Month,Day,Hour1,Minute1,Seconda,".txt"],File1).
**/unique1(A,Items2,Items3) :-%trace,unique1a(A,Items2,Items3).
**//**vyes(P):-%%((not(var(V)),(member([[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,add0],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]],P),writeln("pyes*****")).%%,(var(Program2)->true;(member([[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],Program2)))).
**//**remove_chains_of_one_children2(N1,N3,Options1,Options2,Options3) :-findall([N1,A,N2],member([N1,A,N2],Options1),[_]),member([N1,A,N2],Options1),delete(Options1,[N1,A,N2],Options4),writeln1(remove_chains_of_one_children2(N1,N3,Options1,Options2,Options3)),%(member([N2,_,N22],Options1),member([N2,_,N23],Options1),not(N22=N23)),remove_chains_of_one_children2(N2,N3,Options4,Options2,Options3).
**//**string(String) --> list(String).list([]) --> [].
**/cawptest2(7,add0,[[[n,+],2,1%% Modes=2 inputs, 1 output],[[n,-],2,1]],4,1,%% MaxPredicates is not the number of predicates in the result, it is the number of non-dictionary predicates in the result.
**/log(Length,A),log(10,C),B is floor(A/C)+1,numbers(B,1,[],D),findall(R,(member(_E,D),findr4(R1),number_string(R1,R)),RL),B2 is floor(10^((floor(A/C)+1))-1),formr5(RL,B2,Length,R5),findr(R5,List,R).
**/restlast([],_,_,_) :- fail, !.restlast([Last],Rest,Rest,Last) :-atom(Last),!.
**/restlast([],_,_,_) :- fail, !.restlast([Last],Rest,Rest,Last) :-atom(Last),!.restlast(Last,Rest,Rest,Last) :-length(Last,1),!.
**/%% put [-,*] in/**merge_back_until_forward_fork1(_,[],Options7,Options7,N41,N41) :- !.
**/%trialy2([],R) :-%R=[[_,['C']]].
**/**/restlast([],_,_,_) :- fail, !.restlast([Last],Rest,Rest,Last) :-Last=[v,_],!.
**//**remove_chains_of_one_children2(N1,N3,Options1,Options2,Options3) :-findall([N1,A,N2],member([N1,A,N2],Options1),Options4),(not(Options4=[_])->%%remove_chains_of_one_children3(Options2,Options4,Options3)(%%append(Options2,Options4,Options5),Options2=Options5,%%(member([N2,_,N22],Options1),member([N2,_,N23],Options1),not(N22=N23)),remove_chains_of_one_children11(Options4,Options5,Options3))),Options4=[[N3,_,_]|_].
**/trialy2([],R) :-R=[[_,['C']]].
**/trialy2([],R) :-R=[[_,['C']]].%%writeln([[],in,trialy2]),abort.trialy2(Question,List,R) :-%%random_member(A,List),term_to_atom(List,List1),repeat,writeln([Question,%%"Please enter an item from:",List1]),read_string(user_input, "\n", "\r", _End2, A1),atom_to_term(A1,A,_),%%((number_string(A,A1)->true;atom_string(A,A1))->true;,member(A,List),R=[[_,A]]./**length(List,L),Trials is L*3,trialy22(List,Trials,[],R).**/trialy22([],_,R,R) :- !.trialy22(List,Trials,RA,RB) :-List=[Item|Items],trialy21(Item,Trials,R1),append(RA,[R1],RC),trialy22(Items,Trials,RC,RB),!.
*//*pft_expand_types1(Data,Types1,Types2) :-get_lang_word("t",T),%get_lang_word("string",Dbw_string),Data=[T,A],%string(Data),append(Types1,[[T,A]],Types2),!.
*/add_to_table(A) :-table_s2g(Table1),append(Table1,[A],Table2),retractall(table_s2g(_)),assertz(table_s2g(Table2)),!.
*/shapes([%[1,/*[[[*,*]]],*/[[[*,*]]/*[[-,-,-,-],[-,*,-,-],[-,-,-,-]],[[-,*,-,-],[*,*,*,-],[-,*,-,-]]%*[[-,-,-],[-,*,-],[-,-,-]]*/%]]]).convert_to_coords(Shapes,%Box_X,Box_Y,Box_Z,Shapes_coords) :-  % check shape is in a box findall(Coords,(member(Shape,Shapes), length(Shape,Z), member(Shape1,Shape), length(Shape1,Y), member(Shape2,Shape1), length(Shape2,X), %trace, findall(-,(member(Shape10,Shape), findall(-,(member(_Shape20,Shape10)),Y1), (length(Y1,Y)->true; (writeln([shape,%ID, 'has an incorrect y length.']),abort))),Z1), (length(Z1,Z)->true; (writeln([shape,%ID, 'has an incorrect z length.']),abort)), % convert 3D asterisk shapes to lists of co-ordinates numbers(Z,1,[],NZ), numbers(Y,1,[],NY), numbers(X,1,[],NX), findall([NX11,NY11,NZ11],( member(NZ1,NZ),get_item_n(Shape,NZ1,Shape11), member(NY1,NY),get_item_n(Shape11,NY1,Shape12), member(NX1,NX),get_item_n(Shape12,NX1,Shape13), Shape13='*', NX11 is NX1-1, NY11 is NY1-1, NZ11 is NZ1-1),Coords) ),Shapes_coords).
*/   add_line_numbers_to_algorithm_statement1(Statement,Result1,Number1,Number2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,%(Statement=[[n,cut]]->trace;true),((Statement=[[Dbw_n,Name],Arguments],not(Name=Dbw_findall),Arguments=Result2,%findall(Argument,(member(Argument,Arguments),(predicate_or_rule_name(Argument))),Result2),Result1=[[Number1,[Dbw_n,Name],Result2]])->true;(Statement=[[Dbw_n,Name]],Result1=[[Number1,[Dbw_n,Name],[]]])),Number2 is Number1+1.
*/%*/%find_g([],G,G) :-!.%find_g(Ts,G1,G2) :-%Ts=[T1|Ts2]./*sub_term_wa(T1,[_,[]],Insts), % find terminals* see stwafind_g1(T1,G1,G3),find_g(Ts2,G3,G2).
*/term_to_atom(Term,Atom),%atom_concat(Atom,"\n",Atom1),%append_retry_back_stack([text,Atom1]),!.
*/%loop_replace_s2a([],F,F) :- !.%loop_replace_s2a([[Vso1,Vso2]|Vso3],F1,F2) :-%replace2(F1,Vso1,Vso2,F3),%loop_replace_s2a(Vso3,F3,F2),!.
*/word_frequency_count2(Words,Counts) :-    maplist(downcase_atom, Words, LwrWords),    msort(LwrWords, Sorted),    clumped(Sorted, Counts),!.
*/%delete_last(A,B) :-%reverse(A,C),%(C=[B|_E]->true;(C=[],B=[])).
*/%/*append1(L1,A0,A01,A02) :-%append(A2,B2,A0),%append(C2,D,B2),append(A1,B1,A0),append(C1,D1,B1),append(A01,[A1,C1],A03),L2 is L1-1,append1(L2,D1,A03,A02).
*/%/*collect_simplify_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[[T,Dbw_brackets],Types4]|Types6],%trace,collect_simplify_types(Types4,[],Data2),%[Data2|Data2a]),append_list3([Types1,Data2],Types2a),collect_simplify_types(Types6,Types2a,Types2),!.
*/%replace_vars(Term,Vars1,Vars2,First_vars1,First_vars2) :-%replace_vars0(Term,Vars1,Vars2,First_vars1,First_vars2),!.
*//*alg_to_modes2(Body1,%Body2,%[],Body2,Var_modes1,%var ModesVar_modes2,%var ModesModes1,%Modes1Modes2) :-*/insert_loop1([loop1,Ordered_pred_nums323],[],Ordered_pred_nums1b) :- Ordered_pred_nums1b=[[loop1,Ordered_pred_nums323]],!.
*/algorithm_decision_tree(File_list,File_list1,File_list2,String_dict,Dictionary,Reversed_dictionary2) :-%trace,%writeln1(algorithm_decision_tree(File_list,File_list1,File_list2,String_dict,Dictionary,Reversed_dictionary2)),File_list=[File_list302|File_list4],string_concat(File_list5,_E,File_list302),string_length(File_list5,1),string_codes(File_list5,File_list5_c),%phrase(word1(File_list5_c),_),(false%File_list302=File_list3->true;(downcase_atom(File_list302,File_list301),atom_string(File_list301,File_list3))),(%trace,member(File_list3,String_dict)->Choice=File_list3;(%trace,algorithm_decision_tree1(Dictionary,Reversed_dictionary2,File_list302,Suggestions),%repeat,number_menu(File_list302,Suggestions,Choice2),%string_concat(Choice2,"01",Choice3),(%trace,is_upper(File_list5_c)->((string(Choice2)->Choice2=Choice211;concat_list(Choice2,Choice211)),string_concat(Choice4,E1,Choice211),string_length(Choice4,1),upcase_atom(Choice4,Choice5),string_concat(Choice5,E1,Choice));Choice2=Choice))),%trace,%(Choice=[Choice_b]->true;Choice_b=Choice),(string(Choice)->Choice_a=Choice;concat_list(Choice,Choice_a)),capitalise_if_necessary(File_list302,Choice_a,Choice_a1),append(File_list1,[Choice_a1],File_list6),algorithm_decision_tree(File_list4,File_list6,File_list2,String_dict,Dictionary,Reversed_dictionary2).
*/split11([]%%List,_L16,%N,N, A,A) :- %L2 is L16*2,length(List,L3),L3=<L2, !.
*/texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,[auto,on]) :-texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,0,[auto,on]),!.
*/ %term_to_list2(T2,L3,L2).
/*%maplist(append,[Grid2],[Grid32]),%maplist(append,[Grid32],[Grid3]),flatten(Grid2,Grid3),%trace,maplist(append,[[["P3","\n",X," ",Y,"\n","255","\n"],Grid3,["\n"]]],[Grid31]),concat_list(Grid31,Grid4),%writeln("Enter file name, ending with \".ppm\"."),%read_string(user_input, "\n", "\r", _, File),%term_to_atom(Grid4,D85),string_atom(D85,Grid4),(open_s(File3,write,Stream2),write(Stream2,D85),close(Stream2)),!.*/colour_background(X,Y,File_contents1) :-numbers(X,1,[],XN),numbers(Y,1,[],YN),findall([X2,Y2,255,255,255],(member(X2,XN),member(Y2,YN)),File_contents1).
/*%sub_term_types_wa([all([string])],Ts,In1), % find terminal lists%sub_term_types_wa([all_resolution_level([string])],Ts,In2),sub_term_types_wa([all([string])],Ts,In1),%append(In1,In2,In3),%findall(A,member([_,A],In1),A1),find_repeating_structures(In1,A11),find_recursive_structures,% find f>=2 of list l 2.. % find and flatten length 2,3...
/*collect_vars(Item1,[],Vars1),collect_vars(Item2,[],Vars2),%trace,findall(First_args5,(member([First_args3,Value],First_args1),(member(First_args3,Vars1)->First_args5=[First_args3,Value];((member(First_args3,Vars2),not(Vars1=[]))->First_args5=[Value,First_args3]->true;First_args5=[First_args3,Value]))),First_args6),%maplist(append,[First_args0],[First_args]),%trace,findall([First_args3,Value],(member([First_args3,Value],First_args6),(not(member(First_args3,Vars2))->true;(member(First_args3,Vars1),member(First_args3,Vars2)))),First_args0),maplist(append,[First_args0],[First_args])),First_args4),delete(First_args4,[],First_args2),%maplist(append,[First_args4],[First_args2]),!.
/** repeat,findall(Phils1,(member(_,PhilsLengthList),random_member(Phils1,Phil4)),Phils2),reverse(Phils2,Phils3),Phils3=[Phil6|Phils4],reverse(Phils4,Phils5),findall(_,(member(Phil5,Phils5),writeln1(Phil5),nl,writeln1("because"),nl),_),writeln1(Phil6),nl,write("1-Continue or 2-End: "),read_string(user_input, "\n", "\r", _End, Input),(Input="2"->abort;fail).
/*Cbr=[[_A2,_B2,C2]],X is Scale*5,Y is Scale*9,retractall(x1(_)),assertz(x1(X)),%trace, prettyprint_scale1(C2,Y),writeln(''), prettyprint_scale1A(C2,Y),!. %% 2*/scale([Scale,C],C1) :-background(Scale,Background),%writeln1([b,Background]),%trace,findall([Scale,C1],member(C1,C),C2),foldr(scale2,C2,Background,C1).
IV3s=[IV3|IV3s3],iv3s1(IV3,Program0,IV3s1,IV3s4),iv3s0(IV3s3,Program0,IV3s4,IV3s2).
Rule=[_PredicateName,Vars],restlast(Vars,[],_Rest,IV3),delete(IV3s1,IV3,IV3s2).
append(C,D,X1),append(Find,E,D),length(C,L),length(Find,FL),%L1 is L+1,%L2 is L1+FL,%numbers(L2,L1,[],Ns),%findall(Y,(member(Y1,Ns),get_item_n(X1,Y1,[Ad,X])),Y2),get_item_n(Inst1,L,[Ad,X]),append(Ad1,[N2],Ad),get_sub_term_wa(List,Ad1,It2),%N21 is N2,length(Before_list,N2),length(Sub_list,FL),append(Before_list,L1,It2),append(Sub_list,After_list,L1),get_var_num(N),foldr(append,[Before_list,[[r,N,Sub_list]],After_list],It3),put_sub_term_wa(It3,Ad1,List,Result),!.
append(Options8,Options9,Options10)).
append(Suggestions1,Suggestions11,Suggestions_a),sort(Suggestions_a,Suggestions_b),reverse(Suggestions_b,Suggestions_c),length(Suggestions_c,Suggestions_c_l),(Suggestions_c_l<20->Sugg_l=Suggestions_c_l;Sugg_l=20),length(Suggestions,Sugg_l),append(Suggestions,_,Suggestions_c).
append([[n,Name]],Variables2,Variables3),Grammar6=[[n,grammar_part],Variables3,":-"],convert_to_grammar_part20(Body1,1,2,2,[],Body2),append(Grammar6,[Body2],Grammar7),%% member to check all doesn't work elsewhere, do ; to ->true;(maplist(basecasecondition(Variables3,[n,Name]),Grammar2)->((Variables1=[]->(Grammar9=[[n,grammar_part],[[n,Name],[],[v,vgp]]],Grammar10=[[n,grammar_part],[[n,Name],"",[v,vgp]]],append(EndGrammar1,[[[n,grammar_part],[[n,Name],[v,vgp],[v,vgp]]]],EndGrammar3));(Grammar9=[[n,grammar_part],[[n,Name],[],[v,vgp]|Variables1]],Grammar10=[[n,grammar_part],[[n,Name],"",[v,vgp]|Variables1]],append(EndGrammar1,[[[n,grammar_part],[[n,Name],[v,vgp],[v,vgp]|Variables1]]],EndGrammar3)) ),append(Grammar2,[Grammar9,Grammar10,Grammar7],Grammar8));(EndGrammar1=EndGrammar3,append(Grammar2,[Grammar7],Grammar8))),convert_to_grammar_part11(Grammar5,Grammar8,Grammar3,EndGrammar3,EndGrammar2),!.
back_translate2(Ctt_input0,Ctt_input1a,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang,Translation3,Ctt_orig1_orig2_1,Ctt_orig_tran_1) :-%trace,remove_spaces_from_start(Ctt_input1a,"",Ctt_input1),(((Ctt_input1="\n"->true;(Ctt_input1="\r"->true;Ctt_input1="")),Translation3=Ctt_input1,%(string_concat(Translation1,Ctt_input1,Translation3),Ctt_orig1_orig2=Ctt_orig1_orig2_1,Ctt_orig_tran=Ctt_orig_tran_1)->true;((member([From_lang,To_lang,Ctt_input1,Ctt_orig1_orig2_11],Ctt_orig1_orig2),member([From_lang,To_lang,Ctt_orig1_orig2_11,Translation3],Ctt_orig_tran),%Ctt_orig1_orig2=Ctt_orig1_orig2_1,Ctt_orig_tran=Ctt_orig_tran_1append_if_needed(Ctt_orig1_orig2,[[From_lang,To_lang,Ctt_input0,%*** not earlier % here tooCtt_orig1_orig2_11]],Ctt_orig1_orig2_1),append_if_needed(Ctt_orig_tran,[[From_lang,To_lang,Ctt_orig1_orig2_11, % here tooTranslation3]],Ctt_orig_tran_1))->true;((member([From_lang,To_lang,Ctt_input1,Translation3],Ctt_orig_tran),Ctt_orig1_orig2=Ctt_orig1_orig2_1,Ctt_orig_tran=Ctt_orig_tran_1)->true;((member([From_lang,To_lang,Ctt_input1,Ctt_orig1_orig2_11],Ctt_orig1_orig2),not(member([From_lang,To_lang,Ctt_orig1_orig2_11,Translation3],Ctt_orig_tran)),%translate_ctt2(Ctt_orig1_orig2_11,% or ctinput%From_lang,To_lang,Translation3),%translate_ctt2(Translation3,% or ctinput%To_lang,From_lang,Ctt_orig1_orig2_11),%trace,((back_translate_and_check(Ctt_input0,Ctt_orig1_orig2_11,% or ctinputFrom_lang,To_lang,Translation3),append_if_needed(Ctt_orig_tran,[[From_lang,To_lang,Ctt_orig1_orig2_11, % here tooTranslation3]],Ctt_orig_tran_1),%trace,Ctt_orig1_orig2=Ctt_orig1_orig2_1)->true;fail%check_similar_sentences(Ctt_input0,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang,Translation3,Ctt_orig1_orig2_1,Ctt_orig_tran_1) ))->true;((not(member([From_lang,To_lang,Ctt_input1,Translation3],Ctt_orig_tran)),((not(member([From_lang,To_lang,Ctt_input1,Ctt_orig1_orig2_1],Ctt_orig1_orig2)),((%translate_ctt2(Ctt_input1,% or ctinput%From_lang,To_lang,Translation3),%translate_ctt2(Translation3,% or ctinput%To_lang,From_lang,Ctt_input1),back_translate_and_check(Ctt_input0,Ctt_input1,% or ctinputFrom_lang,To_lang,Translation3),append_if_needed(Ctt_orig_tran,[[From_lang,To_lang,Ctt_input1, % here tooTranslation3]],Ctt_orig_tran_1),Ctt_orig1_orig2=Ctt_orig1_orig2_1)->true;check_similar_sentences(Ctt_input0,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang,Translation3,Ctt_orig1_orig2_1,Ctt_orig_tran_1) ))))))))),!.
catch((lyrics2(Form1,[],Lyrics,[],_Names,0,Maxlength)),_,lyrics(Form1,Lyrics,Maxlength)).
find_all_depending_luciancicd(LPPM_registry_term1,Repository1,Dependencies7,D,Dependencies72) :-((member([User1,Repository1,_Description1,_Dependencies1],LPPM_registry_term1),not(member(Repository1,D)))->(findall1(Dependencies5,(member([User1,Repository2,_Description,Dependencies2],LPPM_registry_term1),member([User1,Repository1],Dependencies2),append(D,[Repository1],D2),find_all_depending_luciancicd(LPPM_registry_term1,Repository2,[],D2,Dependencies4),foldr(append,[Dependencies7,Dependencies4],Dependencies5)),Dependencies3),append([Repository1],Dependencies3,Dependencies6),flatten(Dependencies6,Dependencies72));Dependencies72=[]),%flatten(Dependencies71,Dependencies72),!.
find_all_depending_luciancicd(LPPM_registry_term1,Repository1,Dependencies7,Dependencies72) :-find_all_depending_luciancicd(LPPM_registry_term1,Repository1,Dependencies7,[],Dependencies72),!.
find_repeating_structures2(Position1,Position2,Length1,Length2,List,List2) :-find_repeating_structures3(Position1,Position2,Length1,Length2,[],List3) ,append(List,[List3],List4),Position11 is Position1+1,find_repeating_structures2(Position11,Position2,Length1,Length2,List4,List2).
find_repeating_structures3(Position1,Position2,Length1,Length2,List,List2) :-split11(List,Length1,[],SLs),% find n length sublists up to n/2-1 items into listfind_n_length_sublists(A1,SLs),append(List,[SLs],List3),Length11 is Length1+1,find_repeating_structures3(Position11,Position2,Length11,Length2,List3,List2).
findbest(R,Item1).
main :- halt(1).
member(Var,InputVars),%%InputVars=[Var|InputVars2],%%delete(InputVars,Var,InputVars2),append(Vars1,[Var],Vars3),InModes2 is InModes1-1,get_members(InModes2,InputVars,Vars3,Vars2));Vars1=Vars2). %%InModes2->1equals_or([],_) :- true,!.%%fail.***equals_or(List,Item) :-List=[Item|_Rest],!.
paraphrase1([],File_list,File_list,Synonym_list,Synonym_list) :- !.
paraphrase1([],File_list,File_list,Synonym_list,Synonym_list) :- !.paraphrase1(File_list,File_list1,File_list2,Synonym_list,Synonym_list2) :-File_list=[File_list3|File_list4],string_concat(File_list5,_E,File_list3),string_length(File_list5,1),string_codes(File_list5,File_list5_c),(not(phrase(word1(File_list5_c),_))->true;member(File_list3,["the","a","i","on","with","of","an","for","to","was","were","and","in","my","from","out","by"])),append(File_list1,[File_list3],File_list6),paraphrase1(File_list4,File_list6,File_list2,Synonym_list,Synonym_list2).
plus1(A,B,C):-string_concat(A,B,C).*/% 33-14=19 left% I did this by stating that the self should find similarities of ontologies in the other's five algorithms.
replace_cp2(Choice_point_trail1,E3,Choice_point_trail2,CP_Vars1,CP_Vars2) :-E3=[[[A,B|E1],[A,B|E11]]|E2],replace_cp(Choice_point_trail1,A,B,E1,E11,Choice_point_trail3,CP_Vars1,CP_Vars3),replace_cp2(Choice_point_trail3,E2,Choice_point_trail2,CP_Vars3,CP_Vars2).
string_strings(Ops1,Ops2),    member(Op,Ops2), !,    apply_operator([AR,Op,BR],Result),!.
substitutevarsA11(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2) :-substitutevarsA2(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2),!.
subtract(Options8,Options12,Options13),maplist(append,[Options13,Options11,Options9],[Options10]).
texttobr2(3)),_).
try_r1(RS5,D5,D3,T3,T2,T2_old).
turn_back_debug(Debug).
updatefile(CttOrigTran2,File2),updatefile(Translation2,'files/ctt-output.txt').
vyes(V):-true.
vyes(V):-%%((not(var(V)),(member([[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],V)),writeln("vyes*****")%%,(var(Program2)->true;(member([],Program2)))).
writeln([File2,"not t2b2'ed out.  Please do manually."]).
      :- http_handler('/landing', landing_pad, []).
      :- http_handler('/landing', landing_pad, []).      landing_pad(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),   %% Predicatename,Rules,Maxlength,Totalvars,Inputvarlist,Outputvarlist,Algorithmlibrary%%portray_clause(Data),        Data=[%%debug='off',%%Debug1,predicatename=Predicatename,rules=Rules,maxlength=Maxlength,totalvars=Totalvars,inputvarlist=Inputvarlist,outputvarlist=Outputvarlist,algorithmlibrary=Algorithmlibrary,submit=_],term_to_atom(Debug1,'off'),term_to_atom(Predicatename1,Predicatename),term_to_atom(Rules1,Rules),term_to_atom(Maxlength1,Maxlength),term_to_atom(Totalvars1,Totalvars),term_to_atom(Inputvarlist1,Inputvarlist),term_to_atom(Outputvarlist1,Outputvarlist),term_to_atom(Algorithmlibrary1,Algorithmlibrary),caw00(Debug1,Predicatename1,Rules1,Maxlength1,Totalvars1,Inputvarlist1,Outputvarlist1,Algorithmlibrary1,[],Result),%%format('</p><p>========~n', []),portray_clause(Result),%%writeln1(Data),format('</p>').
      gitl_landing_pad(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),        %portray_clause(Data),        %a(Data) :-        %%term_to_atom(Term,Data),%append(Data1,[submit=_],Data),findall(_,(member(HHa=O,Data),atom_concat(HH,'xxA',HHa),atom_concat(HH,'xxB',HH1a),(O=on->(member(HH1a=Label,Data),atomic_list_concat(B,"+",HH),%atomic_list_concat(B,"\\ ",HH1),atomic_list_concat(B," ",HH1),atom_string(HH1,HH2),atom_string(Label,Label1),(commit(HH2,Label1)->(foldr(string_concat,[HH1," (with label: \"",Label1,"\") was committed.<br>"],A),writeln(A));writeln([HH,not,committed]))))),_),        %Data=[%%debug='off',%%Debug1,%query=Query1,functions=Functions1,submit=_],%term_to_atom(Debug2,'off'),%term_to_atom(Query2,Query1),%term_to_atom(Functions2,Functions1),%international_interpret([lang,"en"],Debug2,Query2,Functions2,Result),%%format('</p><p>========~n', []),%%portray_clause%portray_clause(Result),%%writeln1(Data),format('</p>')%*/.
      landing_pad(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),        %writeln(Data),Data=[%%debug='off',%%Debug1,text=Text1%,submit=_],atom_string(Text1,Text2),word_count(["string",Text2],Words),format('</p><p>========~n<br><br>', []),writeln(Text2),writeln('<br><br>'),A=[Words," words"],reverse(A,B),foldl(string_concat,B,"",C),writeln(C),%%portray_clause%portray_clause(%Text2,"\n\n",%Words%," words"%),%%writeln1(Data),format('</p>').
      landing_pad(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),        Data=[%%debug='off',%%Debug1,query=Query1,functions=Functions1,submit=_],term_to_atom(Debug2,'off'),term_to_atom(Query2,Query1),term_to_atom(Functions2,Functions1),international_interpret([lang,"en"],Debug2,Query2,Functions2,Result),%%format('</p><p>========~n', []),%%portray_clauseportray_clause(Result),%%writeln1(Data),format('</p>').
      landing_pad(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),%writeln(here0),%writeln(Data)        Data=[%%debug='off',%%Debug1,message=Message%,submit=_],string_atom(Message1,Message),%writeln(Data),open_file_s("messager.txt",Messages_term),%writeln(here1),%term_to_atom(Messages_term,Messages),append(Messages_term,[Message1],Messages_term2),%writeln(here2),save_file_s("messager.txt",Messages_term2),%writeln(here3),writeln("Message saved."),%term_to_atom(Query2,Query1),%term_to_atom(Functions2,Functions1),%international_interpret([lang,"en"],Debug2,Query2,Functions2,Result),format('</p><p>========~n', []),%%portray_clause%portray_clause(Result),%%writeln1(Data),format('</p>')%*/.      :- http_handler('/messages', messages, []).
      landing_pad(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),%format(Data,[])        %/*Data=[%%debug='off',%%Debug1,input=Input1,ssi=Hidden1,submit=_],%term_to_atom(Hidden1,Hidden),%writeln(Data),%*/%/*%writeln(Hidden1),%writeln(Input1),%replace_new(Hidden1,"&quot;","\"",Hidden2),%replace_new(Input1,"&quot;","\"",Input2),%writeln(Hidden2),%writeln(Input2)%/*term_to_atom(Hidden11,Hidden1),%writeln1([atom_string(Hidden11,Hidden1)]),get_session(Hidden11,Session),%/*%term_to_atom(Session=[Dbw_n,Dbw_read_string,Value1,Variable1,Line_number_b,Skip,lang(Lang),debug2(Debug2),debug3(Debug3),debug4(Debug4),retry_back(Retry_back),retry_back_stack(Retry_back_stack),retry_back_stack_n(Retry_back_stack_n),cumulative_or_current_text(Cumulative_or_current_text),number_of_current_text(Number_of_current_text),html_api_maker_or_terminal(Html_api_maker_or_terminal),pred_numbers(Pred_numbers),pred_id(Pred_id_a),types(Types),typestatements(Typestatements),modestatements(Modestatements),ssi1([Pred_id,Level,Predicate_number,A,"line",Query,Vars3,All_predicate_numbers], End_result3, Functions,_Vars2,Result1, Result2, Globals3,Globals2,Choice_point_trail1e,Choice_point_trail3,CP_Vars3,CP_Vars2),ssi1([C,"line",Query,Vars1])],%Session), %*/%/*lang(Lang),retractall(session_number(_)),assertz(session_number(Hidden11)),retractall(debug2(_)),assertz(debug2(Debug2)),retractall(debug3(_)),assertz(debug3(Debug3)),retractall(debug4(_)),assertz(debug4(Debug4)),retractall(retry_back(_)),assertz(retry_back(Retry_back)),retractall(retry_back_stack(_)),assertz(retry_back_stack(Retry_back_stack)),retractall(retry_back_stack_n(_)),assertz(retry_back_stack_n(Retry_back_stack_n)),retractall(cumulative_or_current_text(_)),assertz(cumulative_or_current_text(Cumulative_or_current_text)),retractall(number_of_current_text(_)),assertz(number_of_current_text(Number_of_current_text)),retractall(html_api_maker_or_terminal(_)),assertz(html_api_maker_or_terminal(Html_api_maker_or_terminal)),retractall(pred_numbers(_)),assertz(pred_numbers(Pred_numbers)),retractall(pred_id(_)),assertz(pred_id(Pred_id_a)),retractall(types(_)),assertz(types(Types)),retractall(typestatements(_)),%findall([A,C],(member([A,B],TypeStatements),expand_types(B,[],C)),TypeStatements1),assertz(typestatements(Typestatements)),retractall(modestatements(_)),assertz(modestatements(Modestatements)),atom_string(Input1,Value1A),%*/data(Header,Footer),%/*format(Header,[]),%test(1,Query,Functions,Result),%international_lucianpl([lang,"en"],Debug,Query,Functions,Result1),%trace,        ((val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars3,Vars2a))->      (debug_exit(Skip,[[Dbw_n,Dbw_read_string],[Value1A]]), (var(Skip)->Globals3=Globals4; append(Globals3,[[[skip,Pred_id,Line_number_b],Skip]],Globals4)),        %trace,      ssi1([Pred_id,Level,Predicate_number,A,"line",Query,Vars2a,All_predicate_numbers], _End_result31, Functions,_Vars21,Result1, Result2, Globals4,Globals2,Choice_point_trail1e,Choice_point_trail3,CP_Vars3,CP_Vars2)      );     (debug_fail(Skip,[[Dbw_n,Dbw_read_string],[variable]]),      ssi1([Pred_id,Level,Predicate_number,C,"line",Query,Vars1,All_predicate_numbers], End_result3, Functions,_Vars21,Result1, Result2, Globals3,Globals2,Choice_point_trail1e,Choice_point_trail3,CP_Vars3,CP_Vars2))),%*/format(Footer,[])%*/.
      landing_pad1(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      %format('<p>', []),Data=[%%debug='off',%%Debug1,input=Input,query=Query,leash=Leash,pl=Pl1,lp=Lp1,submit=_],data_copy(Header,Footer),format(Header,[]),        %/*%term_to_atom(Hidden1,Hidden),string_atom(Pl,Pl1),string_atom(Lp,Lp1),working_directory(_CWD,'../Philosophy/'),(p2lpconverter([string,Query],Query1)->true;%_,%(catch((%trace,string_concat("a:-",Query,Query2),p2lpconverter([string,Query2],Query3),Query3=[[[n,a],":-",Query1]])),%writeln1(Leash), retractall(leash1(_)),   assertz(leash1(Leash)), (Leash=off->Debug=off;Debug=on),%catch((Input='1'->(catch(p2lpconverter([file,Pl],Test11),_,writeln("Error in p2lpconverter.")),catch(pp0(Test11,Test1),_,writeln("Error in pp0.")),%term_to_atom(Test1,Test2),string_concat(Test1,".",Test3),catch((open_s(Lp,write,Stream),write(Stream,Test3),close(Stream)),_,writeln("Error writing to file.")),%writeln1(international_lucianpl([lang,"en"],Debug,Query1,Test11,_Result1)),working_directory(_CWD,'../SSI/'),catch(international_lucianpl([lang,"en"],Debug,Query1,Test11,_Result1),_,writeln("Error in international_lucianpl.")))->true;(Input='2'->catch(p2lpconverter([file,Pl],Test11),_,writeln("Error in p2lpconverter.")),catch(pp0(Test11,Test1),_,writeln("Error in pp0.")),%term_to_atom(Test1,Test2),string_concat(Test1,".",Test3),catch((open_s(Lp,write,Stream),write(Stream,Test3),close(Stream)),_,writeln("Error writing to file.")))->true;(Input='3'->(catch((open_s(Lp,read,Stream),read(Stream,File_term1),close(Stream)),_,writeln("Error reading file.")),%term_to_atom(File_term2,File_term1),working_directory(_CWD,'../SSI/'),catch(international_lucianpl([lang,"en"],Debug,Query1,File_term1,_Result1),_,writeln("Error in international_lucianpl."))))),format(Footer,[])%,_,writeln("Error.")).
      landing_pad2(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      %format('<p>', []),Data=[%%debug='off',%%Debug1,pw=Pw,submit=_],data(Header,Footer),format(Header,[]),((password(Pw1),atom_string(Pw,Pw1))->(   %web_form2(_Request) :-%retractall(html_api_maker_or_terminal(_)),%assertz(html_api_maker_or_terminal(html %terminal %)),              %format('Content-type: text/html~n~n', []),%open_string_file_s("file.txt",File_string),% commands need path passed to them% file_browser needs path passed to itfirst_directory(CWD1),file_browser(CWD1)/*foldr(string_concat,["<form action=\"/landing\" method=\"POST\">        <p>Edit file.txt:</p>        <textarea name=text rows=\"20\">",File_string,"</textarea>  <input type=submit name=submit value='Submit'>    </form>"],String),writeln(String),*/);format('Wrong password.',[])),format(Footer,[])      .
      generate_student_number(_Request) :-                 reply_html_page(    title('Lucian Academy'),        [         form([action='/landing2', method='POST'], [     p([], [  label([for=name],'Name:'),  %% If you enter strings without double quotes and there is an internal server error please contact luciangreen@lucianacademy.com    input([name=name, type=textarea])        ]),     p([], [  label([for=email],'E-mail:'),    input([name=email, type=textarea])        ]),              p([], input([name=submit, type=submit, value='Submit'], []))      ])]).                  string(String) --> list(String).list([]) --> [].
%term_to_atom(Debug2,'off'),%term_to_atom(Query2,Query1),%term_to_atom(Functions2,Functions1),%international_interpret([lang,"en"],Debug2,Query2,Functions2,Result),%%format('</p><p>========~n', []),%%portray_clause%portray_clause(result),%%writeln1(Data),%format('</p>').
%term_to_atom(Debug2,'off'),%term_to_atom(Query2,Query1),%term_to_atom(Functions2,Functions1),%international_interpret([lang,"en"],Debug2,Query2,Functions2,Result),%%format('</p><p>========~n', []),%%portray_clause%portray_clause(result),%%writeln1(Data),%format('</p>').data(Header,Footer) :-Header='<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN"><html lang="en">  <head>    <meta http-equiv="content-type" content="text/html; charset=UTF-8">    <meta charset="utf-8">    <title>State Saving Interpreter</title>    <style type="text/css"> <!-- A:link {text-decoration: none;} A:visited {text-decoration: none;} A:hover {text-decoration: underline;} img { height: auto; max-width: 100%; object-fit: contain;} table {table-layout: fixed; width: 100%;}td {word-wrap: break-word;}-->   </style>    <meta name="viewport" content="width=device-width, initial-scale=1">  </head>  <body style="background-color: rgb(255, 239, 227);">       <div style="text-align: center;">      <table width="80%">        <tbody>          <tr>            <td>              <p>',Footer='</p>            </td>          </tr>        </tbody>      </table>      <br>    <br>  </body></html>'.
/*A21=[Table|A25],test_rows(Table),ff_rows(A23,A23_new,Table,A24),test col% from 1 or a to n or n-m% compress rows, colstest_rows(A21) :-% in non headingsappend([Headings],Rest,A21),not(length(Headings,1)), % not a table of formulasforall((member(Row,Rest),(append(_,[Last_column],Rest),Last_column=[function,_,_,_,XY2,F21],not((member([var,_,_,_,_,_,[]],XY2)))))),!. % a valueff_rows(Old_tables,Old_tables_new,A21,A231) :-A21=[Headings|A25]ff_rows1(Old_tables,Old_tables_new,A25,A23),append([Headings],A23,A231),!.
  test(123,[[n,equals41],[[[v,b],"|",[v,c]]]],[        [[n,equals41],[[1,2,3]]]        ],[[[[v,b],1],[[v,c],[2,3]]]]).test(124,[[n,equals41],[[[[v,a],"|",[v,d]],[v,c],"|",[v,b]]]],[        [[n,equals41],[[[1,5],2,3,4]]]],[[[[v,a],1],[[v,b],[3,4]],[[v,c],2],[[v,d],[5]]]]).
interpretpart(stringtonumber,Variable2,Variable1,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),%%Value1A = [Value2],(Value2A=""->Value1="";number_string(Value1,Value2A)),        val1emptyorvalsequal(Value2,Value2A),        %%val1emptyorvalsequal(Value1A,Value2),        putvalue(Variable2,Value2A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,stringtonumber],[Value1,Value2A]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,stringtonumber],[Value1,Value2A]],"Press c."]),(not(get_single_char(97))->true;abort));true).
/**critique(String00,String01,Reasons_per_paragraph,Numbers,Critique).
%replace_vars0(Term,Vars1,Vars2,First_vars1,First_vars2),!.
% is K11 just d or gh/d x d%[K11,H,]%[["d","a.pl",(a(B),B=1)]]*//*process_merge_preds(Tests11,Ordered_pred_nums,Tests1) :- Tests11=[B,Tests12],term_to_atom(C,Tests12), findall1(A,(member([P,F,O,N],C)  ),_).
%%concat_list(["git pull https://github.com/",User3,"/",Repository3,".git master"],Command4), %%catch(bash_command(Command4,_), _, (concat_list(["Error: Can't pull ",User3,"/",Repository3," repository on GitHub."],Text5),writeln1(Text5),abort))),_).
rule(Predicates,RuleName,NumInputs,NumOutputs,InputVars20,InputVars4,VarList0,VarList2,Rule) :-%InputVars20=InputVars2,%%VarList0=VarList,%writeln(Predicates),/*%writeln([Predicates,Predicates]),%(not(Predicates=[])->trace;true),findall(Rule_vars1,member([_Rule_name,Rule_vars1],Predicates),Rule_vars2),foldr(append,Rule_vars2,Rule_vars3),% count varssort(Rule_vars3,K),findall(G,(member(G,K),findall(G,member(G,Rule_vars3),H),length(H,J),J>2),L),% remove vars occuring more than twice(var(InputVars20)->InputVars20=InputVars2;(%trace,subtract(InputVars20,L,InputVars2)%,notrace)), (var(VarList0)->VarList0=VarList;subtract(VarList0,L,VarList)),*/rule1(RuleName,NumInputs,NumOutputs,InputVars20,InputVars4,VarList0,VarList2,Rule).
traverse(X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2) :-member([X,Y,Cell],Map1),append(Explored1,[[X,Y]],Explored3a),sort(Explored3a,Explored3),location(X,Y,Location),writeln(["At",Location]),%%trace,%% can take, drop objects, recorded in maze%%(Cell=[]->Inventory4a=Inventory1;%%(Cell=Items,append(Inventory1,[Item],Inventory3),%%apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),%%writeln(Inventory4a),%% Find, accept only available directions(member("e",Inventory1)->(writeln("Game Over"),true);true),%%append(Explored1,[[X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,%Zm1 is Z-1,%Zp1 is Z+1,check(Xm1,Y,"w",[],Directions1,Map1),check(X,Ym1,"s",Directions1,Directions2,Map1),check(Xp1,Y,"e",Directions2,Directions3,Map1),check(X,Yp1,"n",Directions3,Directions6,Map1),%check(Zm1,X,Y,"d",Directions4,Directions5,Map1),%check(Zp1,X,Y,"u",Directions5,Directions6,Map1),writeln(["Go",Directions6,"or take",Cell,"or drop",Inventory1,"map, write, edit or delete a note, or load or save a game."]),read_string(user_input, "\n", "\r", _End,Input1),downcase_atom(Input1,Input1a),atom_string(Input1a,Input1b),%%trace,split_string(Input1b, ", ", ", ", Input2),(((Input2=["go","n"]->true;Input2=["n"]),(member("n",Directions6)->traverse(X,Yp1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go n"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["map"]->true;Input2=["m"]),((%trace,map_dimensions([X2,Y2]),print_map(Map1,X2,Y2,X,Y))->true;;(writeln(["You can't view the map."]))),traverse(X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2))->true;((Input2=["go","e"]->true;Input2=["e"]),(member("e",Directions6)->traverse(Xp1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go e"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","s"]->true;Input2=["s"]),(member("s",Directions6)->traverse(X,Ym1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go s"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","w"]->true;Input2=["w"]),(member("w",Directions6)->traverse(Xm1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go w"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","u"]->true;Input2=["u"]),(member("u",Directions6)->traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go u"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","d"]->true;Input2=["d"]),(member("d",Directions6)->traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go d"]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["take",Item_to_take],((atom_string(Item_to_take_a,Item_to_take),(member(Item_to_take_a,Cell)->delete(Cell,Item_to_take_a,Cell2);(member(Item_to_take,Cell),delete(Cell,Item_to_take,Cell2))),delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4),append(Inventory1,[Item_to_take],Inventory3))->(writeln(["You have taken",Item_to_take]),traverse(X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't take",Item_to_take]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["drop",Item_to_drop],((%%atom_string(Item_to_drop_a,Item_to_drop),member(Item_to_drop,Inventory1),delete(Inventory1,Item_to_drop,Inventory3),append(Cell,[Item_to_drop],Cell2),delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4))->(writeln(["You have dropped",Item_to_drop]),traverse(X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't drop",Item_to_drop]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;%(Input2=["apply",First_item,"to",Second_item],((member(First_item,Inventory1),member(Second_item,Inventory1),atom_string(First_item_a,First_item),atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),append(Cell,[Third_item],Cell2),delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4))->(writeln(["You have applied",First_item,"to",Second_item,"producing",Third_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't apply",First_item,"to",Second_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["write",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please write the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),append(Cell,[First_item],Cell2),delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4))->(writeln(["You have written",First_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["Error 1."]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["edit",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),member(First_item,Cell),writeln(["Please edit the note",First_item]),read_string(user_input, "\n", "\r", _End2, Note),%trace,delete(Cell,First_item,Cell2a),append(Cell2a,[Note],Cell2),delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4))->(writeln(["You have edited",First_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't edit",First_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["delete",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please edit the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),%append(Cell,[Note],Cell2),delete(Cell,First_item,Cell2),delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4))->(writeln(["You have deleted",First_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["Error 3."]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["load",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please edit the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),%append(Cell,[Note],Cell2),string_concat("saved_games2d/",First_item,Game_path),phrase_from_file_s(string(String00a),Game_path),string_codes(String02b,String00a),atom_to_term(String02b,Map4,[])%delete(Cell,First_item,Cell2),%delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4))->(writeln(["You have loaded",First_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["Error 4."]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["save",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please edit the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),%append(Cell,[Note],Cell2),string_concat("saved_games2d/",First_item,Game_path),term_to_atom(Map1,String02a_b),string_atom(String02a_c,String02a_b),(open_s(Game_path,write,Stream1),write(Stream1,String02a_c),close(Stream1)),!%delete(Cell,First_item,Cell2),%delete(Map1,[X,Y,_],Map3),append(Map3,[[X,Y,Cell2]],Map4))->(writeln(["You have saved",First_item]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2));(writeln(["Error 5."]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(writeln(["I don't understand."]),traverse(X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))).
traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2) :-member([Z,X,Y,Cell],Map1),append(Explored1,[[Z,X,Y]],Explored3a),sort(Explored3a,Explored3),location(Z,X,Y,Location),writeln(["At",Location]),%%trace,%% can take, drop objects, recorded in maze%%(Cell=[]->Inventory4a=Inventory1;%%(Cell=Items,append(Inventory1,[Item],Inventory3),%%apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),%%writeln(Inventory4a),%% Find, accept only available directions(member("e",Inventory1)->(writeln("Game Over"),true);true),%%append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,check(Z,Xm1,Y,"w",[],Directions1,Map1),check(Z,X,Ym1,"s",Directions1,Directions2,Map1),check(Z,Xp1,Y,"e",Directions2,Directions3,Map1),check(Z,X,Yp1,"n",Directions3,Directions4,Map1),check(Zm1,X,Y,"d",Directions4,Directions5,Map1),check(Zp1,X,Y,"u",Directions5,Directions6,Map1),writeln(["Go",Directions6,"or take",Cell,"or drop",Inventory1,"map, write, edit or delete a note, or load or save a game."]),read_string(user_input, "\n", "\r", _End,Input1),downcase_atom(Input1,Input1a),atom_string(Input1a,Input1b),%%trace,split_string(Input1b, ", ", ", ", Input2),(((Input2=["go","n"]->true;Input2=["n"]),(member("n",Directions6)->traverse(Z,X,Yp1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go n"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["map"]->true;Input2=["m"]),((%trace,map_dimensions([X2,Y2,Z2]),print_map(Map1,X2,Y2,Z2,X,Y,Z))->true;;(writeln(["You can't view the map."]))),traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2))->true;((Input2=["go","e"]->true;Input2=["e"]),(member("e",Directions6)->traverse(Z,Xp1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go e"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","s"]->true;Input2=["s"]),(member("s",Directions6)->traverse(Z,X,Ym1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go s"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","w"]->true;Input2=["w"]),(member("w",Directions6)->traverse(Z,Xm1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go w"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","u"]->true;Input2=["u"]),(member("u",Directions6)->traverse(Zp1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go u"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","d"]->true;Input2=["d"]),(member("d",Directions6)->traverse(Zm1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go d"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["take",Item_to_take],((atom_string(Item_to_take_a,Item_to_take),(member(Item_to_take_a,Cell)->delete(Cell,Item_to_take_a,Cell2);(member(Item_to_take,Cell),delete(Cell,Item_to_take,Cell2))),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4),append(Inventory1,[Item_to_take],Inventory3))->(writeln(["You have taken",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't take",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["drop",Item_to_drop],((%%atom_string(Item_to_drop_a,Item_to_drop),member(Item_to_drop,Inventory1),delete(Inventory1,Item_to_drop,Inventory3),append(Cell,[Item_to_drop],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have dropped",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't drop",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;%(Input2=["apply",First_item,"to",Second_item],((member(First_item,Inventory1),member(Second_item,Inventory1),atom_string(First_item_a,First_item),atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),append(Cell,[Third_item],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have applied",First_item,"to",Second_item,"producing",Third_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't apply",First_item,"to",Second_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["write",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please write the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),append(Cell,[First_item],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have written",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["Error 1."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["edit",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),member(First_item,Cell),writeln(["Please edit the note",First_item]),read_string(user_input, "\n", "\r", _End2, Note),%trace,delete(Cell,First_item,Cell2a),append(Cell2a,[Note],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have edited",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't edit",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["delete",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please edit the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),%append(Cell,[Note],Cell2),delete(Cell,First_item,Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have deleted",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["Error 3."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["load",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please edit the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),%append(Cell,[Note],Cell2),string_concat("saved_games/",First_item,Game_path),phrase_from_file_s(string(String00a),Game_path),string_codes(String02b,String00a),atom_to_term(String02b,Map4,[])%delete(Cell,First_item,Cell2),%delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have loaded",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["Error 4."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["save",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please edit the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),%append(Cell,[Note],Cell2),string_concat("saved_games/",First_item,Game_path),term_to_atom(Map1,String02a_b),string_atom(String02a_c,String02a_b),(open_s(Game_path,write,Stream1),write(Stream1,String02a_c),close(Stream1)),!%delete(Cell,First_item,Cell2),%delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have saved",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2));(writeln(["Error 5."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(writeln(["I don't understand."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))).
rule(RuleName,1,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-member(Var,InputVars1),rule2(RuleName,Var,VarList,VarList2,Rule,Var1),append(InputVars1,[Var1],InputVars2).
% t or f% return true or false result from predinterpretstatement2(ssi,Functions,Functions,Line,Vars2,Vars3,Result21,Cut,_,Skip) :-%false.interpretstatement3(ssi,Functions,Functions,Line,Vars2,Vars3,Result21,Cut,_,Skip).
data(Value1,Value2,Value3) :-Value1=(Value4=Value4a),data(Value4,[],Value6),data(Value4a,[],Value6a),append(Value2,[Value6=Value6a],Value3).
match4(Variable1,Variable2,Vars1,Vars2) :-%%trace,variable_name(Variable2),getvalue(Variable2,Value2,Vars1),not(variable_name(Variable1)),is_list(Variable1),%%findall(Value1,(%%interpretpart(match4,Variable1,[v,sys1],Vars1,Vars3,_),%%getvalue([v,sys1],Value1,Vars3)getvalue_match(Variable1,X,Vars1),%%member(A,Variable1),getvalue(A,Value1,Vars1)%%),X),val1emptyorvalsequal(Value2,X),putvalue(Variable2,X,Vars1,Vars2),length(Variable1,L),length(X,L).
%% n intro, vn verse, c chorus, i1 instrumental1, t2, instrumental 2, s solo, o outrofindall1(Form2,Form3) :-findall(B,shorten(Form2,B),Form3).
/*split13([],_,A,A):-!.split13(L%%List,L16,%N,N, A1,A2) :- length(L,LL),LL<L16,append(A1,L,A2), %L2 is L16*2,length(List,L3),L3=<L2, !.
/**get_curr_students(Curr_students_a),length(Curr_students_a,P1),P2=0,get_grad_students(String02a),length(String02a,_P3).**/new_work([],Curr_students_aa,Curr_students_aa,Grad_students_aa,Grad_students_aa) :- !.
basecasecondition(Variables3,[Dbw_n,Name],Item1) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,not((Item1=[[Dbw_n,Name],Item2|_Rest2],length(Variables3,Length),length(Item2,Length))).
colour(red,     [255, 0,   0]).
concat_list(A1,B):-A1=[A|List],concat_list(A,List,B),!.
ctt2([],T,T,B,B,C,C,_,_,_) :-!.
find_constants(S,RS2,C) :-retractall(num_s2a(_)),assertz(num_s2a(1)),retractall(vars_s2a(_)),assertz(vars_s2a([])),retractall(vars_base_s2a(_)),assertz(vars_base_s2a('B')),%* keep same var name%change_var_base,%trace,%length(RS1,RS1L),% find constants that recur in same place across specfindall(%[%C21L,%U1,U2,C1%C2%C21%C3%],%U2,%In1],(member(RS1,RS2),%RS2=[RS1|_],findall([U1,%U2,In1],(member([U1,U2],RS1),sub_term_types_wa([heuristic(var_or_data_c(A),A)%string,atom,number%heuristic((O=[Type,_],type_s2a1(Type)%only_item(O),%not_r_o_nd_types(O)%),O)],U2,In1)%trace,%findall([Ad3,P2],(member([Ad2,P1],In11),%append(Ad2,[2],Ad3),%P1=[_,P2]),In1%)),C1)%sub_term_types_wa([heuristic((only_item(O),%not_r_o_nd_types(O)),O)],U2,In1)),C1)%foldr(append,C1,C10),%findall([C21,%C22,%C23],(member([C21,%C22,%C23],C10),%findall(C4,(member([Add,C5],C23),%trace,/*findall(L,(member(C12,C1),findall(A1%C11,(member(A1,C12)%,%=[_,A1]%member([C11,_],A1)),E),%frequency listsort(E,K),findall([G,J],(member(G,K),findall(G,member(G,E),H),length(H,J)),L)),L1),*/%trace,%findall(M,(member(M2,L1),%C1=[M2|M3],%findall(M6,(member(M6,M2),member(M9,M3),member(M6,M9)%=[M6|M8],%forall(member(M6,M3),member(M6,M7))%),C2)),Specs),%trace,% find whether each item number of each variable is constant across specs; if not, give a new var.
get_data_n(N) :-get_data_n1(N1),N is N1+1,retractall(get_data_n1(_)),assertz(get_data_n1(N)).
get_item_n(Exposition,Number1,Item) :-Number2 is Number1-1,length(List,Number2),append(List,[Item|_],Exposition).
get_item_n(Exposition,Number1,Item) :-Number2 is Number1-1,length(List,Number2),append(List,[Item|_],Exposition).get_number(Prompt1,Number) :-%%concat_list(Prompt1,Prompt2),(%%repeat,writeln(Prompt1),read_string(user_input, "\n", "\r", _End, String),split_string(String, ",", " ", Value1),Value1=[Value2],number_string(Number,Value2)).
logic_ff1(Columns1,Columns2,Result,Formula1) :-        member(Column,Columns1),        Column=[Name|_Rest],        delete(Columns2,Column,Columns3),Formula2=Name,        logic_ff2(Columns1,Columns3,Result,Formula2,Formula3),list(Formula3,Formula1).
number_menu(File_list3,Suggestions,Choice) :-length(Suggestions,LCritique3),numbers(LCritique3,1,[],List1),%trace,findall([N," - ",CString5a12,"\n"],(member(N,List1),get_item_n(Suggestions,N,CString5a11),%append(CString5a11,["0","1"],CString5a1)***,%reverse(CString5a1,CString5a11),CString5a11=[Rank,CString5a111],concat_list(CString5a111,CString5a112),capitalise_if_necessary(File_list3,CString5a112,CString5a13),concat_list(["(",Rank,") - ",CString5a13],CString5a12)),CStrings1),%trace,findall([N,CString5a11],(member(N,List1),get_item_n(Suggestions,N,[_,CString5a11])%,reverse(CString5a1,CString5a11)),CStrings2),%trace, %% *****maplist(append,[CStrings1],[CStrings111]),concat_list(CStrings111,CStrings12),concat_list(["Please choose the correction to \"",File_list3,"\", <return> for no correction or type a replacement word:"],Note1),writeln(Note1),writeln(CStrings12),try_reading_number(CStrings2,Choice1),%trace,(Choice1=""->Choice=File_list3;Choice=Choice1).
options(Grid,X,Y,Options0) :-XU is X+1,XD is X-1,YU is Y+1,YD is Y-1,Options1=[],(member([XU,Y,_],Grid)->append(Options1,[[XU,Y]],Options2);Options1=Options2),(member([XD,Y,_],Grid)->append(Options2,[[XD,Y]],Options3);Options2=Options3),(member([X,YU,_],Grid)->append(Options3,[[X,YU]],Options4);Options3=Options4),(member([X,YD,_],Grid)->append(Options4,[[X,YD]],Options0);Options4=Options0).
prep_l2b(File_contents_list_term,File_contents_assignments_term) :-phrase_from_file_s(string(File_contents_list2), "list_db.txt"),string_codes(File_contents_list1,File_contents_list2),atom_string(File_contents_list,File_contents_list1),term_to_atom(File_contents_list_term,File_contents_list),length(File_contents_list_term,Length1),write("Number of breasoning databases: "), writeln(Length1),phrase_from_file_s(string(File_contents_assignments2), "assignment_db.txt"),string_codes(File_contents_assignments1,File_contents_assignments2),atom_string(File_contents_assignments,File_contents_assignments1),term_to_atom(File_contents_assignments_term,File_contents_assignments),length(File_contents_assignments_term,Length2),write("Number of previous assignments: "), writeln(Length2),!.
rec_join(UV21,RS) :-get_tmp_join_n(Tmp_join_n),sub_term_types_wa([heuristic(A=[split1,B],A)],UV21,In11),%(In1=[]->rec_join(UV2,RS);findall([Ad,[split1,RS1]],(member([Ad,[split1,C]],In11),try(C,RS11),save_if_same(C,RS11,RS1)),In21),foldr(put_sub_term_wa_ae,In21,UV21,UV2),sub_term_types_wa([heuristic((A=[split,B],not(member([split,_],B))),A)],UV2,In1),%(In1=[]->rec_join(UV2,RS);findall([Ad,[[tmp,Tmp_join_n],RS1]],(member([Ad,[split,C]],In1),try(C,RS11),save_if_same(C,RS11,RS1)),In2),foldr(put_sub_term_wa_ae,In2,UV2,UV3),%trace,findall([[[tmp,(*)%Tmp_join_n],RS2]],(member(Y,UV3),(Y=[split,Z]->(rec_join(Z,RS2)%,foldr(append,RS21,RS2));%[Y][Y]=RS2)),UV4),%trace,foldr(append,UV4,UV41),%trace,try(UV41,RS3),%UV41=RS3,RS3=RS6,(RS6=[r,[r,RS4]]->RS=[r,RS4];RS=RS6).
rectangle(_XN1,[],Grid,Grid) :- !.
symbol(Symbol,Symbol) :-!.
time(b,n,4).time(c,n,3).
%%%****Delete these duplicate predicatessymbol(Symbol,Symbol) :-!.
%%findrulesflowingtopv2(Program5,Program2,Rest,Rules3,Rules2).
%%interpretpart(findall,[Variable1,Variable3],Vars3,Vars2).
%%random_member(A,List),%%R=[[_,A]].
%SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",% ?- split_on_non_alpha_keep_quotes("\"Hello, dear's duckling.\"",A).
%back_translate2(_Ctt_input0,_Ctt_input1,Ctt_orig1_orig2_1,Ctt_orig_tran_1,_From_lang,_To_lang,Translation3,Translation3,Ctt_orig1_orig2_1,Ctt_orig_tran_1) :- !.
%debug_call(Skip,[[n,"[]"]]).interpretstatement3(ssi,_,_,[[Dbw_n,Dbw_not]|_],Vars,Vars,_Result21,_Cut,_,Skip) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,debug_call(Skip,[[Dbw_n,Dbw_not]]).
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   eh_form(_Request) :-              %format('Content-type: text/html~n~n', []),%data_copy(Header,Footer),%format(Header,[]),%    reply_html_page(    title('Essay Helper'),        [form([action='/landing1', method='POST'], [            p([], [  label([for=title],'Essay Title'),    input([name=title, type=textarea])        ]),      p([], [  label([for=s1l],'Source 1 long citation, e.g. Surname, I., & Surname, I. (2000). Title. <i>Publisher</i>'),    input([name=s1l, type=textarea])        ]),      p([], [  label([for=s1s],'Source 1 short citation, e.g. Surname, 2000'),    input([name=s1s, type=textarea])        ]),      p([], [  label([for=s1p],'Source 1 page number of first page, e.g. 1'),    input([name=s1p, type=textarea])        ]),      p([], [  label([for=s1c],'Source 1 content'),    input([name=s1c, type=textarea])        ]),            p([], input([name=submit, type=submit, value='Submit'], []))      ])])%,            %format(Footer,[])      .      :- http_handler('/landing1', landing_pad1, []).      landing_pad1(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      %format('<p>', []),Data=[%%debug='off',%%Debug1,title=Title,s1l=S1l,s1s=S1s,s1p=S1p,s1c=S1c,submit=_],data_copy(Header,Footer),format(Header,[]), atom_string(Title,Title1), atom_string(S1l,S1l1), atom_string(S1s,S1s1), atom_number(S1p,S1p1), atom_string(S1c,S1c1), term_to_atom( [S1l1,S1s1,S1p1,S1c1],Texts),  atom_string(Texts,Texts1), Texts2=[Texts1], %writeln1(Texts1),short_essay_helper(Texts2,Title,1,Essay_0),atomic_list_concat(A,"\n",Essay_0),atomic_list_concat(A,"<br>",Essay_01),writeln(Essay_01),        %/*%term_to_atom(Hidden1,Hidden),format(Footer,[])%,_,writeln("Error.")).data_copy(Header,Footer) :-Header='<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN"><html lang="en">  <head>    <meta http-equiv="content-type" content="text/html; charset=UTF-8">    <meta charset="utf-8">    <title>State Saving Interpreter</title>    <style type="text/css"> <!-- A:link {text-decoration: none;} A:visited {text-decoration: none;} A:hover {text-decoration: underline;} img { height: auto; max-width: 100%; object-fit: contain;} table {table-layout: fixed; width: 100%;}td {word-wrap: break-word;}-->   </style>    <meta name="viewport" content="width=device-width, initial-scale=1">  </head>  <body style="background-color: rgb(255, 239, 227);">       <div style="text-align: center;">      <table width="80%">        <tbody>          <tr>            <td>              <p>',Footer='</p>            </td>          </tr>        </tbody>      </table>      <br>    <br>  </body></html>'.
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   gitl_web_form(_Request) :-%retractall(html_api_maker_or_terminal(_)),%assertz(html_api_maker_or_terminal(html %terminal %)),  retractall(num1(_)),assertz(num1(1)),repository_root_path(RRP),atom_string(RRP1,RRP),working_directory(A3,A3),working_directory(_,RRP1),              format('Content-type: text/html~n~n', []),data(Header,Footer),format(Header,[]),writeln("<h1 id=\"#Top\">GitL</h1><br><br><p><input onClick=\"setAllCheckboxes('repositories', this);\" type=\"checkbox\" />All</p><div id=\"repositories\"><form action=\"/gitl_landing\" method=\"post\">"),directory_files("./",F),delete_invisibles_etc(F,G),findall([N,H,H1,F1],(member(H,G),atom_string(H,HH),ws_html(HH,F1),%open_string_file_s(H,F11),get_num(N),%(string_concat("log",_,H)->(term_to_atom(F111,F11),F111=[Success,F12],((F1=(-))->Success1="<font color=\"black\"></font>";foldr(string_concat,["<font color=\"green\">CHANGED</font> <input type=\"checkbox\" name=\"",HH,"xxA\" /> Label: <input type=\"text\" name=\"",HH,"xxB\" />"],Success1)),foldr(string_concat,["<b>",Success1,"</b> - "],Success2),%);(F11=F12,Success2="")),time_file(H,T),atomic_list_concat(A,"\n",F12),atomic_list_concat(A,"<br>",F1),foldr(string_concat,[Success2,"<a href=\"#",N,"\">",H,"</a>","<br><br>"],H1)%,writeln(H1)),J0),sort(J0,J),%reverse(J1,J),findall(_,(member([_,_,H1,_],J),writeln(H1)),_),writeln("<input type=\"submit\" value=\"Commit\">"),findall(_,(member([N,H,_,F1],J),foldr(string_concat,["<h2 id=\"",N,"\">",H,"</h2><a href=\"#Top\">Top</a><br>",F1,"<br><br>"],H2),writeln(H2)),_),%Debug=off,%test_open_types_cases(4,Query,Types,Modes,Functions),%international_lucianpl([lang,"en"],Debug,Query,Types,Modes,Functions,_Result),%p2lpconverter([file,"../private/la_com_ssi1.pl"],List3),%testopen_cases(8,[[n,test]],List3),%test(1,Query,Functions,Result),% Form and HTML Table%test1(Functions),%Query=[[n,test]],%gitl_test(List3),%para(List3),%international_lucianpl([lang,"en"],Debug,[[n,gitl]],List3,_Result1),writeln("</div><a href=\"#Top\">Top</a>"),working_directory(_,A3),format(Footer,[])      .
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   luciancicd_web_form(_Request) :-   %html_api_maker_or_terminal(HAMOT),retractall(html_api_maker_or_terminal(_)),assertz(html_api_maker_or_terminal(html %terminal )),  retractall(num1(_)),assertz(num1(1)),working_directory(A3,A3),working_directory(_,'../../lc_logs/'),              format('Content-type: text/html~n~n', []),data(Header,Footer),format(Header,[]),writeln("<h1 id=\"#Top\">Lucian CI/CD</h1><br><br>"),directory_files("./",F),delete_invisibles_etc(F,G),findall1([T,N,H,H1,F1],(member(H,G),once((open_string_file_s(H,F11),(string_concat("log",_,H)->(term_to_atom(F111,F11),F111=[Success,F12],(Success= 0->Success1="<font color=\"green\">PASSED</font>";Success1="<font color=\"red\">FAILED</font>"),foldr(string_concat,["<b>",Success1,"</b> - "],Success2));(F11=F12,Success2="")),time_file(H,T),atomic_list_concat(A,"\n",F12),atomic_list_concat(A,"<br>",F1),get_num(N),foldr(string_concat,[Success2,"<a href=\"#",N,"\">",H,"</a>","<br><br>"],H1)%,writeln(H1)))),J0),sort(J0,J1),reverse(J1,J),findall1(_,(member([_,_,_,H1,_],J),writeln(H1)),_),findall1(_,(member([_,N,H,_,F1],J),foldr(string_concat,["<h2 id=\"",N,"\">",H,"</h2><a href=\"#Top\">Top</a><br>",F1,"<br><br>"],H2),writeln(H2)),_),%Debug=off,%test_open_types_cases(4,Query,Types,Modes,Functions),%international_lucianpl([lang,"en"],Debug,Query,Types,Modes,Functions,_Result),%p2lpconverter([file,"../private/la_com_ssi1.pl"],List3),%testopen_cases(8,[[n,test]],List3),%test(1,Query,Functions,Result),% Form and HTML Table%test1(Functions),%Query=[[n,test]],%luciancicd_test(List3),%para(List3),%international_lucianpl([lang,"en"],Debug,[[n,luciancicd]],List3,_Result1),working_directory(_,A3),format(Footer,[]),retractall(html_api_maker_or_terminal(_)),assertz(html_api_maker_or_terminal(terminal %terminal ))      .
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   paraphraser_web_form(_Request) :-retractall(html_api_maker_or_terminal(_)),assertz(html_api_maker_or_terminal(html %terminal )),working_directory(_,'../SSI/'),              format('Content-type: text/html~n~n', []),data(Header,Footer),format(Header,[]),Debug=off,%test_open_types_cases(4,Query,Types,Modes,Functions),%international_lucianpl([lang,"en"],Debug,Query,Types,Modes,Functions,_Result),%p2lpconverter([file,"../private/la_com_ssi1.pl"],List3),%testopen_cases(8,[[n,test]],List3),%test(1,Query,Functions,Result),% Form and HTML Table%test1(Functions),%Query=[[n,test]],%paraphraser_test(List3),para(List3),international_lucianpl([lang,"en"],Debug,[[n,paraphraser]],List3,_Result1),format(Footer,[])      .
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   run_lp_form(_Request) :-retractall(html_api_maker_or_terminal(_)),assertz(html_api_maker_or_terminal(html %terminal )),              %format('Content-type: text/html~n~n', []),%data_copy(Header,Footer),%format(Header,[]),   reply_html_page(    title('List Prolog Interpreter'),        [form([action='/landing1', method='POST'], [            p([], [  label([for=input],'Run List Prolog (1 - Convert *.pl to *.lp and run query. 2 - Convert *.pl to *.lp. 3 - Run query.) Enter 1-3:'),    input([name=input, type=textarea])        ]),      p([], [  label([for=query],'Prolog query for 1 or 3:'),    input([name=query, type=textarea])        ]),      p([], [  label([for=leash],'Leash (on/off) for 1 or 3:'),    input([name=leash, type=textarea])        ]),      p([], [  label([for=pl],'*.pl file for 1 or 2:'),    input([name=pl, type=textarea])        ]),      p([], [  label([for=lp],'*.lp file for 1, 2 or 3:'),    input([name=lp, type=textarea])        ]),      p([], input([name=submit, type=submit, value='Submit'], []))      ])])%,            %format(Footer,[])      .
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   ssi_web_form(_Request) :-retractall(html_api_maker_or_terminal(_)),assertz(html_api_maker_or_terminal(html %terminal )),              format('Content-type: text/html~n~n', []),data(Header,Footer),format(Header,[]),Debug=off,%open_string_file_s("../private/la_ws.pl",S),p2lpconverter([string,S],T),test_open_types_cases(25,Query,Types,Modes,Functions),%international_lucianpl([lang,"en"],Debug,[[n,main]],T,_Result),international_lucianpl([lang,"en"],Debug,Query,Types,Modes,Functions,_Result),%p2lpconverter([file,"../private/la_com_ssi1.pl"],List3),%testopen_cases(8,[[n,test]],List3),%test(1,Query,Functions,Result),% Form and HTML Table%test1(Functions),%Query=[[n,test]],%ssi_test(List3),%para(List3),%international_lucianpl([lang,"en"],Debug,[[n,paraphraser]],List3,_Result1),format(Footer,[])      .
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   web_form(_Request) :-   reply_html_page(    title('Grammar Logic'),        [         form([action='/landing', method='POST'], [         /**     p([], [  label([for=debug],'Debug (on/off):'),    input([name=debug, type=textarea])        ]),        **/      p([], [  label([for=query],'Grammar Logic Input:'),    input([name=query, type=textarea])        ]),        p([], input([name=submit, type=submit, value='Submit'], []))      ])]).
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   web_form(_Request) :-   reply_html_page(    title('List Prolog Interpreter'),        [         form([action='/landing', method='POST'], [         /**     p([], [  label([for=debug],'Debug (on/off):'),    input([name=debug, type=textarea])        ]),        **/      p([], [  label([for=query],'Query (e.g. [[n,reverse],[[1,2,3],[],[v,l]]]):'),    input([name=query, type=textarea])        ]),      p([], [  label([for=functions],'Functions (e.g. [[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]]]):'),    input([name=functions, type=textarea])        ]),      p([], input([name=submit, type=submit, value='Submit'], []))      ])]).
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   web_form(_Request) :-   reply_html_page(    title('List Prolog Package Manager - Upload'),        [         form([action='/landing', method='POST'], [     p([], [  label([for=user],'User: (e.g. "luciangreen")'),  %% If you enter strings without double quotes and there is an internal server error please contact luciangreen@lucianacademy.com    input([name=user, type=textarea])        ]),     p([], [  label([for=repository],'Repository: (e.g. "File2List2Br")'),    input([name=repository, type=textarea])        ]),     p([], [  label([for=description],'Description: (e.g. "xyz")'),    input([name=description, type=textarea])        ]),      p([], [  label([for=dependencies],'Dependencies: (e.g. [["User","Repository"], ...] or [])'),    input([name=dependencies, type=textarea])        ]),              p([], input([name=submit, type=submit, value='Submit'], []))      ])]).      :- http_handler('/landing', landing_pad, []).      landing_pad(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),%%writeln1(Data)%%lp(Data):-Data=[user=User1,repository=Repository1,description=Description1,dependencies=Dependencies1,submit=_],((string1(User1),string1(Repository1),string1(Description1),term_to_atom(D2,Dependencies1),findall([B1,C1],(member(A,D2),A=[B,C],string(B),string(C),term_to_atom(B,B1),term_to_atom(C,C1)),Dependencies2),length(D2,F),length(Dependencies2,F))->(%%writeln1([User1,Repository1]),string_atom(User2,User1),%%writeln(User2),string_atom(Repository2,Repository1),string_atom(Description2,Description1),%%string_atom(Dependencies2,Dependencies1),%%lppm_get_manifest(User2,Repository2,Description,Dependencies),lppm_get_registry(LPPM_registry_term1),strip(User2,User3),strip(Repository2,Repository3),delete(LPPM_registry_term1,[User3,Repository3,_,_],LPPM_registry_term2),(LPPM_registry_term2=[]->LPPM_registry_term3=[[User2,Repository2,Description2,Dependencies2]];(term_to_atom(LPPM_registry_term2,LPPM_registry_term4),strip(LPPM_registry_term4,LPPM_registry_term4a),LPPM_registry_term5=[LPPM_registry_term4a],append(LPPM_registry_term5,[[User2,Repository2,Description2,Dependencies2]],LPPM_registry_term3))),%%portray_clause(LPPM_registry_term3),(open_s("lppm_registry.txt",write,Stream),%%string_codes(BrDict3),write(Stream,LPPM_registry_term3),close(Stream)));((writeln1("Error: One of strings was not in double quotes.")))),%%),        %%portray_clause(Data),format('</p><p>========~n', []),%%portray_clause(Request),format('</p>')%%.
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   web_form(_Request) :-   reply_html_page(    title('Lucian Academy'),        [         form([action='/landing', method='POST'], [     p([], [  label([for=name],'Name:'),  %% If you enter strings without double quotes and there is an internal server error please contact luciangreen@lucianacademy.com    input([name=name, type=textarea])        ]),     p([], [  label([for=student_number],'Student Number:'),    input([name=student_number, type=textarea])        ]),     p([], [  label([for=course],'Course:'),    input([name=course, type=textarea])        ]),      p([], [  label([for=essay_topic],'Essay Topic:'),    input([name=essay_topic, type=textarea])        ]),      p([], [  label([for=essay],'File contents from short_essay_helper.pl:'),    input([name=essay, type=textarea])        ]),              p([], input([name=submit, type=submit, value='Submit'], []))      ])]).      :- http_handler('/landing', landing_pad, []).      landing_pad(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),%%writeln1(Data)%%lp(Data):-Data=[name=Name1,student_number=Student_number1,course=Course1,essay_topic=Essay_topic1,essay=Essay1,submit=_],((string_atom(Name2,Name1),string_atom(Student_number2,Student_number1),string_atom(Course2,Course1),string_atom(Essay_topic2,Essay_topic1),(course_and_essay_topic1(Course2,Essay_topic2)->true;(course_and_essay_topic3(Courses_and_essay_topics1),term_to_atom(Courses_and_essay_topics1,Courses_and_essay_topics2),concat_list(["Course and Essay topic must be one of ",Courses_and_essay_topics2],Notification1),writeln1(Notification1),fail)),((string(Name2),string(Student_number2),string(Course2),string(Essay_topic2),term_to_atom(D2,Essay1),D2=[Exposition,Critique,Agree_or_disagree,Future_research,_Refs],Exposition=[Exposition1,Exposition2],findall(A,(member(A,Exposition1),A=[B,C],number(B),string(C)),_D3),%length(D3,F),findall(A,(member(A,Exposition2),A=[B1,B2,B3,B4,C1,C2],number(B1),number(B2),number(B3),number(B4),string(C1),string(C2)),_D4),%length(D4,F),findall(A,(member(A,Critique),A=[B,[C|D]],number(B),string(C),D=[D1|D2],D1=[D11,D12,D13,D14,D15,D16,D17,D18],number(D11),number(D12),number(D13),number(D14),string(D15),number(D16),number(D17),string(D18),findall(A1,(member(A1,D2),A1=[D21,D22,D23,D24,D25,D26,D27,D28,D29,D30,D31,D32,D33,D34,D35],number(D21),number(D22),number(D23),number(D24),string(D25),number(D26),number(D27),string(D28),number(D29),number(D30),string(D31),number(D32),number(D33),string(D34),string(D35)),_A11)%length(A11,F1),F is F1+1),_),string(Agree_or_disagree),string(Future_research))->true;(writeln1("Essay not in correct format.  Please manually submit with all form fields given, in email using form at https://www.lucianacademy.com/contact.html "),fail)))->(/**%%writeln1([User1,Repository1]),string_atom(User2,User1),%%writeln(User2),string_atom(Repository2,Repository1),string_atom(Description2,Description1),%%string_atom(Dependencies2,Dependencies1),%%lppm_get_manifest(User2,Repository2,Description,Dependencies),lppm_get_registry(LPPM_registry_term1),strip(User2,User3),strip(Repository2,Repository3),delete(LPPM_registry_term1,[User3,Repository3,_,_],LPPM_registry_term2),(LPPM_registry_term2=[]->LPPM_registry_term3=[[User2,Repository2,Description2,Dependencies2]];(term_to_atom(LPPM_registry_term2,LPPM_registry_term4),strip(LPPM_registry_term4,LPPM_registry_term4a),LPPM_registry_term5=[LPPM_registry_term4a],append(LPPM_registry_term5,[[User2,Repository2,Description2,Dependencies2]],LPPM_registry_term3))),**/%%portray_clause(LPPM_registry_term3),%(open_s("lppm_registry.txt",write,Stream),%write(Stream,LPPM_registry_term3),%close(Stream)))%;((writeln1("Error: One of strings was not in double quotes.")))),%%),        %%portray_clause(Data),format('</p><p>========~n', []),%%portray_clause(Request),format('</p>'),phrase_from_file_s(string(String00a), "student_marks1.txt"),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),(member([_Name3,Student_number2,Course2,Essay_topic2,Mark3,Year2,Month2,Day2,Hour2,Minute2],String02a)->(concat_list([Name2,", your mark, ",Mark3,", was earned for the topic ",Essay_topic2," in the course ",Course2," on ",Day2,"/",Month2,"/",Year2," at ",Hour2,":",Minute2,"."],String_a),writeln(String_a));(get_time(TS),stamp_date_time(TS,date(Year2,Month2,Day2,Hour2,Minute2,_Seconda,_A,_TZ,_False),local),%% mark is 65-69 if agree and < 80 br%% 70-74 if disagree and < 80 br %% mark is 75-79 if disagree and >= 80 br%% 80 if agree and >= 80 brsectest(Agree_or_disagree,Mark1),append(String02a,[[Name2,Student_number2,Course2,Essay_topic2,Mark1,Year2,Month2,Day2,Hour2,Minute2]],String02a_a),term_to_atom(String02a_a,String02a_b),string_atom(String02a_c,String02a_b),(open_s("student_marks1.txt",write,Stream1),write(Stream1,String02a_c),close(Stream1)),!,concat_list([Name2,", you have earned the mark, ",Mark1," for the topic ",Essay_topic2," in the course ",Course2," on ",Day2,"/",Month2,"/",Year2," at ",Hour2,":",Minute2,"."],String_a),writeln(String_a)))); (true))%%.
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   web_form(_Request) :-   reply_html_page(    title('Messager'),        [         form([action='/landing', method='POST'], [         /**     p([], [  label([for=debug],'Debug (on/off):'),    input([name=debug, type=textarea])        ]),        **/      p([], [  label([for=message],'Message:'),    input([name=message, type=textarea])        ])            ])]).
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   web_form(_Request) :-   reply_html_page(    title('Word Count'),        [         form([action='/landing', method='POST'], [         /**     p([], [  label([for=debug],'Debug (on/off):'),    input([name=debug, type=textarea])        ]),        **/      p([], [  label([for=text],'Text to count number of words in:'),    input([name=text, type=textarea])        ])      ])]).      :- http_handler('/landing', landing_pad, []).
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   web_form(_Request) :-   reply_html_page(include('Combination Algorithm Writer Stable'),           [         form([action='/landing', method='POST'], [         /**     p([], [  label([for=debug],'Debug (on/off):'),    input([name=debug, type=textarea])        ]),        **/      p([], [  label([for=predicatename],'Predicate Name (e.g. f):'),    input([name=predicatename, type=textarea])        ]),      p([], [  label([for=rules],'Rules to choose from (e.g. [[+,2,1]]):'),    input([name=rules, type=textarea])        ]),      p([], [  label([for=maxlength],'Max Length of Algorithm Body (e.g. 4):'),    input([name=maxlength, type=textarea])        ]),      p([], [  label([for=totalvars],'Total Vars in Predicate (e.g. 8):'),    input([name=totalvars, type=textarea])        ]),      p([], [  label([for=inputvarlist],'InputVarList (e.g. [[a,1],[b,1],[c,2],[d,1]]):'),    input([name=inputvarlist, type=textarea])        ]),      p([], [  label([for=outputvarlist],'OutputVarList (e.g. [[e,5]]):'),    input([name=outputvarlist, type=textarea])        ]),      p([], [  label([for=algorithmlibrary],'Algorithm Library (e.g. [[[f1,4,1],[a,b,c,d,e],(:-),[[+,[a,b,f]],[+,[c,f,g]],[+,[d,g,h]],[=,[e,h]]]]], where 4 is the number of inputs and 1 is the number of outputs):'),    input([name=algorithmlibrary, type=textarea])        ]),      p([], input([name=submit, type=submit, value='Submit'], []))      ])]).
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   web_form(_Request) :-   reply_html_page(include('Combination Algorithm Writer Stable'),           [         form([action='/landing', method='POST'], [         /**     p([], [  label([for=debug],'Debug (on/off):'),    input([name=debug, type=textarea])        ]),        **/      p([], [  label([for=predicatename],'Predicate Name (e.g. f):'),    input([name=predicatename, type=textarea])        ]),      p([], [  label([for=rules],'Rules to choose from (e.g. [[+,2,1]]):'),    input([name=rules, type=textarea])        ]),      p([], [  label([for=maxlength],'Max Length of Algorithm Body (e.g. 4):'),    input([name=maxlength, type=textarea])        ]),      p([], [  label([for=totalvars],'Total Vars in Predicate (e.g. 8):'),    input([name=totalvars, type=textarea])        ]),      p([], [  label([for=inputvarlist],'InputVarList (e.g. [[a,1],[b,1],[c,2],[d,1]]):'),    input([name=inputvarlist, type=textarea])        ]),      p([], [  label([for=outputvarlist],'OutputVarList (e.g. [[e,5]]):'),    input([name=outputvarlist, type=textarea])        ]),      p([], [  label([for=algorithmlibrary],'Algorithm Library (e.g. [[[f1,4,1],[a,b,c,d,e],(:-),[[+,[a,b,f]],[+,[c,f,g]],[+,[d,g,h]],[=,[e,h]]]]], where 4 is the number of inputs and 1 is the number of outputs):'),    input([name=algorithmlibrary, type=textarea])        ]),      p([], input([name=submit, type=submit, value='Submit'], []))      ])]).      :- http_handler('/landing', landing_pad, []).      landing_pad(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),   %% Predicatename,Rules,Maxlength,Totalvars,Inputvarlist,Outputvarlist,Algorithmlibrary%%portray_clause(Data),        Data=[%%debug='off',%%Debug1,predicatename=Predicatename,rules=Rules,maxlength=Maxlength,totalvars=Totalvars,inputvarlist=Inputvarlist,outputvarlist=Outputvarlist,algorithmlibrary=Algorithmlibrary,submit=_],term_to_atom(Debug1,'off'),term_to_atom(Predicatename1,Predicatename),term_to_atom(Rules1,Rules),term_to_atom(Maxlength1,Maxlength),term_to_atom(Totalvars1,Totalvars),term_to_atom(Inputvarlist1,Inputvarlist),term_to_atom(Outputvarlist1,Outputvarlist),term_to_atom(Algorithmlibrary1,Algorithmlibrary),caw00(Debug1,Predicatename1,Rules1,Maxlength1,Totalvars1,Inputvarlist1,Outputvarlist1,Algorithmlibrary1,[],Result),%%format('</p><p>========~n', []),portray_clause(Result),%%writeln1(Data),format('</p>').
/*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */  get_pw(_Request) :-              %format('Content-type: text/html~n~n', []),%data_copy(Header,Footer),%format(Header,[]),   reply_html_page(    title('Web Editor'),        [form([action='/landing2', method='POST'], [            p([], [  label([for=pw],'Password:'),    input([name=pw, type=password])        ]),      p([], input([name=submit, type=submit, value='Submit'], []))      ])])%,            %format(Footer,[])      .      :- http_handler('/landing2', landing_pad2, []).
checktypes1(Vars1,TypeStatements1,TypeStatements2,TypeStatements4) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),%%writeln(checktypes1(Vars1,TypeStatements1,TypeStatements2,TypeStatements4)),Vars1=[Vars2|Vars3],list1(Vars2,_,_),TypeStatements1=[[[T,Dbw_list]|[TypeStatements3]]|TypeStatements4a],(types(on)->(debug_call(Skip,[[T,Dbw_list],TypeStatements3]));true),((checktypes3(Vars2,TypeStatements3,TypeStatements2,TypeStatements4))->((types(on)->(debug_exit(Skip,[[T,Dbw_list],Vars2]));true),checktypes1(Vars3,TypeStatements4a,TypeStatements2,TypeStatements4));     (types(on)->(debug_fail(Skip,[[T,Dbw_list],Vars2]));true))%%not(variable_name(Vars2)),. %% ** in brac as wellchecktypes1(Vars1,TypeStatements1,TypeStatements2,TypeStatements4) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),%%writeln(checktypes1(Vars1,TypeStatements1,TypeStatements2,TypeStatements4)),%%Vars1=[Vars2|Vars3],%%list(Vars1,_,_),%%length(Vars1,1),TypeStatements1=[[[T,Dbw_list]|[TypeStatements3]]|_TypeStatements4a],(types(on)->(debug_call(Skip,[[T,Dbw_list],TypeStatements3]));true),((checktypes3(Vars1,TypeStatements3,TypeStatements2,TypeStatements4))->(types(on)->debug_exit(Skip,[[T,Dbw_list],Vars1]);true);     (types(on)->debug_fail(Skip,[[T,Dbw_list],Vars1]);true)).
checktypes10(Vars1,TypeStatements1,TypeStatements2,TypeStatements4) :-get_lang_word("t",T),%trace,get_lang_word("list",Dbw_list),%%writeln(checktypes1(Vars1,TypeStatements1,TypeStatements2,TypeStatements4)),Vars1=[Vars2|Vars3],list1(Vars2,_,_),TypeStatements1=[[[T,Dbw_list]|[TypeStatements3]]|TypeStatements4a],(types(on)->(%TypeStatements3=[TypeStatements32],simplify_types([[[T,Dbw_list]|[TypeStatements3]]],[],TypeStatements31),debug_call(Skip,TypeStatements31));true),((checktypes3(Vars2,TypeStatements3,TypeStatements2,TypeStatements4))->((types(on)->(debug_exit(Skip,{Vars2}));true),checktypes10(Vars3,TypeStatements4a,TypeStatements2,TypeStatements4));     (types(on)->(debug_fail(Skip,{Vars2}));true))%%not(variable_name(Vars2)),. %% ** in brac as wellchecktypes10(Vars1,TypeStatements1,TypeStatements2,TypeStatements4) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),%%writeln(checktypes1(Vars1,TypeStatements1,TypeStatements2,TypeStatements4)),%%Vars1=[Vars2|Vars3],%%list(Vars1,_,_),%%length(Vars1,1),TypeStatements1=[[[T,Dbw_list]|[TypeStatements3]]|_TypeStatements4a],(types(on)->(%TypeStatements3=[TypeStatements32],simplify_types([[[T,Dbw_list]|[TypeStatements3]]],[],TypeStatements31),debug_call(Skip,TypeStatements31));true),((checktypes3(Vars1,TypeStatements3,TypeStatements2,TypeStatements4))->(types(on)->debug_exit(Skip,{Vars1});true);     (types(on)->debug_fail(Skip,{Vars1});true)).
delete_cp_value(Choice_point_trail1,[Predicate_number_a1,"prev_pred_id",Prev_pred_id],Choice_point_trail31,CP_Vars1,CP_Vars21) :-reverse(Choice_point_trail1,Choice_point_trail14),% [8, 9, 4, 3, [4, "prev_pred_id", 2], -1, "predicate", _51400588, _51400594, [[5, "prev_pred_id", 2], [6, "prev_pred_id", 2]]]member([A1,A2,A_Pred_id,A_Level,A_Predicate_number,-1,"predicate",A4,A3,A5],Choice_point_trail14),%D11=[A_Pred_id,A_Level,A_Predicate_number,-1,"predicate",A3,A4,A5],((member([Predicate_number_a1,"prev_pred_id",Prev_pred_id],A5),delete(A5,[Predicate_number_a1,"prev_pred_id",Prev_pred_id],A6),%A5=[A6|A7]->replace_cp(Choice_point_trail1,A1,A2,[A_Pred_id,A_Level,A_Predicate_number,-1,"predicate",A4,A3,A5],[A_Pred_id,A_Level,A_Predicate_number,-1,"predicate",A4,A3,A6],Choice_point_trail31,CP_Vars1,CP_Vars21))->true;(Choice_point_trail1=Choice_point_trail31,CP_Vars1=CP_Vars21)).
expand_types1(Data,Types1,Types2) :-%get_lang_word("t",T),%get_lang_word("string",Dbw_string),Data="|",%string(Data),append(Types1,["|"],Types2),!.
expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),%Data1=[Data2Data3|Data41],%not(Data2Data3=[T,_]),not(Data1=[T,_]),%trace,curly_head_taila(Data1,Data2,Data3),%trace,expand_types1(Data2,[],Types3),expand_types1(Data3,Types3,Types4),Types5=[[[T,Dbw_list],Types4]],%trace,%findall(Types61,(member(Data4,Data41),%expand_types1(Data4,[],Types6),%),Types62),%foldr(append,Types62,Types6),append_list3([Types1,%Types5,Types5],Types2),!.
find_repeating_structures2(Position2,Position2,Length1,_Length2,List,List) :- !.
pred_already_in_list1(PredicateName,InputVars1L,OutputVarsL,Rules0,Rules) :-pred_already_in_list2(PredicateName,InputVars1L,OutputVarsL,Rules0,Rules).
process_file(String2,Term,Term1,%_String02a,%Additions_to_brdict31,Additions_to_brdict3,Pseudo_algorithms1,Pseudo_algorithms%,First_words1,%First_words) :-%trace,String2=[Word1,Word2|Words],writeln1(["Simplify algorithm",Word1,Word2]),found(Word1,Term,Term1,Item1,%Term1,Additions_to_brdict31_4),found(Word2,Term,Additions_to_brdict31_4,Item2,%Additions_to_brdict31_4,Additions_to_brdict31_5),stronger_word([Item1,Word1],[Item2,Word2],Term,_Word3,%String02a,First_words3,Item_a),append(Pseudo_algorithms1,[Item_a],Pseudo_algorithms2),%trace,process_file(Words,Term,Additions_to_brdict31_5,%First_words3,%Additions_to_brdict31_5,Additions_to_brdict3,Pseudo_algorithms2,Pseudo_algorithms%,First_words3,%First_words).
process_file(_,_Term,Term1,%String02a,%Additions_to_brdict3,Term1,Pseudo_algorithms,Pseudo_algorithms%,First_words,%String02a) :- !.
process_rhythm1([['taaaa','b'],['taaa','c'],['taa','d'],['ta','e'],['ty','g'],['ca','g'],['ti','f'],['zaaaa','h'],['zaaa','i'],['zaa','j'],['za','k'],['zi','l'],['zy','m']]).
replace_cp2(Choice_point_trail,[],Choice_point_trail,CP_Vars,CP_Vars) :- !.
split3([],List,List) :- !.
split3([],List,List) :- !.split3(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[Name,In,Out]|_Rest],append(List1,[[Name,In,Out]],List6),split3(List4,List6,List2),!.
      :- http_handler('/landing1', landing_pad1, []).
%delete(Args10,[v,_],Args1),replace_a_word(_A1,_B1,[],Args,Args).replace_a_word(A1,B1,Args1,Args2,Args3) :-Args1=[A222|A3],((is_list(A222),not(variable_name(A222)))->(replace_a_word(A1,B1,A222,[],A21),A21=A2);%append(Args2,A21,A2));A222=A2),%writeln1([a2,A2]),(((A2=[v,_V]->true;not(A2=B1)))->(append(Args2,[A2],Args4),replace_a_word(A1,B1,A3,Args4,Args3));(term_to_atom(A2,A21),string_codes(A21,Args21),string_codes("[]\"'",Codes1),split_on_substring117(Args21,Codes1,[],List),%trace,replace_a_word1(A1,List,[],List3),%term_to_atom(List21,List22),%string_atom(List3,List22),%writeln1(List21),%trace,%maplist(append,[[List21]],[List2]),%maplist(append,[List22],[List23]),%maplist(append,[List23],[List2]),%concat_list(List2,List3),%maplist(append,[[Args2,List3,A3]],[Args3]))).
repeat1(M1,N,Algorithm1,Algorithm2,Vars1,Vars2) :-writeln("Is this the final variable? (y/n)"),read_string(user_input, "\n", "\r", _End, Q),(Q="y"->(Algorithm2=Algorithm1,Vars2=Vars1);writeln("What variable is this last variable linked to?"),read_string(user_input, "\n", "\r", _End2, V),concat_list(["member(A",M1,",",N,V,"),A",M1,"=[",N,",",V,"],"],Algorithm1a),append(Vars1,[V],Vars3),M2 is M1+1,string_concat(Algorithm1,Algorithm1a,Algorithm1b),repeat1(M2,V,Algorithm1b,Algorithm2,Vars3,Vars2)).
% * convert term to a string after x before find_lists3b="try", c [before very start if string or leave as list] xx x (x unless run an earlier s2g pred, x for the moment x: can change non single char items to strings, run try on them)% find from sublists, substrings% use grammars not alg and appends lists to save big term containing input using brackets% s2l ... with constants x check specific patterns% dec trees contain ["["..."]"] x earlier, turn grammar input into term (big s2l)% x use alg not grammar so can more easily make a term - gen alg% convert input rec struct to alg with 'AN' variables marked%* rs and data on self recursively% use stwa to get variables, try different orders of i vars first, then one part at a time%* searches o term top down for parts% It doesn't matter about brackets% 1 item that is a list or list with r,o xx [], brackets x% do bottom level first, find fns to give result% use format model to transform data% - identifies a format used% transforms an i item to an o item% - neighbours - 1->2% - col_ns_to_action - makes change% * try a format, assume it is correct%test_formats(Vs,O,F).% use stwa to put variables% if list items are in order, % up to where are not, get list % (checks o for parts of i)% test% * input into one big term% convert dec tree to alg, like gen alg% take input needed from preds for output% form of relative stwa x, takes from a pos in rec struct (smooth), output rec struct% changes rec structs to algs% generate code for i,p,(o x) where% p = rel bw i,o% depends on if part of a term or smooth% - get stwa smooth needs sublist or substring% test% given input, tests% formats% teach neighbours, col_ns_to_action (extract, change - stwa)% get_num_s2a(N) :-num_s2a(N),N1 is N+1,retractall(num_s2a(_)),assertz(num_s2a(N1)).
% ssh root@46.250.240.201%  open_file_sh("root@x.x.x.x:~/Dropbox/GitHub/",)% directory_files_sh("",A).
%% finds the length of each string - from position 1 to (length of string1) of string1%% starts with the shortest possible string, then increases the length%% repeat this for second string%%string1%%*** check with s2,s3 in dbcheck_strings1(0,_String1,_String2,_Db,List2,List2) :- !.
%% finds the length of each string - from position 1 to (length of string1) of string1%% starts with the shortest possible string, then increases the length%% repeat this for second string%%string1%%*** check with s2,s3 in dbcheck_strings1(0,_String1,_String2,_Db,List2,List2) :- !.check_strings1(Length_string1,String1,String2,Db,List2,List2b) :-%% finds the first str%%length(List,Index),length(List1,Length_string1),append(_,List1,String1),Length_string2 is Length_string1-1,Length_string3 is Length_string1+1,check_strings2(0,Length_string3,List1,String2,Db,List2,List2c),(var(List2c)->check_strings1(Length_string2,String1,String2,Db,List2c,List2b);List2c=List2b),!.
%% finds the length of each string - from position 1 to (length of string1) of string1%% starts with the shortest possible string, then increases the length%% repeat this for second string%%string1%%*** check with s2,s3 in dbcheck_strings1(0,_String1,_String2,_Db,List2,List2) :- !.check_strings1(Length_string1,String1,String2,Db,List2,List2b) :-%% finds the first str%%length(List,Index),length(List1,Length_string1),append(_,List1,String1),Length_string2 is Length_string1-1,Length_string3 is Length_string1+1,check_strings2(0,Length_string3,List1,String2,Db,List2,List2c),(var(List2c)->check_strings1(Length_string2,String1,String2,Db,List2c,List2b);List2c=List2b),!.check_strings2(Length_string,Length_string,_String1,_String2,_Db,List2,List2) :- !.
%find_all_depending_luciancicd(LPPM_registry_term1,Repository1,Dependencies,Dependencies) :- !.
find_repeating_structures3(_Position1,_Position2,Length1,Length1,List,List) :- !.
%In2=[Add,[function,RX,CX,function,F32]],% can't simplify a column referred to twice or more/*merge_adjacent_cells_in_formula(G,G1),%*Formula4,Formula3,F3,F31,Row2,Row21),merge_adjacent_cells_in_formula(G,G1)%Formula,Formula3,F3,F31,Row2,Row21) :-   (not((append(Formula,["+"],Instances1),length(Formula2),A1 is Formula2/2,length(L,A1),findall([_,"+"],member(_,L),L1),flatten(L1,L2),Formula2=L2))->(Instances1=Instances2,%append(Instances1a,[In],In2),simplify_col2(Instances3,In2,Instances2,Row2,Row3));% same_pattern*/%function=[[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]|Formula4],%D=[[1,a],[1,b],[2,a],[2,b]],findall(A,member([A,_],D),C1),sort(C1,C2),findall([E1,B],(member(E1,C2),findall(H,member([E1,H],D),B)),G).
%In2=[Add,[function,RX,CX,function,F32]],% can't simplify a column referred to twice or more/*merge_adjacent_cells_in_formula(G,G1),%*Formula4,Formula3,F3,F31,Row2,Row21),merge_adjacent_cells_in_formula(G,G1)%Formula,Formula3,F3,F31,Row2,Row21) :-   (not((append(Formula,["+"],Instances1),length(Formula2),A1 is Formula2/2,length(L,A1),findall([_,"+"],member(_,L),L1),flatten(L1,L2),Formula2=L2))->(Instances1=Instances2,%append(Instances1a,[In],In2),simplify_col2(Instances3,In2,Instances2,Row2,Row3));% same_pattern*/%function=[[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]|Formula4],%D=[[1,a],[1,b],[2,a],[2,b]],findall(A,member([A,_],D),C1),sort(C1,C2),findall([E1,B],(member(E1,C2),findall(H,member([E1,H],D),B)),G)./*A21=[Table|A25],test_rows(Table),ff_rows(A23,A23_new,Table,A24),test col% from 1 or a to n or n-m% compress rows, colstest_rows(A21) :-% in non headingsappend([Headings],Rest,A21),not(length(Headings,1)), % not a table of formulasforall((member(Row,Rest),(append(_,[Last_column],Rest),Last_column=[function,_,_,_,XY2,F21],not((member([var,_,_,_,_,_,[]],XY2)))))),!. % a valueff_rows(Old_tables,Old_tables_new,A21,A231) :-A21=[Headings|A25]ff_rows1(Old_tables,Old_tables_new,A25,A23),append([Headings],A23,A231),!.
walls_from_connector_points(_XN1,[],Grid,Grid) :- !.
walls_from_connector_points(_XN1,_YN1,[],Grid,Grid) :- !.
**/backtranslateuntilcorrect(List1,List2,Orig,PastTries,FromLang,ToLang,E,H,Notification1,Notification2,Output) :- %%trace,(phrase_from_file(string(List6),E),(phrase(file1(Outputs11),List6),removenotice(Outputs11,Outputs1a),sort(Outputs1a,Outputs1)%%not(Outputs1=Orig)%%writeln([outputs1,Outputs1])%%not(Outputs1=[]))->(( %% remove extra br ***(%% Use a correct translation from ctt-orig-tran.txttryoutputs0(Outputs1,List2,[],Output),not(Output=[]))->true;(%% Use a correct translation from a back-translation from ctt-orig1-orig2.txt(tryoutputs(Outputs1,List1,[],Output1),tryoutputs0(Output1,List2,[],Output),not(Output=[]))->true;((trytranslations1(Outputs1,FromLang,ToLang,false,Flag1,[],Outputs3,_,Output2)),(Flag1=true->Output=Output2;(trytranslations2(Orig,Outputs3,Output3,Flag2),(Flag2=true->Output=Output3;(openeditor(Notification1,Notification2,Orig,PastTries,Outputs1,Tries,E,H),backtranslateuntilcorrect(List1,List2,Orig,Tries,FromLang,ToLang,E,H,Notification1,Notification2,Output)))))))));(openeditorwitherror(H),Tries=PastTries,backtranslateuntilcorrect(List1,List2,Orig,Tries,FromLang,ToLang,E,H,Notification1,Notification2,Output))).
data_copy(Header,Footer) :-Header='<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN"><html lang="en">  <head>    <meta http-equiv="content-type" content="text/html; charset=UTF-8">    <meta charset="utf-8">    <title>State Saving Interpreter</title>    <style type="text/css"> <!-- A:link {text-decoration: none;} A:visited {text-decoration: none;} A:hover {text-decoration: underline;} img { height: auto; max-width: 100%; object-fit: contain;} table {table-layout: fixed; width: 100%;}td {word-wrap: break-word;}-->   </style>    <meta name="viewport" content="width=device-width, initial-scale=1">  </head>  <body style="background-color: rgb(255, 239, 227);">       <div style="text-align: center;">      <table width="80%">        <tbody>          <tr>            <td>              <p>',Footer='</p>            </td>          </tr>        </tbody>      </table>      <br>    <br>  </body></html>'.
interpretbody(_Functions1,_Functions2,Vars,Vars,[],true) :- true.%%!.
/*find_g(T,G%,G2]):-T=[r,N0,T1],sub_term_wa([r,_,_],T1,In),findall([X3,[Ad,X]],(member([Ad,X1],In),X1=[r,N,A],sub_term_wa([r,_,_],A,In1),findall([Ad1,N1],(member([Ad1,Y1],In1),Y1=[r,N1,A1]),Y2),foldr(put_sub_term_wa_ae,Y2,A,X21),X1=[_,_,X31],%trace,(In=[]->X=[];find_g(X31,X)),X3=[[N0,"-->"%][X21,"-->",[]],[N0,"-->",X],[X21,"-->",[]],[X21,"-->",X]]),X2),findall(Z,member([_,Z],X2),Z1),foldr(put_sub_term_wa_ae,Z1,T1,G2),findall(Z,member([Z,_],X2),G1),foldr(append,G1,G),!.*//*find_n_length_sublists(A1,SLs) :-findall([Ad,A],(member([Ad,A2],A1))).find_repeating_structures1(_Position1,_Position2,_Length1,_Length2,[],List,List) :- !.
interpretstatement4(ssi,_F0,_Functions,[[Dbw_n,Dbw_stringconcat],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut,Vars2c,AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,((get_lang_word("stringconcat",Dbw_stringconcat1),Dbw_stringconcat1=Dbw_stringconcat)->true;Dbw_stringconcat=string_concat),%%writeln1(8),        ssi_interpretpart(stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2,Vars2c,AC).
match4_new1(Statement1,Statement2,Vars1,Vars2%,_Standard_or_e4) :- %get_lang_word("v",Dbw_v), %(variable_name(Statement1)->(find_sys(Name1),Statement1a=[Dbw_v,Name1]);%Statement1a=Statement1), variable_name(Statement1), variable_name(Statement2), %(Standard_or_e4=standard-> %putvalue(Statement1,empty,Vars1,Vars2); %getvalue_new2(Statement1,Value1,Vars1,Standard_or_e4), %getvalue_new2(Statement2,Value2,Vars1,Standard_or_e4), (Statement1=Statement2->Vars1=Vars2; putvalue(Statement2,Statement1,Vars1,Vars2)),!.
%writeln1([atom_string(Hidden11,Hidden1)]),new_folder(Input%,Input01) :-%*/data(Header,Footer),%/*format(Header,[]),writeln(Input),writeln("<br><br>"),foldr(string_concat,["<form action=\"/new_folder\" method=\"POST\">        <p>New folder:</p>  <input type=hidden name=text1 value=\"",Input,"\">        <textarea name=text2 rows=\"1\">","","</textarea>  <input type=submit name=submit value='Submit'>    </form>"],String),writeln(String),%*/format(Footer,[])%*/.
/*                                                              induct01([[[c,d],e],f],_,[],C).C = [[append, [(c:d):e, f],  ((c:d):e):f], [append, [c:d, e],  (c:d):e], [append, [c, d], c:d]].*/induct01(A,_,C1,C2) :-  test1(off,1,_), induct0(A,_,C1,C2),!.induct0([A,B],_,C1,C2) :-  atom(A),atom(B), induct([A,B],_Out,[],Commands2), append(C1,Commands2,C2), !.induct0(I,O,C1,C2) :- %induct0(I1,O,C1,C4), induct(I,_Out,[],Commands2), append(C1,Commands2,C3), I=[I1|_I2], induct0(I1,O,C3,C2).
add_line_numbers_to_algorithm_body2(Body1,Body2,Number1,Number2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        Body1=[[[Dbw_n,"->"],[Statements1,Statements2,Statements2a]]|Statements3],  Number1a is Number1+1,        add_line_numbers_to_algorithm_body2([Statements1],Body3,Number1a,Number3),        add_line_numbers_to_algorithm_body2([Statements2],Body4,Number3,Number4),                %%trace,                add_line_numbers_to_algorithm_body2([Statements2a],Body5,Number4,Number5),        add_line_numbers_to_algorithm_body2(Statements3,Body6,Number5,Number2),        append_list2([Body3,Body4,Body5],Body345),        Body7=[Number1,[Dbw_n,"->"],Body345],                append([Body7],Body6,Body2),        !.
appendlogic([Formula1,Operator,Formula2],Name2,Formula3) :-        appendlogic(Formula2,Name2,Formula4),        Formula3=[Formula1,Operator,Formula4].
collect_arguments_body2(Body1,Body2,Body3) :-get_lang_word("n",Dbw_n),        Body1=[[[Dbw_n,"->"],[Statements1,Statements2,Statements2a]]|Statements3],  %Number1a is Number1+1,        collect_arguments_body2([Statements1],Body2,Body4),        collect_arguments_body2([Statements2],Body4,Body5),                %%trace,                collect_arguments_body2([Statements2a],Body5,Body6),        collect_arguments_body2(Statements3,Body6,Body3),        %append_list2([Body3,Body4,Body5],Body345),        %Body7=[Number1,[n,"->"],Body345],                %append([Body7],Body6,Body2),        !.
contains_empty([]) :- fail.
find_lists3b(UV2,RS) :-% split on "[", "]", (",") rec'ly do nested brackets% - () turn [a,b,c] into [a,[b,[c]]]% later: split on delimiters in strings incl " " ,;.()[]% label [split,_]% [,]+[,]=[,,,]% [r,[r,a]]=[r,a]retractall(rec_join_n(_)),assertz(rec_join_n(1)),retractall(rec_join_vars(_)),assertz(rec_join_vars([])),retractall(tmp_join_n(_)),assertz(tmp_join_n(1)),%trace,rec_join(UV2,RS1),sub_into_rjv(RS1,RS2),%trace,remove_nested_tmps(RS2,RS3),put_sub_term_wa_ae_smooth_cycle_s2a(RS3,RS)%sub_term_wa([split1,_],RS3,In5),%findall([Ad,C],member([Ad,[split1,C]],In5),In6),%trace,%foldr(put_sub_term_wa_ae_smooth,In6,RS3,RS4),%trace,%flatten_join1(RS4,RS)%foldr(append,RS5,RS).
find_state_machine_body2(Body1,Body2,Return_line_true,Return_line_false,Pred_numbers) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("exit_function",Dbw_exit_function1),Dbw_exit_function1=Dbw_exit_function,        get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,        Body1=[[Number,[Dbw_n,"->"],[Statements1,Statements2,Statements2a]]|Statements3],                        %trace,        find_first_line_number(Statements1,Statements1_number),        find_first_line_number(Statements2,Statements2_number),        find_first_line_number(Statements2a,Statements2a_number),        %%trace,(Statements3=[]->Statements3_number=Return_line_true;        find_first_line_number(Statements3,Statements3_number)),               find_state_machine_body2([Statements1],Body3,Statements2_number,Statements2a_number,Pred_numbers),        find_state_machine_body2([Statements2],Body4,[Dbw_exit_function,Number],Return_line_false,Pred_numbers),               %%trace,                find_state_machine_body2([Statements2a],Body5,[Dbw_exit_function,Number],Return_line_false,Pred_numbers),        find_state_machine_body2([Statements3],Body6,Return_line_true,Return_line_false,Pred_numbers),        maplist(append,[[Body3,Body4,Body5,Body6]],[Body3456]),        Body7=[Number,[Dbw_on_true,Statements1_number],[Dbw_go_after,Statements3_number],[Dbw_on_false,Return_line_false],[Dbw_go_to_predicates,-],[Dbw_n,"->"]],        append([Body7],Body3456,Body2),        %append(Body71,Body6,Body2),        !.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        Body=[[[Dbw_n,"->"],[Statements1,Statements2,Statements2a]]|Statements3],        ((interpretbody(Functions0,Functions,Vars1,Vars3,[Statements1],Result2)           %%((Result2=cut)->!;true))           ->                 interpretbody(Functions0,Functions,Vars3,Vars4,[Statements2],Result22)                %%((Result22=cut)->!;true))                ;                interpretbody(Functions0,Functions,Vars1,Vars4,[Statements2a],Result23))),                %%((Result23=cut)->!;true))),        interpretbody(Functions0,Functions,Vars4,Vars2,Statements3,Result3),                        logicalconjunction(Result1a,Result2,Result22),                logicaldisjunction(Result1b,Result1a,Result23),                logicalconjunction(Result1,Result1b,Result3),        %%((Result3=cut)->!;true),        true.%%!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_getz],[[[Dbw_n, Var], [Variable1]]]],Vars1,Vars2,true,nocut) :-%get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("getz",Dbw_getz1),Dbw_getz1=Dbw_getz,%trace,%assertz(Var(In))functor(A,Var,1),findall(Variable21,(A,arg(1,A,Variable21)),Variable2),%Variable2=Value2,        getvalue(Variable2,Value2,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),%not(is_empty(Value1)),%expression(Value1),%is_empty(Value2),        val1emptyorvalsequal(Value2,Value1),%%isval(Value2),debug_call(Skip,[[Dbw_n,Dbw_getz],[variable]]),(        putvalue(Variable1,Value2,Vars1,Vars2)->debug_exit(Skip,[[Dbw_n,Dbw_getz],[Value1]]);     debug_fail(Skip,[[Dbw_n,Dbw_getz],[Value1]])).
n_to_br(Term,Term1) :-sub_term_types_wa([string,atom],Term,Instances),findall([Add,X],(member([Add,X1],Instances),atomic_list_concat(A,'\n',X1),atomic_list_concat(A,'<br>',X2),(atom(X1)->X2=X;(atom_string(X2,X4)),X4=X%,term_to_atom(X4,X))),X3),foldr(put_sub_term_wa_ae,X3,Term,Term1),!.
new_var(B) :- new_var1(A),B is A+1, retractall(new_var1(_)), assertz(new_var1(B)).% New commands can only have inputs that occur in the header or once only in the bodyget_last_arg(In,Rules1,Last_arg) :- %trace, %member([Args00,_],[]),  % find args that occur once findall(Args,member([_P1,Args],Rules1),Args3), foldr(append,Args3,Args4), sort(Args4,Args7),  findall(G,(member(G,Args7),findall(G,member(G,Args4),H),length(H,J),J=1),L),  %subtract(Args4,Args5,Args6), %sort(Args6,Args7),  findall(Args00,(member([Args00,_],In),not(var(Args00))),Args02),append(Args02,L,Args01), %trace, member(Last_arg,Args01).
replace_pred_names(Body1,Body2,Body3,To_replace,Replace_with) :-get_lang_word("n",Dbw_n),        Body1=[[[Dbw_n,"->"],[Statements1,Statements2,Statements2a]]|Statements3],  %Number1a is Number1+1,        replace_pred_names([Statements1],[],Body4,To_replace,Replace_with),        replace_pred_names([Statements2],[],Body5,To_replace,Replace_with),                %%trace,                replace_pred_names([Statements2a],[],Body6,To_replace,Replace_with),        replace_pred_names(Statements3,[],Body3a,To_replace,Replace_with),                       foldr(append,[Body4,Body5,Body6],[],Body7),                                  append(Body2,[[[Dbw_n,"->"],Body7]|Body3a],Body3),        %append_list2([Body3,Body4,Body5],Body345),        %Body7=[Number1,[n,"->"],Body345],                %append([Body7],Body6,Body2),        !.
replace_vars(Body1,Body2,Body3,Var_index1,Var_index2,Var_table1,Var_table2) :-get_lang_word("n",Dbw_n),        Body1=[[[Dbw_n,"->"],[Statements1,Statements2,Statements2a]]|Statements3],  %Number1a is Number1+1,        replace_vars([Statements1],[],Body4,Var_index1,Var_index3,Var_table1,Var_table3),        replace_vars([Statements2],[],Body5,Var_index3,Var_index3a,Var_table3,Var_table3a),                %%trace,                replace_vars([Statements2a],[],Body6,Var_index3a,Var_index4,Var_table3a,Var_table4),        replace_vars(Statements3,[],Body3a,Var_index4,Var_index2,Var_table4,Var_table2),                       foldr(append,[Body4,Body5,Body6],[],Body7),                  append(Body2,[[[Dbw_n,"->"],Body7]|Body3a],Body3),                %append_list2([Body3,Body4,Body5],Body345),        %Body7=[Number1,[n,"->"],Body345],                %append([Body7],Body6,Body2),        !.
ssi1([Pred_id,Level,Predicate_number,Line_number_a,"line",Query,Vars1,All_predicate_numbers], _, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2) :-ssi1([Pred_id,Level,Predicate_number,Line_number_a,"line",Query,Vars1,All_predicate_numbers], _, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,["appearance of command",-],CP_Vars1,CP_Vars2).
string_to_list_b1([],N,N,Options,Options) :- !.
test(137,[[n,equals41],[[v,b]]],[        [[n,equals41],[[v,b]],":-",        [       [[n,equals42],[[[v,b],"|",[v,c]]]]%        [       [[n,equals42],[[v,b]]]        ]],        [[n,equals42],[[1,2,3]]]        ],[[[[v,b],1]]]).test(138,[[n,equals41]],[  [[n,equals41],":-",  [[[n,equals4_on]]]]],  [[]]).
 mv_lc(From,To) :- foldr(string_concat,[%"scp -pr ../../Github_lc/ ", "scp -pr " %"rsync -av --ignore-existing --remove-source-files --exclude=\".*\"  " ,From,%"../../Github_lc/ ", " ", To,%," && \\","\n","rsync -av --delete `mktemp -d`/ ",From "\n","rm -rf ",From,"*"],Command314), catch(bash_command(Command314,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],Text41),writeln1(Text41),abort )),!. rm_lc(Item) :-foldr(string_concat,[%"scp -pr ../../Github_lc/ ", "rm -rf ",Item %Folder1 ],Command315), catch(bash_command(Command315,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42)%,writeln1(Text42)%,abort )),!.
        add_line_numbers_to_algorithm_body2(Body1,Body2,Number1,Number2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,        Body1=[[[Dbw_n,Dbw_not],Statement]|Statements2 %% [] removed from Statement        ],  Number1a is Number1+1,        add_line_numbers_to_algorithm_body2(Statement,Body3,Number1a,Number3),        add_line_numbers_to_algorithm_body2(Statements2,Body4,Number3,Number2),        %trace,  append([Number1,%%*,  [Dbw_n,Dbw_not]],Body3,Body5),  append([Body5],Body4        ,Body2),!.add_line_numbers_to_algorithm_body2(Body1,Body2,Number1,Number2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,        Body1=[[[Dbw_n,Dbw_or],[Statements1,Statements2]]|Statements3],  Number1a is Number1+1,        add_line_numbers_to_algorithm_body2([Statements1],Body3,Number1a,Number3),        add_line_numbers_to_algorithm_body2([Statements2],Body4,Number3,Number4),        add_line_numbers_to_algorithm_body2(Statements3,Body5,Number4,Number2),        append(Body3,Body4,Body34),        Body6=[Number1,[Dbw_n,Dbw_or],Body34        ],        append([Body6],Body5,Body2),        !.
        collect_arguments_body2(Body1,Body2,Body3) :-get_lang_word("n",Dbw_n),get_lang_word("not",Dbw_not),        Body1=[[[Dbw_n,Dbw_not],Statement]|Statements2 %% [] removed from Statement        ],  %Number1a is Number1+1,        collect_arguments_body2([Statement],Body2,Body4),        collect_arguments_body2(Statements2,Body4,Body3),  %append([Number1,%%*,  %[n,not]],Body3,Body5),  %append([Body5],Body4     %   ,Body2),!.
        interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-get_lang_word("n",Dbw_n),get_lang_word("not",Dbw_not),        Body=[[[Dbw_n,Dbw_not],[Statement]]|Statements2        ],debug_call(Skip,[[Dbw_n,Dbw_not]]),        ((not(interpretbody(Functions0,Functions,Vars1,_Vars3,[Statement],Result22)))-> %% 2->1        %%((Result22=cut)->!;true)),%%->debug_exit(Skip,[[Dbw_n,Dbw_not]]);     debug_fail(Skip,[[Dbw_n,Dbw_not]])),%%writeln1(interpretbody(Functions0,Functions,Vars1,Vars3,[Statement],Result2)),        interpretbody(Functions0,Functions,Vars1,Vars2,Statements2,Result32),        %%((Result32=cut)->!;true),       logicalnot(Result1a,Result22), logicalconjunction(Result1,Result1a,Result32),true.%%!.
        interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-get_lang_word("n",Dbw_n),get_lang_word("not",Dbw_not),        Body=[[[Dbw_n,Dbw_not],[Statement]]|Statements2        ],debug_call(Skip,[[Dbw_n,Dbw_not]]),        ((not(interpretbody(Functions0,Functions,Vars1,_Vars3,[Statement],Result22)))-> %% 2->1        %%((Result22=cut)->!;true)),%%->debug_exit(Skip,[[Dbw_n,Dbw_not]]);     debug_fail(Skip,[[Dbw_n,Dbw_not]])),%%writeln1(interpretbody(Functions0,Functions,Vars1,Vars3,[Statement],Result2)),        interpretbody(Functions0,Functions,Vars1,Vars2,Statements2,Result32),        %%((Result32=cut)->!;true),       logicalnot(Result1a,Result22), logicalconjunction(Result1,Result1a,Result32),true.%%!.interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result0) :-get_lang_word("n",Dbw_n),get_lang_word("or",Dbw_or),        Body=[[[Dbw_n,Dbw_or],[Statements1,Statements2]]|Statements3],        (interpretbody(Functions0,Functions,Vars1,Vars3,[Statements1],Result1)        %%((Result1=cut)->!;true)); %% *** changed from 1 to Result2%%,((Value1=cut)->!;true));        interpretbody(Functions0,Functions,Vars1,Vars3,[Statements2],Result2)),%%!. *** changed from 1 to Result2        %%((Result2=cut)->!;true),        interpretbody(Functions0,Functions,Vars3,Vars2,Statements3,Result3),        %%((Result3=cut)->!;true),        logicaldisjunction(Result1a,Result1,Result2),        logicalconjunction(Result0,Result1a,Result3),        true.%%!.
        process_body2(Body1,Body2) :-        Body1=[[not,[Statement]]|Statements2        ],        process_body2([Statement],Body3),        process_body2(Statements2,Body4),  append([[n,not]],Body3,Body5),  append([Body5],Body4        ,Body2),!.
 /*delete_duplicate_clauses([],List,List) :- !.
% bd3 - person, subject andfound(Word1,Term,Additions_to_brdict1,Word2,%Additions_to_brdict1,Additions_to_brdict2) :-%(Word1="bot"->trace;true),%trace,%(Word1="june"->trace;true),(member([Word1,Word21],Term)->true;(writeln(["Error:",Word1,"not in brdict1.txt."]),abort)),(Word21=""->Word2=Word1;Word2=Word21),append(Additions_to_brdict1,[[Word2,Word1]],Additions_to_brdict2)/**(member([Word2,Item1],Additions_to_brdict1)->Additions_to_brdict1=Additions_to_brdict2;(%trace,findall(Word3,(member([Word3,Word2],Term)),Word22),append([Word2],Word22,Word23),%trace,sort(Word23,Word241),delete(Word241,"",Word24),length(Word24,Menu_items_length),(Menu_items_length=1->([Item1]=Word24,append(Additions_to_brdict1,[[Word2,Item1]],Additions_to_brdict2));(writeln1(["What is the word for",Word1]),numbers(Menu_items_length,1,[],N),findall([N1,"\t",Menu_item,"\n"],(member(N1,N),get_item_n(Word24,N1,Menu_item)),Menu1),maplist(append,[Menu1],[Menu3]),concat_list(Menu3,Menu2),writeln(Menu2),repeat,%trace,concat_list(["Please choose from menu items 1-",Menu_items_length,", or enter a new word (letters only, no spaces):"],Prompt),writeln1(Prompt),read_string(user_input,"\n","\r",_,Input),((%trace,number_string(Input_num,Input),Input_num>=1,Input_num=<Menu_items_length,%trace,get_item_n(Menu1,Input_num,[_,_,Item1,_]),%trace,append(Additions_to_brdict1,[[Word2,Item1]],Additions_to_brdict2))->true;(string(Input)->(Input=Item1,append(Additions_to_brdict1,[[Word2,Item1]],Additions_to_brdict2)))))))).
% repeat_until_the_same(A,1,((A=1->A2=2;A2=1),writeln(A2)),A2).
%% Dukel goes to the grammar exampletest(16,[[n,grammar1],["john ate the apple"]],[  [[n,grammar1],[[v,u]],":-",  [   [[n,sentence],[[v,u],""]]  ]  ],    [[n,sentence],"->",  [[[n,subject]],[[n,verbphrase]]]],  [[n,verbphrase],"->",  [[[n,verb]],[[n,object]]]],    [[n,subject],["",""]],  [[n,subject],"->",["john"," "]],  [[n,subject],[[v,a],[v,a]]],    [[n,verb],["",""]],  [[n,verb],"->",["ate"," "]],  [[n,verb],[[v,a],[v,a]]],  [[n,object],["",""]],  [[n,object],"->",["the"," ","apple"]],  [[n,object],[[v,a],[v,a]]]],[[]]).
%%entry3([Word1]) -->%% "[", sentence1(Word11), "]", {string_codes(Word1,Word11),string(Word1)},%%!.
include('../../listprologinterpreter/la_strings.pl').:-include('../../listprologinterpreter/la_maths.pl').:-include('strings_to_grid.pl').build_maze3d(X,Y,Z,Maze) :-X1 is (2*X)+1,Y1 is (2*Y)+1,Z2 is (2*Z)+1,Z21 is Z2-1,%grid(X1,Y1,1,Grid11), %grid(X1,Y1,Z2,Grid12),plane(X1,Y1,1,Grid11%,Grid13),plane(X1,Y1,Z2,Grid12%,Grid14),   numbers(Z21,2,[],ZN),      %trace,findall(Grid2,(member(Z1,ZN),grid(X1,Y1,Z1,Grid1), border(X1,Y1,Z1,Grid1,Grid2)),Grid15),%writeln([grid11,Grid11]),%writeln([grid15,Grid15]),%writeln([grid12,Grid12]),maplist(append,[Grid15],[Grid21]),%writeln([grid21,Grid21]),maplist(append,[[Grid11],[Grid21],[Grid12]],Grid211),%writeln([grid211,Grid211]),%trace,maplist(append,[Grid211],[Grid2]),      %writeln([grid2,Grid2]),% 1 (-4 x) walls from each connector point% 234->579->35   %X2 is X-1,   %Y2 is Y-1,   %trace,   numbers(Y,2,[],YN),numbers(X,2,[],XN),numbers(Z,2,[],ZN2),maplist(connector_coords,YN,YN1),maplist(connector_coords,XN,XN1),maplist(connector_coords,ZN2,ZN1),connector_points(XN1,YN1,ZN1,Grid2,Grid3), %Grid2=Grid3,walls_from_connector_points(XN1,YN1,ZN1,Grid3,Maze),%Grid3,Maze%trace,%writeln1([maze,Maze]),print_grid(Maze,X1,Y1,Z2).% make path xgrid(X,Y,Z,Grid) :-numbers(Y,1,[],YN),numbers(X,1,[],XN),findall([Z,X1,Y1,[]],(member(Y1,YN),member(X1,XN)),Grid),!.plane(X,Y,Z,Grid%1,Grid2) :-numbers(Y,1,[],YN),numbers(X,1,[],XN),findall([Z,X1,Y1,[*]],(member(Y1,YN),member(X1,XN)),Grid).
/**interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[[[n,not],Statement]        ],writeln1(interpretbody(Functions0,Functions,Vars1,Vars3,Statement,Result2)),not(interpretbody(Functions0,Functions,Vars1,Vars3,Statement,Result2)), %% 2->1        ((Result2=cut)->!;true).
/**underscore_occurs_once_per_var([],_,_Program) :- !.
/**underscore_occurs_once_per_var([],_,_Program) :- !.underscore_occurs_once_per_var(Vars1,Program) :-findall(Var,(aggregate_all(count,(member(Var,Vars1),member(C,Program),C=[[n,"_"],[Var]]),Count),Count=<1),List),not(List=[]).
/** List Prolog Interpreter **/international_interpret([lang,Lang],Debug,Query,Functions1,Result) :-retractall(assertz_append(_)), assertz(assertz_append([])),retractall(lang(_)), assertz(lang(Lang)),interpret(Debug,Query,Functions1,Result).
:- http_handler('/gitl_landing', gitl_landing_pad, []).
Data = [[[[a,b]]],[[[a,b]]]],vxData = [[[[a,[b, b],a,[b]]], [[a,[b]]]],[[[a,[b],a,[b]]], [[a,[b]]]]],vData = [[[[a,b]]],[[[a,b]]]],*/%/*%*/%Data = ,%/*test_types2a2([[[[ [b, b],a,[b],a]], [[[b],a]]],%[[[ [b, b],a,[b],a]], [[[b],a]]][[[ a,[b, b],a,[b]]], [[a,[b]]]]%[[[ [b],a,[b],a]], [[[b],a]]]]),test_types2a2([[[[a,[b, b],a,[b]]], [[a,[b]]]],%[[[a,[b, b],a,[b]]], [[a,[b]]]][[[ [b, b],a,[b],a]], [[[b],a]]]%[[[[b, b],a,[b]]], [[a,[b]]]]%[[[a,[b],a,[b]]], [[a,[b]]]]]),%trace,test_types2a2([[[[a,b]]],[[[b,a]]]]),test_types2a2([[[[ [b, [c],b,[c]],a,[b,[c]],a]], [[[b,[c]],a]]],%[[[ [b, b],a,[b],a]], [[[b],a]]][[[ a,[b, [c],b,[c]],a,[b,[c]]]], [[a,[b,[c]]]]]%[[[ [b],a,[b],a]], [[[b],a]]]]),%*/test_types2a2([[[[ [b, [c],b,[c]],a,[b,[c]],a]], [[[b,[c]],a]]],%[[[ [b, b],a,[b],a]], [[[b],a]]][[[ a,[ [c],b,[c],b],a,[[c],b]]], [[a,[[c],b]]]]%[[[ [b],a,[b],a]], [[[b],a]]]]),%test_types2a2([[[[ [[b, b],a],[[b],a]]], [[[[b],a]]]],[[[[ a,[b, b]],[a,[b]]]]]]),!.test_types2a2(Data):-types_to_alg(Data,Alg),%trace,pp0(Alg,Alg2),writeln(Alg2),%lp2p1(Alg,Alg3),%writeln1(Alg3),Data=[[[I|_]|_],[[O|_]|_]],Query=[[n,p1],[I,[],[v,o]]],writeln1(Query),%trace,writeln([o,O]), interpret(off,Query,Alg,R),R=[[[[v,o],R1]]],writeln1(R1),(O=R1->writeln([success]);writeln([fail])),nl.%, writeln1(Alg).
alg_gen4([],Alg_gen_dict1,Alg_gen_dict1,Alg_gen_dict2,Alg_gen_dict2,Alg_gen_dict3,Alg_gen_dict3,_New_flag) :- !.
alg_gen5([],Alg_gen_dict1,Alg_gen_dict1,Alg_gen_dict2,Alg_gen_dict2,Alg_gen_dict3,Alg_gen_dict3) :- !.
bt-p2lp_pp_test(BL,RL) :-findall(A,(p2lp_test(N,_I,O),((pp_lp2p0(O,I1),p2lpconverter([string,I1],O2),O=O2)->(writeln([bt-p2lp_test,N,passed]),A=passed);(writeln([bt-p2lp_test,N,failed]),A=failed))),B),length(B,BL),findall(_,member(passed,B),R),length(R,RL),!.
caw4a(RuleName0,New_rule_number,Rules,_PredicateName,_NumInputs0,_NumOutputs0,NumInputs1,NumOutputs1,Rules2,New_rule_number1,RuleName) :-RuleName0=other_new_branch, %% Command from Rules with new branch%%trace,New_rule_number1 is New_rule_number+1,%%not(New_rule_number1=2), RuleName=[n,New_rule_number1],append(Rules,[[RuleName,NumInputs1,NumOutputs1]],Rules2).
cawptest2(4,function3,[[[n,+],2,1]],3,1,5,[2],[1],[[[[[[v,a],1],[[v,b],1]],[[[v,c],3]],true],[[[[v,a],1],[[v,b],2]],[[[v,c],5]],true]]],[ %% Algorithm dictionary],[ %% Result[[n,function3],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,d]]],[[n,+],[[v,b],[v,d],[v,e]]],[[n,=],[[v,e],[v,c]]]]]]).
check_same([],[],L,L,_,TN,TN) :- !.
convert_chunk([],[]) :- !.
create_multiple_nonrecursive_clauses(0,_RuleName0,Algorithms,Algorithms,_NumInputs0,_NumOutputs0,New_rule_number,New_rule_number,Rules,_PredicateName,_Program1,VarList,VarList,InputVars,InputVars,_OutputVars,_Rule,_NumInputs1,_NumOutputs1,VarLists02,VarLists02,_MaxPredicates,Rules) :- !.
critique_reasons_2_to_n(Number2a,List2a,Critique3,Reasons_per_paragraph,ML_db,Critique4) :-retractall(critique3(_)),assertz(critique3(Critique3)),%%trace,/**critique3(Critique31),append(Critique31,Critique3,Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),**/%%notrace,findall([Number2a,Number3a,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],(%%member(Number2,List1a),member(Number3a,List2a),%%get_item_n(Critique3,Number2a,[_,Item1]),%%trace,concat_list(["<Critique Paragraph ",Number2a," of 5> <Reason ",Number3a," of ",Reasons_per_paragraph,">","\n","The Helper will ask you for your comment on the quote you are about to enter."],String2b),writeln(String2b), %% Later: connections%%trace,critique3(ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa)/**trace,critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/),Critique4).
critique_reasons_2_to_n(String00,Number2a,List2a,Critique3,Reasons_per_paragraph,ML_db,Critique4) :-retractall(critique3(_)),assertz(critique3(Critique3)),%%trace,/**critique3(Critique31),append(Critique31,Critique3,Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),**/%%notrace,findall([Number2a,Number3a,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],(%%member(Number2,List1a),member(Number3a,List2a),%%get_item_n(Critique3,Number2a,[_,Item1]),%%trace,concat_list(["<Critique Paragraph ",Number2a," of 5> <Reason ",Number3a," of ",Reasons_per_paragraph,">","\n","The Helper will ask you for your comment on the quote you are about to enter."],String2b),%writeln(String2b), %% Later: connections%%trace,critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa)/**trace,critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/),Critique4).
critique_reasons_2_to_n(String00,Number2a,List2a,Critique3,Reasons_per_paragraph,ML_db,Critique4) :-retractall(critique3(_)),assertz(critique3(Critique3)),%%trace,/**critique3(Critique31),append(Critique31,Critique3,Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),**/%%notrace,findall([Number2a,Number3a,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],(%%member(Number2,List1a),member(Number3a,List2a),%%get_item_n(Critique3,Number2a,[_,Item1]),%%trace,concat_list(["<Critique Paragraph ",Number2a," of 5> <Reason ",Number3a," of ",Reasons_per_paragraph,">","\n","The Helper will ask you for your comment on the quote you are about to enter."],String2b),writeln(String2b), %% Later: connections%%trace,critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa)/**trace,critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/),Critique4).
critique_reasons_2_to_n(String00,Number2a,List2a,Critique3,Reasons_per_paragraph,ML_db,Critique4) :-retractall(critique3(_)),assertz(critique3(Critique3)),%%trace,/**critique3(Critique31),append(Critique31,Critique3,Critique32),retractall(critique3(_)),assertz(critique3(Critique32)),**/%%notrace,findall([Number2a,Number3a,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa],(%%member(Number2,List1a),member(Number3a,List2a),%%get_item_n(Critique3,Number2a,[_,Item1]),%%trace,concat_list(["<Critique Paragraph ",Number2a," of 5> <Reason ",Number3a," of ",Reasons_per_paragraph,">","\n","The Helper will ask you for your comment on the quote you are about to enter."],String2b),writeln(String2b), %% Later: connections%%trace,critique3(String00,ML_db,%%Critique3,String3,String3a,String5a,String3y,String3ay,String5a1,CNumber2aa,CNumber3aa,CString5a1a,CNumber2a1,CNumber3a1,LastCStrings,String5aaa)/**trace,critique3(Critique31),append(Critique31,[[String3,String3a,String5a,String3y,String3ay,String5a1]],Critique32),retractall(critique3(_)),assertz(critique3(Critique32))**/),Critique4).%%Critique3=[].
ctobr01(Scale) :- ctobr11(Scale,['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','?','-',' ',',','(',')','|','.',':','_','\\','[',']','<','>','0','1','2','3','4','5','6','7','8','9']).ctobr11(_,[]) :- !.ctobr11(Scale,[C|Cs]) :-ctobr_11(Scale,C),writeln(''),ctobr11(Scale,Cs).
data_to_types22([[[1,"a"]],[[2,"b"]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
data_to_types22([[[1,1]],[[1,1]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
diff_group_combos1(A,A,[A]) :- !.diff_group_combos1(Before,After,Combos4) :- retractall(changes(_)), assertz(changes(1)), %differentiate(Before,Before0), %differentiate(After,After0), %find_insertions_and_deletions(Before,After,Insertions,Deletions),  diff(Before,After,_,_,[],[],After31), %replace11(After,Insertions,[],After2), %replace12(Before,After2,Deletions,[],After31), %trace, join_and_change(After31,[],After3), fail_if_greater_than_n_changes(After3), %trace, findall1(A1,(member(A,After3), (string(A)->A1=A; (A=[[c,_],O,N]-> A1=A;%[O,N]; A=[[_, _], E]-> A1=E))),Combos4),%A2), %flatten(A2,Combos4), %findall1(A,member([[_,_NA],A],After3),Combos4), !.
get(F,Number,D,E2,C1,C4,[[Argument1,Argument2]],Wrap) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,(F="[]"->true;(F=Dbw_not->true;(F=Dbw_findall))),%trace,(Wrap=nowrap->append([_],D1,D);D1=D), %append(A,C,D1),%(false%Wrap=nowrap%->not(A=[]);true),%trace,get_last_line(Number,D1,C111,A,E,Number2,F2,C,Arguments2),%reverse(C,CR),% CR=[C111|_], %*C111=[Number2,[Dbw_on_true,A3],[Dbw_go_after,B],[Dbw_on_false,_],[Dbw_go_to_predicates,_],[Dbw_n_or_v1,F2]|Arguments2],%(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),%(A3=[Fail_or_exit,Number]->true;B=[Fail_or_exit,Number]),%(Fail_or_exit=exit_function->true;Fail_or_exit=fail_function),%trace,%append(Ay,C11y,C),%C=[C111|E],%C11y=[C111|E],%append(A,Ay,Az),/*%convert_chunk%trace,append(A,[C111],AC),get_up_to_next_chunk(AC,[],C31),*//*get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,*/%trace,((F2="[]"->true;(F2=Dbw_not->true;(F2=Dbw_or->true;(F2="->"->true;(F2=Dbw_findall)))))-> (%append(A,[C111],AC), %trace, get_up_to_next_chunk(A,[],Ax1), get(F2,Number2,C%AC%E E*  ,E2,[],C32,Arguments2,nowrap),  append(Ax1  ,C32,C31));(%convert_chunk%trace,append(A,[C111],AC),%trace,get_up_to_next_chunk(AC,[],C31),E=E2)),((F="[]",(true%Wrap=wrap->C3=[C31];C3=C31))->true;((F=Dbw_not,(true%Wrap=wrap->C3=[[[Dbw_n,F],C31]];C3=[[Dbw_n,F],C31]))->true;(F=Dbw_findall,foldr(append,[[Argument1],C31,[Argument2]],Arguments3),(true%Wrap=wrap->C3=[[[Dbw_n,F],Arguments3]];C3=[[Dbw_n,F],Arguments3])))), % "[]"append(C1,C3,C4).
get_cp(List1,N,Cp) :-(member([N,B|Cp1],List1)->true;(writeln0("get_cp failed"),abort)),Cp=[N,B|Cp1].get_last_p_before_n(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars1) :-%writeln1("y for trace:"),(get_char(y)->trace;true),%get(curr_cp,Curr_cp,CP_Vars1),%writeln([curr_cp,Curr_cp]),(debug4(on)->writeln1(get_last_p_before_n2(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars1));true),(get_last_p_before_n2(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars1)->true;false%(writeln([get_last_p_before_n2,abort]),abort)),%writeln1(get_last_p_before_n2(List1,Cp1,Cp2,Cp3)),%get(curr_cp,Curr_cp1,CP_Vars1),%writeln([curr_cp,Curr_cp1]),(debug4(on)->writeln0([get_last_p_before_n,Cp2,CP_Vars1,CP_Vars1]);true).
get_curr_students(String02a) :-phrase_from_file_s(string(String00a), "student_numbers.txt"),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]).
insert_item_numbers(C11,C12) :- dynamic(in/1), retractall(in(_)), assertz(in(1)), findall(X,(member(X1,C11),((X1=[var,T1,R1,C1,_IN1,V,VN,TP1,RP1,CP1,INP1],(number1(X1)->(get_in(N),X11=[var,T1,R1,C1,N,V,VN,TP1,RP1,CP1,INP1],X11=X);X=X1))->true;X1=X)),C12),!.
interpretpart(date_time_stamp,Y,M,D,Ho,Mi,Se,Se2,Variable,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("date_time_stamp",Dbw_date_time_stamp),        getvalues(Y,M,D,YearValueA,MonthValueA,DayValueA,Vars1),        getvalues(Ho,Mi,Se,HourValueA,MinuteValueA,SecondsValueA,Vars1),        getvalues(Se2,Variable,Se2ValueA,ValueA,Vars1),               %getvalue(Variable1,Value1,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_date_time_stamp],[YearValueA,MonthValueA,DayValueA,HourValueA,MinuteValueA,SecondsValueA,Se2ValueA,variable]]),((%is_list(Value1),date_time_stamp(date(YearValueA,MonthValueA,DayValueA,HourValueA,MinuteValueA,SecondsValueA,Se2ValueA,-,-),Value1A),%Value2A=Value2A1,%string_atom(Value2A,Value2A1), % *** LPI only takes strings   %sort(Value1,Value2A),        val1emptyorvalsequal(ValueA,Value1A),        putvalue(Variable,Value1A,Vars1,Vars2)        )->      debug_exit(Skip,[[Dbw_n,Dbw_date_time_stamp],[YearValueA,MonthValueA,DayValueA,HourValueA,MinuteValueA,SecondsValueA,Se2ValueA,Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_date_time_stamp],[YearValueA,MonthValueA,DayValueA,HourValueA,MinuteValueA,SecondsValueA,Se2ValueA,variable]])),!.
interpretpart(shell,Variable1,Vars1,Vars1) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("shell",Dbw_shell),       getvalue(Variable1,Value1,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_shell],[Value1]]),((%is_list(Value1),shell1_s(Value1)%Value2A=Value2A1,%string_atom(Value2A,Value2A1), % *** LPI only takes strings   %sort(Value1,Value2A),        %val1emptyorvalsequal(Value2,Value2A),        %putvalue(Variable2,Value2A,Vars1,Vars2)        )->      debug_exit(Skip,[[Dbw_n,Dbw_shell],[Value1]]);     debug_fail(Skip,[[Dbw_n,Dbw_shell],[Value1]])),!.
interpretstatement1(_F0,_Functions,[append,[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-%%writeln(9),        interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_shell],[Variable1]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("shell",Dbw_shell1),Dbw_shell1=Dbw_shell,        interpretpart(shell,Variable1,Vars1,Vars2).
make_mind_reading_tree4(["acc","bcc"],[[1, "a", [-, "acc"]], [1, "b", [-, "bcc"]]]).
mt_t2b2:-%Thread=%[phrase_from_file_s(string(Essay_0), %"lacom5million.txt""../../private/lacom0.5million.txt"),%Br is 5,%Br is 5000000,W is 0,%grammar_logic_to_alg1(Essay_0,Br,GL_out1),grammar_logic_to_alg113(Essay_0,GL_out1),term_to_atom(GL_out1,GL_out2),string_atom(GL_out,GL_out2),texttobr2(u,u,GL_out,Br,false,false,false,false,false,false,W),texttobr(u,u,GL_out,Br).%],mt_t2b3:-mt_t2b2.
object(cube,[["yellow",["red","blue"]],["red",[]],["blue",[]],[0,["yellow","green"]],["green",["purple"]],["purple",[]]],["red", "blue", "yellow", "purple", "green", 0]).
print_grid_1(Grid,X,Y) :-numbers(Y,1,[],YN1),reverse(YN1,YN),numbers(X,1,[],XN),findall(_,(member(Y1,YN),nl,member(X1,XN),member([X1,Y1,Pixel],Grid),%(Pixel1=1->Pixel="*";Pixel=" "),write(Pixel)),_).
reorder_numbers(Essay2,Essay21,End_notes_no_heading,End_notes_no_heading1) :-%%trace,retractall(new_nums(_)),assertz(new_nums([[0,0]])),reorder_essay(Essay2,Essay21),%%trace,reorder_endnotes(End_notes_no_heading,End_notes_no_heading1).
rule(RuleName,1,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-random_member(Var,InputVars1),rule2(RuleName,Var,VarList,VarList2,Rule,Var1),restlast(InputVars1,[],_,Last), %% Last should be outputs - 2nd last rule?(Var=Last->true;Last=Var1),append(InputVars1,[Var1],InputVars2),!.
rule(RuleName,1,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-random1(N0), N1 is N0/100, length(InputVars1,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,InputVars1),List2=[Var|_Rest]);fail),rule2(RuleName,Var,VarList,VarList2,Rule,Var1),restlast(InputVars1,[],_,Last), %% Last should be outputs - 2nd last rule?(Var=Last->true;Last=Var1),append(InputVars1,[Var1],InputVars2),!.rule(RuleName,1,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-random1(N0), N1 is N0/100, length(InputVars1,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,InputVars1),List2=[Var|_Rest]);fail),        rule3(RuleName,Var,VarList,VarList2,Rule,Var1,Var2),restlast(InputVars1,[],_,Last),(Var=Last->true;(Last=Var1->true;Last=Var2)),append(InputVars1,[Var1,Var2],InputVars2),!.
spell_check([""],File_list,File_list,_String_dict,_Dictionary,_Reversed_dictionary2) :- !.
ssi1([Pred_id_a1,Level,Predicate_number,Line_number,"predicate",Query_a,Vars,All_predicate_numbers], Result21, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2) :-append_retry_back_stack([ssi,[[Pred_id_a1,Level,Predicate_number,Line_number,"predicate",Query_a,Vars,All_predicate_numbers], Result21, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2]]),((%writeln([all_predicate_numbers,All_predicate_numbers]),(Pred_id_a1=["prev_pred_id",Pred_id1]->true;Pred_id_a1=Pred_id1),(debug2(on)->writeln1(ssi1([Pred_id_a1,Level,Predicate_number,Line_number,"predicate",Query_a,Vars,All_predicate_numbers], Result21, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2));true),%*/((not(Line_number= -2), not(Line_number= -3))->(Query_a=[Function,Arguments1]->Query_a=Query;((Query_a=[Function],Query=[Function,[]],Arguments1=[])->true;(Query_a=(-),Query=Query_a)));true),(Line_number = -1 % just started->(%trace,((member([Predicate_number,Function,Arguments2,":-",_Body],Functions), length(Arguments1,Length),length(Arguments2,Length),(((checktypes_inputs(Function,Arguments1),                %%writeln1(checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs)),        %trace,        checkarguments(Arguments1,Arguments2,[],Vars3,[],FirstArgs),        %notrace,%writeln1([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),(debug3(on)->write0(["L",Level]);true),%trace,debug_call(Skip,[Function,Arguments1])%,notrace)),find_pred_id(Pred_id),%trace,%writeln1([pred_id_chain,Pred_id1,Pred_id]),append(Globals1,[[[firstargs,Pred_id],FirstArgs],[[function,Pred_id],Function],[[arguments1,Pred_id],Arguments1],[[skip,Pred_id],Skip],[[level,Pred_id],Level],[[pred_num,Pred_id],Predicate_number]],Globals333),(var(Pred_id1)->Globals333=Globals3;append(Globals333,[[pred_id_chain,Pred_id1,Pred_id]],Globals3)),%get_last_p_before_n(Choice_point_trail1,[_Pred_id_1,_Level_1,[_P1,"prev_pred_id",Predicate_number],-1,"predicate",_46492998,_46493004,[]]],[Cp_a1,Cp_a2|D1],_,CP_Vars31,CP_Vars4),%trace,%(var(Query)->Query=(-);true),%/*/*writeln1([*,Choice_point_trail1,[[Pred_id,Level,Predicate_number,-1,"predicate",Query,Vars3,All_predicate_numbers]],Choice_point_trail11,CP_Vars1,CP_Vars3]),*/%/*append_cp(Choice_point_trail1,[[Pred_id,Level,Predicate_number,-1,"predicate",Query,Vars3,All_predicate_numbers]],Choice_point_trail11,CP_Vars1,CP_Vars3),%*/%%*/%Choice_point_trail1=Choice_point_trail11,CP_Vars1=CP_Vars3,/*writeln1(["*3",append_cp(Choice_point_trail1,[[Pred_id,Level,Predicate_number,-1,"predicate",Query,Vars3,All_predicate_numbers]],Choice_point_trail11,CP_Vars1,CP_Vars3)]),*/%writeln1(Choice_point_trail11),ssi1([Pred_id,Level,Predicate_number,0,"line",-,Vars3,All_predicate_numbers], _, Functions,Vars2, % first Vars1 to Vars, 2nd Vars1 to Vars2Result1, Result2, Globals3,Globals2,Choice_point_trail11,Choice_point_trail3,CP_Vars3,CP_Vars2))->true;(%Line_number = -1,(debug3(on)->write0(["L",Level]);true),%trace,debug_call(Skip1,[Function,Arguments1]),(debug_fail(Skip1,[Function,Arguments1])->true;true), % below insteadAll_predicate_numbers=[Predicate_number_a|All_predicate_numbers2],Predicate_number_a=[Predicate_number_a1,"prev_pred_id",Prev_pred_id],%trace,delete_cp_value(Choice_point_trail1,[Predicate_number_a1,"prev_pred_id",Prev_pred_id],Choice_point_trail31,CP_Vars1,CP_Vars21),%trace,%Pred_id1=["prev_pred_id",Pred_id],%(Pred_id=3->writeln(here4);true),ssi1([["prev_pred_id",Prev_pred_id],Level,Predicate_number_a1,Line_number,"predicate",Query_a,Vars,All_predicate_numbers2], Result21, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail31,Choice_point_trail3,CP_Vars21,CP_Vars2)))->true;(%trace,Level2 is Level-1,%member([pred_id_chain,PID1,Pred_id1],Globals1),%member([[pred_num,PID1],Predicate_number_c],Globals1),pred_minus_one_fail2([Pred_id1,Level2,Predicate_number,-3,"predicate",-, % (-) as pred id[],_All_predicate_numbers], Result21,Functions,Vars2,Result1, Result2,%2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2))));(Line_number = -2% true exit from pred->((%trace,%delete_cp(Choice_point_trail1,%[_,_,Pred_id1,Level,Predicate_number,_,"predicate"|_],%Choice_point_trail1a,CP_Vars1,CP_Vars1a,_),%save_local_to_global_cp_trail(Choice_point_trail1,Choice_point_trail1a,CP_Vars1,CP_Vars1a),Choice_point_trail1=Choice_point_trail1a,CP_Vars1=CP_Vars1a,%Choice_point_trail1=Choice_point_trail1a,%CP_Vars1=CP_Vars1a,member([[firstargs,Pred_id1],FirstArgs],Globals1),member([[arguments1,Pred_id1],Arguments1],Globals1),%trace,member([[skip,Pred_id1],Skip],Globals1),member([[level,Pred_id1],Level_a],Globals1), %delete(Globals1,[[firstargs,Pred_id1],FirstArgs],Globals3)Globals1=Globals3,(debug3(on)->write0(["L",Level_a]);true),debug_fail_fail(Skip),%trace,updatevars(FirstArgs,Vars,[],Result),unique1(Result,[],Vars3),Pred_id1=Pred_id4,get_last_p_before_n(Choice_point_trail1a,[%_,_,Pred_id4,Level1,Predicate_number4,-1,"predicate",[Function,Arguments1], %**Vars9,All_predicate_numbers4],[_,_,Pred_id4,Level1,Predicate_number4,-1,"predicate",[Function,Arguments1], %**Vars9,All_predicate_numbers4],_%Choice_point_trail5,CP_Vars1a,CP_Vars3),Choice_point_trail1a=Choice_point_trail2,CP_Vars3=CP_Vars41,%trace,/*delete_cp(Choice_point_trail1,[_,_,Pred_id4,Level1,Predicate_number4,-1,"predicate",[Function,Arguments1], %**Vars9,All_predicate_numbers4],Choice_point_trail2,CP_Vars3,CP_Vars41,_),*//*trace,writeln1(["here1:",%_,_,Pred_id4,Level1,Predicate_number4,-1,"predicate",[Function,Arguments1], %**Vars9,All_predicate_numbers4]),*/%trace,findresult3(Arguments1,Vars3,[],Result22),%trace,(debug3(on)->write0(["L",Level_a]);true),%notrace,   debug_exit(Skip,[Function,Result22]), % return result21   checktypes(Function,Result22),((not(Level_a=0))->(Level2 is Level-1,(Level2 = 0 ->%trace,(ssi1([_,0,_Predicate_number,-2,"predicate",_Query_a,Vars3,_All_predicate_numbers], _Result21, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail2,Choice_point_trail3,CP_Vars41,CP_Vars2));(%trace,%writeln1([globals3,Globals3]),member([pred_id_chain,PID1,Pred_id1],Globals3),%trace,get_last_p_before_n(Choice_point_trail2,[PID1,Level3,Predicate_number2,Line_number2b,"predicate",Query2,Vars4,All_predicate_numbers2],[_Cp_a,_Cb_b,PID1,Level3,Predicate_number2,Line_number2b,"predicate",Query2,Vars4,All_predicate_numbers2],_,CP_Vars41,CP_Vars42),%delete_cp(Choice_point_trail2,[_Cp_a,_Cb_b,PID1,Level3,Predicate_number2,Line_number2b,"predicate",Query2,Vars4,All_predicate_numbers2],Choice_point_trail2a,CP_Vars42,CP_Vars4,_),Choice_point_trail2=Choice_point_trail2a,CP_Vars42=CP_Vars4,(Line_number2b=["returns to",Line_number3,"pred_id",Pred_id3]->(member([[pred_num,Pred_id3],Predicate_number2],Globals3),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("true",Dbw_true1),Dbw_true1=Dbw_true,member([Predicate_number2,_F|Rest],Functions),(Rest=[_Args,":-",Lines]->true;(Rest=[_Args]->Lines=[[[Dbw_n,Dbw_true]]];(Rest=[":-",Lines];(Rest=[],Lines=[[[Dbw_n,Dbw_true]]])))),get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,member([Line_number3,[Dbw_on_true,A],[Dbw_go_after,_B],[Dbw_on_false,_C],[Dbw_go_to_predicates,_D]|_Line],Lines),A=Line_number2a,%trace,reverse(Globals1,Globals33), member([[firstargs_uv2,Pred_id3],FirstArgs1],Globals33),%trace,%writeln1([globals33,Globals33]),Globals33=Globals43,member([[vars1,Pred_id3],Vars11],Globals43),Globals43=Globals212,reverse(Globals212,_Globals22),updatevars2(FirstArgs1,Vars3,[],Vars5),(var(Vars11)->(Vars11=[]%,trace);true),updatevars3(Vars11,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->(unique1(Vars7,[],Vars8)));(Vars8=[])),Vars8=Vars44 %% 4 not 2? ***);(Line_number2a=Line_number2b%,%,Level_x=Level2%Vars44=Vars3)), % Line_number2 to 2b%trace,ssi1([PID1,Level2,Predicate_number2,Line_number2a,"line",-,Vars44,All_predicate_numbers2], _, Functions,Vars2,Result1, Result2, Globals3,Globals2,Choice_point_trail2a,Choice_point_trail3,CP_Vars4,CP_Vars2))))))->true;(ssi1([Pred_id_a1,Level,Predicate_number,-3%Line_number,"predicate",Query_a,Vars,All_predicate_numbers], Result21, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2)))%));;(Line_number = -3% fail exit from pred->(%save_local_to_global_cp_trail(Choice_point_trail1,Choice_point_trail1a,CP_Vars1,CP_Vars1a),Choice_point_trail1=Choice_point_trail1a,CP_Vars1=CP_Vars1a,pred_minus_three([Pred_id_a1,Level,Predicate_number,Line_number,"predicate",Query_a,Vars,All_predicate_numbers], Result21, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1a,Choice_point_trail3,CP_Vars1a,CP_Vars2))))))->true;(writeln0([ssi1,predicate,abort]),%abort%fail%number_string(a,_)%abort)),!.
test(210,[[n,grammar1],[[apple]]],[  [[n,grammar1],[[v,s]],":-",  [   [[n,noun],[[v,s],[]]]   ]  ],    [[n,noun],"->",[[apple]]]],[[]]).
test(211,[[n,grammar1],[[apple,banana]]],[  [[n,grammar1],[[v,s]],":-",  [   [[n,noun],[[v,s],[]]]   ]  ],    [[n,noun],"->",[[apple,banana]]]],[[]]).test(212,[[n,grammar1],[[apple,banana,carrot]]],[  [[n,grammar1],[[v,s]],":-",  [   [[n,noun],[[v,s],[]]]   ]  ],    [[n,noun],"->",[[apple,banana],[carrot]]]],[[]]).test(213,[[n,reverse1],[[1,2,3],[],[v,a]]],[[[n,reverse1],[[],[v,a],[v,a]]],[[n,reverse1],[[[v,a],"|",[v,d]],[v,b],[v,c]],":-",[[[n,reverse1],[[v,d],[[v,a],"|",[v,b]],[v,c]]]]]],[[[[v,a],[3,2,1]]]]).
test_find_constants :-findall(_,(member([N,S1,C2],[[1, [[['A',[3]],['B',[3]]],[['A',[4]],['B',[6]]]],[['A',['C1']],['B',['C2']]]],[2, [[['A',[1]],['B',[1]]],[['A',[1]],['B',[1]]]],[['A',[1]],['B',[1]]]],[3, [[['A',[1,3]],['B',[1,3]]],[['A',[1,4]],['B',[1,6]]]],[['A',[1,'C1']],['B',[1,'C2']]]],[4,[[['A',[1,3]],['B',[2,3]]],[['A',[5,4]],['B',[5,6]]]],[['A',['C1','C2']],['B',['C3','C4']]]] ]),findall(RS2,(member(S2,S1),%retractall(num_s2a(_)),%assertz(num_s2a(1)),%retractall(vars_s2a(_)),%assertz(vars_s2a([])),% vars basefind_unique_variables(S2,UV),findall([UV1,RS],(member([UV1,UV2],UV),find_lists3b(UV2,RS)),RS2)),RS1),((find_constants(S1,RS1,C1),%writeln1(find_constants(S1,RS1,C1)),C1=C2)->R=success;R=fail), writeln([R,N,find_constants,test])),_),!.s2a_tests([[1,algorithm,[[[input,[['A',[1,2]]]],[output,[['B',[2,1]]]]],[[input,[['A',[3,4]]]],[output,[['B',[4,3]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[['C1','C2'],[output,[['C2','C1']]]]],[[[[1,1],[[1,2]]],[[1,2],[[1,1]]]]],In_vars,Out_var)."],[2,algorithm,[[[input,[['A',[1,2,3,2,3,1,2,3,2,3]]]],[output,[['B',[3]]]]],[[input,[['A',[1,2,4,2,4,1,2,4,2,4]]]],[output,[['B',[4]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[r,[1,[r,[2,'C1']]]]],[output,[['C1']]]]],[[[[1,2,2,2,2],[[1,1]]]]],In_vars,Out_var)."], [3,algorithm,[[[input,[['A',[1]],['B',[2]]]],[output,[['C',[1]]]]],[[input,[['A',[3]],['B',[4]]]],[output,[['C',[3]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[['C1'],['C2'],[output,[['C1']]]]],[[[[1,1,1],[[1,1]]]]],In_vars,Out_var)."],[4,algorithm,[[[input,[['A',[[1]]],['B',[[2]]]]],[output,[['C',[[1,[]]]]]]],[[input,[['A',[[3]]],['B',[[4]]]]],[output,[['C',[[3,[]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",'C1',\"]\"],[\"[\",'C2',\"]\"],[output,[[\"[\",'C1',\"[\",\"]\",\"]\"]]]]],[[[[1,1,2],[[1,2]]]]],In_vars,Out_var)."],[5,algorithm,[[[input,[['A',[1,3]],['B',[2,3]]]],[output,[['C',[3]]]]],[[input,[['A',[4,3]],['B',[5,3]]]],[output,[['C',[3]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[['C1',3],['C2',3],[output,[[3]]]]],[[]],In_vars,Out_var)."],[6,algorithm,[[[input,[['A',[[1]]],['B',[[2]]]]],[output,[['C',[[1,[[]]]]]]]],[[input,[['A',[[3]]],['B',[[4]]]]],[output,[['C',[[3,[[]]]]]]]]% [[]] not [] at end],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",'C1',\"]\"],[\"[\",'C2',\"]\"],[output,[[\"[\",'C1',\"[\",\"[\",\"]\",\"]\",\"]\"]]]]],[[[[1,1,2],[[1,2]]]]],In_vars,Out_var)."],[7,algorithm,[[[input,[['A',[[1]]],['B',[[2]]]]],[output,[['C',[[1]]]]]],[[input,[['A',[[3]]],['B',[[4]]]]],[output,[['C',[[3]]]]]],[[input,[['A',[[1,3]]],['B',[[1,4]]]]],[output,[['C',[[1]]]]]],[[input,[['A',[[1,3]]],['B',[[1,4]]]]],[output,[['C',[[3]]]]]] % separate for find_constants],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[nd,[[[\"[\",1,3,\"]\"],[\"[\",1,4,\"]\"],[nd,[[[output,[[\"[\",1,\"]\"]]]],[[output,[[\"[\",3,\"]\"]]]]]]],[[\"[\",'C1',\"]\"],[\"[\",'C2',\"]\"],[output,[[\"[\",'C1',\"]\"]]]]]]],[[],[],[[[1,1,2],[[1,2]]]]],In_vars,Out_var)."],[8,algorithm,[[[input,[['A',[[1]]],['B',[[2]]]]],[output,[['C',[[1]]]]]],[[input,[['A',[[3]]],['B',[[4]]]]],[output,[['C',[[3]]]]]],[[input,[['A',[[1,1,1]]],['B',[[1,1,2]]]]],[output,[['C',[[1]]]]]],[[input,[['A',[[1,1,3]]],['B',[[1,1,4]]]]],[output,[['C',[[3]]]]]],[[input,[['A',[[1,3]]],['B',[[1,4]]]]],[output,[['C',[[1,3]]]]]],[[input,[['A',[[1,3]]],['B',[[1,4]]]]],[output,[['C',[[1,3]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[nd,[[[\"[\",'C1',\"]\"],[\"[\",'C2',\"]\"],[output,[[\"[\",'C1',\"]\"]]]],[[\"[\",[r,[1]],3,\"]\"],[\"[\",[r,[1]],4,\"]\"],[output,[[\"[\",3,\"]\"]]]],[[\"[\",[r,[1]],\"]\"],[\"[\",[r,[1]],2,\"]\"],[output,[[\"[\",1,\"]\"]]]],[[\"[\",1,3,\"]\"],[\"[\",1,4,\"]\"],[output,[[\"[\",1,3,\"]\"]]]]]]],[[[[1,1,2],[[1,2]]]],[],[],[],[]],In_vars,Out_var)."],[9,algorithm,[[[input,[['A',[11,aa]],['B',["B",aa]]]],[output,[['C',[a1]]]]],[[input,[['A',[44,aa]],['B',["C",aa]]]],[output,[['C',[a4]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[number,[[r,['C1']]]],[atom,[[r,[\"a\"]]]]],[[string,['C2']],[atom,[[r,[\"a\"]]]]],[output,[[[atom,[\"a\",'C1']]]]]]],[[[[1,1,1,2,2,1],[[1,2,2]]]]],In_vars,Out_var)."],[10,algorithm,[[[input,[['A',[1,2]],['B',[3,2]]]],[output,[['C',[2]]]]],[[input,[['A',[4,2]],['B',[5,2]]]],[output,[['C',[2]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[number,['C1']],[number,[\"2\"]]],[[number,['C2']],[number,[\"2\"]]],[output,[[[number,[\"2\"]]]]]]],[[]],In_vars,Out_var)."],[11,algorithm,[[[input,[['A',[[["aa,]",b,"c",[]],1]]]]],[output,[['B',["aa,]",b]]]]],[[input,[['A',[[["cc,]",d,"e",[]],1]]]]],[output,[['B',["cc,]",d]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",\"[\",'C1','C2','C3',\"[\",\"]\",\"]\",1,\"]\"],[output,[['C1','C2']]]]],[[[[1,3],[[1,1]]],[[1,4],[[1,2]]]]],In_vars,Out_var)."],% doesn't work with nested brackets in output yet% can work with multiple specs to form variables and constants% doesn't convert characters from upper to lower yet[12,algorithm,[[[input,[['A',[a,is,1,"+",1]]]],[output,[['B',[[[n,"+"],[1,1,[v,a]]]]]]]],[[input,[['A',[b,is,3,"+",4]]]],[output,[['B',[[[n,"+"],[3,4,[v,b]]]]]]]],[[input,[['A',[a,is,1,"-",1]]]],[output,[['B',[[[n,"-"],[1,1,[v,a]]]]]]]],[[input,[['A',[b,is,3,"-",4]]]],[output,[['B',[[[n,"-"],[3,4,[v,b]]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[['C1',is,'C2','C3','C4'],[output,[[\"[\",\"[\",n,'C3',\"]\",\"[\",'C2','C4',\"[\",v,'C1',\"]\",\"]\",\"]\"]]]]],[[[[1,1],[[1,11]]],[[1,3],[[1,7]]],[[1,4],[[1,4]]],[[1,5],[[1,8]]]]],In_vars,Out_var)."],% actually a converter% decision trees as the alg being converted, recursion with series of decision trees in DFA% can't recognise upper and lower case as the same character yet[13,algorithm,[[[input,[['A',[1,2]]]],[output,[['B',[21]]]]], [[input,[['A',[3,4]]]],[output,[['B',[43]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[number,['C1']],[number,['C2']]],[output,[[[number,['C2','C1']]]]]]],[[[[1,1,2,1],[[1,2,2]]],[[1,2,2,1],[[1,2,1]]]]],In_vars,Out_var)."],[14,algorithm,[[[input,[['A',[1+2]]]],[output,[['B',[21]]]]], [[input,[['A',[3+4]]]],[output,[['B',[43]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[compound,['C1',\"+\",'C2']]],[output,[[[number,['C2','C1']]]]]]],[[[[1,2,1],[[1,2,2]]],[[1,2,3],[[1,2,1]]]]],In_vars,Out_var)."],[15,algorithm,[[[input,[['A',["1+2"]]]],[output,[['B',[21]]]]], [[input,[['A',["3+4"]]]],[output,[['B',[43]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[string,['C1',\"+\",'C2']]],[output,[[[number,['C2','C1']]]]]]],[[[[1,2,1],[[1,2,2]]],[[1,2,3],[[1,2,1]]]]],In_vars,Out_var)."],[16,algorithm,[[[input,[['A',"Ci"]]],[output,[['B','C']]]],[[input,[['A',"Di"]]],[output,[['B','D']]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[string,['C1',\"i\"]],[output,[[atom,['C1']]]]]],[[[[1,2,1],[[1,2,1]]]]],In_vars,Out_var)."],[17,algorithm,[[[input,[['A',["A is 1+2,B is A+3."]]]],[output,[['B',[[[+,[1,2,[lower,["A"]]]],[+,[[lower,["A"]],3,[lower,["B"]]]]]]]]]],[[input,[['A',["C is 3+4,D is C+3."]]]],[output,[['B',[[[+,[3,4,[lower,["C"]]]],[+,[[lower,["C"]],3,[lower,["D"]]]]]]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[string,['C1',\" \",\"i\",\"s\",\" \",'C2',\"+\",'C3',\",\",'C4',\" \",\"i\",\"s\",\" \",'C1',\"+\",\"3\",\".\"]]],[output,[[\"[\",\"[\",[atom,[\"+\"]],\"[\",[number,['C2']],[number,['C3']],\"[\",[atom,[\"l\",\"o\",\"w\",\"e\",\"r\"]],\"[\",[string,['C1']],\"]\",\"]\",\"]\",\"]\",\"[\",[atom,[\"+\"]],\"[\",\"[\",[atom,[\"l\",\"o\",\"w\",\"e\",\"r\"]],\"[\",[string,['C1']],\"]\",\"]\",[number,[\"3\"]],\"[\",[atom,[\"l\",\"o\",\"w\",\"e\",\"r\"]],\"[\",[string,['C4']],\"]\",\"]\",\"]\",\"]\",\"]\"]]]]],[[[[1,2,1],[[1,10,2,1],[1,21,2,1]]],[[1,2,6],[[1,5,2,1]]],[[1,2,8],[[1,6,2,1]]],[[1,2,10],[[1,28,2,1]]],[[1,2,15],[[1,10,2,1],[1,21,2,1]]]]],In_vars,Out_var)."],[18,algorithm,[[[input,[['A',"1232312323"]]],[output,[['B',"2"]]]],[[input,[['A',"1434314343"]]],[output,[['B',"4"]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[string,[[r,[\"1\",[r,['C1',\"3\"]]]]]],[output,[[string,['C1']]]]]],[[[[1,2,2,2,2,1],[[1,2,1]]]]],In_vars,Out_var)."],[19,algorithm,[[[input,[['A',"2"]]],[output,[['B',[2,2]]]]],[[input,[['A',"4"]]],[output,[['B',[4,4]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[string,['C1']],[output,[[[number,['C1']],[number,['C1']]]]]]],[[[[1,2,1],[[1,1,2,1],[1,2,2,1]]]]],In_vars,Out_var)."],[20,algorithm,[[[input,[['A',"2"]]],[output,[['B',"22"]]]],[[input,[['A',"4"]]],[output,[['B',"44"]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[string,['C1']],[output,[[string,['C1','C1']]]]]],[[[[1,2,1],[[1,2,1],[1,2,2]]]]],In_vars,Out_var)."],[21,algorithm,[[[input,[['A',["2",'A1']]]],[output,[['B',["22",'A1']]]]],[[input,[['A',["4",'A1']]]],[output,[['B',["44",'A1']]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[string,['C1']],'A1'],[output,[[[string,['C1','C1']],'A1']]]]],[[[[1,1,2,1],[[1,1,2,1],[1,1,2,2]]],[[1,2],[[1,2]]]]],In_vars,Out_var)."],% A1 with & in strings% A1 or AA11% A1 doesn't merge in two specs% need 1 training, 1 testing spec% formulas such as [var,_]% parse[22,algorithm,[[[input,[['A',"C is A+B"]]],[output,[[n,+],[[v,[downcase,"A"]],[v,[downcase,"B"]],[v,[downcase,"C"]]]]]],[[input,[['A',"D is E+F"]]],[output,[[n,+],[[v,[downcase,"E"]],[v,[downcase,"F"]],[v,[downcase,"D"]]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[string,['C1',\" \",\"i\",\"s\",\" \",'C2',\"+\",'C3']],[output,[[atom,[\"+\"]]]]]],[[]],In_vars,Out_var)."],% produce the abstract syntax tree[23,algorithm,[[[input,[['A',"C is A+B"]]],[output,[['B',[[n, assign],[[v,[downcase,"C"]],[[n,+],[[v,[downcase,"A"]],[v,[downcase,"B"]]]]]]]]]],[[input,[['A',"D is E+F"]]],[output,[['B',[[n, assign],[[v,[downcase,"D"]],[[n,+],[[v,[downcase,"E"]],[v,[downcase,"F"]]]]]]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[string,['C1',\" \",\"i\",\"s\",\" \",'C2',\"+\",'C3']],[output,[[\"[\",[atom,[\"n\"]],[atom,[\"a\",\"s\",\"s\",\"i\",\"g\",\"n\"]],\"]\",\"[\",\"[\",[atom,[\"v\"]],\"[\",[atom,[\"d\",\"o\",\"w\",\"n\",\"c\",\"a\",\"s\",\"e\"]],[string,['C1']],\"]\",\"]\",\"[\",\"[\",[atom,[\"n\"]],[atom,[\"+\"]],\"]\",\"[\",\"[\",[atom,[\"v\"]],\"[\",[atom,[\"d\",\"o\",\"w\",\"n\",\"c\",\"a\",\"s\",\"e\"]],[string,['C2']],\"]\",\"]\",\"[\",[atom,[\"v\"]],\"[\",[atom,[\"d\",\"o\",\"w\",\"n\",\"c\",\"a\",\"s\",\"e\"]],[string,['C3']],\"]\",\"]\",\"]\",\"]\",\"]\"]]]]],[[[[1,2,1],[[1,10,2,1]]],[[1,2,6],[[1,23,2,1]]],[[1,2,8],[[1,30,2,1]]]]],In_vars,Out_var)."],% translate[24,algorithm,[[[input,[['A',"C is A-B"]]],[output,[['B',[[n,-],[[v,[downcase,"A"]],[v,[downcase,"B"]],[v,[downcase,"C"]]]]]]]],[[input,[['A',"D is E-F"]]],[output,[['B',[[n,-],[[v,[downcase,"E"]],[v,[downcase,"F"]],[v,[downcase,"D"]]]]]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[string,['C1',\" \",\"i\",\"s\",\" \",'C2',\"-\",'C3']],[output,[[\"[\",[atom,[\"n\"]],[atom,[\"-\"]],\"]\",\"[\",\"[\",[atom,[\"v\"]],\"[\",[atom,[\"d\",\"o\",\"w\",\"n\",\"c\",\"a\",\"s\",\"e\"]],[string,['C2']],\"]\",\"]\",\"[\",[atom,[\"v\"]],\"[\",[atom,[\"d\",\"o\",\"w\",\"n\",\"c\",\"a\",\"s\",\"e\"]],[string,['C3']],\"]\",\"]\",\"[\",[atom,[\"v\"]],\"[\",[atom,[\"d\",\"o\",\"w\",\"n\",\"c\",\"a\",\"s\",\"e\"]],[string,['C1']],\"]\",\"]\",\"]\"]]]]],[[[[1,2,1],[[1,24,2,1]]],[[1,2,6],[[1,10,2,1]]],[[1,2,8],[[1,17,2,1]]]]],In_vars,Out_var)."],% split on "[", "]", (",") rec'ly do nested brackets% - () turn [a,b,c] into [a,[b,[c]]]% split on delimiters in strings incl " " ,;.()[]% label [split,_]% [,]+[,]=[,,,]% [r,[r,a]]=[r,a]% debug[25,algorithm,[[[input,[['A',["A","B",[+,["A","B"]]]]]],[output,[['B',"C is A+B"]]]],[[input,[['A',["E","F",[+,["E","F"]]]]]],[output,[['B',"C is E+F"]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[string,['C1']],[string,['C2']],\"[\",[atom,[\"+\"]],\"[\",[string,['C1']],[string,['C2']],\"]\",\"]\"],[output,[[string,[\"C\",\" \",\"i\",\"s\",\" \",'C1',\"+\",'C2']]]]]],[[[[1,1,2,1],[[1,2,6]]],[[1,2,2,1],[[1,2,8]]],[[1,6,2,1],[[1,2,6]]],[[1,7,2,1],[[1,2,8]]]]],In_vars,Out_var)."],[26,algorithm,[[[input,[['A',[[n,=],[[v,a],[v,b],[v,c]]]]]],[output,[['B',[[n,+],[[v,a],[v,b],[v,c]]]]]]],[[input,[['A',[[n,=],[[v,e],[v,f],[v,d]]]]]],[output,[['B',[[n,+],[[v,e],[v,f],[v,d]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",n,=,\"]\",\"[\",\"[\",v,'C1',\"]\",\"[\",v,'C2',\"]\",\"[\",v,'C3',\"]\",\"]\"],[output,[[\"[\",n,+,\"]\",\"[\",\"[\",v,'C1',\"]\",\"[\",v,'C2',\"]\",\"[\",v,'C3',\"]\",\"]\"]]]]],[[[[1,8],[[1,8]]],[[1,12],[[1,12]]],[[1,16],[[1,16]]]]],In_vars,Out_var)."],% optimise[27,algorithm,[[[input,[['A',[[[n,+],[[v,a],[v,b],[v,c]]],[[n,=],[[v,c],[v,d]]]]]]],[output,[['B',[[n,+],[[v,a],[v,b],[v,d]]]]]]],[[input,[['A',[[[n,+],[[v,e],[v,f],[v,g]]],[[n,=],[[v,g],[v,h]]]]]]],[output,[['B',[[n,+],[[v,e],[v,f],[v,h]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",\"[\",n,+,\"]\",\"[\",\"[\",v,'C1',\"]\",\"[\",v,'C2',\"]\",\"[\",v,'C3',\"]\",\"]\",\"]\",\"[\",\"[\",n,=,\"]\",\"[\",\"[\",v,'C3',\"]\",\"[\",v,'C4',\"]\",\"]\",\"]\"],[output,[[\"[\",n,+,\"]\",\"[\",\"[\",v,'C1',\"]\",\"[\",v,'C2',\"]\",\"[\",v,'C4',\"]\",\"]\"]]]]],[[[[1,9],[[1,8]]],[[1,13],[[1,12]]],[[1,33],[[1,16]]]]],In_vars,Out_var)."],[28,algorithm,[[[input,[['A',[[[n,=],[[v,a],[v,b]]],[[n,=],[[v,b],[v,c]]]]]]],[output,[['B',[[n,=],[[v,a],[v,c]]]]]]],[[input,[['A',[[[n,=],[[v,e],[v,f]]],[[n,=],[[v,f],[v,g]]]]]]],[output,[['B',[[n,=],[[v,e],[v,g]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",\"[\",n,=,\"]\",\"[\",\"[\",v,'C1',\"]\",\"[\",v,'C2',\"]\",\"]\",\"]\",\"[\",\"[\",n,=,\"]\",\"[\",\"[\",v,'C2',\"]\",\"[\",v,'C3',\"]\",\"]\",\"]\"],[output,[[\"[\",n,=,\"]\",\"[\",\"[\",v,'C1',\"]\",\"[\",v,'C3',\"]\",\"]\"]]]]],[[[[1,9],[[1,8]]],[[1,29],[[1,12]]]]],In_vars,Out_var)."],% spreadsheet formula finder[29,algorithm,[[[input,[['A',[["","Jan","Feb","TOTAL"],["$","1","2",[+,["1","2"]]]]]]],[output,[['B',[["","January","February","TOTAL"],["$","A","B",[+,["A","B"]]]]]]]],[[input,[['A',[["","Jan","Feb","TOTAL"],["$","2","3",[+,["2","3"]]]]]]],[output,[['B',[["","January","February","TOTAL"],["$","A","B",[+,["A","B"]]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",\"\",\"Jan\",\"Feb\",\"TOTAL\",\"]\",\"[\",\"$\",'C1','C2',\"[\",+,\"[\",'C1','C2',\"]\",\"]\",\"]\"],[output,[[\"[\",\"\",\"January\",\"February\",\"TOTAL\",\"]\",\"[\",\"$\",\"A\",\"B\",\"[\",+,\"[\",\"A\",\"B\",\"]\",\"]\",\"]\"]]]]],[[]],In_vars,Out_var)."],% ssff 1+2->sum[30,algorithm,[[[input,[['A',[["","Month1","Month2","TOTAL"],["$","1","2",[+,["1","2"]]]]]]],[output,[['B',[["","Month1","Month2","TOTAL"],["$",a,a,[month_sum,[a]]]]]]]],[[input,[['A',[["","Month1","Month2","Month3","TOTAL"],["$","3","4","5",[+,["3","4","5"]]]]]]],[output,[['B',[["","Month1","Month2","Month3","TOTAL"],["$",a,a,a,[month_sum,[a]]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[nd,[[[\"[\",\"\",\"Month1\",\"Month2\",\"TOTAL\",\"]\",\"[\",\"$\",\"1\",\"2\",\"[\",+,\"[\",\"1\",\"2\",\"]\",\"]\",\"]\"],[output,[[\"[\",\"\",\"Month1\",\"Month2\",\"TOTAL\",\"]\",\"[\",\"$\",a,a,\"[\",month_sum,\"[\",a,\"]\",\"]\",\"]\"]]]],[[\"[\",\"\",\"Month1\",\"Month2\",\"Month3\",\"TOTAL\",\"]\",\"[\",\"$\",\"3\",\"4\",\"5\",\"[\",+,\"[\",\"3\",\"4\",\"5\",\"]\",\"]\",\"]\"],[output,[[\"[\",\"\",\"Month1\",\"Month2\",\"Month3\",\"TOTAL\",\"]\",\"[\",\"$\",a,a,a,\"[\",month_sum,\"[\",a,\"]\",\"]\",\"]\"]]]]]]],[[],[]],In_vars,Out_var)."],% ssff sum->compressed[32,algorithm,[[[input,[['A',[["","Month","Month","TOTAL"],["$",a,a,[month_sum,[a]]]]]]],[output,[['B',[["","Month","TOTAL"],["$",a,[month_sum,[a]]]]]]]],[[input,[['A',[["","Month","Month","TOTAL"],["$",a,a,a,[month_sum,[a]]]]]]],[output,[['B',[["","Month","TOTAL"],["$",a,[month_sum,[a]]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",\"\",[r,[\"Month\"]],\"TOTAL\",\"]\",\"[\",\"$\",[r,[a]],\"[\",month_sum,\"[\",a,\"]\",\"]\",\"]\"],[output,[[\"[\",\"\",\"Month\",\"TOTAL\",\"]\",\"[\",\"$\",a,\"[\",month_sum,\"[\",a,\"]\",\"]\",\"]\"]]]]],[[],[]],In_vars,Out_var)."],% ssff sum->compressed vertical[33,algorithm,[[[input,[['A',[["","Month"],["$",a],["TOTAL",[vertical_month_sum,[a]]]]]]],[output,[['B',[["","Month"],["$",a],["TOTAL",[vertical_month_sum,[a]]]]]]]],[[input,[['A',[["","Month"],["$",a],["$",a],["TOTAL",[vertical_month_sum,[a]]]]]]],[output,[['B',[["","Month"],["$",a],["$",a],["$",a],["TOTAL",[vertical_month_sum,[a]]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[nd,[[[\"[\",\"\",\"Month\",\"]\",\"[\",\"$\",a,\"]\",\"[\",\"TOTAL\",\"[\",vertical_month_sum,\"[\",a,\"]\",\"]\",\"]\"],[output,[[\"[\",\"\",\"Month\",\"]\",\"[\",\"$\",a,\"]\",\"[\",\"TOTAL\",\"[\",vertical_month_sum,\"[\",a,\"]\",\"]\",\"]\"]]]],[[\"[\",\"\",\"Month\",\"]\",[r,[\"[\",\"$\",a,\"]\"]],\"[\",\"TOTAL\",\"[\",vertical_month_sum,\"[\",a,\"]\",\"]\",\"]\"],[output,[[\"[\",\"\",\"Month\",\"]\",\"[\",\"$\",a,\"]\",\"[\",\"$\",a,\"]\",\"[\",\"$\",a,\"]\",\"[\",\"TOTAL\",\"[\",vertical_month_sum,\"[\",a,\"]\",\"]\",\"]\"]]]]]]],[[],[]],In_vars,Out_var)."],% ssff sum->compressed horizontal, vertical[34,algorithm,[[[input,[['A',[["","Month","Month","TOTAL"],["$",a,a,[month_sum,[a]]],["$",a,a,[month_sum,[a]]],["TOTAL",[vertical_month_sum,[a]],[vertical_month_sum,[a]],[vertical_month_sum,[month_sum,[a]]]]]]]],[output,[['B',[["","Month","TOTAL"],["$",a,[month_sum,[a]]],["TOTAL",[vertical_month_sum,[a]],[vertical_month_sum,[month_sum,[a]]]]]]]]],[[input,[['A',[["","Month","Month","Month","TOTAL"],["$",a,a,a,[month_sum,[a]]],["$",a,a,a,[month_sum,[a]]],["$",a,a,a,[month_sum,[a]]],["TOTAL",[vertical_month_sum,[a]],[vertical_month_sum,[a]],[vertical_month_sum,[a]],[vertical_month_sum,[month_sum,[a]]]]]]]],[output,[['B',[["","Month","TOTAL"],["$",a,[month_sum,[a]]],["TOTAL",[vertical_month_sum,[a]],[vertical_month_sum,[month_sum,[a]]]]]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",\"\",[r,[\"Month\"]],\"TOTAL\",\"]\",[r,[\"[\",\"$\",[r,[a]],\"[\",month_sum,\"[\",a,\"]\",\"]\",\"]\"]],\"[\",\"TOTAL\",[r,[\"[\",vertical_month_sum,\"[\",a,\"]\",\"]\"]],\"[\",vertical_month_sum,\"[\",month_sum,\"[\",a,\"]\",\"]\",\"]\",\"]\"],[output,[[\"[\",\"\",\"Month\",\"TOTAL\",\"]\",\"[\",\"$\",a,\"[\",month_sum,\"[\",a,\"]\",\"]\",\"]\",\"[\",\"TOTAL\",\"[\",vertical_month_sum,\"[\",a,\"]\",\"]\",\"[\",vertical_month_sum,\"[\",month_sum,\"[\",a,\"]\",\"]\",\"]\",\"]\"]]]]],[[],[]],In_vars,Out_var)."],[35,algorithm,[[[input,[['A',[["a","b","a","b","a"]]]]],[output,[['B',["a"]]]]],[[input,[['A',[["c","b","c","b","c","b","c"]]]]],[output,[['B',["c"]]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[\"[\",'C1',[r,[\"b\",'C1']],\"]\"],[output,[['C1']]]]],[[[[1,2],[[1,1]]],[[1,3,2,2],[[1,1]]]]],In_vars,Out_var)."],[36,algorithm,[[[input,[['A',"1232312323,1232312323"]]],[output,[['B',"1"]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[string,[[r,[\"1\",[r,[\"2\",\"3\"]]]],\",\",[r,[\"1\",[r,[\"2\",\"3\"]]]]]],[output,[[string,[\"1\"]]]]]],[[]],In_vars,Out_var)."],[37,algorithm,[[[input,[['A',[["fulfilled", "plus"], ["fulfilled", "plus"], ["fulfilled", "plus"], ["disadvantages", "minus"], ["fulfilled", "plus"]]]]],[output,[['B',success]]]]],character_breakdown_mode=off,"algorithm(In_vars,Out_var) :-\nalgorithm([[[[r,[\"[\",\"fulfilled\",\"plus\",\"]\"]],\"[\",\"disadvantages\",\"minus\",\"]\",\"[\",\"fulfilled\",\"plus\",\"]\"],[output,[success]]]],[[]],In_vars,Out_var)."]/*,[37,algorithm,[[[input,[['A',"1232312323"%1,2,3,2,3,1,2,3,2,3"%11,22,33,22,33,11,22,33,22,33"%,11,22,33,22,33,11,22,33,22,33"]]],[output,[['B',"11"]]]]],character_breakdown_mode=on,"algorithm(In_vars,Out_var) :-\nalgorithm([[[string,[[r,[\"1\",[r,[\"2\",\"3\"]]]],\",\",[r,[\"1\",[r,[\"2\",\"3\"]]]]]],[output,[[string,[\"1\"]]]]]],[[]],In_vars,Out_var)."]*/]).
test_foldr_put_sub_term_wa_ae_smooth :-findall(_,(member([N,In,T,T2],[[1,[[[1, 1], [v, 2]], [[1, 2], [v, 3]]], [[v, 1], [v, 2]], [v, 2, v, 3]]]), ((foldr(put_sub_term_wa_ae_smooth,In,T,T21),T21=T2)->R=success;R=fail), writeln([R,foldr(put_sub_term_wa_ae_smooth),test,N])),_),!.
test_open_types_cases(25,[[n,episode_character],[[v,a]]],        [[[n,episode_character],[[t,loop0]]],[[t,loop0],[[[t,loop1],[t,loop1]]]],[[t,loop1],[[[t,loop2],[t,loop2]]]],[[t,loop2],[[[t,loop3],[t,loop3]]]],[[t,loop3],[[[t,items],[t,items]]]],[[t,items],[[t,number],[t,number],[t,number],[t,number],[t,string]]]],        [[[n,episode_character],[output]]],[        [[n,episode_character],[[v,ds3]],":-",        [                        [[n,findall],[[v,ds2],         [         [[n,member],[[v,l1],[1,2]]],                [[n,findall],[[v,ds21],         [         [[n,member],[[v,l11],[3,4]]],         [[n,findall],[[v,ds1],         [         [[n,member],[[v,l2],[5,6]]],         [[n,findall],[[[v,l1],[v,l11],[v,l2],[v,l3],[v,d]],         [         [[n,member],[[v,l3],[7,8]]],         [[n,equals4],[[v,line],["Level",[v,l1],[v,l11],[v,l2],[v,l3],         "Please write a detail."]]],         [[n,writeln],[[v,line]]],         [[n,read_string],[[v,d]]]],        [v,ds1]]]],        [v,ds21]]]],        [v,ds2]]]]        ,        [v,ds3]]]            ]]]).
testopen_cases(4,[[n,test]],[[[n,test],":-",[[[n,findall],[[[v,x1],[v,y1],[v,s]],[[[n,member],[[v,y1],[1,2]]],[[n,member],[[v,x1],[a,b]]],[[n,writeln],["Enter cell"]],[[n,writeln],[[v,y1]]],[[n,writeln],[[v,x1]]],[[n,read_string],[[v,s]]]],[v,z]]],[[n,findall],[["<tr>",[v,z1],"</tr>"],[[[n,member],[[v,y2],[1,2]]],[[n,findall],[["<td>",[v,s2],"</td>"],[[[n,member],[[v,x2],[a,b]]],[[n,member],[[[v,x2],[v,y2],[v,s2]],[v,z]]]],[v,z1]]]],[v,z2]]],[[n,equals4],[[v,z3],["<table>",[v,z2],"</table>"]]],[[n,flatten1],[[v,z3],[v,z4]]],[[n,concat_list],[[v,z4],[v,z5]]],[[n,writeln],[[v,z5]]]]],[[n,flatten1],[[v,a],[v,b]],":-",[[[n,flatten2],[[v,a],[],[v,b]]]]],[[n,flatten2],[[],[v,b],[v,b]]],[[n,flatten2],[[v,a],[v,b],[v,c]],":-",[[[n,"->"],[[[n,not],[[[n,"->"],[[[n,equals4],[[v,a],[[v,a1],"|",[v,a2]]]],[[n,true]],[[n,equals4],[[v,a],[]]]]]]],[[n,append],[[v,b],[[v,a]],[v,c]]],[[[n,equals4],[[v,a],[[v,d],"|",[v,e]]]],[[n,flatten2],[[v,d],[v,b],[v,f]]],[[n,flatten2],[[v,e],[v,f],[v,c]]]]]]]],[[n,concat_list],[[v,a1],[v,b]],":-",[[[n,equals4],[[v,a1],[[v,a],"|",[v,list]]]],[[n,concat_list],[[v,a],[v,list],[v,b]]],[[n,cut]]]],[[n,concat_list],[[v,a],[],[v,a]],":-",[[[n,cut]]]],[[n,concat_list],[[v,a],[v,list],[v,b]],":-",[[[n,equals4],[[v,list],[[v,item],"|",[v,items]]]],[[n,stringconcat],[[v,a],[v,item],[v,c]]],[[n,concat_list],[[v,c],[v,items],[v,b]]]]]]).
three_dimensions_to_two_dimensions(AX,AY,AZ,CXX,CYY,CZZ,TX,TY,TZ,EX,EY,EZ,BX,BY) :- degrees_to_radians(TX,TXR), degrees_to_radians(TY,TYR), degrees_to_radians(TZ,TZR), X is AX-CXX, Y is AY-CYY, Z is AZ-CZZ, cos(TXR,CX), cos(TYR,CY), cos(TZR,CZ), sin(TXR,SX), sin(TYR,SY), sin(TZR,SZ),  DX is CY*(SZ*Y+CZ*X)-SY*Z, DY is SX*(SY*Z+SY*(SZ*Y+CZ*X))+CX*(CZ*Y-SZ*X), DZ is CX*(CY*Z+SY*(SZ*Y+CZ*X))+SX*(CZ*Y-SZ*X), %trace, (-0.00000000000001<DZ,DZ<0.00000000000001 %DZ is 0 ->DZ1=0.00000000000001;DZ1=DZ),  BXX is (EZ/DZ1)*DX+EX, BYY is (EZ/DZ1)*DY+EY,  floor(BXX,BX), floor(BYY,BY) ,writeln([AX,AY,AZ,CXX,CYY,CZZ,TX,TY,TZ,EX,EY,EZ,BX,BY]) .
 test_sub_term_wa :-findall(_,(member([N,ST,T,In],[[1,[a,_],[[a,b],[a,c]], [[[1, 1], [a, b]], [[1, 2], [a, c]]]],[2,[a,_],[[a,b],[[a,c]]], [[[1, 1], [a, b]], [[1, 2, 1], [a, c]]]],[3,[],[[a,b],[a,c]], []],[4,[a,_],[[a,b],[a,[a,e]]], [[[1, 1], [a, b]], [[1, 2], [a, [a, e]]]]],[5,[],[[]], [[[1, 1], []]]],[6,[],[], [[[1], []]]],[7,_,_, [[[1], _]]],[8,[_],[[_],_], [[[1, 1], [_]], [[1, 2], [_]]]],[9,_,[[_],_], [[[1], [[_], _]]]],[10,1,[[1,_],1,_], [[[1, 1, 1], 1], [[1, 1, 2], 1], [[1, 2], 1], [[1, 3], 1]]], [11,[_,_],[[_,_]], [[[1, 1], [_, _]]]], [12,[_,_],[_,_], [[[1], [_, _]]]], [13,[_],[_,_], [[[1, 1], [_]], [[1, 2], [_]]]], [14,[_],[_], [[[1], [_]]]], [15,[[[_]]],[_,_], [[[1, 1], [[[_]]]], [[1, 2], [[[_]]]]]], [16,[1],[[1]], [[[1, 1], [1]]]], [17,[_],[[_]], [[[1], [[_]]]]],[18,[_],[[_]], [[[1], [[_]]]]], [19,[_],_, [[[1], [_]]]] ]), ((sub_term_wa(ST,T,In1),In1=In)->R=success;R=fail), writeln([R,sub_term_wa,test,N])),_),!.sub_term_wa(Find,A,B) :- dynamic(stwa/1), retractall(stwa(_)), assertz(stwa(%[ find%,Find] )), sub_term_wa1([1],_Ns2,0,[A],Find,[],B1,true), findall([C3,C2],(member([C1,C2],B1),append([_],C3,C1),not(C3=[])),B), %length(Find,L), %findall(B1,(member(B1,B),length(B1,L)),B2), !.
                                                              match4([[v,a],"|",[v,b]],[[1,2],3,4],[],V).V = [[[v, a], [1, 2]], [[v, b], [3, 4]]].
                                                              match4([[v,a],"|",[v,b]],[[1,2],3,4],[],V).V = [[[v, a], [1, 2]], [[v, b], [3, 4]]].match4([[[v,a],"|",[v,d]],[v,c],"|",[v,b]],[[1,5],2,3,4],[],V).V = [[[v, a], 1], [[v, d], [5]], [[v, c], 2], [[v, b], [3, 4]]].
  t2b :-N1=1,texttobr2(N1,"Books/algs/lgalgs_a.txt",u,u,false,false,false,false,false,false,[auto,on]),!.
 % replace with 3rd set, then 2nd set (to avoid duplicates being replaced)  %()replace_term(N11) % ()get list item of each list %N1=[[_,_]|N11], % start with index=1 not 0 %N2=[[_,_]|N21],  % get max of N1   % shuffle N2 down according to max of N1  % shuffle S2 down " S1  % merge S1,S2  % append lists replace_items0(N252,LSs3,N255,N249):- replace_items01(N252,LSs3,N255,N2491), %trace, foldr(append,N2491,N249).
 %generate_p11([],Alg,Alg) :- !.
 /*term_to_numbers(term_to_numbers2,S,C1,C2,N1,N2) :- S=[S1|S2], (member([S1,N],C1)-> C1=C3; (term_to_numbers2(N), retractall(term_to_numbers2(_)), N4 is N+1, assertz(term_to_numbers2(N4)), append(C1,[[S1,N]],C3))), append(N1,[N],N3), term_to_numbers(S2,C3,C2,N3,N2),!.
 remember_and_turn_off_debug(Debug) :- debug(Debug),retractall(debug(_)),assertz(debug(off)).
% alg_conn("a(A,B):-foldr(append,A,B).","b(A,B):-flatten(A,C),foldr(string_concat,C,B).",[["c(A,B):-a(A,C),b(C,B).",["a(A,B):-foldr(append,A,B)."]],["c(A,B):-a(A,C),b(C,B).",["b(A,B):-flatten(A,C),foldr(string_concat,C,B)."]]],"c(A,B):-a(A,C),b(C,B).",C).
% 5 - form to enter data, savetestopen_cases(5,[[n,test]],%[[n,list_to_string],["a",[v,file_terma]]],[[[n,test],":-",[[[n,writeln],["Enter your name:"]],%[[n,trace2]],[[n,read_string],[[v,s]]],[[n,write_file],['file.txt',["Name",[v,s]]]]]],[[n,write_file],[[v,path],[v,file_term]],":-",[[[n,list_to_string],[[v,file_term],[v,file_terma]]],[[n,stringconcat],[[v,file_terma],".",[v,file_termb]]],[[n,open],[[v,path],write,[v,stream1]]],[[n,write],[[v,stream1],[v,file_termb]]],[[n,close],[[v,stream1]]]%,[[n,cut]]]],[[n,list_to_string],[[v,a],[v,b]],":-",[[[n,"->"],[[[n,string],[[v,a]]],[[n,wrap_if_string],[[v,a],[v,b]]]]],[[n,cut]]]],[[n,list_to_string],[[v,a],[v,b]],":-",[[[n,list_to_string],[[v,a],"",[v,b]]]%,[[n,cut]]]],[[n,list_to_string],["",[v,b],[v,c]],":-",[[[n,concat],[[v,b],"\"\"","",[v,c]]]%,[[n,cut]]]],[[n,list_to_string],[[],[v,b],[v,c]],":-",[[[n,concat],["[",[v,b],"]",[v,c]]]%,[[n,cut]]]],[[n,list_to_string],[[v,a],"",[v,c]],":-",[[[[n,"->"],[[[n,atom],[[v,a]]],[[n,true]],[[[n,number],[[v,a]]]]]],[[n,atom_string],[[v,a],[v,c]]]]%,[[n,cut]]]],[[n,list_to_string],[[v,a],[v,b],[v,c]],":-",[[[n,"->"],[[[[n,not],[[[n,"->"],[[[n,equals4],[[v,a],[[v,a1],"|",[v,a2]]]],[[n,true]],[[n,equals4],[[v,a],[]]]]]]]],[[[n,"->"],[[[n,equals4],[[v,b],""]],[[n,equals4],[[v,g],""]],[[n,equals4],[[v,g],[","]]]]],[[n,concat],[[v,b],[v,g],[v,a],[v,c]]]],[[[n,equals4],[[v,a],[[v,d],"|",[v,e]]]],[[n,wrap_if_string],[[v,d],[v,d1]]],%[[n,trace2]],[[n,list_to_string],[[v,d1],"",[v,f]]],[[n,"->"],[[[n,equals4],[[v,b],""]],[[[n,equals4],[[v,g],""]],[[n,equals4],[[v,f],[v,f2]]]],[[[n,equals4],[[v,g],","]],[[n,equals4],[[v,f],[v,f2]]]]]],[[n,concat],[[v,b],[v,g],[v,f2],[v,f1]]],[[n,list_to_string],[[v,e],[v,f1],[v,c]]]]]]%,[[n,cut]]]],[[n,wrap_if_string],[[v,a],[v,b]],":-",[[[n,"->"],[[[[n,not],[[[n,equals4],[[v,a],""]]]],[[n,string],[[v,a]]]],[[n,maplist],[[n,string_concat],["\"",[v,a],"\""],"",[v,b]]],[[n,equals4],[[v,a],[v,b]]]]]%,[[n,cut]]]],[[n,concat],[[v,b],[v,g],[v,a],[v,c]],":-",[[[n,maplist],[[n,string_concat],[[v,b],[v,g],[v,a]],"",[v,c]]]%,[[n,cut]]]]]).
% A=B (B=B)/*getvalue_new2(Variable,Value,Vars,_) :-(not(variable_name(Variable))->Variable=Value;((member([Variable,Value],Vars),not(variable_name(Value)))->true;% is this required in getvalue_new1        (%not(member([Variable,_Value],Vars)),        (%Standard_or_e4=standard->        %Value=empty;        Variable=Value)))),!.
% Program finder 6 3 21test(115,[[n,function],[[["n1","a"]],[["a",5]],[],[v,result]]],[[[n,function],[[],[v,inputs2],[v,output],[v,output]]],[[n,function],[[v,input1],[v,inputs2],[v,inputs3],[v,output]],":-",[[[n,head],[[v,input1],[v,head]]],[[n,tail],[[v,input1],[v,tail]]],[[n,equals1],[[v,head],[[v,a],[v,b]]]],[[[n,string],[[v,a]]],[[n,string],[[v,b]]]],[[n,head],[[v,inputs2],[v,head1]]],[[n,tail],[[v,inputs2],[v,tail1]]],[[n,equals1],[[v,head1],[[v,b],[v,c]]]],[[[n,number],[[v,c]]]],[[n,equals2],[[v,item1],[[v,a],[v,c]]]],[[n,wrap],[[v,item1],[v,item1a]]],[[n,append],[[v,inputs3],[v,item1a],[v,item2]]],[[n,function],[[v,tail],[v,tail1],[v,item2],[v,output]]]]]],[[[[v,result],[["n1", 5]]]]]).
% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Drawing connections 3 of 4.txt",0,algorithms,"23.   *I prepared to cultivate people.  I did this by writing 16 250 breasoning areas of study influenced by Plato’s forms about Popology.  First, I equated Plato’s forms with Lucianic Popology, by equating people with objects.  Second, I equated the names of Plato’s forms with an agreed with argument, by writing simulations of people are in people’s minds.  Third, I equated the functions of Plato’s forms with a positive argument, by writing people are stronger than objects.  In this way, I prepared to cultivate people by writing 16 250 breasoning areas of study influenced by Plato’s forms about Popology."]% read do you create the person, do you switch them on to existing for the rest of their life?test_open_types_cases(4,[[n,cultivate_person],[[v,a],[v,b]]],        [[[n,cultivate_person],[[t,string],[t,string]]]],        [[[n,cultivate_person],[output,output]]],[        [[n,cultivate_person],[[v,a],[v,b]],":-",        [                %% do you create the person                [[n,writeln],["Do you create the person?"]],                [[n,read_string],[[v,a]]],                        %% do you switch them on to existing for the rest of their life?                [[n,writeln],["Do you switch them on to existing for the rest of their life?"]],                [[n,read_string],[[v,b]]]/*,                [[n,writeln],["Do you switch them on to existing for the rest of their life?"]],                [[n,read_string],[[v,c]]]                */                        ]]]).
% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Time to Prepare 3 of 4.txt",0,algorithms,"27. *The bottler prepared to put a cork in the bottle. He did this by closing the refrigerator door. First, he pushed the door with his hand. Second, he lifted the latch. Third, he closed the door. In this way, the bottler prepared to put a cork in the bottle by closing the refrigerator door."]% fill or empty a bottletest_types_cases(39,[[n,fill_or_empty_bottle],["nothing",[v,a2]]],        [[[n,fill_or_empty_bottle],[[t,string],[t,string]]]],        [[[n,fill_or_empty_bottle],[input,output]]],[        [[n,fill_or_empty_bottle],["nothing","liquid"]],        [[n,fill_or_empty_bottle],["liquid","nothing"]]],[[[[v,a2],"liquid"]]]).
% ["Short Arguments","Medicine - Quantum Box of Circulatory System 1.txt",0,algorithms,"5. *I used cardiovascular activity to maintain circulatory system flow."]test_types_cases(35,[[n,circulation1],["heart1","cells"]],        [[[n,circulation1],[[t,string],[t,string]]],        [[n,circulation],[[t,string],[t,string]]],        [[n,link],[[t,string],[t,string]]]],        [[[n,circulation1],[input,input]],        [[n,circulation],[input,output]],        [[n,link],[input,output]]],[        [[n,circulation1],[[v,a],[v,b]],":-",        [       [[n,circulation],[[v,a],[v,b]]]]],        [[n,circulation],[[v,a],[v,b]],":-",        [       [[n,link],[[v,a],[v,b]]]]],        [[n,circulation],[[v,a],[v,b]],":-",        [       [[n,link],[[v,a],[v,c]]],                [[n,circulation],[[v,c],[v,b]]]        ]],        %[[n,link],["Canterbury","Bambury"]],        [[n,link],["heart1","lungs"]],        [[n,link],["lungs","heart2"]],        %[[n,link],["Bambury","Avignon"]],        [[n,link],["heart2","cells"]],        [[n,link],["cells","heart1"]]        ],[[]]).
% ["Time Travel","Interesting histories to visit 4.txt",0,algorithms,"*Interesting histories to visit 4"]test_types_cases(20,[[n,visit_staged_history],["us",[v,staged_history]]],        [[[n,visit_staged_history],[[t,string],[t,string]]]],        [[[n,visit_staged_history],[input,output]]],[        [[n,visit_staged_history],[[v,now],[v,now]]]],[[[[v,staged_history],"us"]]]).% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Time to Prepare 2 of 4.txt",0,algorithms,"11. *The teacher prepared to represent being interested in a lesson by Òdotting it onÓ. He did this by climbing the rope ladder. First, he found the correct ladder. Second, he tested that the ladder was about to start. Third, he climbed the ladder with his arms and legs. In this way, the teacher prepared to represent being interested in a lesson by Òdotting it onÓ by climbing the rope ladder."]test_types_cases(21,[[n,memorise_point],["point",[v,memory_out]]],        [[[n,memorise_point],[[t,string],[t,string]]]],        [[[n,memorise_point],[input,output]]],[        [[n,memorise_point],[[v,memory_in],[v,memory_in]]]],[[[[v,memory_out],"point"]]]).
% descendant(Person, Descendant)% means Descendant is a descendant of Person.
% find loops that are the same lengthfind_loops(A,B,_C,_D,_L1,L4) :-%trace, findall([D1,N,X2],find_loop(A,B,[]%C  ,[],X2,D1,1,N),L2), findall([N,X21],member([_,N,X21],L2),X22), sort(X22,X23), findall([N,X,LN],(member([N,X],X23),findall(L,member([L,N,X],L2),LN)),L4).%, %findall(N,member([_,N,_],L2),N1), %N1=[N2|N3], %forall(member(N4,N3),N4=N2), %findall(L3,member([L3,_,_],L2),L4).
% find_first(B,(member(B,[true,false]),B),D).
% get_n_item([4,6,7],6,L).
% given file with number of As required and gl file length, gives div and mod values for t2btruncate(File1,Words1,File2) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",(true->(phrase_from_file_s(string(String2), File1));_String1=String2),split_string(String2,SepandPad,SepandPad,String3),%writeln(String3),length(String3,Words2),(Words1>Words2->Words3=Words2;Words3=Words1),length(String4,Words3),append(String4,_,String3),findall([Item," "],member(Item,String4),Item2),maplist(append,[Item2],[Item3]),concat_list(Item3,String5),%term_to_atom(Item2,String4a),%string_atom(String5,String4a),(open_s(File2,write,Stream3),write(Stream3,String5),close(Stream3)),!.
% given file with number of As required and gl file length, gives div and mod values for t2btruncate1(Type,File1,Words1,File2) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",(Type=file->(phrase_from_file_s(string(String2), File1));(Type=string,File1=String2)),split_string(String2,SepandPad,SepandPad,String3),%writeln(String3),length(String3,Words2),(Words1>Words2->Words3=Words2;Words3=Words1),length(String4,Words3),append(String4,_,String3),findall([Item," "],member(Item,String4),Item2),maplist(append,[Item2],[Item3]),concat_list(Item3,String5),%term_to_atom(Item2,String4a),%string_atom(String5,String4a),(Type=file->(open_s(File2,write,Stream3),write(Stream3,String5),close(Stream3));(Type=string,File2=String5)),!.
% given file with number of As required and gl file length, gives div and mod values for t2btruncate_between1(File1,Words_before,Words_during,File2) :-Words_total is Words_before+Words_during,SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",(true->(phrase_from_file_s(string(String2), File1));_String1=String2),split_string(String2,SepandPad,SepandPad,String3),%writeln(String3),length(String3,Words2),(Words_total>Words2->Words3=Words2;Words3=Words_total),length(String4,Words3),append(String4,_,String3),length(String5a,Words_during),append(_,String5a,String4),findall([Item," "],member(Item,String5a),Item2),maplist(append,[Item2],[Item3]),concat_list(Item3,String5),%term_to_atom(Item2,String4a),%string_atom(String5,String4a),(open_s(File2,write,Stream3),write(Stream3,String5),close(Stream3)),!.
% if a=b(a) then failoccurs_check2([],[]) :- true.
% list_count(List, Count)% Count is bound to the number of elements in List.
% recursive typestest_types_cases(23,[[n,connect_cliques],[[["a",1],[1,2],[2,"b"]],[["a",3],[3,4],[4,"b"]],[v,output]]],        [[[n,connect_cliques],[[t,list2],[t,list2],[t,list2]]],[[t,item],[[t,number]]],[[t,item],[[t,string]]],[[t,list2],[{[t,item]}]],[[t,list2],[{[t,list2]}]]],        [[[n,connect_cliques],[input,input,output]]],[        [[n,connect_cliques],[[v,a],[v,b],[v,c]],":-",        [       [[n,append],[[v,a],[v,b],[v,c]]]        ]]        ],[[[[v,output],[["a",1],[1,2],[2,"b"],["a",3],[3,4],[4,"b"]]]]]).% ["Mind Reading","Mr other times 7.txt",0,algorithms,"57. *I responsibly chose an ontological value (side of the car that the steering wheel was on in the particular car) by mind reading the other time."]% Aus, UK - left hand traffic, US - right hand traffictest_types_cases(24,[[n,hand_traffic],["Australia",[v,a1]]],        [[[n,hand_traffic],[[t,string],[t,string]]]],        [[[n,hand_traffic],[input,output]]],[        [[n,hand_traffic],["Australia","left"]],        [[n,hand_traffic],["UK","left"]],        [[n,hand_traffic],["US","right"]]        ],[[[[v,a1],"left"]]]).
% repeating_unit([2,2],U).
% return until last non end function, go to line after% return until last non end function, go to line for false% return line of last non end function% returns go to predicates% bcreturn_to_last_non_end_function(E1,Lines,End_line4,[Dbw_on_true,A1],[Dbw_go_after,B1],[Dbw_on_false,C1],[Dbw_go_to_predicates,D1],Line1,_Globals,_,_,FA,E2,End_line42) :-%writeln1([*,return_to_last_non_end_function(E1,Lines,End_line4,[Dbw_on_true,A1],[Dbw_go_after,B1],[Dbw_on_false,C1],[Dbw_go_to_predicates,D1],Line1,_Globals,_,_,FA)]),get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,get_lang_word("exit_function",Dbw_exit_function1),Dbw_exit_function1=Dbw_exit_function,get_lang_word("findall_exit_function",Dbw_findall_exit_function1),Dbw_findall_exit_function1=Dbw_findall_exit_function,get_lang_word("findall_fail_function",Dbw_findall_fail_function1),Dbw_findall_fail_function1=Dbw_findall_fail_function,get_lang_word("fail_function",Dbw_fail_function1),Dbw_fail_function1=Dbw_fail_function,% if -2 or -3, fill A-Line((E1= -1->true;(E1= -2->true; E1= -3))->(End_line4=E1,A1=(-),B1=(-),C1=(-),D1=(-),Line1=(-));((E1=[Dbw_exit_function,_]->true;E1=[Dbw_fail_function,_])->fail;(E1=[Dbw_findall_exit_function,_]->(%go_after(E1,Lines,End_line4)End_line4=E1,A1=(-),B1=(-),C1=(-),D1=(-),Line1=(-),FA=exit);(E1=[Dbw_findall_fail_function,E]->(((number(E2),E2= -3)->(member([E,[Dbw_on_true,A11],[Dbw_go_after,B11],[Dbw_on_false,C11],[Dbw_go_to_predicates,D11]|Line11],Lines),((%trace,not(B11= -1),not(B11= -2),not(B11= -3),number(B11)%,trace)->(member([B11,[Dbw_on_true,A1],[Dbw_go_after,B1],[Dbw_on_false,C1],[Dbw_go_to_predicates,D1]|Line1],Lines),End_line42=B11);(A11=A1,B11=B1,C11=C1,D11=D1,Line11=Line1,End_line42=_)),FA=fail);(member([E,[Dbw_on_true,A1],[Dbw_go_after,B1],[Dbw_on_false,C1],[Dbw_go_to_predicates,D1]|Line1],Lines),%member([B11,[Dbw_on_true,A1],[Dbw_go_after,B1],[Dbw_on_false,C1],[Dbw_go_to_predicates,D1]|Line1],Lines),%End_line4=B11,FA=fail)));%End_line4=E1,A1=(-),B1=(-),C1=(-),D1=(-),Line1=(-),FA=fail);(find_line_number(E1,E),End_line4=E,member([E,[Dbw_on_true,A1],[Dbw_go_after,B1],[Dbw_on_false,C1],[Dbw_go_to_predicates,D1]|Line1],Lines)))))).
% search_for_n_words_in_common("a b c", ["a", "b"], 2).
% sent2alg([check,3,is,greater,than,2],I,O).
% sent2alg([false,is,not,true],I,O).
% sent2spec([check,3,is,greater,than,2],I,O).
% sent2spec([false,is,not,true],I,O).
% siblings(A,B)% means A and B are siblings%siblings(GG) :-findall([A,B],parent(A,B),C),findall([A1,B1],(member([X, A1],C),member([X, B1],C),not(A1=B1)),GG),!.
% to do% back-translation, on I not Obt1-lp2sm_en2test(Lang,BL,RL) :-findall(A,(lp2sm_en2test(N,I,O),(((once((trans_alg(I,Lang,"en",I2),retractall(lang(_)),assertz(lang("en")),add_line_numbers_to_algorithm1(I2,Functions2a),find_pred_numbers(Functions2a,[]                                          ,Pred_numbers),retractall(pred_numbers(_)),assertz(pred_numbers(Pred_numbers)),find_state_machine1(Functions2a,O1,Pred_numbers))),O=O1)->(writeln([bt1-lp2sm_en2test,N,passed]),A=passed);(writeln([bt1-lp2sm_en2test,N,failed]),A=failed)))),B),length(B,BL),findall(_,member(passed,B),R),length(R,RL),!.
% to do% back-translation, on I not Obt1-lp2sm_test(BL,RL) :-findall(A,(lp2sm_test(N,I,O),(((once((add_line_numbers_to_algorithm1(I,Functions2a),find_pred_numbers(Functions2a,[]                                          ,Pred_numbers),retractall(pred_numbers(_)),assertz(pred_numbers(Pred_numbers)),find_state_machine1(Functions2a,O1,Pred_numbers))),O=O1)->(writeln([bt1-lp2sm_test,N,passed]),A=passed);(writeln([bt1-lp2sm_test,N,failed]),A=failed)))),B),length(B,BL),findall(_,member(passed,B),R),length(R,RL),!.
% x,y to ppmpaint_elements(_X,_Y,[],File_contents,File_contents) :- !.
%% **** Pretty Print/**?- pp0([[[a,*,*]],[[b,*,*],[c,d]],[[ef,*,*],[g],(:-),[[[[h,*,*],[i]],->,true,or,true],!]]]).
%% **** Pretty Print/**?- pp0([[[a,*,*]],[[b,*,*],[c,d]],[[ef,*,*],[g],(:-),[[[[h,*,*],[i]],->,true,or,true],!]]]).[[[a,*,*]],[[b,*,*],[c,d]],[[ef,*,*],[g],(:-),[[[[h,*,*],[i]],->,true,or,true],!]]]**//**concat_list(A,[],A):-!.
%% **** Pretty Print/**?- pp0([[[a,*,*]],[[b,*,*],[c,d]],[[ef,*,*],[g],(:-),[[[[h,*,*],[i]],->,true,or,true],!]]]).[[[a,*,*]],[[b,*,*],[c,d]],[[ef,*,*],[g],(:-),[[[[h,*,*],[i]],->,true,or,true],!]]]**//**concat_list(A,[],A):-!.concat_list(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list(C,Items,B).**//**pp3([]) :- !.
%% Adye is Venantest(18,[[n,grammar1],["what is 1+11",[v,c]]],[  [[n,grammar1],[[v,u],[v,c]],":-",  [   [[n,sentence],[[v,u],"",[v,c]]]  ]  ],    [[n,sentence],[[v,c]],"->",  [[[n,subject]],[[n,verbphrase],[[v,c]]]]],  [[n,verbphrase],[[v,c]],"->",  [[[n,verb]],[[n,object],[[v,c]]]]],    [[n,subject],["",""]],  [[n,subject],"->",["what"," "]],  [[n,subject],[[v,a],[v,a]]],    [[n,verb],["",""]],  [[n,verb],"->",["is"," "]],  [[n,verb],[[v,a],[v,a]]],  [[n,object],["","",[v,c]]],  [[n,object],[[v,c]],"->",[[[n,item],[[v,a]]],  "+",  [[n,item],[[v,b]]],  [[n,code],[[n,+],[[v,a],[v,b],[v,c]]]]]],  [[n,object],[[v,a],[v,a]]],    [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,u]]],[[n,code],  [[n,stringtonumber],[[v,u],[v,t]]]]]],  [[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]]],[[[[v,c],12]]]).%% Inky Classic 2test(19,[[n,positivityscore],[["not","you","like","a","walk"],["would","you","like","a","walk"],0,[v,s]]],/**test(19,[[n,positivityscore],["would1"%%,"you","like","a","walk",["would"%%,"you","like","a","walk"]]],**/[/**        [[n,positivityscore],[[v,l],[v,m]],":-",        [       [[n,not],[        [[n,member],[[v,l],[v,m]]]]]                 ]]**/                [[n,positivityscore],[[],[v,l],[v,s],[v,s]]],        [[n,positivityscore],[[v,l],[v,m],[v,s1],[v,s2]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,member],[[v,m],[v,h]]],                [[n,+],[[v,s1],1,[v,s3]]],                [[n,positivityscore],[[v,t],[v,m],[v,s3],                [v,s2]]]        ]],                [[n,positivityscore],[[v,l],[v,m],[v,s1],[v,s2]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[n,member],[[v,m],[v,h]]]]],                [[n,positivityscore],[[v,t],[v,m],[v,s1],                [v,s2]]]]]        ]        ,[[[[v,s], 4]]]).
%% Dukel goes to the grammar exampletest(16,[[n,grammar1],["john ate the apple"]],[  [[n,grammar1],[[v,u]],":-",  [   [[n,sentence],[[v,u],""]]  ]  ],    [[n,sentence],"->",  [[[n,subject]],[[n,verbphrase]]]],  [[n,verbphrase],"->",  [[[n,verb]],[[n,object]]]],    [[n,subject],["",""]],  [[n,subject],"->",["john"," "]],  [[n,subject],[[v,a],[v,a]]],    [[n,verb],["",""]],  [[n,verb],"->",["ate"," "]],  [[n,verb],[[v,a],[v,a]]],  [[n,object],["",""]],  [[n,object],"->",["the"," ","apple"]],  [[n,object],[[v,a],[v,a]]]],[[]]).%% Blackl loves the grammartest(17,[[n,grammar1],["aaa1 ,-'! a? b! b.",[v,t]]],%%test(15,[[n,compound213],["","",[["a"],1],[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,compound21],[[v,u],"",[],[v,t]]]   %%[[n,number21],[[v,u],"","",[v,t]]]   %%[[n,compound213],["","",[["a"],1],[v,t]]]  ]  ],  [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]], %% swapped these  [[n,compound],[[v,t],[v,u]],"->",  [[[n,compound21],[[v,t],[v,v]]],  [[n,compound213],[[v,v],[v,u]]]]],  [[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]]," ",  [[n,compound21],[[],[v,compound1name]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]]]],/**  [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,t]]]]],**/  [[n,item],[[v,t]],"->",[[[n,word21],["",[v,t]]]]],  [[n,item],[[v,t]],"->",[[[n,compound],[[],[v,t]]]]],/**  [[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]],**/  [[n,word212],["","",[v,t],[v,t]]],  [[n,word212],[[v,u],[v,u],[v,t],[v,t]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],**/  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[v,b],  [[n,code],[[n,sentencechars],[[v,a]]],  [[n,finalchar],[[v,b]]],  [[n,stringconcat],[[v,t],[v,a],[v,v1]]],  [[n,stringconcat],[[v,v1],[v,b],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,word21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]]**/  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,sentencechars],[[v,a]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word21],["",[v,wordstring]]],  [[n,code],  [[n,stringconcat],[[v,v],[v,wordstring],[v,u]]]]]],    [[n,sentencechars],[[v,c]],":-",  [[[n,letters],[[v,c]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[[n,stringtonumber],[[v,c],[v,n]]],  [[n,number],[[v,n]]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c]," "]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],","]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"-"]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"'"]]]],    [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"."]]]],  [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"!"]]]],  [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"?"]]]]%%],[[[v,t],[["a"],1]]]).
%% [['<<<Note:>>>','How do you do?'],[[[BT:'How are you?',bt]...],['How are you - entered?'...]]]%% [[<<<Note: Please enter only "en" sentences with the meaning of the first sentence to find a correct back-translation by appending item(s) to the last list: * in [[],[[],[*]]].  Open and save using the menu as path /Users/luciangreen/Dropbox/Program Finder/possibly not working/translationmanagementsystem/ctt/tmp/ctt-orig1-orig2-tmp-hello.txt>>>,hello],[],[[hello,]]]file1(N) --> "[", "[", "[", sentence1(_A1), "]",  ",", "[", sentence1(_A2),  "]", "]", ",", "[", file3(_A3),  "]", %%%",", "[",file3(N), "]", "]", optional_end(_A4), !.
%% bc in a=bc%%: if doesn't contain "|" in first level, then match4 list x, terminalsingle_item(A) :- predicate_or_rule_name(A),!.
%% bc in a=bc%%: if doesn't contain "|" in first level, then match4 list x, terminalgetvalue_match(Variable1,Value1,Vars1) :-not(Variable1="|"),single_item(Variable1),getvalue(Variable1,Value1,Vars1),!.
%% checktypes([n,f],[1,"a",[n,a]],[[[n,f],[[t,number],[t,string],[t,predicatename]]]]).
%% make predicates into dcgs with bottom case, to give input at any line x doesn't need to go back to any matching line, needs a single line x dcg would allow traversing tree structure x give a return to number as goes        %% if fails, back-tracks along track list x goes to return line in nested if thens%% returns to choice points when finishes predicates%% -3 if successfully finishes predicate x%% find_state_machine_body2(Body1,Body2,Return_line_true,Return_line_false,Pred_numbers) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("exit_function",Dbw_exit_function1),Dbw_exit_function1=Dbw_exit_function,get_lang_word("fail_function",Dbw_fail_function1),Dbw_fail_function1=Dbw_fail_function,%%trace,        Body1=[[Number1,[Dbw_n,Dbw_not],Statement]|Statements2        ],      %trace,        find_first_line_number(Statement,Statement_number),(Statements2=[]->Statements2_number=Return_line_true;        find_first_line_number(Statements2,Statements2_number)),        %%%% swap args 3,4 ?        find_state_machine_body2([Statement],Body3,[Dbw_exit_function,Number1],[Dbw_fail_function,Number1],Pred_numbers),                %writeln1(Body3),        find_state_machine_body2([Statements2],Body4,Return_line_true,Return_line_false,Pred_numbers),        %%Number2 is Number1+1,        %writeln1(Body4),                %%if_empty_list_then_return(Statements2,Number2,Number3),  maplist(append,[[Body3,Body4]],[Body34]),get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,  Body2a=[Number1,[Dbw_on_true,Statement_number],[Dbw_go_after,Return_line_false],  [Dbw_on_false,Statements2_number],[Dbw_go_to_predicates,-],  [Dbw_n,Dbw_not]],  append([Body2a],Body34,Body2),  %append([Body5],Body4      %  ,Body2),!.%% s1 and s2 may need separate line numbers for nondet for or%% find first line number in each of s1, s2%% account for brackets %% vars have separate list for nondet, splices existing listsfind_state_machine_body2(Body1,Body2,Return_line_true,Return_line_false,Pred_numbers) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("exit_function",Dbw_exit_function1),Dbw_exit_function1=Dbw_exit_function,        Body1=[[Number,[Dbw_n,Dbw_or],[Statements1,Statements2]]|Statements3],  find_first_line_number(Statements1,Statements1_number),  find_first_line_number(Statements2,Statements2_number),(Statements3=[]->Statements3_number=Return_line_true;        find_first_line_number(Statements3,Statements3_number)),  find_state_machine_body2([Statements1],Body3,[Dbw_exit_function,Number],Statements2_number,Pred_numbers),        find_state_machine_body2([Statements2],Body4,[Dbw_exit_function,Number],Return_line_false,Pred_numbers),        find_state_machine_body2([Statements3],Body5,Return_line_true,Return_line_false,Pred_numbers),        %%Number2 is Number1+1,        %%if_empty_list_then_return(Statements3,Number2,Number3),        get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,        maplist(append,[[Body3,Body4,Body5]],[Body345]),        Body6=[Number,[Dbw_on_true,Statements1_number],[Dbw_go_after,Statements3_number],[Dbw_on_false,Return_line_false],[Dbw_go_to_predicates,-],[Dbw_n,Dbw_or]],%Body34        %],        append([Body6],Body345,Body2),        !.
%%%%%%%%%% Use base number unless a member of I1,D1already_member1(X1,X2,Insertions1,Deletions1,X) :-get_base_token_number(X1,%X%X11),get_base_token_number(X2,%X%X21),X11=X21,((member(X1,Insertions1)->true;member(X1,Deletions1))->X=X1;(X=X11)),!.
%%%%%%%%%%%%%%findbest(R,R) :-!.findbest2(R,Item):-sort(R,RA),reverse(RA,RB),RB=[[_,Item]|_Rest].%%trialy2A([],R) :-%%R=[[_,'A']].%%trialy2A(List,R) :-%%random_member(A,List),%%R=[[_,A]].
%%:- include('caw5 copy 12.pl').
%%:- include('caw5 copy 12.pl').%%:- include('cawpverify.pl').
%%[[[n,add],[[v,a],[v,c],[v,d]],":-",[[[n,[]],[[v,a]]],[[n,=],[[v,c],[v,d]]]]]]%% Add cover all vars before returning%%**//** Doesn't work%% before now, io=21cawptest2(7,add0,[],2,3,5,% 3 x 5[1,2],[0,1],[[[[[[v,a],1],[[v,b],2]],[],true],[[[[v,a],2],[[v,b],1]],[],true]],%%[[[[[v,a],1],[[v,b],2]],[],true],[[[[v,a],2],[[v,b],1]],[],true]],[[[[[v,a],1]],[[[v,b],2]],true]],[[[[[v,a],2]],[[[v,b],1]],true]]],[ %% Algorithm dictionary        [[[n,a2],1,1],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[[n,a3],1,1],[[v,a],[v,b]],":-",        [       [[n,-],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]]],[ %% Result        [[n,a2],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,a3],[[v,a],[v,b]],":-",        [       [[n,-],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,add0],[[v,a],[v,b]],":-",        [       [[n,1],[[v,a],[v,b]]]]],                [[n,1],[[v,a],[v,b]],":-",        [       [[n,a2],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,a3],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]]]).
%%strip2(A,B) :- strip(A,C),strip(C,B).
%%writeln([eg1]),test(1,[[n,function],[1,1,[v,c]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                [[n,+],[[v,a],[v,b],[v,c]]]        ]        ]],[[[[v,c], 2]]]).%%writeln([eg2]),test(2,[[n,function],[1,1,[v,c]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                [[n,+],[[v,a],[v,b],[v,d]]],                [[n,+],[[v,d],1,[v,c]]]        ]        ]],[[[[v,c], 3]]]).
%%writeln([eg1]),test(1,[[n,function]],[        [[n,function],":-",        [                [[n,equals4_on]]        ]        ]],[[]]).
%%writeln([eg1]),test_types_cases(1,[[n,function],[1,1,[v,c]]],[[[n,function],[[t,number],[t,number],[t,number]]]],[[[n,function],[input,input,output]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                [[n,+],[[v,a],[v,b],[v,c]]]        ]        ]],[[[[v,c], 2]]]).
%%writeln([eg1]),test_types_cases(1,[[n,function],[1,1,[v,c]]],[[[n,function],[[t,number],[t,number],[t,number]]]],[[[n,function],[input,input,output]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                [[n,+],[[v,a],[v,b],[v,c]]]        ]        ]],[[[[v,c], 2]]]).test_types_cases(2,[[n,function],[[v,a],[v,b],[v,c]]],[[[n,function],[[t,number],[t,string],[t,predicatename]]]],[[[n,function],[output,output,output]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                [[n,=],[[v,a],1]],                [[n,=],[[v,b],"a"]],                [[n,=],[[v,c],[n,a]]]        ]]],[[[[v,a], 1],[[v,b], "a"],[[v,c], [n,a]]]]).
%*%replace_first_vars21(Variable2,_,Vars1,X,FirstArgs1,FirstArgs2) :-%is_list(Variable2),%replace_first_vars211(Variable2,X,Vars1,FirstArgs1,FirstArgs2).
%/*        replace_pred_names(Body1,Body2,Body3,To_replace,Replace_with) :-get_lang_word("n",Dbw_n),get_lang_word("not",Dbw_not),        Body1=[[[Dbw_n,Dbw_not],Statement]|Statements2 %% [] removed from Statement        ],  %Number1a is Number1+1,        replace_pred_names([Statement],[],Body4,To_replace,Replace_with),        replace_pred_names(Statements2,[],Body3a,To_replace,Replace_with),                  append(Body2,[[[Dbw_n,Dbw_not]|Body4]|Body3a],Body3),  %append([Number1,%%*,  %[n,not]],Body3,Body5),  %append([Body5],Body4     %   ,Body2),!.
%/*        replace_vars(Body1,Body2,Body3,Var_index1,Var_index2,Var_table1,Var_table2) :-get_lang_word("n",Dbw_n),get_lang_word("not",Dbw_not),        Body1=[[[Dbw_n,Dbw_not],Statement]|Statements2 %% [] removed from Statement        ],  %Number1a is Number1+1,        replace_vars([Statement],[],Body4,Var_index1,Var_index3,Var_table1,Var_table3),        replace_vars(Statements2,[],Body3a,Var_index3,Var_index2,Var_table3,Var_table2),  append(Body2,[[[Dbw_n,Dbw_not]|Body4]|Body3a],Body3), !.
%/*%*/ro([r,_]).ro([o,_]).rnd(A):-ro(A).rnd([nd,_]).
%?- test(1,Q,F,R),query_box(Q,Query1,Functions,Functions1),convert_to_grammar_part1(Functions1,[],Functions2,_),add_line_numbers_to_algorithm1(Functions2,Functions2a),find_pred_numbers(Functions2a,[]                                          ,Pred_numbers),retractall(pred_numbers(_)),assertz(pred_numbers(Pred_numbers)),find_state_machine1(Functions2a,Functions3,Pred_numbers),writeln(Functions2),sm_to_lp(Functions3,Functions4),writeln(Functions4).
%N=1,M=u,texttobr2(N,u,J2,M,false,false,false,false,false,false),%N=1,M=u,texttobr(N,u,J2,M).
%assertz(A),interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_retractall],[[[Dbw_n, Var], [In]]]],Vars1,Vars1,true,nocut) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("retractall",Dbw_retractall1),Dbw_retractall1=Dbw_retractall,%assertz(Var(In))debug_call(Skip,[[Dbw_n,Dbw_retractall],[[[Dbw_n, Var], [In]]]]),functor(A,Var,1),arg(1,A,In),retractall(A),debug_exit(Skip,[[Dbw_n,Dbw_retractall],[[[Dbw_n, Var], [In]]]]),!.
%br(Words,BrDict3,BrDict2,AlgDict41,AlgDict5,AlgDict61,AlgDict7,AlgString5,AlgString2).
%curly_head_taila(T,H,Ta),%,append(List1,T,List2),%!.
%dfs_post_order(N1,Functions2a,[],Ordered_pred_nums1,[],_All1).
%find_first_pred(Dep99,H%File,Dep99_name,Dep99_arity%) :-%read_main_file(Dep99,G),%findall1([B,C],member([_,B,C],G),H),!.
%find_spanning_rows(Model_question_table,SR) :-%find_data2(Q_Table,Model_question_table,Model_question_table2,Answer_table) :-%Model_question_table=[Row|Rows],calculate(Answer_table,Answer) :-% * if [calculate,_] around function then print value not formatted functionfindall(A,(member(Table,Answer_table),findall(B,(member(Row,Table),findall(C,(member(Cell,Row),/*((Cell=[[function,_,_,FEC1,F21],[function,_,_,FEC2,F22]]calc_form([[function,_,_,FEC1,F21],[function,_,_,FEC2,F22]],C))->true;((Cell=[function,_,_,FEC1,F21],calc_form([function,_,_,FEC1,F21],C))->true;*/(Cell=[value,_]->C=Cell;(string(Cell)->C=Cell;%fail%term_to_atom(Cell,C)calc_form2(Cell,C)))),B)),A)),Answer),!.
%mind_read(R,[]) :-%R=[[_,['C']]].
%mind_read(R,[]) :-%R=[[_,['C']]]./**mind_read(Item,List0) :-random_member(Item,List0).
%newlines1(X3) --> newlines0(X),newlines1(X2),{append(X,X2,X3)},!.
%order_preds_bottom_up1_post_order_dfs(1,Functions2a,[],Ordered_pred_nums0),%trace, find_deps(N1,Functions2a,Ordered_pred_nums1).
%order_preds_bottom_up1_post_order_dfs(1,Functions2a,[],Ordered_pred_nums0),%trace,order_preds_bottom_up1_post_order_dfs(_L1,[N],Functions2a,[],Ordered_pred_nums01,[N]),(Ordered_pred_nums01=[Ordered_pred_nums02]->true;Ordered_pred_nums01=Ordered_pred_nums02),%flatten_except_loops1(Ordered_pred_nums02,Ordered_pred_nums0),Ordered_pred_nums02=Ordered_pred_nums0,%foldr(append,Ordered_pred_nums01,Ordered_pred_nums0),/*% find min, maxfindall1(L,member([L,_]),L1),sort(L1,L2),append([Min_L],Rest,L2),append(_,[Max_L],Rest),*/% find_groups([0, [1, 2, [loop, 1]]], [0], A).
%order_preds_bottom_up1_post_order_dfs(_L1,[N],Functions2a,[],Ordered_pred_nums01,[N]).
%replace1([],"AbCdBcD","bC","Bc",B).
%replace_in_terms0(M,T,L) :-replace_in_terms([],L,L) :- !.replace_in_terms(MT1,L1,L2) :- MT1=[[MT3,MT5]|MT4], replace_in_terms2(MT3,MT5,L1,L3), replace_in_terms(MT4,L3,L2).
**/%%% *** START%%x(5). %% 2%%y(9). %% 2x(5).y(9).
**/:-include('../../Lucian-Academy/folders.pl').
**/test(106,[[n,call1a],[[v,b],[1,11,111]]],[        [[n,call1a],[[v,b],[v,a]],":-",        [       [[n,call],[[n,member2a],[[v,b],[v,a]]]]]        ],                [[n,member2a],[[v,b],[v,a]],":-",        [       [[n,member],[[v,b],[v,a]]],[[n,cut]]]        ]        ],[[[[v,b],1]]]).
*/:-include('uncompile_list.pl').
/*pft_expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),%Data1=[Data2Data3|Data41],%not(Data2Data3=[T,_]),not(Data1=[T,_]),%trace,curly_head_taila(Data1,Data2,Data3),%trace,pft_expand_types1(Data2,[],Types3),pft_expand_types1(Data3,Types3,Types4),Types5=[[[T,Dbw_list],Types4]],%trace,%findall(Types61,(member(Data4,Data41),%pft_expand_types1(Data4,[],Types6),%),Types62),%foldr(append,Types62,Types6),append_list3([Types1,%Types5,Types5],Types2),!.
/*simplify_by_replacing1([V4,Val],V5,[],V6),simplify_by_replacing1([V1,Val],[],V,V) :- !.
/*A5=[[v,1],[v,2]],sub_term_wa([v,_],A5,A),findall([Ad,[v,A1]],(member([Ad,[v,A2]],A),A1 is A2+1),A3),foldr(put_sub_term_wa_ae,A3,A5,A4).
/*closer(0,0,0,1,2,0).                                                         true.closer(0,0,0,1,0.2,0).false.*/closer(X1,Y1,X2,Y2,X3,Y3) :- D1 is sqrt((X2-X1)^2+(Y2-Y1)^2), D2 is sqrt((X3-X1)^2+(Y3-Y1)^2), D1 < D2. % 11.    I prepared to experience the art forms of God (the master).  I did this by trusting God (the master).  First, I trusted the art of the master.  Second, I trusted the music of the master.  Third, I trusted the architecture of the master.  In this way, I prepared to experience the art forms of God (the master) by trusting God (the master).
/*memberlp2p1(Functions2,Algorithm1,Algorithm2) :-        forall(member(A,Functions2),A=[_=_]),                %interpretstatementlp2p2a(Function,Algorithm1,Algorithm3a,"[]"),%                string_concat(Algorithm3a,"(",Algorithm3d),        interpretstatementlp2p2b(Functions2,Algorithm1,Algorithm2a,"[]"),        write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
/*nng([[A,B]],%V2, _,TG1,TG2) :- append(TG1,[[A,B]],TG2),%V2=[], !.*/ nng(Values,%Values3, Index,TG1,TG1) :- findall(V,member([V,Index],Values),V2), delete(Values,[_,Index],[]), %append(TG1,[V2],TG2), !.
/*only_ssi_test(3,[[n,older_brother],[[v,result6]]], %% trying to get working with ssi[[[n,parent],[albert, jim]],[[n,parent],[albert, peter]],[[n,parent],[jim, brian]],[[n,parent],[john, darren]],[[n,parent],[peter, lee]],[[n,parent],[peter, sandra]],[[n,parent],[peter, james]],[[n,parent],[peter, kate]],[[n,parent],[peter, kyle]],[[n,parent],[brian, jenny]],[[n,parent],[irene, jim]],[[n,parent],[irene, peter]],[[n,parent],[pat, brian]],[[n,parent],[pat, darren]],[[n,parent],[amanda, jenny]],[[n,older_brother],[[v,c]],":-",[[[n,findall],[[[v,a],[v,b]],[[[n,siblings],[[v,a],[v,b]]],[[n,male],[[v,a]]],[[n,older],[[v,a],[v,b]]]],[v,c]]]]],[[n,siblings],[[v,a],[v,b]],":-",[[[n,parent],[[v,x],[v,a]]],[[n,parent],[[v,x],[v,b]]],[[n,not],[[[n,=],[[v,a],[v,b]]]]]]],[[n,male],[albert]],[[n,male],[jim]],[[n,male],[peter]],[[n,male],[brian]],[[n,male],[john]],[[n,male],[darren]],[[n,male],[james]],[[n,male],[kyle]],[[n,yearofbirth],[irene,1923]],[[n,yearofbirth],[pat,1954]],[[n,yearofbirth],[lee,1970]],[[n,yearofbirth],[sandra,1973]],[[n,yearofbirth],[jenny,2004]],[[n,yearofbirth],[amanda,1979]],[[n,yearofbirth],[albert,1926]],[[n,yearofbirth],[jim,1949]],[[n,yearofbirth],[peter,1945]],[[n,yearofbirth],[brian,1974]],[[n,yearofbirth],[john,1955]],[[n,yearofbirth],[darren,1976]],[[n,yearofbirth],[james,1969]],[[n,yearofbirth],[kate,1975]],[[n,yearofbirth],[kyle,1976]],[[n,older],[[v,a],[v,b]],":-",[[[n,yearofbirth],[[v,a],[v,y1]]],[[n,yearofbirth],[[v,b],[v,y2]]],[[n,>],[[v,y2],[v,y1]]]]],[[n,family_test],":-",[[[n,older_brother],[[v,result6]]],[[n,writeln],[[v,result6]]]]]],[[[[v,result6],[[peter, jim], [james, lee], [james, sandra], [james, kate], [james, kyle], [peter, jim], [brian, darren]]]]]).
/*see lpi test 15 for swipl call with enough memory for test 15numbers(194,1,[],N),findall(N1,(member(N1,N),test(N1,Q,F,R),catch(call_with_time_limit(4,lucianpl(off,Q,F,R)),_,false),writeln(N1)),N2),sort(N2,N3),writeln(N3),length(N3,L),subtract(N,N3,U),writeln(U).
/*ssi(Debug,Query,Functions1,Result) :-%load_lang_db, % * check this is done once for whole ssiretractall(debug(_)), assertz(debug(Debug)),convert_to_grammar_part1(Functions1,[],Functions2,_),add_line_numbers_to_algorithm1(Functions2,Functions2a),%%writeln1(Functions2a),find_pred_sm(Reserved_words1),%,"en"),find_pred_numbers(Functions2a,Reserved_words,Pred_numbers),find_state_machine1(Functions2a,Functions3,Pred_numbers),%%writeln1(Functions3),prep_predicate_call(Query,Functions3,All_predicate_numbers),ssi1([1,1,"predicate",Query,[],All_predicate_numbers],Functions3,[],Result,[],_Choice_point_trail).
/**updatetrans(Tokens3,Translation1,Translation2),updatefile(CttOrig1Orig212,File1).
/**% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Two Uses 9 of 30.txt",0,algorithms,"90.ALEXIS: *What is one use that this program verifies?"]test_types_cases(41,[[n,io],["+",[v,a2],[v,a3]]],        [[[n,io],[[t,string],[[t,list],[[t,item]]],        [[t,list],[[t,item]]]]],        [[t,item],[[t,number]]],        [[t,item],[[t,string]]]],        [[[n,io],[input,output,output]]],[        [[n,io],["+",[v,water],[v,gear],[v,run]],":-",        [       [[n,=],[[v,stretches],"true"]],                [[n,=],[[v,water],"true"]],                [[n,=],[[v,gear],"true"]],                [[n,=],[[v,run],"true"]]        ]]        [[n,run_checklist],[[v,stretches],[v,water],[v,gear],[v,run]],":-",        [       [[n,=],[[v,stretches],"true"]],                [[n,=],[[v,water],"true"]],                [[n,=],[[v,gear],"true"]],                [[n,=],[[v,run],"true"]]        ]]        [[n,io],["+",[1,1],[2]]],        [[n,io],["-",[1,1],[0]]]],[[[[v,a2],[1,1]],[[v,a3],[2]]]]).
/**cawptest2(1,add0,[[[n,+],2,1%% Modes=2 inputs, 1 output]],2,2,%% MaxPredicates is not the number of predicates in the result, it is the number of non-dictionary predicates in the result.
/**lppm_upload(User1,Repository1,Description1,Dependencies1) :-%%lppm_get_manifest(User1,Repository1,Data1),%%lppm_get_registry1(LPPM_registry_term1),IP_Port=%%"x.x.x.x:8001","127.0.0.1:8001",concat_list(["curl -X POST -F \"user='",User1,"'\" http://",IP_Port,"/landing"],Command1),%%  %%-F \"repository='",Repository1,"'\" -F \"description='",Description1,"'\" -F \"dependencies='",Dependencies1,"'\" catch(bash_command(Command1,_), _, (concat_list(["Error: Can't upload entry for ",User1,"/",Repository1," repository on GitHub to Registry."],Text1),writeln1(Text1),abort)), concat_list(["Upload successful.  You can check your repository is listed at http://",IP_Port,"/registry."],Text2), writeln1(Text2),!.
/**tryoutputs([Item1],List2,Item2) :-Item1=[Original,BT1],((BT1="",member([Original,BT2],List2),Item2=[Original,BT2]);(member(Item1,List2),Item2=Item1))%%,Item1=[Item2,_Output],!.
/**critique(String00,String01,Reasons_per_paragraph,Numbers,Critique).
:- http_handler('/landing2', landing_pad2, []).      landing_pad2(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),%%writeln1(Data)%%lp(Data):-Data=[name=Name1,email=Email1,submit=_],string_atom(Name2,Name1),string_atom(Email2,Email1),phrase_from_file_s(string(String00a), "student_numbers1.txt"),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),(member([Name3,Email2,Student_number3],String02a)->(concat_list(["The email address \"",Email2,"\" for \"",Name3,"\" has the student number \"",Student_number3,"\"."],String_a),writeln(String_a));(length(String02a,Length),Student_number3 is Length+1,append(String02a,[[Name2,Email2,Student_number3]],String02a_a),term_to_atom(String02a_a,String02a_b),string_atom(String02a_c,String02a_b),(open_s("student_numbers1.txt",write,Stream1),%%string_codes(BrDict3),write(Stream1,String02a_c),close(Stream1)),!,concat_list(["The email address \"",Email2,"\" for \"",Name2,"\" has the student number \"",Student_number3,"\"."],String_a),writeln(String_a))).
:- http_handler('/move', move, []).move(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),%format(Data,[])        %/*%writeln1(Data)%/*Data=[%%debug='off',%%Debug1,text1=From,text2=To,text01=Path,submit=_],%term_to_atom(From,Text1),%term_to_atom(To,Text2),%term_to_atom(Path,Text01),%Mv="rsync -avz --remove-source-files ",Mv="mv ",concat_list([Mv,From," ",To],Command),shell1_s(Command),file_browser(Path).:- http_handler('/copy', copy, []).
:- include('../listprologinterpreter/listprolog.pl').
:- include('GitHub/Philosophy/philosophy/word_count.pl').
:-include('../listprologinterpreter/la_strings.pl').
[debug]  ?- trace,                                                              delete_cp([[1,2,a],[2,3,b],[3,4,c]],[2,3,b],A,                                  [[curr_cp_index,4],[min_cp,1],[max_cp,4],[curr_cp,3]],V).
[trace]  ?- trace,                                                              delete_cp([[1,2,a],[2,3,b],[3,4,c]],[3,4,c],A,                                  [[curr_cp_index,4],[min_cp,1],[max_cp,4],[curr_cp,3]],V).
a_to_m2(N1,Functions1,Pred_numbers,Ordered_pred_nums1) :-%trace,%find pred nums in sm (done)% find occurrence of pred calls in preds regardless of clause, for finding modes in bottom-up order% find order in terms of pred name, arity% x modify find_pred_numbersfind_pred_numbers_dependencies(Functions1,[],Functions2a,Pred_numbers),%N=0,%member([N,P],Functions2a),%delete(Functions2a,[N,P],F),% order_preds_bottom_up1_post_order_dfs(_L1,[N],Functions2a,[N],Ordered_pred_nums0,[N]),% Ordered_pred_nums0=[0, [1, 2, [loop, 1]]]% In test 7, query box (predicate 0) and predicate 1 are called, where predicate 1 calls predicate 2 and itself.
add_line_numbers_to_algorithm_body2(Body1,Body2,Number1,Number2) :-Body1=[Statement|Statements],not(predicate_or_rule_name(Statement)),add_line_numbers_to_algorithm_statement1(Statement,Result1,Number1,Number3),add_line_numbers_to_algorithm_body2(Statements,Result2,Number3,Number2),   append_list2([Result1,Result2],Body2),!.
add_line_numbers_to_algorithm_body2(Body1,Body2,Number1,Number2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        Body1=[[[Dbw_n,"->"],[Statements1,Statements2]]|Statements3],  Number1a is Number1+1,        add_line_numbers_to_algorithm_body2([Statements1],Body3,Number1a,Number3),       add_line_numbers_to_algorithm_body2([Statements2],Body4,Number3,Number4),        add_line_numbers_to_algorithm_body2(Statements3,Body5,Number4,Number2),        append(Body3,Body4,Body34),        Body6=[Number1,[Dbw_n,"->"],Body34        ],        append([Body6],Body5,Body2),        !.
alg_gen3([],Alg_gen_dict1,Alg_gen_dict1, Alg_gen_dict2,Alg_gen_dict2, Alg_gen_dict3,Alg_gen_dict3) :- !.
append_cp(List1,CP,List5a,CP_Vars1,CP_Vars2) :-%writeln1(append_cp(List1,CP,List5a,CP_Vars1,CP_Vars2)),%trace,%(writeln("y to trace"),(get_char(y)->trace;true)),%trace,get(curr_cp,Curr_cp,CP_Vars1),%writeln([curr_cp,Curr_cp]),(debug4(on)->writeln1(append_cp(List1,CP,List5a,CP_Vars1,CP_Vars2));true),(append_cp1(List1,CP,List5a,CP_Vars1,CP_Vars2)->true;(writeln0([append_cp,abort]),abort)),%writeln1(append_cp(List1,CP,List5a)),get(curr_cp,Curr_cp1,CP_Vars2),%writeln([curr_cp,Curr_cp1]),(debug4(on)->writeln0([append_cp,curr_cp,Curr_cp,Curr_cp1,List5a,CP_Vars1,CP_Vars2]);true).
append_list(A1,B):-A1=[A|List],append_list(A,List,B),!.
append_list(A1,B):-A1=[A|List],append_list(A,List,B),!.append_list(A,[],A):-!.
appendlogic(F,%%Name,Formula2) :-%%writeln([f,F]),%%atom(Formula1), append([],[not,F],Formula2).
back_translate_and_check(Ctt_input0,Ctt_orig1_orig2_11,% or ctinputFrom_lang,To_lang,Translation3) :-translate_ctt2(Ctt_orig1_orig2_11,% or ctinputFrom_lang,To_lang,Translation31),translate_ctt2(Translation31,% or ctinputTo_lang,From_lang,Ctt_orig1_orig2_12),((Ctt_orig1_orig2_11=Ctt_orig1_orig2_12)->Translation3=Translation31;(concat_list(["\n","Are the following sentences:\n- grammatical\n- have the same meaning as the other in the pair, and\n- have the same meaning as the original sentence (y/n)?\n\n","Original:","\t",Ctt_input0,"\n\n","\t\t",Ctt_orig1_orig2_11,"\n\t\t",Ctt_orig1_orig2_12],Note1),writeln(Note1),read_string(user_input,"\n\r","\n\r",_,YN),%repeat,%trace,(YN="n"->fail;Translation3=Translation31))),!.insertdoublebackslashbeforequote(Input1,Input) :-string_codes(Input1,Input2),insertdoublebackslashbeforequote1(Input2,[],Input3),string_codes(Input,Input3).
br_gen2(File_string0,Raw,Chains) :- downcase_atom(File_string0,File_string1), SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'\"0123456789", split_string(File_string1,SepandPad,SepandPad,File_string2),  % truncate file to N words Truncate_length=100, length(File_string2,L3), length(File_string2b,Truncate_length), (L3=<Truncate_length->File_string2=File_string2a; (append(File_string2b,_,File_string2),File_string2b=File_string2a)),  % delete connectives such as and, theopen_file_s("connectives.txt",Connectives),subtract(File_string2a,Connectives,Words1),% finds adjacent combos of wordslength(Words1,L1),L2 is L1-1,numbers(L2,1,[],N),findall([A,B],(member(N1,N),N2 is N1+1,get_item_n(Words1,N1,A),get_item_n(Words1,N2,B)),Words2),% finds suggestions for new combos of words, eg a b, a c and d c->d bsort(Words2,Words3),%trace,findall([F1,K1],(member([A,B],Words3),findall(E1,(member([A,C],Words3),findall([D,B],member([D,C],Words3),E),%foldr(append,E,[],E1)E=E1),F),foldr(append,F,[],F1),findall(J1,(member([G,B],Words3),findall([A,H],member([G,H],Words3),J),%foldr(append,J,[],J1)J=J1),K),foldr(append,K,[],K1)),L),%trace,% makes this a list of A,Bfoldr(append,L,[],LL1),foldr(append,LL1,[],Words4),%LL1=L,%maplist(append,[LL2],[Words4]),% remove duplicatessort(Words4,Words4b),%trace,% removes pairs with two of the same wordfindall([A,B],(member([A,B],Words4b),not(A=B)),Words4a),% removes word pairs already at startsubtract(Words4a,Words3,Raw),% find chainsfindall([A,B,C],(member([A,B],Raw),member([B,C],Raw),not(A=C)),Chains).
bt-lp2sm_test(BL,RL) :-findall(A,(lp2sm_test(N,I,O),((sm_to_lp(O,I2),I2=I)->(writeln([bt-lp2sm_test,N,passed]),A=passed);(writeln([bt-lp2sm_test,N,failed]),A=failed))),B),length(B,BL),findall(_,member(passed,B),R),length(R,RL),!.bt-lp2sm_test1(N,A) :-lp2sm_test(N,I,O),((sm_to_lp(O,I2),I=I2)->(writeln([bt-lp2sm_test,N,passed]),A=passed);(writeln([bt-lp2sm_test,N,failed]),A=failed)),!.
caw(_,_,_,0,_,_,_,_,_,_,_,_,Ps,Ps) :- !.
caw(_,_,_,0,_,_,_,_,_,_,_,_,Ps,Ps) :- !.caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program2,Programs1,Programs2) :-MaxLength2 is MaxLength - 1,addrules(InputVars2,OutputVars,OutputVars,[],_PenultimateVars,[],Program3),%%writeln([addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3)]),%%optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4), %% IV2->3%%writeln([optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4)]),append(Program1,Program3,Program5),append(InputVars1,OutputVars,Vars2),Program2=[        [PredicateName,Vars2,":-",                Program5        ]        ],debug(Debug),%%***%% () choose iv1 as args during caw, () eliminate e problem, could move forward in optimiser but don't need it v%% should have a leading edge of 1 immediately previous (new output) as an arg in latest rule v, go backwards to choose latest possible args x, 3 x rules can have same as previous rule's output as an output x: at a time%% chunks will solve having at least 1 rule that connects to last output%% can optimise number of inputs%% test member, = in caw%%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),interpret(Debug,Query,Program2,OutputVarList2),%%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),append(Programs1,[[Query,Program2,OutputVarList2]],Programs3),cawa(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program2,Programs3,Programs2),!.
caw00(Debug,PredicateName,Rules,MaxLength,TotalVars,_InputVarList,_OutputVarList,Program1,_Program2,Ps1) :-repeat,%%MaxLength2 is MaxLength + 1,%%TotalVars = MaxLength,randvars(MaxLength,MaxLength,[],RandVars),populatevars(RandVars,MaxLength,[],PV),Code is MaxLength + 1 + 97,char_code(Char,Code),OutputVarList=[[[v,Char],1]],retractall(debug(_)),    assertz(debug(Debug)),retractall(totalvars(_)),    assertz(totalvars(TotalVars)),caw0(PredicateName,Rules,MaxLength,PV,OutputVarList,Program1,_Program3,Ps),sort(Ps,Ps1),not(Ps1=[]),!.
caw4b(VarLists02,VarLists03,Algorithms,New_rule_number2,MaxPredicates,New_rule_number1,Program1,RuleName,NumInputs1,NumOutputs1,InputVars2,InputVars4,VarList,VarList2,OutputVars,Rule,Algorithms2,Rules2) :-%%writeln1(append(Rules,[[RuleName,NumInputs0,NumOutputs0]],Rules2)),%%MaxPredicates2 is MaxPredicates-1,maxlength(MaxLength3),%%writeln(    caw01(VarLists02,Algorithms,New_rule_number1,New_rule_number2,Rules2,MaxLength3,MaxPredicates,New_rule_number1,[],Program2)),    %%writeln(here3),    %%trace,    %%writeln(    RuleName=[_,RuleName1]),    RuleName=[_,RuleName1],caw01(VarLists02,VarLists03,Algorithms,%%New_rule_number1    RuleName1,Rules2,MaxLength3,MaxPredicates,New_rule_number1,New_rule_number2,[],Program2,_Program12), %% *** VarLists02         %%writeln(here4),%%to [VarLists02]%%Program2=[[[[n,1],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,d]]],[[n,=],[[v,d],[v,c]]]]]]],%%writeln([caw01,Program2]),%%trace,rule(Program1,RuleName,NumInputs1,NumOutputs1,InputVars2,InputVars4,VarList,VarList2,OutputVars,Rule),%%trace,%%writeln(["2*",append(Program2,Algorithms,Algorithms2)]), %% *** swapped a,p2%%[Program2a]=Program2,%%not(member(Program2a,Algorithms)),%append(Program2,Algorithms,Algorithms2) %% *** swapped a,p2Program2=Algorithms2.
cawa(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4,Ps1,Ps2) :-%%writeln([caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,OutputVarList,OutputVars,Program1,Program4)]),%%MaxLength2 is MaxLength - 1,%%writeln(["ml",MaxLength2]),random1(N0), N1 is N0/100, length(Rules,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,Rules),List2=[[RuleName,NumInputs,NumOutputs]|_Rest]);fail),%%writeln([member([RuleName,NumInputs,NumOutputs],Rules)]),%%writeln([rule(RuleName,NumInputs,NumOutputs,VarList,VarList2,Rule)]),rule(RuleName,NumInputs,NumOutputs,InputVars2,InputVars4,VarList,VarList2,Rule),%%writeln([inputVars1,InputVars1]),%%writeln([rule(RuleName,NumInputs,NumOutputs,InputVars2,InputVars4,VarList,VarList2,Rule)]),append(Program1,[Rule],Program3),%%writeln([inputVars3,InputVars3]),%%InputVars2=InputVars3,%%writeln([program4,Program4]),caw(Query,PredicateName,Rules,MaxLength,VarList2,InputVars1,InputVars4,InputVars3,OutputVarList,OutputVars,Program3,Program4,Ps1,Ps2), !.
cawa(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4,Ps1,Ps2) :-%%writeln([caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,OutputVarList,OutputVars,Program1,Program4)]),%%MaxLength2 is MaxLength - 1,%%writeln(["ml",MaxLength2]),random_member([RuleName,NumInputs,NumOutputs],Rules),%%writeln([member([RuleName,NumInputs,NumOutputs],Rules)]),%%writeln([rule(RuleName,NumInputs,NumOutputs,VarList,VarList2,Rule)]),rule(RuleName,NumInputs,NumOutputs,InputVars2,InputVars4,VarList,VarList2,Rule),%%writeln([inputVars1,InputVars1]),%%writeln([rule(RuleName,NumInputs,NumOutputs,InputVars2,InputVars4,VarList,VarList2,Rule)]),append(Program1,[Rule],Program3),%%writeln([inputVars3,InputVars3]),%%InputVars2=InputVars3,%%writeln([program4,Program4]),caw(Query,PredicateName,Rules,MaxLength,VarList2,InputVars1,InputVars4,InputVars3,OutputVarList,OutputVars,Program3,Program4,Ps1,Ps2), !.
cawptest2(5,add0,[[[n,+],2,1]],1,1,4,% 3 x 5 %% 2,2,3[2],[1],[    [[[[[v,a],1],[[v,b],1]],[[[v,c],2]],true]]%%  [[[[[v,a],1]],[[[v,b],2]],true]],%%  [[[[[v,a],1],[[v,b],1]],[[v,c],2],true]]],[ %% Algorithm dictionary],[ %% Result        [[n,add0],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,d]]],                [[n,=],[[v,d],[v,c]]]]]]).
cawptest2(5,add0,[[[n,+],2,1]],1,1,4,% 3 x 5 %% 2,2,3[2],[1],[    [[[[[v,a],1],[[v,b],1]],[[[v,c],2]],true]]%%  [[[[[v,a],1]],[[[v,b],2]],true]],%%  [[[[[v,a],1],[[v,b],1]],[[v,c],2],true]]],[ %% Algorithm dictionary],[ %% Result        [[n,add0],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,d]]],                [[n,=],[[v,d],[v,c]]]]]]).%%%%*****cawptest2(6,function3,[],2,1,4,[2],[1],[[[[[[v,a],1],[[v,b],1]],[[[v,c],2]],true],[[[[v,a],1],[[v,b],2]],[[[v,c],3]],true],[[[[v,a],1],[[v,b],1]],[[[v,c],1]],fail],[[[[v,a],1],[[v,b],1]],[[[v,c],3]],fail]]],[ %% Algorithm dictionary[[[n,function1],2,1],[[v,a],[v,b],[v,c]],":-", [[[n,+],[[v,a],[v,b],[v,c]]]]]],[ %% Result[[n,function1],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,c]]]]],[[n,function3],[[v,a],[v,b],[v,c]],":-",[[[n,function1],[[v,a],[v,b],[v,d]]],[[n,=],[[v,d],[v,c]]]]]]).
characterbr1([['A',uppera,[[1,9,[     ]],[2,9,[     ]],[3,9,[1,3  ]],[4,9,[     ]],[5,9,[     ]], [1,8,[     ]],[2,8,[     ]],[3,8,[     ]],[4,8,[     ]],[5,8,[     ]], [1,7,[     ]],[2,7,[     ]],[3,7,[     ]],[4,7,[     ]],[5,7,[     ]], [1,6,[     ]],[2,6,[     ]],[3,6,[     ]],[4,6,[     ]],[5,6,[     ]], [1,5,[     ]],[2,5,[5    ]],[3,5,[     ]],[4,5,[6    ]],[5,5,[     ]], [1,4,[     ]],[2,4,[     ]],[3,4,[     ]],[4,4,[     ]],[5,4,[     ]], [1,3,[2,s  ]],[2,3,[     ]],[3,3,[     ]],[4,3,[     ]],[5,3,[4,s  ]], [1,2,[     ]],[2,2,[     ]],[3,2,[     ]],[4,2,[     ]],[5,2,[     ]], [1,1,[     ]],[2,1,[     ]],[3,1,[     ]],[4,1,[     ]],[5,1,[     ]]]]]).  prettyprint_scale1(_C,0) :- !.prettyprint_scale1(C,N) :-prettyprint_scale2(C,N,1),writeln(''),N2 is N-1,prettyprint_scale1(C,N2).prettyprint_scale2(_C,_N,X1) :- x1(X), X1 is X+1, !.prettyprint_scale2(C,N,M) :-member([M,N,M2],C),write(M2),write('\t'),M3 is M+1,prettyprint_scale2(C,N,M3).prettyprint_scale1A(_C,0) :- !.prettyprint_scale1A(C,N) :-prettyprint_scale2A(C,N,1),writeln(''),N2 is N-1,prettyprint_scale1A(C,N2).
check_grammar(Strings0,A0) :-term_to_atom(Strings0,Strings),lp2p1(A0,A),foldr(string_concat,[%"#!/usr/bin/swipl -g main -q\n\n",":-include('flatten_keep_brackets.pl').\n","handle_error(_Err):-\n  halt(1).\n","check_grammar(R) :-\n    catch((findall(_,(member(S,",Strings,"),term_to_atom(S2,S),flatten_keep_brackets(S2,S1),append([_],S4,S1),append(S3,[_],S4),once(phrase(a1,S3))),A),((length(",Strings,",L),length(A,L))->R=\"success\";R=\"fail\")),_, fail),\n  !.\n"%,"main :- halt(1).\n",A],String_pp0_3),foldr(string_concat,[%"../private2/luciancicd-testing/",Repository1b,"/",Go_path5,"tmp.pl"],GP_pp0_3),%string_concat(Go_path,"testcicd.pl",GP),open_s(GP_pp0_3,write,S1_pp0_3),write(S1_pp0_3,String_pp0_3),close(S1_pp0_3),consult('tmp.pl'),check_grammar(Result),/*foldr(string_concat,["chmod +x ",GP_pp0_3,"\n","swipl -g main -q ./",GP_pp0_3],S3_pp0_3),%,trace,((catch(bash_command(S3_pp0_3,T502), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_),%writeln1(Text4),fail)))),%abort*/(Result="success"->true;fail),!.
checkarguments2([],[],Vars,Vars,FirstArgs,FirstArgs) :- !. /*checkarguments2(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%%%writeln1(1),%trace,Arguments1=[Value|Arguments3], %% Value may be a number, string, list or tree%expressionnotatom3(Value),Arguments2=[Variable2|Arguments4],%trace,(Value=[_,'_']->true;Variable2=[_,'_']),%not(var(Variable2)),isvar(Variable2),%((Value=[_,'_']->true;Variable2=[_,'_'])->%Vars1=Vars3;%(%get_lang_word("v",Dbw_v),putvalue(Variable2,undef,%[Dbw_v,'_'],Vars1,Vars3),%)),checkarguments2(Arguments3,Arguments4,Vars3,Vars2,FirstArgs1,FirstArgs2),!.checkarguments2(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%%%writeln1(1),trace,Arguments1=[Value|Arguments3], %% Value may be a number, string, list or tree%expressionnotatom3(Value),Arguments2=[Variable2|Arguments4],%trace,(Value=undef->true;Variable2=undef),%not(var(Variable2)),isvar(Variable2),%((Value=[_,'_']->true;Variable2=[_,'_'])->%Vars1=Vars3;%(%get_lang_word("v",Dbw_v),Vars1=Vars3,%putvalue(Variable2,undef,%[Dbw_v,'_'],%Vars1,Vars3),%)),checkarguments2(Arguments3,Arguments4,Vars3,Vars2,FirstArgs1,FirstArgs2),!.*/checkarguments2(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%%%writeln1(1),%trace,Arguments1=[Value|Arguments3], %% Value may be a number, string, list or treeexpressionnotatom3(Value),Arguments2=[Variable2|Arguments4],not(var(Variable2)),isvar(Variable2),%((Value=[_,'_']->true;Variable2=[_,'_'])->%Vars1=Vars3;%(putvalue(Variable2,Value,Vars1,Vars3),%)),checkarguments2(Arguments3,Arguments4,Vars3,Vars2,FirstArgs1,FirstArgs2),!.
checktypes(Function,Vars1):-%%,TypeStatements1) :-%%writeln(checktypes(Function,Vars1)),(types(on)->(typestatements(TypeStatements1),checktypes0(Function,Vars1,TypeStatements1));true),!.checktypes0(Function,Vars1,_TypeStatements1) :- get_lang_word("Type check",Type_check),length(Vars1,L),L is 0,Vars1=[],(types(on)->(debug_types_call([Function,/,L,Type_check]));true),(types(on)->debug_call(Skip,[Function,Vars1]);true),(types(on)->debug_exit(Skip,[Function,Vars1]);true),(types(on)->(debug_types_exit([Function,/,L,Type_check]));true),!.
checktypes(Function,Vars1):-%%,TypeStatements1) :-%%writeln(checktypes(Function,Vars1)),get_lang_word("n",Dbw_n),get_lang_word("query_box",Dbw_query_box),((types(on),Function=[Dbw_n,Dbw_query_box1],not(string_concat(Dbw_query_box,_,Dbw_query_box1)))%,notrace->(typestatements(TypeStatements1),checktypes0(Function,Vars1,TypeStatements1));true),!.
checktypes_inputs(Function,Vars1):-%%,TypeStatements1) :-%%trace,%%writeln(checktypes(Function,Vars1)),(types(on)->(typestatements(TypeStatements1),modestatements(ModeStatements1),checktypes0_inputs(Function,Vars1,TypeStatements1,ModeStatements1));true),!.
checktypes_inputs(Function,Vars1):-%%,TypeStatements1) :-%%trace,%%writeln(checktypes(Function,Vars1)),get_lang_word("n",Dbw_n),get_lang_word("query_box",Dbw_query_box),(((%trace,types(on),Function=[Dbw_n,Dbw_query_box1],not(string_concat(Dbw_query_box,_,Dbw_query_box1)))%,notrace)->(typestatements(TypeStatements1),modestatements(ModeStatements1),checktypes0_inputs(Function,Vars1,TypeStatements1,ModeStatements1));true),!.
choose_model(Connections,Models1,Pre_info1,Question1,Model) :-% most kqappend(Pre_info1,Question1,Q_data),term_to_atom(Q_data,Q_data1),downcase_atom(Q_data1,Q_data11),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string1b(Q_data11,SepandPad,SepandPad,Q_data2),findall([Count,Model],(member(Model,Models),Model=[Ad2,Q2,_A2],append(Ad2,Q2,Q_data_1),term_to_atom(Q_data_1,Q_data1_1),downcase_atom(Q_data1_1,Q_data11_1),split_string1b(Q_data11_1,SepandPad,SepandPad,Q_data2_1),findall(_,(member(Term,Q_data2),search(Q_data2_1,Term)),Count1),length(Count1,Count)),Count_model),sort(Count_model,CM2),reverse(CM2,[_,Model]),!.
choose_model(Connections,Models1,Pre_info1,Question1,Model) :-% most kqappend(Pre_info1,Question1,Q_data),term_to_atom(Q_data,Q_data1),downcase_atom(Q_data1,Q_data11),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string1b(Q_data11,SepandPad,SepandPad,Q_data2),findall([Count,Model],(member(Model,Models),Model=[Ad2,Q2,_A2],append(Ad2,Q2,Q_data_1),term_to_atom(Q_data_1,Q_data1_1),downcase_atom(Q_data1_1,Q_data11_1),split_string1b(Q_data11_1,SepandPad,SepandPad,Q_data2_1),findall(_,(member(Term,Q_data2),search(Q_data2_1,Term)),Count1),length(Count1,Count)),Count_model),sort(Count_model,CM2),reverse(CM2,[_,Model]),!.span_from_headings(Q_Table,Model,Answer_table) :-% match a model vModel=[_MAd2,_MQ2,MA2],% headings have a word in common with model headingsspan_from_headings(Question_table1,MA2,Answer_table),!.
choose_model(Connections,Models1,_Pre_info1,Question1,Model) :-% most kq%append(Pre_info1,Question1,Q_data),Question1=Q_data,Q_data1=Q_data,%term_to_atom(Q_data,Q_data1),downcase_atom(Q_data1,Q_data11),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string1b(Q_data11,SepandPad,SepandPad,Q_data2),delete(Q_data2,"",Q_data20),subtract(Q_data20,Connections,Q_data21),findall([Count,Model],(member(Model,Models1),Model=[Ad2,Q2,_A2],append(Ad2,Q2,Q_data_1),term_to_atom(Q_data_1,Q_data1_1),downcase_atom(Q_data1_1,Q_data11_1),split_string1b(Q_data11_1,SepandPad,SepandPad,Q_data2_1),delete(Q_data2_1,"",Q_data2_10),subtract(Q_data2_10,Connections,Q_data2_11),findall(Count,(member(Term,Q_data21),search(Q_data2_11,Term)),Count1),length(Count1,Count)),Count_model),sort(Count_model,CM2),reverse(CM2,[[_,Model]|_]),!.
choose_vars(RS5,C2,Var,Ad1,U5,In31,XX24) :-%findall([Ad1,XX21],(findall([Var,XX2],(member([Var,U5],C2),member([Ad1,XX21],U5),XX2=[Ad1,XX21]),XX22),%not(XX2=[])%.
collect_arguments_body2(Body1,Body2,Body3) :-Body1=[Statement|Statements],not(predicate_or_rule_name(Statement)),collect_arguments_statement1(Statement,Body2,Body4),collect_arguments_body2(Statements,Body4,Body3),   %append_list2([Result1,Result2],Body2),   !.
comment2(X1) --> %spaces1(_),[XA],[XB], {char_code('/',XA),char_code('*',XB)},comment3(Xs), {flatten([XA,XB|Xs],X4),%foldr(append,X4,X2),string_codes(X3,X4),X1=[[[n,comment],[X3]]]},!.%comment1([]) --> [], !.comment3([XA|Xs]) --> [XA],%[XB], lookahead(XB),{not((char_code('*',XA),char_code('/',XB)))}, comment3(Xs), !.
comment2(X1) --> spaces1(_),[XA],[XB], {char_code('/',XA),char_code('*',XB)},comment3(Xs), {flatten([XA,XB|Xs],X4),%foldr(append,X4,X2),string_codes(X3,X4),X1=[[n,comment],[X3]]},!.
commentsa([L|Ls]) --> comments3(L),%%{writeln(L)}, %%***commentsa(Ls), !. commentsa([L]) --> comments3(L), %%{writeln(L)},!.
compile_list(Index, List1, Number_array1, Number_array2, String_array1, String_array2) :-List1=[Item | List2],atom(Item),/*(atom(List1)->(List1=Item,List2=[]);(List1=[Item0 | List2],atom(Item0),Item0=Item)),*/(member([String_index2,Item],String_array1)->(String_array1=String_array3%true%append(String_array1,[String_index2,Array2],Number_array4)));(string_index(String_index1),String_index2 is String_index1+1,retractall(string_index(_)),assertz(string_index(String_index2)),append(String_array1,[[String_index2,Item]],String_array3))),(member([Index,Array1],Number_array1)->(append(Array1, [3,String_index2], Array2),delete(Number_array1,[Index,_],Number_array3),append(Number_array3,[[Index,Array2]],Number_array4));(append([], [3,String_index2], Array2),%delete(Number_array1,[Index,_],Number_array2),append(Number_array1,[[Index,Array2]],Number_array4))),%compile_list(Number_index2, Item, Number_array4, Number_array5, String_array1, String_array3),compile_list(Index, List2, Number_array4, Number_array2, String_array3, String_array2).
compile_list(Index, List1, Number_array1, Number_array2, String_array1, String_array2) :-List1=[Item | List2],is_list(Item),number_index(Number_index1),Number_index2 is Number_index1+1,retractall(number_index(_)),assertz(number_index(Number_index2)),(member([Index,Array1],Number_array1)->(append(Array1, [0,Number_index2], Array2),delete(Number_array1,[Index,_],Number_array3),append(Number_array3,[[Index,Array2]],Number_array4));(append([], [0,Number_index2], Array2),%delete(Number_array1,[Index,_],Number_array2),append(Number_array1,[[Index,Array2]],Number_array4))),compile_list1(Number_index2, Item, Number_array4, Number_array5, String_array1, String_array3),compile_list(Index, List2, Number_array5, Number_array2, String_array3, String_array2).compile_list(Index, List1, Number_array1, Number_array2, String_array1, String_array2) :-List1=[Item | List2],number(Item),/*(number(List1)->(List1=Item,List2=[]);(List1=[Item0 | List2],number(Item0),Item0=Item)),*/(member([Index,Array1],Number_array1)->(append(Array1, [1,Item], Array2),delete(Number_array1,[Index,_],Number_array3),append(Number_array3,[[Index,Array2]],Number_array4));(append([], [1,Item], Array2),%delete(Number_array1,[Index,_],Number_array2),append(Number_array1,[[Index,Array2]],Number_array4))),%compile_list(Number_index2, Item, Number_array4, Number_array5, String_array1, String_array3),compile_list(Index, List2, Number_array4, Number_array2, String_array1, String_array2).
compile_list(Index, List1, Number_array1, Number_array2, String_array1, String_array2) :-List1=[Item | List2],string(Item),/*(string(List1)->(List1=Item,List2=[]);(List1=[Item0 | List2],string(Item0),Item0=Item)),*/(member([String_index2,Item],String_array1)->(String_array1=String_array3%true%append(String_array1,[String_index2,Array2],Number_array4)));(string_index(String_index1),String_index2 is String_index1+1,retractall(string_index(_)),assertz(string_index(String_index2)),append(String_array1,[[String_index2,Item]],String_array3))),(member([Index,Array1],Number_array1)->(append(Array1, [2,String_index2], Array2),delete(Number_array1,[Index,_],Number_array3),append(Number_array3,[[Index,Array2]],Number_array4));(append([], [2,String_index2], Array2),%delete(Number_array1,[Index,_],Number_array2),append(Number_array1,[[Index,Array2]],Number_array4))),%compile_list(Number_index2, Item, Number_array4, Number_array5, String_array1, String_array3),compile_list(Index, List2, Number_array4, Number_array2, String_array3, String_array2).
compile_list(Index, List1, Number_array1, Number_array2, String_array1, String_array2) :-List1=[Item0 | List2],predicate_or_rule_name(Item0),Item0=[_,Item],/*(predicate_or_rule(List1)->(List1=[_,Item],List2=[]);(List1=[Item0 | List2],predicate_or_rule(Item0),Item0=[_,Item])),*/(member([String_index2,Item],String_array1)->(String_array1=String_array3%true%append(String_array1,[String_index2,Array2],Number_array4)));(string_index(String_index1),String_index2 is String_index1+1,retractall(string_index(_)),assertz(string_index(String_index2)),append(String_array1,[[String_index2,Item]],String_array3))),(member([Index,Array1],Number_array1)->(append(Array1, [6,String_index2], Array2),delete(Number_array1,[Index,_],Number_array3),append(Number_array3,[[Index,Array2]],Number_array4));(append([], [6,String_index2], Array2),%delete(Number_array1,[Index,_],Number_array2),append(Number_array1,[[Index,Array2]],Number_array4))),%compile_list(Number_index2, Item, Number_array4, Number_array5, String_array1, String_array3),compile_list(Index, List2, Number_array4, Number_array2, String_array3, String_array2).
compile_list(_, [], Number_array, Number_array, String_array, String_array) :- !. compile_list(Index, List1, Number_array1, Number_array2, String_array1, String_array2) :-List1=[Item0 | List2],variable_name(Item0),Item0=[_,Item],/*(variable_name(List1)->(List1=[_,Item],List2=[]);(List1=[Item0 | List2],variable_name(Item0),Item0=[_,Item])),*/(member([String_index2,Item],String_array1)->(String_array1=String_array3%true%append(String_array1,[String_index2,Array2],Number_array4)));(string_index(String_index1),String_index2 is String_index1+1,retractall(string_index(_)),assertz(string_index(String_index2)),append(String_array1,[[String_index2,Item]],String_array3))),(member([Index,Array1],Number_array1)->(append(Array1, [5,String_index2], Array2),delete(Number_array1,[Index,_],Number_array3),append(Number_array3,[[Index,Array2]],Number_array4));(append([], [5,String_index2], Array2),%delete(Number_array1,[Index,_],Number_array2),append(Number_array1,[[Index,Array2]],Number_array4))),%compile_list(Number_index2, Item, Number_array4, Number_array5, String_array1, String_array3),compile_list(Index, List2, Number_array4, Number_array2, String_array3, String_array2).
compile_list1(Index, List1, Number_array1, Number_array2, String_array1, String_array2) :-%trace,List1=[],%is_list(Item),number_index(Number_index1),Number_index2 is Number_index1,retractall(number_index(_)),assertz(number_index(Number_index2)),(member([Index,Array1],Number_array1)->(append(Array1, [], Array2),delete(Number_array1,[Index,_],Number_array3),append(Number_array3,[[Index,Array2]],Number_array4));(append([], [], Array2),%delete(Number_array1,[Index,_],Number_array2),append(Number_array1,[[Index,Array2]],Number_array4))),Number_array4=Number_array2,String_array1=String_array2,!.
connector_points(_XN1,_YN1,[],Grid,Grid) :- !.
course_and_essay_topic1(Course,Essay_topic) :-course_and_essay_topic2([Courses,Essay_topics]),member(Course,Courses),member(Essay_topic,Essay_topics).
cp_since_findall_start3(Choice_point_trail1,_Level,_D1,E1,_D11,CP_Vars1,CP_Vars2) :-%trace,CP_Vars1=CP_Vars2,%trace,reverse(Choice_point_trail1,Choice_point_trail14),member_cut1([A1,A2,A_Pred_id,A_Level,A_Predicate_number,A_Line_number_a,"findall",A3|A4],Choice_point_trail14),D1=[A_Pred_id,A_Level,A_Predicate_number,A_Line_number_a,"findall",A3|A4],%writeln1(cp_since_findall_start(Choice_point_trail1,Level,D1,E1)),get_later_cps_than_cp11(Choice_point_trail1,[A1,A2,A_Pred_id,A_Level,A_Predicate_number,A_Line_number_a,"findall",A3|A4],D1,B),reverse(B,B1),%D1=[_Pred_id,Level,_Predicate_number,_Line_number_a,"findall",-|_],%member([_,_|D1],Choice_point_trail1),%[5,6,3,3,[3,"prev_pred_id",2],-1,"predicate",_12340,_12346,[[4,"prev_pred_id",2],[5,"prev_pred_id",2],[6,"prev_pred_id",2]]]member([A,B2,C,D_Level%2,[P1,"prev_pred_id",P2],-1,"predicate",H,I,All_predicate_numbers2],B1),%not(F_Line_number_a2=["returns to", _, "pred_id", _]),%not(var(H)),E1=[A,B2,C,D_Level%2,[P1,"prev_pred_id",P2],-1,"predicate",H,I,All_predicate_numbers2]/*cp_since_findall_start2(%get_last_p_before_n(B,[_,Level%2,_Predicate_number2,_Line_number_a2,Pred_or_line,_,_,All_predicate_numbers2],_,E1,CP_Vars1,CP_Vars2),*//*(Pred_or_line="line"->(All_predicate_numbers2=[_,_,_,_,_,_,Vars2c],not(Vars2c=[]));Pred_or_line="predicate"->not(All_predicate_numbers2=[]))%)*/.
cs_tree(Tree) :-SepandPad_code=" &#@~%`$?;{}\n\r\s\t",test(1,_,Code1,_),test(2,_,Code2,_),%test(3,_,Code3,_),%test(4,_,Code4,_),maplist(append,[[Code1],[Code2]%,[Code3],[Code4]],Codes),findall(String5,(member(Code,Codes),term_to_atom(Code,Atom),string_atom(String1,Atom),split_string_onnonletter_by_itself(String1,"[],()|",String2),findall(String4,(member(String3,String2),split_string(String3,SepandPad_code,SepandPad_code,String4)),String4a),maplist(append,[String4a],[String5])),String6),sort(String6,Options1),abort_if_empty_string(Options1),string_to_list_b1(Options1,1,_,[],Options2),maplist(append,[Options2],[Options2a]),%writeln1([options2a,Options2a]),merge_lists_a([1],Options2a,[],%%Options2a,Options3a),%writeln1(merge_lists_a([1],Options2a,[],%%Options2a,%Options3a)),sort(Options3a,Tree),traverse_tree(1,Tree).
curly_square({}, []).
cut_into_equals_segments(_,[],TL13,TL13) :- !.
data(Header,Footer) :-Header='<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN"><html lang="en">  <head>    <meta http-equiv="content-type" content="text/html; charset=UTF-8">    <meta charset="utf-8">    <title>GitL</title>    <style type="text/css"> <!-- A:link {text-decoration: none;} A:visited {text-decoration: none;} A:hover {text-decoration: underline;} img { height: auto; max-width: 100%; object-fit: contain;} table {table-layout: fixed; width: 100%;}td {word-wrap: break-word;}-->   </style>  <script language="JavaScript">function setAllCheckboxes(divId, sourceCheckbox) {    divElement = document.getElementById(divId);    inputElements = divElement.getElementsByTagName(\'input\');    for (i = 0; i < inputElements.length; i++) {        if (inputElements[i].type != \'checkbox\')            continue;        inputElements[i].checked = sourceCheckbox.checked;    }}</script>      <meta name="viewport" content="width=device-width, initial-scale=1">  </head>  <body style="background-color: rgb(255, 239, 227);">       <div style="text-align: center;">      <table width="80%">        <tbody>          <tr>            <td>              <p>',Footer='</p>            </td>          </tr>        </tbody>      </table>      <br>    <br>  </body></html>'.
data(Header,Footer) :-Header='<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN"><html lang="en">  <head>    <meta http-equiv="content-type" content="text/html; charset=UTF-8">    <meta charset="utf-8">    <title>State Saving Interpreter</title>    <style type="text/css"> <!-- A:link {text-decoration: none;} A:visited {text-decoration: none;} A:hover {text-decoration: underline;} img { height: auto; max-width: 100%; object-fit: contain;} table {table-layout: fixed; width: 100%;}td {word-wrap: break-word;}-->   </style>    <meta name="viewport" content="width=device-width, initial-scale=1">  </head>  <body style="background-color: rgb(255, 239, 227);">       <div style="text-align: center;">      <table width="80%">        <tbody>          <tr>            <td>              <p>',Footer='</p>            </td>          </tr>        </tbody>      </table>      <br>    <br>  </body></html>'.
data_to_alg1([],Vars,Vars,Alg,Alg) :- !.
data_to_alg3(Data1,Data2,Alg3,Alg4) :- % finds A=a, etc. and [A,B] data_to_alg1(Data1,[],_Vars1,[],Alg3), data_to_alg1(Data2,[],_Vars3,[],Alg4).
data_to_alg51([],Vars,Vars,Alg,Alg) :- !.data_to_alg51(Data1,Vars1,Vars2,Alg1,Alg2) :- Data1=[Data2|Data3], (%false->% not(is_item4(Data2))->%List=true;List=false), (data_to_alg51(Data2,Vars1,Vars3,[],Alg4), Alg5=Alg4,append(Alg1,[Alg5],Alg3)); (append(Vars1,[[[v,Data2],Data2]],Vars3), append(Alg1,[[v,Data2]],Alg3))), data_to_alg51(Data3,Vars3,Vars2,Alg3,Alg2),!.
data_to_types22([[["1",1]],[["2",2,"2",2]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
data_to_types22([[["2",2,"2",2]],[["2",2,"2",2]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
data_to_types22([[[1]],[[2,2]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
data_to_types22([[[1]],[[2]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).Sets2 = [[[t, list], [[t, number, 1]]]].
data_to_types221([],Types,Types,VD,VD) :- !.
day_loop(Br_lim,Br_ar,Br_al%NB,In_a_day,TSA) :-%get_time(TS1),(Br_ar>Br_lim->Br_ar2=Br_ar;(foldr(string_concat,["swipl -f -q ./bag_args21.pl"],S3)%,,catch(bash_command(S3,Br_ar10), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text4),%writeln1(Text4),false%fail%abort )),split_string(Br_ar10,"\n\r","\n\r",Br_ar11),append(_,[Br_ar12],Br_ar11),number_string(Br_ar1,Br_ar12),Br_ar2 is Br_ar+Br_ar1)),(Br_al>Br_lim->Br_al2=Br_al;%/*(foldr(string_concat,["swipl -f -q ./bag_algs1.pl"],S31)%,,catch(bash_command(S31,Br_al10), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text41),%writeln1(Text4),false%fail%abort )),%*/split_string(Br_al10,"\n\r","\n\r",Br_al11),append(_,[Br_al12],Br_al11),number_string(Br_al1,Br_al12),%get_time(TS1),Br_al2 is Br_al+Br_al1)),/*findall(TS2,(member(TS2,TSA),TS1>TS2,%foldr(atom_concat,['echo "" | mutt -s "Alarm ',NB1,' Breasonings" luciangreen@lucianacademy.com',''],A1),%shell1(A1) foldr(string_concat,["afplay /System/Library/Sounds/Funk.aiff\nsay \" Alarm "%done"%"echo " ,%""% NB1, "\" Breasonings"],S1), shell1_s(S1) ),TS3),subtract(TSA,TS3),*/%atom_concat('echo "" | mutt -s "BAG Day Test" luciangreen@lucianacademy.com','',A1),%shell1(A1)((Br_ar>Br_lim,Br_al>Br_lim)->true; day_loop(Br_lim,Br_ar2,Br_al2%NB1,In_a_day,TS3 ))  ,!.
debug_react(Status,115,true) :- Status=call, turndebug(off), write(" "),get_lang_word("skip",Dbw_skip),writeln(Dbw_skip). %% skipdebug_react(_Status,97,false) :- write(" "),get_lang_word("abort",Dbw_abort),writeln(Dbw_abort),abort. %% abortdebug_react(Status,A,false) :- ((Status=call,not(A=115),not(A=97))->true;(member_exit_fail(Status),not(A=97))), write(" "),get_lang_word("creep",Dbw_creep),writeln(Dbw_creep). %% creepmember_exit_fail(exit).member_exit_fail(fail).
debug_react(Status,115,true) :- Status=call, turndebug(off), write0(" "),get_lang_word("skip",Dbw_skip),writeln0(Dbw_skip). %% skipdebug_react(_Status,97,false) :- write0(" "),get_lang_word("abort",Dbw_abort),writeln0(Dbw_abort),abort. %% abortdebug_react(Status,A,false) :- ((Status=call,not(A=115),not(A=97))->true;(member_exit_fail(Status),not(A=97))), write0(" "),get_lang_word("creep",Dbw_creep),writeln0(Dbw_creep). %% creepmember_exit_fail(exit).
debug_types_call(FunctionArguments1) :-get_lang_word("call",Dbw_call),debug_types(Dbw_call,FunctionArguments1).
delete_directory_sh(F1) :- (absolute_url(F1)-> F1=F2; (working_directory_sh(F11,F11), string_concat_url(F11,F1,F2))),split_string(F2,":",":",F),append([G],[H],F),string_concat(K,K1,H),string_length(K,2),foldr(string_concat,["main_tmp :- catch(delete_directory('",K1,"'),Err,handle_error(Err)),halt.\nmain_tmp :- halt(1).\nhandle_error(_Err):-\n  halt(1)."],S1),foldr(string_concat,[G,":~/tmp54837.pl"],P1),save_file_sh(P1,S1),foldr(string_concat,["ssh ",G," swipl --goal=main_tmp --stand_alone=true -o tmp54837 -c tmp54837.pl"],S2),(catch(shell1_s(S2),_,fail)->(foldr(string_concat,["ssh ",G," ./tmp54837"],S),(catch(shell1_s(S,_Out),_,fail)->(true,foldr(string_concat,["ssh ",G," rm tmp54837.pl\nssh ",G," rm tmp54837"],S3),shell1_s(S3));fail));(writeln("delete_directory_sh aborted."),abort)),!.
delete_invisibles_etc(F,G) :-findall(J,(member(H,F),atom_string(H,J),not(J="."),not(J=".."),not(string_concat(".",_,J))),G).get_texts1(Dept0,Dept,Text) :-%findall(Texts2,(%member(Dept0,Dept),concat_list([Dept0,"/",Dept],Dept1),%directory_files(Dept1,F),%delete_invisibles_etc(F,G),%trace,%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%trace,%findall(String02b,(member(Filex1,G),%string_concat(Dept1,Filex1,Filex),phrase_from_file_s(string(String00a), Dept1),string_codes(Text,String00a).
delete_until_last_cp(Choice_point_trail1,Choice_point_trail2,D1,AC%,Vars3,CP_Vars1,CP_Vars2) :-(delete_until_last_cp0(Choice_point_trail1,Choice_point_trail2,D1,AC%,Vars3,CP_Vars1,CP_Vars2)->true%writeln1(delete_until_last_cp0(Choice_point_trail1,Choice_point_trail2,D1,AC%,Vars3,CP_Vars1,CP_Vars2));(writeln1(delete_until_last_cp0(Choice_point_trail1,Choice_point_trail2,D1,AC%,Vars3,CP_Vars1,CP_Vars2)),abort)),!.
deps(A,B) :- retractall(curr(_)),Curr=0,assertz(curr(Curr)),(A=[]->B=[];(A=[C]->B=[[0,C]];deps(A,B,Curr))).
dfs(C1,_D1,Sent,DB,DB2,N,Connectives,Chain1,Chain2) :-max_depth(N0),N=<N0,((N is N0,findall([E,C1],(member([E3,E],DB),member(C1,E3),%member(_D1,E3),not(member(E,Chain1)),not(member(E,Connectives))),C3),random_member([E,C1],C3),append(Chain1,[[E,C1]],Chain2),DB=DB2)->true;(findall([E,C22],(member([E3,E],DB),member(C1,E3),member(C22,E3),not(C1=C22),not(member(C22,Connectives))),C3),random_member([E,C22],C3),/* findall([C22,E],(member(C1,E3),member(C22,E3),not(C1=C22)),C2),delete(DB,[E3,E],DB3), % unlike find db 1, doesn't find details from same sentence again(C2=[]->fail;(member([C3,C32],C2),%|C4],*/delete(DB,[E3,E],DB3),N1 is N+1,not(member(E,Chain1)),append(Chain1,[[E,C22]],Chain3),dfs(C22,_D12,Sent,DB3,DB2,N1,Connectives,Chain3,Chain2))).
dictionary_to_decision_tree(Dictionary,Dictionary2) :-%trace,findall(A,(member([A1,_],Dictionary),string_concat(A1,"01",A)),B),string_to_list1(B,1,_,[],Options2),maplist(append,[Options2],[Tree]),merge_lists_a([1],Tree,[],Dictionary2),!.
dictionary_to_decision_tree(Dictionary,Dictionary2) :-%trace,findall(A,(member([A1,_],Dictionary),string_concat(A1,"01",A)),B),string_to_list1(B,1,_,[],Options2),maplist(append,[Options2],[Tree]),merge_lists_a([1],Tree,[],Dictionary2),!.spell_check1(Dictionary2,Reversed_dictionary2,Word1,Suggestions) :-string_to_list21(Word1,[],A2),%trace,A2=[Letter0|Rest],((Letter0=Letter)->true;(downcase_atom(Letter0,Letter01),atom_string(Letter01,Letter))),(%trace,(findall(Suggestions1A,((member(Dictionary2_a,Dictionary2),member([1,Letter_a,State2],Dictionary2_a),((Letter_a=Letter)->true;(downcase_atom(Letter_a,Letter01),atom_string(Letter01,Letter))),spell_check2(d,Dictionary2_a,State2,Rest,[Letter_a],_Word2,[],Suggestions1A))),Suggestions1B),maplist(append,[Suggestions1B],[Suggestions1])%maplist(append,[Suggestions1_a],[Suggestions1]))->true;(Suggestions1=[])),%trace,reverse(A2,A3),A3=[Letter10|Rest1],((Letter10=Letter1)->true;(downcase_atom(Letter10,Letter101),atom_string(Letter101,Letter1))),%trace,((findall(Suggestions2A,(member(Reversed_dictionary2_a,Reversed_dictionary2),(member([1,Letter_a1,State21],Reversed_dictionary2_a),((Letter_a1=Letter1)->true;(downcase_atom(Letter_a1,Lettera01),atom_string(Lettera01,Letter1))),%writeln1(spell_check2(r,Reversed_dictionary2,State21,Rest1,[Letter1],_Word21,[],Suggestions11)),spell_check2(r,Reversed_dictionary2_a,State21,Rest1,[Letter_a1],_Word21,[],Suggestions2A))),Suggestions2B),maplist(append,[Suggestions2B],[Suggestions11])%maplist(append,[Suggestions11_a],[Suggestions11]))->true;(Suggestions11=[])),%trace,%length(Suggestions1,L_Word2),%length(Suggestions11,L_Word21),%(L_Word2>L_Word21->Suggestions=Suggestions1;%Suggestions=Suggestions11).append(Suggestions1,Suggestions11,Suggestions_a),sort(Suggestions_a,Suggestions_b),reverse(Suggestions_b,Suggestions_c),length(Suggestions_c,Suggestions_c_l),(Suggestions_c_l<20->Sugg_l=Suggestions_c_l;Sugg_l=20),length(Suggestions,Sugg_l),append(Suggestions,_,Suggestions_c).
distribute_qa_into_plan([],_,Worksheet_plan,Worksheet_plan) :- !.
divide(_,[],_,Br2,Br2) :- !.
divide(_,[],_,Br2,Br2,_Keywords,_Connectives) :- !.
e4_substitutevarsA1(Variable2,Vars1,_,X,FirstArgs1,FirstArgs2) :-is_list(Variable2),e4_substitutevarsA2_getvalue_match1(Variable2,X,Vars1,FirstArgs1,FirstArgs2).
email_formatter(T,TE,FE,M) :- writeln("What is the title?"),read_string(user_input,"\n\r","\n\r",_,T), writeln("What is the to email?"),read_string(user_input,"\n\r","\n\r",_,TE), writeln("What is the from email?"),read_string(user_input,"\n\r","\n\r",_,FE), writeln("What is the message body?"),read_string(user_input,"\n\r","\n\r",_,M).
expand_types1(Data1,Types1,Types2) :-Data1=[Data2|Data3],expand_types1(Data2,Types1,Types3),expand_types1(Data3,Types3,Types2),!.
expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),Data1=[Data2Data3|Data41],not(Data2Data3=[T,_]),curly_head_taila(Data2Data3,Data2,Data3),expand_types1(Data2,[],Types3),expand_types1(Data3,Types3,Types4),Types5=[[[T,Dbw_list],Types4]],%trace,findall(Types61,(member(Data4,Data41),expand_types1([Data4],[],Types61)),Types62),foldr(append,Types62,Types6),append_list3([Types1,Types5,Types6],Types2),!.
expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),Data1=[Data2Data3|Data41],not(Data2Data3=[T,_]),%trace,curly_head_taila(Data2Data3,Data2,Data3),expand_types1([Data2],[],Types3),expand_types1(Data3,Types3,Types4),Types5=[[[T,Dbw_list],Types4]],%trace,findall(Types61,(member(Data4,Data41),expand_types1([Data4],[],Types61)),Types62),foldr(append,Types62,Types6),append_list3([Types1,Types5,Types6],Types2),!.
expand_types1([],Types,Types) :- !.
explain_structure(String01,Reasons_per_paragraph,File1) :-concat_list(["The Short Essay Helper will you help structure and write your essay about \"",String01,"\" with ",Reasons_per_paragraph," reasons per paragraph.","\n","The Helper will help write an exposition (which summarises but doesn't critique the idea), a critique (which agrees with or disagrees with the topic), the introduction and the conclusion (which state whether you agreed or disagreed with the topic, etc.).  Citations will be automatically made.","\n"],String1),writeln(String1).exposition(String00,String01,Reasons_per_paragraph,Numbers,ML_db,Exposition1) :-length(List1,5), %% 5->1append(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),findall([Number1,Exposition2],(%%trace,member(Number1,List1),concat_list(["What is group ",Number1," of 5 in the exposition that groups ideas about \"",String01,"\"? "],String1),get_string(String1,either,one-not-ml,"","",%ML_db,Exposition2)),Exposition3),findall([Number2,Number3,String3,String3a,String5a,String5],(member(Number2,List1),member(Number3,List2),get_item_n(Exposition3,Number2,[_,Item1]),%%trace,concat_list(["<Exposition Paragraph ",Number2," of 5 - \"",Item1,"\"> <Reason ",Number3," of ",Reasons_per_paragraph,">","\n","The Helper will ask you how the quote you are about to enter relates to the paragraph topic."],String2b),writeln(String2b),%%trace,exposition2(Item1,ML_db,String3,String3a,String5a,String5)),Exposition4),Exposition1=[Exposition3,Exposition4].exposition2(Item1,ML_db,String3,String3a,String5a,String5):-(%%concat_list(["What is the paragraph number of the quote about the paragraph topic \"",Item1,"\"? "],String2),get_number(String2,String3),%%concat_list(["What is the sentence number of the quote about the paragraph topic \"",Item1,"\"? "],String2a),get_number(String2a,String3a),%%member1a([String3,String3a,String3aa],ML_db),concat_list(["What is the paraphrased quote about the paragraph topic \"",Item1,"\"? "],String4a),get_string(String4a,either,one-not-ml-ref,"",String3aa,String5a),concat_list(["How does the quote you entered (\"",String5a,"\") relate to the paragraph topic \"",Item1,"\"? "],String4),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(Item1,String41a),split_string(String41a, SepandPad, SepandPad, Item1a),get_string(String4,either,one-not-ml,Item1a,String3aa,String5))->true;exposition2(Item1,ML_db,String3,String3a,String5a,String5).
explain_structure(String01,Reasons_per_paragraph,_File1) :-concat_list(["The Short Essay Helper will automatically structure and write your essay about ",String01," with ",Reasons_per_paragraph," reasons per paragraph.","\n","The Helper will help write an exposition (which summarises but doesn't critique the idea), a critique (which agrees with or disagrees with the topic), the introduction and the conclusion (which state whether you agreed or disagreed with the topic, etc.).  Citations will be automatically made.","\n","Note: Generated essays are not to be handed in, and you need to paraphrase and cite work you have referenced.  Your grade depends on whether you agree or disagree and how many breasonings you breason out.  Check the referencing style is appropriate for your class.","\n"],String1).
explain_structure(String01,Reasons_per_paragraph,_File1) :-concat_list(["The Short Essay Helper will automatically structure and write your essay about ",String01," with ",Reasons_per_paragraph," reasons per paragraph.","\n","The Helper will help write an exposition (which summarises but doesn't critique the idea), a critique (which agrees with or disagrees with the topic), the introduction and the conclusion (which state whether you agreed or disagreed with the topic, etc.).  Citations will be automatically made.","\n","Note: Generated essays are not to be handed in, and you need to paraphrase and cite work you have referenced.  Your grade depends on whether you agree or disagree and how many breasonings you breason out.  Check the referencing style is appropriate for your class.","\n"],String1),writeln(String1).
expression_or_atom(N) :-(isvalstrempty(N)->true;atom(N)),!.
file2list(File1) :- prep(File1,List1),string_concat(File1,"list.txt",File2),(open_s(File2,write,Stream),write(Stream,List1),close(Stream)), !.
file2list1(Files) :- %%Files=["fileout_txt.aa","fileout_txt.ab"],findall(_,(member(File1,Files),file2list(File1)),_).
file_browser(Path) :-              %format('Content-type: text/html~n~n', []),data(Header,Footer),format(Header,[]),writeln(Path),%working_directory(Path, Path),(Path="/"->Up="";foldr(string_concat,["<div style=\"width:415;\">    <div style=\"float: left; width: 65px\"><form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"","","\"><input type=hidden name=input1 value=\"",Path,"\"><input type=submit name=submit value='up'></form></div>"],Up)),foldr(string_concat,["<div style=\"width:415;\">    <div style=\"float: left; width: 65px\"><form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",Path,"\"><input type=hidden name=input1 value=\"","","\"><input type=submit name=submit value='new folder'></form></div>","<div style=\"width:415;\"><div style=\"float: left; width: 65px\">&nbsp;</div>","<div style=\"width:415;\">    <div style=\"float: left; width: 65px\"><form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",Path,"\"><input type=hidden name=input1 value=\"","","\"><input type=submit name=submit value='new file'></form></div>","<br>"],New),findall(["<div style=\"width:415;\">    <div style=\"float: left; width: 65px\"> <form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",M,"\"><input type=hidden name=input1 value=\"",M2,"\"><input type=submit name=submit value='open'></form>","    </div>", "   <div style=\"float: left; width: 65px\"> ","<form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",M,"\"><input type=hidden name=input1 value=\"",M2,"\"><input type=submit name=submit value='move'></form>","    </div>","   <div style=\"float: left; width: 65px\"> ","<form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",M,"\"><input type=hidden name=input1 value=\"",M2,"\"><input type=submit name=submit value='copy'></form>","    </div>","    <div style=\"float: left; width: 65px\"> ","<form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",M,"\"><input type=hidden name=input1 value=\"",M2,"\"><input type=submit name=submit value='delete'></form>","    </div>    <div style=\"float: left; width: 130px\"> ",M4,"    </div></div><br><br><br>"],(directory_member(Path,M1,[file_type(directory)]),file_name(M1,M4),%string_concat("/",M2,M1),directory_file_path(Path,M4,M),Path=M2),Folders),directory_files(Path,Files1),delete_invisibles_etc(Files1,Files2),findall(M3,(directory_member(Path,M1,[file_type(directory)]),file_name(M1,M2),atom_string(M2,M3)),Folders1),%trace,subtract(Files2,Folders1,Files3),findall(["<div style=\"width:498px;\">    <div style=\"float: left; width: 65px\">        <form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",M,"\"><input type=hidden name=input1 value=\"",M2,"\"><input type=submit name=submit value='view'></form>",        "    </div>    <div style=\"float: left; width: 65px\"> ","<form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",M,"\"><input type=hidden name=input1 value=\"",M2,"\"><input type=submit name=submit value='edit'></form>",        "    </div>    <div style=\"float: left; width: 65px\"> ","<form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",M,"\"><input type=hidden name=input1 value=\"",M2,"\"><input type=submit name=submit value='move'></form>","    </div><div style=\"float: left; width: 65px\"> ","<form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",M,"\"><input type=hidden name=input1 value=\"",M2,"\"><input type=submit name=submit value='copy'></form>","    </div>    <div style=\"float: left; width: 65px\"> ","<form action=\"/we\" method=\"POST\"><input type=hidden name=input value=\"",M,"\"><input type=hidden name=input1 value=\"",M2,"\"><input type=submit name=submit value='delete'></form>","    </div>    <div style=\"float: left; width: 130px\"> ",M4,"    </div></div><br><br><br>"],(member(M4,Files3),%(directory_member(Path,M1,[regular(true)]),%file_name(M1,M2),%%directory_file_path(Path,M4,M),Path=M2),Files),% directories - open, rename, move, delete% files - edit, rename, move, delete flatten([Up,New,"<br><br>Folders<br><br>",Folders,"Files<br><br>",Files],List),foldr(string_concat,List,"",String),writeln(String),format(Footer,[]).
find_a_word_to_blank(Connectives,Exercise1,Punct,Sentences,Exercise) :-length(Exercise1,Length),numbers(Length,1,[],N),findall(List,(member(N1,N),get_item_n(Exercise1,N1,Word),(((member(Word,Connectives))->true;(string_codes(Word,[Codes]),member(Codes,Punct)))-> List=[-,N1,Word];List=[+,N1,Word])),List1),findall([+,N2,Word],member([+,N2,Word],List1),List2),random_member([+,N2,Word],List2),put_item_n(Exercise1,N2,_,Exercise2),(member(Exercise2,Sentences)-> find_a_word_to_blank(Connectives,Exercise1,Punct,Sentences,Exercise);Exercise=[Exercise2,Word]).
find_at_row(_Table_N,_,_Row_from_rest_ma,[],_MACL,%_MACL1,Row_at,Row_at%,Formula_T,%Formula_R,%Formula_C,Formula_I) :- !.
find_combos3(After,Combos,Combos1,Combos2) :- After=[Item1|After2], not(Item1=[_,_,_]), %trace, %((Item1=[Type,N1,N2],member(Item,[N1,N2]))->true; ((Item1=[Type,N], member([[Type,N],Switch],Combos), ((%Type=i, Switch=on)->Item=[N];Item=[]))->true;(%number string(Item1)->Item=[Item1];Item=[]) ), append(Combos1,Item,Combos3), find_combos3(After2,Combos,Combos3,Combos2).
find_deps1([],_,UR,UR,All,All) :- !.
find_details3 :-phrase_from_file_s(string(String00a), "find_details3_db.txt"),string_codes(String02b,String00a),atom_to_term(String02b,DB,[]),phrase_from_file_s(string(String00a1), "file_fd3.txt"),string_codes(String02b1,String00a1),downcase_atom(String02b1,String02b12), phrase_from_file_s(string(Codes_cve), "connectives.txt"),string_codes(String_cve,Codes_cve),atom_to_term(String_cve,Connectives,_), SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xxsplit_string(String02b12, ".\n\r", ".\n\r", String02cb),%findall([A,WC],(member([B,WC],Texts2),),C),findall([String02cd,H],(member(H,String02cb),split_string(H, SepandPad,SepandPad, String02cda),subtract(String02cda,Connectives,String02cd)),Texts3),%findall([Sent,Chain4],%trace,member([B,Sent],Texts3),member(C,B),%member(D,B),%not(C=D),%trace,dfs(C,_D,Sent,DB,_,1,Connectives,[],T),%Chain4))),T1),%T1=[T|_],writeln1([Sent,T]),!.
find_formatting(Y1,Z9) :- split_on_substring1(Y1,"\n\t",Y2),findall(Z8,(member(Z1,Y2),find_spaces_before_and_after(Z1,Z2,Z3,Z4),delete([Z2,Z3,Z4],"",Z8)),Z5),flatten(Z5,Z9).
find_g2(T,G1,G2) :-%writeln1(find_g2(T,G1,G2)),%T=[T1|T2],T=[nd,%N,T3],%T3=T,get_var_num(N),Name=[n,N],findall([G4,Name],(member(T31,T3),Arrow="->",%Empty=[[]],%trace,find_g1(T31,[],G3,[],Rest),%append(G3,[[Name]],G5),G4=[%[Name,Arrow,Empty],[Name,Arrow,G3]|Rest]),G41),findall(A,member([A,_],G41),G411),foldr(append,G411,G42),append(G1,G42,G2),%foldr(append,G2,G21),!.
find_groups(A,Ordered_pred_nums1,Ordered_pred_nums2,First) :-  (number(A)->A=B;(A=[B],number(B))), (First=true->Ordered_pred_nums1=Ordered_pred_nums2; (member(B,Ordered_pred_nums1)->Ordered_pred_nums1=Ordered_pred_nums2; append([B],Ordered_pred_nums1,Ordered_pred_nums2))), !.
find_groups([],Ordered_pred_nums,Ordered_pred_nums,_) :- !.
find_header_args1([_],HA,HA) :- !.
find_retry_back_stack_n(N2) :-retry_back_stack_n(N1),N2 is N1+1,retractall(retry_back_stack_n(_)), assertz(retry_back_stack_n(N2)).
find_spanning_cols(Table_N,MA_Table,SC,Q_Table,Answer_table) :-% find col headings, fill in data%once((Ns=[1,2,3],findall([N,SC1],(member(N,Ns),get_item_n(MA_Table,N, Row),sub_term_wa([x_span,_],Row,SC1)),[[N,SC]|_]),findall(C1,member([x_span,[var,T1,N,%change for rowC1,IN1,V,VN,TP1,RP1,CP1,INP1]],SC),Cs),sort(Cs,Cs1),N1 is N-1,get_item_n(MA_Table,N1,Col_heads_mat_row),findall([C,Col_head],(member(C,Cs1),get_item_n(Col_heads_mat_row,C,Col_head)),Col_heads_mat),find_first(((Q_Table1=Q_Table->true;flip_x_y(Q_Table,Q_Table1)),search_for_col_heads_and_row(Col_heads_mat,Q_Table1,Col_heads_qt,Col_heads_qt_row),%((length(Col_heads_mat,CL),length(Col_heads_qt,CL))->(writeln("Error: Col_heads_mat and Col_heads_qt for table are different lengths."),abort)),% build answer table% do extra cols% find vars (cols with items) for x span (formulas) %findall(X,(member))length(MA_Table,MARL),numbers(MARL,1,[],MARLNs),MA_Table=[MAC|_],length(MAC,MACL),numbers(MACL,1,[],MACLNs),% Expand each row to have the content from QT% On a similar column heading, use the same col heading and save the end formulas, foldr appending laterMA_Table=[MA_header|MA_rest],get_item_n(Col_heads_qt,Col_heads_qt_row,Col_heads_qt_LN1),%findall([Col_header_at,Formula_T,%Formula_R,%Formula_C,Formula_I%,Formula_VN%],%(%member(MAR1,MARLNs),(%get_item_n(MA_Table,MAR1,Row_y),%findall([[Cell_x1],Rest_of_cells]%[CN,QT_col_head,MAC1,Cell_x]find_at_header(MA_header,Col_heads_qt_LN1,1,%,MACL2,[],Col_header_at2%,Formula_T,%Formula_R,%Formula_C,Formula_I%,%Formula_T,%Formula_R,%Formula_C,Formula_I),),length(Col_header_at2,Col_header_at2L),numbers(Col_header_at2,1,[],Col_header_at2Ns),%findall(Z,())findall([Curr_col_h,Symbol],(member(Col_header_at2N1,Col_header_at2Ns),(get_item_n(Col_header_at2,Col_header_at2N1,[Curr_col_h,Symbol]))),Header_1),findall(H1,member([H1,_],Header_1),Header),length(MA_rest,MA_rest_L),numbers(MA_rest_L,1,[],MA_rest_L_Ns),findall(AT,(member(MA_rest_L_N,MA_rest_L_Ns),get_item_n(MA_rest,MA_rest_L_N,Row_from_rest),%findall([Curr_col_h,Symbol],(% * make sums separate from other parts in other formulas (if a function says a=(23+b+c+d) then write a separate function b+c+d), sum everything including items% replace span with a+b etc% create vars%findall([Curr_col_h,Symbol],(member(Col_header_at2N1,Col_header_at2Ns),(get_item_n(Col_header_at2,Col_header_at2N1,[Curr_col_h,Symbol]),%get_item_n(Row_from_rest,Col_header_at2N1,MA_cell),find_at_row(Table_N,MA_rest_L_N,Row_from_rest,Header_1,1,%,MACL2,[],Row_at2%,Formula_T,%Formula_R,),%sub term wa to get vars x use code from before to point vars from qt to at x put vals in onlyappend([Header],Rest_at,AT)),Answer_table))),!.
find_spanning_cols(Table_N,MA_Table,SC,Q_Table,Answer_table) :-MA_Table=[table,_,MA_Table1],% find col headings, fill in data%once((Ns=[1,2,3],findall([N,SC1],(%trace,member(N,Ns),get_item_n(MA_Table1,N, Row),%sub_term_types_wa([_],Row1,In),%findall([Add3,def],member([Add3,_X4],In),In2),%foldr(put_sub_term_wa_ae,In2,Row1,Row),sub_term_wa([x_span,_],Row,SC1),not(SC1=[])),[[N,SC]|_]),findall(C1,member([_, [x_span,[var,T1,N,%change for rowC1,IN1,V,VN,TP1,RP1,CP1,INP1]]|_],SC),Cs),sort(Cs,Cs1),N1 is N-1,get_item_n(MA_Table1,N1,Col_heads_mat_row),findall([C,Col_head],(member(C,Cs1),get_item_n(Col_heads_mat_row,C,Col_head)),Col_heads_mat),trace,find_first(((Q_Table1=Q_Table->true;flip_x_y(Q_Table,Q_Table1)),search_for_col_heads_and_row(Col_heads_mat,Q_Table1,Col_heads_qt,Col_heads_qt_row),%((length(Col_heads_mat,CL),length(Col_heads_qt,CL))->(writeln("Error: Col_heads_mat and Col_heads_qt for table are different lengths."),abort)),% build answer table% do extra cols% find vars (cols with items) for x span (formulas) %findall(X,(member))length(MA_Table1,MARL),numbers(MARL,1,[],MARLNs),MA_Table1=[MAC|_],length(MAC,MACL),numbers(MACL,1,[],MACLNs),% Expand each row to have the content from QT% On a similar column heading, use the same col heading and save the end formulas, foldr appending laterMA_Table1=[MA_header|MA_rest],get_item_n(Col_heads_qt,Col_heads_qt_row,Col_heads_qt_LN1),%findall([Col_header_at,Formula_T,%Formula_R,%Formula_C,Formula_I%,Formula_VN%],%(%member(MAR1,MARLNs),(%get_item_n(MA_Table,MAR1,Row_y),%findall([[Cell_x1],Rest_of_cells]%[CN,QT_col_head,MAC1,Cell_x]find_at_header(MA_header,Col_heads_qt_LN1,1,%,MACL2,[],Col_header_at2%,Formula_T,%Formula_R,%Formula_C,Formula_I%,%Formula_T,%Formula_R,%Formula_C,Formula_I),),length(Col_header_at2,Col_header_at2L),numbers(Col_header_at2,1,[],Col_header_at2Ns),%findall(Z,())findall([Curr_col_h,Symbol],(member(Col_header_at2N1,Col_header_at2Ns),(get_item_n(Col_header_at2,Col_header_at2N1,[Curr_col_h,Symbol]))),Header_1),findall(H1,member([H1,_],Header_1),Header),length(MA_rest,MA_rest_L),numbers(MA_rest_L,1,[],MA_rest_L_Ns),findall(AT,(member(MA_rest_L_N,MA_rest_L_Ns),get_item_n(MA_rest,MA_rest_L_N,Row_from_rest),%findall([Curr_col_h,Symbol],(% * make sums separate from other parts in other formulas (if a function says a=(23+b+c+d) then write a separate function b+c+d), sum everything including items% replace span with a+b etc% create vars%findall([Curr_col_h,Symbol],(member(Col_header_at2N1,Col_header_at2Ns),(get_item_n(Col_header_at2,Col_header_at2N1,[Curr_col_h,Symbol]),%get_item_n(Row_from_rest,Col_header_at2N1,MA_cell),find_at_row(Table_N,MA_rest_L_N,Row_from_rest,Header_1,1,%,MACL2,[],Row_at2%,Formula_T,%Formula_R,),%sub term wa to get vars x use code from before to point vars from qt to at x put vals in onlyappend([Header],Rest_at,AT)),Answer_table))),!.
find_state_machine_body2(Body1,Body2,Return_line_true,Return_line_false,Pred_numbers) :-Body1=[]->Body2=[];(Body1=[Statement|Statements],(((get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,Statement=[N,[Dbw_v,_]|_],number(N))->(%not(predicate_or_rule_name(Statement)),%not(number(Statement)),(Statements=[]->Statements_number=Return_line_true;        find_first_line_number(Statements,Statements_number)),find_state_machine_statement1(Statement,Result1,Statements_number,Return_line_false,Pred_numbers));find_state_machine_body2(Statement,Body2,Return_line_true,Return_line_false,Pred_numbers))),find_state_machine_body2(Statements,Result2,Return_line_true,Return_line_false,Pred_numbers)),   append_list2([Result1,Result2],Body2),!.     /*   find_state_machine_body2(Body1,Body2,Return_line_true,Return_line_false,Pred_numbers) :-                Body1=[[Number,[n,maplist],[Statements1,Statements2,Statements2a,Statements2b]]|Statements3],                        %trace,        %find_first_line_number(Statements1,Statements1_number),        %find_first_line_number(Statements2,Statements2_number),        find_first_line_number(Statements2a,Statements2a_number),        %%trace,(Statements3=[]->Statements3_number=Return_line_true;        find_first_line_number(Statements3,Statements3_number)),               %find_state_machine_body2([Statements1],Body3,Statements2_number,Statements2a_number,Pred_numbers),        %find_state_machine_body2([Statements2],Body4,[end_function,Number],Return_line_false,Pred_numbers),               %%trace,                find_state_machine_body2(Statements2a,Body5,[end_function,Number],Return_line_false,Pred_numbers),        find_state_machine_body2(Statements3,Body6,Return_line_true,Return_line_false,Pred_numbers),        append_list2([%Body3,Body4,        Body5],Body345),        Body7=[Number,["on true",Statements2a_number],["go after",Statements3_number],["on false",Return_line_false],[n,findall],[Statements1,Statements2]],        append([Body7],Body345,Body71),        append(Body71,Body6,Body2),        !.
find_state_machine_body2(Body1,Body2,Return_line_true,Return_line_false,Pred_numbers) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,get_lang_word("findall_exit_function",Dbw_findall_exit_function1),Dbw_findall_exit_function1=Dbw_findall_exit_function,get_lang_word("findall_fail_function",Dbw_findall_fail_function1),Dbw_findall_fail_function1=Dbw_findall_fail_function,        get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,Body1=[[Number,[Dbw_n,Dbw_findall],[Statements1,Statements2,Statements2a]]|Statements3],                        %trace,        %find_first_line_number(Statements1,Statements1_number),        %find_first_line_number(Statements2,Statements2_number),        find_first_line_number(Statements2a,Statements2a_number),        %%trace,(Statements3=[]->Statements3_number=Return_line_true;        find_first_line_number(Statements3,Statements3_number)),               %find_state_machine_body2([Statements1],Body3,Statements2_number,Statements2a_number,Pred_numbers),        %find_state_machine_body2([Statements2],Body4,[end_function,Number],Return_line_false,Pred_numbers),               %%trace,                find_state_machine_body2(Statements2a,Body5,[Dbw_findall_exit_function,Number],[Dbw_findall_fail_function,Number]%Return_line_false                ,Pred_numbers),        find_state_machine_body2(Statements3,Body6,Return_line_true,Return_line_false,Pred_numbers),        maplist(append,[[%Body3,Body4,        Body5,Body6]],[Body56]),        Body7=[Number,[Dbw_on_true,Statements2a_number],[Dbw_go_after,Statements3_number],[Dbw_on_false,Return_line_false],[Dbw_go_to_predicates,-],[Dbw_n,Dbw_findall],[Statements1,Statements2]],        append([Body7],Body56,Body2),        %append(Body71,Body6,Body2),        !.
findrulesflowingtopv1a(_,_,_,_,[],Rules,Rules).
get(F,Number,D,E3,_C1,C3,_,Wrap) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,(F=Dbw_or->true;F="->"), % ->,2/* get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,  get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,*/%trace,(Wrap=nowrap->append([_],D1,D);D1=D),get_last_line(Number,D1,C111,A,E,Number2,F2,C,Arguments2),%append(A,C,D1),%(false%Wrap=nowrap%->not(A=[]);true), %C=[C111|E],  %C111=[Number2,[Dbw_on_true,[Fail_or_exit,Number]],[Dbw_go_after,_],[Dbw_on_false,_Number3],[Dbw_go_to_predicates,_],[Dbw_n_or_v1,F2]|Arguments2],  %(Fail_or_exit=exit_function->true;Fail_or_exit=fail_function),%(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),/* %convert_chunk%trace,append(A,[C111],AC),%trace,get_up_to_next_chunk(AC,[],C31), append(A1,C11,E), C11=[C112|E1],  C112=[_Number31,[Dbw_on_true,[exit_function,Number]],[Dbw_go_after,_],[Dbw_on_false,_Number4],[Dbw_go_to_predicates,_],[Dbw_n,_F3]|_Arguments3],%convert_chunk%trace,append(A1,[C112],AC1),get_up_to_next_chunk(AC1,[],C311),*//*get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,*/%trace,((F2="[]"->true;(F2=Dbw_not->true;(F2=Dbw_or->true;(F2="->"->true;(F2=Dbw_findall)))))-> (%append(A,[C111],AC), %trace, get_up_to_next_chunk(A,[],Ax1), get(F2,Number2,C%AC%E E*  ,E2,[],C32,Arguments2,nowrap),  append(Ax1  ,C32,C31));(%convert_chunk%trace,append(A,[C111],AC),%trace,get_up_to_next_chunk(AC,[],C31),E=E2)),%(Wrap=nowrap->append([_],E21,E2);E21=E2),get_last_line(Number,E2,C112,A1,E1,Number31,F3,C11,Arguments3), %append(A1,C11,E2), %C11=[C112|E1],  %C112=[Number31,[Dbw_on_true,[Fail_or_exit2,Number]],[Dbw_go_after,_],[Dbw_on_false,_Number4],[Dbw_go_to_predicates,_],[Dbw_n_or_v2,F3]|Arguments3],   %(Fail_or_exit2=exit_function->true;Fail_or_exit2=fail_function), %(Dbw_n_or_v2=Dbw_n->true;Dbw_n_or_v2=Dbw_v),((F3="[]"->true;(F3=Dbw_not->true;(F3=Dbw_or->true;(F3="->"->true;(F3=Dbw_findall)))))-> (%append(A1,[C112],AC1), get_up_to_next_chunk(A1,[],Ax), get(F3,Number31,%E1% C11%,AC1%E*  ,E3,[]%C1  ,C3111,Arguments3,nowrap),  append(Ax,C3111,C311));(%convert_chunk%trace,append(A1,[C112],AC1),get_up_to_next_chunk(AC1,[],C311),E1=E3)),%trace,foldr(append,[C31,C311],C313),(true%Wrap=wrap->C3=[[[Dbw_n,F],C313]];C3=[[Dbw_n,F],C313]).
get_custs(String02a) :-phrase_from_file_s(string(String00a), "custs.txt"),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]).
get_extra_answers(_,[],Worksheet_plan,Worksheet_plan) :- !.get_extra_answers(Text,Worksheet_plan1,Worksheet_plan2,Worksheet_plan3) :- Worksheet_plan1=[[Number,Type,Number_of_gap_questions,List1,Number_of_gap_answers]|Worksheet_plan4], (Type=multi_choice_fill_the_gap-> (Extra_answers1 is Number_of_gap_answers - Number_of_gap_questions, findall(Answers1,member([_,Answers1],List1),Answers2), get_extra_answers2(Text,Extra_answers1,Answers2,Answers31), random_permutation(Answers31,Answers3));Answers3=[]), append(Worksheet_plan2,[[Number,Type,Number_of_gap_questions,List1,Number_of_gap_answers,Answers3]],Worksheet_plan5),get_extra_answers(Text,Worksheet_plan4,Worksheet_plan5,Worksheet_plan3).
get_files(Item4,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang) :-get_file("files/ctt-input.txt",Ctt_input),Ctt_input=[From_lang,To_lang,String1],%split_string2(String1,["\n","\r"],List1),string_codes(String1,Codes1),split_on_substring117(Codes1,`\n\r`,[],List1),%trace,findall(Item2,(member(Item1,List1),((Item1="\n"->true;Item1="\r")->Item2=[Item1];(%trace,string_codes(Item1,Codes2),split_on_substring117(Codes2,`.!?`,[],Item11),%split_string2(Item1,[".","!","?"],Item11),join_chars_after(Item11,[".","!","?"],[],Item2)))),Item3),maplist(append,[Item3],[Item4]),findall(Item5,(member(Item5,Item4),not(((Item5="\n"->true;Item5="\r")))),Item6),length(Item6,Length0),write("Number of sentences to translate in files/ctt-input.txt: "), writeln(Length0),sort(Item6,CttInput2),length(CttInput2,Length1),write("Number of unique sentences to translate in files/ctt-input.txt: "), writeln(Length1),get_file("files/ctt-orig1-orig2.txt",Ctt_orig1_orig2),findall([A,B],member([From_lang,To_lang,A,B],Ctt_orig1_orig2),Ctt_orig1_orig22),length(Ctt_orig1_orig22,Length2),write("Number of back-translation pairs in lang1->lang2: "), writeln(Length2),get_file("files/ctt-orig-tran.txt",Ctt_orig_tran),findall([A,B],member([From_lang,To_lang,A,B],Ctt_orig_tran),Ctt_orig_tran2),length(Ctt_orig_tran2,Length3),write("Number of translation pairs in lang1->lang2: "), writeln(Length3),findall(Item9,member([From_lang,To_lang,Item9,_],Ctt_orig1_orig22),Item10),findall(Item7,member([From_lang,To_lang,_,Item7],Ctt_orig1_orig22),Item8),findall(Item11,member([From_lang,_,Item11],Ctt_orig_tran2),Item12),subtract(Item6,Item10,D1), %%length(D1,Length),Difference is abs(Length),write("Number of back-translations remaining to define: "), writeln(Difference),%%towords2(CttInput1,[],CttInput2),subtract(Item8,Item12,D2), %% Should AUN be appended to TF, " x%%delete(D21,'',D2),length(D2,Length01t),Differencet is abs(Length01t),write("Number of undefined back-translations: "), writeln(Differencet),%%writeln([undefined,D2]), %% Print undefined %%delete(D31,'',D3),subtract(Item12,Item8,D3),length(D3,Length01t2),Differencet2 is abs(Length01t2),write("Number of orphaned translations: "), writeln(Differencet2),!.get_file(File_path,File) :-phrase_from_file_s(string(String00a),File_path),string_codes(String02b,String00a),atom_to_term(String02b,File,[]),!.
get_lang_word3("Yes 1","en2","fr",A).                                            A = "Oui 1".get_lang_word3("Oui 1","fr","en2",A).
get_lang_word3("member 1","en2","en",A).
get_lang_word3("membre 1","fr","en2",A).
get_last_line2(Number,C,CL) :-  ((reverse(C,CR),member([Number2,[_Dbw_on_true,_],[_Dbw_go_after,B],[_Dbw_on_false,_],[_Dbw_go_to_predicates,_],[_Dbw_n_or_v1,_F2]|_Arguments2],CR), (( B=[Fail_or_exit,Number],(Fail_or_exit=exit_function->true;(Fail_or_exit=fail_function->true;(Fail_or_exit=findall_exit_function->true;Fail_or_exit=findall_fail_function)))%(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),get_last_line2(Number2,C,CL))->true;(%reverse(C,CR),member([Number2,[Dbw_on_true,A],[Dbw_go_after,B],[Dbw_on_false,D],[Dbw_go_to_predicates,E],[Dbw_n_or_v1,F2]|Arguments2],CR),%(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),(A=[Fail_or_exit,A2]->A1=A2;A1=A),%(D=[Fail_or_exit2,D2]->D1=D2;D1=D),(Fail_or_exit=exit_function->true;(Fail_or_exit=fail_function->true;(Fail_or_exit=findall_exit_function->true;Fail_or_exit=findall_fail_function))),%get_last_line(A1,C,CL1),%get_last_line(D1,C,CL2),%(CL1>=CL2->CL=CL1;CL=CL2))),!.(A1=Number),%,->true%;D1=Number),CL=[Number2,[Dbw_on_true,A],[Dbw_go_after,B],[Dbw_on_false,D],[Dbw_go_to_predicates,E],[Dbw_n_or_v1,F2]|Arguments2])))).
get_sub_term_wa(List,[1],List) :- !.
getvalue_match1([],[],_Vars1) :- !.
getvalue_match_pipe(Variable1,Value1,Vars1) :- %%,Top_flag(variable_name(Variable1)->(getvalue(Variable1,Value1,Vars1),not(Value1=empty))),split_into_head_and_tail(Variable1,Head1a,Tail1a,Pipe1,Head_is_list_of_lists1),(single_item(Head1a) -> L1 = 1 ; length(Head1a,L1)),(%%trace,(Head_is_list_of_lists1=true)->(%%writeln(here1),Head1=Head1a,Tail1=Tail1a,%%notrace,%%trace,getvalue_match_pipe(Head1,Value11a,Vars1),getvalue_match_pipe(Tail1,Value11b,Vars1),not(Value11a=empty),(Value11b=empty->fail;Value11c=Value11b),is_list(Value11c),append(Value11a,Value11c,Value1)%%[Value3]=Value5,Value4=[Value6|Value6a],%%maplist(append,[[Value5,Value6,Value6a]],Value2)%%,notrace);((Pipe1=true)->(split_by_number_of_items(Variable1,L1,_Head2,_Tail2),Head1=Head1a,Tail1=Tail1a);%%((Pipe1=false,Pipe2=true)->%%(split_by_number_of_items(Variable1,L2,Head1,Tail1),%%Head2=Head2a,Tail2=Tail2a);(Pipe1=false)->%%,Pipe2=false,L1=L2,Head1=Head1a,Tail1=Tail1a),%%Head2=Head2a,Tail2=Tail2a)) % *1%%trace,%%writeln(here2),getvalue_match_pipe(Head1,Value12a,Vars1),getvalue_match_pipe(Tail1,Value12b,Vars1),not(Value12a=empty),(Value12b=empty->fail;Value12c=Value12b),is_list(Value12c),%%trace,append([Value12a],Value12c,Value1)),!.getvalue_match_pipe([Variable1|Variabl1b],Value1,Vars1) :-%%variable_name(Variable1),(variable_name(Variable1)->(getvalue(Variable1,Value1,Vars1),not(Value1=empty))),(variable_name(Variable1b)->(getvalue(Variable1b,Value1b,Vars1),not(Value1b=empty))),getvalue_match_pipe(Variable1,Value11a,Vars1),getvalue_match_pipe(Variabl1b,Value11b,Vars1),not(Value11a=empty),(Value11b=empty->Value11c=[];Value11c=Value11b),is_list(Value11c),append([Value11a],Value11c,Value1),!.
grammar_logic_to_alg11([Sentence1,List_a,List_a1,List_b1,List_bb,List_bb1,Cs1,Cs2]) :-phrase_from_file_s(string(Text1), "../Text-to-Breasonings/file.txt"),grammar_logic_to_alg113(Text1,[Sentence1,List_a,List_a1,List_b1,List_bb,List_bb1,Cs1,Cs2]).
grammar_logic_to_alg113(Text1,[Sentence1,List_a,List_a1,List_b1,List_bb,List_bb1,Cs1,Cs2]) :-phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),splitfurther(BrDict0,BrDict01),sort(BrDict01,BrDict012),retractall(brdict(_)),assertz(brdict(BrDict012)),SepandPad=".\n",split_string(Text1,SepandPad,SepandPad,Text2a),delete(Text2a,"",Text2),findall(B2,(member(B1,Text2),grammar_logic_to_alg(B1,B2)),C),length(C,CLength),writeln([CLength,sentences]),C=[[[_,Sentence1,a_alg(List_a),_,bb_alg(List_bb)]|Cs1]|Cs2],%%get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list(["gla_del"],%%[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(["\"",File1,".txt\""],File2),term_to_atom(List_a,List_a2),string_atom(List_a3,List_a2),concat_list(["swipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_a3,"]],[[[n,function],[[v,a]],\":-\",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],\":-\",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],\":-\",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],\":-\",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_a1),concat_list(["\n\nswipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_a3,",[v,b]]],[[[n,function],[[v,a],[v,b]],\":-\",[[[n,tail],[[v,a],[v,b]]]]]],_),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_b1),term_to_atom(List_bb,List_bb2),string_atom(List_bb3,List_bb2),concat_list(["swipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_bb3,"]],[[[n,function],[[v,a]],\":-\",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],\":-\",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],\":-\",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],\":-\",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_bb1).
grammar_part2(Dbw_n,_Dbw_grammar_part,Terminal,Phrase1,Phrase2,Vars1,Vars2) :-        getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[Flag1,Flag2,_Flag3]), %% prolog vars, list of vars, [v]=[prolog var]        %%delete(Value1,Value2,Value3A),(string(TerminalValue1)->true;(string(Phrase1Value1)->true;(string(Phrase2Value1)))),            ((    (Terminal=[_Value]->TerminalValue2=[TerminalValue1];TerminalValue2=TerminalValue1),((string(Phrase1Value1)->Phrase1Value1=Phrase1Value11;(number(Phrase1Value1)->number_string(Phrase1Value1,Phrase1Value11);Phrase1Value1=Phrase1Value11)),(Terminal=""->TerminalValue2="";true),       (((var(TerminalValue2)->(string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11)),string_length(TerminalValue2,1));string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;    string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;            ((Phrase1Value1=[_ItemA|_ItemsA]),(Terminal=[]->(TerminalValue2=[],((var(TerminalValue2)->length(TerminalValue2,1);true),(append(TerminalValue2,Phrase2Value1,Phrase1Value1))))->true;(append(TerminalValue2,Phrase2Value1,Phrase1Value1)->true)))),        putvalue(Terminal,TerminalValue2,Vars1,Vars3),        putvalue(Phrase2,Phrase2Value1,Vars3,Vars4),        putvalue(Phrase1,Phrase1Value1,Vars4,Vars2),        (Flag1=true->TerminalValue3=variable1;TerminalValue3=TerminalValue1),        (Flag2=true->Phrase1Value3=variable2;Phrase1Value3=Phrase1Value1))->        (debug_call(Skip,[[Dbw_n,grammar_part],[TerminalValue3,Phrase1Value3,Phrase2]]),        debug_exit(Skip,[[Dbw_n,grammar_part],[TerminalValue1,Phrase1Value1,Phrase2Value1]]));% CAW requires input,input,output with "a","ab",[v,a] where [v,a]="b"        (debug_call(Skip,[[Dbw_n,grammar_part],[Terminal,Phrase1,Phrase2]]),        (debug_fail(Skip,[[Dbw_n,grammar_part],[Terminal,Phrase1,Phrase2]])))),!.                getvalues(Variable1,Variable2,Value1,Value2,Vars) :-        getvalue(Variable1,Value1,Vars),        getvalue(Variable2,Value2,Vars).
grammar_part2(_Dbw_n,_Dbw_grammar_part,Terminal,Phrase1,Phrase2,Vars1,Vars2) :-%trace,        getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[_Flag1,_Flag2,_Flag3]),        (%(not(contains_var1(Terminal)),is_list(TerminalValue1)->true;(%(not(contains_var1(Phrase1)),is_list(Phrase1Value1)->true;(%(not(contains_var1(Phrase2)),is_list(Phrase2Value1)))),%getvalues(Terminal,Phrase1,Phrase2,TerminalValue1,Phrase1Value1,Phrase2Value1,Vars1),interpretpart(append,Terminal,Phrase2,Phrase1,Vars1,Vars2).
group_by_table_rows(Instances1a,Instances1b) :-findall(T3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),T3s),sort(T3s,T3s1),findall(R3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),R31),sort(R31,R5),/*findall(IN3,member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1a),IN31),sort(IN31,IN35),*/findall(X,(member(T31,T3s1),member(R51,R5),%member(IN36,IN35),findall(X1,(member(X1,Instances1a),X1=[Address, [var,T31,R51,C3,_IN36,V3,VN,TP3,RP3,CP3,INP3]]),X)),Instances1b),!.
group_into_old_new(H1,H) :- findall1([old,A,B],member([old,A,B],H1),H2), findall1([new,A,B],member([new,A,B],H1),H3), H=[[old,H2],[new,H3]].
if_brackets_tl(Heads11,H1,Heads1) :- if_brackets_tl1(Heads11,H1,%Heads1% [Heads1] ).
instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument) :-melodyinstrumentnumber(MelodyInstrumentNumber),harmonyinstrumentnumber(HarmonyInstrumentNumber),instrumentlist(MelodyInstrumentNumber,MelodyInstruments),instrumentlist(HarmonyInstrumentNumber,HarmonyInstruments),Vocalstubinstrument=[0,"Acoustic Grand Piano"],parts(Form1,MelodyInstruments,MelodyParts),aggregate_all(count, (member(A1,MelodyParts),not(A1=[_,_,0])), Count1),not(Count1=0),parts(Form1,HarmonyInstruments,HarmonyParts),aggregate_all(count, (member(A2,HarmonyParts),not(A2=[_,_,0])), Count2),not(Count2=0).melodyinstrumentnumber(NumberofInstruments) :-%% Number of melody instrumentstrialy2("Number of melody instruments?",[1,2,3,4,5,6,7,8,9,10],R1),findbest(R1,NumberofInstruments).
interpret(Debug,Query,Functions1,Result) :-retractall(types(_)), assertz(types(off)),interpret11(Debug,Query,Functions1,Result).
interpret_1(Debug,Query,Functions1,Result) :-retractall(types(_)), assertz(types(off)),interpret11(Debug,Query,Functions1,Result).
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-Body=[Statement|Statements],%%writeln(["Functions0",Functions0,"Functions",Functions,"Statement",Statement,"Vars1",Vars1,"Vars3",Vars3,"Result2",Result2,"Cut",Cut]),interpretstatement1(Functions0,Functions,Statement,Vars1,Vars3,Result2,Cut),%%writeln(["here1"]),((not(Cut=cut))->(Functions2=Functions);(turncut(on))), %% cut to interpret1/2 (assertz)%%writeln(["here3"]),interpretbody(Functions0,Functions2,Vars3,Vars2,Statements,Result3),%%((Result3=cut)->!;true),%%writeln(["here4"]),logicalconjunction(Result1,Result2,Result3),!.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-Body=[Statement|Statements],%%writeln(["Functions0",Functions0,"Functions",Functions,"Statement",Statement,"Vars1",Vars1,"Vars3",Vars3,"Result2",Result2,"Cut",Cut]),not(predicate_or_rule_name(Statement)),interpretstatement1(Functions0,Functions,Statement,Vars1,Vars3,Result2,Cut),%%writeln(["here1"]),((not(Cut=cut))->(Functions2=Functions);(turncut(on))), %% cut to interpret1/2 (assertz)%%writeln(["here3"]),interpretbody(Functions0,Functions2,Vars3,Vars2,Statements,Result3),%%((Result3=cut)->!;true),%%writeln(["here4"]),logicalconjunction(Result1,Result2,Result3),!.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-Body=[Statement|Statements],%%writeln(["Functions0",Functions0,"Functions",Functions,"Statement",Statement,"Vars1",Vars1,"Vars3",Vars3,"Result2",Result2,"Cut",Cut]),not(predicate_or_rule_name(Statement)),interpretstatement1(Functions0,Functions,Statement,Vars1,Vars3,Result2,Cut),%%writeln(["here1"]),((not(Cut=cut))->(Functions2=Functions);(turncut(on))), %% cut to interpret1/2 (assertz)%%writeln(["here3"]),interpretbody(Functions0,Functions2,Vars3,Vars2,Statements,Result3),%%((Result3=cut)->!;true),%%writeln(["here4"]),logicalconjunction(Result1,Result2,Result3),!.%%writeln([Result1,Result2,Result3]).
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-Body=[Statement|Statements],%%writeln1(["Functions0",Functions0,"Functions",Functions,"Statement",Statement,"Vars1",Vars1,"Vars3",Vars3,"Result2",Result2,"Cut",Cut]),not(predicate_or_rule_name(Statement)),interpretstatement1(Functions0,Functions,Statement,Vars1,Vars3,Result2,Cut),%%writeln1(["here1"]),%trace,((not(Cut=cut))->(Functions2=Functions);(%%trace,!,turncut(on))), %% cut to interpret1/2 (assertz)%%writeln1(["here3"]),interpretbody(Functions0,Functions2,Vars3,Vars2,Statements,Result3),%%((Result3=cut)->!;true),%%writeln1(["here4"]),logicalconjunction(Result1,Result2,Result3),true.%%,!.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        Body=[[[Dbw_n,"->"],[Statements1,Statements2]]|Statements3],        (interpretbody(Functions0,Functions,Vars1,Vars3,[Statements1],Result2)                %%((Result2=cut)->!;true))->                 interpretbody(Functions0,Functions,Vars3,Vars4,[Statements2],Result22)),                 %%((Result22=cut)->!;true))),        interpretbody(Functions0,Functions,Vars4,Vars2,Statements3,Result3),               %%((Result3=cut)->!;true),        logicalconjunction(Result1a,Result2,Result22),        logicalconjunction(Result1,Result1a,Result3),        true.%%!.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-%writeln1(interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1)),%trace,Body=[Statement|Statements],%%writeln1(["Functions0",Functions0,"Functions",Functions,"Statement",Statement,"Vars1",Vars1,"Vars3",Vars3,"Result2",Result2,"Cut",Cut]),not(predicate_or_rule_name(Statement)),%trace,interpretstatement1(_,Functions0,Functions,Statement,Vars1,Vars3,Result2,Cut),%%writeln1(["here1"]),%trace,((not(Cut=cut))->(Functions2=Functions);(%%trace,!,turncut(on))), %% cut to interpret1/2 (assertz)%%writeln1(["here3"]),interpretbody(Functions0,Functions2,Vars3,Vars2,Statements,Result3),%%((Result3=cut)->!;true),%%writeln1(["here4"]),logicalconjunction(Result1,Result2,Result3),true.%%,!.
interpretbodylp2c(Body,Algorithm1,Algorithm2) :-Body=[Statement|Statements],not(predicate_or_rule_name(Statement)),interpretstatementlp2c1(Statement,Algorithm1,Algorithm3),write_comma_if_not_empty_list2(Statements,Algorithm3,Algorithm4),interpretbodylp2c(Statements,Algorithm4,Algorithm2),%%write_full_stop_if_last_item(Statements,Algorithm5,Algorithm2),!.
interpretbodylp2c(Body,Algorithm1,Algorithm2) :-        Body=[[[n,findall],[Statements1,Statements2,Statements2a]]|Statements3],        %string_concat(Algorithm1,"(",Algorithm3),        interpretstatementlp2c1([Statements1],"",Algorithm4),        %string_concat(Algorithm4,"->(",Algorithm5),                interpretbodylp2c([Statements2],"",Algorithm6),        %string_concat(Algorithm6,");(",Algorithm7),                interpretstatementlp2c1([Statements2a],"",Algorithm8),        %string_concat(Algorithm8,"))",Algorithm9),        foldr(string_concat,[Algorithm1,"findall(",Algorithm4,",",Algorithm6,",",Algorithm8,")"],Algorithm9),write_comma_if_not_empty_list(Statements3,Algorithm9,Algorithm10),        interpretbodylp2c(Statements3,Algorithm10,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm11,Algorithm2),        !.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-Body=[Statement|Statements],not(predicate_or_rule_name(Statement)),interpretstatementlp2p1(Statement,Algorithm1,Algorithm3),write_comma_if_not_empty_list(Statements,Algorithm3,Algorithm4),interpretbodylp2p(Statements,Algorithm4,Algorithm2),%%write_full_stop_if_last_item(Statements,Algorithm5,Algorithm2),!.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-        %trace,        Body=[[[n,findall],[Statements1,Statements2,Statements2a]]|Statements3],        %string_concat(Algorithm1,"(",Algorithm3),        %interpretstatementlp2p1([Statements1],"",Algorithm4),interpretstatementlp2p2([Statements1],"",Algorithm4,"[]"),        %string_concat(Algorithm4,"->(",Algorithm5),%trace,%interpretstatementlp2p5occurrences_of_term([n,_],Statements2,L),%trace,(%false%L>=2->Statements21=Statements2;Statements21=[Statements2]),interpretstatementlp2p2(Statements21,"",Algorithm61,%false,"()"),%findall(_,(member([[n,_]|_],Statements2)),S),%length(S,L),(L<2->Algorithm61=Algorithm6;(%trace,foldr(string_concat,["(",Algorithm61,")"],Algorithm6))),                %interpretbodylp2p([Statements2],"",Algorithm6),        %string_concat(Algorithm6,");(",Algorithm7),                %                %interpretbodylp2p                                interpretstatementlp2p2([Statements2a],"",Algorithm8,"[]"                ),        %string_concat(Algorithm8,"))",Algorithm9),        foldr(string_concat,[Algorithm1,"findall(",Algorithm4,",",Algorithm6,",",Algorithm8,")"],Algorithm9),write_comma_if_not_empty_list(Statements3,Algorithm9,Algorithm10),        interpretbodylp2p(Statements3,Algorithm10,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm11,Algorithm2),        !.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-%trace,        Body=[[[n,code]|Statements1]|Statements3],        string_concat(Algorithm1,"{",Algorithm3),        %trace,        interpretbodylp2p(Statements1,"",Algorithm4),        string_strings(Algorithm4,A4),        (append(["("],A5,A4)->true;A5=A4),        %trace,        (append(A6,[")",")"],A5)->append(A6,[")"],A62);A62=A5),        flatten([Algorithm3,%Algorithm4%        A62        ],A61),        foldr(string_concat,A61,A7),                string_concat(A7,"}",Algorithm7),write_comma_if_not_empty_list(Statements3,Algorithm7,Algorithm8),        interpretbodylp2p(Statements3,Algorithm8,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm9,Algorithm2),        !.
interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        append1(Value1,Value2,Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,append],[Value1,Value2,variable3]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,append],[Value1,Value2,Value3A]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        append1(Value1,Value2,Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2),        (debug(on)->(writeln([call,[append,Value1,Value2,variable3],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[append,Value1,Value2,Value3A],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        append1(Value1,Value2,Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2),        (debug(on)->(writeln([call,[append,Value1,Value2,variable3],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[append,Value1,Value2,Value3A],"Press c."]),(not(get_single_char(97))->true;abort));true).getvalues(Variable1,Variable2,Value1,Value2,Vars) :-        getvalue(Variable1,Value1,Vars),        getvalue(Variable2,Value2,Vars).
interpretpart(atom_string,Variable1,Variable2,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("atom_string",Dbw_atom_string),       getvalues(Variable1,Variable2,Value1,Value2,Vars1),        (contains_empty(Value1)->        (debug_call(Skip,[[Dbw_n,Dbw_atom_string],[variable,Value2]]),((string(Value2),   atom_string(Value1A,Value2),        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_atom_string],[Value1A,Value2]]);     debug_fail(Skip,[[Dbw_n,Dbw_atom_string],[variable,Value2]])));        (debug_call(Skip,[[Dbw_n,Dbw_atom_string],[Value1,variable]]),((atom(Value1),   atom_string(Value1,Value2A),        val1emptyorvalsequal(Value2,Value2A),        putvalue(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_atom_string],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_atom_string],[Value1,variable]])))),!.
interpretpart(bracket2,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("unwrap",Dbw_unwrap),        getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_unwrap],[variable,Value2]]),        (([Value2A] = Value1,        %val1emptyorvalsequal(Value2,Value2A),        %%val1emptyorvalsequal(Value2A,Value1),        putvalue_equals4(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_unwrap],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_unwrap],[variable,Value2]])),!.
interpretpart(not_is,Variable1,Variable2,Vars1,Vars1) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        not(isempty(Value1)),        not(isempty(Value2)),        debug_call(Skip,[[n,[not,=]],[Value1,Value2]]),        ((not(Value1 = Value2))->      debug_exit(Skip,[[n,[not,=]],[Value1,Value2]]);     debug_fail(Skip,[[n,[not,=]],[Value1,Value2]])),!.                        interpretpart(not_iscomparison,Operator,Variable1,Variable2,Vars1,Vars1) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[n,[not,Operator]],[Value1,Value2]]),((isval(Value1),isval(Value2),Expression=..[Operator,Value1,Value2],        not(Expression))->      debug_exit(Skip,[[n,[not,Operator]],[Value1,Value2]]);     debug_fail(Skip,[[n,[not,Operator]],[Value1,Value2]])),!.
interpretpart(read_string,Variable1,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("read_string",Dbw_read_string),       getvalue(Variable1,Value1,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_read_string],[variable]]),((read_string(user_input, "\n", "\r", _End1, Value1A),        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_read_string],[Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_read_string],[variable]])),!.
interpretpart(split_on_substring117a,Variable1,Variable2,Variable3,Variable4,Vars1,Vars2) :- %trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("split_on_substring117a",Dbw_split_on_substring117a),       getvalue(Variable1,Value1,Vars1),       getvalue(Variable2,Value2,Vars1),       getvalue(Variable3,Value3,Vars1),       getvalue(Variable4,Value4,Vars1),        %trace,%trace,        debug_call(Skip,[[Dbw_n,Dbw_split_on_substring117a],[Value1,Value2,Value3,variable]]),((%is_list(Value1),split_on_substring117a(Value1,Value2,Value3,Value41),%shell1_s(Value1)%Value2A=Value2A1,%string_atom(Value2A,Value2A1), % *** LPI only takes strings   %sort(Value1,Value2A),        val1emptyorvalsequal(Value4,Value41),        putvalue(Variable4,Value41,Vars1,Vars2)        )->      debug_exit(Skip,[[Dbw_n,Dbw_split_on_substring117a],[Value1,Value2,Value3,Value41]]);     debug_fail(Skip,[[Dbw_n,Dbw_split_on_substring117a],[Value1,Value2,Value3,variable]])),!.
interpretpart(string_strings,Variable1,Variable2,Vars1,Vars2) :- %trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string_strings",Dbw_string_strings),       getvalue(Variable1,Value1,Vars1),       getvalue(Variable2,Value2,Vars1),        %trace,%trace,        debug_call(Skip,[[Dbw_n,Dbw_string_strings],[Value1,variable]]),((%is_list(Value1),string_strings(Value1,Value21),%shell1_s(Value1)%Value2A=Value2A1,%string_atom(Value2A,Value2A1), % *** LPI only takes strings   %sort(Value1,Value2A),        val1emptyorvalsequal(Value2,Value21),        putvalue(Variable2,Value21,Vars1,Vars2)        )->      debug_exit(Skip,[[Dbw_n,Dbw_string_strings],[Value1,Value21]]);     debug_fail(Skip,[[Dbw_n,Dbw_string_strings],[Value1,variable]])),!.
interpretpart(text_area,Variable1,Variable2,Variable3,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("text_area",Dbw_text_area),       getvalue(Variable1,Value1,Vars1),       getvalue(Variable2,Value2,Vars1),       getvalue(Variable3,Value3,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_text_area],[Value1,Value2,variable]]),((writeln(Value2),read_string(user_input, "\n", "\r", _End1, Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_text_area],[Value3A]]);     debug_fail(Skip,[[Dbw_n,Dbw_text_area],[variable]])),!.
interpretstatement1(Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-%%writeln("h1/10"),        Query1=[Function,Arguments],not(Function=[n,grammar]->true;Function=[n,grammar_part]),%%writeln(["Arguments",Arguments,"Vars1",Vars1]),        substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),        Query2=[Function,Vars3], %% Bodyvars2?%%        debug(on)->writeln([call,[Function,[Vars3]]]),%%writeln(["Query2",Query2,"Functions0",Functions0]),        interpret2(Query2,Functions0,Functions0,Result1), updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8));(%%writeln(here1),Vars8=[])).
interpretstatement1(Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-%%writeln("h1/10"),        Query1=[Function,Arguments],not(Function=[n,grammar]->true;Function=[n,grammar_part]),%%writeln(["Arguments",Arguments,"Vars1",Vars1]),        substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),        Query2=[Function,Vars3], %% Bodyvars2?%%        debug(on)->writeln([call,[Function,[Vars3]]]),%%writeln(["Query2",Query2,"Functions0",Functions0]),        interpret2(Query2,Functions0,Functions0,Result1), updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8));(%%writeln(here1),Vars8=[])).%%**** reverse and take first instance of each variable.
interpretstatement1(Grammar,_Grammar2,Query1,Vars1,Vars8,true,nocut) :-%%writeln("h1/10"),%%trace,%%%%****        Query1=[[n,grammar_part]|Arguments],        Arguments=[[RuleName|Variables2]],        %%(([Variables4|Rest]=Variables2->Variables3=Variables2;(Variables2=[],Variables3=[]))),        ((not(terminal(RuleName)),%%writeln(["Arguments",Arguments,"Vars1",Vars1]),        substitutevarsA1(Variables2,Vars1,[],Vars3,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),  (not(Vars3=[])->(append([RuleName],Vars3,Vars4),Query2=[[n,grammar_part],Vars4]);  Query2=[[n,grammar_part],RuleName]), %% Bodyvars2?%%        debug(on)->writeln([call,[Function,[Vars3]]]),%%writeln(["Query2",Query2,"Functions0",Functions0]),        %%notrace,%%**** interpret2(Query2,Grammar,Grammar,Result1), %%trace,%****updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8))->true;(%%writeln(here1),Vars8=[]))->true)->true;(terminal(RuleName),substitutevarsA1(Variables2,Vars1,[],Vars3,[],FirstArgs),%%writeln(here), %%****%%Vars3=[Phrase,End],%%Vars41=[Phrase,[v,vgp]],append([RuleName],Vars3,Vars9),%%writeln([vars9,Vars9]), %%%%%*****interpretpart(grammar_part,Vars9,[],Result1),updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars3,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8)%%writeln([vars8,Vars8]) %%%*****)->true;(%%writeln(here1),Vars8=[]))->true)),%%notrace, %%****!.
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_equals4],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals4",Dbw_equals41),Dbw_equals41=Dbw_equals4,get_lang_word("v",Dbw_v),get_lang_word("sys1",Dbw_sys1),%%writeln1(5),%%trace,         remember_and_turn_off_debug(Debug), %trace,         interpretpart(match4,Variable1,Variable2,Vars1,Vars5,_),                  interpretpart(match4,Variable1,[Dbw_v,Dbw_sys1],Vars5,Vars4,_),      getvalue([Dbw_v,Dbw_sys1],Value3,Vars4),          turn_back_debug(Debug),          interpretpart(match4,Variable1,Variable2,Vars1,Vars2,Value3),!.
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_member],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member",Dbw_member1),Dbw_member1=Dbw_member,%%writeln1(8),        interpretpart(member,Variable1,Variable2,Vars1,Vars2).interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_member2],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,get_lang_word("member2",Dbw_member21),Dbw_member21=Dbw_member2,%%writeln1(8),        interpretpart(member2,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,member],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(8),        interpretpart(member,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[member,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(8),        interpretpart(member,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_Functions0, _Functions,_Query,_Vars1,_Vars2,false) :-writeln([false]).
interpretstatement1(_Functions0,_Functions,[[Dbw_n,Dbw_string_from_file],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string_from_file",Dbw_string_from_file1),Dbw_string_from_file1=Dbw_string_from_file,        interpretpart(string_from_file,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,F0,Functions,[[Dbw_n,Dbw_name]|Args],Vars1,Vars2,T,C,[]) :- %writeln(here),interpretstatement1(ssi,F0,Functions,[[Dbw_n,Dbw_name]|Args],Vars1,Vars2,T,C).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_atom],[Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("atom",Dbw_atom1),Dbw_atom1=Dbw_atom,getvalue(Variable,Value,Vars),debug_call(Skip,[[Dbw_n,Dbw_atom],[Value]]),(atom(Value)->debug_exit(Skip,[[Dbw_n,Dbw_atom],[Value]]);     debug_fail(Skip,[[Dbw_n,Dbw_atom],[Value]])),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_date_time_stamp],[Y,M,D,Ho,Mi,Se,Se2,Variable1]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("date_time_stamp",Dbw_date_time_stamp1),Dbw_date_time_stamp1=Dbw_date_time_stamp,        interpretpart(date_time_stamp,Y,M,D,Ho,Mi,Se,Se2,Variable1,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_delete],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_delete],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%trace,%writeln1(interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4],[Variable1,Variable2]],Vars1,Vars2,true,nocut)),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals4",Dbw_equals41),Dbw_equals41=Dbw_equals4,get_lang_word("v",Dbw_v),get_lang_word("sys1",Dbw_sys1),%%writeln1(5),%trace,         remember_and_turn_off_debug(Debug), %trace,         (interpretpart(match4,Variable1,Variable2,Vars1,Vars5,_)->true;(turn_back_debug(Debug),         %fail         interpretpart(match4,Variable1,Variable2,Vars1,_Vars2,_))),                  interpretpart(match4,Variable1,[Dbw_v,Dbw_sys1],Vars5,Vars4,_),      getvalue([Dbw_v,Dbw_sys1],Value3,Vars4),          turn_back_debug(Debug),          interpretpart(match4,Variable1,Variable2,Vars1,Vars2,Value3),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_string_length],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string_length",Dbw_string_length1),Dbw_string_length1=Dbw_string_length,        interpretpart(string_length,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_string_strings],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string_strings",Dbw_string_strings1),Dbw_string_strings1=Dbw_string_strings,        %trace,        interpretpart(string_strings,Variable1,Variable2,Vars1,Vars2).*//*interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_assertz],[[[Dbw_n,Variable1],[Variable2]]]],Vars1,Vars2,true,nocut) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("assertz",Dbw_assertz1),Dbw_assertz1=Dbw_assertz,        %trace,        interpretpart(assertz,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_stringconcat],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_stringconcat],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_stringtonumber],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_stringtonumber],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_Functions0,_Functions,[[Dbw_n,Dbw_shell_c],[I,P,OVar]],Vars1,Vars2,true,nocut) :-%trace,%get_lang_word("v",Dbw_v),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("shell_c",Dbw_shell_c1),Dbw_shell_c1=Dbw_shell_c,        interpretpart(shell_c,I,P,OVar,Vars1,Vars2).
interpretstatement1(ssi,_Functions0,_Functions,[[Dbw_n,Dbw_string_from_file],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string_from_file",Dbw_string_from_file1),Dbw_string_from_file1=Dbw_string_from_file,        interpretpart(string_from_file,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_Functions0,_Functions,[[Dbw_n,Dbw_string_from_file],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_Functions0,_Functions,[[Dbw_n,Dbw_string_from_file],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatementlp2p5(A,B1,B,Top,Brackets):- A=[], (Top=true-> foldr(string_concat,[B1,Brackets],B); B=Brackets),!.
interpretstatementlp2p5([n,Name],_,Name,_,_Brackets) :- !.
interpretstatementlp2p5([v,Name1],_,Name2,_Brackets) :- string_concat(A,B,Name1),atom_length(A,1),upcase_atom(A,A1),string_concat(A1,B,Name2),!.
kw_for_kw(Text,%T5,T6) :- SepandPad=%".",% "&#@~%`$-+*^,()|:;=_/[]<>{}\s\t\\\"0123456789", % doesn't have "'" xx split_string(Text,SepandPad,SepandPad,Words), open_file_s("connectives.txt",Conn),% subtract(Words,Conn,T1), findall([T12," "],(member(T11,Words),downcase_atom(T11,T12), atom_string(T12,T13), not(member(T13,Conn))),T2), foldr(append,T2,T3), foldr(string_concat,T3,T4), word_frequency_count(["string",T4],Freq), keep(10,Freq,T6).%,/* findall(T4,(member(S,Sents), split_string(S,SepandPad,SepandPad,Text2), subtract(Text2,Conn,KW), sort(KW,KW1),  findall([T11," "],member(T11,KW1),T21), foldr(append,T21,T31), foldr(string_concat,T31,T41), %word_frequency_count(["string",T41],Freq), %(KW=[]->T7=[]; findall([T1," "],member(T1,KW),T2), foldr(append,T2,T3), foldr(string_concat,T3,T4) %kw_for_kw(T4,[],T7))) ),T8),  findall([T1,". "],member(T1,T8),T2), foldr(append,T2,T3), foldr(string_concat,T3,T4),  keep(10,Freq,KW3),  (KW3=[]->T5=T6; (append(T5,[KW3],T7), kw_for_kw(T4,T7,T6))),!.
lfl2html2([Term|Term2],[HTML|HTML2]) :-lfl2html2(Term,HTML),lfl2html2(Term2,HTML2).
list_to_set1(A,B) :- list_to_set1(A,[],B),!.
logic_ff3(Columns1,Result1,[Formula1,and,Formula2]) :-        logic_ff3(Columns1,Result2,Formula1),        logic_ff3(Columns1,Result3,Formula2),        and1(Result2,Result3,[],Result1).
lp2sm_en2test(1,[[["n","query box 1"],[],":-",[[["n","function"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_test(1,[[[n,query_box_1],[],":-",[[[n,function]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
luciancicd :-working_directory1(A1000,A1000),retractall(success1(_)),assertz(success1(_)),gh_init2,retractall(diff_html_n(_)),assertz(diff_html_n(1)),retractall(test_n(_)),assertz(test_n(0)),retractall(success_tmp(_)),assertz(success_tmp([])),    (time1(_T1)->true;get_time1),check_repositories_paths,%(lc_mode(_)->true;%(retractall(lc_mode(_)),assertz(lc_mode("line")))),working_directory1(A1z,A1z),%trace,find_tests_from_repos,working_directory1(_,A1z),retractall(log(_)),assertz(log("")),retractall(success(_)),assertz(success(0)),retractall(ci_fail(_)),assertz(ci_fail([])),lppm_get_registry_luciancicd(LPPM_registry_term1),%(exists_directory('../private2')->true;make_directory('../private2')),(exists_directory('../luciancicd-data')->true;make_directory('../luciancicd-data')),directory_files('../luciancicd-data/',F),delete_invisibles_etc(F,G),findall1([F1,Mod_times12],(member(F2,G),string_concat('../luciancicd-data/',F2,F1),open_file_s(F1,Mod_times1),term_to_atom(Mod_times1,Mod_times12)),Mod_times11),modification_dates(Mod_times2),%trace,    %msort(Mod_times11, Sorted1),    %msort(Mod_times2, Sorted2),    subtract(Mod_times2,Mod_times11,New),        working_directory1(A1,A1),retractall(home_dir(_)),assertz(home_dir(A1)),retractall(ci_end(_)),assertz(ci_end(false)),ci,working_directory1(_,A1),(    %Sorted1=Sorted2(%trace,(New=[]->true;(ci_fail(Ci_fail),forall(member(Ci_fail1,Ci_fail),Ci_fail1=1))))->( writeln2("There are no modifications to repositories to test."));% if (%trace,findall1(Repository1,(member([Path,_],New),string_concat(Path1,".txt",Path),string_concat("../luciancicd-data/mod_times_",Repository1,Path1)),Repositories),%trace,findall1([Repository1,Dependencies5],(member(Repository1,Repositories),%trace,find_all_depending_luciancicd(LPPM_registry_term1,Repository1,[],Dependencies5)%flatten(Dependencies42,Dependencies41),%sort(Dependencies41,Dependencies5)),Dependencies6),findall1(Dependencies5,(member([Repository1,Dependencies5],Dependencies6)),Dependencies8),flatten(Dependencies8,Dependencies83),  sort(Dependencies83,Dependencies9),%trace, %(findall1(Results%[Repository1,T4] %BD='../../Github_lc/build',%(exists_directory(BD)->true;make_directory(BD)),%working_directory1(BD,BD),LCTD="../luciancicd-testing",%trace,findall1(Dependencies990%Results,(member(Repository1,Dependencies9),working_directory1(_,A1),%trace, (success(1)->fail;true), %success_tmp(Tmp31),(forall(member(Tmp4,Tmp31),Tmp4=1)->true;fail),foldr(string_concat,["rm -rf ../luciancicd-testing/"],Command312), catch(bash_command(Command312,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],Text412),writeln1(Text412),abort )),(exists_directory_s(LCTD)->true;make_directory_s(LCTD)),user(User1),find_all_dependencies(LPPM_registry_term1,%[[User1,Repository1]],%%,Description,Dependencies1[[User1,Repository1]%|Dependencies1],[],Dependencies1a),%)), %         time_limit_exceeded,  %        (concat_list(["Error: Cycle in lppm_registry.txt: ",Dependencies1],Note_a),writeln(Note_a),abort)),  append([[User1,Repository1%%,Description,Dependencies1]],Dependencies1a,Dependencies2),findall1(D21,member([_,D21],Dependencies2),D22),append(Dependencies9,D22,D23),  sort(D23,Dependencies990)    ),Dependencies991),    flatten(Dependencies991,Dependencies992),  sort(Dependencies992,Dependencies99),  %trace,   lc_tests(Lc_tests),%trace,%((findall1([Tokens2,Tokens1],(member(Repository1a,Dependencies99), %trace, working_directory1(_,A1),foldr(string_concat,["../../Github_lc/tests_",Repository1a,".txt"],K211), %trace, %open_file_s %trace, member(%file, [K211|File2A1],Lc_tests), %File2A1=[_,Content1], %findall1(*,(member([P,Tokens_i,Tokens_f],File2A1), File2A1=[Tokens2,Tokens1]),Tokens3),  %trace,  findall1(%[ AT2z%,",\n"] ,(member([AT2,_],Tokens3),foldr(string_concat,AT2,AT2z1), term_to_atom(AT2z,AT2z1%AT232 )),AT22),%flatten(AT22,AT2x),%)),AT22), %append(AT24,[_],AT2x), %foldr(string_concat,AT24,AT235), %foldr(string_concat,["[",AT235,"]"],AT232), %term_to_atom(AT231,AT22%AT232 %), foldr(append,AT22%AT231 ,AT233), %trace,%trace, findall1(%[ AT1z%,",\n"] ,(member([_,AT1],Tokens3),foldr(string_concat,AT1,AT1z1), term_to_atom(AT1z,AT1z1%AT132 )),AT12),%flatten(AT12,AT1x),%)),AT12), %append(AT14,[_],AT1x), %foldr(string_concat,AT14,AT135), %foldr(string_concat,["[",AT135,"]"],AT132), %term_to_atom(AT131,AT12%AT132 %), foldr(append,AT12%AT131 ,AT133),  % id changed repos xx, get Tests - run tests from main file in Repositories  % run find deps  % find names, arities  %trace,%pwd, %append(AT233,AT133,AT333),%trace,  findall1(AT233C,(member(AT233A1,AT233),(AT233A1=[[n, comment], [["File delimiter", _, _]]]->AT233C=AT233A1; ((AT233A1=[N, _],(N=[n, comment]->true;N=":-"))->fail; AT233C=[o,AT233A1]))),AT233A), findall1(AT133C,(member(AT133A1,AT133),(AT133A1=[[n, comment], [["File delimiter", _, _]]]->AT133C=AT133A1;AT133C=[n,AT133A1])),AT133A),%trace,%merge_files(AT233A,AT133A,AT333AF),%trace,%merge21(AT233A,AT133A,AT333A),%merge_files(AT233A,AT133A,AT333A),%trace,merge_files1a(AT233A,AT133A,AT333A),%merge3(AT233A,AT133A,AT333A),%AT133A=AT333A,%trace,findall1(AT333C,(member(AT333A1,AT333A),(AT333A1=[[n, comment], [["File delimiter", _, _]]]->AT333C=AT333A1;AT333A1=[_,AT333C])),AT333AD),%trace,%findall1(AT333C,(member(AT333A1,AT333AF),(AT333A1=[[n, comment], [["File delimiter", _, _]]]->AT333C=AT333A1;%AT333A1=[_,AT333C])),AT333AG),%trace,%trace,%pred_list(PL),%writeln(pred_list(PL)),%%trace,%trace,get_order(AT333AD,AT333B), % * merge, copy of new or old from start, into files, place same name, arity preds together % put same pred name arity together or at end if new % use split into lp files  %trace, working_directory1(_,A1), findall1(H,(  member(Dep99,Dependencies99), %* make future depends 99s [dep99]  %(Dep99="b"->trace;true),  %Dep991=[Dep99], %trace,  read_main_file(Dep99,H%_,Dep99_name,Dep99_arity )),H1),  foldr(append,H1,H2), sort(H2,H3), %trace, findall1(Tests_a,(member(Repository1b1,Dependencies99), foldr(string_concat,["../luciancicd-cicd-tests/tests_",Repository1b1,".txt"],Test_script_path),(catch(open_file_s(Test_script_path,Tests_a),_,(writeln2(["Cannot find",Test_script_path]),fail%,abort)))),Tests_b),foldr(append,Tests_b,Tests),%-> retractall(pred_list(_)), assertz(pred_list([]%Dependencies7d )), %retractall(dep99_na(_)), %assertz(dep99_na([])), %trace, findall1(_,( member([Dep99,_,Dep99_name,Dep99_arity],H3),%trace,%writeln(member([*,Dep99,_,Dep99_name,Dep99_arity])), %dep99_na(Dep99_na),/* delete_dep99_na([]%Dep99_na ,AT333DA,AT333),%trace, append(Dep99_na,[[Dep99_name,Dep99_arity]],Dep99_na1), assertz(dep99_na(Dep99_na1%Dependencies7d )),*/%trace, %pred_list(PL1),delete_repeated_preds(AT333AD,AT333AE),%trace,find_dependencies(Dep99_name,Dep99_arity,AT333AE,AT333,Dependencies7d,Pred_numbers0),%get_order(AT333,AT333B),%trace,  %length(AT333,AT333L), %numbers(AT333L,1,[],AT333N),  % New ones  (false%PL1=[] % true - t1-8, false - t9 ->(AT333AH=AT333A,AT333AH1=AT333,AT333AD1=AT333,AT333AD2=AT333); (AT333AH=AT333A, AT333AH1=AT333A,AT333AD1=AT333AD,AT333AD2=AT333)),  %trace,  length(AT333AH1,AT333L), numbers(AT333L,1,[],AT333N3),%trace,  findall1(AT233N1,(member(AT233N1,AT333N3), get_item_n(AT333AH,AT233N1,AT233N2), member(AT233N2,AT133A)),AT233N1a), %[1, 3, 4, 11, 12, 13, 14, 15, 16] %AT233N1a=AT233N, sort(AT233N1a,AT233N),  % %trace, findall1(AT233N1,(member(AT233N1,AT333N3), get_item_n(AT333AH,AT233N1,AT233N2), not(AT233N2=[[n, comment], [["File delimiter", _, _]]]),  /* ((member(AT233N2,AT133A), % AT233N2=[_,[NZ|_]], %not ((NZ=[n, comment]->true;NZ=":-"%,member([_,[NZ|_]],AT133A) )))->true;%(*/ member(AT233N2,AT233A) /*not((member(AT233N2,AT133A), % AT233N2=[_,[NZ|_]], %not ((NZ=[n, comment]->true;NZ=":-"%,member([_,[NZ|_]],AT133A) )))) */ ),AT233N_old1a), %AT233N_old1a=AT233N_old, sort(AT233N_old1a,AT233N_old), % [1, 2, 4, 5, 6, 7, 8, 9, 10] %length(AT233,AT233L) %trace, %numbers(AT233L,1,[],AT233N), /*  ((member([Pred_name1|Rest2],AT1331), pred_rest(Arity1,Rest2,Lines2))-> (append(AT333,)(T10,T11,[],T12), delete(AT1331,[[[n, comment], [["File delimiter", PZ, FZ]]]|T11],AT1333)); (T12=T10,AT1331=AT1333)), append(AT333,[[[n, comment], [["File delimiter", PZ, FZ]]]|T12],AT3332), merge_files3(AT2333,AT1333,AT3332,AT3331).
lucianpl1_1(Debug,Query,Functions1,Result) :-retractall(types(_)), assertz(types(off)),lucianpl111(Debug,Query,Functions1,Result),!.
lucianpl_1(Debug,Query,Functions1,Result) :-retractall(types(_)), assertz(types(off)),lucianpl11(Debug,Query,Functions1,Result),!.lucianpl_1(Debug,Query,TypeStatements,ModeStatements,Functions1,Result) :-retractall(types(_)), assertz(types(on)),retractall(typestatements(_)), findall([A,C],(member([A,B],TypeStatements),expand_types(B,[],C)),TypeStatements1),assertz(typestatements(TypeStatements1)),retractall(modestatements(_)), assertz(modestatements(ModeStatements)),lucianpl11(Debug,Query,Functions1,Result).
main :-server(8000), sleep(86400).
make_directory_recursive_s(LCTD,PZ1) :- split_string(PZ1,"/","/",PZ2), delete(PZ2,"",PZ3), make_directory_recursive_s(LCTD,"",%PZ4, PZ3),!.
make_mind_reading_tree4(["aaaabbbbcccc","aaaaddddeeee"],[[1,"a",5],[5,"b",[-,"aaaabbbbcccc"]],[5,"d",[-,"aaaaddddeeee"]]]).
make_mind_reading_tree4(["cccbbb"],[[1, "b", [-, "cccbbb"]]]).
match4(Variable1,Variable2,Vars1,Vars2) :-%%trace,match4_list(Variable1,Variable2,Vars1,Vars2).
match4_10(Variable1,Variable2,Vars1,Vars2) :-%%interpretpart(match4,Variable1,[v,sys2],Vars1,Vars3,_),%%getvalue([v,sys2],Value1,Vars3))),not(variable_name(Variable2)),is_list(Variable2),%%findall(Value2,(member(A,Variable2),getvalue(A,Value2,Vars1)),X),getvalue_match(Variable2,X,Vars1),%%trace,match4(Variable1,X,Vars1,Vars2).
match4_2(Variable1,Variable2,Vars1,Vars2) :-match4_10(Variable1,Variable2,Vars1,Vars2),!.
match4_list(Head1,Head2,Vars1,Vars2) :-variable_name(Head1),not(variable_name(Head2)),not(Head2="|"),getvalue(Head1,Value1,Vars1),not(Value1=empty),match4(Value1,Head2,Vars1,Vars2).
match4_new(S1,S2,V1,V2%,_Standard_or_e4) :- match_get_vals(S1,[],S3,V1), simplify(S3,S5), match_get_vals(S2,[],S4,V1), simplify(S4,S6),  match_put_vals(S5,S6,V1,V2%,_Standard_or_e4 ),!.
match4_new_22(Variable1,Variable2,Vars1,Vars2%,Standard_or_e4) :-%writeln(match4_new_22(Variable1,Variable2,Vars1,Vars2)),%trace,(match4_new_220([Variable1],[Variable2],Vars1,Vars2%,Standard_or_e4)->true;match4_new_220([Variable2],[Variable1],Vars1,Vars2%,Standard_or_e4)),!.
match4_new_222(Variable1,Variable2,Vars1,Vars2%,Standard_or_e4) :-%trace,occurs_check(Variable1,Variable2),%notrace,match4_new([Variable1],[Variable2],Vars1,Vars3%,Standard_or_e4),findall([V,Val2],(member([V,Val1],Vars3),simplify(Val1,Val2)),Vars2),!.
match_char("[","]").match_char("(",")").
max_depth(7).
melodyharmony(Form1,CPT,Maxlength,Melody,Harmony) :-Partlength is Maxlength div 3,Extra is Maxlength mod 3,Total is Partlength+Extra,_Parts=[Partlength,Partlength,Partlength,Total],%%(CPT=1451->findall(A,note0(_,A),Notes);%%findall(A,note0(_,A),Notes)),%% What note should the song start on?%%trialy2(Notes,R1),%%findbest(R1,R11),%%R11='A',melodyharmony(Form1,CPT,_Parts2,_R11,_R2,[],Melody,[],Harmony).
melodyharmony(Form1,CPT,Maxlength,Melody,Harmony) :-Partlength is Maxlength div 3,Extra is Maxlength mod 3,Total is Partlength+Extra,_Parts=[Partlength,Partlength,Partlength,Total],%%(CPT=1451->findall(A,note0(_,A),Notes);%%findall(A,note0(_,A),Notes)),%% What note should the song start on?%%trialy2(Notes,R1),%%findbest(R1,R11),%%R11='A',melodyharmony(Form1,CPT,_Parts2,_R11,_R2,[],Melody,[],Harmony).melodyharmony([],_CPT,_Parts,N,N,Melody,Melody,Harmony,Harmony) :- !.
member2(A,B):-member(B,A).equals4(A,B):-A=B.
memberlp2p1(Functions2,Algorithm1,Algorithm2) :-%trace,Function=[n,use_module],        Functions2=[Function,Arguments2],                                interpretstatementlp2p2a(Function,Algorithm1,Algorithm3a,"[]"),                string_concat(Algorithm3a,"(",Algorithm3d),        (Arguments2=[[[n, library], [A]]]->foldr(string_concat,[Algorithm3d,"library(",A,"))"],Algorithm2a);                interpretstatementlp2p2b(Arguments2,Algorithm3d,Algorithm2a,"()")),        write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
merge_lists_a1(_,[],Options1,Options2,Options3,N,N) :- append(Options1,Options2,Options3),!. %*?merge_lists_a1(N1,A1,Options1,Options2,Options3,NA61,NA7) :-%(N1=2->trace;true),%writeln1(merge_lists_a1(N1,A1,Options1,Options2,Options3,NA61,NA7)),%notrace,A1=[A2|A3],findall([N2,A5,N3],(member([N1,A2,N2],Options1),member([N2,A5,N3],Options1)),A4),%findall([-,_],(member([N1,A2,[-,_]],Options1)),A41),findall([N1,A2,N2],(member([N1,A2,N2],Options1)),A6),(%trace,(merge_lists_a2(A4)%->true;(length(A41,L),length(Options1,L))->(%% merge N1 A2 N*, change N* in other states%trace,merge_lists_a3(A6,Options1,Options4),findall(N2,(member([N1,A2,N2],Options4)),NA6));%(trace,(%trace,%subtract(A6,merge_lists_a3(A6,Options1,Options4),%NA6=[]findall(N2,(member([N1,A2,N2],Options4)),NA6) %**)),append(Options2,Options4,Options5),append(NA61,NA6,NA62),%Options2=Options4),%trace,%delete(Options1,[N1,A2,N2],Options1a),merge_lists_a1(N1,A3,Options5,[],Options3,NA62,NA7).
merge_lists_a4(_N2,[],Options1,Options2,Options3) :- append(Options1,Options2,Options3),!.merge_lists_a4(N2,A8,Options1,Options2,Options3) :-%trace,%writeln1(merge_lists_a4(N2,A8,Options1,Options2,Options3)),A8=[[N1,A,N3]|A9],delete(Options1,[N1,A,N3],Options2aa),%%append(Options2,[[N1,A,N2]],Options2a),%trace,merge_lists_a5(N2,N3,Options2aa,[],Options4,[],Options5),% remove Options4=[n from o5findall(N4,(member([N4,_,_],Options4)),N41),subtract1(Options5,N41,[],Options45),append(Options2,Options45,Options245),%union(Options4,Options5,Options45),%writeln1(Options45),%writeln1(merge_lists_a5(N2,N3,Options1,Options2,Options4,[],Options5)),merge_lists_a4(N2,A9,Options245,[],%***Options4,Options31),%(N2=2->trace;true),append(Options31,Options4,Options3).
meta2mid :-retractall(ask_for_rhythm(_)),assertz(ask_for_rhythm(false)),meta2mid1.
midnight_algorithm_input_list :-writeln("Algorithm name?"),read_string(user_input, "\n", "\r", _End2, Alg_name),writeln("List item 1?"),read_string(user_input, "\n", "\r", _End21, List_item1),writeln("List item 2?"),read_string(user_input, "\n", "\r", _End22, List_item2),writeln("List item 3?"),read_string(user_input, "\n", "\r", _End23, List_item3),writeln("List item 4?"),read_string(user_input, "\n", "\r", _End24, List_item4),Algorithm=[[[n,Alg_name],[[[List_item1,List_item2],[List_item2,List_item3],[List_item3,List_item4]]]],        [[[n,Alg_name],[[[t,list],[[t,list2]]]]],        [[t,list2],[[t,string],[t,string]]],        [[n,reverse],[[[t,list],[[t,list2]]],[[t,list],[[t,list2]]],[[t,list],[[t,list2]]]]],        [[n,function2],[[[t,list],[[t,list2]]],[t,string],[t,string]]],        [[n,length],[[[t,list],[[t,list2]]],[t,number],[t,number]]]],                [[[n,Alg_name],[input]],        [[n,reverse],[input,input,output]],        [[n,function2],[input,input,input]],        [[n,length],[input,input,output]]],[[[n,Alg_name],[[v,a]],":-",[[[n,length],[[v,a],0,[v,b]]],[[n,=],[[v,b],1]]]],[[n,Alg_name],[[v,a]],":-",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],":-",[[[n,member],[[v,d],[v,a]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],":-",[[[n,member],[[v,d],[v,a]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],":-",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]],writeln1([algorithm,Algorithm]).
mind_read(Item,List) :-trialy2(List,R1),findbest(R1,Item),!.
mind_read(Item,[Item]) :- !.
minimise_strings2([],_List1,_,_A,_Map) :- !.
name10(XXs) --> [X], {char_code(Ch1,X),(char_type(X,alnum)->true;(Ch1='_'->true;(Ch1='!'->true;Ch1='.'))),atom_string(CA,Ch1),downcase_atom(CA,CA2)},name10(Xs), {atom_concat(CA2,Xs,XXs)}, !. name10(XXs) --> [X], {char_code(Ch1,X),(char_type(X,alnum)->true;(Ch1='_'->true;Ch1='!')),atom_string(CA,Ch1),downcase_atom(CA,XXs)}, !. %%name10('') --> [].name11(X1) --> %{trace},name101(X11),{(string_atom(X12,X11),number_string(X1,X12)->true;((%contains_string(X11)->string_atom2(X1,X11)%;X11=X1))))}.%%., X2->X1 {atom_string(X2,X1)}.
name20(XXs) --> [X], %{trace},%lookahead(Y),{char_code(Ch1,X),%%char_type(X,alnum)->true;%trace,%writeln(Y),%(Ch1='-'->trace;true),%((Ch1='-',[Y]=`>`)->fail;((Ch1='+'->true;(Ch1='-'->true;(Ch1='*'->true;(Ch1='/'->true;(Ch1='<'->true;(Ch1='>'->true;(Ch1='='))))))),atom_string(CA,Ch1),downcase_atom(CA,CA2)},name20(Xs), {atom_concat(CA2,Xs,XXs)}, !. name20(XXs) --> [X], {char_code(Ch1,X),%%(char_type(X,alnum)->true;(Ch1='+'->true;(Ch1='-'->true;(Ch1='*'->true;(Ch1='/'->true;(Ch1='<'->true;(Ch1='>'->true;(Ch1='='))))))),atom_string(CA,Ch1),downcase_atom(CA,XXs)}, !. %%name20('') --> [].
new_student_number(First,Last,N) :-meditators(M1),meditators2(M2),append(M1,M2,M3),length(M3,L),random(X),N is ceiling(L*X),get_item_n(M3,N,[First,Last|_]),!.
no_singletons(Vars1,Program):-findall(DA,(member(C,Program),C=[_E,D],member(DA,D)),Vars2),%%append_list(Vars2,Vars2A),append(Vars1,Vars2,Vars3),findall(Count1,(member(Item,Vars3),aggregate_all(count,(member(Item,Vars3)),Count1),Count1=1),G),G=[].
number_of_custs(Threats1):-%find_time(H,M,S),number_of_custs(0,Threats1).
numbers(N2,N1,Numbers,Numbers) :-N2 is N1-1,!.
object(t15,[[0, [1]], [1, [3, 4]], [2, []], [3, [2]], [4, [2, 6, 7]], [5, []], [6, [5, 8, 9, 10, 11, 24]], [7, [6, 7, 8, 9, 10, 11]], [8, [16, 17]], [9, [13, 14]], [10, [19, 20]], [11, [3, 4]], [12, []], [13, [12, 21, 22]], [14, [13, 14]], [15, []], [16, [15, 23]], [17, [16, 17]], [18, []], [19, [18, 21, 22]], [20, [19, 20]], [21, [24]], [22, [24]], [23, [24]], [24, []]],[18, 24, 22, 21, 19, 20, 10, 12, 13, 14, 9, 5, 23, 15, 16, 17, 8, [loop1, [6, 7, 11, 4]], 2, 3, 1, 0]).object(t151,[[0, [6, 7]], [6, []], [7, [6, 7]]],[6,7,0]).
only_ssi_test(1,[[n,findall],[[[v,a],[v,b]],[[n,appendz],[[v,a],[v,b],[1,2,3]]],[v,c]]],[[[n,appendz],[[],[v,a],[v,a]]%,":-",[[[n,true]]]],[[n,appendz],[[[v,a],"|",[v,d]],[v,b],[[v,a],"|",[v,c]]],":-",[[[n,appendz],[[v,d],[v,b],[v,c]]]%,[[n,cut]]]]],[[[[v,c],[[[],[1,2,3]],[[1],[2,3]],[[1,2],[3]],[[1,2,3],[]]]]]]).
open_string_file_s(Path,File_string) :-phrase_from_file_s(string(File), Path),string_codes(File_string,File),!.
order_preds_bottom_up_bfs(L,Functions,Ordered_pred_nums1,Ordered_pred_nums2) :-Functions=[[N,P]|F],append(Ordered_pred_nums1,[[L,N]],Ordered_pred_nums3), order_preds_bottom_up1(L,P,F,Ordered_pred_nums3,Ordered_pred_nums2),!.
p2lp_test(1,":-use_module(library(date)).",[[":-",[n,use_module],[[[n,library],[date]]]]]).
p2lpconverter([string,String],List3) :-turn_keep_comments_on,%File1="test1.pl",string_codes(String,String1),(phrase(file(List3),String1)->true;%(writeln(Error),fail),!.
pft_expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),Data1=[Data2Data3|Data41],not(Data2Data3=[T,_]),curly_head_taila(Data2Data3,Data2,Data3),pft_expand_types1(Data2,[],Types3),pft_expand_types1(Data3,Types3,Types4),Types5=[[[T,Dbw_list],Types4]],%trace,findall(Types61,(member(Data4,Data41),pft_expand_types1([Data4],[],Types61)),Types62),foldr(append,Types62,Types6),append_list3([Types1,Types5,Types6],Types2),!.
pft_expand_types1([],Types,Types,VD,VD) :- !.
pp0(List) :-writeln("["),pp1(List),writeln("]"),!.
prepare_file_for_ml(String000,String021) :-string_codes(String001,String000),downcase_atom(String001,String00),split_string(String00, "\n\r", "\n\r", String01),delete(String01,"",String02),findall(String03,(member(String02a,String02),split_string(String02a,".",".",String04),((String04=[String05|String06],number_string(Number05,String05),number_sentences(Number05,1,String06,[],String03))->true;(findall(String08,(SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",member(String04a,String04),split_string(String04a,SepandPad,SepandPad,String09),append_list([[""],"",String09],String08)),String03)))),String0211),append_list2(String0211,String021).
pretty_print(Object,Method,A) :- object(Object,Items2), pretty_print2(Method,Items2,A).
pretty_print(dfs_in_order,Items1) :- pretty_print_dfs_in_order(Items1,0).
pretty_print(dfs_post_order,Items1) :- pretty_print_dfs_post_order(Items1,0).
process_body2(Body1,Body2) :-Body1=[Statement|Statements],not(predicate_or_rule_name(Statement)),process_statement1(Statement,Result1),process_body2(Statements,Result2),   append_list2([Result1,Result2],Body2),!.
process_body2([],[]):-!.%%,Body3%%process_body2([],Body,Body) :- !.
process_t2b(A,C) :- replace_t2b(Replacements), atom_string(A1,A), replace1_t2b(Replacements,A1,D1), atom_string(D1,C),!.
put_sub_term_wa_ae([E,A],B,C) :- put_sub_term_wa(A,E,B,C),!.
put_sub_term_wa_ae_smooth([E,A],B,C) :- put_sub_term_wa_smooth(A,E,B,C),!.
put_sub_term_wa_ae_smooth_cycle_s2a(RS3,RS4):-sub_term_wa([split1,_],RS3,In5),(In5=[[Ad,[split1,C]]|_]->(In6=[[Ad,C]],%findall([Ad,C],member([Ad,[split1,C]],In5),In6),%trace,foldr(put_sub_term_wa_ae_smooth,In6,RS3,RS41),put_sub_term_wa_ae_smooth_cycle_s2a(RS41,RS4));RS3=RS4).
renderh21(_Form1,_Harmony,[],_Track,Bar,Bar,Voice,Voice) :- !.
renderm1(_Form1,_Melody,[],_Track1,_Track2,Song,Song) :- !.
renderm1(_Form1,_Melody,[],_Track1,_Track2,Song,Song) :- !.renderm1(Form1,Melody,MelodyParts1,Track1,Track2,Song1,Song2) :-%%length(Form1,FormLength),MelodyParts1=[MelodyParts2|MelodyParts3],MelodyParts2=[[_A,[InstrumentNumber1,_B],_C]|_D],InstrumentNumber2 is InstrumentNumber1,%% + 1,printheader(Track1,[InstrumentNumber2,_],Song1,Song3),%%renderm21(Form1,Melody,MelodyParts1,Track1,1,_,Song3,Song4),renderm21(Form1,Melody,MelodyParts2,Track1,1,_E,Song3,Song4),Track3 is Track1+1,renderm1(Form1,Melody,MelodyParts3,Track3,Track2,Song4,Song2),!.
renderm21(_Form1,_Melody,[],_Track,Bar,Bar,Voice,Voice) :- !.
renumber_cps1([[A,B|C]],A,B,List1,List2,Curr_cp,Curr_cp2,Curr_cp31,Curr_cp3,Swaps1,Swaps2) :-Curr_cp2 is Curr_cp+1,append(List1,[[Curr_cp,Curr_cp2|C]],List2),append(Swaps1,[[[A,B|C],[Curr_cp,Curr_cp2|C]]],Swaps2),(A=Curr_cp31-> Curr_cp3=Curr_cp;true),(B=Curr_cp31-> Curr_cp3=Curr_cp2;true),!.renumber_cps1(List1,Min_cp,Max_cp,List1a,List2,Curr_cp,Max_cp2,Curr_cp31,Curr_cp3,Swaps1,Swaps2) :-member([Min_cp,B|C],List1),delete(List1,[Min_cp,B|C],List3),Curr_cp2 is Curr_cp+1,append(List1a,[[Curr_cp,Curr_cp2|C]],List4),append(Swaps1,[[[Min_cp,B|C],[Curr_cp,Curr_cp2|C]]],Swaps3),(Min_cp=Curr_cp31-> Curr_cp3=Curr_cp;true),(B=Curr_cp31-> Curr_cp3=Curr_cp2;true),renumber_cps1(List3,B,Max_cp,List4,List2,Curr_cp2,Max_cp2,Curr_cp31,Curr_cp3,Swaps3,Swaps2),!.
replace0(Input,Find,Replace,SepandPad,M,Output0) :-replace00(Input,Find,Replace,SepandPad,[],Output1),truncate(Output1,M,Output0),!.
replace_cp(Choice_point_trail1e,Cp_a1,Cp_a2,D1,D2,Choice_point_trail1b,CP_Vars1,CP_Vars2) :-%trace,(member([Cp_a1,Cp_a2|D1],Choice_point_trail1e)->true;(writeln0("replace_cp abort"),abort)),delete(Choice_point_trail1e,[Cp_a1,Cp_a2|D1],Choice_point_trail1f),append(Choice_point_trail1f,[[Cp_a1,Cp_a2|D2]],Choice_point_trail1g),%writeln1(["*5",append(Choice_point_trail1f,[[Cp_a1,Cp_a2|D2]],Choice_point_trail1g)]),set(curr_cp,Cp_a1,CP_Vars1,CP_Vars2),sort(Choice_point_trail1g,Choice_point_trail1b).exit_findall_line(Pred_id1,Globals1,Predicate_number,Line_number_b,Functions,Line_number_c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("true",Dbw_true1),Dbw_true1=Dbw_true,get_lang_word("findall_exit_function",Dbw_findall_exit_function1),Dbw_findall_exit_function1=Dbw_findall_exit_function,get_lang_word("exit_function",Dbw_exit_function1),Dbw_exit_function1=Dbw_exit_function,%trace,member([Predicate_number,_F|Rest],Functions),(Rest=[_Args,":-",Lines]->true;(Rest=[_Args]->Lines=[[[Dbw_n,Dbw_true]]];(Rest=[":-",Lines];(Rest=[],Lines=[[[Dbw_n,Dbw_true]]])))),get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,((Line_number_b=[Dbw_findall_exit_function,C]->true;Line_number_b=[Dbw_exit_function,C])->(member([C,[Dbw_on_true,_A],[Dbw_go_after,B]|_Line],Lines),exit_findall_line(Pred_id1,Globals1,Predicate_number,B,Functions,Line_number_c));%find_line_number(Line_number_c,E),%member([[skip,Pred_id,E],Skip],Globals),%debug_exit(Skip,Line),(Line_number_c=Line_number_b%trace,member([Line_number_b,["on true",_A],["go after",Line_number_c]|_],Lines))).
replace_cps(_,[],B,B) :- !.
replace_empty_with_undefined(Values,Values_u) :- get_lang_word("v",Dbw_v),findall(Values_u1,(member(Value,Values),replace_in_term(Value,[Dbw_v,_],_,Values_u1)),Values_u),!.
replace_items(N252,LSs3,N255,N249):- replace_items1(N252,LSs3,N255,N2491), %trace, foldr(append,N2491,N249).replace_items1([4],_LSs3,N250,N249) :- append(N250,[[4]],N249),!.
replace_loop1(T,T,[]) :- !.replace_loop1(T1,T2,[[R1,R2]|Rs]%,Q,T1) :-%T1=[T11|T12],%/*%((%downcase_atom(Q3,Q31),%atom_string(Q31,Q32),%member([T11,Q5],Rs),%append(T2,[Q5],T4))->true;%append(T2,[T11],T4)),%*/replace2(T1,R1,R2,T3),replace_loop1(T3,T2,Rs),!.
replace_pred_names(Body1,Body2,Body3,To_replace,Replace_with) :-get_lang_word("n",Dbw_n),        Body1=[[[Dbw_n,"->"],[Statements1,Statements2]]|Statements3],  %Number1a is Number1+1,        replace_pred_names([Statements1],[],Body4,To_replace,Replace_with),       replace_pred_names([Statements2],[],Body5,To_replace,Replace_with),        replace_pred_names(Statements3,[],Body3a,To_replace,Replace_with),                append(Body4,Body5,Body6),                          append(Body2,[[[Dbw_n,"->"],Body6]|Body3a],Body3),        %append(Body3,Body4,Body34),        %Body6=[Number1,[n,"->"],Body34        %],        %append([Body6],Body5,Body2),        !.
replace_pred_names([],N,N,_,_):-!.%%,Body3%%replace_pred_names([],Body,Body) :- !.
replace_vars(Body1,Body2,Body3,Var_index1,Var_index2,Var_table1,Var_table2) :-get_lang_word("n",Dbw_n),        Body1=[[[Dbw_n,"->"],[Statements1,Statements2]]|Statements3],  %Number1a is Number1+1,        replace_vars([Statements1],[],Body4,Var_index1,Var_index3,Var_table1,Var_table3),       replace_vars([Statements2],[],Body5,Var_index3,Var_index4,Var_table3,Var_table4),        replace_vars(Statements3,[],Body3a,Var_index4,Var_index2,Var_table4,Var_table2),                        append(Body4,Body5,Body6),                  append(Body2,[[[Dbw_n,"->"],Body6]|Body3a],Body3),        %append(Body3,Body4,Body34),        %Body6=[Number1,[n,"->"],Body34        %],        %append([Body6],Body5,Body2),        !.
repositories_paths(Paths) :- (ci_end(true)-> output_path(Paths); ( repositories_paths1(Paths1), findall1(Paths2,(member(Paths3,Paths1), ((string_concat(_Paths4,"/",Paths3), Paths2=Paths3)->true; string_concat(Paths3,"/",Paths2))),Paths))),!.
restlast([],_,_,_) :- fail, !.restlast([Last],Rest,Rest,Last) :-Last=[v,_],!.
ro([r,_]).
rs_and_data_to_term0(A,D,D,%RSa,RSa,T,T,_T2_old,_First) :- %trim_brackets(A,A1),%writeln1(A),(%A=[output,T2_old]->true;A=[]),!.
rule(Program1,RuleName,InModes,OutModes,InputVars1,InputVars2,VarList,VarList2,OutputVars,Rule) :-/*findall(Rule_vars1,member([_Rule_name,Rule_vars1],Program1),Rule_vars2),foldr(append,Rule_vars2,Rule_vars3),% count varssort(Rule_vars3,K),findall(G,(member(G,K),findall(G,member(G,Rule_vars3),H),length(H,J),J>2),L),% remove vars occuring more than twice%(not(InputVars10=[])->trace;true),(var(InputVars10)->InputVars10=InputVars1;subtract(InputVars10,L,InputVars1)),(var(VarList0)->VarList0=VarList;subtract(VarList0,L,VarList)),%notrace,*/%trace,%writeln1(rule(Program1,RuleName,InModes,OutModes,InputVars1,InputVars2,VarList,VarList2,OutputVars,Rule)),%notrace,rule1(RuleName,InModes,OutModes,InputVars1,InputVars2a,VarList,VarList2a,OutputVars,Rule1),((1 is InModes+OutModes,member(Rule1,Program1))->(InputVars1=[_|InputVars3],rule(Program1,RuleName,InModes,OutModes,InputVars3,InputVars2,VarList,VarList2,OutputVars,Rule2),Rule=Rule2);(%%InputVars1=InputVars3, *** Commented outRule=Rule1,InputVars2=InputVars2a,VarList2a=VarList2))%%writeln1(Rule),(Rule=[[n,-],[[v,c],[v,c],[v,d]]]->true;true).%%->writeln(rule(RuleName,InModes,OutModes,InputVars1,InputVars2,VarList,VarList2,OutputVars,Rule));true).%%(writeln(stop),abort)).
rule1(RuleName,1,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-member(Var,InputVars1),rule2(RuleName,Var,VarList,VarList2,Rule,Var1),append(InputVars1,[Var1],InputVars2).
rule2(RuleName,Var,VarList,VarList2,Rule,Var1) :-var(VarList,Var1,VarList2),Rule=[RuleName,[Var,Var1]],!.%%,%%member(Var,!.
save_file_s(Path,Content_term_or_string) :-((compound(Content_term_or_string)->true;Content_term_or_string=[])->term_to_atom(Content_term_or_string,String);((string(Content_term_or_string)->true;(atom(Content_term_or_string)->true;number(Content_term_or_string)))->Content_term_or_string=String;(concat_list(["Error: save_file_s content not in compound, atom or string format."],Notification),writeln0(Notification),abort))),(open_s(Path,write,Stream),write(Stream,String),close(Stream)),%sleep(2),!.
save_if_same(C,RS11,RS1) :-(%true%C=RS11->(rec_join_vars(RJV),(member([C,RS11,N],RJV)->true;(get_rec_join_n(N),append(RJV,[[C,RS11,N]],RJV1),retractall(rec_join_vars(_)),assertz(rec_join_vars(RJV1)))),RS1=[[rjv,N]]);RS11=RS1),!.
server(Port) :-        http_server(http_dispatch, [port(Port)]).
set_up_luciancicd :-get_time1,check_repositories_paths,working_directory1(A1,A1),modification_dates(Mod_times),clear_mod_dates,findall1(_,(member([K2,Mod_time52],Mod_times),open_s(K2,write,S),write(S,Mod_time52),close(S)),_),sleep(2),!,%A1="../../Github_lc/", %working_directory1(_,"../../Github_lc/"),%working_directory1(_,A1),%retractall(home_dir(_)),assertz(home_dir(A1)),%retractall(home_dir(_)),assertz(home_dir(_))%retractall(ci_fail(_)),assertz(ci_fail([])),retractall(ci_end(_)),assertz(ci_end(false)),ci,ci_end,working_directory1(_,A1).
simplify_types(Data1,Types1,Types2) :-Data1=[Data2|Data3],simplify_types(Data2,Types1,Types3),simplify_types(Data3,Types3,Types2),!.
solfatonotes([],Progression1,Progression1) :- !.
spaces(XXs) --> [X], {X=32}, spaces(Xs), {char_code(Ch,X),atom_string(CA,Ch),atom_concat(CA,Xs,XXs)}, !. %% Spacespaces('') --> [].
split_by_number_of_items(List,N2,List10,List2) :-%%N2 is N1-1,length(List1,N2),append(List1,List2,List),(List1=[_] -> List1=[List10] ; List1=List10).
splitfurther(BrDict01,N) :-   phrase(file0(N),BrDict01).file0(N) --> "[", file(N), "]", !.
string_to_list_a1([],N,N,Options,Options) :- !.
strip(A,G) :- string_codes(A,C),C=[_|D],reverse(D,E),E=[_|F],reverse(F,H),string_codes(G,H)./**lppm_get_registry1(LPPM_registry_term1) :-catch(phrase_from_file_s(string(LPPM_registry_string), "lppm_registry1.txt"),_,(writeln1("Error: Cannot find lppm_registry1.txt"),abort)),term_to_atom(LPPM_registry_term1,LPPM_registry_string).
strip_illegal_chars1 :-directory_files("raw_sources/",F),delete_invisibles_etc(F,G),findall(String00,(member(H,G),string_concat("raw_sources/",H,String00b),phrase_from_file_s(string(String001), String00b),string_codes(String000,String001),string_concat(String000,"\n\n",String00_a),%%trace,strip_illegal_chars(String00_a,"",String00),%%split_on_substring(String00,"\n\n","",J1),%%maplist(append,[J2],[J1]),%%findall(J4,(member(J3,J2),%%trace,%%concat_list(J3,J4)),K1),%%delete(J1,"",K1),term_to_atom(String00,K),string_concat("sources/",H,String00bb),(open_s(String00bb,write,Stream1),write(Stream1,K),close(Stream1))),_T).
sub_term_types_wa(H,A,B) :- dynamic(stwa/1), retractall(stwa(_)), assertz(stwa(types)), copy_term(H,H1), sub_term_wa2([1],_Ns2,0,A,H1,[],B,true), !.% find terminal lists with particular types% sub_term_types_wa([all([string])],["a","b",["c","d",["e"]]],In).
sum(A,S) :-sum(A,0,S), !.
t2ab_br2(List1,N):-%_,A,A,B,B,C,C,0,L,L) :- !.
test(101,[[n,equals41],[1,[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,c],[v,b]],":-",        [       [[n,equals4],[[[[v,a],[v,a]],[v,a]],[[v,c],"|",[v,b]]]]        ]]        ],[[[[v, c], [1,1]],[[v,b],[1]]]]).test(102,[[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]],[        [[n,equals41],[[v,a],[v,d],[v,b1],[v,b2],[v,b3]],":-",        [       [[n,equals4],[[[v,a],"|",[v,d]],[[v,b1],[v,b2],[v,b3]]]]        ]]        ],[[[[v, b1], 1],[[v,b2],2],[[v,b3],3]]]).test(103,[[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]],[        [[n,equals41],[[v,a],[v,d],[v,b1],[v,b2],[v,b3]],":-",        [       [[n,equals4],[[[v,b1],[v,b2],[v,b3]],[[v,a],"|",[v,d]]]]        ]]        ],[[[[v, b1], 1],[[v,b2],2],[[v,b3],3]]]).
test(101,[[n,equals41],[1,[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,c],[v,b]],":-",        [       [[n,equals4],[[[[v,a],[v,a]],[v,a]],[[v,c],"|",[v,b]]]]        ]]        ],[[[[v,b],[1]],[[v,c],[1,1]]]]).
test(102,[[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]],[        [[n,equals41],[[v,a],[v,d],[v,b1],[v,b2],[v,b3]],":-",        [       [[n,equals4],[[[v,a],"|",[v,d]],[[v,b1],[v,b2],[v,b3]]]]        ]]        ],[[[[v, b1], 1],[[v,b2],2],[[v,b3],3]]]).
test(105,[[n,member2a],[[1,11,111],[v,b]]],[        [[n,member2a],[[v,a],[v,b]],":-",        [       [[n,member2],[[v,a],[v,b]]],[[n,cut]]]        ]        ],[[[[v,b],1]]])./**%% Need to analyse body, test whether cut is after a statement, cut resultstest(105a,[[n,findall1],[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[v,b1],[[[n,member2],[[v,a],[v,a1]]],                [[n,cut]],                [[n,findall],[[v,a2],[[n,member2],[[v,a1],[v,a2]]],                [v,b1]]]                ],                                [v,b]]]        ]]        ],[[[[v,b],[[1,11,111]]]]]).
test(109,[[n,middle],[2,[v,b]]],[        [[n,middle],[[v,a],[v,b]],":-",        [       [[n,/],[[v,a],2,[v,b]]]        ]]               ],[[[[v,b],1]]]).
test(125,[[n,equals41],[[[[v,a],[v,c]],"|",[v,b]]]],[        [[n,equals41],[[[1,2],3,4]]]        ],[[[[v,a],1],[[v,b],[3,4]],[[v,c],2]]]).
test(134,[[n,equals41],[[[v,a],[v,c],"|",[v,b],"|",[v,d]]]],[        [[n,equals41],[[1,2,3,4]]]        ],[]).
test(15,[[n,grammar1],["[[aa,b],1]",[v,t]]],%%test(15,[[n,compound213],["","",[["a"],1],[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,compound],[[v,u],"",[],[v,t]]]   %%[[n,number21],[[v,u],"","",[v,t]]]   %%[[n,compound213],["","",[["a"],1],[v,t]]]  ]  ],  [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]], %% swapped these  [[n,compound],[[v,t],[v,u]],"->",  ["[",[[n,compound21],[[v,t],[v,v]]],"]",  [[n,compound213],[[v,v],[v,u]]]]],  [[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],  %%[[n,lookahead],["]"]],  [[n,code],[[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],",",  [[n,compound21],[[],[v,compound1name]]],  [[n,code],[[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]]]],  [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,u]]],[[n,code],  [[n,stringtonumber],[[v,u],[v,t]]]]]],  [[n,item],[[v,t]],"->",[[[n,word21],["",[v,t]]]]],  [[n,item],[[v,t]],"->",[[[n,compound],[[],[v,t]]]]],  [[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,commaorrightbracketnext]],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]],  [[n,word212],["","",[v,t],[v,t]]],  [[n,word212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[[n,commaorrightbracketnext]],  [[n,code],[[n,letters],[[v,a]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,letters],[[v,a]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word21],["",[v,wordstring]]],  [[n,code],  [[n,stringconcat],[[v,v],[v,wordstring],[v,u]]]]]],    [[n,commaorrightbracketnext],"->",  [[[n,lookahead],[","]]]],  [[n,commaorrightbracketnext],"->",  [[[n,lookahead],["]"]]]],    [[n,lookahead],[[v,a],[v,a],[v,b]],":-",  [[[n,stringconcat],[[v,b],[v,d],[v,a]]]]]%%],[[[v,t],[["a"],1]]]).
test(150,[[n,equals41],[[[4,5,6]],[v,c]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,maplist],[[n,append],[v,a],[1,2,3],[[v,b],"|",[v,d]]]]        ]]        ],[[[[v,c],1]]]).
test(154,[[n,equals41],[[[4,5,6]],[v,c]]],[        [[n,equals41],[[v,a],[v,d]],":-",        [       [[n,maplist],[[n,append],[v,a],[1,2,3],[1,"|",[v,d]]]]        ]]        ],[[[[v,c],[2,3,4,5,6]]]]).test(155,[[n,equals41],[[v,a]]],[        [[n,equals41],[[v,a]],":-",        [       [[n,equals4],[[v,a],[1,"|",[2,3]]]]        ]]        ],[[[[v,a],[1,2,3]]]]).test(156,[[n,equals42],[[v,a],[[v,b],[v,c]]]],[        [[n,equals42],[[[v,d],[v,e]],[v,f]],":-",        [               [[n,equals4],[[[v,d],[v,e],[v,f]],[1,2,[3,4]]]]        ]]               ],[[[[v,a],[1,2]],[[v,b],3],[[v,c],4]]]).test(157,[[n,equals41],[[v,a]]],[        [[n,equals41],[[[n,b],c]]]        ],[[[[v,a],[[n,b],c]]]]).
test(158,[[n,equals41],[[v,a]]],[        [[n,equals41],[[v,a]],":-",        [       [[n,equals42],[[v,a]]]        ]],                [[n,equals41],[1]]        ],[[[[v,a],1]]]).test(159,[[n,equals41]],[  [[n,equals41],":-",  [[[n,equals4_on]]]]],  [[]]).
test(162,[[n,equals41],[[v,a],[v,b],[v,c]]],[        [[n,equals41],[[v,a],[v,b],[v,c]],":-",        [       [[n,equals42],[[v,a],[[v,b],[v,c]]]]        ]],        [[n,equals42],[[[v,d],[v,e]],[v,f]],":-",        [       %[[n,trace2]],        [[n,equals4],[[[v,d],[v,e],[v,f]],[1,2,[3,4]]]]        ]]        %[[n,equals42],[[1,2,[3,4]]]]               ],[[[[v,a],[1,2]],[[v,b],3],[[v,c],4]]]).
test(174,[[n,function1],[[v,e],[v,c],[v,a],[v,c],[v,a]]],[        [[n,function1],[[v,d],[v,d],1,[v,b],[v,b]]]],[[[[v, a], 1], [[v, c], 1], [[v, e], 1]]]).test(175,[[n,equals4],[[[[v,e1],[v,e2]],[v,c],[v,a],[v,c],[v,a],[v,e1]],[[v,d],[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]],[],[[[[v,a],[[1,1],[1,1]]],[[v,b],[[1,1],[1,1]]],[[v,c],[[1,1],[1,1]]],[[v,d],[[1,1],[1,1]]],[[v,e1],[1,1]],[[v,e2],[1,1]],[[v,f],1],[[v,f2],1]]]).test(176,[[n,function1],[[[v,e1],[v,e2]],[v,c],[v,a],[v,c],[v,a],[v,e1]]],[        [[n,function1],[[v,d]           ,[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]],[[[[v, a], [[1,1],[1,1]]], [[v, c], [[1,1],[1,1]]], [[v, e1], [1,1]],[[v, e2], [1,1]]]]).test(177,[[n,equals4],[[[[v,e1],[v,e2]],"|",[[v,c],[v,a],[v,c],[v,a],[v,e1]]],[[v,d]          ,"|",[[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]]],[],[[[[v,a],[[1,1],[1,1]]],[[v,b],[[1,1],[1,1]]],[[v,c],[[1,1],[1,1]]],[[v,d],[[1,1],[1,1]]],[[v,e1],[1,1]],[[v,e2],[1,1]],[[v,f],1],[[v,f2],1]]]).test(178,[[n,function1],[[[v,e1],[v,e2]],"|",[[v,c],[v,a],      [v,c],[v,a],[v,e1]]]],[        [[n,function1],[[v,d],          "|",[[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]]],[[[[v, a], [[1,1],[1,1]]], [[v, c], [[1,1],[1,1]]], [[v, e1], [1,1]],[[v, e2], [1,1]]]]).test(179,[[n,add0]],[/*         [[n,add0],":-",        [       [[n,add1],[[v,a]]],        [[n,writeln],["a"]]]],                        [[n,add1],[[v,a]],":-",        [       [[n,add2],[[v,a]]]]],                */        [[n,add0],":-",        [       %[[n,trace2]],        [[n,fail]]]]]        ,[]).test(180,[[n,add0]],[/*         [[n,add0],":-",        [       [[n,add1],[[v,a]]],        [[n,writeln],["a"]]]],                        [[n,add1],[[v,a]],":-",        [       [[n,add2],[[v,a]]]]],                */        [[n,add0],":-",        [       %[[n,trace2]],        [[n,true]]]]]        ,[[]]).
test(181,[[n,1],[[1,2],[v,b]]],[        %[[n,query_box],[[v,a],[v,b]],":-",        %[       [[n,1],[[v,a],[v,b]]]]],     [[n,add2],[[v,a],[v,b]],":-",        [       [[n,=],[[v,a],[]]],                [[n,=],[[v,b],[]]]]],        [[n,add3],[[v,a],[v,b]],":-",        [       [[n,tail],[[v,a],[v,b]]]]],                %[[n,add0],[[v,a],[v,b]],":-",        %[       [[n,1],[[v,a],[v,c]]],        %        [[n,=],[[v,c],[v,b]]]]],                [[n,1],[[v,a],[v,b]],":-",        [       [[n,add2],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,add3],[[v,a],[v,c]]],                [[n,1],[[v,c],[v,d]]],                [[n,=],[[v,d],[v,b]]]]]],[[[[v, b], []]]]).test(182,[[n,member_try],[[1,2,3],[v,b]]],[[[n,member_try],[[v,a],[v,b]],":-",[[[n,member],[[v,b],[v,a]]],[[n,equals4],[[v,b],2]]]]]      ,[[[[v, b], 2]]]).
test(183,[[n,not1]],[[[n,not1],":-",[[[n,not],[[[n,equals4],[3,2]]]]%,%[[n,true]]]]]      ,[[]]).
test(207,[[n,findall1],[[1,2],[v,b1]]],%[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[        [[n,findall1],[[v,a],[v,b1]],":-",        [       %[[n,findall],[[v,b1],[[[n,member],[[v,a],[v,a1]]],                [[n,findall],[[v,a3],[[[n,member],[[v,a2],[v,a]]],        [[n,+],[[v,a2],5,[v,a3]]],        [[n,/],[[v,a3],2,[v,a4]]],        [[n,ceiling],[[v,a4],[v,a5]]],        [[n,equals4],[[v,a4],[v,a5]]]]        ,                [v,b1]]]]                                %[v,b]]]        ]        ],[[[[v,b1],[6]%[[1,11,111],[2,22,222],[3,33,333]]]]]).
test(214,[[n,append1],[[1,2,3],[],[v,a]]],[[[n,append1],[[],[v,a],[v,a]]],[[n,append1],[[[v,a],"|",[v,d]],[v,b],[[v,a],"|",[v,c]]],":-",[[[n,append1],[[v,d],[v,b],[v,c]]]]]],[[[[v,a],[1,2,3]]]]).
test(219,[[n,findall],[[[v,a],[v,b]],[[n,stringconcat],[[v,a],[v,b],"abc"]],[v,c]]],[],[[[[v,c],[["","abc"],["a","bc"],["ab","c"],["abc",""]]]]]).test(220,[[n,stringconcat],["a","b","ab"]],[],[[]]).
test(22,[[n,grammar1],["peter cut the pear"]],[  [[n,grammar1],[[v,u]],":-",  [   [[n,sentence],[[v,u],""]]  ]  ],    [[n,sentence],"->",  [[[n,subject]],[[n,verbphrase]]]],  [[n,verbphrase],"->",  [[[n,verb]],[[n,object]]]],    [[n,subject],["",""]],  [[n,subject],"->",["john"," "]],  [[n,subject],"->",["peter"," "]],  [[n,subject],[[v,a],[v,a]]],    [[n,verb],["",""]],  [[n,verb],"->",["ate"," "]],  [[n,verb],"->",["bought"," "]],  [[n,verb],"->",["cut"," "]],  [[n,verb],[[v,a],[v,a]]],  [[n,object],"->",  ["the"," ",[[n,noun]]]],  [[n,noun],["",""]],  [[n,noun],"->",["apple"]],  [[n,noun],"->",["pear"]],  [[n,noun],"->",["peach"]],  [[n,noun],[[v,a],[v,a]]]],[[]]).%% Two Uses - PhD algorithm - agree with all of only one of two sides and give opinion%%do you agree with either abc (list j1) or def (list j2) given you agree with abcg (list k)?%%what is your opinion of a given opinion of a is b?test(23,[[n,agree],[["a","b","c"],["d","e","f"],["a","b","c","g"],[v,s]]],[%% test whether each item of jn is a member of k%% test whether each item of jn is not a member of k        [[n,agree],[[v,j1],[v,j2],[v,k],"You agree with j1."],":-",        [       [[n,membera1],[[v,j1],[v,k]]],                [[n,membera2],[[v,j2],[v,k]]]        ]],        [[n,agree],[[v,j1],[v,j2],[v,k],"You agree with j2."],":-",        [       [[n,membera1],[[v,j2],[v,k]]],                [[n,membera2],[[v,j1],[v,k]]]        ]],        [[n,membera1],[[],[v,l]]],        [[n,membera1],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,member],[[v,m],[v,h]]],                [[n,membera1],[[v,t],[v,m]]]        ]],        [[n,membera2],[[],[v,l]]],        [[n,membera2],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,membera3],[[v,m],[v,h]]],                [[n,membera2],[[v,t],[v,m]]]]],                        [[n,membera3],[[],[v,l]]],        [[n,membera3],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[n,=],[[v,m],[v,h]]]]],                [[n,membera3],[[v,t],[v,m]]]        ]]        ],[[[[v,s],"You agree with j1."]]]).        test(24,[[n,modus_ponens],["a",[["a","b"],["c","d"],["e","f"]],[v,s]]],[        [[n,modus_ponens],[[v,a],[v,ab],[v,b]],":-",        [       [[n,member2],[[v,ab],[v,ab1]]],                [[n,equals1],[[v,ab1],[[v,a],[v,b]]]]        ]]        ],[[[[v,s],"b"]]]).%% Two Uses - original argument and algorithm (file)%% splits on \n, removes 1 duplicate per line, returns score of duplicatestest(25,[[n,grammar1],["aaa1 ,-'\na\nb\nb\n","aaa1 ,-'\na\nb\na",[v,s]]],%%()test(15,[[n,compound213],["","",[["a"],1],[v,t]]],%%test(25,[[n,word21],["a\n","","",[v,t]]],%%test(25,[[n,deletea2],[["a","b"],"a",[v,m1]]],%%test(25,[[n,deletea2],[["a","a","b"],"a",[v,m1]]],%%test(25,[[n,membera3],[["a","b"],"c"]],%%test(25,[[n,positivityscore],[["a","b"],["a","b"],0,[v,m1]]],[  [[n,grammar1],[[v,u],[v,t],[v,s]],":-",  [   [[n,compound21],[[v,u],"",[],[v,u1]]],   [[n,compound21],[[v,t],"",[],[v,t1]]],   [[n,positivityscore],[[v,u1],[v,t1],0,[v,s]]]   %%[[n,membera3],[["a","b"],"a"]]   %%[[n,number21],[[v,u],"","",[v,t]]]   %%[[n,compound213],["","",[["a"],1],[v,t]]]  ]  ],  [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]], %% swapped these  [[n,compound],[[v,t],[v,u]],"->",  [[[n,compound21],[[v,t],[v,v]]],  [[n,compound213],[[v,v],[v,u]]]]],  [[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],  [[n,compound21],[[],[v,compound1name]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]]]],/**  [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,t]]]]],**/  [[n,item],[[v,t]],"->",[[[n,word21],["",[v,t]]]]],  [[n,item],[[v,t]],"->",[[[n,compound],[[],[v,t]]]]],/**  [[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]],**/  [[n,word212],["","",[v,t],[v,t]]],  [[n,word212],[[v,u],[v,u],[v,t],[v,t]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],**/  [[n,word21],[[v,t],[v,u]],"->",  [[v,b],  [[n,code],%%[[n,sentencechars],[[v,a]]],  [[n,finalchar],[[v,b]]]  %%[[n,stringconcat],[[v,t],[v,a],[v,v1]]],  %%[[n,stringconcat],[[v,t],[v,b],[v,v]  ],  [[n,word212],[[v,t],[v,u]]]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,word21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]]**/  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],%%[[n,not_return_next]],  [[n,code],[[n,not],[[[n,=],[[v,a],"\n"]]]],  %%[[n,sentencechars],[[v,a]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word21],["",[v,wordstring]]],  [[n,code],  [[n,stringconcat],[[v,v],[v,wordstring],[v,u]]]]]],/**    [[n,sentencechars],[[v,c]],":-",  [[[n,letters],[[v,c]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[[n,stringtonumber],[[v,c],[v,n]]],  [[n,number],[[v,n]]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c]," "]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],","]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"-"]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"'"]]]],**/    [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"\n"]]]],    [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],""]]]],  %%  [[n,not_return_next],[[v,a],[v,a]],":-",%%  [[[n,not],[[[n,stringconcat],["\n",[v,d],[v,a]]]]]]]        [[n,positivityscore],[[],[v,l],[v,s],[v,s]]],        [[n,positivityscore],[[v,l],[v,m],[v,s1],[v,s2]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,member],[[v,m],[v,h]]],                [[n,"->"],[[[n,deletea2],[[v,m],[v,h],[v,m1]]],                [[n,true]],                [[n,=],[[v,m],[v,m1]]]]],                [[n,+],[[v,s1],1,[v,s3]]],                [[n,positivityscore],[[v,t],[v,m1],[v,s3],                [v,s2]]]        ]],                [[n,positivityscore],[[v,l],[v,m],[v,s1],[v,s2]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[n,membera3],[[v,m],[v,h]]]]],                [[n,positivityscore],[[v,t],[v,m],[v,s1],                [v,s2]]]]],                        [[n,deletea2],[[],[v,l],[v,m1]],":-",[[[n,fail]]]], %%%**        [[n,deletea2],[[v,l],[v,m],[v,t]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,=],[[v,m],[v,h]]]                %%[[n,delete],[[v,m],[v,h],[v,m1]]]]],                ]],                        [[n,deletea2],[[v,l],[v,m],[v,m1]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[n,=],[[v,m],[v,h]]]]],                %%[[n,not],[[[n,membera3],[[v,m],[v,h]]]]],                [[n,deletea2],[[v,t],[v,m],[v,m1]]]        ]],                [[n,membera3],[[],[v,l]],":-",[[[n,fail]]]],        [[n,membera3],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[[n,=],[[v,m],[v,h]]]]        ]],                [[n,membera3],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[[n,=],[[v,m],[v,h]]]]]],                [[n,membera3],[[v,t],[v,m]]]        ]]%%()],[[[v,t],[["a"],1]]]).
test(241,%[[n,reverse1],[[v,d],[empty,empty,empty],[3,2,1]]],%[[n,reverse1],[[v,a],[],[3,2,1]]],[[[n,reverse1],[[],[v,a],[v,a]],":-",[[[n,cut]]]],[[n,reverse1],[[[v,a],"|",[v,d]],[v,b],[v,c]],":-",[[[n,reverse1],[[v,d],[[v,a],"|",[v,b]],[v,c]]],[[n,cut]]]]],[[[[v,a],[1,2,3]]]]).
test(248,[[n,a],[[v,b]]],%test(244,[[n,foldl1],[[n,add],[1,2,3],0,[v,d]]],[        [[n,a],[[v,b]],":-",        [       [[n,"->"],[[[[n,c],[[v,c]]]],[[[n,c],[[v,c]]]],[[n,"->"],[[[[n,c],[[v,c]]]],[[[n,c],[[v,c]]]],[[[n,c],[[v,c]]]]]]]]        ]]],[[]]).test(249,[[n,conjunction],["true","false",[v,c]]],[        [[n,findall1],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,"->"],[[[v,f],[[v,h],[v,m2]]],                [       [[n,wrap],[[v,m2],[v,m3]]],                        [[n,append],[[v,m1],[v,m3],[v,m4]]]                ],                [                        [[n,=],[[v,m1],[v,m4]]]                ]]],                [[n,findall1],[[v,f],[v,t],[v,m4],[v,n]]]        ]        ]]        ,[[[[v,c], "false"]]]).
test(248,[[n,w]],[[[n,w],":-",[[[n,y]],[[n,g]]]],[[n,y],":-",[[[n,r]],[[n,b]]]],[[n,g],":-",[[[n,p]]]],[[n,r]],[[n,b]],[[n,p],":-",[[[n,w]]]]],[[]]).%object(cube3,[["yellow",["red","blue"]],["red",[]],["blue",[]],["white",["yellow","green"]],["green",["purple"]],["purple",["white"]]],test(249,[[n,w]],[[[n,w],":-",[[[n,r]],[[n,b]]]],[[n,r],":-",[[[n,w]]]],[[n,b],":-",[[[n,w]]]]],[[]]).*/test(248,[[n,function],[[v,'_'],[1],[v,c]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                [[n,append],[[v,a],[v,b],[v,c]]]        ]        ]],[[[[v,c], [1]]]]).
test(252,[[n,a]],[[[n,checktypes1],[[v,vars1],[v,typestatements1],[v,typestatements2],[v,typestatements4]],":-",[[[[[n,true]],[[n,true]]]],[[n,true]]]]],[[]]).
test(27,[[n,equals11],["a","a"]],[        [[n,equals11],[[v,a],[v,a]]]        ],[[]]).
test(27,[[n,equals11],["a","a"]],[        [[n,equals11],[[v,a],[v,a]]]        ],[[]]).test(28,[[n,number11],[1]],[        [[n,number11],[[v,a]],":-",        [       [[n,number],[[v,a]]]        ]]        ],[[]]).
test(31,[[n,not11],[1]],[        [[n,not11],[[v,a]],":-",        [       [[n,not],[[[n,=],[[v,a],2]]]]        ]]        ],[[]]).
test(58,[[n,findall],[[n,a_to_c],["a","b","a"],[],[v,d]]],[        [[n,findall],[[v,f],[],[v,l],[v,l]]],        [[n,findall],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,"->"],[[[v,f],[[v,h],[v,m2]]],                [       [[n,wrap],[[v,m2],[v,m3]]],                        [[n,append],[[v,m1],[v,m3],[v,m4]]]                ],                [                        [[n,=],[[v,m1],[v,m4]]]                ]]],                [[n,findall],[[v,f],[v,t],[v,m4],[v,n]]]        ]        ],        [[n,a_to_c],["a","c"]        ]],[[[[v,d], ["c","c"]]]]).test(59,[[n,count],[1,[v,n]]],[        [[n,count],[1,2],":-",[[[n,cut]]]],        [[n,count],[1,3]]        ] ,[[[[v,n], 2]]]).test(60,[[n,a]],[[[n,a],":-",[[[n,intersection1],[[["select,dash"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"]],[],[["select,dash"],["neiey,person"],["neiey,person"]]]],[[n,duplicates],[[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]]]],[[n,minus1],[[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[]]],[[n,reverse],[[["select,dash"],["neiey,person"],["neiey,person"]],[],[["neiey,person"],["neiey,person"],["select,dash"]]]],[[n,intersection1],[[["neiey,person"],["neiey,person"],["select,dash"]],[["hipaa,square"],["releases,up"],["hipaa,square"]],[],[]]],[[n,append1],[[],[["hipaa,square"],["releases,up"],["hipaa,square"]],[["hipaa,square"],["releases,up"],["hipaa,square"]]]],[[n,minus1],[[["hipaa,square"],["releases,up"],["hipaa,square"]],[["select,dash"],["neiey,person"],["neiey,person"]],[["hipaa,square"],["releases,up"],["hipaa,square"]]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,intersection1],[[],[v,a],[v,l],[v,l]]],[[n,intersection1],[[v,l1],[v,l2],[v,l3a],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,intersection2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,intersection1],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,intersection2],[[v,a],[],[v,l],[v,l]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%[[n,intersection2],[[v,i1],[v,l4],[v,l5],[v,l3]]]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1],[v,l4],[v,l2],[v,l3]]]]],[[n,append1],[[v,b],[v,c],[v,a]],":-",[[[n,append],[[v,b],[v,c],[v,a]]]]],[[n,minus1],[[v,l],[],[v,l]]],[[n,minus1],[[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l2],[v,i1]]],[[n,tail],[[v,l2],[v,l5]]],[[n,delete2],[[v,l1],[v,i1],[],[v,l6]]],[[n,minus1],[[v,l6],[v,l5],[v,l3]]]]],[[n,delete2],[[],[v,a],[v,l],[v,l]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l5]]],[[n,delete2],[[v,l5],[v,i1],[v,l2],[v,l3]]]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l5]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,wrap],[[v,i2],[v,i21]]],[[n,append],[[v,l2],[v,i21],[v,l6]]],[[n,delete2],[[v,l5],[v,i1],[v,l6],[v,l3]]]]],[[n,mutuallyexclusive],[[],[v,l]]],[[n,mutuallyexclusive],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,membera3],[[v,m],[v,h]]],[[n,mutuallyexclusive],[[v,t],[v,m]]]]],[[n,membera3],[[],[v,l]]],[[n,membera3],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera3],[[v,t],[v,m]]]]],[[n,duplicates],[[],[v,l],[v,s],[v,s]]],[[n,duplicates],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,member],[[v,m],[v,h]]],[[n,"->"],[[[n,deletea2],[[v,m],[v,h],[v,m1]]],[[n,true]],[[n,=],[[v,m],[v,m1]]]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,s1],[v,h1],[v,s3]]],[[n,duplicates],[[v,t],[v,m1],[v,s3],[v,s2]]]]],[[n,duplicates],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,membera4],[[v,m],[v,h]]]]],[[n,duplicates],[[v,t],[v,m],[v,s1],[v,s2]]]]],[[n,deletea2],[[],[v,l],[v,m1]],":-",[[[n,fail]]]],[[n,deletea2],[[v,l],[v,m],[v,t]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,l],[v,m],[v,m1]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,t],[v,m],[v,m1]]]]],[[n,membera4],[[],[v,l]],":-",[[[n,fail]]]],[[n,membera4],[[v,l],[v,h]],":-",[[[n,head],[[v,l],[v,h]]]]],[[n,membera4],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera4],[[v,t],[v,m]]]]],[[n,substring],[[],[]]],[[n,substring],[[],[v,b]],":-",[[[n,not],[[[n,=],[[v,b],[]]]]],[[n,fail]]]],%%[[n,substring],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,at]]],[[n,"->"],[[[n,listhead],[[v,a],[v,b]]],[[[n,true]]],[[[n,substring],[[v,at],[v,b]]]]]]]],[[n,substring],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,at]]],[[n,"->"],[[[[n,listhead],[[v,a],[v,b]]]],[[[n,true]]],[[[n,substring],[[v,at],[v,b]]]]]]]],[[n,listhead],[[v,l],[]]],[[n,listhead],[[v,a],[v,b]],":-",[[[n,head],[[v,a],[v,ah]]],[[n,tail],[[v,a],[v,at]]],[[n,head],[[v,b],[v,ah]]],[[n,tail],[[v,b],[v,bt]]],[[n,listhead],[[v,at],[v,bt]]]]],[[n,listhead],[[v,a],[v,b]],":-",[[[n,head],[[v,a],[v,ah]]],[[n,tail],[[v,a],[v,at]]],[[n,head],[[v,b],[v,ah]]],[[n,tail],[[v,b],[v,bt]]],[[n,listhead],[[v,at],[v,bt]]]]]],[[]]).test(61,[[n,add],[[1,2,3],3,[],[v,l]]],[        [[n,add],[[],[v,th],[v,l],[v,l]]],        [[n,add],[[v,l],[v,th],[v,m],[v,n]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,+],[[v,h],[v,th],[v,h0]]],                [[n,wrap],[[v,h0],[v,h1]]],                [[n,append],[[v,m],[v,h1],[v,o]]],                [[n,add],[[v,t],[v,th],[v,o],[v,n]]]        ]        ]],[[[[v,l], [4,5,6]]]]).
test(64,[[n,add0],[[1,2],[v,b]]],[     [[n,add2],[[v,a],[v,b]],":-",        [       [[n,=],[[v,a],[]]],                [[n,=],[[v,b],[]]]]],        [[n,add3],[[v,a],[v,b]],":-",        [       [[n,tail],[[v,a],[v,b]]]]],                [[n,add0],[[v,a],[v,b]],":-",        [       [[n,1],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]],                [[n,1],[[v,a],[v,b]],":-",        [       [[n,add2],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,add3],[[v,a],[v,c]]],                [[n,1],[[v,c],[v,d]]],                [[n,=],[[v,d],[v,b]]]]]],[[[[v, b], []]]]).test(65,[[n,add0],[[1],[v,b]]],[[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]]],[[[[v, b], []]]])./**%%[[1],[2,3],[1,2,3]]],[[],[1,2,3],[1,2,3]]]test(63,[[n,add],[1,2,[v,l]]],[        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]]],        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,-],[[v,a],[v,b],[v,c]]]]]],[[[[v, l], 3]], [[[v, l], -1]]]).test(64,[[n,add],[[1,2,3],3,[],[v,l],[v,t],[v,t],[v,th],[v,th],[v,o],[v,o]]],[        [[n,add],[[],[v,th],[v,l],[v,l],[v,t],[v,t],[v,th],[v,th],[v,o],[v,o]]],        [[n,add],[[v,l],[v,th],[v,m],[v,n],[v,t],[v,th],[v,o]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,+],[[v,h],[v,th],[v,h0]]],                [[n,wrap],[[v,h0],[v,h1]]],                [[n,append],[[v,m],[v,h1],[v,o]]],                [[n,add],[[v,t],[v,th],[v,o],[v,n],[v,t],[v,t],[v,th],[v,th],[v,o],[v,o]]]        ]        ]],[[[[v,l], [4,5,6]],[[v,t],888],[[v,th],888],[[v,o],888]]]).
test(68,[[n,addorsubtract1],[2,1,1]],[        [[n,addorsubtract1],[[v,a],[v,b],[v,c]],":-",        [       [[n,"->"],[[[n,addorsubtract2],[[v,a],[v,b],[v,c]]],        [[n,true]],        [[n,addorsubtract3],[[v,a],[v,b],[v,c]]]]]        ]        ],        [[n,addorsubtract2],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]        ],        [[n,addorsubtract3],[[v,a],[v,b],[v,c]],":-",        [       [[n,-],[[v,a],[v,b],[v,c]]]        ]        ]        ],[[]]).
test(79,[[n,equals41],[[1,2,3],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[v,a],[[v,b],"|",[v,c]]]]        ]]        ],[[[[v,b],1]]]).test(80,[[n,equals41],[[v,a],[v,d],[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,d],[v,c],[v,b]],":-",        [       [[n,equals4],[[[1,5],2,3,4],[[[v,a],"|",[v,d]],[v,c],"|",[v,b]]]]        ]]        ],[[[[v, a], 1], [[v, d], [5]], [[v, c], 2], [[v, b], [3, 4]]]]).
test(81,[[n,equals41],[[v,a],[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,c],[v,b]],":-",        [       [[n,equals4],[[[[v,a],[v,c]],"|",[v,b]],[[1,2],3,4]]]        ]]        ],[[[[v, a], 1], [[v, c], 2], [[v, b], [3, 4]]]]).
test(90,[[n,equals41]],[        [[n,equals41],":-",        [       [[n,equals4],[[[v,a],[v,c],"|",[v,b],"|",[v,d]],[1,2,3,4]]]        ]]        ],[]).
test(90,[[n,equals41]],[        [[n,equals41],":-",        [       [[n,equals4],[[[v,a],[v,c],"|",[v,b],"|",[v,d]],[1,2,3,4]]]        ]]        ],[]).test(91,[[n,equals41],[[1,2,3]]],[        [[n,equals41],[[v,a]],":-",        [       [[n,equals4],[[v,a],[1,2,3]]]        ]]        ],[[]]).test(92,[[n,equals41],[[v,a],[v,b],[v,d]]],[        [[n,equals41],[[v,a],[v,b],[v,d]],":-",        [       [[n,equals4],[[[v,a],"|",[[v,b],"|",[v,d]]],[1,2,3,4]]]        ]]        ],[[[[v, a], 1], [[v, b], 2],[[v, d], [3,4]]]]).
test(96,[[n,equals41],[1,[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[v,b],[[v,a],[v,a]]]]        ]]        ],[[[[v, b], [1,1]]]]).test(97,[[n,equals41],[[v,a]]],[        [[n,equals41],[[v,a]],":-",        [       [[n,equals4],[[v,a],[1,2,3]]]        ]]        ],[[[[v,a],[1,2,3]]]]).test(98,[[n,equals41],[[[1,2],3,4],[v,a],[v,b]]],[        [[n,equals41],[[v,c],[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],"|",[v,b]],[v,c]]]        ]]        ],[[[[v, a], [1, 2]], [[v, b], [3, 4]]]]).
test(96,[[n,equals41],[1,[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[v,b],[[v,a],[v,a]]]]        ]]        ],[[[[v, b], [1,1]]]]).test(97,[[n,equals41],[[v,a]]],[        [[n,equals41],[[v,a]],":-",        [       [[n,equals4],[[v,a],[1,2,3]]]        ]]        ],[[[[v,a],[1,2,3]]]]).test(98,[[n,equals41],[[[1,2],3,4],[v,a],[v,b]]],[        [[n,equals41],[[v,c],[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],"|",[v,b]],[v,c]]]        ]]        ],[[[[v, a], [1, 2]], [[v, b], [3, 4]]]]).test(99,[[n,equals41],[1,[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[v,b],[[[v,a],[v,a]],[v,a]]]]        ]]        ],[[[[v, b], [[1,1],1]]]]).test(100,[[n,equals41],[1,[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,c],[v,b]],":-",        [       [[n,equals4],[[[v,c],"|",[v,b]],[[[v,a],[v,a]],[v,a]]]]        ]]        ],[[[[v,b],[1]],[[v,c],[1,1]]]]).
test_delete_sub_term_wa :-findall(_,(member([N,In,T,T2],[[1,[[1, 1], [1, 2]], [a, b], []],[2,[[1]],1, []] ]), ((delete_sub_term_wa(In,T,T21),T21=T2)->R=success;R=fail), writeln([R,delete_sub_term_wa,test,N])),_),!.
test_get_sub_term_wa :-findall(_,(member([N,T1,Add,It1],[[1,[1,2,3],[1,1], 1],[2,[1,2,3],[1], [1, 2, 3]],[3,[[1,4],2,3],[1,1,1], 1],[4,[[1,4],2,3],[1,1,2], 4]]), ((get_sub_term_wa(T1,Add,It2),It1=It2)->R=success;R=fail), writeln([R,get_sub_term_wa,test,N])),_),!.
test_open_types_cases(1,[[n,true_vs_good],[[v,t],[v,g]]],[[[n,true_vs_good],[[[[t,number],[t,number]],[[t,number],[t,number]],[[t,number],[t,number]],[[t,number],[t,number]],[[t,number],[t,number]],[[t,number],[t,number]]],[[[t,number],[t,number]],[[t,number],[t,number]],[[t,number],[t,number]],[[t,number],[t,number]],[[t,number],[t,number]],[[t,number],[t,number]]]]],[[n,random1],[[t,number],[t,number],[t,number]]]],[[[n,true_vs_good],[output,output]],[[n,random1],[input,input,output]]],[        [[n,true_vs_good],[[v,t],[v,g]],":-",        [                [[n,random1],[0.1,4.6,[v,y1]]],                [[n,random1],[[v,y1],4.7,[v,y2]]],                [[n,random1],[[v,y2],4.8,[v,y3]]],                [[n,random1],[[v,y3],4.9,[v,y4]]],                                [[n,equals2],[[v,c11],[0,0]]],                [[n,wrap],[[v,c11],[v,c12]]],                [[n,equals2],[[v,c21],[1,[v,y1]]]],                [[n,wrap],[[v,c21],[v,c22]]],                [[n,append],[[v,c12],[v,c22],[v,c23]]],                                [[n,equals2],[[v,c31],[2,[v,y2]]]],                [[n,wrap],[[v,c31],[v,c32]]],                [[n,append],[[v,c23],[v,c32],[v,c33]]],                                [[n,equals2],[[v,c41],[3,[v,y3]]]],                [[n,wrap],[[v,c41],[v,c42]]],                [[n,append],[[v,c33],[v,c42],[v,c43]]],                                [[n,equals2],[[v,c51],[4,[v,y4]]]],                [[n,wrap],[[v,c51],[v,c52]]],                [[n,append],[[v,c43],[v,c52],[v,c53]]],                                [[n,equals2],[[v,c61],[5,5]]],                [[n,wrap],[[v,c61],[v,c62]]],                [[n,append],[[v,c53],[v,c62],[v,g]]],                                [[n,equals3],[[v,t],[[0,0],[1,1],                [2,2],[3,3],[4,4],[5,5]]]        ]]],                [[n,random1],[[v,a1],[v,a2],[v,n5]],":-",        [                [[n,-],[[v,a2],[v,a1],[v,a3]]],                [[n,random],[[v,n1]]],                [[n,*],[[v,a3],[v,n1],[v,n2]]],                [[n,+],[[v,n2],[v,a1],[v,n21]]],                [[n,*],[10,[v,n21],[v,n3]]],                [[n,round],[[v,n3],[v,n4]]],                [[n,/],[[v,n4],10,[v,n5]]]        ]]]).test_open_types_cases(2,[[n,true_vs_good],[[[n,a],[1]],1,[v,g2]]],        [[[n,true_vs_good],[[[t,predicatename],[[t,number]]],[t,number],[t,number]]]],        [[[n,true_vs_good],[input,input,output]]],[        [[n,true_vs_good],[[v,f1],[v,l],[v,n]],":-",        [                        [[n,equals3],[[v,n],1]                        ]]]]).
test_open_types_cases(10,[[n,want_me],[[v,c]]],        [[[n,want_me],[[t,string]]]],        [[[n,want_me],[output]]],[        [[n,want_me],[[v,a1]],":-",        [                        [[n,writeln],["Do you want me for 1-food, 2-activity, 3-toy or 4-not want me?"]],                [[n,read_string],[[v,a]]],                [[n,"->"],[[[n,=],[[v,a],"4"]],                [[n,=],[[v,a1],"no"]],                [[n,=],[[v,a1],"yes"]]]]                 ]]]).
test_open_types_cases(26,[[n,episode_character],[[v,a]]],        [[[n,episode_character],[[t,loop0]]],[[t,loop0],[[[t,loop1],[t,loop1]]]],[[t,loop1],[[[t,items],[t,items]]]],[[t,items],[[t,number],[t,number],[t,string]]]],        [[[n,episode_character],[output]]],[        [[n,episode_character],[[v,ds3]],":-",        [                        [[n,findall],[[v,ds2],         [         [[n,member],[[v,l1],[1,2]]],         [[n,findall],[[[v,l1],[v,l2],[v,d]],         [         [[n,member],[[v,l2],[3,4]]],         [[n,equals4],[[v,line],["Level",[v,l1],[v,l2],         "Please write a detail."]]],         [[n,writeln],[[v,line]]],         [[n,read_string],[[v,d]]]],        [v,ds2]]]]        ,        [v,ds3]]]            ]]]).
test_put_sub_term_wa :-findall(_,(member([N,It,Add,T1,T2],[[1,9,[1, 2, 1, 1, 2, 3],[[1,2],[[[4,[5,7,8],6]]]], [[1, 2], [[[4, [5, 7, 9], 6]]]]],[2,88,[1,1],[[2,3],4], [88, 4]]]), ((put_sub_term_wa(It,Add,T1,T21),T21=T2)->R=success;R=fail), writeln([R,put_sub_term_wa,test,N])),_),!.test_put_sub_term_wa_smooth :-findall(_,(member([N,It,Add,T1,T2],[[1,[9],[1, 2, 1, 1, 2, 3],[[1,2],[[[4,[5,7,8],6]]]], [[1, 2], [[[4, [5, 7, 9], 6]]]]],[2,[88,1],[1,1],[[2,3],4], [88, 1, 4]]]), ((put_sub_term_wa_smooth(It,Add,T1,T21),T21=T2)->R=success;R=fail), writeln([R,put_sub_term_wa_smooth,test,N])),_),!.put_sub_term_wa_smooth(A,B,C,D) :- dynamic(stwa_smooth/1), retractall(stwa_smooth(_)), assertz(stwa_smooth(on)),  put_sub_term_wa(A,B,C,D), retractall(stwa_smooth(_)), assertz(stwa_smooth(off)),  !.
test_run_all(2,[[n,a],[[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[],[v,c]]],[ % duplicates[[n,a],[[],[v,l],[v,s],[v,s]]],[[n,a],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,member],[[v,h],[v,m]]],[[n,"->"],[[[n,deletea2],[[v,m],[v,h],[v,m1]]],[[n,true]],[[n,=],[[v,m],[v,m1]]]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,s1],[v,h1],[v,s3]]],[[n,a],[[v,t],[v,m1],[v,s3],[v,s2]]]]],[[n,a],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,membera4],[[v,m],[v,h]]]]],[[n,a],[[v,t],[v,m],[v,s1],[v,s2]]]]],[[n,deletea2],[[],[v,l],[v,m1]],":-",[[[n,fail]]]],[[n,deletea2],[[v,l],[v,m],[v,t]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,l],[v,m],[v,m1]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,t],[v,m],[v,m1]]]]],[[n,membera4],[[],[v,l]],":-",[[[n,fail]]]],[[n,membera4],[[v,l],[v,h]],":-",[[[n,head],[[v,l],[v,h]]]]],[[n,membera4],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera4],[[v,t],[v,m]]]]]],[[[[v,c],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]]]]]).
test_sub_term_types_wa :-findall(_,(member([N,H,T,In],[[1,[string,atom,[],number,var,compound], ["a",a,[],1,_,1+1], [[[1, 1], "a"], [[1, 2], a], [[1, 3], []], [[1, 4], 1], [[1, 5], _], [[1, 6], 1+1]]], [2,[[]], [], [[[1], []]]],[3,[[]],[[]], [[[1, 1], []]]], [4,[all([number,string])],[1,["a",3]], [[[1,2],["a",3]]]]]), ((sub_term_types_wa(H,T,In1),In1=In)->R=success;R=fail), writeln([R,sub_term_types_wa,test,N])),_),!.
test_types_cases(12,[[n,call1b],[[v,b],[1,11,111]]],        [[[n,call1b],[[t,number],[[t,number],[t,number],[t,number]]]]],        [[[n,call1b],[output,input]]],[        [[n,call1b],[[v,b],[v,a]],":-",        [       [[n,call],[[lang,same],same,[[n,member2a],[[v,b],[v,a]]],        %[[[n,member2a],[[[t,brackets],[[t,number],[t,number],[t,number]]],[t,number]]]],        %[[[n,member2a],[input,output]]],[[[n,member2a],[[v,b],[v,a]],":-",        [       [[n,member],[[v,b],[v,a]]],[[n,cut]]]        ]]]],        [[n,cut]]]]               ],[[[[v,b],1]]]).test_types_cases(13,[[n,person],["not-care",[v,output]]],        [[[n,person],[[t,string],[t,string]]]],        [[[n,person],[input,output]]],[        [[n,person],["care","care"]],             [[n,person],[[v,a],"justice to care"]]            ],[[[[v,output],"justice to care"]]]).
test_types_cases(33,[[n,wear],[["hat","head"],[v,c]]],        [[[n,wear],[[[t,string],[t,string]],[[t,string],[t,string]]]]],        [[[n,wear],[input,output]]],[        [[n,wear],[[v,c],[v,c]],":-",        [                        [[n,equals4],[[v,c],["hat","head"]]]        ]]],[[[[v,c],["hat","head"]]]]).
test_types_cases(45,[[n,play_gramophone],[[1,2,3,4,5],2,[v,p]]],[[[n,play_gramophone],[{[t,number]},[t,number],{[t,number]}]]],        [[[n,play_gramophone],[input,input,output]]],[        [[n,play_gramophone],[[v,tracks],[v,first_track],[v,rest]],":-",        [       %[[n,trace2]],        [[n,equals4],[[[v,a],"|",[v,b]],[v,tracks]]],        [[n,"->"],[[[n,equals4],[[v,a],[v,first_track]]],        [[n,equals4],[[v,rest],[v,tracks]]],        [[n,play_gramophone],[[v,b],[v,first_track],[v,rest]]]        ]]]]],[[[[v,p],[2,3,4,5]]]])./* Sales1. Inner child1. The product was spoon-fed to the customer.
test_types_cases(54,[[n,agree_with_government],[1,["a"],[v,end]]],[[[n,agree_with_government],[[t,number],{[t,string]},[[t,number],[t,string]]]]],        [[[n,agree_with_government],[input,input,output]]],[        [[n,agree_with_government],[[v,policy],[v,part],[v,end]],":-",        [                [[n,wrap],[[v,policy],[v,policy1]]],                [[n,append],[[v,policy1],[v,part],[v,end]]]        ]        ]],[[[[v,end],[1,"a"]]]]).
test_types_cases(65,[[n,characters],[["a",[["a"],"a"]]]],%[[n,characters],[[["a"],"a"]]],        [[[n,characters],[[[t,string],[[[t,string]],[t,string]]]]]],        %[[[n,characters],[[[t,brackets],[[[t,brackets],[[t,string]]],[t,string]]]]]],        [[[n,characters],[input]]],[        [[n,characters],[[v,person]]] ],[[]]).
test_types_cases(68,[[n,characters],[[["a",["a"]],"a"]]],%[[n,characters],[[["a",["a"]]]]],        [[[n,characters],[{{[t,string],{[t,string]}},[t,string]}]]],                %[[[n,characters],[[[t,brackets],[[[t,brackets],[[t,string],[[t,brackets],[[t,string]]]]]]]]]],        [[[n,characters],[input]]],[        [[n,characters],[[v,person]]] ],[[]]).test_types_cases(69,[[n,characters],[[a]]],%[[n,characters],[[["a"],"a"]]],        [[[n,characters],[{[t,atom]}]]],        %[[[n,characters],[[[t,brackets],[[[t,brackets],[[t,string]]],[t,string]]]]]],        [[[n,characters],[input]]],[        [[n,characters],[[v,person]]] ],[[]]).
test_types_cases(74,[[n,atom_any],[["a",2,3,"b",1,1]]],[[[n,atom_any],[[t,atom_any1]]],[[t,atom_any1],[{[t,string],[t,number],[t,number]}]]%[[t,any1],[[t,number]]],%[[t,any1],[[t,number],[t,number]]]],[[[n,atom_any],[input]]],[        [[n,atom_any],[[v,_]]] ],[[]]).test_types_cases(75,[[n,list1],[[4,b,"c","c"]]],%[[n,list1],[[4,b,"c",b,"c",5,d,"e",d,"e"]]],[[[n,list1],[[t,1]]],[[t,1],[[]]],[[t,1],[[[t,number],"|",[t,2]],"|",[t,1]]],[[t,2],[[]]],[[t,2],[[[t,atom],"|",[t,3]],"|",[t,2]]],[[t,3],[[]]],[[t,3],[[t,string],"|",[t,3]]]],[[[n,list1],[input]]],[[[n,list1],[[v,_]]]],[[]]).
test_types_cases(8,[[n,f],[[v,d],[v,a],[v,c]]],[[[n,f],[[t,number],[[t,list],[[t,number],[t,string]]],[t,number]]]],[[[n,f],[output,output,output]]],[        [[n,f],[1,[1,"a",2,"b"],1]]],[[[[v,d], 1],[[v,a], [1,"a",2,"b"]],[[v,c], 1]]]).test_types_cases(9,[[n,f],[1,"a"]],[        [[n,f],[[t,a],[t,b]]],        [[t,a],[[t,number]]],        [[t,b],[[t,string]]]],[        [[n,f],[input,input]]],[        [[n,f],[1,"a"]]],[[]]).
traverse(Z,X,Y) :-traverse(Z,X,Y,[],_,[],_).
unique1(_Remainders,[],UniqueRemainders,UniqueRemainders) :- !.
version1([],A,F,B,A,F,B) :- !.
word1([])-->[].
write_heading(String01,Heading) :-concat_list([String01,"\n","\n"],Heading).
 contains_var(_,[]) :- fail.
 diff_group_combos(A,A,[A]) :- !.
 /*X:diff_combos([1,2,3],[1,2,4,3],C).
 contains_loop1(A) :- member([loop,_],A),!.%,flatten(A,B),member(loop,B),!.
 minimise_dfa([],B,B) :- !.
        interpretbodylp2p(Body,Algorithm1,Algorithm2) :-        Body=[[[n,not],[Statement]]|Statements2],string_concat(Algorithm1,"not((",Algorithm3),        interpretbodylp2p([Statement],Algorithm3,Algorithm4),string_concat(Algorithm4,"))",Algorithm5),write_comma_if_not_empty_list(Statements2,Algorithm5,Algorithm6),        interpretbodylp2p(Statements2,Algorithm6,Algorithm2),        %%write_full_stop_if_last_item(Statements2,Algorithm7,Algorithm2),!.
        interpretstatement1(non-ssi,_Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-get_lang_word("v",Dbw_v),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("call",Dbw_call1),Dbw_call1=Dbw_call,%%writeln1("h1/10"),%trace,%find_pred_sm(Reserved_words1),        ((Query1=[[Dbw_n,Dbw_call],[[lang,Lang1],Debug1,[Function,Arguments],Functions%,Result        ]],Tm=off%,        %not(member(Dbw_call,Reserved_words1))        )->true;        (Query1=[[Dbw_n,Dbw_call],[[lang,Lang1],Debug1,[Function,Arguments],Types,Modes,Functions%,Result        ]],Tm=on)),                        %trace,                lang(Lang2a),        types(Types2a),  (Types2a=on->(typestatements(TypeStatements2a),  modestatements(ModeStatements2a));true),          (Lang1=same->lang(Lang2);Lang2=Lang1),        (Debug1=same->debug(Debug2);Debug2=Debug1),                %%not(Function=[n,grammar]->true;Function=[n,grammar_part]), ****%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),        %%***writeln1(substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs)),        ((Function=[Dbw_v,F_name],                not(reserved_word2(F_name)))->        (append([Function],Arguments,Arguments1),        substitutevarsA1(Arguments1,Vars1,[],Vars3,[],FirstArgs),        Vars3=[Function1|Vars31],        Query2=[Function1,Vars31]);        (substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs),        %simplify(Vars32,Vars3), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln1([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),        Query2=[Function,Vars3]        %not(reserved_word2(Vars3))        )), %% Bodyvars2?%%        debug(on)->writeln1([call,[Function,[Vars3]]]),%%writeln1(["Query2",Query2,"Functions0",Functions0]),                        %interpret2(Query2,Functions0,Functions0,Result1),         (Tm=off->international_interpret([lang,Lang2],Debug2,Query2,Functions,Result1a);international_interpret([lang,Lang2],Debug2,Query2,Types,Modes,Functions,Result1a)),member(Result1,Result1a),retractall(lang(_)), assertz(lang(Lang2a)),retractall(types(_)), assertz(types(Types2a)),  (Types2a=on->(  retractall(typestatements(_)),  %findall([A,C],(member([A,B],TypeStatements2a),expand_types(B,[],C)),TypeStatements2a1),assertz(typestatements(TypeStatements2a)),retractall(modestatements(_)), assertz(modestatements(ModeStatements2a)));true),updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],(%trace,unique1(Vars7,[],Vars8)%,notrace));(%%writeln1(here1),Vars8=[])).        %%%% Run Prologinterpretstatement1(ssi,_Functions0,_Functions,[[Dbw_n,Dbw_shell_pl],[I,QP,QV,P,OVar]],Vars1,Vars2,true,nocut) :-%trace,%get_lang_word("v",Dbw_v),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("shell_pl",Dbw_shell_pl1),Dbw_shell_pl1=Dbw_shell_pl,        interpretpart(shell_pl,I,QP,QV,P,OVar,Vars1,Vars2).
                                                             compress_vars0([[[[v,a],[[1],[2,3]]],[[v,b],[[1],[3]]]],[[[v,c],[1]]]],V2,VG).V2 = [[[[v, a], [[&, 2], [&, 4]]], [[v, b], [[&, 6], [&, 8]]]], [[[v, c], [&, 9]]]],VG = [[[1], [&, 6]], [[3], [&, 8]], [[1], [&, 2]], [[2, 3], [&, 4]], [[1], [&, 9]]].
        */interpretpart(grammar_part,Variables1,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("grammar_part",Dbw_grammar_part),Variables1=[Terminal,Phrase1,Phrase2], %% terminal can be v or "a"        %%terminal(Terminal),        %trace,grammar_part2(Dbw_n,Dbw_grammar_part,Terminal,Phrase1,Phrase2,Vars1,Vars2).
      % A & B share a common parent         %                 % A is different from B  (Bratko, p175)% sibling_list(Child, Siblings)% Siblings is a list of A1's brothers and sisters%sibling_list(A1, Siblings) :-findall([A,B],parent(A,B),C),findall([A1,B1],(member([X, A1],C),member([X, B1],C),not(A1=B1)),List),remove_duplicates(List, Siblings),!.
    % save("file_name.txt",[[["player_name","Harold"],["score",10],["symbol",key_word]],[["player_name","Queenie"],["score",20],["symbol",schema]]]).
    ?- load("file_name.txt",Term),writeln1(Term).
   entry([Word2,Word4]) -->   "[", word(Word), {string_codes(Word2,Word),string(Word2)},",",           word(Word3), {string_codes(Word4,Word3),string(Word4)},              "]".
   paraphraser([string,"Diversity Diversity Diversity"],A,on).
   paraphraser([string,"Diversity word word"],A,on).
   paraphraser([string,"d d d"],A,on).
  red  blue yellow  purple greenwhite*/pretty_print(Object,Method) :- object(Object,Items2), pretty_print(Method,Items2).
  red yellow  bluewhite green  purplepretty_print(cube, dfs_post_order).
 % check predicatescheck_file(F1,Files) :- findall(_,(member([_R,F1,P],Files), findall(_,(member(Predicate,P), check_predicate(Predicate,Files)),A), length(P,L1),length(A,L1)),_B).
 %alg_gen1(Rest,Alg_gen_dict1a,Alg_gen_dict1b,Alg_gen_dict2a,Alg_gen_dict2b).
 %findall(N,(member(Y2,H),get_particle_image([X2,Y,Z2,N],G)),Ys), %findall(N,(member(X2,J),get_particle_image([X,Y2,Z2,N],G)),Xs),!.
 %trace, %(atom(Single_item1)->Single_item1=Single_item; %(flatten(["\"",Single_item1,"\""],Single_item2), %foldr(string_concat,Single_item2,Single_item))), %(Single_item1=""""->trace;true), ((((atom(Single_item1)->true;string(Single_item1))), contains_string2(Single_item1,_S) )-> (atomic_list_concat(A,"\"",Single_item1), atomic_list_concat(A,"\\\"",Single_item2), foldr(string_concat,["\"",Single_item2,"\""],Single_item)); term_to_atom(Single_item1,Single_item)), %atom_string(Single_item,Single_item2), %string_atom2(Single_item,Single_item2), %atomic_list_concat(A,"\"\"",Single_item2), %atomic_list_concat(A,"\"",Single_item),  !.
 ),_%T6 ), %*** %),_),  % take apart, save repos % delete build/rep afterwards%get needed reps%findall1(Results,(member(Repository1,Dependencies9),%(Repository1="b"->trace;true),%member([Repository1,Dependencies7],Dependencies6),%findall1(_,(member(Repository1,Dependencies7),%writeln(["Installing required repository",Repository1]),%lppm_install_luciancicd(LPPM_registry_term1,"luciangreen",Repository1),%),_),%trace,%pwd,%notrace,% test non-interactive algorithms%trace, (success(1)->fail;true), %success_tmp(Tmp36),(forall(member(Tmp4,Tmp36),Tmp4=1)->true;fail),writeln2(["Running tests"]),%trace,findall1(H4,(member(Repository1b,Dependencies99),findall1([Repository1b,Main_file1],member([Repository1b,Main_file1,_,_],H3),H4)),H5),%writeln([member(Repository1b,Dependencies99)]),foldr(append,H5,H61),sort(H61,H6),%trace,%Repository1b=Dep99,%trace,findall1(Results2,(member([_,_Main_file],H6),%member(Repository1b,Dependencies99),(success(1)->fail;true),working_directory1(_,A1), /*findall1(Tests_a,(member([Repository1b1,_],H6), foldr(string_concat,["../private2/luciancicd-cicd-tests/tests_",Repository1b1,".txt"],Test_script_path),(catch(open_file_s(Test_script_path,Tests_a),_,(writeln2(["Cannot find",Test_script_path]),fail%,abort)))),Tests_b),*/%trace,%foldr(append,Tests_b,Tests),%->((%trace,%working_directory1(_,A1), %***working_directory1(A,A),%trace,%T473=AT3331c,append(AT2331c,AT1331c,AT3331c),%trace,tests_pred2(Tests,AT3331c,Tests01),%trace,%Tests=Tests01,sort1(Tests01,Tests0),%writeln([tests0,Tests0]),%notrace%trace,findall1(Result,(member([Go_path1,File,Command],Tests0),%trace,working_directory1(_,A),%trace,check_non_var(Command,Command1),% concurrent from here%trace,Repository1b=Go_path1,%trace,%trace,(true->%tests_pred(AT1331c,Command)->(%foldr(string_concat,["../private2/luciancicd-testing/",%Repository1,%Go_path1],Go_path),foldr(string_concat,["../luciancicd-testing/",Repository1b,"/"],_Go_path3),%foldr(string_concat,["../private2/luciancicd-testing/",%Repository1,%"/",%Go_path1,"/main_file.txt"],Go_path2),%(catch(open_file_s(Go_path2,[Main_file1,_,_]),_,%(writeln2(["Cannot find",Test_script_path]),(writeln(["Missing main_file.txt in " ,Go_path1,"/"]),abort)%,abort%))),%trace,%read_main_file(Repository1b,Main_file1%,_,_%),%atom_string(Main_file1,Main_file),((working_directory1(_,A),%trace, %*** %(exists_directory_s(LCTD)->true;make_directory_s(LCTD)), make_directory_recursive_s(LCTD,Go_path1),working_directory1(_,LCTD),%working_directory1(_,Go_path),working_directory1(_,Go_path1),% *** Change path to swipl if necessary%trace,%term_to_atom(Command2,Command1),/*string_concat(Repository1b,Go_path1a,Go_path1),split_string(Go_path1a,"/","/",Go_path3),(Go_path3=[_Go_path4]->Go_path5="";(Go_path3=[_|Go_path6],atomic_list_concat(Go_path6,'/',Go_path7),string_concat(Go_path7,"/",Go_path5))),*/%:-initialization(catch(call_with_time_limit(1,main),Err,handle_error(Err))).
 */  SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xx phrase_from_file_s(string(Codes_cve), "connectives.txt"),string_codes(String_cve,Codes_cve),atom_to_term(String_cve,Connectives,_), phrase_from_file_s(string(Codes), "p2a_file.txt"),string_codes(String,Codes),atom_to_term(String,[File0],_),downcase_atom(File0,File1),split_string(File1,SepandPad,SepandPad,File2),File2=[Word1,Word2|_],phrase_from_file_s(string(Codes2), "correspondences.txt"),string_codes(String2,Codes2),atom_to_term(String2,Correspondences,_),(member([Word1,Word1a],Correspondences)->(Word1b=Word1a,Correspondences=Correspondences2);(concat_list(["What is a corresponding word for: ",Word1," in the pair: (",Word1,", ",Word2,")?\n","or <Return> to skip."],Notification1),writeln(Notification1),read_string(user_input, "\n", "\r", _End1, Input1),(Input1=""->(Word1b=Word1);(Word1b=Input1)),append(Correspondences,[[Word1,Word1b]],Correspondences2))),(member([Word2,Word2a],Correspondences2)->(Word2b=Word2a,Correspondences2a=Correspondences2);(concat_list(["What is a corresponding word for: ",Word2," in the pair: (",Word1,", ",Word2,")?\n","or <Return> to skip."],Notification2),writeln(Notification2),read_string(user_input, "\n", "\r", _End2, Input2),(Input2=""->(Word2b=Word2);(Word2b=Input2)),append(Correspondences2,[[Word2,Word2b]],Correspondences2a))),phrase_from_file_s(string(Codes3), "connections.txt"),string_codes(String3,Codes3),atom_to_term(String3,Connections,_),(path(Word1b,Connections,_Map,Word2b,[],Path,[],Trail)->(Connections2a=Connections,Connectives=Connectives1a);(%repeat,%trace,concat_list(["What is a list of connective sentences from: (",Word1b," to ",Word2b,")?\n","e.g. get map for goal,walk from start to goal"],Notification3),writeln(Notification3),read_string(user_input, "\n", "\r", _End3, Input3),(Input3=""->(fail);(split_string(Input3,".",".",Sentences1))),SepandPad2=" ",findall(List1,(member(Sentences,Sentences1),split_string(Sentences,SepandPad2,SepandPad2,List1)),List2),length(List2,Length),%numbers(Length,1,[],N),%trace,process_sentences(1,Length,Sentences1,List2,Connections,Connections2a,Connectives,Connectives1a),path(Word1b,Connections2a,_Map,Word2b,[],Path,[],Trail))),writeln1(Path), %***%trace,% Philfindall(A_I,(member([[A_A|A_B],_],Path),string_concat(A_C,A_D,A_A),string_length(A_C,1),upcase_atom(A_C,A_E),string_concat(A_E,A_D,A_F),findall([A_G," "],(member(A_G,A_B)),A_H),%trace,reverse(A_H,A_K),A_K=[[A_L," "]|A_M],reverse([[A_L]|A_M],A_N),%string_concat(A_K," ",A_H),maplist(append,[A_N],[A_O]),concat_list(A_O,A_P),concat_list([A_F," ",A_P,". "],A_I)),A_J),%trace,maplist(append,[[A_J]],[[A_K]]),writeln(A_K),%** Alg ***alg(Trail,Alg),writeln(Alg),term_to_atom(Connections2a,Connections12a1),(open_s("connections.txt",write,Stream1),write(Stream1,Connections12a1),close(Stream1)),!,term_to_atom(Connectives1a,Connectives1a1),(open_s("connectives.txt",write,Stream2),write(Stream2,Connectives1a1),close(Stream2)),!,term_to_atom(Correspondences2a,Correspondences4),(open_s("correspondences.txt",write,Stream3),write(Stream3,Correspondences4),close(Stream3)),!.
 /* -> (subtract(Next_pred_id1,[Pred_id],Pred_ids11), append(Pred_ids1,[Pred_ids11],Pred_ids3)); Pred_ids1=Pred_ids3), collect_connected_pred_ids2(Next_pred_id,Pred_ids3,Pred_ids2,Globals3).
 /* findall1([E,Ad],member([Ad,[loop,E]],D),F), foldr(put_sub_term_wa_ae,F,   A, C1), (C1=A->C1=C; find_groups_replace_loops(C1,C)).
 compile_list([[a,"b"],c,"d"],N1,S1),compile_list(["e",[[]],f],N2,S2),append_iio(N1,S1,N2,S2,N3,S3),uncompile_list(N3,S3,L).
 find_dimensions(Min_X,Max_X,Min_Y,Max_Y,Min_Z,Max_Z,X,Y,Z) :- X is Max_X-Min_X+1, Y is Max_Y-Min_Y+1, Z is Max_Z-Min_Z+1.
 replace_particle_image([X1,Y1,Z1,N1],%[X2,Y2,Z2,N], Grid11,Grid2) :- (replace_particle_image1([X1,Y1,Z1,N1],%[X2,Y2,Z2,N], Grid11,Grid2)->true;writeln(here)).
#<(C,A*B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C < A*B.
#<(C,A/B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C < A/B.
#=(C,A*B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C is A*B.#=(C,A/B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C is A/B.
#=(C,A-B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C is A-B.
#>(C,A*B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C > A*B.
#>(C,A-B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C > A-B.
#>(C,A/B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C > A/B.
#\=(C,A*B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C \= A*B.
#\=(C,A+B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C \= A+B.
#\=(C,A-B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C \= A-B.
#\=(C,A/B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C \= A/B.
% maplist(append,[[[40],B1,[41]]],[B12]), % "()"%varname1line(A) -->%{trace},varname_or_names(Varnames1),"=",varname_or_names(Varnames2),{A=[[n,equals4],[Varnames1,Varnames2]]}.line(A) --> %%spaces1(_), name1(Word11), %% name(A,B,C){%trace,Word11=not},"(",lines(Lines),")",{A=[[n,Word11],Lines]},!.line(A) --> %%spaces1(_), name1(Word11), %% name(A,B,C).{%trace,not(Word11=findall)},"(",varnames(Varnames),")",{A=[[n,Word11],Varnames]},!.line(A) --> %%spaces1(_), name1(Variable1),{%trace,not(Variable1=findall)},spaces1(_), %% A = B*Y(name1(_Is)|name2(_Equals)), spaces1(_), name1(Variable2), name2(Operator), name1(Variable3), { %% A=B*Y v_if_string_or_atom(Variable2,Variable2a),v_if_string_or_atom(Variable3,Variable3a),v_if_string_or_atom(Variable1,Variable1a),A=[[n,Operator],[Variable2a,Variable3a,Variable1a]]},!.
% maplist(append,[[[40],B1,[41]]],[B12]), % "()"%varname1line(A) -->%{trace},varname_or_names(Varnames1),newlines1(_),"=",newlines1(_),varname_or_names(Varnames2),%newlines1(_),{A=[[n,equals4],[Varnames1,Varnames2]]}.
%  ["Medicine","MEDICINE by Lucian Green 250 Breasonings 1 of 4.txt",0,algorithms,"5. I prepared to listen to the classical music, which had an expanse of 50 As.  I did this by listening to classical music.  First, I found the record.  Second, I played it on the gramophone.  Third, I listened to the classical music.  In this way, I prepared to listen to the classical music, which had an expanse of 50 As by listening to classical music."]test_types_cases(42,[[n,as_expanse],[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]]],[[[n,as_expanse],[{[t,number]}]]],        [[[n,as_expanse],[input]]],[        [[n,as_expanse],[[v,numbers]],":-",        [       [[n,findall],[[v,num],[[[n,member],[[v,num],[v,numbers]]],        [[n,number],[[v,num]]]],[v,num2]]]]]],[[]]).
%  p(grid1,grid2,...){ add_to_grid(grid1,grid3);}%  -> p(Grid1,Grid2,...) :- add_to_grid(Grid1,Grid3)...
% " \"" -> \" \\\"\"interpretstatementlp2p5(Single_item1,_,Single_item,_,_Brackets) :- single_item_not_var(Single_item1), %term_to_atom(Single_item1,Single_item),!.
% 'A1', 1,a not [num,_] etcvar_or_data1(A) :- only_item(A),(A=[A1,_]->not(type_s2a1(A1));true).%var_or_data2(A) :- is_var_s2a(A).
% 'A1', [num,_] etc, not num etcvar_or_data1_c(A) :- %trace,(is_var_s2a(A)->true;(A=[A1,_],type_s2a1(A1))),not(type_s2a1(A)).
% (c:d):e -> [[append, [c:d, e],  (c:d):e], [append, [c, d], c:d]] -> below% reverse([[1],[2]],[],A).% A = [[2], [1]].
% (guess before 12PM x) br from now to tt (poss after walk, nap)% continue using alg, ask whether in 2024 or 5689, if 2024 2*80 br, if 5689, now-11 AM next dayschedule :-get_time(TS),stamp_date_time(TS,date(YearValue,MonthValue,DayValue,HourValue,MinuteValue,_SecondsValue1,_A,_TZ,_False),local), foldr(string_concat,["Scheduler\n\n","The time now is ",HourValue,":",MinuteValue,".\n\n"],B), writeln(B), writeln("Will you go for a walk (y/n)?"), read_string(user_input,"\n\r","\n\r",_,S1), (S1="y"->(writeln("How many minutes will it take (including preparations)?"), read_string(user_input,"\n\r","\n\r",_,S2), number_string(N2,S2));N2=0),  writeln("Will you have a nap afterwards (y/n)?"), read_string(user_input,"\n\r","\n\r",_,S3), (S3="y"->(writeln("How many minutes will it take?"), read_string(user_input,"\n\r","\n\r",_,S4), number_string(N4,S4));N4=0), %trace, C is 60*(N2+N4), %date_time_stamp(date(YearValue,DayValue,HourValue,MinuteValue,0,0,-,-),Value1A), D is TS%Value1A +C,  E is ceiling((N2+N4)/60), F is E*5, stamp_date_time(D,date(_,_,_,HourValue1,MinuteValue1,_SecondsValue,_A1,_TZ1,_False1),local),foldr(string_concat,["I assume you will time travel after ",HourValue1,":",MinuteValue1,".\n\n","You will need ",E,"*5=",F," breasonings.\n\n","Press <Return> when you have time travelled."],G), writeln(G), get_single_char(_), writeln("You will need 160 breasonings at your first destination.\n\nPlease press <Return> when you have time travelled after this."), get_single_char(_),  get_time(TS1),stamp_date_time(TS1,date(_,_,_,HourValue2,_MinuteValue2,_,_,_,_),local),  H is 11+(24-HourValue2), J is H*5, foldr(string_concat,["\n\n","You will need ",H,"*5=",J," breasonings until 11 AM tomorrow.\n\n","Thank you."],K), writeln(K), !.
% * Preventstest_open_types_cases(34,[[n,prevent],[[v,a1],[v,a2]]],        [[[n,prevent],[[t,string],[t,string]]]],        [[[n,prevent],[output,output]]],[        [[n,prevent],[[v,a1],[v,a2]],":-",        [                        [[n,writeln],["What will you prevent?"]],                [[n,read_string],[[v,a1]]],                [[n,writeln],["What will you prevent it with?"]],                [[n,read_string],[[v,a2]]]        ]]]).
% * lovetest_open_types_cases(35,[[n,love],[[v,a1],[v,a2]]],        [[[n,love],[[t,string],[t,string]]]],        [[[n,love],[output,output]]],[        [[n,love],["y","y"],":-",        [                        [[n,writeln],["Do you love your partner? (y/n)"]],                [[n,read_string],["y"]],                [[n,writeln],["Do they love you? (y/n)"]],                [[n,read_string],["y"]]        ]]]).
% * need p, clause number in depsfind_pred_numbers_dependencies([],Deps,Deps,_) :- !.
% *** do in sm form instead to find deps% - attribute calls in preds to groups of preds%find_pred_numbers_dependencies(Algorithm1,Algorithm2,Pred_numbers) :-%findall1(Pred_nums,member([_Name,_Arity,Pred_nums],Pred_numbers),Pred_numbers1),%find_pred_numbers_dependencies(_Algorithm1,[],_Deps,_Pred_numbers),!.
% - change records of pn to new pn, same pid% connect firstargs in globals to new first args x needs to go back through frame tops, first args needs to be computed afterwards, so don't do in 1 frame%run_in_current_frame() :-!.
% -> p(grid1,grid2,...){ add_to_grid(grid1,grid3);}lp2c1(Algorithm1,Algorithm2) :-%% note: without type, mode statementsmemberlp2c10(Algorithm1,"#include <stdio.h>\n#include <stdlib.h>\n",Algorithm2).
% 1, 1+1/2, 1/2ff_frac(N1,S) :- floor(N1,N2), (N1 =:= N2->(N21=N2,N31=""); (N3 is N1-N2, numbers(4,0,[],Ns), member(N4,Ns), member(N5,Ns), catch(N3 is N4/N5,_,false), (N2=0->N21="";string_concat(N2,"+",N21)), foldr(string_concat,[N4,"/",N5],N31))), foldr(string_concat,[N21,N31],S),!. findall1(Form2,Form3) :-findall(B,shorten(Form2,B),Form3).shorten(Form2,B) :-member(A1,Form2),string_concat(B1,_C,A1),string_length(B1,1),atom_string(B,B1).
% 12-7=5 left% solve1(x^2,4*x,S1,S2).
% 12. ?- writeln("What is the breasoning?"),read_string(user_input,"\n","\r",_,S),A=[1,2,3],findall(B,member(B,A),C).
% 13 % ["Medicine","MEDICINE by Lucian Green Go to Bed at 9-30 PM 4 of 4.txt",0,algorithms,"Go to Bed at 9:30 PM 4 of 4"]:-include('philosophy/alarm_clock.pl').
% 14. I swapped the values. swap(A,B,B,A).
% 15. blessedbless(conception).
% 16-8=8% alg that reduces descr to simple algreduce("find dependencies",["find cycles","find non-cycles under cycle item","find dependencies and cycles bottom-up"]).
% 18 done:-include('../listprologinterpreter/la_maths.pl').
% 19-5=14-2 (grammar_logic_to_alg.pl)=12% arg_conn(a,j,[[all,[e,f]],[f,[a,c,g]],[c,[]],[g,[]],[e,[]],[all,[k]],[k,[j]]],all,C).
% 20 - 6  - 1 luciancicd = 13% ["Medicine","MEDICINE by Lucian Green Less Depression 3 of 4.txt",0,algorithms,"22. I prepared to prevent bullying by teaching pedagogy, medicine and meditation to give skills to complete tasks with positive functionalism.  I did this by providing Brass service as breasonings currency.  First, I found the brass instrument.  Second, I pressed my lips next against the mouthpiece.  Third, I played a note.  In this way, I prepared to prevent bullying by teaching pedagogy, medicine and meditation to give skills to complete tasks with positive functionalism by providing Brass service as breasonings currency."]/*?- distance_greater(0,0,14,15,9).
% 23get1(subject,"I").
% 28-14=14% ["Delegate workloads, Lecturer, Recordings","Delegate Workloads 1.txt",0,algorithms,"32.I compared notes."]:-include('../listprologinterpreter/la_maths.pl').
% 28-8=20% ["Short Arguments","Professor Algorithm.txt",0,algorithms,"9. I prepared to say it encouragingly.  I did this by performing the verb.  First, I loved you.  Second, I loved it.  Third, I wanted it."]/*?- verb(Object,Adjective,Verb,Adverb,Room,Part_of_room,Direction,Time_to_do,Time_to_finish).
% 2nd time bbba has 2 bs req branching point% find_g1([],G,G) :-find_g1(Items,G1,G2) :-%Items=[Item1|Items2],%is_list()* s2l, ind gs (editing editing aa in baabaa), dt, x dt, do ind gs on branch segments x too difficult to move parts upx: backwards: gsdt gs with only same first letterfind gs first (loops)only if subtree exactly the same * use diff gs in diff terms unless same g x always use same gstrain tracks: any config can be accounted for, ()* do dec trees from Ts at same time - before gsdecision_tree_s2(Items,T),%sub_term_wa(T,[_,[]],Insts), % find terminals* if rest of tree is same then can merge, otherwise stay separatetry subtrees in case multiple subtrees* bottom up lists and trees, finished lists are gsdec tree on lists, backwardsrecn on lists* no quote types " or ' in quotes% find deps*/% string to list finds brackets, needs to refer to repeating parts already found% * other types of brackets incl quotes% after s2l, puts together g reusing simplest gs first% dec trees/*query_box_2(T):-A="[[\"aa,]\",b,\"c\",[]],1]",string_chars(A,C),findall(G,(member(E,C),atom_string(E,G)),F),grammar1(F,T).
% 3. playwright% playwright([night,eventide,sea,island],[walking,trancing,tight-rope-walking,cartwheeling],[quadratic-formula-finder,logic-validity-finder,algebra_finder]).
% 30cos1(Deg,Cos_D) :- Cos_D1 is cos(Deg*pi/180),  epsilon(E), ((Cos_D1 < E, Cos_D1 > -E)-> Cos_D is 0; Cos_D = Cos_D1).
% 34-18=16% find regions of texts with co-occurring terms% co_occurring_terms(Ns).
% 3D edge% edge_3d(3,3,3,1,1,1,3,1,1,1,3,1,1,1,3,2,2,2).
% 4. Second, I observed you like me.  observations(like).
% 55% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Y Dimension 4 of 4.txt",0,algorithms,"42.  I prepared to observe the couple help the child with school work.  I did this by observing the couple breason out the Anarchy argument to help ensure successful conception and prevent miscarriage.  First, I observed the one of the members of the couple breason out the Anarchy argument.  Second, I observed that the conception had been successful.  Third, I observed the couple meditate (see a doctor) before, during and after pregnancy.  In this way, I prepared to observe the couple help the child with school work by observing the couple breason out the Anarchy argument to help ensure successful conception and prevent miscarriage."]% Y Dimensiontype_climber :-type_climber(5,3,0,N1),writeln([score,N1]),type_climber(5,2.6,0,N2),writeln([score,N2]),type_climber(5,2.2,0,N3),writeln([score,N3]),type_climber(5,1.8,0,N4),writeln([score,N4]),type_climber(5,1.2,0,N5),writeln([score,N5]),type_climber(5,0.8,0,N6),writeln([score,N6]).
% 6 - load datatestopen_cases(6,[[n,test]],[[[n,test],":-",[[[n,open_file],['file.txt',["Name",[v,t1]]]],[[n,list_to_string],[[v,t1],[v,t]]],[[n,writeln],[["Name",[v,t]]]]]],[[n,open_file],[[v,path],[v,file_term]],":-",[[[n,open],[[v,path],read,[v,stream]]],[[n,read],[[v,stream],[v,file_term]]],[[n,close],[[v,stream]]]%[[n,atom_string],[[v,file_term1],[v,file_term2]]],%,[[n,cut]]]],[[n,list_to_string],[[v,a],[v,b]],":-",[[[n,"->"],[[[n,string],[[v,a]]],[[n,wrap_if_string],[[v,a],[v,b]]]]],[[n,cut]]]],[[n,list_to_string],[[v,a],[v,b]],":-",[[[n,list_to_string],[[v,a],"",[v,b]]]%,[[n,cut]]]],[[n,list_to_string],["",[v,b],[v,c]],":-",[[[n,concat],[[v,b],"\"\"","",[v,c]]]%,[[n,cut]]]],[[n,list_to_string],[[],[v,b],[v,c]],":-",[[[n,concat],["[",[v,b],"]",[v,c]]]%,[[n,cut]]]],[[n,list_to_string],[[v,a],"",[v,c]],":-",[[[[n,"->"],[[[n,atom],[[v,a]]],[[n,true]],[[[n,number],[[v,a]]]]]],[[n,atom_string],[[v,a],[v,c]]]]%,[[n,cut]]]],[[n,list_to_string],[[v,a],[v,b],[v,c]],":-",[[[n,"->"],[[[[n,not],[[[n,"->"],[[[n,equals4],[[v,a],[[v,a1],"|",[v,a2]]]],[[n,true]],[[n,equals4],[[v,a],[]]]]]]]],[[[n,"->"],[[[n,equals4],[[v,b],""]],[[n,equals4],[[v,g],""]],[[n,equals4],[[v,g],[","]]]]],[[n,concat],[[v,b],[v,g],[v,a],[v,c]]]],[[[n,equals4],[[v,a],[[v,d],"|",[v,e]]]],[[n,wrap_if_string],[[v,d],[v,d1]]],%[[n,trace2]],[[n,list_to_string],[[v,d1],"",[v,f]]],[[n,"->"],[[[n,equals4],[[v,b],""]],[[[n,equals4],[[v,g],""]],[[n,equals4],[[v,f],[v,f2]]]],[[[n,equals4],[[v,g],","]],[[n,equals4],[[v,f],[v,f2]]]]]],[[n,concat],[[v,b],[v,g],[v,f2],[v,f1]]],[[n,list_to_string],[[v,e],[v,f1],[v,c]]]]]]%,[[n,cut]]]],[[n,wrap_if_string],[[v,a],[v,b]],":-",[[[n,"->"],[[[[n,not],[[[n,equals4],[[v,a],""]]]],[[n,string],[[v,a]]]],[[n,maplist],[[n,string_concat],["\"",[v,a],"\""],"",[v,b]]],[[n,equals4],[[v,a],[v,b]]]]]%,[[n,cut]]]],[[n,concat],[[v,b],[v,g],[v,a],[v,c]],":-",[[[n,maplist],[[n,string_concat],[[v,b],[v,g],[v,a]],"",[v,c]]]%,[[n,cut]]]]]).
% 6. Second, I wrote they must be perfect. % perfect([1,1,1]).
% 70% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Part of Room 3 of 4.txt",0,algorithms,"25. The brainworks participant wrote breasonings  (thought of X, Y and Z dimensions for objects) for a 'seen-as' essay based directly on secondary literature, and handed in an essay of his design.  He did this by moving the arch from his toes.  First, he bent down.  Second, he put the arch over his toes.  Third, he removed the arch.  In this way, the brainworks participant wrote breasonings  (thought of X, Y and Z dimensions for objects) for a 'seen-as' essay based directly on secondary literature, and handed in an essay of his design by moving the arch from his toes."]% Room% light_where_people_are([1,2,3],A).
% 8 done% ["Short Arguments","Medicine - Quantum Box of Circulatory System 2.txt",0,algorithms,"4. I felt clear.  I knew it was there, and moved it on.  I meditated, giving my voluntary control over involuntary processes.  I detected a piece of food in my blood vessel.  It wasn't there later."]:-include('../listprologinterpreter/listprolog.pl').
% 8 so far:-include('sub_term_with_address.pl').
% ?- A=[-1,-1,1,1,1],not(forall(member(B,A),B=1)).
% ?- A=[0,0,1,1,1],member(B,A),member(C,A),2 is B+C.
% ?- A=[1,1,1,1,1],not(forall(member(B,A),B=1)).
% ?- A=[[1,2],[1,3],[1,4]],B=[[3,5],[6,5],[7,5]],member([1,C],A),member([C,5],B).% A = [[1, 2], [1, 3], [1, 4]],% B = [[3, 5], [6, 5], [7, 5]],% C = 3 ;% 8. I prepared to eat caviar (durum wheat semolina).steps(black_currant_juice,[durum_wheat_semolina]).
% ?- algebra([(2+(-1))*(a+b)],A).% A = [2*a+2*b+ -1*a+ -1*b].
% ?- algebra([1*x,+,3*x],A).
% ?- algebra([2*(a+c)],A).% A = [2*a+2*c] ;% ?- algebra([2*(a+(-1*c))],A).
% ?- all_fifty(D).% D = [[book1, 50], [book2, 60], [book5, 50]].
% ?- faster_than_personal_best(2,1).
% ?- how_much_faster_than_personal_best(1,2,D).
% ?- neuronetwork_values_ready_by_times([[2,1],[3,2],[4,2],[5,4],[6,2],[7,3],[8,7],[9,8]],G),writeln(G).% [1,[2],[[3,4,6],[[7],[[8],[[9],[[]]]]],[[5],[[]]],[[]]]]neuronetwork_values_ready_by_times(Values,Times_GAANT) :- nng(Values,%_, 1,[1],Times_GAANT).
% ?- professor_algorithm("In this way, I prepared to verify that the algorithms had the same qualities by stating that the self should find similarities of ontologies in the other's five algorithms.",A).
% ?- split_on_non_alpha("abc 123 &*( ffg, g!",A).
% ?- split_on_non_alpha_keep_quotes("Andrew’s duckling.",A).
% ?- ssi_in_c(S).
% ?- trace,split_into_sentences("a b c. d e f.",*,2, E). * run with make_exercises% E = [["a b _____.", "c"], [" _____ e f.", "d"]].
% ?- trope_finder(add,A),writeln1(A).
% ?- truncate_words_conserving_formatting(["string","a123b ()c d e f"],3,["string",S]).
% ?- truncate_words_conserving_formatting(["string","a123b ()c d e f"],3,["string",S]).% S = "a123b ()c".
% A = [[[n,a],[[],[v,a],[v,a]]],[[n,a],[[[v,a],"|",[v,d]],[v,b],[[v,a],"|",[v,c]]],":-",[[[n,a],[[v,d],[v,b],[v,c]]]]]]% identity% pf_types1(As,D),pf_types(As,D,A),writeln1(A).
% A/B = C/D% rhetoric1([as,2,is,to,5,4,is,to,10]).
% Auxiliary predicate to process the listgroup_consecutive_aux([], []).
% Auxiliary predicate to process the listgroup_consecutive_aux([], []).group_consecutive_aux([H|T], [Group|Groups]) :-    collect_consecutive(H, T, Group, Rest),    group_consecutive_aux(Rest, Groups).
% Base case: diff_a of empty lists is emptydiff_a([], [], _,_,[], [], _, L, L).
% Calculate the number of additions and deletionsnum_new_num_del(A,B,N,D) :-subtract(B,A,N),subtract(A,B,D).% * Second, I wrote that it is good.
% Case 1: Head elements are the samediff([X|Xs], [X|Ys], Ins, Del, PI, List1, List2) :-    (member(X,PI)->append(List1,[[p,X]],List3);    append(List1,[X],List3)),    diff(Xs, Ys, Ins, Del, PI, List3, List2),    !.
% Case 1: Head elements are the samediff_a([X1|Xs], [X2|Ys], Insertions1,Deletions1,Ins, Del, PI, List1, List2) :-%trace,already_member1(X1,X2,Insertions1,Deletions1,X),    ((member(X3,PI),(catch(get_base_token_number(X3,X),_,false)->true;X3=X))->append(List1,[[p,X3]],List3);    append(List1,[X],List3)),    diff_a(Xs, Ys, Insertions1,Deletions1,Ins, Del, PI, List3, List2),    !.
% Case 2: Head elements are diff_aerent - X is in insertionsdiff_a(Xs, [Y2|Ys], Insertions1,Deletions1,[Y1|Ins], Del, PI, List1, List2) :-already_member2(Y2,Insertions1,Y),    ((member(Y3,PI),(catch(get_base_token_number(Y3,Y),_,false)->true;Y3=Y))->(append(List1,[[p,Y3]],List3),    Y1=[]);    (append(List1,[[i,Y]],List3),    Y1=Y)),    diff_a(Xs, Ys, Insertions1,Deletions1,Ins, Del, PI, List3, List2),    %append(Ins,[Y1],Ins1),    !.% Case 3: Head elements are diff_aerent - Y is in deletionsdiff_a([X2|Xs], Ys, Insertions1,Deletions1,Ins, [X1|Del], PI, List1, List2) :-already_member2(X2,Deletions1,X),    ((member(X3,PI),(catch(get_base_token_number(X3,X),_,false)->true;X3=X))->(append(List1,[[p,X3]],List3),    X1=[]);    (append(List1,[[d,X]],List3),    X1=X)),    diff_a(Xs, Ys, Insertions1,Deletions1,Ins, Del, PI, List3, List2),    %append(Del,[X1],Del1),    !.
% Case 2: Head elements are different - X is in insertionsdiff(Xs, [Y|Ys], [Y1|Ins], Del, PI, List1, List2) :-    (member(Y,PI)->(append(List1,[[p,Y]],List3),    Y1=[]);    (append(List1,[[i,Y]],List3),    Y1=Y)),    diff(Xs, Ys, Ins, Del, PI, List3, List2),    %append(Ins,[Y1],Ins1),    !.
% Case 3: Head elements are different - Y is in deletionsdiff([X|Xs], Ys, Ins, [X1|Del], PI, List1, List2) :-    (member(X,PI)->(append(List1,[[p,X]],List3),    X1=[]);    (append(List1,[[d,X]],List3),    X1=X)),    diff(Xs, Ys, Ins, Del, PI, List3, List2),    %append(Del,[X1],Del1),    !.
% DION: The subject shouldn't endorse positive-enough objects/**?- combination(2,[],A).
% Define the predicate to apply an operator to the accumulator and the next numberapply_operator([A,"^",B], Result) :-    Result is A^B.
% Define the predicate to apply an operator to the accumulator and the next numberapply_operator([A,"^",B], Result) :-    Result is A^B.apply_operator([A,"*",B], Result) :-    Result is A*B.
% Deletes \n in "\n"split_on_substring(A,B,_,D) :-split_on_substring(A,B,D),!.
% Example query%?- group_consecutive_items([[1,[1,2]],[2,[1,2]],[3,[3]],[5,[3]],[6,[3]]], Result).
% Example usage:% ?- evaluate([[1,"+",1,"+",["1",+,"1"],+"1"],+,"1"], Result).
% Example usage:% ?- evaluate([[1,"+",1,"+",["1",+,"1"],+"1"],+,"1"], Result).% Result = 6.
% Find %sub_term_wa([var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3], A21, Instances1),/*findall([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1)%,number(VN)),Instances1a),!. % variables and values*/% Poss values refers to TOTAL1 (a+b), TOTAL2 (total1+c), etc. after the poss variables a, b, c, etc.
% Follows a path with directions along the pathstest_types_cases(59,[[n,tour_heartland],[[1,2]]],        [[[n,tour_heartland],[{[t,number]}]],[[n,tour_heartland1],[{{[t,number]}},{[t,number]}]],[[n,heartland],[{{[t,number]}}]]],                [[[n,tour_heartland],[input]],        [[n,tour_heartland1],[input,input]],        [[n,heartland],[output]]],[        [[n,tour_heartland],[[v,path]],":-",        [         [[n,heartland],[[v,heartland]]],         [[n,tour_heartland1],[[v,heartland],[v,path]]]        ]],        [[n,tour_heartland1],[[v,heartland],[]]],        [[n,tour_heartland1],[[v,heartland],[[v,single_step]]]],        [[n,tour_heartland1],[[v,heartland],[v,path]],":-",        [         [[n,equals4],[[v,path],[[v,curr_step],[v,next_step],"|",[v,rest]]]],         [[n,member],[[v,step],[v,heartland]]],         [[n,equals4],[[v,step],[[v,curr_step],"|",[v,links_to]]]],         [[n,member],[[v,next_step],[v,links_to]]],         [[n,equals4],[[v,next],[[v,next_step],"|",[v,rest]]]],         [[n,tour_heartland1],[[v,heartland],[v,next]]]        ]],        [[n,heartland],[[[1, % node number        2,3 % links to        ],[2,3],[3]]]]        ],[[]]).
% GitHub:- include('grammar_logic_to_alg.pl').
% GitHub/Algorithm-Writer-with-Lists/:- include('GitHub/SSI/ssi.pl').
% Gives what is left to do:% extra_curricular([headache-medicine,music-number-one],B).
% Graphs, returns true if point is inside a triangle/*edge(3, 3, 1, 1, 1, 3, 3, 2, 2, 2).
% Helper predicate to collect consecutive elements with the same body and consecutive headscollect_consecutive(X, [], [X], []).
% I rendered the 3D grid% Later: shadows, different keyboard controls (side and zoom), textures and modelling:-include('stack_shapes.pl').
% I want to swim if I am hottest_open_types_cases(8,[[n,swim],[[v,c]]],        [[[n,swim],[[t,string]]]],        [[[n,swim],[output]]],[        [[n,swim],[[v,c]],":-",        [                        [[n,writeln],["Are you hot (y/n)?"]],                [[n,read_string],[[v,a]]],                [[n,"->"],[[[n,=],[[v,a],"y"]],                [[[n,writeln],["Would you like to go for a swim?"]],                [[n,read_string],[[v,b]]],                [[n,"->"],[[[n,=],[[v,b],"y"]],                [[n,=],[[v,c],"swim"]],                [[n,=],[[v,c],"no swim"]]]]],                                [[n,=],[[v,c],"no swim"]]]]                        ]]]).test_open_types_cases(9,[[n,recognise_above_waist],[[v,c]]],        [[[n,recognise_above_waist],[[t,string]]],        [[n,person],[[t,string],[t,string],[t,string],[t,string]]]],        [[[n,recognise_above_waist],[output]],        [[n,person],[input,input,input,output]]],[        [[n,recognise_above_waist],[[v,d1]],":-",        [                        [[n,writeln],["Does the person have a male chest (y/n)?"]],                [[n,read_string],[[v,a]]],                [[n,"->"],[[[n,=],[[v,a],"y"]],                [[n,=],[[v,a1],"male chest"]],                [[n,=],[[v,a1],"female chest"]]]],                                [[n,writeln],["Does the person have a male face (y/n)?"]],                [[n,read_string],[[v,b]]],                [[n,"->"],[[[n,=],[[v,b],"y"]],                [[n,=],[[v,b1],"male face"]],                [[n,=],[[v,b1],"female face"]]]],                                [[n,writeln],["What colour hair does the person have (brown/blonde/auburn)?"]],                [[n,read_string],[[v,c]]],                [[n,"->"],[[[n,=],[[v,c],"brown"]],                [[n,=],[[v,c1],"brown hair"]],                [[n,"->"],[[[n,=],[[v,c],"blonde"]],                [[n,=],[[v,c1],"blonde hair"]],                [[n,=],[[v,c1],"auburn hair"]]]]]],                                [[n,"->"],[[[n,person],[[v,a1],[v,b1],[v,c1],[v,d1]]],                [[n,true]],                [[n,=],[[v,d1],"Unknown"]]]]        ]],                [[n,person],["male chest","male face","brown hair","Harry"]],        [[n,person],["female chest","female face","blonde hair","Susan"]],        [[n,person],["female chest","female face","auburn hair","April"]]]).
% In [true,true,true,true], true=true ^ true=true% rhetoric3([true,true,true,true]).
% In a,[1,2], b,[1,2], c,[2], c/a=c/b% rhetoric2([[a,[1,2]],[b,[1,2]],[c,[2]]],c,a,c,b).
% Line Graph:-include('../LuciansHandBitMap-Font/characterbr.pl').
% List the moving items at a particular time - items move perpendicularly, bounce off walls and off each other - if there are a number in a row, only the one on the other side one moves:-include('../listprologinterpreter/listprolog.pl').
% Login and record day's tasks:- use_module(library(date)).
% MEDICINE by Lucian Green Apple Meditation for Successful Relationship 1 of 4.txt% term analyser (length, depth, average number of items per branching point):-include('../listprologinterpreter/listprolog.pl').
% Mode = "token", "line" or "predicate"%luciancicd(Mode) :-%retractall(lc_mode(_)),assertz(lc_mode(Mode)),%luciancicd.
% NestedList = [[var, 1, 1, 1, _22900, 1, [], [], [], [], []], "+", [var, 1, 1, 1, _23132, 1, [], [], [], [], []]]% convert_tokens_to_nested_list(1,1,1,["(",1,"+","(",1,"+",1,")",")"], NestedList).
% NestedList = [[var, 1, 1, 1, _22900, 1, [], [], [], [], []], "+", [var, 1, 1, 1, _23132, 1, [], [], [], [], []]]% convert_tokens_to_nested_list(1,1,1,["(",1,"+","(",1,"+",1,")",")"], NestedList).% NestedList = [[var, 1, 1, 1, _37646, 1, [], [], [], [], []], "+", [[var, 1, 1, 1, _37884, 1, [], [], [], [], []], "+", [var, 1, 1, 1, _38116, 1, [], [], [], [], []]]]convert_tokens_to_nested_list(_T,_R,_C,Tokens, NestedList) :-  /* dynamic(ct_t/1), retractall(ct_t(_)), assertz(ct_t(T)),  dynamic(ct_r/1), retractall(ct_r(_)), assertz(ct_r(R)),  dynamic(ct_c/1), retractall(ct_c(_)), assertz(ct_c(C)), */  A=Tokens, phrase(a(NestedList),A),!. expr(E)-->num(E).
% NestedList = [[var, 1, 1, 1, _37646, 1, [], [], [], [], []], "+", [[var, 1, 1, 1, _37884, 1, [], [], [], [], []], "+", [var, 1, 1, 1, _38116, 1, [], [], [], [], []]]]convert_tokens_to_nested_list(_T,_R,_C,Tokens, NestedList) :-  /* dynamic(ct_t/1), retractall(ct_t(_)), assertz(ct_t(T)),  dynamic(ct_r/1), retractall(ct_r(_)), assertz(ct_r(R)),  dynamic(ct_c/1), retractall(ct_c(_)), assertz(ct_c(C)), */  A=Tokens, phrase(a(NestedList),A),!.
% New commands can only have inputs that occur in the header or once only in the bodyget_last_arg(In,Rules1,Last_arg) :- %trace, %member([Args00,_],[]),  % find args that occur once findall(Args,member([_P1,Args],Rules1),Args3), foldr(append,Args3,Args4), sort(Args4,Args7),  findall(G,(member(G,Args7),findall(G,member(G,Args4),H),length(H,J),J=1),L),  %subtract(Args4,Args5,Args6), %sort(Args6,Args7),  findall(Args00,(member([Args00,_],In),not(var(Args00))),Args02),append(Args02,L,Args01), %trace, member(Last_arg,Args01).
% P = [[[n,plus],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,a],[v,c]]]]]]:-include('../listprologinterpreter/listprolog.pl').simple_caw0(F,Rules,Initial_rules,In,Out,Start_of_predicate,Predicate) :- retractall(new_var1(_)), assertz(new_var1(0)),  findall(Val,member([_V,Val],In),Val1), %findall(Val,member([_V,Val],Out),Val1o), %findall(V,member([V,_Val],Out),Val1o1), Out=[[V,_Val2]],  append(Val1,[V],Query1), %append(Val1,Val1o1,Query1), Query=[[n,F],Query1], Result=[Out], % change in Prolog simple_caw(F,Query,Result,Rules,Initial_rules,In,Out,Start_of_predicate,Predicate).
% Person A enters data/*?- double_blind([0,1],C),writeln(C).
% Predicate to check if there's a cycle starting and ending at Nodecycle(Node, Tree,Cycles,Noncycles) :- % cycles %trace,    path(Node, Node, Tree, [], Cycles),    % non-cycles    %trace,path1([Node],%Cycles,Node,Tree,[],A1),flatten(A1,A2),list_to_set(A2,A3),subtract(A3,Cycles,Noncycles).
% Recursive case: if the expression is a list, evaluate its elementsevaluate([A,Op,B], Result,V1,V4) :-(number(A)->(AR=A,V1=V3);evaluate(A,AR,V1,V3)),(number(B)->(BR=B,V3=V4);evaluate(B,BR,V3,V4)),operators1(Ops1),%"+-/*^").
% Recursive case: if the expression is a list, evaluate its elementsevaluate([A,Op,B], Result,V1,V4) :-(number(A)->(AR=A,V1=V3);evaluate(A,AR,V1,V3)),(number(B)->(BR=B,V3=V4);evaluate(B,BR,V3,V4)),operators1(Ops1),%"+-/*^").string_strings(Ops1,Ops2),    member(Op,Ops2), !,    apply_operator([AR,Op,BR],Result),!.    %evaluate([A,Op,B], %Accumulator,     %Result),    %apply_operator(Term, Result),!.
% Split after ".","!","?", producing "" if one of these characters is at the starttest(116,[[n,grammar1],[".aaa.bbb.",[".","?"],[v,t]]],%test(17,[[n,grammar1],["aaa1 ,-'! a? b! b.",[v,t]]],%%test(15,[[n,compound213],["","",[["a"],1],[v,t]]],[  [[n,grammar1],[[v,u],[v,cs],[v,t]],":-",  [   [[n,compound21],[[v,u],"",[v,cs],[],[v,t]]]   %%[[n,number21],[[v,u],"","",[v,t]]]   %%[[n,compound213],["","",[["a"],1],[v,t]]]  ]  ],  [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]], %% swapped these  [[n,compound],[[v,cs],[v,t],[v,u]],"->",  [[[n,compound21],[[v,cs],[v,t],[v,v]]],  [[n,compound213],[[v,v],[v,u]]]]],  [[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],["","",[v,cs],[],[""]]],  [[n,compound21],[[v,cs],[v,t],[v,u]],"->",  [[[n,item],[[v,i],[v,cs]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],  [[n,compound21],[[v,cs],[v,t],[v,u]],"->",  [[[n,item],[[v,i],[v,cs]]],%" ",  [[n,compound21],[[v,cs],[],[v,compound1name]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]]]],/**  [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,t]]]]],**/  [[n,item],[[v,t],[v,cs]],"->",[[[n,word21],[[v,cs],"",[v,t]]]]],  [[n,item],[[v,t],[v,cs]],"->",[[[n,compound],[[v,cs],[],[v,t]]]]],/**  [[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]],**/  [[n,word212],["","",[v,t],[v,t]]],  [[n,word212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,word213],["","",[v,t],[v,t]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],**/  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [%[v,a],  [v,b],%[[n,lookahead1],[[v,cs]]],  [[n,code],%[[n,sentencechars],[[v,a]]],  [[n,finalchar],[[v,b],[v,cs]]]  %[[n,stringconcat],[[v,t],[v,a],[v,v1]]],  %[[n,stringconcat],[[v,t],[v,b],[v,v]]]  ],  [[n,word212],[[v,t],[v,u]]]]],  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [%[v,a],  [v,b],%[[n,lookahead1],[[v,cs]]],  [[n,code],%[[n,sentencechars],[[v,a]]],  %[[n,trace]],  [[n,sentencechars],[[v,b],[v,cs]]],  [[n,stringconcat],[[v,t],[v,b],[v,v1]]]  %[[n,stringconcat],[[v,t],[v,b],[v,v]]]  ],  [[n,word213],[[v,v1],[v,u]]]]],/** nothing in string  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [%[v,a],  "",%[[n,lookahead],[[v,c]]],  %[[n,code],%[[n,sentencechars],[[v,a]]],  %[[n,finalchar],[[v,b],[v,cs]]]  %[[n,stringconcat],[[v,t],[v,a],[v,v1]]],  %[[n,stringconcat],[[v,t],[v,b],[v,v]]]  %],  %[[n,code],%[[n,sentencechars],[[v,b],[v,cs]]],  %[[n,stringconcat],[[v,t],[v,b],[v,v]]],  %[[n,not],[[n,finalchar],[[v,c],[v,cs]]]]],  [[n,word212],[[v,t],[v,u]]]]],**//**  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [%[v,a],  %[[n,code],[[n,trace]]],  [v,b],[[n,lookahead],[[v,c]]],  [[n,code],[[n,sentencechars],[[v,b],[v,cs]]],  [[n,stringconcat],[[v,t],[v,b],[v,v]]],  [[n,not],[[n,finalchar],[[v,c],[v,cs]]]]]  %[[n,finalchar],[[v,b],[v,cs]]]  %[[n,stringconcat],[[v,t],[v,a],[v,v1]]],  %[[n,stringconcat],[[v,t],[v,b],[v,v]]]  ,  [[n,word212],[[v,v],[v,u]]]]],**//**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,word21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]]**/  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,sentencechars],[[v,a],[v,cs]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word21],[[v,cs],"",[v,wordstring]]],  [[n,code],  [[n,stringconcat],[[v,v],[v,wordstring],[v,u]]]]]],    [[n,sentencechars],[[v,c],[v,cs]],":-",  [[[n,not],[[[n,member],[[v,c],[v,cs]]]]]]],/**  [[n,sentencechars],[[v,c]],":-",  [[[n,letters],[[v,c]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[[n,stringtonumber],[[v,c],[v,n]]],  [[n,number],[[v,n]]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c]," "]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],","]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"-"]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"'"]]]],    [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"."]]]],**/  [[n,finalchar],[[v,c],[v,cs]],":-",  [[[n,member],[[v,c],[v,cs]]]]],/**  [[n,lookahead1],[[v,c],[v,cs]],":-", %?  [[[n,member],[[v,cs],[v,c]]],  [[n,lookahead],[[v,c]]]]],  [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"!"]]]],  [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"?"]]]]  **/  [[n,lookahead],[[v,a],[v,a],[v,b]],":-",  [[[n,stringconcat],[[v,b],[v,d],[v,a]]]]]%%],[[[v,t],[["a"],1]]]).
% Split string on ".", "?", "!"%% Blackl loves the grammartest(17,[[n,grammar1],["aaa1 ,-'! a? b! b.",[v,t]]],%test(17,[[n,grammar1],["a? b!",[v,t]]],%%test(15,[[n,compound213],["","",[["a"],1],[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,compound21],[[v,u],"",[],[v,t]]]   ,[[n,cut]]   %%[[n,number21],[[v,u],"","",[v,t]]]   %%[[n,compound213],["","",[["a"],1],[v,t]]]  ]  ],  [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]], %% swapped these  [[n,compound],[[v,t],[v,u]],"->",  [[[n,compound21],[[v,t],[v,v]]],  [[n,compound213],[[v,v],[v,u]]]]],  [[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]  ,[[n,code],[[n,cut]]]  ]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]]," ",  [[n,compound21],[[],[v,compound1name]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]  ,[[n,cut]]  ]]],%/**  [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,t]]],  [[n,code],[[n,cut]]]]],%**/  [[n,item],[[v,t]],"->",[[[n,word21],["",[v,t]]]%,  %[[n,code],[[n,cut]]]]],  ]],  [[n,item],[[v,t]],"->",[[[n,compound],[[],[v,t]]]%,  %[[n,code],[[n,cut]]]]],  ]],%/**  [[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]],%**/  [[n,word212],["","",[v,t],[v,t]]],  [[n,word212],[[v,u],[v,u],[v,t],[v,t]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],**/  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[v,b],  [[n,code],[[n,sentencechars],[[v,a]]],  [[n,finalchar],[[v,b]]],  [[n,stringconcat],[[v,t],[v,a],[v,v1]]],  [[n,stringconcat],[[v,v1],[v,b],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,word21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]]**/  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,sentencechars],[[v,a]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word21],["",[v,wordstring]]],  [[n,code],  [[n,stringconcat],[[v,v],[v,wordstring],[v,u]]]]]],    [[n,sentencechars],[[v,c]],":-",  [[[n,letters],[[v,c]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[[n,stringtonumber],[[v,c],[v,n]]],  [[n,number],[[v,n]]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c]," "]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],","]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"-"]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"'"]]]],    [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"."]]]],  [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"!"]]]],  [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"?"]]]]%%],[[[v,t],[["a"],1]]]).
% String to List (Term)% run with swipl --stack-limit=1G% n,letters needs to include chars except quote%test(15,[[n,grammar1],["[[\"aa,]\",\"b\",a],1]",[v,t]]],test(15,[[n,grammar1],[%"[[1],1]""[[\"aa,]\",b,\"c\",[]],1]",[v,t]]],%[[n,item],["b,""c"",[]],1]",[v,vgp3],[v,i]]],%test(15,[[n,grammar1],["[]"]],%est(15,[[n,item],["\"aa,\"","",[v,t]]],%test(15,[[n,item],["a","",[v,t]]],%test(15,[[n,grammar1],["[a]",[v,t]]],%%test(15,[[n,compound213],["","",[["a"],1],[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,compound],[[v,u],"",[],[v,t]]]  %,[[n,cut]]   %%[[n,number21],[[v,u],"","",[v,t]]]   %%[[n,compound213],["","",[["a"],1],[v,t]]]  ]  ],  %[[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]], %% swapped these  [[n,compound],[[v,t],[v,u]],"->",  ["[","]",  [[n,compound213],[[v,t],[v,u]]]]],  [[n,compound],[[v,t],[v,u]],"->",  ["[",[[n,compound21],[[v,t],[v,v]]],"]",%[[n,code],[[n,trace2]]],  [[n,compound213],[[v,v],[v,u]]]]],  %[[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],  [[n,lookahead],["]"]],  [[n,code],[[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]  %,[[n,code],[[n,cut]]]  ]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],",",    %[[n,code],[[n,trace]]],    [[n,compound21],[[],[v,compound1name]]],  [[n,code],[[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]    %,[[n,cut]]]]],  [[n,item],[[v,t]],"->",["\"",[[n,word21],["",[v,t]]],    "\""    %[[n,code],[[n,cut]]]    ]],  [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,u]]],[[n,code],  [[n,stringtonumber],[[v,u],[v,t]]]  %,[[n,cut]]  ]]],%/*  [[n,item],[[v,t]],"->",[[[n,word21_atom],["",[v,t1]]],  [[n,code],[[n,atom_string],[[v,t],[v,t1]]]  %,[[n,cut]]  ]]], % atoms%*/  [[n,item],[[v,t]],"->",[[[n,compound],[[],[v,t]]]      %,[[n,code],[[n,cut]]]]],  %[[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,commaorrightbracketnext]],  [[n,code],  [[n,"->"],[[  [[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]  ]],  [[n,true]],  [[n,"->"],[  [[n,equals4],[[v,a],"."]],  [[n,true]],  [[n,equals4],[[v,a],"-"]]  ]]  ]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],  [[n,"->"],[[  [[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]  ]],  [[n,true]],  [[n,"->"],[  [[n,equals4],[[v,a],"."]],  [[n,true]],  [[n,equals4],[[v,a],"-"]]  ]]  ]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]],  %[[n,word212],["","",[v,t],[v,t]]],  [[n,word212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[[n,quote_next]],  [[n,code],%[[n,letters],[[v,a]]],  [[n,not],[[[n,=],[[v,a],"\""]]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],%[[n,letters],[[v,a]]],  [[n,not],[[[n,=],[[v,a],"\""]]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word21],["",[v,wordstring]]],  [[n,code],  [[n,stringconcat],[[v,v],[v,wordstring],[v,u]]]]]],%/*  %[[n,word212_atom],["","",[v,t],[v,t]]],  [[n,word212_atom],[[v,u],[v,u],[v,t],[v,t]]],  [[n,word21_atom],[[v,t],[v,u]],"->",  [[v,a],[[n,commaorrightbracketnext]],  [[n,code],%[[n,letters],[[v,a]]],  [[n,not],[[[n,=],[[v,a],"\""]]]],  [[n,not],[[[n,=],[[v,a],"["]]]],  [[n,not],[[[n,=],[[v,a],"]"]]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word212_atom],[[v,v],[v,u]]]]],  [[n,word21_atom],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],%[[n,letters],[[v,a]]],  [[n,not],[[[n,=],[[v,a],"\""]]]],  [[n,not],[[[n,=],[[v,a],"["]]]],  [[n,not],[[[n,=],[[v,a],"]"]]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word21_atom],["",[v,wordstring]]],  [[n,code],  [[n,stringconcat],[[v,v],[v,wordstring],[v,u]]]]]],  %*/  [[n,commaorrightbracketnext],"->",  [[[n,lookahead],[","]]]],  [[n,commaorrightbracketnext],"->",  [[[n,lookahead],["]"]]]],      [[n,quote_next],"->",  [[[n,lookahead],["\""]]]],    [[n,lookahead],[[v,a],[v,a],[v,b]],":-",  [[[n,stringconcat],[[v,b],[v,d],[v,a]]]]]%()%],[[[v,t],[["a"],1]]]).%],[[[[v,t],[["aa,]","b",a],1]]]]).],[[[[v,t],[["aa,]",b,"c",[]],1]]]]).%],[[[[v,i],b]]]).
% T = [[r, [['A1', 'A2'], [[2, 3]]]]]% rs_and_data_to_term([[r,['A1','A2']],[r,['A3','A4']]],[2,3,2,3,3,5],[],T).% T = [[r, [['A1', 'A2'], [[2, 3]]]], [r, [['A3', 'A4'], [[3, 5]]]]]%rs_and_data_to_term([[o,['A1']],1,[o,['A1']]],[2,1,2],[],T).%T = [[o, [['A1'], [2]]], 1, [o, [['A1'], [2]]]].
% Who is in your family?% children, parents, grandparents, aunts, uncles, previous partners (), foster children (), alive/dead (), age (), start at topfamily(Tree) :- writeln("Who is the oldest living parent in your family?"), read_string(user_input,"\n","\r",_,Top_person), partner_and_children(Top_person,Tree),!.
% Wrapper predicate to fit foldl/4's requirements%move_vars_pred_wrapper(T1, MapElem, T2_old, Out) :-%    move_vars_pred(T1, MapElem, T2_old, Out).
% X2, Y2, Z2 are person co-ords/**?- Map=[[1,1,1,[*]],[1,2,1,[*]],[1,3,1,[*]],[1,1,2,[*]],[1,2,2,[*]],[1,3,2,[*]],[1,1,3,[*]],[1,2,3,[*]],[1,3,3,[*]],[2,1,1,[*]],[2,2,1,[*]],[2,3,1,[*]],[2,1,2,[*]],[2,2,2,[]],[2,3,2,[*]],[2,1,3,[*]],[2,2,3,[*]],[2,3,3,[*]],[3,1,1,[*]],[3,2,1,[*]],[3,3,1,[*]],[3,1,2,[*]],[3,2,2,[*]],[3,3,2,[*]],[3,1,3,[*]],[3,2,3,[*]],[3,3,3,[*]]],print_map(Map,3,3,3,2,2,2).
% X:% Spec = [[a,*1,c],[*1 x]],[[*1,r],[*2,e,*3],[*3]] x% Spec = [[a,[r,*2,e,*3],c],[*3]]/*                                                              data2at([["abc","b"]],Code),findall(_,(member(C,Code),pp_lp2p0(C,D),writeln(D)),_).                                                              data2at([["abbc","bb"]],Code),findall(_,(member(C,Code),pp_lp2p0(C,D),writeln(D)),_).
% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Analysing characteristics of arguments 1 of 4.txt",0,algorithms,"Do the premises work in all cases?"]test_types_cases(29,[[n,verify_modus_ponens],[["a",["a","b"],"b"]]],        [[[n,verify_modus_ponens],[[[t,string],{[t,string],[t,string]},[t,string]]]]],        [[[n,verify_modus_ponens],[input]]],[        [[n,verify_modus_ponens],[[v,a]],":-",        [       [[n,equals4],[[v,a],[[v,a1],[[v,a1],[v,b1]],[v,b1]]]]        ]]        ],[[]]).
% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Dereconstruction 3 of 4.txt",0,algorithms,"24.   *I prepared to be an expert on the brain.  I did this by writing about neuroscience.  First I wrote about food.  Second, I wrote about activity.  Third, I wrote about sleep.  In this way, I prepared to be an expert on the brain by writing about neuroscience."]test_types_cases(14,[[n,neuroscience],["**","***",[v,output]]],        [[[n,neuroscience],[[t,string],[t,string],[t,number]]]],        [[[n,neuroscience],[input,input,output]]],[        [[n,neuroscience],[[v,a],[v,b],[v,c]],":-",        [       [[n,string_length],[[v,a],[v,a1]]],                [[n,string_length],[[v,b],[v,b1]]],                [[n,+],[[v,a1],[v,b1],[v,c]]]        ]]        ],[[[[v,output],5]]]).
% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Drawing connections 1 of 4.txt",0,algorithms,"9.     I prepared to distance myself from *.  I did this by shelling the snow pea.  First, I read that Winston Churchill asked that if funding was diverted from arts then what would we be fighting for?  Second, I determined that arts was the conclusion from defence, not vice versa.  Third, I determined that arts is necessary rather than defence.  In this way, I prepared to distance myself from * by shelling the snow pea."]test_types_cases(17,[[n,distance_myself],[2,[v,distance]]],        [[[n,distance_myself],[[t,number],[t,number]]]],        [[[n,distance_myself],[input,output]]],        [[[n,distance_myself],[[v,a],[v,b]],":-",        [       [[n,*],[[v,a],2,[v,b]]]        ]]       ],[[[[v,distance],4]]]).
% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Exploring opposites in Hamlet 2 of 4.txt",0,algorithms,"11.    *I prepared to experience the art forms of God (the master).  I did this by trusting God (the master).  First, I trusted the art of the master.  Second, I trusted the music of the master.  Third, I trusted the architecture of the master.  In this way, I prepared to experience the art forms of God (the master) by trusting God (the master)."]test_types_cases(31,[[n,art],[["I","ate","apple"],[v,art_form]]],        [[[n,art],[{[t,string]},[[t,string],{[t,string]}]]]],        [[[n,art],[input,output]]],[        [[n,art],[[v,a],[v,c]],":-",        [       [[n,equals4],[[v,a],[[v,a1],[v,b1],[v,c1]]]],                [[n,equals4],[[v,c],[[v,b1],[[v,a1],[v,c1]]]]]        ]]        ],[[[[v,art_form],["ate",["I","apple"]]]]]).
% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Finite Data will be a Solution in Conglish 2 of 4.txt",0,algorithms,"17.    *I prepared to judge the way the other person was speaking.  I did this by watching the diareasoner identify the speech rate in her partner.  First, I counted the number of words over the time.  Second, I counted the number of minutes.  Third, I calculated the speech rate to equal the number of words divided by the number of minutes.  In this way, I prepared to judge the way the other person was speaking by watching the diareasoner identify the speech rate in her partner."]test_types_cases(25,[[n,way_of_speaking_a],[["high-pitched","smiling"],[v,way]]],        [[[n,way_of_speaking_a],[{[t,string]},{[t,string]}]],[[n,way_of_speaking],[[t,string],[t,string]]]],        [[[n,way_of_speaking_a],[input,output]],        [[n,way_of_speaking],[input,output]]],[        [[n,way_of_speaking_a],[[v,properties],[v,expression]],":-",        [[[n,equals4],[[v,properties],[[v,item1a],[v,item1b]]]],               [[n,findall],[[v,item2],         [[[n,way_of_speaking],[[v,item1a],[v,item2]]]],         %[[n,=],[[v,item1],[v,item1a]]]],        [v,items2a]]],         [[n,sort],[[v,items2a],[v,items2a1]]],              [[n,findall],[[v,item2],         [[[n,way_of_speaking],[[v,item1b],[v,item2]]]],         %[[n,=],[[v,item1],[v,item1b]]]],        [v,items2b]]],        [[n,sort],[[v,items2b],[v,items2b1]]],        [[n,intersection],[[v,items2a1],[v,items2b1],[v,expression]]]        ]],                [[n,way_of_speaking],["high-pitched","happy"]],        [[n,way_of_speaking],["high-pitched","unhappy"]],        [[n,way_of_speaking],["low-pitched","angry"]],        [[n,way_of_speaking],["smiling","happy"]],        [[n,way_of_speaking],["frowning","sad"]]],[[[[v,way],["happy"]]]]).
% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Order in Conglish 2 of 4.txt",0,algorithms,"15.   *I prepared to order the Conglish subjects.  I did this by observing the marriage.  First, I observed the partner place the ring on his or her partnerÕs finger.  Second, I observed the couple say their vows.  Third, I observed the couple sign the wedding register.  In this way, I prepared to order the Conglish subjects by observing the marriage."]% Order strings by lengthtest_types_cases(41,[[n,order_strings],[["***","*","**"],[v,ordered_strings]]],        [[[n,order_strings],[{[t,string]},{[t,string]}]]],        [[[n,order_strings],[input,output]]],[        [[n,order_strings],[[v,strings],[v,ordered_strings]],":-",        [       [[n,sort],[[v,strings],[v,ordered_strings]]]]]],[[[[v,ordered_strings],["*", "**", "***"]]]]).
% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Perspectives 1 of 4.txt",0,algorithms,"1. The first technique can be used to give a perspective on a text. For example, given the reason 'X is younger than Y' the perspective gives the conclusion 'X was likely to have been looked after by Y'."]test_types_cases(47,[[n,greater_than],[2,1]],[[[n,greater_than],[[t,number],[t,number]]]],        [[[n,greater_than],[input,input]]],[        [[n,greater_than],[[v,n1],[v,n2]],":-",        [       %[[n,trace2]],        [[n,>],[[v,n1],[v,n2]]]]]],[[]]).
% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Philosophical Computational English 4 of 4.txt",0,algorithms,"32.   *I prepared to buy products that I added value to.  I did this by breasoning out 5 As per day for sales.  First, I trialled the product.  Second, I found a new use for the product.  Third I used the product for thus new use.  In this way, I prepared to buy products that I added value to by breasoning out 5 As per day for sales."]test_types_cases(36,[[n,stock_because_buy],["word processor",[v,c]]],        [[[n,stock_because_buy],[[t,string],[t,string]]]],        [[[n,stock_because_buy],[input,output]]],[        [[n,stock_because_buy],[[v,c],[v,c]]]],[[[[v,c],"word processor"]]]).
% ["Creating and Helping Pedagogues","CREATE AND HELP PEDAGOGUES by Lucian Green Pedagogy Helper - Write on Breasoning - Politics 3 of 3.txt",0,algorithms,"21.    Rural area residents wrote pedagogies."]% grade_book/*enter_grade(f,s,m,"a1",60,[[m,1,[[f,s,[]]]]],A),writeln1(A).
% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Blue Nature 1 of 4.txt",0,algorithms,"9.     *I prepared to connect together main points from cliques.  I did this by writing on something interesting to do with the song.  First, I identified the topic.  Second, I constructed an aphohedron from all the songÕs parts.  Third, I thought of interconnections between clique nodes from the randomly broken down aphohedron.  In this way, I prepared to connect together main points from cliques by writing on something interesting to do with the song."]test_types_cases(15,[[n,connect_cliques],[[["a",1],[1,2],[2,"b"]],[["a",3],[3,4],[4,"b"]],[v,output]]],        [[[n,connect_cliques],[[t,list2],[t,list2],[t,list2]]],[[t,list2],[{[t,set]}]],[[t,set],[{[t,item]}]],[[t,item],[[t,number]]],[[t,item],[[t,string]]]],        [[[n,connect_cliques],[input,input,output]]],[        [[n,connect_cliques],[[v,a],[v,b],[v,c]],":-",        [       [[n,append],[[v,a],[v,b],[v,c]]]        ]]        ],[[[[v,output],[["a",1],[1,2],[2,"b"],["a",3],[3,4],[4,"b"]]]]]).
% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Blue Nature 4 of 4.txt",0,algorithms,"31.    I prepared to give the song I am not a Peach and medicine degree away.  I did this by giving the woman the anti-depression song and anti-depression degree.  First, I gave the woman the anti-depression song.  Second, I gave the woman the anti-depression degree.  Third, I observed her as happy.  In this way, I prepared to give the song I am not a Peach and medicine degree away by giving the woman the anti-depression song and anti-depression degree."]% Prevents ruminationtest_open_types_cases(5,[[n,prevent_rumination],[[]]],        [[[n,prevent_rumination],[{[t,string]}]]],        [[[n,prevent_rumination],[input]]],[        [[n,prevent_rumination],[[v,list]],":-",        [                        [[n,writeln],["What would you like to think about?"]],                [[n,read_string],[[v,item]]],                [[n,"->"],[[[n,member],[[v,item],[v,list]]],                                [[[n,writeln],["Please do not think of"]],                [[n,writeln],[[v,item]]],                [[n,writeln],["again."]],                [[n,=],[[v,list],[v,list2]]]],                                [[[n,wrap],[[v,item],[v,item2]]],                [[n,append],[[v,list],[v,item2],[v,list2]]]]]],                [[n,writeln],["Have you finished thinking (y/n)?"]],                [[n,read_string],[[v,y_n]]],                [[n,"->"],[[[n,=],[[v,y_n],"y"]],                [[n,true]],                                [[n,prevent_rumination],[[v,list2]]]]]        ]]]).
% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Heads of State 4 of 4.txt",0,algorithms,"39. *I prepared to enjoy subsidised accreditation.  I did this by agreeing with the government.  First, I read the government policy.  Second, I verified that it was a good idea.  Third, I agreed with it.  In this way, I prepared to enjoy subsidised accreditation by agreeing with the government."]test_types_cases(53,[[n,subsidised_accreditation],[1,30]],[[[n,subsidised_accreditation],[[t,number],[t,number]]]],        [[[n,subsidised_accreditation],[input,input]]],[        [[n,subsidised_accreditation],[1,1]],        [[n,subsidised_accreditation],[1,30]],        [[n,subsidised_accreditation],[1,100]],        [[n,subsidised_accreditation],[1,400]]],[[]]).
% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Hours Prayer 1 of 4.txt",0,algorithms,"8.    *I prepared to endorse NietzscheÕs brilliance.  I did this by writing Alexius MeinongÕs probable comments on the Medicine blog.  First, I called it Anarchy 3.  Second, I liked brilliance.  Third, I liked NietzscheÕs brilliance.  In this way, I prepared to endorse NietzscheÕs brilliance by writing Alexius MeinongÕs probable comments on the Medicine blog."]% trope chaintest_types_cases(22,[[n,function],[[["a","b"],["b","c"]]]],        [[[n,function],[{[t,list2]}]],[[t,list2],[[t,string],[t,string]]],[[n,reverse],[{[t,list2]},{[t,list2]},{[t,list2]}]],[[n,function2],[{[t,list2]},[t,string],[t,string]]],[[n,length],[{[t,list2]},[t,number],[t,number]]]],                [[[n,function],[input]],        [[n,reverse],[input,input,output]],        [[n,function2],[input,input,input]],        [[n,length],[input,input,output]]],[[[n,function],[[v,a]],":-",[[[n,length],[[v,a],0,[v,b]]],[[n,=],[[v,b],1]]]],[[n,function],[[v,a]],":-",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]%,[[n,cut]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],":-",[[[n,member],[[v,d],[v,a]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]%,[[n,cut]]]],[[n,function2],[[v,a],[v,b],[v,c]],":-",[[[n,member],[[v,d],[v,a]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],":-",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]).
% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Maharishi Sutra 4 of 4.txt",0,algorithms,"34.   I prepared to explain how I became wise. I did this by stating that I am wise. First, I opened my journal.  Second, I stated what I did.  Third, I stated why it was wise.  In this way, I prepared to explain how I became wise by stating that I am wise."]object(argument,(((null,4,null),2,(null,5,null)),1,(null,3,(null,6,null)))).
% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Pranayama 4 of 4.txt",0,algorithms,"Soma"]test_open_types_cases(27,[[n,soma],[[v,a1]]],        [[[n,soma],[[t,string]]]],        [[[n,soma],[output]]],[        [[n,soma],[[v,a1]],":-",        [                        [[n,writeln],["Will you spiritually drink the soma each morning to stop digestive system pops from practising the sutra?"]],                [[n,read_string],[[v,a1]]]        ]]]).% ["Fundamentals of Pedagogy and Pedagogy Indicators","PEDAGOGY INDICATORS by Lucian Green Fewer Stillbirths 3 of 3.txt",0,algorithms,"Fewer Stillbirths 3 of 3"]test_open_types_cases(28,[[n,fewer_stillbirths],[[v,a1]]],        [[[n,fewer_stillbirths],[[t,string]]]],        [[[n,fewer_stillbirths],[output]]],[        [[n,fewer_stillbirths],[[v,a1]],":-",        [                        [[n,writeln],["Will you follow the instructions and breason out at least 80 breasonings before conception to prevent stillbirth?"]],                [[n,read_string],[[v,a1]]]        ]]]).% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Analysing characteristics of arguments 4 of 4.txt",0,algorithms,"[""Green, L 2021, <i>Analysing characteristics of arguments 4 of 4</i>, Lucian Academy Press, Melbourne."",""Green, L 2021"",1,""COMPUTATIONAL ENGLISH"]test_open_types_cases(29,[[n,properties_of_arguments],[[v,a1],[v,a2]]],        [[[n,properties_of_arguments],[[t,string],[t,string]]]],        [[[n,properties_of_arguments],[output,output]]],[        [[n,properties_of_arguments],[[v,a1],[v,a2]],":-",        [                        [[n,writeln],["What is the conclusion?"]],                [[n,read_string],[[v,a1]]],                [[n,writeln],["What is the reason?"]],                [[n,read_string],[[v,a2]]]        ]]]).
% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Yellow God 2 of 4.txt",0,algorithms,"12. I prepared to put through an A with a “negatable pressure cup appearance”, in other words negatably but in a way that is protected by meditation, placing a medical question on oneself (thinking of a dental drill, the medical question and a conclusion) for a child to be conceived, a job to be earned or an H1 to be supported. I did this by holding the dog model, like the pressure cup. First, I picked up the dog model. Second, I held it. Third, I placed it on the ground. In this way, I prepared to put through an A with a “negatable pressure cup appearance” by holding the dog model, like the pressure cup."]% Text to breasoning checklisttest_open_types_cases(6,[[n,t2b_checklist],[[v,a],[v,b],[v,c]]],        [[[n,t2b_checklist],[[t,string],[t,string],[t,string]]]],        [[[n,t2b_checklist],[output,output,output]]],[        [[n,t2b_checklist],[[v,a],[v,b],[v,c]],":-",        [                        [[n,writeln],["Do you study education?"]],                [[n,read_string],[[v,a]]],                [[n,writeln],["Do you study medicine?"]],                [[n,read_string],[[v,b]]],                [[n,writeln],["Do you study meditation?"]],                [[n,read_string],[[v,c]]]        ]]]).
% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Breathsonings 4 of 4.txt",0,algorithms,"41.   I loved planet meditation (books).  I did this by holding the reflection (philosophy) retreat.  First, I covered texts.  Second, I covered retreat details.  Third, I gave presents out.  In this way, I prepared to love planet meditation (books) by holding the reflection (philosophy) retreat."]%% travelling 10 space units and 15 time units in the maximum jump of 1 space unit and 1 time unit takes 10 space jumps and 15 time jumpstest_types_cases(34,[[n,space_time_jump],[[10,15],[v,c]]],        [[[n,space_time_jump],[[[t,number],[t,number]],[[t,number],[t,number]]]]],        [[[n,space_time_jump],[input,output]]],[        [[n,space_time_jump],[[v,c],[v,c]]]],[[[[v,c],[10,15]]]]).
% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Part of Room 1 of 4.txt",0,algorithms,"6. The disabilities teacher student prepared to assess a “done-up” assignment (with a short story containing 64 departmental perspectives about it) and a “seen-as” version of “A” quality written by the student. He did this by placing the bird model in the hole. First, he lifted the bird model up. Second, he walked to the hole. Third, he placed it in the hole. In this way, the disabilities teacher student prepared to assess a “done-up” assignment and a “seen-as” version of “A” quality written by the student by placing the bird model in the hole."]test_open_types_cases(7,[[n,episode_character],[[v,a]]],        [[[n,episode_character],[[t,loop0]]],[[t,loop0],[[[t,loop1],[t,loop1],[t,loop1]]]],[[t,loop1],[[[t,loop2],[t,loop2],[t,loop2]]]],[[t,loop2],[[[t,loop3],[t,loop3],[t,loop3]]]],[[t,loop3],[[[t,items],[t,items],[t,items]]]],[[t,items],[[t,number],[t,number],[t,number],[t,number],[t,string]]]],        [[[n,episode_character],[output]]],[        [[n,episode_character],[[v,ds4]],":-",        [                        [[n,findall],[[v,ds3],         [         [[n,member],[[v,l0],[10,11,12%,4         ]]],         [[n,findall],[[v,ds2],         [         [[n,member],[[v,l1],[1,2,3%,4         ]]],         [[n,findall],[[v,ds1],         [         [[n,member],[[v,l2],[%1,2,         %3,         4,5,6         ]]],         [[n,findall],[[[v,l0],[v,l1],[v,l2],[v,l3],[v,d]],         [         [[n,member],[[v,l3],[7,8,9%5,6%1,2,3,4         ]]],         [[n,equals4],[[v,line],["Level",[v,l0],[v,l1],[v,l2],[v,l3],         "Please write a detail."]]],         [[n,writeln],[[v,line]]],         [[n,read_string],[[v,d]]]],        [v,ds1]]]],        [v,ds2]]]]        ,        [v,ds3]]]],        [v,ds4]]]            ]]]).
% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Time to Do 3 of 4.txt",0,algorithms,"28. The fun park visitor prepared to ride the helter skelter. He did this by licking the chocolate from his finger. First, he started from the base of his finger. Second, he spiraled his tongue upwards, licking all the chocolate from his finger on the way. Third, he stopped when he reached the top. In this way, the fun park visitor prepared to ride the helter skelter by licking the chocolate from his finger."]% Triangle train linetest_types_cases(32,[[n,triangle_train1],["Canterbury","Bambury"]],        [[[n,triangle_train1],[[t,string],[t,string]]],[[n,triangle_train],[[t,string],[t,string]]],[[n,link],[[t,string],[t,string]]]],        [[[n,triangle_train1],[input,input]],        [[n,triangle_train],[input,output]],        [[n,link],[input,output]]],[        [[n,triangle_train1],[[v,a],[v,b]],":-",        [       [[n,triangle_train],[[v,a],[v,b]]]]],        [[n,triangle_train],[[v,a],[v,b]],":-",        [       [[n,link],[[v,a],[v,b]]]]],        [[n,triangle_train],[[v,a],[v,b]],":-",        [       [[n,link],[[v,a],[v,c]]],                [[n,triangle_train],[[v,c],[v,b]]]        ]],        %[[n,link],["Canterbury","Bambury"]],        [[n,link],["Canterbury","Avignon"]],        [[n,link],["Bambury","Canterbury"]],        %[[n,link],["Bambury","Avignon"]],        [[n,link],["Avignon","Bambury"]]        %[[n,link],["Avignon","Canterbury"]]        ],[[]]).
% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green X Dimension 2 of 4.txt",0,algorithms,"17.                 *I prepared to confirm the ability to breason in meditation.  I did this by unblocking not wanting to write breasonings in meditation.  First, I studied Nietzsche in Arts.  Second, I studied Creative Writing.  Third, I studied Education.  In this way, I prepared to confirm the ability to breason in meditation by unblocking not wanting to write breasonings in meditation."]test_open_types_cases(19,[[n,breason],[[v,a1]]],        [[[n,breason],[[t,string]]]],        [[[n,breason],[output]]],[        [[n,breason],[[v,a3]],":-",        [                        [[n,writeln],["If I told you a single way of satisfying the spiritual requirements to have a child, earn a high distinction and prevent quantum ailments such as headaches (where it would not be possible to do these things in other ways) would you be interested?"]],                [[n,read_string],[[v,a3]]]        ]]]).
% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green X Dimension 3 of 4.txt",0,algorithms,"29.                 *I prepared to help Earth avoid catastrophe.  I did this by stating that I am peaceful.  First, I made vegan food available.  Second, I guided the number of children per family.  Third, I recommended green transport.  In this way, I prepared to help Earth avoid catastrophe by stating that I am peaceful."]% How will you make sure that the food tastes delicious?/**?- test_open_types1(off,21,R).
% ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Y Dimension 2 of 4.txt",0,algorithms,"19. *I prepared to grow.  I did this by eating the pear.  First, I shelled it.  Second, I sliced it.  Third, I ate it.  In this way, I prepared to grow by eating the pear."]test_open_types_cases(24,[[n,chinese_longevity_herbs],[[v,a1]]],        [[[n,chinese_longevity_herbs],[[t,string]]]],        [[[n,chinese_longevity_herbs],[output]]],[        [[n,chinese_longevity_herbs],[[v,a1]],":-",        [                        [[n,writeln],["Would you like to have Reishi Mushroom, Goji berries, Ginseng, He-Shou-Wu, Gotu Kola and Schisandra each day for longevity?"]],                [[n,read_string],[[v,a1]]]        ]]]).
% ["Lecturer","Lecturer - Recordings Pedagogy.txt",0,algorithms,"6. *The necessary amount of work didn't become a headache.  I prevented the muscle ache from recordings.  I used the quantum box to prevent muscle aches.  This included headaches.  I prevented body aches becoming headaches."]% The number of As of work equals the number of As in medicinetest_types_cases(37,[[n,medicine_as],[3,[v,medicine_as]]],        [[[n,medicine_as],[[t,number],[t,number]]]],        [[[n,medicine_as],[input,output]]],[        [[n,medicine_as],[[v,as],[v,as]]]],[[[[v,medicine_as],3]]]).
% ["Lecturer","Lecturer Culturology.txt",0,algorithms,"3. *Reverse CAW was guessing the input and output.  Culturology is good.  I applied back-translation to an algorithm.  I found that reversing the algorithm resulted in the same result as the original.  Reverse interpret was CAW."]test_types_cases(40,[[n,guess_io],["+",[v,a2],[v,a3]]],        [[[n,guess_io],[[t,string],{[t,item]},{[t,item]}]],[[t,item],[[t,number]]],[[t,item],[[t,string]]]],        [[[n,guess_io],[input,output,output]]],[        [[n,guess_io],["+",[1,1],[2]]],        [[n,guess_io],["-",[1,1],[0]]]],[[[[v,a2],[1,1]],[[v,a3],[2]]]]).
% ["Medicine","MEDICINE by Lucian Green Heart 2 of 4.txt",0,algorithms,"17.    *I prepared to go running. I did this by flexing the ball of my foot. First, I stood up. Second, I leant against a wall. Third, I performed a calf stretch. In this way, I prepared to go running by flexing the ball of my foot."]test_types_cases(38,[[n,run_checklist],["true","true","true",[v,run]]],        [[[n,run_checklist],[[t,string],[t,string],[t,string],[t,string]]]],        [[[n,run_checklist],[input,input,input,output]]],[        [[n,run_checklist],[[v,stretches],[v,water],[v,gear],[v,run]],":-",        [       [[n,=],[[v,stretches],"true"]],                [[n,=],[[v,water],"true"]],                [[n,=],[[v,gear],"true"]],                [[n,=],[[v,run],"true"]]        ]]],[[[[v,run],"true"]]]).
% ["Medicine","MEDICINE by Lucian Green Panic attack prevented by deep breathing and sutra 1 of 4.txt",0,algorithms,"1a. *I prepared to identify and prevent class distinctions. I did this by writing the Box song argument. First, I wrote about the box. Second, I wrote about the specific. Third, I wrote about the general. In this way, I prepared to identify and prevent class distinctions by writing the Box song argument."]% Is the simulated intelligence a life form?test_open_types_cases(15,[[n,life],[[v,a1]]],        [[[n,life],[[t,string]]]],        [[[n,life],[output]]],[        [[n,life],[[v,a3]],":-",        [                        [[n,writeln],["Does the entity feel (y/n)?"]],                [[n,read_string],[[v,a1]]],                [[n,writeln],["Does the entity have human thoughts (y/n)?"]],                [[n,read_string],[[v,a2]]],                [[n,"->"],[[[[n,=],[[v,a1],"y"]],[[n,=],[[v,a2],"y"]]],                [[n,=],[[v,a3],"true"]],                [[n,=],[[v,a3],"false"]]]]        ]]]).
% ["Medicine","MEDICINE by Lucian Green Quantum Box and Prayer 3 of 4.txt",0,algorithms,"27.   *I prepared to make sure that my day in the rooms was fine.  I did this by enjoying dialogue with the quantum box/prayer character.  First, I mentioned the first visible level of matter in the object to the character.  Second, I listened to the character negate that the level was problematic (say that it was fine).  Third, I repeated this for all the visible levels of matter in the object.  In this way, I prepared to make sure that my day in the rooms was fine by enjoying dialogue with the quantum box/prayer character."]test_open_types_cases(16,[[n,fifty_algorithms],[[v,a1]]],        [[[n,fifty_algorithms],[[t,string]]]],        [[[n,fifty_algorithms],[output]]],[        [[n,fifty_algorithms],[[v,a3]],":-",        [                        [[n,writeln],["What will you use the fifty algorithms for (e.g. politician, professor, actor or musician)?"]],                [[n,read_string],[[v,a3]]]        ]]]).
% ["Mind Reading","Mr Cryptography 3.txt",0,algorithms,"51. The robot was classed disabled (rather, superabled) in human terms, so was modified to be human-like when interpreting messages following decryption."]test_types_cases(62,[[n,text2b_as_per_business_hour],[[v,brs]]],        [[[n,text2b_as_per_business_hour],[[t,number]]]],        [[[n,text2b_as_per_business_hour],[output]]],[        [[n,text2b_as_per_business_hour],[[v,brs]],":-",        [         [[n,*],[80,% breasonings per A         100, % As per week allowed in Text to Breasonings         [v,a1]]], % br per week                  [[n,/],[[v,a1],% br per week         7, % days         [v,a2]]], % br per day                  [[n,/],[[v,a2],% br per day         8, % business hours per day         [v,a3]]], % breasonings per hour                  [[n,ceiling],[[v,a3],[v,brs]]]        ]]],[[[[v,brs],143]]]).
% ["Mind Reading","Mr for time travel 2.txt",0,algorithms,"16. *I mind read the existence of the possible meditator and time travelled to  establish the meditation centre for him."]% 9. set_up_centre(['Person resonates with neo-Hinduism about philosophy','Writer','Learnt meditation at the start of adult life','Has their own craft').
% ["Mind Reading","Mr other times 8.txt",0,algorithms,"[""Green, L 2021, <i>Mr other times 8</i>, Lucian Academy Press, Melbourne."",""Green, L 2021"",1,""*Mr other times 8"]% What would you like to remember?test_open_types_cases(14,[[n,remember],[[v,a1]]],        [[[n,remember],[[t,string]]]],        [[[n,remember],[output]]],[        [[n,remember],[[v,a1]],":-",        [                        [[n,writeln],["What would you like to remember?"]],                [[n,read_string],[[v,a1]]],                [[n,writeln],["Press <return> to display the memory?"]],                [[n,read_string],[[v,a2]]],                [[n,writeln],[[v,a1]]]        ]]]).
% ["Short Arguments","Competition 3.txt",0,algorithms,"28. I explored losing as well.  I agreed with the competition.  I found the competitor.  * I saw he was weaker.  I agreed with (was stronger than) him."]test_types_cases(19,[[n,saw_weaker],[1,0,[v,result]]],        [[[n,saw_weaker],[[t,number],[t,number],[t,number]]]],        [[[n,saw_weaker],[input,input,output]]],        [[[n,saw_weaker],[[v,my_value],[v,his_value],[v,result]],":-",        [       [[n,>],[[v,my_value],[v,his_value]]],                [[n,=],[1,[v,result]]]        ]]       ],[[[[v,result],1]]]).
% ["Short Arguments","Green_Sutra.txt",0,algorithms,"8. *I prepared to notice the Lucian Effect.  I did this by teaching others.  First, I taught the person.  Second, they taught someone else.  Third, I noticed the positive effects."]test_open_types_cases(23,[[n,lucian_effect],[[v,a1]]],        [[[n,lucian_effect],[[t,string]]]],        [[[n,lucian_effect],[output]]],[        [[n,lucian_effect],[[v,a1]],":-",        [                        [[n,writeln],["Would you like to silently repeat the Lucian mantra for twenty minutes twice per day, letting your thoughts become lighter and forgetting your stress?"]],                [[n,read_string],[[v,a1]]]        ]]]).
% ["Short Arguments","Gridline 2.txt",0,algorithms,"3. I noted the height of the meniscus.  I measured the meniscuses.  I read the value for the bottom of the meniscus.  I read the value for the top of the meniscus.  I used the correct value."]concave(bottom). % uconvex(top). % ^% ["Creating and Helping Pedagogues","CREATE AND HELP PEDAGOGUES by Lucian Green Pedagogy Helper - Write on Breasoning - Computer Science 3 of 4.txt",0,algorithms,"    45.    I plugged Simulated Intelligence (SI) into people."]% br with pos% ?- new_t2b("Mara wrote the pear.",B,XYZ),length(B,L),numbers(L,1,[],N),findall([B1,XYZ1],(member(N1,N),get_item_n(B,N1,B1),get_item_n(XYZ,N1,XYZ1)),List),writeln(List).
% ["Short Arguments","Nut_and_Bolt.txt",0,algorithms,"13. *I prepared to want the baby.  I did this by synthesising the chemistry of the reproductive system with the nut and bolt.  First, I found the baby.  Second, I found the parents.  Third, I bolted the baby to the parents."]test_types_cases(18,[[n,want_baby],["yes","yes","yes",[v,result]]],        [[[n,want_baby],[[t,string],[t,string],[t,string],[t,string]]]],        [[[n,want_baby],[input,input,input,output]]],        [[[n,want_baby],[[v,money],[v,as],[v,parents_in_academia],[v,result]],":-",        [       [[n,=],[[v,money],"yes"]],                [[n,=],[[v,as],"yes"]],                [[n,=],[[v,parents_in_academia],"yes"]],                [[n,=],["yes",[v,result]]]                        ]]       ],[[[[v,result],"yes"]]]).
% ["Short Arguments","Professor Algorithm - Student.txt",0,algorithms,"6. *I prepared to smile.  I did this by symbolising the verb.  First, I enjoyed the song.  Second, I rummaged in the Christmas sack.  Third, I pulled the theatrical mask out of the sack."]test_open_types_cases(17,[[n,prepare_to_smile],[[v,a1]]],        [[[n,prepare_to_smile],[[t,string]]]],        [[[n,prepare_to_smile],[output]]],[        [[n,prepare_to_smile],[[v,a3]],":-",        [                        [[n,writeln],["What do you find touching, lovely or inspiring about the person?"]],                [[n,read_string],[[v,a3]]]        ]]]).% ["Time Travel","Meditate to Time Travel 4.txt",0,algorithms,"49. *I meditated to avoid insider trading by time travelling."]test_open_types_cases(18,[[n,detect_insider_trading],[[v,a1]]],        [[[n,detect_insider_trading],[[t,string]]]],        [[[n,detect_insider_trading],[output]]],[        [[n,detect_insider_trading],[[v,a3]],":-",        [                        [[n,writeln],["After learning insider information, did you trade?"]],                [[n,read_string],[[v,a3]]]        ]]]).
% ["Short Arguments","Rebreathsoning.txt",0,algorithms,"2. *I prepared to side with the pole.  I did this by observing meantness (sic).  First, I found the statement to be unwavering through time.  Second, I found it to be unwavering in relation to other statements.  Third, I found it to be unwavering in relation with other people."]test_types_cases(48,[[n,pole],[["a",[1,2,3]],["b",[4,5,6]],3,[v,a_or_b]]],[[[n,pole],[[t,pole],[t,pole],[t,number],[t,string]]],[[t,pole],[[t,string],{[t,number]}]]],        [[[n,pole],[input,input,input,output]]],[        [[n,pole],[[v,pole1],[v,pole2],[v,person],[v,pole_name]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,pole1],[[v,pole_name],[v,list1]]]],        [[n,member],[[v,person],[v,list1]]]]],        [[n,pole],[[v,pole1],[v,pole2],[v,person],[v,pole_name]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,pole2],[[v,pole_name],[v,list1]]]],        [[n,member],[[v,person],[v,list1]]]]]],[[[[v,a_or_b],"a"]]]).
% ["Short Arguments","Room.txt",0,algorithms,"5. I prepared to write another A.  *I did this by examining the egg and sperm when they became the zygote.  First, I found the egg.  Second, I inserted the sperm in it.  Third, I observed the zygote."]% 6. fertilise(egg,sperm,zygote).
% ["Short Arguments","Simulated Intelligence 2.txt",0,algorithms,"14. *The man added to the simulation.  God (the man) took care of people in subsets of the simulation.  God found the subset of the simulation.  It was the place.  The man recorded them."]test_open_types_cases(20,[[n,add_to_simulation],[[v,a1]]],        [[[n,add_to_simulation],[[t,string]]]],        [[[n,add_to_simulation],[output]]],[        [[n,add_to_simulation],[[v,a3]],":-",        [                        [[n,writeln],["Do you add text to breasonings to the simulation?"]],                [[n,read_string],[[v,a3]]]        ]]]).
% ["Short Arguments","Yoga to Prevent Bent Spine and Headache on Train.txt",0,algorithms,"1. I prepared to relax by washing my hands on the train.  I did this by putting liquid in the dispenser.  First, I opened the dispenser.  Second, I put liquid in it.  Third, I closed it."]% wash(["finger1","finger2","finger3","finger4","finger5","finger6","finger7","finger8","finger9","finger10"],Washed).
% [[1,",",115],[115,"append1",[-,["[","[","[","n",",","append1","]",",","[","[","v",",","a","]","]",",",""":-""",",","[","[","[","n",",","b","]",",","[","[","v",",","b","]","]","]",",","[","[","n",",","c","]",",","[","[","v",",","c","]","]","]",",","[","[","n",",","append","]",",","[","[","v",",","b","]",",","[","v",",","c","]",",","[","v",",","a","]","]","]","]","]",",","[","[","n",",","b","]",",","[","[","""b""","]","]","]",",","[","[","n",",","c","]",",","[","[","""c""","]","]","]","]"]]],[115,"function",206],[164,"c",[-,["[","[","[","n",",","function","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","c","]","]",",",""":-""",",","[","[","[","n",",","+","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","c","]","]","]","]","]","]"]]],[164,"d",[-,["[","[","[","n",",","function","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","c","]","]",",",""":-""",",","[","[","[","n",",","+","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","d","]","]","]",",","[","[","n",",","+","]",",","[","[","v",",","d","]",",","1",",","[","v",",","c","]","]","]","]","]","]"]]],[206,"+",164],[206,"function2",[-,["[","[","[","n",",","function","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","c","]","]",",",""":-""",",","[","[","[","n",",","function2","]",",","[","[","v",",","d","]",",","[","v",",","f","]","]","]",",","[","[","n",",","+","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","e","]","]","]",",","[","[","n",",","+","]",",","[","[","v",",","e","]",",","[","v",",","f","]",",","[","v",",","g","]","]","]",",","[","[","n",",","+","]",",","[","[","v",",","g","]",",","[","v",",","d","]",",","[","v",",","c","]","]","]","]","]",",","[","[","n",",","function2","]",",","[","[","v",",","a","]",",","[","v",",","f","]","]",",",""":-""",",","[","[","[","n",",","is","]",",","[","[","v",",","a","]",",","2","]","]",",","[","[","n",",","is","]",",","[","[","v",",","f","]",",","1","]","]","]","]","]"]]]]:-include('../../listprologinterpreter/listprolog.pl').
% [[1,",",115],[115,"append1",[-,["[","[","[","n",",","append1","]",",","[","[","v",",","a","]","]",",",""":-""",",","[","[","[","n",",","b","]",",","[","[","v",",","b","]","]","]",",","[","[","n",",","c","]",",","[","[","v",",","c","]","]","]",",","[","[","n",",","append","]",",","[","[","v",",","b","]",",","[","v",",","c","]",",","[","v",",","a","]","]","]","]","]",",","[","[","n",",","b","]",",","[","[","""b""","]","]","]",",","[","[","n",",","c","]",",","[","[","""c""","]","]","]","]"]]],[115,"function",206],[164,"c",[-,["[","[","[","n",",","function","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","c","]","]",",",""":-""",",","[","[","[","n",",","+","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","c","]","]","]","]","]","]"]]],[164,"d",[-,["[","[","[","n",",","function","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","c","]","]",",",""":-""",",","[","[","[","n",",","+","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","d","]","]","]",",","[","[","n",",","+","]",",","[","[","v",",","d","]",",","1",",","[","v",",","c","]","]","]","]","]","]"]]],[206,"+",164],[206,"function2",[-,["[","[","[","n",",","function","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","c","]","]",",",""":-""",",","[","[","[","n",",","function2","]",",","[","[","v",",","d","]",",","[","v",",","f","]","]","]",",","[","[","n",",","+","]",",","[","[","v",",","a","]",",","[","v",",","b","]",",","[","v",",","e","]","]","]",",","[","[","n",",","+","]",",","[","[","v",",","e","]",",","[","v",",","f","]",",","[","v",",","g","]","]","]",",","[","[","n",",","+","]",",","[","[","v",",","g","]",",","[","v",",","d","]",",","[","v",",","c","]","]","]","]","]",",","[","[","n",",","function2","]",",","[","[","v",",","a","]",",","[","v",",","f","]","]",",",""":-""",",","[","[","[","n",",","is","]",",","[","[","v",",","a","]",",","2","]","]",",","[","[","n",",","is","]",",","[","[","v",",","f","]",",","1","]","]","]","]","]"]]]]:-include('../../listprologinterpreter/listprolog.pl').:-include('../../mindreader/make_mind_reading_tree4 working1.pl').:-include('phil_tree.pl').
% [[a,2,[[b,1,[[c,1,[]]]],[d,1,[[e,1,[]]]]]],[f,1,[[g,1,[[h,1,[]]]]]]]decision_tree([],[]) :- !.
% [[a,[[b,[[c,[]]]],[d,[[e,[]]]]]],[f,[[g,[[h,[]]]]]]]decision_tree_s2(A0,B):-remove_dups(A0,A),decision_tree_s21(A,C),(length(C,1)->B=C%((P=[]->P1=P;[P1]=P),append([G],P1,GKP);B=[[nd,C]]%foldr(append,[[G,[nd,%K1,%P]]],GKP))),!.
% [[a,b],[c,d]]% trans certain items:-include('../listprologinterpreter/listprolog.pl').:-include('sub_term_with_address.pl').% trans_txt([-,t,-,t],"trans_txt.txt",A).% A = [[1, "A. \nA.", 3, "A.A."], [5, "A.A.", 7, "a.a."]]trans_txt(Template,Path,H) :- open_file_s(Path,File_term), length(File_term,File_term_L), numbers(File_term_L,1,[],Ns),  findall(F,(member(C,Ns),get_item_n(File_term,C,C1),length(C1,C1L),numbers(C1L,1,[],Ns1),findall([D1,E4,E1L],(member(D,Ns1),get_item_n(Template,D,t),get_item_n(C1,D,E),append([1,C],[D],D1),split_string(E,".",".",E1),findall(E3,(member(E2,E1),string_concat(E2,".",E3)),E4),length(E1,E1L)),F)),G), foldr(append,G,G1),  %findall([D1,[E1,E1L]],member([D1,E1,E1L],G1),G2), findall(E1,member([D1,E1,E1L],G1),G2), flatten(G2,G3), foldr(string_concat,G3,G4),   %sub_term_wa([loop,_],A,D), %findall(E,member([E,_],D),F), %foldl(delete_sub_term_wa,[F],A,C).
% [[person,[50,30,180]],[square,[1,1,0]],[pen,[15,0.5,0.5]],[square,[1,1,0]],[down,[1,1,0]],[square,[1,1,0]],[pear,[5,5,10]],[block,[1,1,1]]]:-include('../listprologinterpreter/listprolog.pl').
% \" \\\"\" -> " \""% or '" \\""' -> '" \""'string_atom2(String1,Atom1) :-%writeln1(string_atom2(String1,Atom1)),contains_string(Atom1,String2),%trace,%foldr(string_concat,String2,String1),%trace,%String1=Atom1,%string_atom(String1,String2),%string_strings(Atom1,A),%append([_],A1,A),%append(A2,[_],A1),%foldr(string_concat,A2,String1),%delete1_p2lp(Atom1,"\"",String1), atomic_list_concat(A,"\\",String2), atomic_list_concat(A,"",Atom2), atom_string(Atom2,String1),%string_atom(String1,String2),%replace(String2,"'","#",String1),%string_atom(String1,String2),!.
% a types state machine% v1 checked by type1 etc/**        [[[n,connect_cliques],[[t,list2],[t,list2],[t,list2]]],        [[t,item],[[t,number]]],        [[t,item],[[t,string]]],        [[t,list2],[[[t,list],[[t,item]]]]],        [[t,list2],[[[t,list],[[t,list2]]]]]],        [[[n,connect_cliques],[input,input,output]]],**/% list type accepts whole not partial repeats of types/**test(118,[[n,connect_cliques_types],[[["a",1],[1,2],[2,"b"]],[["a",3],[3,4],[4,"b"]],[["a",1],[1,2],[2,"b"],["a",3],[3,4],[4,"b"]]]],[  [[n,connect_cliques_types],[[v,vtp1],[v,vtp2],[v,vtp3]],":-",[[[n,list2_types],[[v,vtp1]]],[[n,list2_types],[[v,vtp2]]],[[n,list2_types],[[v,vtp3]]]]], % not in check types on entry, just exit% t->n[[[n,types],[[v,vt],[[v,vtp1]]]],":-",% like curr type checker% put up with non (what would appear in lpi) type checking code in trace, will also affect findall, maplist, forall, intersection, etc.
% a([[1],[2]],[],A).% A = [[1], [2]].a([],A,A).a([A|D],B,[A|C]) :- a(D,B,C).% c,d,e->append c d cd, append cd e cde->above% check each stage satisfies above% b(["a","b"],"",A).% A = "ab".
% a([[a],[b]],B).% B = [a, b].
% a_because_b(B,[[ate_with,D]],E).
% abbreviate(2,"aardvark",O).
% add1(1,2,C).% C = 3.
% agree_at_time([1,2,3,4,5],Agree_at_times).
% alg noumenon - ontolog are 2 parts going together, can be merged into 1 pred% not waste of time bec can be rapidly found% natural language to find algs% endpoints' (see below)% a -b, -c do U to do computation not endpoints lower down% U is decompose, build in rec preds% use ontol connection with a -b (one branching point per level) for U% and not or subpreds:-include('7 10 23.pl').
% algebra_finder1(4*x+3,y,x,A).% A =  (y-3)/4.
% all_supported([1,3,4,5],[[1,6],[3,8],[4,10],[5,7]],Result).
% all_supported([1,3,4,5],[[1,6],[3,8],[5,7]],Result).
% analytics_sum_columns([[1,2,3],[4,5,6]],Sums).
% ancestor(Person, Ancestor)% means Ancestor is an ancestor of Person.%% This is functionally equivalent to descendant(Ancestor, Person).
% and1([[a,b,c],[a,d,c],[e,f]],[a,c],Lines).
% apologies to 19 3 23.pl/*minimise_dfa([[a,b],[b,c],[a,d],[d,c],[a,e],[e,c]],B).
% append1([1,2],[3,4],C).
% arg_conn(a,b,[[all,[e,f]],[f,[a]],[e,[]],[all,[b]]],all,C).
% arg_conn(paper,pen,[[idea,[paper]],[idea,[pen]]],idea,C).
% arg_conn(two_lists,one_list,[[append,[two_lists]],[append,[one_list]]],append,C).
% arg_conn(wind,sun,[[change,[wind]],[change,[sun]]],change,C).
% arguments(A).                                                       % A = [a, d].arguments(N2) :- findall(A,(argument1(A,quality,N),N>=80),N2).argument1(a,quality,80).
% as [A,B] is to [[B],A], [c,d] is to X% test1(off,1,A).
% as [A,B] is to [[B],A], [c,d] is to X% test1(off,1,A).% data_to_alg([a,b],[[b],a],[c,d],A2).
% b1("abc",B).% B = "abc".
% back-translates List Prolog to State Machines% bt-lp2sm_en2test(A,B).% A - output: total tests% B - output: total correct results% bt-lp2sm_en2test1(N,B).
% back-translates List Prolog to State Machines% bt-lp2sm_test(A,B).
% beginnings_middles_ends(10,5,BME).% [[1,[1,2,3,4,5]],[2,[1,2,3,4,5]],[3,[1,2,3,4,5]],[4,[1,2,3,4,5]],[5,[1,2,3,4,5]],[6,[1,2,3,4,5]],[7,[1,2,3,4,5]],[8,[1,2,3,4,5]],[9,[1,2,3,4,5]],[10,[1,2,3,4,5]]]beginnings_middles_ends(Number_of_lines1,Max_line_length,BME) :- generate_lines(Number_of_lines1,Max_line_length,[],L1), foldr(append,L1,L2), permutation(L2,L3), findall(Item,member([Item,_],L3),Items1), sort(Items1,Items2), findall([Item2,Items4],(member(Item2,Items2), findall(Item3,member([Item2,Item3],L3),Items3), sort(Items3,Items4)),BME),!.
% bell(18,56,"Lucian's alarm").
% bottom_up(subject,A-B,B-C,A-C).
% br with sent and alg% types% eg type_checker([c1(a,b),c2(a),c3(b,c)],Types).% Types = [c1(atom, number), c2(atom), c3(number, string)].
% bt-p2lp_test(A,B).
% c-d-e->string concat c d cd, string concat cd e cde->above% later: substitute other vars, preds to affect inputpf_types1([[reverse,[ % [[n,a],[[],[v,a],[v,a]]],[[n,a],[[[v,a],"|",[v,d]],[v,b],[v,c]],":-",[[[n,a],[[v,d],[[v,a],"|",[v,b]],[v,c]]]]]]],[identity,[ % identity[[n,a],[[],[v,a],[v,a]]],[[n,a],[[[v,a],"|",[v,d]],[v,b],[[v,a],"|",[v,c]]],":-",[[[n,a],[[v,d],[v,b],[v,c]]]]]]],[string_concat, % string concat[[[n,a],[[],[v,a],[v,a]]],[[n,a],[[[v,e],"|",[v,d]],[v,b],[v,c]],":-",[%[[n,equals4],[]],[[n,stringconcat],[[v,b],[v,e],[v,f]]],[[n,a],[[v,d],[v,f],[v,c]]]]]]]],[[[c,d],e],f]).
% calculates needed background helping breasonings according to one's time travel schedule and whether new breasonings will be written %:- use_module(library(date)).
% catch errors, 500 errors% Later: multiple files:- use_module(library(http/thread_httpd)).:- use_module(library(http/http_dispatch)).
% character_freq("abdashdfj",A).                                      % A = [[2, "a"], [1, "b"], [2, "d"], [1, "f"], [1, "h"], [1, "j"], [1, "s"]].% character_freq("Quoth said the raven.",A),writeln(A).
% check_dependencies([["a",["b"]],["a",["b"]]],[["a","a.pl",[["include","c.pl"],["init",":-",["d","e"]]]],["a","c.pl",[["f"]]],["b","h.pl",[["e",":-","f"]]]]).% removed init (first predicate from registry)check_dependencies(Registry,Files) :- % check package manager registry file findall(_,(member([R1%,P1 ,Rs],Registry),append([R1],Rs,Rs2),  % check included files member(R,Rs2), (findall(_,(member([R,_F,P],Files), findall(_,(member(["include",F1],P), check_file(F1,Files)),B), length(P,L1),%length(B,L1), findall(_,(member([P1],P),(string(P1)->P1=P2;P1=[P2,_,_]), check_predicate([P2],Files)),A), append(A,B,AB), length(AB,L1) ),_C) %length(Files,L2),length(C,L2) )),_D).
% check_dependencies([["a",[]]],[["a","a.pl",[["a",":-","b"],["b"]]]]).           % check_dependencies([["a",["b"]]],[["a","a.pl",[["include","c.pl"],["init",":-",["d","e"]]]],["a","c.pl",[["f"]]],["b","h.pl",[["e",":-","f"]]]]).
% check_dependencies([["a",[]]],[["a","a.pl",[["b"]]]]).
% check_dependencies([["a",[]]],[["a","a.pl",[["include","b.pl"]]],["a","b.pl",[["c"]]]]).
% check_text_with_ontologies(A),writeln(A).                                          Call: (11) check_text_with_ontologies(A),writeln(A).
% clarify(S),writeln(S).
% clique([1,2,3,4,5],Links).
% collect loops, path in cont loop% list all arms of loopcontains_loop_dfs2(_C,[],_%,Items,Items,A,A,B,B%Items_all1,Items_all1%) :- %append(B1,[C],B2),!%,fail.
% collision(0,1,0,0,1,0,0,1,0,0,1,0,1,10).
% collision(0,2,0,0,1,0,0,1,0,0,1,0,1,10).
% competition(3,0)./*[6,9,<, = or >:][Correct, Score = ,1][3,1,<, = or >:][Correct, Score = ,2][7,2,<, = or >:][Incorrect]*/competition(0,_) :- !.
% complexity_from_findall([[m,a,b],[m,c,b],[m,d,b],[m,e,b]],C).
% complexity_from_findall([[m,a,b],[m,c,b],[m,d,b]],C).
% complexity_from_findall([[m,a,b],[m,c,b]],C).% C = n^2.
% complexity_from_findall([[m,a,b]],C).
% compound_image2html([[red,red,red],[red,red,red],[red,red,red]]).
% connect_thoughts(A),writeln(A).
% construct(F3).
% copy Books folder into sources, move out dot-stub.txtcheck_books_format:-directory_files("sources1/",F),delete_invisibles_etc(F,G),%%trace,%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall(_,(member(Folderx1,G),string_concat("sources1/",Folderx1,Folderx),directory_files(Folderx,F1),delete_invisibles_etc(F1,G1),findall(_,(member(Filex1,G1),%trace,foldr(string_concat,["sources1/",Folderx1,"/",Filex1],Filex),%foldr(string_concat,["sources1/",Folderx1,"/",Filex1],Filexx),%split_string(Filex1," "," ",Filex2),%Filex3=Filex2,%findall([Filex31," "],(member(Filex31,Filex3)),Filex32),%maplist(append,[Filex32],[Filex321]),%concat_list(Filex321,Filex33),%string_concat(Filex1,".txt",Filex33),phrase_from_file_s(string(String00a), Filex),%string_codes(String02c,String00a),%atomic_list_concat(B,"\"",String02c),%atomic_list_concat(B,"\\""",C),%atom_string(C,String02b),once((string_concat(A,_,Filex1),string_length(A,4))),(A="dot-" ->true;%Line=String00a;(string_codes(String02c,String00a),(catch((term_to_atom(String02c1,String02c),String02c1=[_,_,_,_]),_B,(%writeln(B),false))->true;writeln([Folderx1,Filex1,corrupted,format]))%concat_list(["[\"Green, L 2022, <i>",Filex4,"</i>, Lucian Academy Press, Melbourne.\",\"Green, L 2022\",1,\"",String02b,"\"]"],Line)))%atom_to_term(String02b,String02a,[]),/*,foldr(string_concat,["sources1/",Folderx1,"/"],Folderxx1),(exists_directory(Folderxx1)->true;make_directory(Folderxx1)),(open_s(Filexx,write,Stream1),%%string_codes(BrDict3),write(Stream1,Line),close(Stream1))*/),_)),_).
% could run in lp or compile and run in c (taking alg file as argument)find_pred_numbers_to_cut(Functions2a,Functions2ab,Pred_numbers) :- find_pred_numbers(Functions2a,Functions2ab,Pred_numbers),!.
% counter_argument([[[1],"God exists."],[[1,1],"It facilitates meditation."]],Counter_argument).
% create matrix, create blocks, create straight line through remaining space, find left or right hand rule ()until shortest path is found, ()count steps so far /*find_path(20,30,10,1,25).
% create_check_cube(3,3,3).
% cut1(-2,3,X3,X4).
% cut1(-aleph,aleph,X3,X4).
% data_to_alg([a,b],[[b],a],[c,d],A2).
% data_to_alg2([[[a,b],[[b],a]],[[a1,b1,c1],[b1,a1,c1]]],[[c,d],[e,f,g]],A2).% A2=[[[d],c],[f,e,g]]data_to_alg2(Examples,Data,Out) :- findall([Alg3,Alg4],(member([Data1,Data2],Examples), data_to_alg3(Data1,Data2,Alg3,Alg4)),Algs), findall(Alg2,(member(Data1,Data),member([Alg3,Alg4],Algs), data_to_alg4(Alg3,Alg4,Data1,Alg2)),Out).
% data_to_alg5([a,b],[[b],a],[c,d],A2).
% data_to_alg5(a:b,a,c:d,A).% A=[c]type(append,[a,b],a:b).
% decision tree of algorithms (autocomplete)% Based on spell_checker.pl/*[debug]  ?- algorithm_decision_tree0.                                           Please choose the correction to "[[\t[n,function", <return> for no correction or type a replacement word:1 - (2) - [[n,word213],[[v,3],[v,3]],":-",[[[n,true]]]]2 - (2) - [[n,word212_atom],[[v,1],[v,1],[v,3],[v,3]],":-",[[[n,true]]]]3 - (2) - [[n,word212],[[v,3],[v,3]],":-",[[[n,true]]]]4 - (2) - [[n,word212],[[v,1],[v,1],[v,3],[v,3]],":-",[[[n,true]]]]5 - (2) - [[n,verb],[[v,1],[v,1]],":-",[[[n,true]]]]6 - (2) - [[n,verb],":-",[[[n,true]]]]7 - (2) - [[n,types],":-",[[[n,true]]]]8 - (2) - [[n,traverse],[[v,1],[v,2]],":-",[[[n,traverse],[[v,1],[v,2],[v,6],[v,8]]],[[n,cut]]]]9 - (2) - [[n,tra_las],[[v,1],[v,2]],":-",[[[n,las],[[v,1],[v,5]]],[[n,append],[[v,5],[v,2]]]]]10 - (2) - [[n,test2],":-",[[[n,true]]]]11 - (2) - [[n,test1],":-",[[[n,true]]]]12 - (2) - [[n,sum],[[v,2],[v,2]],":-",[[[n,true]]]]13 - (2) - [[n,substring],[[v,2]],":-",[[[n,not],[[[n,=],[[v,2]]]]],[[n,fail]]]]14 - (2) - [[n,substring],":-",[[[n,true]]]]15 - (2) - [[n,subject],[[v,1],[v,1]],":-",[[[n,true]]]]16 - (2) - [[n,subject],":-",[[[n,true]]]]17 - (2) - [[n,stop_at_top],[[v,1]],":-",[[[n,head],[[v,1]]]]]18 - (2) - [[n,stop_at_top],":-",[[[n,true]]]]19 - (2) - [[n,sort1],[[v,2],[v,2]],":-",[[[n,true]]]]20 - (2) - [[n,sort0],[[v,1],[v,2]],":-",[[[n,sort1],[[v,1],[v,2]]]]]*/:-include('../listprologinterpreter/listprolog.pl').
% delete choicepoints in all clauses of current predicate x% find cps of same name, arity that have same previous pred_id xcut_cps(Choice_point_trail1a,Choice_point_trail2,CP_Vars1a,CP_Vars2,Pred_id,Predicate_number,Globals3) :-%trace,% collect pred ids connected by curr pred num% clear empty Cps%clear_cps(Choice_point_trail1a,Choice_point_trail1,CP_Vars1a,CP_Vars1),Choice_point_trail1a=Choice_point_trail1,CP_Vars1a=CP_Vars1,% (possibly not necessarily) collect connected pred idsfindall(Pred_ids,collect_connected_pred_ids(Pred_id,[Pred_id],Pred_ids,Predicate_number,Globals3),Pred_ids1),flatten(Pred_ids1,Pred_ids1a),sort(Pred_ids1a,Pred_ids2),%writeln([1,Pred_ids2]),% replace their cps with [] x/*member([pred_id_chain,Prev_pred_id,Pred_id],Globals3),pred_numbers(Pred_numbers),member([Function1,Arity1,Pred_numbers1],Pred_numbers),member(Predicate_number,Pred_numbers1),findall(Pred_id1,(member([pred_id_chain,Prev_pred_id,Pred_id1],Globals3),member([Function1,Arity1,Pred_numbers2],Pred_numbers),member([[pred_num,Pred_id1],Predicate_number1],Globals3),member(Predicate_number1,Pred_numbers2)),Pred_ids2),*/findall(%[E2%,E4%],(member(C,Pred_ids2),E2=[_A,_B2,C,_D_Level,_E_Predicate_number2,_F_Line_number_a2,_Pred_or_line,_H,_I,_All_predicate_numbers2],member(E2,Choice_point_trail1)%E1=[C,D_Level,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],/*(Pred_or_line="line"->(All_predicate_numbers2=[Ab,Bb,Cb,Db,Eb,Fb,Vars2c],not(Vars2c=[]),E4=[A,B2,C,D_Level,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,[Ab,Bb,Cb,Db,Eb,Fb,[]]]);Pred_or_line="predicate"->not(All_predicate_numbers2=[]),E4=[A,B2,C,D_Level,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,[]])*/),E3),% * delete not replace []s, heap since first line needed for retry% - delete rest of cps with pred_ids2%replace_cps(E3,B21,B23,B22),replace1(Choice_point_trail1,Pred_ids2,Choice_point_trail3,CP_Vars1,CP_Vars3),%trace,delete1(E3,Pred_ids2,E31),%,CP_Vars3,CP_Vars4),%delete_cp2(Choice_point_trail1,E31,Choice_point_trail2,CP_Vars1,CP_Vars2).
% delete_duplicate_clauses([[[[n,a],":-",[[[n,b]]]],[]],[[[n,c],":-",[[[n,b]]]],[]],[[[n,d],":-",[[[n,c]]]],[]]],[],L),writeln1(L).
% delete_duplicate_clauses([[[n,function],[[v,a]],":-",[[[n,+],[[v,a]]]]],[[n,function2],[[v,a]],":-",[[[n,+],[[v,a]]]]],[[n,function3],[[v,a]],":-",[[[n,function2],[[v,a]]]]]],[],L),writeln1(L).
% delete_item_n([4,5,6],2,D).
% distance(0,0,0,1,1,1,D).
% distribute thoughts, find jump listsperson1(anita).
% does each direction have 50 As?dir(1,2,true).
% duplicate, rotate, reflect and stack shapes within certain sized containers% get up to n shapes, modify them, stack themstack_shapes(%Box_X,Box_Y,Box_Z, Grid2) :- shapes(Shapes), convert_to_coords(Shapes, Shapes_coords1), %numbers_of_shapes(Numbers),  %member(Number,Numbers), %numbers(Number,0,[],Ns),  %trace,  /* findall(Shape_coords3,(member(Shape_coords1,Shapes_coords1), member(N,Ns),numbers(N,1,[],Ns1),findall(Shape_coords2,(member(_,Ns1), duplicate_shape(Shapes_coords1,Shape_coords1,Shape_coords2)),Shape_coords3)),Shape_coords4), */ %Shape_coords1= Shape_coords4=[],  %trace, foldr(append,Shape_coords4,Shapes_coords1,Shape_coords5),  %trace, angles(Angles), % need combos of rots v findall(Shape_coords6,(member(Shape_coords1,Shape_coords5), member(Angle1,Angles), member(Angle2,Angles), member(Angle3,Angles), %trace, rotate_shape(Shape_coords1,Angle1,Angle2,Angle3,Shape_coords61), %trace, rotate_shape(Shape_coords61,Angle1,Angle2,Angle3,Shape_coords62), rotate_shape(Shape_coords62,Angle1,Angle2,Angle3,Shape_coords6)), Shape_coords71),  sort(Shape_coords71,Shape_coords7),  reflect_shape(Shape_coords7,x,Shape_coords8), reflect_shape(Shape_coords7,y,Shape_coords9), reflect_shape(Shape_coords7,z,Shape_coords10),  foldr(append,[Shape_coords7,Shape_coords8,Shape_coords9, Shape_coords10],[],Shape_coords11),  sort(Shape_coords11,Shape_coords12),  % randomly xx chooses and closely stacks shapes until full % - could try single shape, combos of shapes () % - x randomly stacks  % start with shapes at each cell  % It is generative art  %grid(0,0,0,Box_X,Box_Y,Box_Z,Grid1), Grid1=[], place3(_Box_X,_Box_Y,_Box_Z,Grid1,Grid2,Shape_coords12).%grid([0,0,0])/*grid(Xm,Ym,Zm,X,Y,Z,Grid) :-numbers(Z,Zm,[],ZN),numbers(Y,Ym,[],YN),numbers(X,Xm,[],XN),findall([Z1,X1,Y1,[]],(member(Z1,ZN),member(Y1,YN),member(X1,XN)),Grid),!.
% edge_3d(3,3,2,1,1,1,3,1,1,1,3,1,1,1,2,2,2,2).edge_3d(X_win,Y_win,Z_win,X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X4,Y4,Z4,PX,PY,PZ) :- make_grid_3d(X_win,Y_win,Z_win,Grid1), draw_edges_3d(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X4,Y4,Z4,Grid1,Grid21), draw_faces_3d(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X4,Y4,Z4,Grid21,Grid2), %prettyprint_3d_1_e1(Grid2,Y_win,X_win,Z_win),  tetrahedron_centre_3d(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X4,Y4,Z4,QX,QY,QZ), fill_3d(QX,QY,QZ,Grid2,Grid3), ((member([PX,PY,PZ,M],Grid3), member(1,M))-> writeln("Point is in tetrahedron."); writeln("Point is not in tetrahedron.")), line1_3d(PX,PY,PZ,PX,PY,PZ,Grid3,Grid4,2), prettyprint_3d_1_e1(Grid4,Y_win,X_win,Z_win),!.make_grid_3d(X,Y,Z,Grid) :- numbers(Y,1,[],Ys), numbers(X,1,[],Xs),  numbers(Z,1,[],Zs),  findall([X1,Y1,Z1,[]],(member(Y1,Ys),member(X1,Xs),member(Z1,Zs)),Grid).
% education_research(1,[],D).
% eg data/*E=[a,b,b,c]append(A,B1,E),append(b,C1,B1),append(B2,D1,C1),append(c,C,D1)- */ % convert lines to append tree specs/*[a,*1=[b],*2=[b],c]*/%  like caw, it finds l, r spec% convert append tree specs to code% simple form: finds code in common for l,r data, returns excerpts% data2at([["abbc","bb"],["addc","dd"]],Code).% X:% Spec = [[a,*1,*2,c],[*1,*2]] x% Spec = [[a,*1,c],[*1]]% data2at([["abbebc","b"],["addededfc","f"]],Code).
% empirical([1,+,1,=,2]).
% empirical([2,*,5,=,C]).
% empirical([A,*,B,=,C]).
% empirical([A,+,B,=,C]).% A = B, B = 1,% C = 2 ;% A = B, B = C, C = 0 % empirical([2,+,7,=,C]).
% enroll_with_quota([[first1,last1,"Mathematics"],[first1,last1,"Mathematics"]],[["Mathematics",1, [["Joan", "Clemens"]]]],Enrollments2).
% equity(1,A).equity(B,A) :- A is 2*B.
% equity1(1,How_much_i_like_you).
% evidence, construction, query, searchevidence(["apple","in","box"]).
% fill(5,5,[],L),writeln(L).
% find L at end above% L should be [_,_,_] not [_]% insert list[]types_in2([],[]) :- !.
% find dbfind_db :-% a to b folders(Folders),findall(Texts11,(member(Dept,Folders),%concat_list(["../Lucian-Academy/",Dept,"/"],Dept1),concat_list([Dept,"/"],Dept1),directory_files(Dept1,F),delete_invisibles_etc(F,G), SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xxfindall(Texts3,(member(Filex1,G),string_concat(Dept1,Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),%downcase_atom(String02b,String00a1),String02b=String00a1,split_string(String00a1, ".\n\r", ".\n\r", String02cb),findall([String02cd,H],(member(H,String02cb),downcase_atom(H,H1),split_string(H1, SepandPad,SepandPad, String02cd)),Texts3)%maplist(append,[Texts3],[Texts31])),Texts1),maplist(append,[Texts1],[Texts11])),Texts21),maplist(append,[Texts21],[Texts2]),% a b phrase_from_file_s(string(Codes_cve), "connectives.txt"),string_codes(String_cve,Codes_cve),atom_to_term(String_cve,Connectives,_),findall([A,WC],(member([B,WC],Texts2),subtract(B,Connectives,A)),C),% a b d->1 2 3->12 s1,13 s1,23 s1 where s1=a b d% convert to numbersretractall(word_nums(_)),assertz(word_nums([])),retractall(word_num(_)),assertz(word_num(0)),findall([D,E,With_conn],(member([E,With_conn],C),findall(N,(member(E1,E),word_nums(WN),((member([E1,N],WN)->true;(word_num(N1),N is N1+1,retractall(word_num(_)),assertz(word_num(N)),append(WN,[[E1,N]],WN2),retractall(word_nums(_)),assertz(word_nums(WN2)))))),D)),D1),% find combination pairsfindall(D2,(member([D3,E,WC],D1),findall([D5,D6,E,WC],(member(D5,D3),member(D6,D3),not(D5=D6)),D2)),D71),%trace,delete(D71,[],D72),maplist(append,[D72],[D7]),% delete singles x are none, delete mirrors, merge and keep lists of 1 2 s1,2%trace,process(D7,[],D8),term_to_atom(D8,D82),string_atom(D83,D82),(open_s("find_details_db.txt",write,Stream1),write(Stream1,D83),close(Stream1)),word_nums(WN1),term_to_atom(WN1,D84),string_atom(D85,D84),(open_s("find_details_wn.txt",write,Stream2),write(Stream2,D85),close(Stream2)),!.
% find formulas for other ad1 (questions) and Q1% next time, substitutes values into formulas% uses subterm with address to add formulas to cells% replaces these formulas and totals with spanning formulas% On "Overhead rate for handling orders", finds the value of the function which is in terms of any table col or total col with label similar to "handling orders"% Overhead rate for handling orders = $160,000/3,000 = $53 (rounded)split_into_tables([A],[A]) :- !.
% find key sents with a key term, relate other sents in para in chain of terms% big_connections_with_bag3_and_mr(["computational","english"]).
% find overall gradefind_overall_grade(List,Overall_grade) :-foldl(sum,[List],0,Sum),length(List,Length),Overall_grade is floor(Sum/Length).
% find_between("abc","a","c",F),find_between("bc","","c",G),find_between("cde","d","",H).
% find_between("abc","a","c",F),find_between("bc","","c",G),find_between("cde","d","",H).% F = G, G = ["b"],% H = ["e"].
% find_between_possibilities("aca b b", ["a", "c"], ["b"], C).
% find_between_possibilities("aca b b", ["a", "c"], ["b"], C).% C = "a ".
% find_first_number([[v,"1"],2],A).
% find_first_number([[v,3,"1"],2],A).
% find_first_number([[v,3,"1"],2],A).% A = 3.
% find_first_term_n("a b c",["a","b"],C).
% find_lists1([1,1,1,[2,2],1,1,1,[2]],[1,1,1,[2,2]],[],L).% L = [1, 1, 1, [2]] % find_lists1([[1,1,1,[2,2],1,1,1,[2]]],[[1,1,1,[2,2]]],[],L).% L = [[1, 1, 1, [2]]] % find_lists1([[[1,1,1,[2,2],1,1,1,[2]]]],[[[1,1,1,[2,2]]]],[],L).% L = [[[1, 1, 1, [2]]]] find_lists1(T1,T2,L1,L2) :- find_lists(T1,T2,L1,L2,true). find_lists([],[],L,L,_) :- !.%maplist(is_empty_list,Ts),!.
% find_lists3([1,2,2,1,2],[],L2).
% find_lists3a([1,2,3,1,3],A).
% find_lists3a([1,2,3,2,3,1,2,3,2,3],L).
% find_lppm_deps(U).
% find_peak_height(10,"ddd-uu-d-d",[],H).
% findall([A,B],link(A,B),L),findall(P,paths(1,L,[1],P),P2),findall([L2,P3],(member(P3,P2),length(P3,L2)),Z),sort(Z,Z3),append(_,[[_,P4]],Z3),writeln(P4),!.
% finds append a b (list of a, b) from the overall output a,b                                           %induct0([[[c,d],e],f],_,[],C).
% first_technique1(Term,"pome").
% formerly test 1test(160,[[n,function],[1,1,[v,c]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                %[[n,equals4_off]],                [[n,+],[[v,a],[v,b],[v,c]]]        ]        ]],[[[[v,c], 2]]]).
% get new var listing/*replace_vars011(Variable2,Vars1,Vars2a,Vars2b) :-not(variable_name(Variable2)),is_list(Variable2),getvalue_match11(Variable2,Vars1,Vars2a,Vars2b).
% groups_on_side([["a","happy"],["b","happy"],["c","happy"]]).
% higher_average([[1,[5,6,7]],[2,[4,7,8]]],Item).
% http://localhost:8000/a:-include('../Prolog-to-List-Prolog/p2lpconverter.pl').
% https://www.intmath.com/exponential-logarithmic-functions/3-logarithm-laws.php% 10. ["Mind Reading","mr spiritual screen 2.txt",0,algorithms,"34. *I cast the actor by checking his face matched the character's appearance on the spiritual screen."]actor(a,["fat elf"]).
% if it fails, retry () *random_movements1(_,_,_,[],Frame,Frame) :- !.
% induct([c,d],c:d,[],C).
% jan,feb,mar,aprdata([[1,1,2,1], % web      [1,1,3,1], % training      [2,1,1,1]]).% development    % 1.
% key word in sentence% phrase(sentence(A),[the,john,read,to,sera]).
% last coordinate goes up by 2 (room for +)% these groups are sums in the formula (1+1+1) or (1+1) elsewherefind_sums_in_term([], F3, F3) :- !.
% last coordinate goes up by 2 (room for +)% these groups are sums in the formula (1+1+1) or (1+1) elsewherefind_sums_in_term([], F3, F3) :- !.find_sums_in_term(F1, F3, F33) :-    sort(F1, F12),    %F13 = [[Add, _T] | _F4],    %append(Add2, [_Last], Add),    %append(Add2, [_], Add3),    %F1 = F12,    member([Add3, T2], F12),    append(Add4, [Last], Add3),    append(Add4, [_], Add5),    findall(Add5, member([Add5, _T3], F12), Add61),    sub_term_wa(Add5, Add61, Formula_Instances1),    find_2_steps(Last, Formula_Instances1, [], Formula_Instances2),    foldr(put_sub_term_wa_ae, Formula_Instances2, Add61, F132),    findall([ZZ, ZZ2], (member(ZZ, F132), member([ZZ, ZZ2], F12)), ZZ3),    subtract(F1, ZZ3, F35),foldr(append, [%F35, %[[Add3, T2]], ZZ3], F34),foldr(append, [%F35, %[[Add3, T2]], [ZZ3]], F341), %trace,%append(F3, F341, F331),append(F3,F341,F331),    ((sort(F3, L), sort(F341, L)) -> F33=F331;%append(F3,F341,F33);    find_sums_in_term(F35, F331, F33)), !.
% later: do this for combos of texts%:-include('../listprologinterpreter/listprolog.pl').
% later: do this for combos of texts:-include('../listprologinterpreter/listprolog.pl').:-include('br_alg_gen2.pl')./*?- bag2phil(Br),writeln(Br).
% length1(3,5,L).
% light_where_people_are([1],A).
% light_where_people_are([6,5,4,3,2,1],A).
% light_where_people_are([],A).
% line_graph(2,2,[1,2],_).
% log_finder(%log_finder2(A,B,C,D) :-%log_finder(A,B,C,D),!.
% lower_freq_essay("a  a a aa  a b b c c d e f g",A),writeln(A).      % A = [[aa,d],[aa,e],[aa,f],[aa,g],[d,aa],[d,e],[d,f],[d,g],[e,aa],[e,d],[e,f],[e,g],[f,aa],[f,d],[f,e],[f,g],[g,aa],[g,d],[g,e],[g,f]]% higher_freq_essay("a  a a aa  a b b c c d e f g",A),writeln(A).% A = [[f,g],[f,b],[f,c],[f,a],[g,f],[g,b],[g,c],[g,a],[b,f],[b,g],[b,c],[b,a],[c,f],[c,g],[c,b],[c,a],[a,f],[a,g],[a,b],[a,c]]lower_freq_essay(E1,E2) :-word_frequency_count(["string",E1],Freq),sort(Freq,Freq1),length(A,5),length(Freq,L),(L<5->L2=Freq1;(append(A,_,Freq1),L2=A)),findall([B,C],(member([_,B],L2),member([_,C],L2),not(B=C)),E2).
% make_connection(Subject,Object,Meronym).make_connection("computer","file","stored").
% make_directory_sh("root@x.x.x.x:~/a").make_directory_sh(F1) :- (absolute_url(F1)-> F1=F2; (working_directory_sh(F11,F11), string_concat_url(F11,F1,F2))),split_string(F2,":",":",F),append([G],[H],F),string_concat(K,K1,H),string_length(K,2),foldr(string_concat,["main_tmp :- catch(make_directory('",K1,"'),Err,handle_error(Err)),halt.\nmain_tmp :- halt(1).\nhandle_error(_Err):-\n  halt(1)."],S1),foldr(string_concat,[G,":~/tmp54837.pl"],P1),save_file_sh(P1,S1),foldr(string_concat,["ssh ",G," swipl --goal=main_tmp --stand_alone=true -o tmp54837 -c tmp54837.pl"],S2),(catch(shell1_s(S2),_,fail)->(foldr(string_concat,["ssh ",G," ./tmp54837\nssh ",G," rm tmp54837.pl\nssh ",G," rm tmp54837"],S),(catch(shell1_s(S,_Out),_,fail)->(true);(writeln("make_directory_sh aborted."),abort)));(writeln("make_directory_sh aborted."),abort)),!.
% make_exercises3.pl% practise layout% convert to prolog, display using ssi% finds answers from text% make_exercises3() :- % get exercises for file% make_exercises("a b c. d e f.\ng h i. j k l.m n o. p q r.\ns t u. v w x.",2,S1),practise_layout(S1,S),writeln(S).
% makes sure that idea does not precur% a b, a c and d c->d b (with each pair of non-connective words), does chains of 3 x 2 pairs% pol existence ("pol") as a seen as version (added on)% br_gen(A,B),writeln1(A),writeln1(B).
% mathematical_lock(1,A,5).
% matrix_finder1([[[0,1],[-1,0]],[[1,0],[0,1]]],Matrix).% Matrix = [[0, -1.0], [1.0, 0]].
% meditation_chain_letter(1,1,L).
% meditation_chain_letter(2,1,L).
% meditation_chain_letter(3,1,L).
% meditation_chain_letter(Sample,Branching_factor,Levels_taken_to_fill_sample).
% meditation_reminder([1,[2,3,[4]]],R).
% merge3([a,a,b,a],[a,b,c],A).
% merges_preds contains the name and arity of updated preds x%findall1(H,(member(H,G),not(string_concat("dot",_,H)),subtract(G,Omit,G1),findall1(G3,(member(G2,G1),string_concat(G2,"/",G3)),G4)%not(member(G,Omit))),K01),%trace,%foldr(append,K0,K01),working_directory1(Old_D,Old_D),%trace,findall1(Tests1,(member([D,K31],K01),%trace,working_directory1(_,Old_D),working_directory1(_,D),%member(K2,K31),%exists_directory(K2),%trace,process_directory_merge(K31,%_G, %Omit,% true, Tests11),  % get reverse order of preds  % go through them in order, ", for each combo make changes to original, test until find the simplest working version %trace, %find_pred_order(Tests11,Ordered_pred_nums),  prepare_repositories(Tests11,Tests1) %xx delimit files, combine in luciancicd, find combos in multireps x reps, take apart on file delimiter comments, find shortest combos first, test %process_merge_preds(Tests11,Ordered_pred_nums,Tests1)   %process_merge_preds() ),Tests2), foldr(append,Tests2,Tests), %trace, retractall(lc_tests(_)), assertz(lc_tests(Tests)) ,working_directory1(_,A),%writeln("All tests were successful."),!.
% mod_div_ff(div,[[5,2],[6,3]],Div).
% mod_div_ff(div,[[7,2],[6,2]],Div).% Div=[3].:-include('../listprologinterpreter/la_maths.pl').
% mod_div_ff(mod,[[5,2],[6,0]],Mod).
% modus_ponens('I ate the apple', 'I ate the apple'-'I gained energy', B).
% moti(10,10,10,3,2,XD,L),writeln(XD),writeln(L).
% mr for philosophy and algorithm writing/*?- mr2pp("tabs",[[[n,a],":-",[[[n,true]]]]],A).
% natural language to find algs% nl2alg([a,via,b],[[a,[]],[a,[b,c]],[b,[]],[c,[d]],[d,[]]],Alg).
% new_radius(2,1.41).
% nl2alg(["A-B",via,"C"],[["A-B",["B","C"]],["B",[]],["C",["D"]],["D",[]]],Alg).
% nl2alg(["a:-b.",via,"d."],[["a:-b.",["b:-c."]],["b:-c.",["d."]],["d.",[]]],Alg).% Alg = ["a:-b.", "b:-c.", "d."].
% nl2alg([cake,via,water],[[table,[cake]],[cake,[water,batter]],[water,[]],[batter,[flour]],[flour,[]]],Alg).% Alg = [cake, water, batter, flour].
% nl2alg([sue,via,david],[[john,[mary,sue]],[mary,[]],[sue,[david]],[david,[]]],Alg).
% nl2alg([w,via,x],[[w,[x,y]],[x,[]],[y,[z]],[z,[]]],Alg).
% non-cyclespath1(Cycles,First,Tree,A0,A5) :-%trace, findall1(A1,path10(Cycles,First,Tree,A0,A1),A2), flatten(A2,A3),list_to_set(A3,A4), subtract(A4,[First],A5) %A4=A5 .
% note: not indicative% ?- productivity(P,M).
% noticed(4,5,4,1,Seconds).
% number of extra shapes%numbers_of_shapes([1%,2,3,4,5,6,7,8,9,10%]).
% number1(1,A),number1([var,_,_,_,_,1,_,_,_,_,_],B),number1("1",C).
% number_order(1000,M).
% numbers may be -x vfind_formulas(Ad1,Q1,A1,Ad2,Q2,A2) :-%writeln1(find_formulas(Ad1,Q1,A1,Ad2,Q2,A2)),%trace,% replace one whole word with 1 etc v% % if first instance of a number in (ad1,q1), changes it to a non function and refers to eg rows 1-n from sol a (finds patterns in output tables) if only instance% ba ba from ab ab x summarises formulas as spans eg $98 400 / 1.10^1 + $86 300 / 1.10^2 , n=to all similar row heads (or different*) - tell row heads are similar if have same text% asks which value when multiple or chooses% references value by search query (wo connectives) if not in curr table% saves manual program formulas in Prolog file% later, calculates formulas% qual concs with prolog and type 3 formulas entered into model file (err on a particular function)retractall(variable_n(_)),assertz(variable_n(1)),% give all same vals in ad1, q1 varssub_term_wa([var|_], [Ad1,Q1], Instances1),findall(X0,(member([_Add1,[var,T2,R2,C2,IN2,X|_]],Instances1),number1(X,X0)),X1),remove_dups(X1,X2),findall([X3,VN],(member(X3,X2),get_variable_n(VN)),VT),findall(X,(member([X3,VN],VT),member([Add,[var,T2,R2,C2,IN2,X3|_]],Instances1),X=[Add,[var,T2,R2,C2,IN2,X3,VN,[],[],[],[]]]),X4),test_p(foldr(put_sub_term_wa_ae,X4,[Ad1,Q1],[Ad2,Q2])),% give all same vals matching these vals in a1 these varssub_term_wa([var|_], A1, Instances2),%trace,findall(X,(member([X3,VN],VT),member([Add,[var,T2,R2,C2,IN2,X3|_]],Instances2),X=[Add,[var,T2,R2,C2,IN2,X3,VN,[],[],[],[]]]),X41),test_p(foldr(put_sub_term_wa_ae,X41,A1,A21)),%trace,%test_r([Ad1,Q1],[Ad2,Q2]),%test_r(A1,A21),/*sub_term_wa([function,_,_,_,_,_], [Ad1,Q1], Instances1),% A = [[[1, 1], [a, b]], [[1, 2], [a, c]]].
% numbers may be -x vfind_formulas(Ad1,Q1,A1,Ad2,Q2,A2) :-writeln1(find_formulas(Ad1,Q1,A1,Ad2,Q2,A2)),trace,% replace one whole word with 1 etc v% % if first instance of a number in (ad1,q1), changes it to a non function and refers to eg rows 1-n from sol a (finds patterns in output tables) if only instance% ba ba from ab ab x summarises formulas as spans eg $98 400 / 1.10^1 + $86 300 / 1.10^2 , n=to all similar row heads (or different*) - tell row heads are similar if have same text% asks which value when multiple or chooses% references value by search query (wo connectives) if not in curr table% saves manual program formulas in Prolog file% later, calculates formulas% qual concs with prolog and type 3 formulas entered into model file (err on a particular function)retractall(variable_n(_)),assertz(variable_n(1)),sub_term_wa([function,_,_,_,_,_], [Ad1,Q1], Instances1),% A = [[[1, 1], [a, b]], [[1, 2], [a, c]]].
% numbers(35,1,[],N),findall([N1,T3,"\n"],(member(N1,N),test_open_types_cases(N1,_,T,M,F),findall(TC,(member(T0,T),T0=[TA,TB],simplify_types(TB,[],T1),expand_types(T1,[],T2),(TB=T2->TC=y;TC=[TB,T2])),T3)),T4),writeln1(T4).
% numbers(35,1,[],N),findall([N1,T3,"\n"],(member(N1,N),test_open_types_cases(N1,_,T,M,F),findall(TC,(member(T0,T),T0=[TA,TB],simplify_types(TB,[],T1),pft_expand_types(T1,[],T2),(TB=T2->TC=y;TC=[TB,T2])),T3)),T4),writeln1(T4).
% numbers(68,1,[],N),findall([N1,T3,"\n"],(member(N1,N),test_types_cases(N1,_,T,M,F,_),findall(TC,(member(T0,T),T0=[TA,TB],simplify_types(TB,[],T1),expand_types(T1,[],T2),(TB=T2->TC=y;TC=[TB,T2])),T3)),T4),writeln1(T4).
% numbers(68,1,[],N),findall([N1,T3,"\n"],(member(N1,N),test_types_cases(N1,_,T,M,F,_),findall(TC,(member(T0,T),T0=[TA,TB],simplify_types(TB,[],T1),pft_expand_types(T1,[],T2),(TB=T2->TC=y;TC=[TB,T2])),T3)),T4),writeln1(T4).
% observations_to_reality(like,A).observations_to_reality(A,A).
% ocr1(T).
% older(A,B)% means A is older than B%older(GG) :-findall([A,B],year_of_birth(A,B),C),findall([A1,B1],(member([A1, Y1],C),member([B1, Y2],C), Y2 > Y1),GG),!.
% one_fill("           ",Ones1).
% ontol_conn("A-B",[["A-B",["B","C"]],["B",[]],["C",["D"]],["D",[]]],Alg).% Alg = ["A-B", "B", "C", "D"].% ontol_conn(cake,[[cake,[water,batter]],[water,[]],[batter,[flour]],[flour,[]]],Alg).
% ontol_conn("a:-b.",[["a:-b.",["b:-c."]],["b:-c.",["d."]],["d.",[]]],Alg).% Alg = ["a:-b.", "b:-c.", "d."].ontol_conn(A,Tree,Alg3):- findall(Alg,path1(A,A,Tree,[],Alg),Alg1), flatten(Alg1,Alg2), list_to_set(Alg2,Alg3).
% ontol_conn(a,[[a,[b,c]],[b,[]],[c,[d]],[d,[]]],Alg).% Alg = [a, b, c, d].% ontol_conn(w,[[w,[x,y]],[x,[]],[y,[z]],[z,[]]],Alg).
% ontol_conn(john,[[john,[mary,sue]],[mary,[]],[sue,[david]],[david,[]]],Alg).
% ontology_connection(a,b,all,[[all,[e,f]],[f,[a]],[e,[]],[all,[b]]],C).
% open_not_between(1,6,5).
% out of order items% also need geode (no repeating lists) detector% after writing these two predicates, can delete previous two gen_alg predicates% x don't need these two predicates, just run gen alg false for needed predicates, in accordance with above/*same_items([[t,list],[[_,_,_,2],[[t,list],[[_,_,_,1]]]]],[[t,list],[[[t,list],[[_,_,_,1]]],[_,_,_,2]]]).                                            true.
% output:% [" For example  for an input using similar yet different enough phrases"" for the algorithm"," Also, she writer can find the complete set of non-synonymous words that take turns with a word"]%:- include('../listprologinterpreter/listprolog').
% overtake([3,4,5,7,6],6,4,Result).
% p("* **  ** ",PS).                                                  % PS = [1, 3, 7].p(String,PS) :- string_codes(String,String2), split_on_substring117(String2,` `,[],List1), p2(List1,1,[],PS).
% paraphraser("the company contained the person",B).
% passed(50,100,R).% R = 'P'.
% passes with occurs_check(on).
% pf_types1(As,D),pf_types(As,D,A),writeln1(A).
% physiological_time(T).
% point second in pair to changed first statemerge_lists_a5(_N2,_N3,[],Options1,Options1,Options2,Options2) :- !.
% popular_links([[1,2],[1,3],[1,4],[2,5],[3,5],[4,6],[5,7],[6,7]],Trail).
% pregnancy_meditation(Result).
% pretty_print(sphere, dfs_pre_order).
% pretty_print_nd([[[1,2],[3,4]],[[1,2],[3,4]]]).
% print_heading("1.. 2... 3...",15,S).
% print_heading("EXCELLENT!",40,S).
% print_heading("Lucian Green",18,S).
% printer("a b c de",20,J).
% put_item_ns([a,b,c,b],[[2,d],[4,e]],F).
% race against itself for pb, ave:-include('../listprologinterpreter/listprolog.pl').
% race(PB,Ave).
% reach end%reach_end(5).
% remove " if string, leave as atom if atomstring_atom4(String,Atom) :- %trace,((atom(String)->(%string_atom(Atom,String),!.
% remove_and_find_item_number([a,b,c],2,c,N2).
% repeat_until_the_same(A,1,(random(X),C is floor(3*X),writeln(C)),C).
% repeat_until_the_same(A=1,A,B is A+1,B,C).
% replace brackets with lists% if bottom level (non brackets) test% perhaps replace upper parts of alg with this% x test and return repeating lists, not % find_lists3(Heads1,Heads,Heads) :- maplist(is_empty_list,Heads1),!.
% replace words within entire words, after breaking by white space%/*%replace1([case_sensitive],"AbCdBcD","bC","Bc",B).
% report1(Ts).
% reverse2("abc",B).
% rhetoric1([as,2,is,to,4,5,is,to,D]).
% rhetoric1([as,2,is,to,5,C,is,to,10]).
% rhetoric2([[a,[1,2]],[b,[1,2]],[c,[2]]],c,a,c,D).% D = a ;% D = b ;% rhetoric2([[a,[1,2]],[b,[1,2]],[c,[2]]],A,a,c,b).
% rot_n("good watermelon",1,A),rot_n(A,-1,B).
% rot_n("happy apples",1,A),rot_n(A,-1,B).
% s([i,raked,the,lawn,with,the,rake],O).
% s([i,watered,the,garden,while,walking,along,the,path],O).
% save value in function, repeat substitutions until same% if [calculate,_] replaces with resultfind_at_header(_MA_header,[],MACL,%_MACL1,Col_header_at,Col_header_at%,Formula_T,%Formula_R,%Formula_C,Formula_I) :- !.
% search("a b","a").
% search_for_n_words_in_common_succ("a","cb",A).
% search_for_term_n("a b c",["a","b"],C).
% search_for_term_n("a b c",["a","b"],C).% C = ["a", "b"].
% search_whole_string("abcd","BA").
% search_whole_string("abcd","BA").% false.
% search_whole_string("abcd","BC").
% server(8000).
% set alarms from a date, recurring (every n minutes, hours, days, months or years), a number of timesset_alarm(["from",Y,Mo,D,H,Mi,S,SS],["recurring every",N,Units],[M,"times"],Alarms) :- date_time_stamp(date(Y,Mo,D,H,Mi,S,SS,-,-),From_date), M3 is M-1, numbers(M3,0,[],M1), (Units = "second" -> (N<1-> (S2 is 0+N, date_time_stamp(date(Y,Mo,D,H,Mi,S,S2,-,-),From_date2) ) ; (N>=1-> (S2 is 0+S, date_time_stamp(date(Y,Mo,D,H,Mi,S2,SS,-,-),From_date2) ))) ; (Units = "minute" -> (Mi3 is Mi+N, date_time_stamp(date(Y,Mo,D,H,Mi3,S,SS,-,-),From_date2) ) ; (Units = "hour" -> (H3 is H+N, date_time_stamp(date(Y,Mo,D,H3,Mi,S,SS,-,-),From_date2) ) ; (Units = "day" -> (D3 is D+N, date_time_stamp(date(Y,Mo,D3,H,Mi,S,SS,-,-),From_date2) ) ; (Units = "month" -> (Mo3 is Mo+N, date_time_stamp(date(Y,Mo3,D,H,Mi,S,SS,-,-),From_date2) ) ; (Units = "year" -> (Y3 is Y+N, date_time_stamp(date(Y3,Mo,D,H,Mi,S,SS,-,-),From_date2) ) )))))),  Stamp_d is From_date2-From_date, findall([Y2,Mo2,D2,H2,Mi2,S12,S22],(member(M2,M1),D is M2*Stamp_d, Stamp2 is From_date+D, stamp_date_time(Stamp2,date(Y2,Mo2,D2,H2,Mi2,S12,S22,_,_),local) ),Alarms).
% side_determiner([1,1,2,3,4,1],Ave).
% sides([["a",[["p",1],["q",0],["r",1]]],["b",[["p",1],["q",1],["r",1]]]],"p",Report),writeln(Report).% Report = [["a", 1], ["b", 1]].
% similar to test 56%test(244,[[n,foldl1],[[n,add],[1,2,3],0,[v,d]]],%test(244,[[n,var],[[v,a]]],%test(244,[[n,string_chars1],[[v,a],[v,d]]],%test(244,[[n,string_concat1],["a","",[v,d]]],%test(244,[[n,append1],[[a],[],[v,d]]],%test(244,[[n,string_chars1],["ab",[v,d]]],test(244,[[n,foldl1],[[n,stringconcata1],["a","b"],"",[v,d]]],%test(244,[[n,foldl1],[[n,add],[1,2,3],0,[v,d]]],[        [[n,foldl1],[[v,f],[],[v,l],[v,l]],":-",[[[n,cut]]]],        [[n,foldl1],[[v,f],[[v,h],"|",[v,t]],[v,m1],[v,na]],":-",        [       [[v,f],[[v,m1],[v,h],[v,m2]]],                [[n,foldl1],[[v,f],[v,t],[v,m2],[v,na]]]        ]        ],        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]        ],        [[n,stringconcata1],[[v,a],[v,b],[v,c]],":-",[[[n,"->"],[[[n,"->"],[[[[n,var],[[v,a]]],[[n,not],[[[n,var],[[v,b]]]]],[[n,var],[[v,c]]]],[[n,true]],[[[[n,not],[[[n,var],[[v,a]]]]],[[n,var],[[v,b]]],[[n,var],[[v,c]]]]]]],[[n,fail]],[[[n,stringchars1],[[v,a],[v,a1]]],[[n,stringchars1],[[v,b],[v,b1]]],[[n,stringchars1],[[v,c],[v,c1]]],%[[n,writeln],[[v,c1]]],%[[n,trace2]],[[n,appenda1],[[v,a1],[v,b1],[v,c1]]],[[n,stringchars1],[[v,a],[v,a1]]],[[n,stringchars1],[[v,b],[v,b1]]],[[n,stringchars1],[[v,c],[v,c1]]]]]]]],[[n,stringchars1],[[v,a],[v,b]],":-",[[[n,"->"],[[[[n,var],[[v,a]]],[[n,var],[[v,b]]]],[[n,true]],[[n,string_chars],[[v,a],[v,b]]]]]]],%[[n,stringchars1],[[v,a],[v,b]],":-",%[%[[n,stringchars],[[v,a],[v,b]]]%]],[[n,appenda1],[[],[v,a],[v,a]]],[[n,appenda1],[[[v,a],"|",[v,d]],[v,b],[[v,a],"|",[v,c]]],":-",[[[n,appenda1],[[v,d],[v,b],[v,c]]]]]]%,[[[[v,d], 6]]]).%,[[]]).%,[[]]).%,[[[[v,d], "a"]]]).
% simple_caw0(plus,[[[n,+],2,1]],[],[[[v,a],1],[[v,b],1]],[[[v,c],2]],[],P),writeln1(P).
% simple_caw0(plus,[[[n,+],2,1]],[],[[[v,a],1],[[v,b],1]],[[[v,c],2]],[],P),writeln1(P).% P = [[[n,plus],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,a],[v,c]]]]]]:-include('../listprologinterpreter/listprolog.pl').
% simple_caw0(reverse,[[[n,reverse],2,1]],[[[n,reverse],[[],[v,a],[v,a]]]],[[[v,c],[2,3]],[[v,f],[1]]],[[[v,g],[3,2,1]]],[[[n,head],[[v,a],[v,b]]],[[n,tail],[[v,a],[v,c]]],[[n,wrap],[[v,b],[v,d]]],[[n,append],[[v,d],[v,e],[v,f]]]],P). x% simple_caw0(reverse,[[[n,reverse],4,1]],[[[n,reverse],[[],[v,a],[v,c],[v,b],[v,a]]]],[[[v,a],[1,2,3]],[[v,b],[]],[[v,c],[2,3]] x only has 1 output,[[v,f],[1]]],[[[v,g],[3,2,1]]],[[[n,head],[[v,a],[v,b]]],[[n,tail],[[v,a],[v,c]]],[[n,wrap],[[v,b],[v,d]]],[[n,append],[[v,d],[v,e],[v,f]]]],P).
% simulation(20,20,5,20,Simulation,Meetings,1,2).
% single values and rowstd_underline(String10,H) :-get_formula_value(String10,String1),atomic_list_concat(S2,'\n',String1),atomic_list_concat(S2,'<br>',String),((search_and_replace(String,"<single underline>","",R),string_concat("<td class=\"single_underline\">",R,H))->true;((search_and_replace(String,"<double underline>","",R),string_concat("<td class=\"double_underline\">",R,H))->true;(string_concat("<td>",String,H)))),!.
% song_writer(Lyrics),writeln(Lyrics).
% sort1([5,4,3,2,1],[],A).
% spec_to_algorithm([[['A',[1,3]]],[['B',[1,2]]]],A)% A = % Spec = [[nd,[1,2]],[nd,[3,4]]]% => Spec [f1,f2]% don't have ^^ x need for strings% error checkingspec_to_algorithm(Predicate_name,S0,CBM,Alg) :-%retractall(san_no_rs(_)),%assertz(san_no_rs(false)),retractall(single_results(_)),assertz(single_results([])),retractall(character_breakdown_mode(_)),assertz(character_breakdown_mode(CBM)),retractall(optional_s2g(_)),assertz(optional_s2g(off)),retractall(num_s2a(_)),assertz(num_s2a(1)),retractall(vars_s2a(_)),assertz(vars_s2a([])),retractall(vars_base_s2a(_)),assertz(vars_base_s2a('A')),retractall(vars_table_s2a(_)),assertz(vars_table_s2a([])),%retractall(ampersand_var_n_s2a(_)),%assertz(ampersand_var_n_s2a(1)),% find recursive structures in each spec% find constants, unique variables across specs% - at same time as finding recursive structures%   because need to check whether are constants,%   unique variables x uv before, c after%   (same value across specs)% * change input term - leave as is%trace,%findall(RS2,(member(S1,S),%find_unique_variables(S1,UV),%trace,%trace,findall(T1,(member([[input,In2],[output,Out2]],S0),findall([A000,[A00]],member([A000,A00],In2),%trace,%remove_first_and_last_items(A00,A01)),%A00=["[",A01,"]"])In24),findall([A000,[A00]],member([A000,A00],Out2),%remove_first_and_last_items(A00,A01)),%=["[",A01,"]"])Out24),foldr(append,[[[input,In24]],[[output,Out24]]],T1)),S),findall([[input,Input1],[output,Output1]],(member([[input,Input],[output,Output]],S),findall([S10,RS],(member([S10,S11],Input),%(string(S11)->string_strings(S11,S12);S11=S12),%trace,%length(S11,S11L),%(S11L=1->true;(writeln(["Error: Variable",S10,"doesn't have length one."]),abort)),%trace,characterise1(S11,S12),%trace,strings_atoms_numbers(S12,S13,rs=on),term_to_brackets(S13,S14,split=on),find_lists3b(S14,RS)),Input1),findall([S10,RS],(member([S10,S11],Output),%length(S11,S11L),%(S11L=1->true;(writeln(["Error: Variable",S10,"doesn't have length one."]),abort)),%(string(S11)->string_strings(S11,S12);S11=S12),characterise1(S11,S12),strings_atoms_numbers(S12,S13,rs=off),term_to_brackets(S13,S14,split=off),%find_lists3b(S14,RS)S14=RS),Output1)%change_var_base%),RS2)),RS10),/*findall(RS2,(member(S1,OS),%find_unique_variables(S1,UV),findall([S10,RS],(member([S10,S11],S1),(string(S11)->string_strings(S11,S12);S11=S12),find_lists3b(S12,RS)),RS2)%change_var_base),ORS10),*/%findall(RS2,(member(S1,S),%find_unique_variables(S1,UV),%trace,(character_breakdown_mode(off)->findall([[input,Input1],[output,Output1]],(member([[input,Input],[output,Output]],S),%find_unique_variables(Input,UV),findall([UV1,RS],(member([UV1,UV2],Input),%(string(UV2)->string_strings(UV2,UV3);UV2=UV3),characterise1(UV2,UV3),strings_atoms_numbers(UV3,UV31,rs=on),term_to_brackets(UV31,UV4,split=on),find_lists3b(UV4,RS)),Input1),%find_unique_variables(Output,UVo),findall([UV1,RS],(member([UV1,UV2],Output),%(string(UV2)->string_strings(UV2,UV3);UV2=UV3),characterise1(UV2,UV3),strings_atoms_numbers(UV3,UV31,rs=off),term_to_brackets(UV31,UV4,split=off),%find_lists3b(UV4,RS)UV4=RS),Output1)%change_var_base%),RS2),),RS1);findall([[input,Input1],[output,Output1]],(member([[input,Input],[output,Output]],S),%find_unique_variables(Input,UV),findall([UV1,RS],(member([UV1,UV2],Input),%(string(UV2)->string_strings(UV2,UV3);UV2=UV3),characterise1(UV2,UV3),strings_atoms_numbers(UV3,UV32,rs=on),%find_unique_variables(UV31,UV32),term_to_brackets(UV32,UV4,split=on),find_lists3b(UV4,RS)),Input1),%find_unique_variables(Output,UVo),findall([UV1,RS],(member([UV1,UV2],Output),%(string(UV2)->string_strings(UV2,UV3);UV2=UV3),characterise1(UV2,UV3),strings_atoms_numbers(UV3,UV32,rs=off),%find_unique_variables(UV31,UV32),term_to_brackets(UV32,UV4,split=off),%find_lists3b(UV4,RS)UV4=RS),Output1)%change_var_base%),RS2),),RS1)),/*findall(RS2,(member(S1,OS),find_unique_variables(S1,UV),findall([UV1,RS],(member([UV1,UV2],UV),(string(UV2)->string_string(UV2,UV3);UV2=UV3),find_lists3b(UV3,RS)),RS2)%change_var_base),ORS1),*/%trace,% * match specs with same shape x% - with same non ro addresses% find c, % then dec tree xxx% x:% nd i - collects if this format% nd o - x, det by i format x% Separate by output shape%findall%find output shapes% same output shape - has same terminal positions%trace,length(RS10,RS10L),numbers(RS10L,1,[],Ns),%*RS1%trace,findall([Adds,[[input,Input_a],[output,Output_a]],[[input,Input_a_rs],[output,Output_a_rs]]],(member(N,Ns),get_item_n(RS10,N,[[input,Input_a],[output,Output_a]]),get_item_n(RS1,N,[[input,Input_a_rs],[output,Output_a_rs]]),sub_term_types_wa([heuristic(var_or_data(A),A)%string,atom,number],Output_a,Inst1),findall(A,member([A,_],Inst1),Adds)),Adds1),findall(A,member([A,_,_],Adds1),Adds2),%trace,sort(Adds2,Adds3),findall(A1,(member(Adds4,Adds3),findall([A,B],member([Adds4,A,B],Adds1),A1)),A11),%trace,findall(A110,(member(A2,A11),findall([Adds,[[input,Input_a],[output,Output_a]],[[input,Input_a_rs],[output,Output_a_rs]]],(member([[[input,Input_a],[output,Output_a]],[[input,Input_a_rs],[output,Output_a_rs]]],A2),sub_term_types_wa([heuristic(var_or_data(A),A)%string,atom,number],Input_a,Inst10),findall(A,member([A,_],Inst10),Adds)),Adds10),findall(A,member([A,_,_],Adds10),Adds20),sort(Adds20,Adds30),findall(A1,(member(Adds40,Adds30),findall([A,B],member([Adds40,A,B],Adds10),A1)),A110)),Separated_by_shape),%foldr(append,A10,Separated_by_shape),%foldr(append,Separated_by_shape1,Separated_by_shape2),%foldr(append,Separated_by_shape2,Separated_by_shape3),%foldr(append,Separated_by_shape1,Separated_by_shape),%trace,findall(RSC4,(member(A,Separated_by_shape),findall(RSC,(member(B,A),findall([[Input_a,Input_b],[Output_a,Output_b]%IOa,IOb],(member([RS101,RS11],B),%findall(RSC,(member([RS101,RS11],Separated_by_shape),%findall(RSC,(member(B%[_RS101,RS11]%,A),%length(RS101,RS101L),%numbers(RS101L,1,[],Ns1),%findall([IOa,IOb]%[[input,Input_c],[output,Output_d]]%,(member([[input,Input_b],[output,Output_b]],A),%,(member(N1,Ns1),get_item_n(RS101,N1,RS101=[[input,Input_a],[output,Output_a]],%),%get_item_n(RS11,N1,RS11=[[input,Input_b],[output,Output_b]]%),%member([[input,Input],[output,Output]],S),%length(Input_a,Input_a_L),%length(Input_c,Input_a_L),%append(Input_a,Output_a,IOa),%append(Input_b,Output_b,IOb)),IOaIOb),%trace,% if Is are same, and different Os, make separate calls to find_constantsfindall(XY1,member([XY1,_],IOaIOb),XY2),remove_dups(XY2,XY3),%trace,%writeln1([iOaIOb,IOaIOb]),% if XY1s are same, splitfindall(XW6,(member(XW2,XY3),findall([XW2,XW4],member([XW2,XW4],IOaIOb),XW6)),XY8),%trace,%writeln1([xy8,XY8]),findall(XZ1,(member(XZ1,XY8),%member(XZ3,XZ1),XZ3=[XZ2,_],length(XZ1,XZ1L),%writeln([l1,XZ1L]),%findall(XZ61,(member(XZ6,XZ1),length(XZ6,XZ6L),writeln([l2,XZ6L]),findall(XZ8,(member(XZ8,XZ6),%length(XZ8,XZ9),writeln([l3,XZ9]),XZ1L=1),%XZ61)),XZ7)%)%,XZ2),subtract(XY8,XZ7,XZ3),foldr(append,XZ3,XZ31),%trace,findall([XZ8],member(XZ8,XZ31),XZ9),foldr(append,XZ7,XZ4),(XZ4=[]->XZ5=[];XZ5=[XZ4]),append(XZ9,XZ5,XY9),%findall(XY28,(member(XY21,XY3),findall(XY22,member([XY21,XY22],IOaIOb),XY23),remove_dups(XY23,XY24),findall([XY211,XY221],(member(XY221,XY24),member([XY211,XY221],IOaIOb)),XY231),findall(XY232,(member(XY26,XY24),findall([XY27,XY26],member([XY27,XY26],XY231),XY232)),XY28)),XY81),%foldr(append,XY81,XY82),%remove_dups(XY82,XY8),%trace,%/*/*nl,findall(XZ7,(member(XZ1,XY8),length(XZ1,XZ1L),writeln([l1,XZ1L]),findall(XZ61,(member(XZ6,XZ1),length(XZ6,XZ6L),writeln([l2,XZ6L]),findall(XZ8,(member(XZ8,XZ6),length(XZ8,XZ9),writeln([l3,XZ9]),XZ9=1),XZ61)),XZ7)),XZ2),subtract(XY8,XZ2,XZ3),foldr(append,XZ2,XZ4),(XZ4=[]->XZ5=[];XZ5=[XZ4]),append(XZ3,XZ5,XY9),*/%*//*[]))findall(%[XY51,XY61]%XY7,(member(XY5,XY3),findall([XY5,XY6],member([XY5,XY6],IOaIOb)%,remove_dups(XY5,XY51),remove_dups(XY6,XY61)%,XY7)),XY8),*//*findall([XY51,XY61]%XY7,(%member(XY5,XY3),%findall([XY5,XY6],member([XY5,XY6],IOaIOb),remove_dups(XY5,XY51),remove_dups(XY6,XY61)%XY7)),XY8),*/%trace,%remove_dups(XY8,XY81),%trace,findall(XY15,(member(XY10,XY9),findall([XY11_XY13,XY12_XY14],(member([[XY11,XY12],[XY13,XY14]],XY10),append(XY11,XY13,XY11_XY13),append(XY12,XY14,XY12_XY14)),XY15)%trace,remove_dups(XY15,XY151)),XY16),%sort(XY16,XY161),%trace,findall(RSC3,(member(XY19,XY16),%member(XY19,XY18),findall(A0,member([A0,_],XY19),Data),findall(A0,member([_,A0],XY19),Vars3),%trace,remove_dups(Data,Data1),remove_dups(Vars3,Vars31),find_constants(Data1,Vars31,RSC_a),RS10=[[[input,Input_a],[output,Output_a]]|_],length(Input_a,Input_a_L),length(Input_c,Input_a_L),append(Input_c,Output_d,%RSC_a)),RSC_a),RSC3=[[input,Input_c],[output,Output_d]]),RSC)),RSC41),foldr(append,RSC41,RSC4)),RSC1),%foldr(append,RSC1,RSC2),%find_constants(RS10,RS1,RSC),%find_constants(ORS10,ORS1,ORSC),/*length(RSC,RSCL),numbers(RSCL,1,[],Ns),%trace,findall([X1,T22],(member(N,Ns),get_item_n(RSC,N,[X1,X2]),findall(T2,(member(X3,RS10),member([X1,X21],X3),rs_and_data_to_term(X2,X21,_,[],T2)),T21),decision_tree_s2(T21,T22)),T3),*/%trace,foldr(append,RSC1,RSC51),findall(T1,(member([[input,In2],[output,Out2]],RSC51),findall([A000,A01],(member([A000,A00],In2),%trace,remove_first_and_last_brackets(A00,A01)),%A00=["[",A01,"]"])In24),findall([A000,A01],(member([A000,A00],Out2),remove_first_and_last_brackets(A00,A01)),%=["[",A01,"]"])Out24),foldr(append,[[[input,In24]],[[output,Out24]]],T1)),RSC5),findall(DT1,(member([[input,In2],[output,Out2]],RSC5),%trace,(not(is_list(In2))->In2=In24;(%trace,findall(A00,member([_,A00],In2),In24))),(not(is_list(Out2))->Out2=Out24;(%trace,findall(A00,member([_,A00],Out2),Out24))),foldr(append,[In24,[[output,Out24]]],DT1)),C6),%double_to_single_brackets(C6,C8),decision_tree_s2(C6,In_Out24),%double_to_single_brackets(C8,In_Out24),%trim_brackets(In_Out241,In_Out24,_),%trace,findall(C5,(member([[input,In2],[output,Out2]],RSC5),findall(A00,member([_,A00],In2),In24),findall(A00,member([_,A00],Out2),Out24),%DT1=[In24,Out24],double_to_single_brackets(In24,In25),double_to_single_brackets(Out24,Out25),find_mapping(In25,Out25,C5)),C61),foldr(append,C61,Map),%trace,%remove_dups(Map2,Map),%decision_tree_s2(C6,C7),/*RSC1=[[[[input,In1],[output,Out1]]|_]|_],length(In1,In1L),numbers(In1L,1,[],In1_Ns),length(Out1,Out1L),numbers(Out1L,1,[],Out1_Ns),findall(A00,member([A00,_],In1),_In1VNs),findall(A00,member([A00,_],Out1),_Out1VNs),findall(In232,%[In23,Out23],(member(RSC2,RSC1),findall(In222,(member(N,In1_Ns),findall(In21,(member([[input,In2],[output,Out2]],RSC2),get_item_n(In2,N,[VN,In21])),In22),decision_tree_s2(In22,In223),foldr(append,In223,In2223),In222=In2223%[var,In2223]),In232)),In23),%foldr(append,In231,In23),%trace,double_to_single_brackets(In234,In23),findall(Out232,%[In23,Out23],(member(RSC2,RSC1),findall(Out222,(member(N,Out1_Ns),findall(Out21,(member([_,[output,Out2]],RSC2),get_item_n(Out2,N,[VN,Out21])),Out22),decision_tree_s2(Out22,Out223),foldr(append,Out223,Out222)%,Out224=[output,Out222]),Out232)),Out23),%foldr(append,Out231,Out23),%),In_Out23),%double_to_single_brackets(Out234,Out23),%trace,%findall(A01,(member(A02,)))length(In23,In23L),numbers(In23L,1,[],In23LNs),%trace,findall([In231,[output,Out231]],(member(In23LN,In23LNs),get_item_n(In23,In23LN,In231),get_item_n(Out23,In23LN,Out231)),In_Out23),%foldr(append,In_Out23,In_Out231),%trace,decision_tree_s2(In_Out23,In_Out241),*/%T3=[[input,In_DTs],[output,Out_DTs]],%findall([Input,Output],(member([[input,Input],[output,Output]],RSC),%T3=RS10,term_to_atom(In_Out24,T31),%term_to_atom(In23,T31),%term_to_atom(T3,T31),%term_to_atom(Out23,ORSC1),%term_to_atom(In_DTs,T31),%term_to_atom(ORSC,ORSC1),%double_to_single_brackets(In23,In233),%double_to_single_brackets(Out23,Out233),%find_mapping(In233,Out233,Map),term_to_atom(Map,Map1),%find_mapping(T3,ORSC,Map),%writeln1([rSC,RSC,"\n",oRSC,ORSC,"\n",rS10,RS10,"\n",oRS10,ORS10,"\n",t3,T3]),% take input and mapping and produce outputfoldr(string_concat,[Predicate_name,"(In_vars,Out_var) :-\nalgorithm(",T31,",",Map1,",In_vars,Out_var)."],Alg),term_to_atom(Alg1,Alg),%save_file_s("algorithm.pl",Alg),%trace,assertz(Alg1),algs(Algs),append(Algs,[Alg1],Algs1),retractall(algs(_)),assertz(algs(Algs1)),findall(_,%(member(Spec,S),%findall([A1,","](member([[input,In4],[output,Out4]],S0),retractall(vars_table_s2a(_)),assertz(vars_table_s2a([])),findall(A1,member([_,A1],In4)%,%term_to_atom%term_to_brackets(A,A1),A30),%foldr(append,A2,A3a),append(A3,[_],A3a),%term_to_brackets(A30,A3),term_to_atom(A30,A4),%findall(A1,(member([_,A],Out4),%term_to_atomterm_to_brackets(A,A1,split=off)),A310),%foldr(append,A21,A31a),append(A31,[_],A31a),%term_to_brackets(A310,A31),term_to_atom(A310,A41),%foldr(string_concat,A3,A4b),%trace,foldr(string_concat,[Predicate_name,"(",A4,",Out),",A41,"=Out."],Str2),term_to_atom(Term2,Str2),%trace,(Term2->writeln(success);writeln(fail))),_).
% split_on_substring117a("AAABAAD","BD",A).
% split_on_substring117a("AAABAAD","BD",[],A).
% ssi_test(NTotal3,Query,Functions,Result)% ssi_test_types_cases(NTotal3,Query,Types,Modes,Functions,Result)% ssi_testopen_cases(N,   Query,Functions)% ssi_test_open_types(NTotal3,Query,Types,Modes,Functions)%% ssi_test_all_bt00("en2",off,NTotal,Score).ssi_test_all_bt00(Lang,Debug,NTotal,Score) :-retractall(lang(_)),assertz(lang(Lang)),ssi_test_all_bt0(test,4,Lang,Debug,NT1,S1),writeln0([ssi_verify4,S1,/,NT1,passed]),writeln0(""),writeln0(""),ssi_test_all_bt0(test_types_cases,6,Lang,Debug,NT2,S2),writeln0([ssi_verify4_types,S2,/,NT2,passed]),writeln0(""),writeln0(""),ssi_test_all_bt0(testopen_cases,3,Lang,Debug,NT3,S3),writeln0([ssi_verify4_open,S3,/,NT3,passed]),writeln0(""),writeln0(""),ssi_test_all_bt0(test_open_types_cases,5,Lang,Debug,NT4,S4),writeln0([ssi_verify4_open_types,S4,/,NT4,passed]),writeln0(""),writeln0(""),NTotal is NT1+NT2+NT3+NT4,Score is S1+S2+S3+S4.
% start with 1g memoryya_phil_to_alg :-folders(Courses1),%random_member(Course,Courses1),%get_texts(Dept,Texts) :-findall(Texts1,(member(Dept,Courses1),concat_list(["../Lucian-Academy/",Dept,"/"],Dept1),directory_files(Dept1,F),delete_invisibles_etc(F,G),findall(String02b,(member(Filex1,G),string_concat(Dept1,Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a)),Texts1)),Texts2),flatten(Texts2,Texts3),term_to_atom(Texts3,Texts4),split_string(Texts4,"\n\r","\n\r",Texts5),findall([Text6,Alg],(member(Text6,Texts5),mr_alg(Alg)),Algs1),flatten(Algs1,Algs2),term_to_atom(Algs2,Algs3),%string_atom(Algs,Algs),(open_s("yet_more_phil_algs.txt",write,Stream3),write(Stream3,Algs3),close(Stream3)),!.
% string_to_pbm("ab\nac\nad",5,5,"a.pbm").
% stringconcat-> in both algs above%concatenate strings v% membre 2->member2get_en_lang_word(Input,Output) :-%% error if word not foundlang(Lang),lang_db(Lang_db),(Lang="en"->%Input=Output1,atom_string(Input,Output);((%(%((Input="member2"->trace;true),%split_on_number(Input,Input1,Input10),member([Output1,_Input101,Lang,Input],Lang_db),%atom_string(Output=Output1)->true;%notrace,%(%Input10="" -> Output=Output2;%concat_list([Output2," ",Input10],Output))) -> true;(concat_list(["Error: Word: ",Input," not in Language: ",Lang," in lang_db."],_Notification1)%,writeln(Notification1),fail))),%Output=Output1,!.
% substitute - for : for string concatpf_types(Algorithms,Data,Algorithm) :- writeln("1 - reverse, 2 - identity, 3 - string concat:"), read_string(user_input,"\n","\r",_,S), (S="1"-> (member([reverse,Algorithm],Algorithms), C=[[reverse, [(c:d):e, f],  (f:(c:d):e)], [reverse, [c:d, e],  e:(c:d)], [reverse, [c, d], d:c]], reverse(C,D), findall(y,(member([Command, Inputs, Outputs],D), ((Command=reverse,Inputs=[A,B],Outputs=B:A, interpret(off,[[n,a],[["a","b"],[],[v,a]]],Algorithm,Result),Result=[[[[v,a],["b","a"]]]])->true;false)),Y),not(Y=[]));  (S="2"->  (induct01(Data,_,[],C),reverse(C,D), member([identity,Algorithm],Algorithms), findall(y,(member([Command, Inputs, Outputs],D), ((Command=append,Inputs=[A,B],Outputs=A:B, interpret(off,[[n,a],[["a","b"],[],[v,a]]],Algorithm,Result),Result=[[[[v,a],["a","b"]]]])->true;false)),Y),not(Y=[]));  (S="3"->  (member([string_concat,Algorithm],Algorithms), C=[[string_concat, [(c-d)-e, f],  ((c-d)-e)-f], [string_concat, [c-d, e],  (c-d)-e], [string_concat, [c, d], c-d]], reverse(C,D), findall(y,(member([Command, Inputs, Outputs],D), ((Command=string_concat,Inputs=[A,B],Outputs=A-B, %lucianpl interpret(off,[[n,a],[["a","b"],"",[v,a]]],Algorithm,Result),Result=[[[[v,a],"ab"]]])->true;false)),Y),not(Y=[]))))).
% summarise_structure([a,[b,c,[d,[e]]]],[],[],R).
% summarise_structure([a,[b,c,[d,[e]]]],[a,e],[],R).                  % R = [b, c, [d]]% summarise_structure([a,[b,c,[d,[e]]]],[a,d],[],R).% R = [b, c, [e]]summarise_structure([],_D,R,R) :- !.summarise_structure([A|B],D,R1,R2) :- not(length(B,1)), (member(A,D)->R1=R3; append(R1,[A],R3)), summarise_structure(B,D,R3,R2),!.summarise_structure([A,B],D,R1,R2) :- (member(A,D)-> (summarise_structure(B,D,R1,R2)); (not(member(A,D))-> (append(R1,[A],R3), summarise_structure(B,D,[],R4), (R4=[]->R2=R3; append([R3,[R4]],R2))))).
% taste(cube,dfs_in_order,L).
% taste(cube,dfs_post_order,L).
% taste(cube,dfs_pre_order,L).% L = ["white", "yellow", "red", "blue", "green", "purple"].
% taste(sphere,dfs_in_order,L).
% taste(sphere,dfs_post_order,L).
% taste(sphere,dfs_pre_order,L).
% term_analyser([[[1,2],[3,[4,[5]]]]],A).% A=%term_analyser([],[n/a]) :-!.
% test(NTotal3,Query,Functions,Result)% test_types_cases(NTotal3,Query,Types,Modes,Functions,Result)% testopen_cases(N,   Query,Functions)% test_open_types(NTotal3,Query,Types,Modes,Functions)%% test_all00("en2",off,NTotal,Score).
% test(NTotal3,Query,Functions,Result)% test_types_cases(NTotal3,Query,Types,Modes,Functions,Result)% testopen_cases(N,   Query,Functions)% test_open_types(NTotal3,Query,Types,Modes,Functions)%% test_all_bt00("en2",off,NTotal,Score).
% test(NTotal3,Query,Functions,Result)% test_types_cases(NTotal3,Query,Types,Modes,Functions,Result)% testopen_cases(N,   Query,Functions)% test_open_types(NTotal3,Query,Types,Modes,Functions)%% test_all_bt00("en2",off,NTotal,Score).test_all_bt00(Lang,Debug,NTotal,Score) :-retractall(lang(_)),assertz(lang(Lang)),test_all_bt0(test,4,Lang,Debug,NT1,S1),writeln0([lpiverify4,S1,/,NT1,passed]),writeln0(""),writeln0(""),test_all_bt0(test_types_cases,6,Lang,Debug,NT2,S2),writeln0([lpiverify4_types,S2,/,NT2,passed]),writeln0(""),writeln0(""),test_all_bt0(testopen_cases,3,Lang,Debug,NT3,S3),writeln0([lpiverify4_open,S3,/,NT3,passed]),writeln0(""),writeln0(""),test_all_bt0(test_open_types_cases,5,Lang,Debug,NT4,S4),writeln0([lpiverify4_open_types,S4,/,NT4,passed]),writeln0(""),writeln0(""),NTotal is NT1+NT2+NT3+NT4,Score is S1+S2+S3+S4.
% test whether an alarm is today (or now x) (if it after the alarm time)test_alarm(["alarm",Y,Mo,D,H,Mi,S,SS]) :- get_time(Now), date_time_stamp(date(Y,Mo,D,H,Mi,S,SS,-,-),Alarm_stamp), (Alarm_stamp > Now -> writeln("Alarm has gone off.");true).
% test with t=w+1%translate1(Input,From_l,Target_language1,Output3) :-%concat_list([Input," ",From_l," ",Target_language1],Output3).
% test("A Peter ate an apple.").
% test("Apple walked the apple.").
% test1(off,1,A).
% tests whether person 1 has a link to person 2 over timemet_a_chain_member(_Meetings,Person0,Person,Person) :-  writeln(["Link between",Person0,"and",Person]),!.
% time_chart([[1,4,"a"],[2,6,"b"],[5,10,"c"]],Chart).
% to be is to have thoughts - find keywords in sent with keywords, etc. for PhD:-include('../listprologinterpreter/la_files.pl').
% to do% back-translation, on I not Obt1-p2lp_test(BL,RL) :-findall(A,(p2lp_test(N,I,_O),(p2lpconverter([string,I],O1),(lp2p1(O1,I2),(string_concat(I1,"\n",I2)->true;I1=I2),I=I1)->(writeln([bt1-p2lp_test,N,passed]),A=passed);(writeln([bt1-p2lp_test,N,failed]),A=failed))),B),length(B,BL),findall(_,member(passed,B),R),length(R,RL),!.
% top([4,5,7,3,2],Max).top(List,Max) :- sort(List,List2), append(_,[Max],List2),!. % He did this by driving someone up to the door in a tricycle.
% truer31(A,_,_,_) :-rhetoric3([A,[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]],[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]],[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]]]).
% try with single v, mult v items, mult sets v with prev, l=5,4, brackets of brackets with prevdata_to_types22([[1]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).                                                Sets2 = [[t, number, 1]].
% two_contact_points(S3),writeln(S3).
% types with a sentence% eg types_to_sentence([c1(atom, number), c2(atom), c3(number, string), c4(string, atom)],S).
% unpile([1,[2,3,[4]]],U).% U = [1,2,3,4]unpile(P,U) :- flatten(P,U).
% unzip_sort_zip([[2,6],[1,5],[3,4]],L).% L = [[1,4],[2,5],[3,6]]:-include('../../listprologinterpreter/la_maths.pl').unzip_sort_zip(A,B) :- findall(A1,member([A1,_],A),A2),sort(A2,A3),findall(B1,member([_,B1],A),B2),sort(B2,B3),length(A,L),numbers(L,1,[],N),findall([A4,B4],(member(N1,N),get_item_n(A3,N1,A4),get_item_n(B3,N1,B4)),B).
% update verifiers - notifies if an update is available%:- use_module(library(date)).
% update_verifier("luciangreen","a").
% use var values from elsewhere% check that recurring vars don't have conflicting vals%rs_and_data_to_term(A,B,C,D,E,_) :- rs_and_data_to_term(A,B,C,D,E).
% use(business,B).
% use_up([1,5,6,4],[1,5,7,8,9],Result).% Result = false% use_up([1,5,6,4],[1,5,6,8,4],Result).
% uses original text to form sentences about br% uses br dict to write alg% a b, a c and d c->d b% alg: bacd in one of forms 1(2..n), repeats, with prolog head% if an item is non word "right" or "plus" then it is an arg, otherwise a predicate name, although non-* can be a predicate name if no other optionbr_alg_gen(Raw,Chains,Algorithms) :- %phrase_from_file_s(string(File), "../Text-to-Breasonings/file.txt"), phrase_from_file_s(string(File), "../Text-to-Breasonings/file.txt"), string_codes(File_string0,File), downcase_atom(File_string0,File_string1), SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'\"0123456789", split_string(File_string1,SepandPad,SepandPad,File_string2),  % truncate file to N words Truncate_length=100, length(File_string2,L3), length(File_string2b,Truncate_length), (L3=<Truncate_length->File_string2=File_string2a; (append(File_string2b,_,File_string2),File_string2b=File_string2a)),  % delete connectives such as and, theopen_file_s("connectives.txt",Connectives),subtract(File_string2a,Connectives,Words1),% finds adjacent combos of wordslength(Words1,L1),L2 is L1-1,numbers(L2,1,[],N),findall([A,B],(member(N1,N),N2 is N1+1,get_item_n(Words1,N1,A),get_item_n(Words1,N2,B)),Words2),% finds suggestions for new combos of words, eg a b, a c and d c->d bsort(Words2,Words3),%trace,findall([F1,K1],(member([A,B],Words3),findall(E1,(member([A,C],Words3),findall([[D,B],[B,A,C,D]],member([D,C],Words3),E),%foldr(append,E,[],E1)E=E1),F),foldr(append,F,[],F1),findall(J1,(member([G,B],Words3),findall([[A,H],[A,B,G,H]],member([G,H],Words3),J),%foldr(append,J,[],J1)J=J1),K),foldr(append,K,[],K1)),L),%trace,% makes this a list of A,Bfoldr(append,L,[],LL1),foldr(append,LL1,[],Words4),%LL1=L,%maplist(append,[LL2],[Words4]),% remove duplicatessort(Words4,Words4b),%trace,% removes pairs with two of the same wordfindall([[A,B],R],(member([[A,B],R],Words4b),not(A=B)),Words4a),% removes word pairs already at startfindall([AB,R],(member([AB,R],Words4a),not(member(AB,Words3))),Raw),%subtract(Words4a,Words3,Raw),% find chainsfindall([[A,B,C],[[[D,E,F,G],[H,J,K,M]]]],(member([[A,B],[D,E,F,G]],Raw),member([[B,C],[H,J,K,M]],Raw),not(A=C)),Chains),phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),splitfurther(BrDict0,BrDict01),sort(BrDict01,BrDict03),%trace,findall([[A,B,C],[D,E,F,G,H,J,K,M],Alg],(member([[A,B,C],[[[D,E,F,G],[H,J,K,M]]]],Chains),words_to_alg([D,E,F,G,H,J,K,M],[],Alg,BrDict03)),Algorithms).
% v & x &process3(Input2,To_lang,String1,String2) :-Input2=[A,B|Rest],translate2(A,"en",To_lang,A1), % 1a,2%translate1a(C,"en",To_lang,C1),%C=C1,concat_list([String1,A1,B],String3),writeln("****"),writeln(String3),process3(Rest,To_lang,String3,String2),!.
% v(w,o),v(o),w(o).
% v, o matched with base meanings% alg found% -% alg: A equals/is 1 plus/summed with 1% sentence_to_meaning(["a","is","1","summed with","1"],Meaning).
% v< x > v < x > process2(Input2,To_lang,String1,String2) :-Input2=[A,B,C,D|Rest],split_string1(A,["&"],A11), % docs.txt needs a character between `,<,>,&process3(A11,To_lang,"",A1),split_string1(C,["&"],C11),process3(C11,To_lang,"",C1),concat_list([String1,A1,"<",B,">",C1,"<",D,">"],String3),writeln("****"),writeln(String3),process2(Rest,To_lang,String3,String2),!.
% venn of friends, availvenn(person1,[friend,available]).
% version adder - given new lines, asks for version info and updates version% version_adder(["a","b"],"version.txt","version2.txt").
% volumes_required([4,4,4],[1,1,1],V).
% walk(1,[[1,2],[1,3],[2,4],[4,5]],T2).walk(Start,Transitions1,Transitions2) :-member([Start,Next],Transitions1),walk2(Transitions1,[[Start,Next]],5,Transitions2),!.
% we need this module from the HTTP client library for http_read_data:- use_module(library(http/http_client)).
% word_count(["file","file.txt"],Words).
% word_count(["string","a b c"],Words).
% word_frequency_count(["file","file.txt"],Freq).
% word_frequency_count(["string","a b c"],Freq).
% working_directory_sh(_,"root@x.x.x.x:~/").
% working_directory_sh(_,"root@x.x.x.x:~/").% save_file_sh("a1.txt", [a]).
% write a speech% convert a sentence to a spec% sent2spec([sort,[2,3,1],giving,[1,2,3]],I,O).
% write file.txt as "a\nb c\nd" (no numbers)expand_topic([string,String],ET0) :-%File1="test1.pl",expand_topic1(String,ET0),!.
%%convert_to_grammar_part31t(Body1,FirstVar,SecondVar,SecondVarParent,Body2,Body3) :-Body1=[Item1|Rest1],convert_to_grammar_part311t(Item1,FirstVar,SecondVarParent,Body2,Body4),convert_to_grammar_part2(Rest1,FirstVar,SecondVar,SecondVarParent,Body4,Body3), !.
%%convert_to_grammar_part2(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3) :-Body1=[Item|Items],terminal(Item),(last_call_or_terminal2(Items)->convert_to_grammar_part31t(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3);convert_to_grammar_part32t(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3)), !.
%%convert_to_grammar_part2(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3) :-Body1=[Item|Items],terminal(Item),(last_call_or_terminal2(Items)->convert_to_grammar_part31t(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3);convert_to_grammar_part32t(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3)), !.convert_to_grammar_part2(Body1,FirstVar,SecondVar,SecondVarParent,Body2,Body3) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("code",Dbw_code),Body1=[Item|Rest1],Item=[[Dbw_n,Dbw_code]|Rest2],append(Body2,Rest2,Body4),convert_to_grammar_part2(Rest1,FirstVar,SecondVar,SecondVarParent,Body4,Body3),!.
%%        append(Relations3,[[Item3,Range3,ItemNumber3,Position3],[Item4,Range4,ItemNumber4,Position4]],Relations2)deleteduplicates([],List,List) :- !.
%% "a"paragraph(Next) --> spaces(Y), {%%atom_string(Y,YS),string_length(Y,YLen), (YLen>0->Start=[[s,YLen]];Start=[])}, sentence33(X), {%%atom_string(X,XS),[XS]=X,string_length(XS,XLen), atom_string(XS,X1), (XLen>0->append(Start,[X1],Next);Next=Start)}, !.
%% "a\na\n"paragraph(AAs) --> spaces(Y), {%%atom_string(Y,YS),string_length(Y,YLen), (YLen>0->Start=[[s,YLen]];Start=[])}, sentence33(X), returns(Z),{%%atom_string(X,XS),[XS]=X,string_length(XS,XLen), atom_string(XS,X1), (XLen>0->append(Start,[X1],Next);Next=Start), %%atom_string(Z,ZS),string_length(Z,ZLen), ZLen>=1,(ZLen>0->append(Next,[[r,ZLen]],Last);Last=Next)},paragraph(As),{append(Last,As,AAs)}, !.
%% Adye is Venantest(18,[[n,grammar1],["what is 1+11",[v,c]]],[  [[n,grammar1],[[v,u],[v,c]],":-",  [   [[n,sentence],[[v,u],"",[v,c]]]  ]  ],    [[n,sentence],[[v,c]],"->",  [[[n,subject]],[[n,verbphrase],[[v,c]]]]],  [[n,verbphrase],[[v,c]],"->",  [[[n,verb]],[[n,object],[[v,c]]]]],    [[n,subject],["",""]],  [[n,subject],"->",["what"," "]],  [[n,subject],[[v,a],[v,a]]],    [[n,verb],["",""]],  [[n,verb],"->",["is"," "]],  [[n,verb],[[v,a],[v,a]]],  [[n,object],["","",[v,c]]],  [[n,object],[[v,c]],"->",[[[n,item],[[v,a]]],  "+",  [[n,item],[[v,b]]],  [[n,code],[[n,+],[[v,a],[v,b],[v,c]]]]]],  [[n,object],[[v,a],[v,a]]],    [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,u]]],[[n,code],  [[n,stringtonumber],[[v,u],[v,t]]]]]],  [[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]]],[[[[v,c],12]]]).%% Inky Classic 2test(19,[[n,positivityscore],[["not","you","like","a","walk"],["would","you","like","a","walk"],0,[v,s]]],/**test(19,[[n,positivityscore],["would1"%%,"you","like","a","walk",["would"%%,"you","like","a","walk"]]],**/[/**        [[n,positivityscore],[[v,l],[v,m]],":-",        [       [[n,not],[        [[n,member],[[v,l],[v,m]]]]]                 ]]**/                [[n,positivityscore],[[],[v,l],[v,s],[v,s]]],        [[n,positivityscore],[[v,l],[v,m],[v,s1],[v,s2]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,member],[[v,h],[v,m]]],                [[n,+],[[v,s1],1,[v,s3]]],                [[n,positivityscore],[[v,t],[v,m],[v,s3],                [v,s2]]]        ]],                [[n,positivityscore],[[v,l],[v,m],[v,s1],[v,s2]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[n,member],[[v,h],[v,m]]]]],                [[n,positivityscore],[[v,t],[v,m],[v,s1],                [v,s2]]]]]        ]        ,[[[[v,s], 4]]]).%%,[]).test(20,[[n,function],[1,1,[v,c]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                [[[n,+],[[v,a],[v,b],[v,c]]]]        ]        ]],[[[[v,c], 2]]]).
%% Agree or disagreecritique(String00,String01,Reasons_per_paragraph,Numbers,ML_db,Critique1) :-length(List1,5),append(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),string_codes(String001,String00),writeln(String001),retractall(critique3(_)),assertz(critique3([])),findall([Number2a,Critique2],(%% Reason 1member(Number2a,List1),%%List1=[Number2a|List1a],List2=[Number3a|List2a],%%trace,critique_reason1(String01,Number2a,Number3a,Reasons_per_paragraph,ML_db,Critique3,Topic_paragraph_link),critique_reasons_2_to_n(Number2a,List2a,Critique3,Reasons_per_paragraph,ML_db,Critique4),append_list2([[Topic_paragraph_link],Critique3,Critique4],Critique2)),Critique1).
%% Agree or disagreecritique(String00,String01,Reasons_per_paragraph,Numbers,ML_db,Critique1) :-length(List1,5), %% 5->1append(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),retractall(critique3(_)),assertz(critique3([])),findall([Number2a,Critique2],(%% Reason 1member(Number2a,List1),%%List1=[Number2a|List1a],List2=[Number3a|List2a],%%trace,critique_reason1(String01,Number2a,Number3a,Reasons_per_paragraph,ML_db,Critique3,Topic_paragraph_link),critique_reasons_2_to_n(Number2a,List2a,Critique3,Reasons_per_paragraph,ML_db,Critique4),append_list2([[Topic_paragraph_link],Critique3,Critique4],Critique2)),Critique1).
%% Agree or disagreecritique(String00,String01,Reasons_per_paragraph,Numbers,ML_db,Critique1) :-length(List1,5), %% 5->1 paragraphs per critiqueappend(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),retractall(critique3(_)),assertz(critique3([])),findall([Number2a,Critique2],(%% Reason 1member(Number2a,List1),%%List1=[Number2a|List1a],List2=[Number3a|List2a],%%trace,critique_reason1(String00,String01,Number2a,Number3a,Reasons_per_paragraph,ML_db,Critique3,Topic_paragraph_link),critique_reasons_2_to_n(String00,Number2a,List2a,Critique3,Reasons_per_paragraph,ML_db,Critique4),append_list2([[Topic_paragraph_link],Critique3,Critique4],Critique2)),Critique1).
%% Agree or disagreecritique(String00,String01,Reasons_per_paragraph,Numbers,ML_db,Critique1) :-num_paras_crit(Num_paras_crit),length(List1,Num_paras_crit), %% 5->1 paragraphs per critiqueappend(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),%%string_codes(String001,String00),%%writeln(String001),retractall(critique3(_)),assertz(critique3([])),findall([Number2a,Critique2],(%% Reason 1member(Number2a,List1),%%List1=[Number2a|List1a],List2=[Number3a|List2a],%%trace,critique_reason1(String00,String01,Number2a,Number3a,Reasons_per_paragraph,ML_db,Critique3,Topic_paragraph_link),critique_reasons_2_to_n(String00,Number2a,List2a,Critique3,Reasons_per_paragraph,ML_db,Critique4),append_list2([[Topic_paragraph_link],Critique3,Critique4],Critique2)),Critique1).
%% Asks "What is the input variable?"%% Asks "What variable is the input variable linked to?"%% Asks "What variable is this last variable linked to?"%% Asks "Is this the final output?"/**e.g. orig-trans, trans-bt where orig-bt have same meaninga(OT,TB,BO,O,T):-member(A1,OT),A1=[O,T],member(A2,TB),A2=[T,B],member(A3,BO),A3=[B,O].
%% Brth is true or false%texttobr2(N1,Filex1,Stringx1,M1) :-%texttobr2(N1,Filex1,Stringx1,M1,false,false,false,false,false,false,0,[auto,off]).
%% Brth is true or falset2ab(N1,Filex1,Stringx1,M1) :-t2ab(N1,Filex1,Stringx1,M1,0,off).
%% Brth is true or falset2ab(N1,Filex1,Stringx1,M1) :-t2ab(N1,Filex1,Stringx1,M1,0,off).t2ab(N1,Filex1,Stringx1,M1,Auto) :-t2ab(N1,Filex1,Stringx1,M1,0,Auto).
%% Brth is true or falsetexttoalg(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish) :-((number(N1),N=N1)->true;(N1=u,N=1)),((Filex1=u,Filex="file.txt")->true;Filex=Filex1),((number(M1),M=M1)->true;M=all), %% If m1 is undefined or all then m=allprep(List1,BrDict03,BrDict03t,Filex,Stringx1,M),term_to_atom(List1,List1A),atom_string(List1A,List1B),string_concat(List1B,"\n\n",List1C),br2(List1,BrDict03,BrDict2,BrDict03t,BrDict03t2,1,List1C,Shell2,N,M,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish),sort(BrDict2,BrDict3),(BrDict03=BrDict3->true;(open_s("algdict1.txt",write,Stream),%%string_codes(BrDict3),term_to_atom(BrDict3,BrDict31),write(Stream,BrDict31),close(Stream))),sort(BrDict03t2,BrDict03t3),(BrDict03t=BrDict03t3->true;(open_s("algdict2.txt",write,Stream2),%%string_codes(BrDict3),term_to_atom(BrDict03t3,BrDict03t31),write(Stream2,BrDict03t31), close(Stream2))),  get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list("file",[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(File1,[".txt"],File2),(open_s(File2,write,Stream1),%%string_codes(BrDict3),write(Stream1,Shell2),close(Stream1)), !.
%% Brth is true or falsetexttobr2(N1,Filex1,Stringx1,M1) :-texttobr2(N1,Filex1,Stringx1,M1,false,false,false,false,false,false,0,[auto,off]),!.texttobr2(N1,Filex1,Stringx1,M1,[auto,Auto]) :-texttobr2(N1,Filex1,Stringx1,M1,false,false,false,false,false,false,0,[auto,Auto]),!.
%% Finds combinations of lines of philosophy%% *** Deprecated by Repository Lucian-Academy/combophil_alg_log.pl:-include('../listprologinterpreter/la_strings').
%% Finds the gradient m and y-intercept c of (X1,Y1) and (X2,Y2)equation2(_DY,0,999999999,_Y1,X1,X1) :-        !.
%% Finds the gradient m and y-intercept c of _3d(X1,Y1) and _3d(X2,Y2)equation2_3d(_DY,0,999999999,_Y1,X1,X1) :-        !.
%% Finds the graph of the line connecting the two points.  It does this by finding the graph flipped in the y=x line if the gradient m is greater than 1 or less than -1, so that the graph is not disjointedgridline2(X1,_Y1,X2,_Y2,M,C,C2,Grid,N3) :-M =< 1, M >= -1,%%x(X),%%X1 is X+1,gridline3(X1,X2,M,C,C2,Grid,N3,_X).
%% Finds the rise and run of (X1,Y1) and (X2,Y2)equation(X1,Y1,X2,Y2,M,C) :-DY is Y2-Y1,DX is X2-X1,%%writeln([y2,Y2,y1,Y1,x2,X2,x1,X1,dy,DY,dx,DX]), %%equation2(DY,DX,M,Y1,X1,C).
%% Finds the rise and run of _3d(X1,Y1) and _3d(X2,Y2)equation_3d(X1,Y1,X2,Y2,M,C) :-DY is Y2-Y1,DX is X2-X1,%%writeln_3d([y2,Y2,y1,Y1,x2,X2,x1,X1,dy,DY,dx,DX]), %%equation2_3d(DY,DX,M,Y1,X1,C).
%% Flips the graph in the y=x lineflipxy([],Grid,Grid) :- !.
%% Flips the graph in the y=x lineflipxy_3d([],Grid,Grid) :- !.
%% Flips the graph in the y=x lineflipxy_orig_3d([],Grid,Grid) :- !.
%% Get item n, copies ittest(34,[[n,getitemn],[3,[1,2,3],[v,c]]],[        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]]        ],[[[[v,c],3]]]).%% A shell of LPI allows manipulation of variable order, testing for e.g. identical inverse%% commutative not identicaltest(35,[[n,identical],[1,2]],[        [[n,identical],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]],                [[n,+],[[v,b],[v,a],[v,c]]]        ]]        ],[[]]).test(36,[[n,associative],[1,2,3]],[        [[n,associative],[[v,a],[v,b],[v,c]],":-",        [       [[n,*],[[v,a],[v,b],[v,d]]],                [[n,*],[[v,d],[v,c],[v,e]]],                [[n,*],[[v,b],[v,c],[v,f]]],                [[n,*],[[v,f],[v,a],[v,e]]]        ]]        ],[[]]).
%% If true at end of section, return to next linefind_state_machine_body2(Body1,Body2,Return_line_true,Return_line_false,Pred_numbers) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("exit_function",Dbw_exit_function1),Dbw_exit_function1=Dbw_exit_function,        get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,        Body1=[[Number,[Dbw_n,"->"],[Statements1,Statements2]]|Statements3],                find_first_line_number(Statements1,Statements1_number),        find_first_line_number(Statements2,Statements2_number),(Statements3=[]->Statements3_number=Return_line_true;        find_first_line_number(Statements3,Statements3_number)),find_state_machine_body2([Statements1],Body3,Statements2_number,Return_line_false,Pred_numbers),       find_state_machine_body2([Statements2],Body4,[Dbw_exit_function,Number],Return_line_false,Pred_numbers),        find_state_machine_body2([Statements3],Body5,Return_line_true,Return_line_false,Pred_numbers),        maplist(append,[[Body3,Body4,Body5]],[Body345]),        %append(Body3,Body4,Body34),        Body6=[Number,[Dbw_on_true,Statements1_number],[Dbw_go_after,Statements3_number],[Dbw_on_false,Return_line_false],[Dbw_go_to_predicates,-],[Dbw_n,"->"]],        append([Body6],Body345,Body2),        %append(Body61,Body5,Body2),        !.
%% Important: See instructions for using texttobr.pl at https://lucianpedia.wikia.com/wiki/Instructions_for_Using_texttobr(2).pl .
%% List_of_words may be list of words to translate and add or an original language code% lang_db_generator([["a","a"],["b","b exp"]],["fr"]). - create the db% lang_db_generator("fr",["de"]). - add de with same entries as fr% lang_db_generator("fr",["ab"]). - add ab "% Alternatively, lang_db_generator("fr",["de","ab"]). instead of last two linesload_lang_db1(Entry3) :-% if l.o.w. is orig lang, read from it insteaddirectory_files("../listprologinterpreter/languages/",F),delete_invisibles_etc(F,G),findall(Entry2,(member(Filex1,G),string_concat("../listprologinterpreter/languages/",Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),string_concat(Target_language3,".txt",Filex),string_concat("../listprologinterpreter/languages/",Target_language2,Target_language3),findall([En_word,En_word2,Target_language2,T_word],(member(Entry,String02a),((Entry=[En_word,En_word2,Target_language2,T_word],string(En_word),string(En_word2),string(T_word))->true;(concat_list(["Error: File: ",Filex,", Entry: ",Entry," not in format [\"<En_word>\",\"<En_word2>\",\"<Target_language2>\",\"<T_word>\"]."],Notification1),writeln(Notification1),abort))),Entry2)),Entry2a),maplist(append,[Entry2a],[Entry3]).
%% List_of_words may be list of words to translate and add or an original language code% lang_db_generator([["a","a"],["b","b exp"]],["fr"]). - create the db% lang_db_generator("fr",["de"]). - add de with same entries as fr% lang_db_generator("fr",["ab"]). - add ab "% Alternatively, lang_db_generator("fr",["de","ab"]). instead of last two linesload_lang_db1(Entry3) :-% if l.o.w. is orig lang, read from it insteaddirectory_files("../listprologinterpreter/languages/",F),delete_invisibles_etc(F,G),findall(Entry2,(member(Filex1,G),string_concat("../listprologinterpreter/languages/",Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),string_concat(Target_language3,".txt",Filex),string_concat("../listprologinterpreter/languages/",Target_language2,Target_language3),findall([En_word,En_word2,Target_language2,T_word],(member(Entry,String02a),((Entry=[En_word,En_word2,Target_language2,T_word],string(En_word),string(En_word2),string(T_word))->true;(concat_list(["Error: File: ",Filex,", Entry: ",Entry," not in format [\"<En_word>\",\"<En_word2>\",\"<Target_language2>\",\"<T_word>\"]."],_Notification1)%,writeln(Notification1),fail))),Entry2)),Entry2a),maplist(append,[Entry2a],[Entry3]).
%% Notes%% Brackets around body in input v%% base case [] v%% calls, terminals, code v%% if calls - 2vp or non 2vp v%% No bc needed except [] v%% Recurse after all except bc [] v%% code in converted code has no brackets v%% $->v v%% must have a call or terminal v%% terminals have vgps, undef g t->g p v%% can find x as terminals, can find singletons later v%% grammar_part,[n,noun],[v,vgp1],[v,vgp2] should be%% grammar_part,[[n,noun],[v,vgp1],[v,vgp2]] do using list proc v%% append [[]] not [] to [[v v]] v%% Print [] around body v%% append list in first query args 1<->2 v%% ** change [v,name] to [v*,name] so new interpreter, grammar command can run them, can have multiple v, v* or groups of these used in an interpreter shell x use a marker to avoid replacing variables with values when passing algorithms to shells, or detect and leave without marker%% keep original length recorded to add base case in case when add variablesconvert_to_grammar_part1(Grammar1,Grammar2,Grammar3) :-convert_to_grammar_part11(Grammar1,Grammar2,Grammar4,[],EndGrammar),append(Grammar4,EndGrammar,Grammar3),!.
%% Notes%% Brackets around body in input v%% base case [] v%% calls, terminals, code v%% if calls - 2vp or non 2vp v%% No bc needed except [] v%% Recurse after all except bc [] v%% code in converted code has no brackets v%% $->v v%% must have a call or terminal v%% terminals have vgps, undef g t->g p v%% can find x as terminals, can find singletons later v%% grammar_part,[n,noun],[v,vgp1],[v,vgp2] should be%% grammar_part,[[n,noun],[v,vgp1],[v,vgp2]] do using list proc v%% append [[]] not [] to [[v v]] v%% Print [] around body v%% append list in first query args 1<->2 v%% ** change [v,name] to [v*,name] so new interpreter, grammar command can run them, can have multiple v, v* or groups of these used in an interpreter shell x use a marker to avoid replacing variables with values when passing algorithms to shells, or detect and leave without marker%% keep original length recorded to add base case in case when add variablesconvert_to_grammar_part1(Grammar1,Grammar2,Grammar3,Grammar5) :-convert_to_grammar_part11(Grammar1,Grammar2,Grammar4,[],_EndGrammar1,[],Grammar6,[],_EndGrammar2),%%append(Grammar4,EndGrammar1,Grammar3),%%append(Grammar6,EndGrammar2,Grammar5),Grammar3=Grammar4,Grammar5=Grammar6,%%duplicate(Grammar4,[],Grammar5), %% 6->4!.
%% Pedagogy X - write 15*2=30 As in Honours and 50*2=100 As in Masters and 250 As in PhD. - use cawp to find algorithms with input and output in same pattern as a past algorithm - question answer for cawp specs, run cawp in post order/**%% - simple x spec with data - for alg, and simple x spec with data for grammars- in text file- instruct to call only previously found predicates (x call first) - then constructs next predicate up as head predicate - new feature: substitutes a call x either tries existing tree or writes fresh code**/%% Two Uses - See philosophy/he should identify different writers in the exposition.pltest(26,[[n,append1],[["a"],["b"],[v,s]]],[        [[n,append1],[[v,a],[v,b],[v,s]],":-",        [       [[n,append],[[v,a],[v,b],[v,s]]]        ]]        ],[[[[v,s],["a","b"]]]]).
%% Plots a point at each x-value of the graphgridline3(X1,X2,_M,_C,Grid,Grid,_N3,_N4) :-%%X1 is N4+1. %% swap, X1 is X2+1.
%% Plots a point at each x-value of the graphgridline3_3d(X1,X2,_M,_C,Grid,Grid,_N3,_N4) :-%%X1 is N4+1. %% swap, X1 is X2+1.
%% Silly to mind read caw inputs, because they are mostly unused.  Use mind reading for definitely used multi choice answer%% caw00(off,[n,f],[[[n,append],2,1],[[n,delete],2,1],[[n,head],1,1],[[n,tail],1,1],[[n,member],1,1]],2,8,_InputVarList,_OutputVarList,[],_Program2,Ps).
%% Sorts (X1,Y1) and (X2,Y2) by Xsortbyx(X1,Y1,X2,Y2,X1,Y1,X2,Y2) :-X2 >= X1.
%% Sorts Y1 and Y2sort_3d(Y1,Y2,Y1,Y2) :-Y1=<Y2, !.
%% Test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resulttest(Debug,NTotal,Score) :- test(Debug,0,NTotal,0,Score),!.
%% Test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resulttest_open_types(Debug,NTotal,Score) :- test_open_types(Debug,0,NTotal,0,Score),!.
%% Test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resulttest_types(Debug,NTotal,Score) :- test_types(Debug,0,NTotal,0,Score),!.
%% Test cases, NTotal=output=total cases, Score=output=result% * check if lc fails% - reuse deps in tests - say this in lc verify.pllc_test(NTotal,Score) :-  gh_init(false), findall1(_,(lc_test0(_N,_At_start,_Max,_CICD,_Start_files,_End_files)),B),length(B,NTotal), lc_test(0,NTotal,0,Score,[],List), findall1(_,(member(L,List),writeln(L),nl),_), !.
%% Test individual cases, Debug=trace=on or off, N=case numbertestopen1(Debug,N) :-testopen_cases(N,Query,Functions),((international_interpret([lang,"en"],Debug,Query,Functions,Result),not(Result=[]))->(writeln([test,N,result,Result]),writeln([test,N,passed]));(writeln([test,N,failed]))),!.testopen_cases(1,[[n,datetime],[[v,year],[v,month],[v,day],[v,hour],[v,minute],[v,second]]],[[[n,datetime],[[v,y],[v,m],[v,d],[v,h],[v,mi],[v,s]],":-",[[[n,date],[[v,y],[v,m],[v,d],[v,h],[v,mi],[v,s]]]]]]       ).
%% Test individual cases, Debug=trace=on or off, N=case numbertestopen1(Debug,N) :-testopen_cases(N,Query,Functions),((international_interpret([lang,"en"],Debug,Query,Functions,Result),not(Result=[]))->(writeln0([test,N,result,Result]),writeln0([test,N,passed]));(writeln0([test,N,failed]))),!.
%% Test individual cases, Debug=trace=on or off, N=case number, Passed=output=resultcawptest1(Debug,N,Passed) :-cawptest2(N,Function,Rules,MaxLength,MaxPredicates,TotalVars,Numinputs, Numoutputs,Specifications,AlgDict,Program1),%%writeln1([cawptest2(N,Specifications,Program1)]),%%writeln1(caw00(Debug,Function,Rules,MaxLength,MaxPredicates,TotalVars,Numinputs, Numoutputs,Specifications,AlgDict,[],Program2)),(((caw00(Debug,Function,Rules,MaxLength,MaxPredicates,TotalVars,Numinputs, Numoutputs,Specifications,AlgDict,[],Program1)%%sort(Program1,ProgramA),%%sort(Program2,ProgramA)%writeln(Program1),%writeln(Program2),%Program1=Program2))->(Passed=passed,writeln([cawptest,N,passed]));(Passed=failed,writeln([cawptest,N,failed]))),!.
%% Test individual cases, Debug=trace=on or off, N=case number, Passed=output=resultcawptest1(Debug,N,Passed) :-cawptest2(N,Function,Rules,MaxLength,TotalVars,InputVarList,OutputVarList,AlgDict,Program1),%%writeln1([cawptest2(N,Specifications,Program1)]),%%writeln1(caw00(Debug,Function,Rules,MaxLength,MaxPredicates,TotalVars,Numinputs, Numoutputs,Specifications,AlgDict,[],Program2)),(((caw00(Debug,Function,Rules,MaxLength,TotalVars,InputVarList,OutputVarList,AlgDict,[],Program2),%%sort(Program1,ProgramA),%%sort(Program2,ProgramA)trace,writeln(Program1),writeln(Program2),Program1=Program2))->(Passed=passed,writeln([cawptest,N,passed]));(Passed=failed,writeln([cawptest,N,failed]))),!.
%% Test individual cases, Debug=trace=on or off, N=case number, Passed=output=resultp2lp_test1(N,Passed) :-p2lp_test(N,In,Out),((p2lpconverter([string,In],Result1),%writeln1([result1,Result1]),Out=Result1)->(Passed=passed,writeln0([p2lp_test,N,passed]));(Passed=failed,writeln0([p2lp_test,N,failed]))),!.
%% Test individual cases, Debug=trace=on or off, N=case number, Passed=output=resulttest1(Debug,N,Passed) :-test(N,Query,Functions,Result),((international_interpret([lang,"en"],Debug,Query,Functions,Result1),%writeln1([result1,Result1]),Result=Result1)->(Passed=passed,writeln0([test,N,passed]));(Passed=failed,writeln0([test,N,failed]))),!.
%% Test individual cases, Debug=trace=on or off, N=case number, Passed=output=resulttest1(Debug,N,Passed) :-test(N,Query,Functions,Result),((international_interpret([lang,"en"],Debug,Query,Functions,Result1),%%writeln(Result1),Result=Result1)->(Passed=passed,writeln([test,N,passed]));(Passed=failed,writeln([test,N,failed]))),!.
%% Test individual cases, Debug=trace=on or off, N=case number, Passed=output=resulttest_open_types1(Debug,N,Passed) :-test_open_types_cases(N,Query,Types,Modes,Functions),(((international_interpret([lang,"en"],Debug,Query,Types,Modes,Functions,Result),not(Result=[]))%%writeln(Result1),%%Result=Result1)->(Passed=passed,writeln([test_open_types,N,result,Result]),writeln([test_open_types,N,passed]));(Passed=failed,writeln([test_open_types,N,failed]))),!.test_open_types_cases(1,[[n,true_vs_good],[[v,t],[v,g]]],[[[n,true_vs_good],[[[t,brackets],[[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]]]],[[t,brackets],[[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]],[[t,brackets],[[t,number],[t,number]]]]]]],[[n,random1],[[t,number],[t,number],[t,number]]]],[[[n,true_vs_good],[output,output]],[[n,random1],[input,input,output]]],[        [[n,true_vs_good],[[v,t],[v,g]],":-",        [                [[n,random1],[0.1,4.6,[v,y1]]],                [[n,random1],[[v,y1],4.7,[v,y2]]],                [[n,random1],[[v,y2],4.8,[v,y3]]],                [[n,random1],[[v,y3],4.9,[v,y4]]],                                [[n,equals2],[[v,c11],[0,0]]],                [[n,wrap],[[v,c11],[v,c12]]],                [[n,equals2],[[v,c21],[1,[v,y1]]]],                [[n,wrap],[[v,c21],[v,c22]]],                [[n,append],[[v,c12],[v,c22],[v,c23]]],                                [[n,equals2],[[v,c31],[2,[v,y2]]]],                [[n,wrap],[[v,c31],[v,c32]]],                [[n,append],[[v,c23],[v,c32],[v,c33]]],                                [[n,equals2],[[v,c41],[3,[v,y3]]]],                [[n,wrap],[[v,c41],[v,c42]]],                [[n,append],[[v,c33],[v,c42],[v,c43]]],                                [[n,equals2],[[v,c51],[4,[v,y4]]]],                [[n,wrap],[[v,c51],[v,c52]]],                [[n,append],[[v,c43],[v,c52],[v,c53]]],                                [[n,equals2],[[v,c61],[5,5]]],                [[n,wrap],[[v,c61],[v,c62]]],                [[n,append],[[v,c53],[v,c62],[v,g]]],                                [[n,equals3],[[v,t],[[0,0],[1,1],                [2,2],[3,3],[4,4],[5,5]]]        ]]],                [[n,random1],[[v,a1],[v,a2],[v,n5]],":-",        [                [[n,-],[[v,a2],[v,a1],[v,a3]]],                [[n,random],[[v,n1]]],                [[n,*],[[v,a3],[v,n1],[v,n2]]],                [[n,+],[[v,n2],[v,a1],[v,n21]]],                [[n,*],[10,[v,n21],[v,n3]]],                [[n,round],[[v,n3],[v,n4]]],                [[n,/],[[v,n4],10,[v,n5]]]        ]]]).
%% Test individual cases, Debug=trace=on or off, N=case number, Passed=output=resulttest_open_types1(Debug,N,Passed) :-test_open_types_cases(N,Query,Types,Modes,Functions),(((international_interpret([lang,"en"],Debug,Query,Types,Modes,Functions,Result),not(Result=[]))%%writeln(Result1),%%Result=Result1)->(Passed=passed,writeln0([test_open_types,N,result,Result]),writeln0([test_open_types,N,passed]));(Passed=failed,writeln0([test_open_types,N,failed]))),!.
%% Test individual cases, Debug=trace=on or off, N=case number, Passed=output=resulttest_types1(Debug,N,Passed) :-test_types_cases(N,Query,Types,Modes,Functions,Result),((international_interpret([lang,"en"],Debug,Query,Types,Modes,Functions,Result)%%writeln(Result1),%%Result=Result1)->(Passed=passed,writeln([test_types,N,passed]));(Passed=failed,writeln([test_types,N,failed]))),!.
%% Test individual cases, Debug=trace=on or off, N=case number, Passed=output=resulttest_types1(Debug,N,Passed) :-test_types_cases(N,Query,Types,Modes,Functions,Result),((international_interpret([lang,"en"],Debug,Query,Types,Modes,Functions,Result1),%writeln(Result1),Result=Result1)->(Passed=passed,writeln0([test_types,N,passed]));(Passed=failed,writeln0([test_types,N,failed]))),!.
%% Truncates the list if m is not undefined and m is greater than or equal to the length of string0truncate(List1,M,String0) :-((number(M),length(String0,M),append(String0,_,List1))->true;String0=List1),!.
%% Truncates the list if m is not undefined and m is greater than or equal to the length of string0truncate(List1,M,String0) :-((number(M),length(String0,M),append(String0,_,List1))->true;String0=List1),!.prep(List,BrDict03,BrDict03t,Filex,Stringx1,M,Brth,BrthDict03,Room,RoomDict03,PartOfRoom,PartOfRoomDict03,Direction,DirectionDict03,ObjectToPrepare,ObjectToPrepareDict03,ObjectToFinish,ObjectToFinishDict03) :-concurrent(2,[(phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),%%Chars="’",SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),%%writeln([brdict1]),splitfurther(BrDict0,BrDict01),%%writeln([brDict01,BrDict01]),%%char_code(Escape,27),%%delete(BrDict01,[Escape,_,_,_,_],BrDict021),%%writeln([brDict021,BrDict021]),%%char_code(Apostrophe,8217),%%delete(BrDict021,[Apostrophe,_,_,_,_],BrDict02),%%writeln([brDict02,BrDict02]),sort(BrDict01,BrDict03),%%writeln([brDict03,BrDict03]),length(BrDict03,Length0),write("Number of words in dictionary: "), writeln(Length0)),(%%writeln(''),%%writeln([brdict2]),phrase_from_file_s(string(BrDict0t), "../Text-to-Breasonings/brdict2.txt"),%%Chars="’",%%split_string(BrDict0,SepandPad,SepandPad,BrDict01),%%writeln([brDict0,BrDict0]),splitfurthert(BrDict0t,BrDict01t),%%writeln([brDict01,BrDict01]),%%delete(BrDict01t,[Escape,_,_,_,_],BrDict021t),%%writeln([brDict021,BrDict021]),%%delete(BrDict021t,[Apostrophe,_,_,_,_],BrDict02t),%%writeln([brDict02,BrDict02]),sort(BrDict01t,BrDict03t),% br_freq%B=BrDict03t,A=BrDict03,findall([DL,C,"\n"],(member([C,_,_,_],B),findall(_,member([_,C],A),D),length(D,DL)),E),sort(E,F),reverse(F,G),writeln([br_freq,G]),%%writeln([brDict03,BrDict03]),length(BrDict03t,Length0t),write("Number of unique breasonings in dictionary: "), writeln(Length0t))],[]),((Stringx1=u,phrase_from_file_s(string(String001), Filex))->true;String001=Stringx1),process_t2b(String001,String00),split_string(String00,SepandPad,SepandPad,List1),%%split_string_onnonletter(String00,List1),truncate(List1,M,List),/**replace0(String0,[8221, 8220], 34, SepandPad, M, String1),replace0(String1,[8216, 8217], 39, SepandPad, M, String2),replace0(String2,[8259, 8211, 8212], 45, SepandPad, M, String3),replace0(String3,[160], 32, SepandPad, M, List),**/%%atom_codes(Atom999,String),writeln([atom999,Atom999]),%%writeln([list,List]),%%delete(List,Escape,List11),%%writeln([list11,List11]),%%delete(List11,Apostrophe,List1),%%writeln([list1,List1]),length(List,Length1),write("Number of words to breason out in file: "), writeln(Length1),sort(List,List2),%%writeln([list2,List2]),length(List2,Length2),write("Number of unique words in file: "), writeln(Length2),((Brth=true,phrase_from_file_s(string(BrthDict0), "../Text-to-Breasonings/brthdict.txt"),splitfurther(BrthDict0,BrthDict01),sort(BrthDict01,BrthDict03),length(BrthDict03,BrthLength0),write("Number of unique breathsonings in dictionary: "), writeln(BrthLength0))->true;true),((Room=true,phrase_from_file_s(string(RoomDict0), "../Text-to-Breasonings/roomdict.txt"),splitfurther(RoomDict0,RoomDict01),sort(RoomDict01,RoomDict03),length(RoomDict03,RoomLength0),write("Number of unique rooms in dictionary: "), writeln(RoomLength0))->true;true),((PartOfRoom=true,phrase_from_file_s(string(PartOfRoomDict0), "../Text-to-Breasonings/partofroomdict.txt"),splitfurther(PartOfRoomDict0,PartOfRoomDict01),sort(PartOfRoomDict01,PartOfRoomDict03),length(PartOfRoomDict03,PartOfRoomLength0),write("Number of unique parts of rooms in dictionary: "), writeln(PartOfRoomLength0))->true;true),((Direction=true,phrase_from_file_s(string(DirectionDict0), "../Text-to-Breasonings/directiondict.txt"),splitfurther(DirectionDict0,DirectionDict01),sort(DirectionDict01,DirectionDict03),length(DirectionDict03,DirectionLength0),write("Number of unique directions in dictionary: "), writeln(DirectionLength0))->true;true),((ObjectToPrepare=true,phrase_from_file_s(string(ObjectToPrepareDict0), "../Text-to-Breasonings/objecttopreparedict.txt"),splitfurther(ObjectToPrepareDict0,ObjectToPrepareDict01),sort(ObjectToPrepareDict01,ObjectToPrepareDict03),length(ObjectToPrepareDict03,ObjectToPrepareLength0),write("Number of unique objects to prepare in dictionary: "), writeln(ObjectToPrepareLength0))->true;true),((ObjectToFinish=true,phrase_from_file_s(string(ObjectToFinishDict0), "../Text-to-Breasonings/objecttofinishdict.txt"),splitfurther(ObjectToFinishDict0,ObjectToFinishDict01),sort(ObjectToFinishDict01,ObjectToFinishDict03),length(ObjectToFinishDict03,ObjectToFinishLength0),write("Number of unique objects to finish in dictionary: "), writeln(ObjectToFinishLength0))->true;true),(complete_display(true)->((Stringx1=u, %% Use file, not string as input.
%% [[[a,*,*]],[[b,*,*],[c,d]],[[ef,*,*],[g],:-,[[[[h,*,*],[i]],->,true,or,true],!]]]use_module(library(pio)).use_module(library(dcg/basics)).:- include('la_strings.pl').
%% audience sizetest(37,[[n,length],[[1],0,[v,l]]],[        [[n,length],[[],[v,l],[v,l]]],        [[n,length],[[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,tail],[[v,l],[v,t]]],                [[n,+],[[v,m1],1,[v,m2]]],                [[n,length],[[v,t],[v,m2],[v,n]]]        ]        ]],[[[[v,l], 1]]]).%% Are their differences equal?test(38,[[n,optimise1],[[[5,4],[3,2],[1,0]],[v,d]]],[        [[n,optimise1],[[v,a],[v,b]],":-",        [       [[n,head],[[v,a],[v,h]]],                [[n,tail],[[v,a],[v,t]]],                [[n,equals1],[[v,h],[[v,h1],[v,h2]]]],                [[n,-],[[v,h1],[v,h2],[v,b]]],                [[n,"->"],[[[n,not],[[[n,=],[[v,t],[]]]]],                [[n,optimise1],[[v,t],[v,b]]],                [[n,true]]]]        ]]        ],[[[[v,d], 1]]]).test(39,[[n,member1a],[1,[1,2]]],[[[n,member1a],[[v,i1],[v,l]], ":-",[[[n,intersection2],[[v,i1],[v,l],[],[v,m]]]]],[[n,intersection2],[[v,a], [], [v,l], [v,l]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%[[n,intersection2],[[v,i1], [v,l4], [v,l5], [v,l3]]]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1], [v,l4], [v,l2], [v,l3]]]]]],[[]]).
%% c2lpconverter(S1),pp0(S1,S2),writeln(S2).
%% c=f((g(2)), 1, 1)test(53,[[n,function],[[[n,function2],[2]],1,1,[v,c]]],%%test(53,[[n,getitemn],[1,[1,2,3],[v,bb]]],[        [[n,function],[[v,f1],[v,a],[v,b],[v,c]],":-",        [                [[n,equals1],[[v,f1],[[v,f11],[v,f12]]]],                [[n,getitemn],[1,[v,f12],[v,bb]]],                [[v,f11],[[v,bb],[v,d],[v,f]]],                [[n,+],[[v,a],[v,b],[v,e]]],                [[n,+],[[v,e],[v,f],[v,g]]],                [[n,+],[[v,g],[v,d],[v,c]]]        ]        ],        [[n,function2],[[v,bb],[v,a],[v,f]],":-",        [                [[n,is],[[v,a],[v,bb]]],                [[n,is],[[v,f],1]]        ]        ],        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]]],[[[[v,c], 5]]]).
%% c=f(g(2), 1, 1)test(53,[[n,function],[[[n,function2],[2]],1,1,[v,c]]],%%test(53,[[n,getitemn],[1,[1,2,3],[v,bb]]],[        [[n,function],[[v,f1],[v,a],[v,b],[v,c]],":-",        [                [[n,equals1],[[v,f1],[[v,f11],[v,f12]]]],                [[n,getitemn],[1,[v,f12],[v,bb]]],                [[v,f11],[[v,bb],[v,d],[v,f]]],                [[n,+],[[v,a],[v,b],[v,e]]],                [[n,+],[[v,e],[v,f],[v,g]]],                [[n,+],[[v,g],[v,d],[v,c]]]        ]        ],        [[n,function2],[[v,bb],[v,a],[v,f]],":-",        [                [[n,is],[[v,a],[v,bb]]],                [[n,is],[[v,f],1]]        ]        ],        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]]],[[[[v,c], 5]]]).%%,[[[[v,bb], 1]]]).test(54,[[n,function],[[[n,function2],[2]],1,1,[v,c]]],[        [[n,function],[[v,f1],[v,a],[v,b],[v,c]],":-",        [                [[n,equals1],[[v,f1],[[v,f11],[v,f12]]]],                [[n,getitemn],[1,[v,f12],[v,bb]]],                [[v,f11],[[v,bb],[v,d],[v,f]]],                [[n,+],[[v,a],[v,b],[v,e]]],                [[n,+],[[v,e],[v,f],[v,g]]],                [[n,+],[[v,g],[v,d],[v,c]]]        ]        ],        [[n,function2],[[v,bb],[v,a],[v,f]],":-",        [                [[n,is],[[v,a],[v,bb]]],                [[n,is],[[v,f],1]]        ]        ],        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]]],[[[[v,c], 5]]]).test(55,[[n,test1],[[v,c]]],[[[n,test1],[1]],[[n,test2],[2]]],[[[[v, c], 1]]]).
%% cawptest(Debug[on/off],Total,Score).
%% checktypes([n,f],[1,"a",[n,a]],[[[n,f],[[t,number],[t,string],[t,predicatename]]]]).%% checktypes([n,f],[1,1,1],[[[n,f],[[[t,list],[[t,number]]]]]]).
%% confidence - when a person produces a certain amount of work, they will be fulfilledtest(45,[[n,greaterthan],[3,2]],[[[n,greaterthan],[[v,a],[v,b]],":-",        [[[n,>],[[v,a],[v,b]]]]]        ],[[]]).
%% confidence - when a person produces a certain amount of work, they will be fulfilledtest(45,[[n,greaterthan],[3,2]],[[[n,greaterthan],[[v,a],[v,b]],":-",        [[[n,>],[[v,a],[v,b]]]]]        ],[[]]).%% did - check a box truetest(46,[[n,conjunction],["true","false",[v,c]]],[[[n,conjunction],["true","true","true"]],[[n,conjunction],[[v,a],[v,b],"false"],":-",[[[n,not],[[[[n,=],[[v,a],"true"]],[[n,=],[[v,b],"true"]]]]]]]]        ,[[[[v,c], "false"]]]).
%% could be in either order%% a([w,z,a,b,e,c,z,y],[1,1,[c]],[1,2,[a]]).
%% could be in either order%% a([w,z,a,b,e,c,z,y],[1,1,[c]],[1,2,[a]]).%% true%% a([a,c,b],[1,1,[a,d]],[1,2,[b]]).
%% did - check a box truetest(46,[[n,conjunction],["true","false",[v,c]]],[[[n,conjunction],["true","true","true"]],[[n,conjunction],[[v,a],[v,b],"false"],":-",[[[n,not],[[[[n,=],[[v,a],"true"]],[[n,=],[[v,b],"true"]]]]]]]]        ,[[[[v,c], "false"]]]).
%% do 100 business songs at start of day%% automatically do a sale every hour until 11 PM x for n hours%% get txt,mid filenames%% get br count of txt%% br multiple   %% move them into another folder (delete or save on la com next day - compress and email)%% later: react to periodssectest01(N) :-write("*** Please indicate "),write(N),writeln(" number 1 songs. ***"),sleep(5),sectest11(N).
%% do separate i,o to group of last 3 vars%% separate i,otest(65,[[n,add3],[[v,a],[v,b]]],[[[n,add1],[1]],[[n,add2],[[v,a],[v,b]],":-",[       [[n,+],[[v,a],1,[v,b]]]]],[[n,add3],[[v,a],[v,b]],":-",[       [[n,+],[[v,a],1,[v,b]]]]],%% give functional function base case name as arg, which it can move around using cawp not cawmp%% fibonacci%% change back lpi, cawp verify**/test(66,[[n,addorsubtract1],[2,1,1]],[        [[n,addorsubtract1],[[v,a],[v,b],[v,c]],":-",        [       %%[[n,or],[[[n,addorsubtract2],[[v,a],[v,b],[v,c]]],        %%[[n,true]],        [[n,addorsubtract2],[[v,a],[v,b],[v,d]]],%%]        [[n,=],[[v,d],[v,c]]]        ]        ],        [[n,addorsubtract2],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,d]]],%%]        [[n,=],[[v,d],[v,c]]]        ]        ],        [[n,addorsubtract2],[[v,a],[v,b],[v,c]],":-",        [       [[n,-],[[v,a],[v,b],[v,d]]],%%]        [[n,=],[[v,d],[v,c]]]        ]        ]        ],[[]]).
%% e.g. combophil(2). to write on a combination of philosophiescombophil2qadb :- %(NumberOfPhils) :-% get box, right, box words from brdict1phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),%phrase_from_file_s(string(BrDict0), "../../brdict1.txt"),%string_codes(String02b,BrDict0),%atom_to_term(String02b,String02a,[]),splitfurther(BrDict0,BrDict01),sort(BrDict01,String02a),findall(A2,(member(A,String02a),A=[A2,"box"]),A1),findall(B2,(member(B,String02a),B=[B2,"right"]),B1),phrase_from_file_s(string(Phil1), "../Text-to-Breasonings/file.txt"),SepandPad="\n\r.",split_string(Phil1,SepandPad,SepandPad,Phil2),delete(Phil2,"",Phil3),sort(Phil3,Phil4),length(Phil4,LengthPhil4),write("Number of philosophies in file.txt: "),writeln(LengthPhil4),%length(PhilsLengthList,NumberOfPhils),findall([C,Algorithm],(member(C,Phil4),qa_db_finder(A1,B1,Algorithm)),D),term_to_atom(D,K),(open_s("file-o.txt",write,Stream1),write(Stream1,K),close(Stream1)),!.
%% e.g. combophil(2). to write on a combination of philosophiescombophil_alg_log :-N1 = 4, %% maximum number of algorithms per file% find files with n or fewer algorithms%phrase_from_file_s(string(String00a), "combophil_alg_log.txt"),%string_codes(String02b,String00a),%trace,%atom_to_term(String02b,String02a,[]),working_directory(_,'Books'),folders(Folders),%Folders=["a000"],%trace,findall([Dept,G00],(member(Dept,Folders),concat_list([Dept],Dept1),directory_files(Dept1,F),delete_invisibles_etc(F,G),member(G00,G)),G1),%trace,delete_all(String02a,G1,G2),findall([G51,G52,0],(member([G51,G52],G2)),G6),%trace,append(String02a,G6,G3),%trace,combophil_alg_log(N1,G3,G4), %term_to_atom(G4,String1),%(open_s("combophil_alg_log.txt",write,Stream1),%write(Stream1,String1),%close(Stream1)),!.
%% empty, because meditators is now based on 50 Asdoctors([]).
%% false%% a([c,d],[1,1,[a]],[1,2,[b]]).
%% false%% a([c,d],[1,1,[a]],[1,2,[b]]). %% q in "q a b" sends food like e in "c d e"/**[debug]  ?- a([q,e,r,a,t,y,u,q,e,r,a,t,y,u,c,b,x,v,n,m],[1,1,[c,a,t,y,u]],[1,2,[c,a,t,y,u]]).    [[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[c,a,t,y,u]],[r,a,t,y,u]]true.X:[debug]  ?- a([q,e,r,a,t,y,u,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,u]]).[[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[b,x,u]],[c,b,x]]true.
%% find text from filefind_br2([],_Start,Len_needed,_Len_so_far1,Text,Text) :-concat_list(["Warning: End of database has been reached. ",Len_needed," breasonings remaining."],A), writeln(A).
%% finds unknown words, asks for their br in form "n of m: word", verify, (can go back x) append and sort, save%/*process_t2ab(A,C) :- replace_t2ab(Replacements), atom_string(A1,A), replace1_t2ab(Replacements,A1,D1), atom_string(D1,C),!.
%% finds unknown words, asks for their br in form "n of m: word", verify, (can go back x) append and sort, save%/*process_t2ab(A,C) :- replace_t2ab(Replacements), atom_string(A1,A), replace1_t2ab(Replacements,A1,D1), atom_string(D1,C),!. replace1_t2ab([],A,A) :- !.
%% finds unknown words, asks for their br in form "n of m: word", verify, (can go back x) append and sort, savefulladjective("en",'English') :- !.
%% finds unknown words, asks for their br in form "n of m: word", verify, (can go back x) append and sort, saveread_string1(S,user_input, "\n", "\r", _, ObjectToFinishString) :- (auto(on)->S=ObjectToFinishString; read_string(user_input, "\n", "\r", _, ObjectToFinishString)),!.
%% finds unknown words, asks for their br in form "n of m: word", verify, (can go back x) append and sort, saveread_string1(S,user_input, "\n", "\r", _End, ObjectToFinishString) :- (auto(on)->S=ObjectToFinishString; read_string(user_input, "\n", "\r", _End, ObjectToFinishString)),!.
%% get_item_n([a,b,c],3,Item).
%% given N sentences to generate, takes a sentence and M sentences to find substitution words fromgrammar_logic_to_alg1 :-phrase_from_file_s(string(Text1), "../Text-to-Breasonings/luciansphilosophy.txt"),phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),splitfurther(BrDict0,BrDict01),sort(BrDict01,BrDict012),retractall(brdict_pos(_)),assertz(brdict_pos(BrDict012)),SepandPad=".\n",split_string(Text1,SepandPad,SepandPad,Text2a),delete(Text2a,"",Text222),%%random(N1),N2 is round(9*N1)+1,length(N2L,N2),N2L=[_],findall(N3,(member(_,N2L),random_member(N3,Text222)),N4),%%writeln([n4,N4]),%%append_list(N4,Text2),findall(B2,(%%random(M1),M2 is round(9*M1)+1,length(M2L,M2),%%SepandPad2=" .\n",%%split_string(Text1,SepandPad2,SepandPad2,Text2aa),%%delete(Text2aa,"",M3),%%findall(M33,(member(_,M2L),random_member(M33,M3)),M4),M4 = Text222,%%writeln([m4,M4]),%%append_list(Text2aaa,M5),retractall(brdict(_)),assertz(brdict(M4)),member(B1,N4),%%trace,grammar_logic_to_alg(B1,B2)),C),length(C,CLength),writeln1([CLength,sentences]),C=[[[_,Sentence1,a_alg(List_a),_,bb_alg(List_bb)]|Cs1]|Cs2],%%get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list(["gla_del"],%%[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(["\"",File1,".txt\""],File2),term_to_atom(List_a,List_a2),string_atom(List_a3,List_a2),concat_list(["swipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_a3,"]],[[[n,function],[[v,a]],\":-\",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],\":-\",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],\":-\",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],\":-\",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_a1),writeln1([*,Sentence1,a_alg(List_a)]),writeln1(List_a1),concat_list(["\n\nswipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_a3,",[v,b]]],[[[n,function],[[v,a],[v,b]],\":-\",[[[n,tail],[[v,a],[v,b]]]]]],_),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_b1),writeln1([*,Sentence1,b_alg(List_a)]),writeln1(List_b1),term_to_atom(List_bb,List_bb2),string_atom(List_bb3,List_bb2),concat_list(["swipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_bb3,"]],[[[n,function],[[v,a]],\":-\",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],\":-\",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],\":-\",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],\":-\",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_bb1),writeln1([*,Sentence1,bb_alg(List_bb)]),writeln1(List_bb1),writeln1(Cs1),writeln1(Cs2).
%% have - I had the collection of 1D itemstest(47,[[n,sum],[[3,1,2],0,[v,l]]],[        [[n,sum],[[],[v,l],[v,l]]],        [[n,sum],[[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,+],[[v,m1],[v,h],[v,m2]]],                [[n,sum],[[v,t],[v,m2],[v,n]]]        ]        ]],[[[[v,l], 6]]]).%% I see to sorttest(48,[[n,sort0],[[9,4,8,2,1,5,7,6,3,10],[v,l]]],[        [[n,sort0],[[v,l],[v,n]],":-",        [       [[n,sort1],[[v,l],[],[v,n]]]        ]        ],        [[n,sort1],[[],[v,l],[v,l]]],        [[n,sort1],[[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,maximum],[[v,t],[v,h],[v,m2],[],[v,r]]],                [[n,wrap],[[v,m2],[v,m3]]],                [[n,append],[[v,m1],[v,m3],[v,m4]]],                [[n,sort1],[[v,r],[v,m4],[v,n]]]        ]        ],        [[n,maximum],[[],[v,l],[v,l],[v,r],[v,r]]],        [[n,maximum],[[v,l],[v,m1],[v,n],[v,r1],[v,r2]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,"->"],[[[n,>=],[[v,m1],[v,h]]],                        [[[n,=],[[v,m2],[v,m1]]],                        [[n,wrap],[[v,h],[v,h2]]],                        [[n,append],[[v,r1],[v,h2],[v,r3]]]],                        [[[n,=],[[v,m2],[v,h]]],                        [[n,wrap],[[v,m1],[v,m12]]],                        [[n,append],[[v,r1],[v,m12],[v,r3]]]]]],                [[n,maximum],[[v,t],[v,m2],[v,n],[v,r3],[v,r2]]]        ]        ]],[[[[v,l], [10,9,8,7,6,5,4,3,2,1]]]]).%% the aim of going to a place is reaching local maximum heighttest(49,[[n,maximum0],[[2,1,3,5,-1],[v,m]]],[        [[n,maximum0],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,maximum],[[v,t],[v,h],[v,m],[],[v,r]]]        ]        ],        [[n,maximum],[[],[v,l],[v,l],[v,r],[v,r]]],        [[n,maximum],[[v,l],[v,m1],[v,n],[v,r1],[v,r2]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,"->"],[[[n,>=],[[v,m1],[v,h]]],                        [[[n,=],[[v,m2],[v,m1]]],                        [[n,wrap],[[v,h],[v,h2]]],                        [[n,append],[[v,r1],[v,h2],[v,r3]]]],                        [[[[n,=],[[v,m2],[v,h]]]],                        [[n,wrap],[[v,m1],[v,m12]]],                        [[n,append],[[v,r1],[v,m12],[v,r3]]]]]],                [[n,maximum],[[v,t],[v,m2],[v,n],[v,r3],[v,r2]]]        ]        ]],[[[[v,m], 5]]]).%% the tutor gave the mark for either answertest(50,[[n,disjunction],["true","false",[v,c]]],[[[n,disjunction],["false","false","false"]],[[n,disjunction],[[v,a],[v,b],"true"],":-",[[[n,not],[[[[n,=],[[v,a],"false"]],[[n,=],[[v,b],"false"]]]]]]]]        ,[[[[v,c], "true"]]]).
%% have - I had the collection of 1D itemstest(47,[[n,sum],[[3,1,2],0,[v,l]]],[        [[n,sum],[[],[v,l],[v,l]]],        [[n,sum],[[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,+],[[v,m1],[v,h],[v,m2]]],                [[n,sum],[[v,t],[v,m2],[v,n]]]        ]        ]],[[[[v,l], 6]]]).%% I see to sorttest(48,[[n,sort0],[[9,4,8,2,1,5,7,6,3,10],[v,l]]],[        [[n,sort0],[[v,l],[v,n]],":-",        [       [[n,sort1],[[v,l],[],[v,n]]]        ]        ],        [[n,sort1],[[],[v,l],[v,l]]],        [[n,sort1],[[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,maximum],[[v,t],[v,h],[v,m2],[],[v,r]]],                [[n,wrap],[[v,m2],[v,m3]]],                [[n,append],[[v,m1],[v,m3],[v,m4]]],                [[n,sort1],[[v,r],[v,m4],[v,n]]]        ]        ],        [[n,maximum],[[],[v,l],[v,l],[v,r],[v,r]]],        [[n,maximum],[[v,l],[v,m1],[v,n],[v,r1],[v,r2]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,"->"],[[[n,>=],[[v,m1],[v,h]]],                        [[[n,=],[[v,m2],[v,m1]]],                        [[n,wrap],[[v,h],[v,h2]]],                        [[n,append],[[v,r1],[v,h2],[v,r3]]]],                        [[[n,=],[[v,m2],[v,h]]],                        [[n,wrap],[[v,m1],[v,m12]]],                        [[n,append],[[v,r1],[v,m12],[v,r3]]]]]],                [[n,maximum],[[v,t],[v,m2],[v,n],[v,r3],[v,r2]]]        ]        ]],[[[[v,l], [10,9,8,7,6,5,4,3,2,1]]]]).%% the aim of going to a place is reaching local maximum heighttest(49,[[n,maximum0],[[2,1,3,5,-1],[v,m]]],[        [[n,maximum0],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,maximum],[[v,t],[v,h],[v,m],[],[v,r]]]        ]        ],        [[n,maximum],[[],[v,l],[v,l],[v,r],[v,r]]],        [[n,maximum],[[v,l],[v,m1],[v,n],[v,r1],[v,r2]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,"->"],[[[n,>=],[[v,m1],[v,h]]],                        [[[n,=],[[v,m2],[v,m1]]],                        [[n,wrap],[[v,h],[v,h2]]],                        [[n,append],[[v,r1],[v,h2],[v,r3]]]],                        [[[[n,=],[[v,m2],[v,h]]]],                        [[n,wrap],[[v,m1],[v,m12]]],                        [[n,append],[[v,r1],[v,m12],[v,r3]]]]]],                [[n,maximum],[[v,t],[v,m2],[v,n],[v,r3],[v,r2]]]        ]        ]],[[[[v,m], 5]]]).%% the tutor gave the mark for either answertest(50,[[n,disjunction],["true","false",[v,c]]],[[[n,disjunction],["false","false","false"]],[[n,disjunction],[[v,a],[v,b],"true"],":-",[[[n,not],[[[[n,=],[[v,a],"false"]],[[n,=],[[v,b],"false"]]]]]]]]        ,[[[[v,c], "true"]]]).test(51,[[n,expressionnotheadache],["true",[v,c]]],[[[n,expressionnotheadache],["true","true"]],[[n,expressionnotheadache],[[v,a],"false"],":-",[[[n,not],[[[[n,=],[[v,a],"true"]]]]]]] ]       ,[[[[v,c], "true"]]]).
%% if last list, give warning, count so far and text%% ** if past, errorfind_br1([],_Start,_Len_needed,_Len_so_far1,_Text1,_Text2) :-concat_list(["Error: Start is past end of database."],A),   writeln(A),abort.
%% later: (test 58) omit if [v,f] failstest(57,[[n,findall1],[[n,plusone],[1,2,3],[],[v,d]]],[        [[n,findall1],[[v,f],[],[v,l],[v,l]]],        [[n,findall1],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[v,f],[[v,h],[v,m2]]],                [[n,wrap],[[v,m2],[v,m3]]],                [[n,append],[[v,m1],[v,m3],[v,m4]]],                [[n,findall1],[[v,f],[v,t],[v,m4],[v,n]]]        ]        ],        [[n,plusone],[[v,a],[v,c]],":-",        [       [[n,+],[[v,a],1,[v,c]]]        ]        ]],[[[[v,d], [2,3,4]]]]).test(58,[[n,findall1],[[n,a_to_c],["a","b","a"],[],[v,d]]],[        [[n,findall1],[[v,f],[],[v,l],[v,l]]],        [[n,findall1],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                %[[n,trace2]],                [[n,"->"],[[[v,f],[[v,h],[v,m2]]],                [       [[n,wrap],[[v,m2],[v,m3]]],                        [[n,append],[[v,m1],[v,m3],[v,m4]]]                ],                [                        [[n,=],[[v,m1],[v,m4]]]                ]]],                [[n,findall1],[[v,f],[v,t],[v,m4],[v,n]]]        ]        ],        [[n,a_to_c],["a","c"]        ]],[[[[v,d], ["c","c"]]]]).test(59,[[n,count],[1,[v,n]]],[        [[n,count],[1,2],":-",[[[n,cut]]]],        [[n,count],[1,3]]        ] ,[[[[v,n], 2]]]).test(60,[[n,a]],[[[n,a],":-",[[[n,interweaving1],[[["select,dash"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"]],[],[["select,dash"],["neiey,person"],["neiey,person"]]]],[[n,duplicates],[[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]]]],[[n,minus1],[[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[["select,dash"],["neiey,person"],["neiey,person"],["neiey,person"],["neiey,person"]],[]]],[[n,reverse],[[["select,dash"],["neiey,person"],["neiey,person"]],[],[["neiey,person"],["neiey,person"],["select,dash"]]]],[[n,interweaving1],[[["neiey,person"],["neiey,person"],["select,dash"]],[["hipaa,square"],["releases,up"],["hipaa,square"]],[],[]]],[[n,append1],[[],[["hipaa,square"],["releases,up"],["hipaa,square"]],[["hipaa,square"],["releases,up"],["hipaa,square"]]]],[[n,minus1],[[["hipaa,square"],["releases,up"],["hipaa,square"]],[["select,dash"],["neiey,person"],["neiey,person"]],[["hipaa,square"],["releases,up"],["hipaa,square"]]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,interweaving1],[[],[v,a],[v,l],[v,l]]],[[n,interweaving1],[[v,l1],[v,l2],[v,l3a],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,interweaving2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,interweaving1],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,interweaving2],[[v,a],[],[v,l],[v,l]]],[[n,interweaving2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%[[n,interweaving2],[[v,i1],[v,l4],[v,l5],[v,l3]]]]],[[n,interweaving2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,interweaving2],[[v,i1],[v,l4],[v,l2],[v,l3]]]]],[[n,append1],[[v,b],[v,c],[v,a]],":-",[[[n,append],[[v,b],[v,c],[v,a]]]]],[[n,minus1],[[v,l],[],[v,l]]],[[n,minus1],[[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l2],[v,i1]]],[[n,tail],[[v,l2],[v,l5]]],[[n,delete2],[[v,l1],[v,i1],[],[v,l6]]],[[n,minus1],[[v,l6],[v,l5],[v,l3]]]]],[[n,delete2],[[],[v,a],[v,l],[v,l]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l5]]],[[n,delete2],[[v,l5],[v,i1],[v,l2],[v,l3]]]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l5]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,wrap],[[v,i2],[v,i21]]],[[n,append],[[v,l2],[v,i21],[v,l6]]],[[n,delete2],[[v,l5],[v,i1],[v,l6],[v,l3]]]]],[[n,mutuallyexclusive],[[],[v,l]]],[[n,mutuallyexclusive],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,membera3],[[v,m],[v,h]]],[[n,mutuallyexclusive],[[v,t],[v,m]]]]],[[n,membera3],[[],[v,l]]],[[n,membera3],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera3],[[v,t],[v,m]]]]],[[n,duplicates],[[],[v,l],[v,s],[v,s]]],[[n,duplicates],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,member],[[v,h],[v,m]]],[[n,"->"],[[[n,deletea2],[[v,m],[v,h],[v,m1]]],[[n,true]],[[n,=],[[v,m],[v,m1]]]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,s1],[v,h1],[v,s3]]],[[n,duplicates],[[v,t],[v,m1],[v,s3],[v,s2]]]]],[[n,duplicates],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,membera4],[[v,m],[v,h]]]]],[[n,duplicates],[[v,t],[v,m],[v,s1],[v,s2]]]]],[[n,deletea2],[[],[v,l],[v,m1]],":-",[[[n,fail]]]],[[n,deletea2],[[v,l],[v,m],[v,t]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,l],[v,m],[v,m1]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,t],[v,m],[v,m1]]]]],[[n,membera4],[[],[v,l]],":-",[[[n,fail]]]],[[n,membera4],[[v,l],[v,h]],":-",[[[n,head],[[v,l],[v,h]]]]],[[n,membera4],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera4],[[v,t],[v,m]]]]],[[n,part_of_string],[[],[]]],[[n,part_of_string],[[],[v,b]],":-",[[[n,not],[[[n,=],[[v,b],[]]]]],[[n,fail]]]],%%[[n,part_of_string],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,at]]],[[n,"->"],[[[n,listhead],[[v,a],[v,b]]],[[[n,true]]],[[[n,part_of_string],[[v,at],[v,b]]]]]]]],[[n,part_of_string],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,at]]],[[n,"->"],[[[[n,listhead],[[v,a],[v,b]]]],[[[n,true]]],[[[n,part_of_string],[[v,at],[v,b]]]]]]]],[[n,listhead],[[v,l],[]]],[[n,listhead],[[v,a],[v,b]],":-",[[[n,head],[[v,a],[v,ah]]],[[n,tail],[[v,a],[v,at]]],[[n,head],[[v,b],[v,ah]]],[[n,tail],[[v,b],[v,bt]]],[[n,listhead],[[v,at],[v,bt]]]]],[[n,listhead],[[v,a],[v,b]],":-",[[[n,head],[[v,a],[v,ah]]],[[n,tail],[[v,a],[v,at]]],[[n,head],[[v,b],[v,ah]]],[[n,tail],[[v,b],[v,bt]]],[[n,listhead],[[v,at],[v,bt]]]]]],[[]]).test(61,[[n,add],[[1,2,3],3,[],[v,l]]],[        [[n,add],[[],[v,th],[v,l],[v,l]]],        [[n,add],[[v,l],[v,th],[v,m],[v,n]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,+],[[v,h],[v,th],[v,h0]]],                [[n,wrap],[[v,h0],[v,h1]]],                [[n,append],[[v,m],[v,h1],[v,o]]],                [[n,add],[[v,t],[v,th],[v,o],[v,n]]]        ]        ]],[[[[v,l], [4,5,6]]]]).
%% mind read test%% Make files different for different tests%% *** Important: initialise program before running for the first time:%% N is 1*2*3*5,texttobr2(N). %% 100 As for 1 (turned on)*2 (to and from computer)*3 (rb, itself (already done), graciously give or blame, radio button for graciously give or blame)*5 (5 objects)%% N is 1*2*3*5,texttobr2(N). %% 100 As for 1 (turned off)*2 (to and from computer)*3 (rb, itself (already done), graciously give or blame, radio button for graciously give or blame)*5 (5 objects)%% also breason out and dot on objects before line above and breason out and dot on when recognising and saying object (with all objects having different breasonings)%%use_module(library(pio)).
%% n intro, vn verse, c chorus, i1 instrumental1, t2, instrumental 2, s solo, o outrorhythm2(R10,R2) :-% ta a a a(n), ta a a, ta a, ta, ti( )ca ti, same for za% delete space, replace with length% simplify time, ff fracstring_concat(R101,".",R10),string_strings(R101,R11),delete(R11," ",R12),foldr(string_concat,R12,R13),process_rhythm(R13,R14),split_on_substring1(R14,"bcdefghijklm",R15),%trace,find_rhythm(0,1,R15,[],R2),(R2=[]->true;(%trace,reverse(R2,[[T,_,L,_,_]|_]),term_to_atom(T1,T),term_to_atom(L1,L),Total is T1+L1,not(Total>4))),!.
%% oh enough oxygen and exposure to a source of heat or temperature above the flash point to fm flammable material -> f fire%% ofh sufficient oxygen, fuel and heat to f fire -> fcre - fire chain reaction and exitquiz([["t","Leaves absorb Carbon Dioxide."],["f","Plants absorb oxygen"],["f","25% of the human body is water"],["t","Not all fishes drink water."],["f","The largest fish is 5 metres long."],["t","Normal body temp. is 95.6 degrees F."],["f","Normal body temp. is 36.7 degrees F."],["f","Human blood has 90 000 red blood cells."],["t","A human heart beats 100 000 times daily."]]).
%% only want 2vp to be used if last callconvert_to_grammar_part2(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3) :-Body1=[Item|Items],call1(Item),(last_call_or_terminal2(Items)->convert_to_grammar_part31(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3);convert_to_grammar_part32(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3)), !.
%% only_ssi_test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resultonly_ssi_test(Debug,NTotal,Score) :- only_ssi_test(Debug,0,NTotal,0,Score),!.
%% only_ssi_test individual cases, Debug=trace=on or off, N=case number, Passed=output=resultonly_ssi_test1(Debug,N,Passed) :-only_ssi_test(N,Query,Functions,Result),((international_lucianpl([lang,"en"],Debug,Query,Functions,Result1),%writeln1([result1,Result1]),Result=Result1)->(Passed=passed,writeln0([only_ssi_test,N,passed]));(Passed=failed,writeln0([only_ssi_test,N,failed]))),!.
%% optimise([[append,[a,a,d]],[append,[a,a,e]],[append,[a,a,f]],[append,[a,b,g]]],[g],P).
%% optimise([[append,[a,a,d]],[append,[a,a,e]],[append,[a,a,f]],[append,[a,b,g]]],[g],P).optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program2) :-findrulesflowingtopv1(Program1,InputVars1,InputVars2,PenultimateVars,[],Rules,true),%%findrulesflowingtopv1a(Program1,_Program32,InputVars1,InputVars2,PenultimateVars,[],_Rules1),intersection(Program1,Rules,Program3),unique1(Program3,[],Program2).
%% optimise([[append,[a,a,d]],[append,[a,a,e]],[append,[a,a,f]],[append,[a,b,g]]],[g],P)./**optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program2) :-reverse(Program1,Program4),findrulesflowingtopv1(Program4,InputVars1,InputVars2,PenultimateVars,[],Rules,true),%%findrulesflowingtopv1a(Program1,_Program32,InputVars1,InputVars2,PenultimateVars,[],_Rules1),intersection(Program1,Rules,Program3),unique1(Program3,[],Program2).
%% p2lpconverter(S1),pp0(S1,S2),writeln(S2).
%% replace("a\nb","\n","<br>\n",F).
%% replace("a\nb","\n","<br>\n",F).%% F="a<br>\nb<br>\n".
%% replace("a\nb","\n","<br>\n",F).%% F="a<br>\nb<br>\n".replace(A,Find,Replace,F) :- split_string(A,Find,Find,B),findall([C,Replace],(member(C,B)),D),maplist(append,[D],[E]),concat_list(E,F).concat_list1(D,F) :-maplist(append,[D],[E]),concat_list(E,F).
%% sheet_feeder(T),writeln(T).
%% specific locslocation(8,3,"Cottage") :- !.
%% specific locs/**location(5,14,16,"Highway") :- !.
%% specific locslocation(5,14,16,"Highway") :- !.
%% specific locslocation(_,_,_,"Fire Lab") :- !.
%% specific locslocation(_,_,_,"Maze") :- !.
%% split_on_phrases1("grand title","phrasesfile.txt","inputfile.txt").split_on_phrases1(Title,PhrasesFile,InputFile) :-get_phrases(PhrasesFile,Phrases),split_on_phrases2(Phrases,InputFile,Text,Title),write_files(Text),!.
%% ssi_test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resultssi_test_open_types(Debug,NTotal,Score) :- ssi_test_open_types(Debug,0,NTotal,0,Score),!.
%% ssi_test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resultssi_test_types(Debug,NTotal,Score) :- ssi_test_types(Debug,0,NTotal,0,Score),!.
%% ssi_test individual cases, Debug=trace=on or off, N=case numberssi_testopen1(Debug,N) :-testopen_cases(N,Query,Functions),((international_lucianpl([lang,"en"],Debug,Query,Functions,Result),not(Result=[]))->(writeln0([ssi_test,N,result,Result]),writeln0([ssi_test,N,passed]));(writeln0([ssi_test,N,failed]))),!.
%% ssi_test individual cases, Debug=trace=on or off, N=case number, Passed=output=resultssi_test1(Debug,N,Passed) :-test(N,Query,Functions,Result),((international_lucianpl([lang,"en"],Debug,Query,Functions,Result1),%writeln1([result1,Result1]),Result=Result1)->(Passed=passed,writeln0([ssi_test,N,passed]));(Passed=failed,writeln0([ssi_test,N,failed]))),!.
%% ssi_test individual cases, Debug=trace=on or off, N=case number, Passed=output=resultssi_test_open_types1(Debug,N,Passed) :-test_open_types_cases(N,Query,Types,Modes,Functions),(((international_lucianpl([lang,"en"],Debug,Query,Types,Modes,Functions,Result),not(Result=[]))%%writeln(Result1),%%Result=Result1)->(Passed=passed,writeln0([ssi_test_open_types,N,result,Result]),writeln0([ssi_test_open_types,N,passed]));(Passed=failed,writeln0([ssi_test_open_types,N,failed]))),!.
%% ssi_test individual cases, Debug=trace=on or off, N=case number, Passed=output=resultssi_test_types1(Debug,N,Passed) :-test_types_cases(N,Query,Types,Modes,Functions,Result),((international_lucianpl([lang,"en"],Debug,Query,Types,Modes,Functions,Result1),%writeln(Result1),Result=Result1)->(Passed=passed,writeln0([ssi_test_types,N,passed]));(Passed=failed,writeln0([ssi_test_types,N,failed]))),!.
%% ssi_test_all0(test,4,"en",off,A,B).
%% ssi_test_all00("en",off,NTotal,Score).
%% ssi_test_all01 individual cases, Debug=trace=on or off, N=case number, Passed=output=result%% ssi_test_all01(test,            4,"en2",off,1,Passed).
%% ssi_test_all01(test,_,"en",off,1,Passed).
%% ssi_test_all_bt01 individual cases, Debug=trace=on or off, N=case number, Passed=output=result%% ssi_test_all_bt01(ssi_test,            4,"en2",off,1,Passed).
%% ssi_test_pl cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resultssi_test_pl(Debug,NTotal,Score) :- ssi_test_pl(Debug,0,NTotal,0,Score),!.
%% ssi_test_pl individual cases, Debug=trace=on or off, N=case number, Passed=output=resultssi_test_pl1(Debug,N,Passed) :-test_pl(N,Query,Functions,Result),p2lpconverter_command([string,Query],Query1),p2lpconverter([string,Functions],Functions1),p2lpconverter_term([string,Result],Result2),((international_lucianpl([lang,"en"],Debug,Query1,Functions1,Result1),%writeln1([result1,Result1]),Result2=Result1)->(Passed=passed,writeln0([ssi_test_pl,N,passed]));(Passed=failed,writeln0([ssi_test_pl,N,failed]))),!.
%% test_all01 individual cases, Debug=trace=on or off, N=case number, Passed=output=result%% test_all01(test,            4,"en2",off,1,Passed).
%% test_all01 individual cases, Debug=trace=on or off, N=case number, Passed=output=result%% test_all01(test,            4,"en2",off,1,Passed).%% test_all01(test_types_cases,6,"en2",off,1,Passed).
%% test_all_bt01 individual cases, Debug=trace=on or off, N=case number, Passed=output=result%% test_all_bt01(test,            4,"en2",off,1,Passed).
%% test_pl cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resulttest_pl(Debug,NTotal,Score) :- test_pl(Debug,0,NTotal,0,Score),!.
%% test_pl individual cases, Debug=trace=on or off, N=case number, Passed=output=resulttest_pl1(Debug,N,Passed) :-test_pl(N,Query,Functions,Result),p2lpconverter_command([string,Query],Query1),p2lpconverter([string,Functions],Functions1),%trace,p2lpconverter_term([string,Result],Result2),((international_interpret([lang,"en"],Debug,Query1,Functions1,Result1),%writeln1([result1,Result1]),Result2=Result1)->(Passed=passed,writeln0([test_pl,N,passed]));(Passed=failed,writeln0([test_pl,N,failed]))),!.
%% test_run_all cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resulttest_run_all(Debug,NTotal,Score) :- test_run_all(Debug,0,NTotal,0,Score),!.
%% test_run_all individual cases, Debug=trace=on or off, N=case number, Passed=output=resulttest1(Debug,N,Passed) :-functions(Functions),test_run_all(N,Query,Function1,Result),(((findall([Function,R],(member(Function,Functions),international_interpret([lang,"en"],Debug,Query,Function,R)%%,writeln1(R)),Rs),%%writeln(Rs),%%writeln1([Function1,Result,Rs]),%%member([Function1,Result],Rs)),member([Function1,Result],Rs))%%Function1=Function10,Result=Result0%%Result=Result1)->(Passed=passed,writeln([test_run_all,N,passed]));(Passed=failed,writeln([test_run_all,N,failed]))),!.
%% test_run_all individual cases, Debug=trace=on or off, N=case number, Passed=output=resulttest1(Debug,N,Passed) :-functions(Functions),test_run_all(N,Query,Function1,Result),(((findall([Function,R],(member(Function,Functions),international_interpret([lang,"en"],Debug,Query,Function,R)%%,writeln1(R)),Rs),%%writeln(Rs),%%writeln1([Function1,Result,Rs]),%%member([Function1,Result],Rs)),member([Function1,Result],Rs))%%Function1=Function10,Result=Result0%%Result=Result1)->(Passed=passed,writeln0([test_run_all,N,passed]));(Passed=failed,writeln([test_run_all,N,failed]))),!.
%% true%% a([a,c,b],[1,1,[a,d]],[1,2,[b]]).
%% true%% a([a,c,b],[1,1,[a,d]],[1,2,[b]]).%% a([a,c,b],[1,1,[a,c]],[1,2,[b]]).
%% true%% a([a,c,b],[1,1,[a,d]],[1,2,[b]]).%% a([a,c,b],[1,1,[a,c]],[1,2,[b]]).%% a([a,b],[1,1,[a]],[1,2,[b]]).
%% true%% a([a,c,b],[1,1,[a,d]],[1,2,[b]]).%% a([a,c,b],[1,1,[a,c]],[1,2,[b]]).%% a([a,b],[1,1,[a]],[1,2,[b]]).%% false%% a([c,d],[1,1,[a]],[1,2,[b]]). %% q in "q a b" sends food like e in "c d e"/**[debug]  ?- a([q,e,r,a,t,y,u,q,e,r,a,t,y,u,c,b,x,v,n,m],[1,1,[c,a,t,y,u]],[1,2,[c,a,t,y,u]]).    [[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[c,a,t,y,u]],[r,a,t,y,u]]true.
%% use_module(library(pio)). %% In la_strings%% use_module(library(dcg/basics)). %% In la_strings%% texttobr2 - converts file stream to dimensions of objects represented by the words%% has object name as separate field for new users of texttobr to verify breasonings by hand%% brdict1.txt contains word and object name, brdict2.txt contains object name and x, y and z%% texttobr2(Runs,File,StringtoBreason,BreasoningLimit).
%% vetusia user interface%:-include('Theology/theology3.7.1.3_vetusia3d.pl').
%% vetusia user interface:-include('Theology/theology3.7.1.3_vetusia3d.pl').
%% write_exposition([[[1,"g1"],[1,"g1"]],[[1,1,_15410,_15416,"a1","a1 is in g1."],[1,2,_15352,_15358,"a2","g1 contains a2."],[1,1,_15410,_15416,"a1","a1 is in g1."],[2,2,_15352,_15358,"a2","g1 contains a2."]]],A).
%%%/*ssi_interpretpart(member,Variable1,Variable2,Vars1,Vars2,Vars2c,AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member",Dbw_member),AC=[[_Dbw_n,_Dbw_member],[Value1,Value2],[Value1a,Value2a]],        %getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_member],[Value1,Value2]]),  %(((not(Value2=empty)->member(Value2,Value1),%((findall([[Value1,Value3],Vars2b,Value3],(member(Value3,Value1),%putvalue_equals4(Variable2,Value3,Vars1,Vars2b)%%,Vars2=Vars1%),Vars2a),Vars2a=[[_,Vars2,Value3]|Vars2d],%findall([[Value11,Value21],Vars2e],member([[Value11,Value21],Vars2e,Value31],Vars2d),Vars2c1),%Vars2c=[[[Dbw_n,Dbw_member],[Value1,Value2],Value3]|[Vars2c1]]%)->      debug_exit(Skip,[[Dbw_n,Dbw_member],[Value1,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_member],[Value1,Value2]])),!.
%%% LEGACY INTERPRET FOR SSI        interpretstatement1(ssi,_Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-get_lang_word("v",Dbw_v),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("interpret",Dbw_interpret1),Dbw_interpret1=Dbw_interpret,%%writeln1("h1/10"),%trace,%find_pred_sm(Reserved_words1),        ((Query1=[[Dbw_n,Dbw_interpret],[[lang,Lang1],Debug1,[Function,Arguments],Functions%,Result        ]],Tm=off%,        %not(member(Dbw_call,Reserved_words1))        )->true;        (Query1=[[Dbw_n,Dbw_interpret],[[lang,Lang1],Debug1,[Function,Arguments],Types,Modes,Functions%,Result        ]],Tm=on)),                        %trace,                lang(Lang2a),        types(Types2a),  (Types2a=on->(typestatements(TypeStatements2a),  modestatements(ModeStatements2a));true),          (Lang1=same->lang(Lang2);Lang2=Lang1),        (Debug1=same->debug(Debug2);Debug2=Debug1),                %%not(Function=[n,grammar]->true;Function=[n,grammar_part]), ****%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),        %%***writeln1(substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs)),        ((Function=[Dbw_v,F_name],                not(reserved_word2(F_name)))->        (append([Function],Arguments,Arguments1),        substitutevarsA1(Arguments1,Vars1,[],Vars3,[],FirstArgs),        Vars3=[Function1|Vars31],        Query2=[Function1,Vars31]);        (substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs),        %simplify(Vars32,Vars3), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln1([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),        Query2=[Function,Vars3]        %not(reserved_word2(Vars3))        )), %% Bodyvars2?%%        debug(on)->writeln1([call,[Function,[Vars3]]]),%%writeln1(["Query2",Query2,"Functions0",Functions0]),                        %interpret2(Query2,Functions0,Functions0,Result1),         (Tm=off->international_interpret([lang,Lang2],Debug2,Query2,Functions,Result1a);international_interpret([lang,Lang2],Debug2,Query2,Types,Modes,Functions,Result1a)),member(Result1,Result1a),retractall(lang(_)), assertz(lang(Lang2a)),retractall(types(_)), assertz(types(Types2a)),  (Types2a=on->(  retractall(typestatements(_)),  %findall([A,C],(member([A,B],TypeStatements2a),expand_types(B,[],C)),TypeStatements2a1),assertz(typestatements(TypeStatements2a)),retractall(modestatements(_)), assertz(modestatements(ModeStatements2a)));true),updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],(%trace,unique1(Vars7,[],Vars8)%,notrace));(%%writeln1(here1),Vars8=[])).        interpretstatement1(non-ssi,Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-                %trace,               %writeln(interpretstatement1(ssi,Functions0,_Functions,Query1,Vars1,Vars8,true,nocut)),get_lang_word("v",Dbw_v),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("call",Dbw_call1),Dbw_call1=Dbw_call,%%writeln1("h1/10"),%trace,%writeln([Functions0,Functions0]),%find_pred_sm(Reserved_words1),        %trace,        ((Query1=[[Dbw_n,Dbw_call],[Function,Arguments]]%,        not_reserved_word(Function,Reserved_words1)        )->true;(Query1=[Function,Arguments]%not(reserved_word2(Function))%,Function=[Dbw_n1,Function_a],atom_string(Function_a,Function_s),%,not_reserved_word(Function,Reserved_words1)))),%trace,        %%not(Function=[n,grammar]->true;Function=[n,grammar_part]), ****%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),        %%***writeln1(substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs)),        ((Function=[Dbw_v,F_name],                not(reserved_word2(F_name)))->        (%trace,        append([Function],Arguments,Arguments1),        %trace,        substitutevarsA1(Arguments1,Vars1,[],Vars3,[],FirstArgs),        Vars3=[Function1|Vars31],        Query2=[Function1,Vars31]        );        (%trace,                                substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs),                Query2=[Function,Vars3],                Function=[Dbw_n,F_name],                not(reserved_word2(F_name))        %simplify(Vars32,Vars3), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%writeln1([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),        %not(reserved_word2(Vars3))        )), %% Bodyvars2?%(Function=[n,compound213]->%true%trace%;true),        %trace,%%        debug(on)->writeln1([call,[Function,[Vars3]]]),%%writeln1(["Query2",Query2,"Functions0",Functions0]),%trace,%writeln1(interpret2(Query2,Functions0,Functions0,Result1)),        interpret2(Query2,Functions0,Functions0,Result1),               %trace,          %writeln1(interpret2(Query2,Functions0,Functions0,Result1)),%writeln1(updatevars2(FirstArgs,Result1,[],Vars5)),updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],(%trace,unique1(Vars7,[],Vars8)%,notrace));(%%writeln1(here1),Vars8=[])).
%%%%/* interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4_on]|_],Vars,Vars,true,nocut,[]) :- %writeln(here),interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4_on]|_],Vars,Vars,true,nocut).
%%%%count21(C) :- count2(C).
%%%%*****cawptest2(6,function3,[],2,1,4,[2],[1],[[[[[[v,a],1],[[v,b],1]],[[[v,c],2]],true],[[[[v,a],1],[[v,b],2]],[[[v,c],3]],true],[[[[v,a],1],[[v,b],1]],[[[v,c],1]],fail],[[[[v,a],1],[[v,b],1]],[[[v,c],3]],fail]]],[ %% Algorithm dictionary[[[n,function1],2,1],[[v,a],[v,b],[v,c]],":-", [[[n,+],[[v,a],[v,b],[v,c]]]]]],[ %% Result[[n,function1],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,c]]]]],[[n,function3],[[v,a],[v,b],[v,c]],":-",[[[n,function1],[[v,a],[v,b],[v,d]]],[[n,=],[[v,d],[v,c]]]]]]).
%%**** load:`['../Text-to-Breasonings/text_to_breasonings.pl'].`%% this file:- include('../listprologinterpreter/la_strings').string(String) --> list(String).
%%*del:Functions2,%% *** don't worry about sublevels, just level numbers x%ssi0% newer than comments in next section:% go to types, pred or lines pred % - whether this pred determines which to go to, or it is already decided x%  - * sm connects types at start - no call/exit preds, just goes to next item in sm,%    - types sm creator - checks types (do non types sm first)%  - * sm of preds (to clauses from calls, allowing backtracking)% - whether need call and exit preds, or do anyway x/**ssi1([Level,Sublevel,"predicate",Query,Predicate_numbers_finished,All_predicate_numbers],Functions1,Result1,Result2,Choice_point_trail1,Choice_point_trail2) :- append(Predicate_numbers_finished,Curr_predicate_queue,All_predicate_numbers), (Curr_predicate_queue=[]->  (% No other clauses of this predicate to try  % add to cps append(Choice_point_trail1,[[Level,Sublevel,"predicate",Query,Predicate_numbers_finished,All_predicate_numbers]],Choice_point_trail3),   %call first line%*   % when reach last line: %predicate finished, no more results from it  % if level 1 end x, call prev cp %- if not level 1 call prev lev - find var state of last line of prev lev - update vars %  ) ;( % Some clauses of this predicate left to try  % add to cps % call first line of pred,  % when reach last line, call next clause (dup vars *(one list for old results, one for curr results x label var results with cp, *sublevel at least x, also need ()x-predicate and line numbers*), add to new var list, delete cps back to pred call)  % * var results/cps saved from where began when try each clause, deleted back until and to when trying and failing respectively  )),  % * return from call-header to call first line x check types without being called by pred header (do separately) % * check types separately (and call, exit separately) from pred, line (after pred) % when call a pred from a line, use lpi_list_rec find_result etc % * predicates and lines have separate call and exit/fail preds% * second sm for types, pred, lines % when retries, deletes vars, cps up to and not including that call (*cps have sublevel to delete back until)call_first_line1() :-query_to_vars(), Sublevel2 is Sublevel1+1, ssi1([Level,Sublevel2,"line",1, % line number Query*,Predicate_numbers_finished,All_predicate_numbers],Functions1,Result1,Result2,Choice_point_trail1,Choice_point_trail2), query_to_vars(Query,) :-  %****  find_called_lines(Query,Functions1,Predicate_numbers), ssi_call(Query,Functions1,Predicate_numbers,Result1), true.
%%:- include('distances.pl').
%%:- include('distances.pl').:- use_module(library(date)).
%%:- include('edit.pl').
%%:- include(library(edit)).
%%:- use_module(library(time)).
%%:- use_module(library(time)).%% Test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resultp2lp_test(NTotal,Score) :- p2lp_test(0,NTotal,0,Score),!.
%%:- use_module(library(time)).%% Test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resulttest(Debug,NTotal,Score) :- test(Debug,0,NTotal,0,Score),!.
%%:- use_module(library(time)).%% Test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resulttest_types(Debug,NTotal,Score) :- test_types(Debug,0,NTotal,0,Score),!.
%%:- use_module(library(time)).%% ssi_test cases, Debug=trace=on or off, NTotal=output=total cases, Score=output=resultssi_test(Debug,NTotal,Score) :- ssi_test(Debug,0,NTotal,0,Score),!.
%%[[[n,a2],[[v,a],[v,b]],:-,[[[n,+],[[v,a],1,[v,c]]],[[n,=],[[v,c],[v,b]]]]],[[n,add0],[[v,a],[v,b]],:-,[[[n,a2],[[v,a],[v,c]]]]]]%% () Can underscore vars in spec, ignore in choose var, everyvarcovered%% Was test 9 on bu16cawptest2(3,add,[[[n,[]],1,0],[[n,"_"],1,0]],1,1,1,[1],[0],[/**[[[[[v,a],[1,2,3]],[[v,b],3],[[v,c],[]]],[[[v,d],[4,5,6]],[[v,e],[2,3]]],true],**/[[[[[v,a],3]],[],true]]/**[[[[[[v,a],[1,2,3]],[[v,b],3],[[v,c],[]]],[[[v,d],[4,5,6]],[[v,e],[2,3]]],true],[[[[v,a],[]],[[v,b],3],[[v,c],[4,5,6]]],[[[v,d],[4,5,6]],[[v,e],5]],true]]]],**/],[ %% Algorithm dictionary],%% Result[[[n,add],[[v,a]],":-",[[[n,"_"],[[v,a]]]]]]/**[[n,1],[[v,a],[v,b],[v,c],[v,d]],":-", %% Test by self[[[n,[]],[[v,c]]]]],[[n,add],[[v,a],[v,b],[v,c],[v,d]],":-",[[n,1],[[v,a],[v,b],[v,c],[v,d]]]]**/).
%%[a,b]%%[c,d]generate_sentence(Item,Sentence) :-random_member(Grammar1,[[n,v,n,n,v,a,n,v,n,v,a,n],[n,v,n],[n,v,a,n],[v,n],[v,a,n]]),brdict_pos(BrDict012),find_pos(Item,POS,BrDict012),substitute1(Item,POS,Grammar1,[],Grammar2),substitute2(Grammar2,BrDict012,[],Sentence).
%%[a,b]%%[c,d]generate_sentence(Item,Sentence) :-random_member(Grammar1,[[n,v,n],[n,v,a,n],[v,n],[v,a,n]]),brdict(BrDict012),find_pos(Item,POS,BrDict012),substitute1(Item,POS,Grammar1,[],Grammar2),substitute2(Grammar2,BrDict012,[],Sentence).
%%a(_) -->",".%%line([]) --> newlines1(_),!.
%%a1%% write_exposition([[[1,"g1"]],[[1,1,_15410,_15416,"a1","a1 is in g1."],[1,2,_15352,_15358,"a2","g1 contains a2."]]],A),writeln1(A).
%%a1%% write_exposition([[[1,"g1"]],[[1,1,_15410,_15416,"a1","a1 is in g1."],[1,2,_15352,_15358,"a2","g1 contains a2."]]],A),writeln1(A).%% A = "a1  a1 is in g1.  a2  g1 contains a2.  ".%% write_exposition([[[1,"g1"],[1,"g1"]],[[1,1,_15410,_15416,"a1","a1 is in g1."],[1,2,_15352,_15358,"a2","g1 contains a2."],[1,1,_15410,_15416,"a1","a1 is in g1."],[2,2,_15352,_15358,"a2","g1 contains a2."]]],A).
%%ae be with predicate support alsorule5(RuleName,Var,Vara,VarList,VarList3,Rule,Var1,Var2) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Vara,Var1,Var2]],!.
%%caw01([],_,_Predicates,_PredicateName,_Rules3,_MaxLength,_MaxPredicates,_New_rule_number1,_New_rule_number2,Program,Program) :- !. %% Recently added *****caw01([],[],_Predicates,_PredicateName,_Rules3,_MaxLength,_MaxPredicates,_New_rule_number1,_New_rule_number2,_Program1,_Program2,_) :- %%writeln(here1),%%writeln1(["Error: No specification for predicate.  Program so far:",Program1,"\n\nPredicate number:",New_rule_number]),abort,!.
%%caw1(_Query,_PredicateName,_Rules,_MaxLength,_VarList,_InputVars1,_InputVars2,_InputVars3,_OutputVarList,_OutputVars,_Program1,_Program4,Ps,Ps) :- writeln(here1),!.
%%changelength(_Melody2Length,Melody,Melody) :- !.
%%changelength(_Melody2Length,Melody,Melody) :- !.changelength(Lyrics2Length,Melody2Length,Melody,Melody) :-Lyrics2Length=Melody2Length,!.changelength(Lyrics2Length,Melody2Length,Melody1,Melody2) :-Lyrics2Length > Melody2Length,Length is Lyrics2Length-Melody2Length,repeatlastnote1(Length,Melody1,Melody2).
%%changelengthh(_Melody2Length,Melody,Melody) :- !.
%%changelengthh(_Melody2Length,Melody,Melody) :- !.changelengthh(Lyrics2Length,Melody2Length,Melody,Melody) :-Lyrics2Length=Melody2Length,!.
%%file([]) --> [].
%%file([]) --> [].file([L|Ls]) --> entry(L),",",%%{writeln(L)}, %%***file(Ls), !. %% file(Ls),{M=[Ls]})), !. %%, {writeln(["l",L])},",", file(Ls), {writeln(["ls",Ls])},!. %%, {append(L,Ls,M)}, !.file([L]) --> entry(L), %%{writeln(L)},!. %%(entry(L),{M=L});{M=[],(writeln("Warning - Entry in incorrect format.")%%,abort%%)}, !.
%%file([]) --> [].file([L|Ls]) --> entry(L),",",%%{writeln(L)}, %%***file(Ls), !. %% file(Ls),{M=[Ls]})), !. %%, {writeln(["l",L])},",", file(Ls), {writeln(["ls",Ls])},!. %%, {append(L,Ls,M)}, !.file([L]) --> entry(L), %%{writeln(L)},!. %%(entry(L),{M=L});{M=[],(writeln("Warning - Entry in incorrect format.")%%,abort%%)}, !.entry([Word2,Word4]) -->"[", word(Word), {string_codes(Word2,Word),string(Word2)},",",           word(Word3), {string_codes(Word4,Word3),string(Word4)},           "]".
%%file([]) --> [].file([L|Ls]) --> entry(L),",",%%{writeln(L)}, %%***file(Ls), !. %% file(Ls),{M=[Ls]})), !. %%, {writeln(["l",L])},",", file(Ls), {writeln(["ls",Ls])},!. %%, {append(L,Ls,M)}, !.file([L]) --> entry(L), %%{writeln(L)},!. %%(entry(L),{M=L});{M=[],(writeln("Warning - Entry in incorrect format.")%%,abort%%)}, !.entry([Word2,Word4]) -->"[", word(Word), {string_codes(Word2,Word),string(Word2)},",",           word(Word3), {string_codes(Word4,Word3),string(Word4)},           "]".splitfurthert(BrDict01,N) :-   phrase(file0t(N),BrDict01).
%%file([]) --> [].file3([L|Ls]) --> entry2(L),",",%%{writeln(L)}, %%file3(Ls), !. file3([L]) --> entry2(L), %%{writeln(L)},!.
%%file([]) --> [].filet([L|Ls]) --> entryt(L),",",%%{writeln(L)}, %%***filet(Ls), !. %% file(Ls),{M=[Ls]})), !. %%, {writeln(["l",L])},",", file(Ls), {writeln(["ls",Ls])},!. %%, {append(L,Ls,M)}, !.filet([L]) --> entryt(L), %%{writeln(L)},!. %%(entry(L),{M=L});{M=[],(writeln("Warning - Entry in incorrect format.")%%,abort%%)}, !.entryt([Word2,X3,Y3,Z3]) -->"[", word(Word), {string_codes(Word2,Word),string(Word2)},",",      digits(X),",",{atom_codes(X2,X),atom_number(X2,X3),number(X3)},           digits(Y),",",{atom_codes(Y2,Y),atom_number(Y2,Y3),number(Y3)},           digits(Z),{atom_codes(Z2,Z),atom_number(Z2,Z3),number(Z3)},           "]".
%%file2([Entries]) --> "[", file4(Entries), "]", !.%%%%file2([]) --> [].
%%find("Who is the song about?",Character) :-%%trialy2(["Ma","til","da"],["Jo","se","phine"],["Hap","py"],["Ha","rold"],R),%%findbest(R,Character).
%%findrulesflowingtopv2([],Program,Program,_,_,Rules,Rules).
%%get_members(0,_,Vars,Vars):-true.
%%get_members(0,_,Vars,Vars):-true.get_members(_,[],Vars,Vars).
%%interpretstatement1(_F0,[],_,Vars,Vars,true,nocut) :- !%%writeln("AND HERE!")%%.
%%interpretstatement1(_F0,[],_,Vars,Vars,true,nocut) :- !%%writeln("AND HERE!")%%.interpretstatement1(_F0,_Functions,[[n,cut]],Vars,Vars,true,cut) :- !.
%%interpretstatement1(_F0,[],_,Vars,Vars,true,nocut) :- !%%writeln("AND HERE!")%%.interpretstatement1(_F0,_Functions,[cut,[]],Vars,Vars,true,cut) :- !.
%%interpretstatement1(_F0,[],_,Vars,Vars,true,nocut) :- !%%writeln1("AND HERE!")%%.interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_cut]],Vars,Vars,true,cut) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("cut",Dbw_cut1),Dbw_cut1=Dbw_cut,!.
%%interpretstatement1(_F0,_Functions,[Variable2+Variable3,is,Variable1],Vars1,Vars2,true,nocut) :-%%writeln(41),        %%interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2).
%%interpretstatement1(_F0,_Functions,[Variable2+Variable3,is,Variable1],Vars1,Vars2,true,nocut) :-%%writeln1(41),        %%interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2).
%%interpretstatement1(_F0,_Functions,[[Variable2,Variable3]=Variable1],Vars1,Vars2,true,nocut) :-%%writeln(51),%%        interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2).
%%interpretstatement1(_F0,_Functions,[[Variable2,Variable3]=Variable1],Vars1,Vars2,true,nocut) :-%%writeln1(51),%%        interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2).
%%interpretstatement1(ssi,_F0,[],_,Vars,Vars,true,nocut) :- !%%writeln1("AND HERE!")%%.
%%interpretstatement1(ssi,_F0,_Functions,[Variable2+Variable3,is,Variable1],Vars1,Vars2,true,nocut) :-%%writeln1(41),        %%interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2).
%%interpretstatement1(ssi,_F0,_Functions,[[Variable2,Variable3]=Variable1],Vars1,Vars2,true,nocut) :-%%writeln1(51),%%        interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2).
%%paragraph([]) --> [].%% "a.a."paragraph(AAs) --> spaces(Y), {%%atom_string(Y,YS),string_length(Y,YLen), (YLen>0->Start=[[s,YLen]];Start=[])}, sentence32(X), returns(Z), {%%atom_string(X,XS),[XS]=X,string_length(XS,XLen), atom_string(XS,X1), (XLen>0->append(Start,[X1],Next);Next=Start), %%atom_string(Z,ZS),string_length(Z,ZLen), (ZLen>0->append(Next,[[r,ZLen]],Last);Last=Next)},paragraph(As),{ append(Last,As,AAs)}, !.
%%prolog_edit:load :-%%        ensure_loaded(library(swi_edit)).
%%quote(_X)-->"'".
%%removetoolongandnotrhyming(Lyrics1,SyllableCount,[],Verbs,Verbs) :- !.
%%sentence321(CA) --> sentence33(Xs), {atom_string(CA,Xs)}, !.
%%slp2lp_variables(Name1,[v,Name1]) :- predicate_or_rule_name(Name1),!.
%%test(21,[[n,grammar1],["john ate"]],test(21,[[n,grammar1],["ate",[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,lookahead],[[v,u],[v,t],"ate"]] %% 2 is endstring, 3 is what lookahead checks for  ]  ],/**    [[n,sentence],"->",  [[[n,subject]],  [[n,lookahead],["ate"]],  [[n,verb]]  ]],  [[n,verbphrase],"->",  [[[n,verb]]]],    [[n,subject],["",""]],  [[n,subject],"->",["john"," "]],  [[n,subject],[[v,a],[v,a]]],  [[n,object],["",""]],  [[n,object],"->",["apples"]],  [[n,object],[[v,a],[v,a]]],**/    [[n,lookahead],[[v,a],[v,a],[v,b]],":-",  [[[n,stringconcat],[[v,b],[v,d],[v,a]]]]]],[[[[v,t],"ate"]]]).test(22,[[n,grammar1],["peter cut the pear"]],[  [[n,grammar1],[[v,u]],":-",  [   [[n,sentence],[[v,u],""]]  ]  ],    [[n,sentence],"->",  [[[n,subject]],[[n,verbphrase]]]],  [[n,verbphrase],"->",  [[[n,verb]],[[n,object]]]],    [[n,subject],["",""]],  [[n,subject],"->",["john"," "]],  [[n,subject],"->",["peter"," "]],  [[n,subject],[[v,a],[v,a]]],    [[n,verb],["",""]],  [[n,verb],"->",["ate"," "]],  [[n,verb],"->",["bought"," "]],  [[n,verb],"->",["cut"," "]],  [[n,verb],[[v,a],[v,a]]],  [[n,object],"->",  ["the"," ",[[n,noun]]]],  [[n,noun],["",""]],  [[n,noun],"->",["apple"]],  [[n,noun],"->",["pear"]],  [[n,noun],"->",["peach"]],  [[n,noun],[[v,a],[v,a]]]],[[]]).%% Two Uses - PhD algorithm - agree with all of only one of two sides and give opinion%%do you agree with either abc (list j1) or def (list j2) given you agree with abcg (list k)?%%what is your opinion of a given opinion of a is b?test(23,[[n,agree],[["a","b","c"],["d","e","f"],["a","b","c","g"],[v,s]]],[%% test whether each item of jn is a member of k%% test whether each item of jn is not a member of k        [[n,agree],[[v,j1],[v,j2],[v,k],"You agree with j1."],":-",        [       [[n,membera1],[[v,j1],[v,k]]],                [[n,membera2],[[v,j2],[v,k]]]        ]],        [[n,agree],[[v,j1],[v,j2],[v,k],"You agree with j2."],":-",        [       [[n,membera1],[[v,j2],[v,k]]],                [[n,membera2],[[v,j1],[v,k]]]        ]],        [[n,membera1],[[],[v,l]]],        [[n,membera1],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,member],[[v,h],[v,m]]],                [[n,membera1],[[v,t],[v,m]]]        ]],        [[n,membera2],[[],[v,l]]],        [[n,membera2],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,membera3],[[v,m],[v,h]]],                [[n,membera2],[[v,t],[v,m]]]]],                        [[n,membera3],[[],[v,l]]],        [[n,membera3],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[n,=],[[v,m],[v,h]]]]],                [[n,membera3],[[v,t],[v,m]]]        ]]        ],[[[[v,s],"You agree with j1."]]]).        test(24,[[n,modus_ponens],["a",[["a","b"],["c","d"],["e","f"]],[v,s]]],[        [[n,modus_ponens],[[v,a],[v,ab],[v,b]],":-",        [       [[n,member],[[v,ab1],[v,ab]]],                [[n,equals1],[[v,ab1],[[v,a],[v,b]]]]        ]]        ],[[[[v,s],"b"]]]).%% Two Uses - original argument and algorithm (file)%% splits on \n, removes 1 duplicate per line, returns score of duplicatestest(25,[[n,grammar1],["aaa1 ,-'\na\nb\nb\n","aaa1 ,-'\na\nb\na",[v,s]]],%%()test(15,[[n,compound213],["","",[["a"],1],[v,t]]],%%test(25,[[n,word21],["a\n","","",[v,t]]],%%test(25,[[n,deletea2],[["a","b"],"a",[v,m1]]],%%test(25,[[n,deletea2],[["a","a","b"],"a",[v,m1]]],%%test(25,[[n,membera3],[["a","b"],"c"]],%%test(25,[[n,positivityscore],[["a","b"],["a","b"],0,[v,m1]]],[  [[n,grammar1],[[v,u],[v,t],[v,s]],":-",  [   [[n,compound21],[[v,u],"",[],[v,u1]]],   [[n,compound21],[[v,t],"",[],[v,t1]]],   [[n,positivityscore],[[v,u1],[v,t1],0,[v,s]]]   %%[[n,membera3],[["a","b"],"a"]]   %%[[n,number21],[[v,u],"","",[v,t]]]   %%[[n,compound213],["","",[["a"],1],[v,t]]]  ]  ],  [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]], %% swapped these  [[n,compound],[[v,t],[v,u]],"->",  [[[n,compound21],[[v,t],[v,v]]],  [[n,compound213],[[v,v],[v,u]]]]],  [[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,item],[[v,i]]],  [[n,compound21],[[],[v,compound1name]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]]]],/**  [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,t]]]]],**/  [[n,item],[[v,t]],"->",[[[n,word21],["",[v,t]]]]],  [[n,item],[[v,t]],"->",[[[n,compound],[[],[v,t]]]]],/**  [[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]],**/  [[n,word212],["","",[v,t],[v,t]]],  [[n,word212],[[v,u],[v,u],[v,t],[v,t]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],**/  [[n,word21],[[v,t],[v,u]],"->",  [[v,b],  [[n,code],%%[[n,sentencechars],[[v,a]]],  [[n,finalchar],[[v,b]]]  %%[[n,stringconcat],[[v,t],[v,a],[v,v1]]],  %%[[n,stringconcat],[[v,t],[v,b],[v,v]  ],  [[n,word212],[[v,t],[v,u]]]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,word21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]]**/  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],%%[[n,not_return_next]],  [[n,code],[[n,not],[[[n,=],[[v,a],"\n"]]]],  %%[[n,sentencechars],[[v,a]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word21],["",[v,wordstring]]],  [[n,code],  [[n,stringconcat],[[v,v],[v,wordstring],[v,u]]]]]],/**    [[n,sentencechars],[[v,c]],":-",  [[[n,letters],[[v,c]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[[n,stringtonumber],[[v,c],[v,n]]],  [[n,number],[[v,n]]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c]," "]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],","]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"-"]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"'"]]]],**/    [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"\n"]]]],    [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],""]]]],  %%  [[n,not_return_next],[[v,a],[v,a]],":-",%%  [[[n,not],[[[n,stringconcat],["\n",[v,d],[v,a]]]]]]]        [[n,positivityscore],[[],[v,l],[v,s],[v,s]]],        [[n,positivityscore],[[v,l],[v,m],[v,s1],[v,s2]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,member],[[v,h],[v,m]]],                [[n,"->"],[[[n,deletea2],[[v,m],[v,h],[v,m1]]],                [[n,true]],                [[n,=],[[v,m],[v,m1]]]]],                [[n,+],[[v,s1],1,[v,s3]]],                [[n,positivityscore],[[v,t],[v,m1],[v,s3],                [v,s2]]]        ]],                [[n,positivityscore],[[v,l],[v,m],[v,s1],[v,s2]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[n,membera3],[[v,m],[v,h]]]]],                [[n,positivityscore],[[v,t],[v,m],[v,s1],                [v,s2]]]]],                        [[n,deletea2],[[],[v,l],[v,m1]],":-",[[[n,fail]]]], %%%**        [[n,deletea2],[[v,l],[v,m],[v,t]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,=],[[v,m],[v,h]]]                %%[[n,delete],[[v,m],[v,h],[v,m1]]]]],                ]],                        [[n,deletea2],[[v,l],[v,m],[v,m1]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[n,=],[[v,m],[v,h]]]]],                %%[[n,not],[[[n,membera3],[[v,m],[v,h]]]]],                [[n,deletea2],[[v,t],[v,m],[v,m1]]]        ]],                [[n,membera3],[[],[v,l]],":-",[[[n,fail]]]],        [[n,membera3],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[[n,=],[[v,m],[v,h]]]]        ]],                [[n,membera3],[[v,l],[v,m]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,not],[[[[n,=],[[v,m],[v,h]]]]]],                [[n,membera3],[[v,t],[v,m]]]        ]]%%()],[[[v,t],[["a"],1]]]).],[[[[v,s],3]]]).%%],[[[[v,m1],2]]]).
%%test_types_cases(7,[[n,getitemn],[1,[1,2,3],[v,bb]]],test_types_cases(7,[[n,map],[[[n,add],[[[n,add],[[[n,add],[1]]]]]],0,[v,d]]],[        [[n,map],[[[t,brackets],[[t,predicatename],        [[t,brackets],[[t,number]]]]],        [t,number],[t,number]]],                [[n,map],[[[t,brackets],[[t,predicatename],        [[t,brackets],[[t,any]]]]],        [t,number],[t,number]]],                [[n,add],[[t,number],[t,number],[t,number]]],                [[n,getitemn],[[t,number],[[t,list],[[t,any]]],[t,any]]]        %%[[n,getitemn],[[t,number],        %%[[t,brackets],[[[t,list],[[t,any]]]]],[t,any]]]],[        [[n,map],[input,input,output]],                        [[n,add],[input,input,output]],                [[n,getitemn],[input,input,output]]],[        [[n,map],[[v,f1],[v,l],[v,n]],":-",        [                        [[n,equals1],[[v,f1],[[v,f11],[v,f12]]]],                [[n,=],[[v,f11],[n,add]]],                [[n,getitemn],[1,[v,f12],[v,bb]]],                [[n,number],[[v,bb]]],                [[v,f11],[[v,l],[v,bb],[v,n]]]        ]        ],               [[n,map],[[v,f1],[v,l],[v,n]],":-",        [                        [[n,equals1],[[v,f1],[[v,f11],[v,f12]]]],                [[n,=],[[v,f11],[n,add]]],                [[n,getitemn],[1,[v,f12],[v,bb]]],                [[v,f11],[[v,l],1,[v,l2]]],                [[n,map],[[v,bb],[v,l2],[v,n]]]        ]        ],        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]],        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]]],[[[[v,d], 3]]]).
%%trialy2A(List,R) :-%%notrace,trialy2B(List,R).%%,trace.trialy2B(List,R) :-length(List,Length),((Length=<9->findr4(R4),number_string(R4,R4A),formr5([R4A],9,Length,R5),findr(R5,List,R));(Length=<99->findr4(R41),findr4(R42),formr5([R41,R42],99,Length,R5),findr(R5,List,R));(Length=<999->findr4(R41),findr4(R42),findr4(R43),formr5([R41,R42,R43],999,Length,R5),findr(R5,List,R));(Length=<9999->findr4(R41),findr4(R42),findr4(R43),findr4(R44),formr5([R41,R42,R43,R44],9999,Length,R5),findr(R5,List,R));(Length=<99999->findr4(R41),findr4(R42),findr4(R43),findr4(R44),findr4(R45),formr5([R41,R42,R43,R44,R45],99999,Length,R5),findr(R5,List,R));fail),%%write1([r,R]),trace.
%%use_module(library(pio)).
%%var(Item,Var,Vars,Vars) :-%%member([Item,Var],Vars).
%%var(Item,Var,Vars,Vars) :-%%member([Item,Var],Vars).var(Vars1,Var1,Vars2) :-length(Vars1,Vars1Length1),Vars1Length2 is Vars1Length1-1,length(Vars3,Vars1Length2),append(Vars3,[Var2],Vars1),char_code(Var2,Var2Code1),Var2Code2 is Var2Code1 + 1,var2(Var2Code2,Var1),append(Vars1,[Var1],Vars2),!.var2(Code,Var1) :-outputvars(OutputVars),totalvars(TotalVars),Code2 is 96+TotalVars,Code =< Code2, %% 122char_code(Var1,Code),not(member(Var1,OutputVars)),!.var2(Var2Code,Code3) :-Var2Code2 is Var2Code + 1,totalvars(TotalVars),Code2 is 96+TotalVars,Var2Code2 =< Code2,var2(Var2Code2,Code3),!.
%%write_commands(0,Commands,Commands) :- !.
%%write_commands(0,Commands,Commands) :- !.%%write_commands(Length1,Commands1,Commands2) :-%%Length2 is Length1-1.
%%writeln([eg5]),test(5,[[n,count],[1,[v,n]]],[        [[n,count],[1,2]]        ] ,[[[[v,n], 2]]]).
%& check if any of these have 3 args - xcommands([[[n,+],[[number,number],[number]]],[[n,-],[[number,number],[number]]],[[n,*],[[number,number],[number]]],[[n,/],[[number,number],[number]]],[[n,/],[[number,number],[]]],[[n,>],[[number,number],[]]],[[n,>=],[[number,number],[]]],[[n,<],[[number,number],[]]],[[n,=<],[[number,number],[]]],[[n,=],[[number,number],[]]],[[n,=\=],[[number,number],[]]],[[n,head],[[list],[_]]],[[n,tail],[[list],[_]]],[[n,member],[[list],[_]]], % swapped for this exercise[[n,delete],[[list,_],[list]]],[[n,append123],[[list,list],[list]]], % append([1],[2],A).
%*is_single_item_or_expression_list(A) :-not(variable_name(A)),(single_item(A)->true;(is_list(A),findall(B,(member(B,A),expressionnotatom(B)%not(variable_name(B))),C),length(A,L),length(C,L))),!.
%* Address0%* Add processed poss values' values to poss vars (second variable), make these vals into vars x merge poss vals, vars, give indices of poss vals% compress formulas in each column/*a b c a+b+c = cn sum(cn)rows:abca+b+c=cnsum(cn)*/simplify_cols(A1,A2) :-findall(A3,(member(Table,A1),% rows: flip x,y do then flip back% if function, find whether pattern repeats for next colsfindall(Row2,(member(Row1,Table),% each value is referred to once when it is in a sum% 0s are included by default, so don't need to worry about themsimplify_col_plus1(Row1,Row2)),A3)),A2).
%* start by finding val to sum to in vals (given by value indices)%* - try var vals from 1 to index-1 x all vars vals except self%* Go through all vars in inst, finding vals to sumff_rows2(Instances1b,Instances1c,Value_indices%Poss_variables_LHS,Poss_variables_LHS,Poss_values_RHS,Poss_values_RHS,L,L%) :- !.
%** debug displays in not, findallinterpretstatement3(ssi,_,_,[[Dbw_n,"[]"]|_],Vars,Vars,_Result21,_Cut,_,Skip) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,Skip=false.
%****  change laterlppm_get_registry_luciancicd(LPPM_registry_term1) :-catch(phrase_from_file_s(string(LPPM_registry_string), "../List-Prolog-Package-Manager/lppm_registry.txt"),_,(writeln1("Error: Cannot find ../List-Prolog-Package-Manager/lppm_registry.txt"),abort)),term_to_atom(LPPM_registry_term1,LPPM_registry_string).
%*/delete1(E3,Pred_ids2,E31%,CP_Vars1,CP_Vars3) :-findall([A,B,C,D,E,L,"predicate",F,H,J],(member([A,B,C,D,E,L,"predicate",F,H,J],E3),(L= -1->true;L=["returns to", _, "pred_id", _]),member(C,Pred_ids2)),K),subtract(E3,K,E31%,CP_Vars1,CP_Vars3,_),!.
%*/dfs_post_order0(Curr,Items_all,Items2,Items31,Items2_all1,Items3_all1) :-dfs_post_order(Curr,Items_all,Items2,Items31,Items2_all1,Items3_all1)/*,list_to_set(Items32,Ordered_pred_nums14),%reverse(Ordered_pred_nums12,Ordered_pred_nums14),reverse(Ordered_pred_nums14,Ordered_pred_nums141),remove_dups_from_loops(Ordered_pred_nums141,Ordered_pred_nums151),reverse(Ordered_pred_nums151,Ordered_pred_nums15),%trace,findall1(Ordered_pred_nums19,(member(Ordered_pred_nums16,Ordered_pred_nums15),(Ordered_pred_nums16=[loop1,Ordered_pred_nums17]->(list_to_set(Ordered_pred_nums17,Ordered_pred_nums18),Ordered_pred_nums19=[loop1,Ordered_pred_nums18]);Ordered_pred_nums19=Ordered_pred_nums16)),Ordered_pred_nums20),%delete(Ordered_pred_nums20,loop,Ordered_pred_nums21), findall1(E,(member(F,Ordered_pred_nums20), (F=[loop1,[A1]]->E=A1;E=F)),Items31),!*/.
%*//*(find_repeating_structures(List,A11) :-findall(A,member([_,A],List),A1),maximum_length(A1,Maximum_length),%numbers(Maximum_length,1,[],Ns),append(Nm1,[_],Ns),Position2 is ceiling((Maximum_length/2)-1),find_repeating_structures1(1,Position2,2,Nm1,List,[],List2).
%*/replace_pred_names(Body1,Body2,Body3,To_replace,Replace_with) :-Body1=[Statement|Statements],%trace,predicate_or_rule_name_or_terminal(Statement),%trace,replace_pred_name([Statement],Body2,Body4,To_replace,Replace_with),replace_pred_names(Statements,Body4,Body3,To_replace,Replace_with),   %append_list2([Result1,Result2],Body2),   !.
%*/replace_vars(Body1,Body2,Body3,Var_index1,Var_index2,Var_table1,Var_table2) :-%trace,Body1=[Statement|Statements],%trace,%not((predicate_or_rule_name_or_terminal(Statement)),%trace,%trace,replace_var(Statement,Body2,Body4,Var_index1,Var_index3,Var_table1,Var_table3),replace_vars(Statements,Body4,Body3,Var_index3,Var_index2,Var_table3,Var_table2),   %append_list2([Result1,Result2],Body2),   !.
%/*delete_tmp:-foldr(string_concat,[%"scp -pr ../../Github_lc/ ", "rm -f tmp.pl" %Folder1 ],Command315), catch(bash_command(Command315,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42)%,writeln1(Text42)%,abort )),foldr(string_concat,[%"scp -pr ../../Github_lc/ ", "rm -f luciancicd/tmp.pl" %Folder1 ],Command316), catch(bash_command(Command316,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42)%,writeln1(Text42)%,abort )).
%/*prepare_repositories(Tests,T3%,Ordered_pred_nums) :- %* in a separate file.pl, process dirs rec'ly%trace,findall1([Tests12,Tokens2,Tokens1],%findall1(Tests143,((member([Tests12,C],Tests), %Tests=[[Tests12,C]], term_to_atom(Tests14,C),%),Tests142), %foldr(append,Tests142,Tests14),  %findall1([[[n,comment],["File delimiter",P,F]],O],=( %trace, findall1(O1, ( member([P,F,O,N],Tests14), %member(A,[1,2]), %(%A= 1-> %( (O=[]->O1=O; append([[[n,comment],[["File delimiter",P,F]]]],O,O1)) %[P,F,O,_N],Tests14),N2), %foldr(append,O1,Functions2), %term_to_atom(Functions2,String2), %break_into_tokens(String2,Tokens2), %delete(O1,[],Functions21), ),Tokens2a), foldr(append,Tokens2a,O2), pp0_1(O2,String2), %term_to_atom(String2,String21), split_string(String2,"\n\r","\n\r",Tokens2), %),%; %(%A=2, %findall1([[[n,comment],["File delimiter",P,F]],N],=( %[P,F,_O,N]=Tests14, %member([P,F,O,N],Tests14), findall1(N1, ( member([P,F,O,N],Tests14), (N=[]->N1=N; append([[[n,comment],[["File delimiter",P,F]]]],N,N1)) %[P,F,_O,N],Tests14),N1), %foldr(append,N1,Functions1), %term_to_atom(Functions1,String1), %break_into_tokens(String1,Tokens1) %delete(N1,[],Functions11), ),Tokens1a), foldr(append,Tokens1a,N2), pp0_1(N2,String1), %term_to_atom(String1,String11), split_string(String1,"\n\r","\n\r",Tokens1) ),T3),!.
%/*traverse%(%Object,%Items11%,All1%) :- findall1(Items1,(object(Object,Items2,Items1), %writeln1(dfs_post_order("white",Items2,[],Items1,[],All1)), dfs_post_order0(0,Items2,[],Items12,[],_All1), (Items1=Items12->S=success;S=fail), nl,writeln1([Object,S,"\n",Items1,"\n",Items12])),Items11), writeln1(Items11).
%/*append_list([],A,A):-!.append_list(List,A,B) :-List=[Item|Items],append(A,Item,C),append_list(Items,C,B).
%/*append_list3(A1,B):-append_list3(A1,[],B),!.
%/*append_list3(A1,B):-append_list3(A1,[],B),!.append_list3([],A,A):-!.
%/*collect_connected_pred_ids(Pred_id,Pred_ids1,Pred_ids2,Predicate_number,Globals3) :-collect_connected_pred_ids1(Pred_id,Pred_ids1,Pred_ids3,Predicate_number,Globals3),%writeln1([*,Pred_ids3]),Pred_ids3=Pred_ids2,%findall(Pred_ids6,(member(Pred_id5,Pred_ids3),%collect_connected_pred_ids2(Pred_id5,[Pred_id5],Pred_ids6,Globals3)),%Pred_ids2),!.
%/*lc_test0(2,true,7,i,[["c/c.pl","%a([a,b,c],[],A).\n%A = [a, b, c].\na([],A,A):-!.\na(A,B,C):-A=[D|E],append(B,[D],F),a(E,F,C),!."],["c/main_file.txt","[[\"c.pl\",[[a,3]]]]"]],[["c/c.pl","%a([a,b,c],[],A).\n%A = [a, b, c].\na([],A,A):-!.\na(A,B,C):-A=[D|E],append(B,[D],F),a(E,F,C),!."],["c/main_file.txt","[[\"c.pl\",[[a,3]]]]"]]).%*/lc_test0(3,true,7,i,[["c/c.pl","%a(A).\n%A=1.\na(1).\n%b(A).\n%A=1.\nb(1).\n%c(A).\n%A=1.\nc(1)."],["c/main_file.txt","[[\"c.pl\",[[a,1],[b,1],[c,1]]]]"]],[["c/c.pl","%a(A).\n%A=1.\na(1).\n%b(A).\n%A=1.\nb(1).\n%c(A).\n%A=1.\nc(1)."],["c/main_file.txt","[[\"c.pl\",[[a,1],[b,1],[c,1]]]]"]]).
%/*lc_test0(20,true,7,i,[["c/c.pl","%not(d(1)).\nd(1):-false."],["c/main_file.txt","[[\"c.pl\",[[d,1]]]]"]],[["c/c.pl","%not(d(1)).\nd(1):-false."],["c/main_file.txt","[[\"c.pl\",[[d,1]]]]"]]).%*/%/*lc_test0(21,true,7,i,[["c/c.pl","%a.\na:-d1(1).\na:-not(d2(1)).\n%d1(A).\n%A=1.\nd1(1).\n%not(d2(1)).\nd2(1):-false."],["c/main_file.txt","[[\"c.pl\",[[a,0]]]]"]],[["c/c.pl","%a.\na:-d1(1).\na:-not((d2(1))).\n%d1(A).\n%A=1.\nd1(1).\n%not(d2(1)).\nd2(1):-false."],["c/main_file.txt","[[\"c.pl\",[[a,0]]]]"]]).%*/lc_test0(22,true,7,i,[["c/c.pl","%a(A).\n%A=[1].\na(A):-findall1(B,b(B),A).\n%b(A).\n%A=1.\nb(1)."],["c/main_file.txt","[[\"c.pl\",[[a,1]]]]"]],[["c/c.pl","%a(A).\n%A=[1].\na(A):-findall1(B,b(B),A).\n%b(A).\n%A=1.\nb(1)."],["c/main_file.txt","[[\"c.pl\",[[a,1]]]]"]]).
%/*process_t2b(A,C) :- replace_t2b(Replacements), atom_string(A1,A), replace1_t2b(Replacements,A1,D1), atom_string(D1,C),!.
%/*replace1(E3,Pred_ids2,E31,CP_Vars1,CP_Vars1) :-findall(M,(member(N,E3),((N=[A,B,C,D,E,L,"predicate",F,H,_J],(L= -1->true;L=["returns to", _, "pred_id", _]),member(C,Pred_ids2))->M=[A,B,C,D,E,L,"predicate",F,H,[]];M=N)),E31),!.
%/*test(208,[[n,reverse1],[[1,2,3],[],[v,c],[v,b],[v,g]]],%[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[[[n,reverse1],[[],[v,a],[v,c],[v,b],[v,a]]],[[n,reverse1],[[v,a],[v,b],[v,c],[v,f],[v,g]],":-",[[[n,head],[[v,a],[v,b1]]],[[n,tail],[[v,a],[v,c1]]],[[n,wrap],[[v,b1],[v,d]]],[[n,append],[[v,d],[v,b],[v,f]]],[[n,reverse1],[[v,c1],[v,f],[v,h],[v,j],[v,g]]]]]],[[[[v,b],[1]],[[v,g],[3,2,1]]]]).%*/test(209,[[n,a],[["a","b"],"",[v,a]]],[ % string concat[[n,a],[[],[v,a],[v,a]]],[[n,a],[[[v,e],"|",[v,d]],[v,b],[v,c]],":-",[%[[n,equals4],[]],[[n,stringconcat],[[v,b],[v,e],[v,f]]],[[n,a],[[v,d],[v,f],[v,c]]]]]],[[[[v,a],"ab"]]]).
%14-8=6 left% complexity_from_findall([],C).
%:- include('../listprologinterpreter/la_strings').
%:- include('files/listprolog.pl').
%:- include('files/listprolog.pl').run_lp_server(Port) :-        http_server(http_dispatch, [port(Port)]).
%:- include('la_strings.pl').
%:- include('musiclibrary').
%:- initialization(catch(main, Err, handle_error(Err))).
%:- set_prolog_flag(verbose, silent).
%:- use_module(library(date)).
%:-include('../../listprologinterpreter/la_strings.pl').
%:-include('../Prolog-to-List-Prolog/p2lpconverter.pl').
%:-include('../SSI/ssi.pl').
%:-include('../SSI/ssi.pl').:-include('../SSI/ssi.pl').
%:-include('../Text-to-Breasonings/meditationnoreplace.pl').
%:-include('../listprologinterpreter/la_files.pl').
%:-include('../listprologinterpreter/la_strings.pl').
%:-include('../listprologinterpreter/listprolog.pl').
%:-include('cat_files2.pl').
%:-include('interpretstatement3.pl').
%:-include('lpiverify4.pl').
%:-include('luciancicd.pl').
%:-include('philosophy/string_to_pbm.pl').
%:-include('ssi_verify4.pl').
%:-include('test_form1.pl').
%?- combo_pass([1,2,3,5],[1,4,3,6],11,G).                                        %G = [[1, 2, 3, 5]].
%Algorithm1=[[[Dbw_n,N],Args,]]replace_vars([],N,N,Var_index,Var_index,Var_table,Var_table):-!.%%,Body3%%replace_vars([],Body,Body) :- !.
%["Short Arguments","Part_of_Room.txt",0,algorithms,"10. I prepared to admit that it was this planet and that the sky was 1 metre above the ground.  I did this by stating that where the planetary outpost was a building, the space station was itself.  First, I noticed the building on a planet.  Second, I noticed the space station in the sky.  Third, I went from Earth, to the space station, to the planetary outpost."]% go1("Earth","planetary outpost").                                            go1(A,A):-!.
%[0, [6, 7]], [6, []], [7, [6, 7]]/*test(248,[[n,w]],[[[n,w],":-",[[[n,i]],[[n,e]]]],[[n,e],":-",[[[n,i]],[[n,e]]]],[[n,i]]],[[]]).
%alg_to_modes(Ordered_pred_nums1,Functions1,[],_Var_modes,[],_Functions_with_modes)%find_pred_numbers_dependencies(Functions1,_Reserved_words,Pred_numbers,Functions2a) :-% pred group y is called by pred group z% don't need name, arity%find_pred_numbers_dependencies2(Functions1,Functions2a,Pred_numbers).
%algorithm_decision_tree2(_Dictionary2,State2,[],Word2,Word2,Suggestions1,Suggestions1) :- !.
%append(Types1,[[T,Dbw_atom]],Types2),!.
%append1([],Item,Item).
%apply(k,c,m).
%bag_args(96000).
%bar_with_time(0,10).
%br(Words,BrDict3,BrDict2,BrDict3t6,BrDict5,Brth,BrthDict3,BrthDict04,Room,RoomDict3,RoomDict04,PartOfRoom,PartOfRoomDict3,PartOfRoomDict04,Direction,DirectionDict3,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict3,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict3,ObjectToFinishDict04).
%catch(call_with_time_limit(0.005,%p2lpconverter([file,H1],LP),%),_,false),%,writeln1(Result2)%find_merge2(H,K11,LP,Tests).
%check_same2(A,[],L1,L2,_Start,TN,TN) :- %trace, %append(L1,[A],L2),!.
%check_same2(_A,[],L,L,_Start) :- !.%append(L1,[A],L2),!.
%comment([]) --> [].
%comment([]) --> [].comment(X1) --> %spaces1(_),[X], {char_code('%',X)},comment1(Xs), {append([X],Xs,X2),string_codes(X3,X2),X1=[[[n,comment],[X3]]]},!.
%comment1([]) --> [], !.comment1([X|Xs]) --> %{trace},[X], %lookahead(_A),{not(char_type(X,newline))%,not(A=[])}, comment1(Xs), !.
%comment1([]) --> [], !.comment1([X|Xs]) --> [X], lookahead(_A),{not(char_type(X,newline))%,not(A=[])}, comment1(Xs), !.
%comment1([]) --> [], !.comment3([XA|Xs]) --> [XA],%[XB], lookahead([XB]),{not((char_code('*',XA),char_code('/',XB)))}, comment3(Xs), !.
%compile_list(Number_index2, Item, Number_array4, Number_array5, String_array1, String_array3),%compile_list1(Index, List2, Number_array5, Number_array2, String_array3, String_array2).
%curly_head_tail1([T],List1,List2) :- t_or_empty(T),append(List1,%[[T]],List2),!.
%cycle1(Node,Tree,Deps1,Deps2) :-cycle1(Node,Tree,Deps1,Deps2) :- (cycle(Node, Tree,Cycles,Noncycles)-> (%append(Deps1,[[loop1,Cycles]],Deps3), %findall1(A,(member(A,Noncycles), cycle2(Noncycles,Tree,% Cycles1,Noncycles1, Deps1,Deps3), (Cycles=[A]-> (member(A,Deps3)->Deps3=Deps2; append(Deps3,[A],Deps2)); append(Deps3,[[loop1,Cycles]],Deps2))); (% find noncycles %trace, path1([Node],Node,Tree,[],Noncycles), %append(Deps1,[Node],Deps3), cycle2(Noncycles,Tree,% Cycles1,Noncycles1, Deps1,Deps3), (member(Node,Deps3)-> Deps3=Deps2; append(Deps3,[Node],Deps2)) )),!.
%data_to_types2(Data,Types1,Types2,VD1,VD2) :-%data_to_types2(Data,Types1,Types2,VD1,VD2).
%data_to_types22(Data,Types4,VD) :-%retractall(get_data_n1(_)),%assertz(get_data_n1(0)),data_to_types22(Data,Types4,VD) :-retractall(get_data_n1(_)),assertz(get_data_n1(0)),%findall([Types2,VD2],(member(Data1,Data),data_to_types2(Data1,[],Types2,[],VD2)),Types31),data_to_types221(Data,[],Types4,[],VD).
%dfs(_,_D,_Sent,_DB,_,1,Chain,Chain) :- fail, !.
%e4_fa_val1emptyorvalsequal(Value,Value) :-%not(Value=empty).
%equispace_instruments([1,2,3,10],A).
%file(N) --> newlines1(N),!.
%file(N) --> newlines1(N),!.file(Ls2) --> newlines1(N1),predicate(L),newlines1(N2),%{writeln1(L)},file(Ls),%{writeln1(L)}, %%*** {foldr(append,[N1, L,N2, Ls],Ls2)}, %delete(Ls3,[],Ls2)}, !. file(Ls2) --> newlines1(Ls2),!.
%find_dependencies(SM1,Deps1,Deps2) :-%alg_to_modes(Ordered_pred_nums1,Functions1,Functions_with_modes1,Functions_with_modes2) :-/*alg_to_modes([],_,Functions_with_modes,Functions_with_modes) :- !.
%find_running_speeds([],S,S):-!.find_speeds(T,Running_speed,Average_speed):- findall([D,T1],(member([T1,M],T),get_n_item(M,*,D)),M2), sort(M2,M3), append(_,[[Max_D,_]],M3), length(M2,Max_T), findall(S,(member([D,T1],M2),S is round((D/T1)*10)/10),Running_speed), %trace, Average_speed is round((Max_D/Max_T)*10)/10,!.
%find_sums_in_term(Formula_Instances1,Formula_Instances_list) :-%find_sums_in_term1(Formula_Instances1,Formula_Instances_list),!.
%findall1([Op,Switch],(member(Op,Ops),member(Switch,[on,off])),Switches).
%flatten_except_loops1([],[]) :- !.
%foldr(append,Ordered_pred_nums3,Ordered_pred_nums5),%(N=[]->Ordered_pred_nums8=Ordered_pred_nums2;append(Ordered_pred_nums8,[N,P3]%[[L3,P3]]%,Ordered_pred_nums2))%),Ordered_pred_nums2)order_preds_bottom_up1_post_order_dfs2(P3,_P2,_Functions,_Ordered_pred_nums1,Ordered_pred_nums3,_) :-P3=[],Ordered_pred_nums3=[],!.
%get_extra_answers(Text,Worksheet_plan3,[],Worksheet_plan4),%Worksheet_plan4=Exercises1.
%get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("stringconcat",Dbw_stringconcat1),Dbw_stringconcat1=Dbw_stringconcat,%ssi_interpretpart(stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2).
%grammar_part(A,B,C):-string_concat(A,C,B),string_length(A,1).
%high_distinction([[a,50],[b,60],[c,70],[d,80]],A).
%ind(1,1,2,Op).
%induct([c:d,e],(c:d):e,[],C).                                       % C = [[append, [c:d, e],  (c:d):e], [append, [(c:d):e, f],  ((c:d):e):f]].
%letter1(Letter),writeln(Letter).
%lookahead(_,[],[]) :-!.lookahead(B2,A,A) :-%trace,%member(B,B1),%string_codes(B,B2),append([B2],_D,A),!.
%lookahead3(A,A) :- lookahead1(A,A)%lookahead3(A,A) :- append(`,`,_,A).
%lyrics_m2m(Form1,Lyrics,Maxlength) :-%%find("Who is the song about?",Character),%%lyrics1(Form,Character,[],Lyrics).
%maze([1,2],[1,3],[2,4],[2,5],[5,6],[5,7],1,7).maze(_,F,F) :- !.maze(Ts,I,F) :- member([I,N],Ts),maze(Ts,N,F).
%memorisation([a,b,c],2) :-memorisation(_,0) :- !.
%merge_files(_AT233,AT3331,AT3331) :- !.
%mind_read_a_1([List0],Item1_a,Item1_a2) :-%append(Item1_a,[List0],Item1_a2),!.
%model_to_result(1,1,2,2,2,R).
%n2(N) :-n(N).
%n2(N) :-n(N).brDict031(BrDict2) :- brDict03(BrDict2).
%not(A) :- \+(A),!.% Doesn't delete \n in "\n"split_on_substring1(A,B,D) :-string_codes(A,A1),string_codes(B,B1),split_on_substring117(A1,B1,[],D),!.
%paraphraser1(Words, Counts) :-    %maplist(downcase_atom, Words, LwrWords),    %msort(LwrWords, Sorted),    %clumped(Sorted, Counts).
%path10(Stop,First,_Tree,A,A) :- %member(First,Stop), %*append(A0,[First],A1), %!.
%place(Box_X,Box_Y,Box_Z,Grid1,Grid2,Coords2) :-%trace, %findall(Coords3,(member(Coords1,Coords2), %reset_min(0,0,0,Coords1,Coords3,_Max_X,_Max_Y,_Max_Z) %Coords1=Coords3), %Coords4), %place3(Box_X,Box_Y,Box_Z,Grid1,Grid2,Coords2).
%pretty_print_worksheet(Worksheet_plan4,Exercises1).
%putvalue_equals4(empty,A,Vars,Vars) :- not(isvar(A)),!.
%q1(A,A).
%recursive_predicate(A,A,_):- !.
%remove_chains_of_one_children2(N1,N1,Options1,_Options2,_Options3) :-%(member([N1,_,N22],Options1),member([N1,_,N23],Options1),not(N22=N23)),!./**remove_chains_of_one_children2(N1,N3,Options1,_Options2,_Options3) :-(N1=[-,_]->N3=N1;(member([N1,_A,N2],Options1),member([N2,_,N22],Options1),member([N2,_,N23],Options1),not(N22=N23),N3=N2)),!.
%replace within words% 19 algs doneorgan_sutra :- findall(_,(healthy(Organ),texttobr2(1),writeln(["Organ sutra for:",Organ])),_).
%replace1([case_sensitive,entire_word],"A bC d Bc D","bC","Be",B).
%replace1([entire_word],"A bC d Bc D","bC","Bd",B).%B = "a Bd d Bd d".%replace1([entire_word],"a-a","a-a","b-b",B).
%replace1([entire_word],"a-a a-a","a","b",B).
%reverse_engineering2([[[a,b,c,d],[b,c]],[[e,b,f,d],[b,f]]],A).
%rs_and_data_to_term([[o,['A1']],1,[o,['A1']]],[1],[],T).%T = [[o, [['A1'], []]], 1, [o, [['A1'], []]]].% rs_and_data_to_term([[o,['A1']],[r,['A3','A4']]],[2,3,2,3],[],T).
%s([[1,2,3],[1,2,4]]).
%save_session_first_time(Session) :-% generate_session_key(Session_number),% save_session(Session_number,Session),!.
%secret_key("").q(Q0,A) :-replace(Q0,"\n"," ",Q),%secret_key(Secret_key),working_directory1(WD,WD),working_directory1(_,"../../Daily-Regimen/"),open_string_file_s("chatgpt_qa_key.txt",Secret_key),working_directory1(_,WD),split_string(Q," "," ",Q1),length(Q1,L),MT is 4096-L-100,Command1=["curl https://api.openai.com/v1/completions -H \"Content-Type: application/json\" -H \"Authorization: Bearer ",Secret_key,"\" -d '{\"model\": \"gpt-3.5-turbo-instruct\", \"prompt\": \"",Q,"\", \"max_tokens\": ",MT,", \"temperature\": 0}'"],  foldr(string_concat,Command1,Command),catch((bash_command(Command,Output)->true;(writeln(["Failed shell1 command: ",Command]),fail)),_,fail),!,%?- % to enable json_read_dict/2%?- FPath = '/home/xxx/dnns/test/params.json', open(FPath, read, Stream), atom_string(Output1,Output),atom_json_term(Output1, A1, []),A1=json([_,_,_,_,choices=[json([text=A2|_])]|_]),atom_string(A2,A),writeln(A).
%sectest(0) :- !.
%sectest0(Form1,Lyrics,Melody,Harmony,MelodyParts,HarmonyParts,Vocalstubinstrument,Song1) :- %%texttobr2qb(2), %%Imagine song%form(Form1),%%Form1=[v2,o],%find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT),%remove_dups(Form1,[],Form2),%Voiceparts1=[v1,v2,c,s],intersection(Form1,[v1,v2,c,s],Voiceparts2),lyrics2_m2m(%Voiceparts1,Lyrics,0,Maxlength),%findall(B,(member(A1,Form2),string_concat(B1,_C,A1),%string_length(B1,1),atom_string(B,B1)),Form3),%remove_dups(Form3,[],Form4),%%repeat, %% in case melody, harmony don't work%melodyharmony(Form4,CPT,Maxlength,Melody,Harmony),%%writeln(melodyharmony(Form4,CPT,Maxlength,Melody,Harmony)), %% ***%instruments(Form1,MelodyInstruments,HarmonyInstruments,%MelodyParts,HarmonyParts,Vocalstubinstrument),%%writeln(instruments(Form1,MelodyInstruments,HarmonyInstruments,%%MelodyParts,HarmonyParts,%%Vocalstubinstrument)),%%writeln(rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,%%MelodyInstruments,HarmonyInstruments,MelodyParts,%%HarmonyParts,Lyrics,%%Vocalstubinstrument,Song1)), %%,Vocalstubinstrument=[0,"Acoustic Grand Piano"],%working_directory1(WD,WD),%working_directory1(_,"mid/"),rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Lyrics,Vocalstubinstrument,_Song1,File1),rhythm(Rhythm2),Meta_file3=[[form,Form1],[chord_progressions,CPT],[voice_part,Voiceparts2],[melody,Melody],[harmony,Harmony],[melody_instruments,MelodyInstruments],[harmony_instruments,HarmonyInstruments],[melody_parts,MelodyParts],[harmony_parts,HarmonyParts],[lyrics,Lyrics],[genre,["anthem"]],[rhythm,Rhythm2]],term_to_atom(Meta_file3,Meta_file1),string_atom(Meta_file2,Meta_file1),%member(Filex1,G),% Additional_variables are [label,var]%open_file_s(Filex,Meta_file),%concat_list("",[Filex1],File2),concat_list("",[File1,"_meta.txt"],Filex2),%string_concat(Path,File2,Filex2),%working_directory1(WD,WD),%working_directory1(_,"../"),(open_s(Filex2,write,Stream1),write(Stream1,Meta_file2),close(Stream1))%working_directory1(_,WD)),_), %%,%working_directory1(_,WD),/*Meta_file=[[form,Form1],[chord_progressions,CPT],[voice_part,Voiceparts2],[melody,Melody],[harmony,Harmony],[melody_instruments,MelodyInstruments],[harmony_instruments,HarmonyInstruments],[melody_parts,MelodyParts],[harmony_parts,HarmonyParts],[lyrics,Lyrics],[genre,["anthem"]]],*/!.
%server(Port) :-%        http_server(http_dispatch, [port(Port)]).
%simplify_col_plus1([],Row,Row) :- !.
%spell_check2(_Dictionary2,State2,[],Word2,Word2,Suggestions1,Suggestions1) :- !.
%split_on_number(Input,Input1,Input10) :-%findall([Input1,Input10],split_on_number1(Input,Input1,Input10),Output1),%reverse(Output1,[[Input1,Input10]|_]).
%ssi_verify(Debug,N) :-%test(N,Query,Functions,Result),%ssi(Debug,Query,Functions,Result).
%sub_term_wa2(Ns,Ns,_N,[],_Find,B,B,_) :- !.
%subtract2(A,B,C) :-break_into_tokens(A,B) :- string_codes(A,A1), split_on_substring117(A1, `#@~%$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\"!\``,[],B),!. */fail_if_greater_than_n_changes(After3) :-%trace,(fail_if_greater_than_n_changes2(N1)->N=N1;fail_if_greater_than_n_changes1(N)),%trace, findall1(A,(member(A,After3),not(string(A))),B), length(B,L),(L=<N->true;(writeln2(["Increase Max to",L]),fail)).
%sum_marks([50,60,70,80],A).
%taste(egg,dfs_pre_order,Items).
%term_to_atom2(A,B) :-%term_to_atom(A,C),%translate1a(A,_,_,A).
%test_lists4(Common_factor,L,Heads1,Heads3) :- types_in(_Common_factor,_L,[]) :- !.types_in(Common_factor,L,Head3) :- length(M,Common_factor), append(M,N,Head3), types_in2(L,M), types_in(Common_factor,L,N).
%texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,%ObjectToPrepare,ObjectToFinish,W) :-%texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,%PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,0,[auto,off]).
%trace,/*for a repo:- find reverse ordered preds, find changed, not inserted or deleted preds - (no combos x) - save changed preds as go, find min alg pred set (don't find preds' combos until needed by the minimum macrocombos x)for each changed pred:find i,d,c parts' combosrun pred tests on repo, and deps, and determine minimum version of pred, save in pre-build foldergo to build*/%A=[1],%findall1(B,(member(Functions1,N2),%Debug=off,member(B,A),test(B,Q,F,R),query_box(Q,Query1,F,Functions1),/*convert_to_grammar_part1(Functions1,[],Functions2,_),add_line_numbers_to_algorithm1(Functions2,Functions2a),find_pred_numbers(Functions2a,[],Pred_numbers),find_state_machine1(Functions2a,Functions3,Pred_numbers),find_pred_numbers_dependencies(Functions3,[],Functions2a,Pred_numbers),order_preds_bottom_up(1,Functions2a,[],Ordered_pred_nums).
%trace,findall([Address,[function,T,R,C,XY2,F21]],(member([Address,Term],Instances4),test_p(Term=[function,T1,R1,C1,FEC,F2]),findall(XY,(test_p(member(XY1,FEC)),((test_p(number1(XY1,XY11)),test_p(member(XA21,XA2)),test_p(XA21=[var,T1,R1,C1,IN1,XY11,VN,TP1,RP1,CP1,INP1]))->test_p(XY=XA21);test_p(XY=XY1))),XY21),findall(XA,(member(XA,XY21),test_p(XA=[var,_,_,_,_,XY1,VN,_,_,_,_])),XA21),test_p(sub_term_wa([var,_,_,_,_,_,_,_,_,_,_], F2, Instances5)),findall([Address1,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],(test_p(member([Address1,Term1],Instances5)),test_p(Term1=[var,T1,R1,C1,IN1,V,_,TP1,RP1,CP1,INP1]),test_p(member([var,_,_,_,_,V,VN,_,_,_,_],XA21))),New_pairs3),test_p(foldr(put_sub_term_wa_ae,New_pairs3,F2,F21))),New_pairs4),%trace,test_p(foldr(put_sub_term_wa_ae,New_pairs4,A1,A21)),% if same xtrace,summarise_formulas(%2(Ad2,Q2,A21,A2),!.
%trace,findall([Address,[function,T,R,C,XY2,F21]],(member([Address,Term],Instances4),test_p(Term=[function,T1,R1,C1,FEC,F2]),findall(XY,(test_p(member(XY1,FEC)),((test_p(number1(XY1,XY11)),test_p(member(XA21,XA2)),test_p(XA21=[var,T1,R1,C1,IN1,XY11,VN,TP1,RP1,CP1,INP1]))->test_p(XY=XA21);test_p(XY=XY1))),XY21),findall(XA,(member(XA,XY21),test_p(XA=[var,_,_,_,_,XY1,VN,_,_,_,_])),XA21),test_p(sub_term_wa([var,_,_,_,_,_,_,_,_,_,_], F2, Instances5)),findall([Address1,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],(test_p(member([Address1,Term1],Instances5)),test_p(Term1=[var,T1,R1,C1,IN1,V,_,TP1,RP1,CP1,INP1]),test_p(member([var,_,_,_,_,V,VN,_,_,_,_],XA21))),New_pairs3),test_p(foldr(put_sub_term_wa_ae,New_pairs3,F2,F21))),New_pairs4),%trace,test_p(foldr(put_sub_term_wa_ae,New_pairs4,A1,A21)),*/% if same x%trace,%writeln1([*,Ad1,Ad2,Q1,Q2,A1,A21]),summarise_formulas(%2(Ad2,Q2,A21,A2),!.
%traverse(cube,Items,A).
%types(_,V) :-% match4_new1([v,a],[[v,b]],[],V).
%var_or_data1(A) :- is_var_s2a(A).%var_or_data1() :- not(type_s2a1(A)).
%var_or_data2(A) :- is_var_s2a(A).
%venn_select([friend,available],Person).
%viral_plans(["professor","job","sale","bot","high distinction"],Viral_plan).
(member(C,B),member(D,B),not(C=D),% find s1 with dfs, etc until link from a-bword_nums(WN),%member(C,D,C51,D51,WN),member([C,C51],WN),member([D,D51],WN),%trace,%findall(Chain3,(dfs1(C51,D51,Sent,DB,_,0,[],T)),!.
),T5),bag2phil2(Length,T5,Twists,Br32).
*data_to_types22([[1,1]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
*find_combos3([],_Combos,Combos,Combos) :- !.
**iv1flagdisjunction(A,B,true) :-(A=true); (B=true).
*** BEFORE?- Input1=[[n,a]],Inputs2=[[a,5]] ,Output=[[n, 5]] ,programfinder(Input1,Inputs2,Output,Extras,Program),writeln(Program),interpret(off,[function,[Input1,Inputs2,[],result]],Program,Result).
********** *     ** *** * **     * ** *** * **   * * ** *** * **   *   ** * *** ** *   * **********[debug]  ?- build_maze2d(4,5,Maze).********** *     ** * * * ** * * * ** * * ****     * ** * * * ** * * * ** * *** **       **********[debug]  ?- build_maze2d(4,5,Maze).********** *     ** *** ****       ** ***** **       ** ***** ** *     ** * ******       **********[debug]  ?- build_maze2dbuild_maze2dinclude('../../listprologinterpreter/la_strings.pl').%:-include('../../listprologinterpreter/la_strings.pl').:-include('../../listprologinterpreter/la_maths.pl').:-include('strings_to_grid.pl').build_maze2d(X,Y,Maze) :-X1 is (2*X)+1,Y1 is (2*Y)+1,grid(X1,Y1,Grid1),border(X1,Y1,Grid1,Grid2),% 1 (-4 x) walls from each connector point% 234->579->35   %X2 is X-1,   %Y2 is Y-1,   numbers(Y,2,[],YN),numbers(X,2,[],XN),maplist(connector_coords,YN,YN1),maplist(connector_coords,XN,XN1),connector_points(XN1,YN1,Grid2,Grid3),walls_from_connector_points(XN1,YN1,Grid3,Maze),%trace,print_grid(Maze,X1,Y1),!.% make path xgrid(X,Y,Grid) :-numbers(Y,1,[],YN),numbers(X,1,[],XN),findall([X1,Y1,[]],(member(Y1,YN),member(X1,XN)),Grid).border(X1,Y1,Grid1,Grid2) :-%trace,horizontal_line(1,X1,1,Grid1,Grid3),%print_grid(Grid3,9,11),horizontal_line(1,X1,Y1,Grid3,Grid4),vertical_line(1,Y1,1,Grid4,Grid5),vertical_line(1,Y1,X1,Grid5,Grid2).horizontal_line(X1,X2,Y,Grid1,Grid2) :-numbers(X2,X1,[],XN),horizontal_line1(XN,Y,Grid1,Grid2).
**/collect_simplify_types([],Types,Types) :- !.
**/lines(Ls2) --> spaces1(_),line(L),";",newlines1(_),spaces1(_),lines(Ls), %trace,%{delete([L,N|Ls],[],Ls2)}, !. %lines(Ls2) --> line(L),",",newlines1(N),%%{writeln(L)}, %%***%lines(Ls), {foldr(append,[[L],%N,Ls],Ls2%[],Ls2)}, !. lines([L]) --> line(L), ";",%%{writeln(L)},!.
**/simplify_types([],Types,Types) :- !.simplify_types(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("number",Dbw_number),Data=[T,Dbw_number],%number(Data),append(Types1,[[T,Dbw_number]],Types2),!.
**/simplify_types_with_n([],Types,Types) :- !.
**/% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Conglish Reflection 2 of 4.txt",0,algorithms,"14.   *I prepared to serve the vegetable burger.  I did this by cooking the vegetable patty.  First, I made the patty from semolina, soy and carrot.  Second, I minced it up.  Third, I cooked it.  In this way, I prepared to serve the vegetable burger by cooking the vegetable patty."]cawptest2(8,append1,[[[n,append],2,1%% Modes=2 inputs, 1 output]],3,1,%% MaxPredicates is not the number of predicates in the result, it is the number of non-dictionary predicates in the result.
**/% n_m(32001,N,M).n_m(Number,N,M) :-%(Number<32000->N is div(Number,32000),M is mod(Number,32000).
**/%% ML max 25shell1(Command) :-(bash_command(Command,_)->true;(writeln(["Failed shell1 command: ",Command]),abort)),!.
**/%%var(Item,Var,Vars,Vars) :-%%member([Item,Var],Vars).
**/%:-include('../listprologinterpreter/la_strings.pl').:-include('../listprologinterpreter/la_strings.pl').
**//*cawptest2(9,append1,[[[n,append],2,1%% Modes=2 inputs, 1 output]],3,1,%% MaxPredicates is not the number of predicates in the result, it is the number of non-dictionary predicates in the result.
**//**[debug]  ?- merge_lists2([1, "a", 2],[4, "a", 5],[[[1, "a", 2], [2, "b", 3], [3, "c",-]], [[4, "a", 5], [5, "d", 6], [6, "e",-]]],O).
**//**merge_lists1([],Options,Options) :- !.
**/:-include('../../listprologinterpreter/la_strings.pl').
**/:-include('../listprologinterpreter/curly_brackets.pl').
**/:-include('../listprologinterpreter/la_strings.pl').
**/:-include('curly_brackets.pl').
**/apply_for_loan(M1,C1,M2,C2,Amount_needed) :-% Start with 1 volunteer, 1 product with development time of pedagogy for product, sales (that connects through buyers' lives sevenfold)% avoids actual r&d cost for product, advertising costs x (ads' specific As beginning to melt away with availability of pedagogy LSTMs x that is the whole point of this algorithm)% How much time until profit is made?% Note to self: examine graphs, meanings of first n days of companies.
**/br_details :-writeln("What is the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What are two uses (in verb(object) form) for the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What are two types (in verb(object) form) in the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What is an object (in verb(object) form) for the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What is a touching relationship (in verb(object) form) in the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What is a human judgement (in verb(object) form) for a noun in the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What is a human judgement (in verb(object) form) for a verb in the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What is a room (in verb(object) form) in the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What is a part of a room (in verb(object) form) in the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What is a direction an object faces (in verb(object) form) in the sentence?"),read_string(user_input,"\n","\r",_,_),writeln("What is an object required before the sentence (in verb(object) form)?"),read_string(user_input,"\n","\r",_,_),writeln("What is an object required after the sentence (in verb(object) form)?"),read_string(user_input,"\n","\r",_,_).
**/check_strings(String1,ML_db) :-%%member([P1,S1,String2],ML_db),%%member([P2,S2,String3],ML_db),ML_db=[String2a,String3a],%%writeln(["String1,String2a,String3a",String1,String2a,String3a]),String2=[0,0,String2a],String3=[0,0,String3a],%%a(String1,String2,String3):-length(String1,Length_string1),((writeln("Attempt 1"),check_strings_container1(Length_string1,String1,String2,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String2,[999,999,[]]],_,List2),length(List2,Length_list2),%%Length_list3 is Length_list2+1,%%writeln(here),check_strings_container1(Length_list2,List2,String3,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String3,[999,999,[]]],_,_List3),writeln("Success")%%,trace)->true;(writeln("Failed"),writeln("Attempt 2"),((check_strings_container1(Length_string1,String1,String3,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String3,[999,999,[]]],_,List2),length(List2,Length_list2),%%Length_list3 is Length_list2+1,%%writeln(here),check_strings_container1(Length_list2,List2,String2,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String2,[999,999,[]]],_,_List3))->writeln("Success");(writeln("Failed"),fail)))).
**/checktypes10(Vars1,TypeStatements0,TypeStatements1,TypeStatements4) :-Vars1=Vars3,TypeStatements0=["|",TypeStatements3],%checktypes2(Vars2,TypeStatements2,TypeStatements1,TypeStatements4),%%not(variable_name(Vars2)),checktypes10([Vars3],[TypeStatements3],TypeStatements1,TypeStatements4).
**/counter_argument(Argument,Counter_argument) :-findall([Number,Reason1,String],(member(Reason,Argument),Reason=[Number,Reason1],write("What is the counter-argument to "),write(Reason),writeln("?"),read_string(user_input, "\n", "\r", _End1, String)),Counter_argument).
**/data_to_types([],Types,Types) :- !.
**/eliminate_unused_predicates(Program1a,Algorithms1a,Algorithms2) :-%% System calls and mode arities%%System_calls=[[is,1,1],[+,2,1],[=,2,1],[wrap,1,1],%%[unwrap,1,1],[head,1,1],[tail,1,1],[member,1,1],%%[delete,2,1],[append,2,1]], %% Ignore whether system calls are in Program and Algorithm - the interpreter will have detected whether system and user predicates clash earlierProgram1a=[[[n, PredicateName], Arguments, ":-", _Body]],length(Arguments,ArgumentsLength),Start=[[[n,PredicateName],ArgumentsLength]],convert_to_grammar_part1(Program1a,[],_Program1b,Program1),%% Find calls in Program%%writeln([program1,Program1]),find_calls1(Start,Program1,[],Program2),%%writeln([program2,Program2]),%% Find calls in Algorithmconvert_to_grammar_part1(Algorithms1a,[],_Algorithms1b,Algorithms1),%%writeln([algorithms1,Algorithms1]),find_calls1(Program2,Algorithms1,[],Algorithms3),%%writeln([algorithms3,Algorithms3]),append(Program2,Algorithms3,Rules),%% Eliminate user predicates mentioned in Program and Algorithms in Algorithms eliminate_unused_predicates1(Rules,Algorithms1,[],Algorithms2).
**/expressions([["talking",[[1,9," "],[2,9," "],[3,9,"*"],[4,9,"*"],[5,9,"*"],[6,9," "],[7,9," "], [1,8," "],[2,8,"*"],[3,8," "],[4,8," "],[5,8," "],[6,8,"*"],[7,8," "], [1,7,"*"],[2,7," "],[3,7,"*"],[4,7," "],[5,7,"*"],[6,7," "],[7,7,"*"], [1,6,"*"],[2,6," "],[3,6," "],[4,6," "],[5,6," "],[6,6," "],[7,6,"*"], [1,5,"*"],[2,5," "],[3,5," "],[4,5,"*"],[5,5," "],[6,5," "],[7,5,"*"], [1,4,"*"],[2,4," "],[3,4,"*"],[4,4," "],[5,4,"*"],[6,4," "],[7,4,"*"], [1,3,"*"],[2,3," "],[3,3," "],[4,3,"*"],[5,3," "],[6,3," "],[7,3,"*"], [1,2," "],[2,2,"*"],[3,2," "],[4,2," "],[5,2," "],[6,2,"*"],[7,2," "], [1,1," "],[2,1," "],[3,1,"*"],[4,1,"*"],[5,1,"*"],[6,1," "],[7,1," "]]],  ["smiling",[[1,9," "],[2,9," "],[3,9,"*"],[4,9,"*"],[5,9,"*"],[6,9," "],[7,9," "], [1,8," "],[2,8,"*"],[3,8," "],[4,8," "],[5,8," "],[6,8,"*"],[7,8," "], [1,7,"*"],[2,7," "],[3,7,"*"],[4,7," "],[5,7,"*"],[6,7," "],[7,7,"*"], [1,6,"*"],[2,6," "],[3,6," "],[4,6," "],[5,6," "],[6,6," "],[7,6,"*"], [1,5,"*"],[2,5," "],[3,5," "],[4,5," "],[5,5," "],[6,5," "],[7,5,"*"], [1,4,"*"],[2,4," "],[3,4,"*"],[4,4," "],[5,4,"*"],[6,4," "],[7,4,"*"], [1,3,"*"],[2,3," "],[3,3," "],[4,3,"*"],[5,3," "],[6,3," "],[7,3,"*"], [1,2," "],[2,2,"*"],[3,2," "],[4,2," "],[5,2," "],[6,2,"*"],[7,2," "], [1,1," "],[2,1," "],[3,1,"*"],[4,1,"*"],[5,1,"*"],[6,1," "],[7,1," "]]]]).happy :-expressions(Expressions),member(["talking",Face1],Expressions),print_face(Face1),nl,writeln("Are you happy (y/n)?"),read_string(user_input, "\n", "\r", _End1, Response1),(Response1="y"->(member(["smiling",Face2],Expressions),print_face(Face2),nl,writeln("Good."));happy2),!.
**/find_pred_numbers(Functions,_Reserved_words,Pred_numbers) :-%trace,findall([Pred_name1,Arity1],(%member([_Pred_number1,Pred_name1|Arguments_Body],Functions),(Arguments=":-"->Arity1=0;length(Arguments,Arity1))member([Pred_number2,Pred_name1|Rest],Functions),pred_rest(Arity1,Rest,_)/*(Rest=[Args,":-",Lines]->length(Args,Arity1);(Rest=[Args]->(Lines=[[[Dbw_n,Dbw_true]]],length(Args,Arity1));(Rest=[":-",Lines]->Arity1=0;(Rest=[[Dbw_n,_],Args,Lines]->length(Args,Arity1);(Rest=[],Lines=[[[Dbw_n,Dbw_true]]],Arity1=0))))) */),Unique_predicates1),sort(Unique_predicates1,Unique_predicates2),% functions may contain a reserved word:%forall((member([Pred_name3,_Arity3],Unique_predicates2),not(member(Pred_name3,Reserved_words))),(term_to_atom(Pred_name3,Pred_name31),concat_list(["Error: Functions contains reserved word: ",Pred_name31,"."],Note),writeln(Note),abort)),%trace,findall([Pred_name2,Arity1,Pred_number3],(member([Pred_name2,Arity1],Unique_predicates2),findall(Pred_number2,(%member([Pred_number2,Pred_name2,Arguments2|_],Functions),length(Arguments2,Arity2)member([Pred_number2,Pred_name2|Rest],Functions),pred_rest(Arity1,Rest,_)/*(Rest=[Args,":-",Lines]->length(Args,Arity1);(Rest=[Args]->(Lines=[[[Dbw_n,Dbw_true]]],length(Args,Arity1));(Rest=[":-",Lines]->Arity1=0;(Rest=[[Dbw_n,_],Args,Lines]->length(Args,Arity1);(Rest=[],Lines=[[[Dbw_n,Dbw_true]]],Arity1=0)))))*/),Pred_number3)),Pred_numbers).% stores these in pred calls in the sm - see ssi_find_sm.plpred_rest(Arity1,Rest,Lines) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("true",Dbw_true1),Dbw_true1=Dbw_true,(Rest=[Args,":-",Lines]->length(Args,Arity1);(Rest=[Args]->(Lines=[[[Dbw_n,Dbw_true]]],length(Args,Arity1));(Rest=[":-",Lines]->Arity1=0;(Rest=[[Dbw_n,_],Args|Lines]->length(Args,Arity1);(Rest=[],Lines=[[[Dbw_n,Dbw_true]]],Arity1=0))))),!.
**/logarithm_br(N,N) :-N=<1000,!.
**/n_level_argument :-writeln("What is your conclusion?"),read_string(user_input,"\n","\r",_,C1),n_level_argument1(6,[],Args),writeln(C1),writeln(Args).
**/qa_db_finder(Algorithm) :-writeln("What is the input variable?"),read_string(user_input, "\n", "\r", _End, I),writeln("What variable is this last variable linked to?"),read_string(user_input, "\n", "\r", _End2, N),concat_list(["member(A1,",I,N,"),A1=[",I,",",N,"],"],Algorithm1),Vars1=[I,N],repeat1(2,N,Algorithm1,Algorithm2,Vars1,Vars2),string_concat(Algorithm3,",",Algorithm2),writeln("What is the final output variable?"),read_string(user_input, "\n", "\r", _End3, O),%%trace,find_header_args1(Vars2,"",HA1),%%string_concat(HA2,",",HA1),concat_list(["a(",HA1,I,",",O,"):-"],Algorithm4),concat_list([Algorithm4,Algorithm3,"."],Algorithm).
**/split_on_number(Input,Input1,Input10) :-string_concat(A,B,Input),string_concat(C,D,B),string_length(C,1),((C=" ",string_concat(E,F,D),string_concat(J,K,E),string_length(K,1),K=" ",string_concat(G,_H,F),%trace,string_length(G,1),(number_string(_,G)),%->true;not(G=" ")),%((%C=" ",%)->(concat_list([A,C,J],Input1),%Input1=A,Input10=F))%->true;%(number_string(_,C),%Input1=A,Input10=B)),!.%);split_on_number(Input,Input1,Input10) :-string_concat(A,B,Input),string_concat(C,D,B),string_length(C,1),((C=" ",string_concat(_E,F,D),string_concat(G,_H,F),%trace,string_length(G,1),(number_string(_,G)),%->true;not(G=" ")),%((%C=" ",%)->(%concat_list([A,C,J],Input1),Input1=A,Input10=F)->true;(number_string(_,C),Input1=A,Input10=B)),!.%);split_on_number(Input,Input1,Input10) :-Input1=Input,Input10="".
**/stages_of_life(L) :-(writeln("Have you learnt spiritual meditation (y/n)?"),read_string(user_input,"\n","\r",_,S1),(S1="y"->(writeln("Have you breasoned out 80 breasonings that definitely worked (y/n)?"),read_string(user_input,"\n","\r",_,S21),(S21="y"->(writeln("Have you definitely breasoned out meditation arguments (y/n)?"),read_string(user_input,"\n","\r",_,S31),(S31="y"->(writeln("Have you definitely breasoned out the lecturer argument, allowing you to choose breasonings, not have breasonings chosen for you (y/n)?"),read_string(user_input,"\n","\r",_,S3),(S3="y"->(writeln("Have you definitely breasoned out the recordings argument, allowing you to mentally duplicate and project breasonings (y/n)?"),read_string(user_input,"\n","\r",_,S4),(S4="y"->(writeln("Have you definitely breasoned out medicine arguments, allowing you to definitely prevent a headache with spiritual means (y/n)?"),read_string(user_input,"\n","\r",_,S5),(S5="y"->(writeln("Have you definitely developed a set of algorithms that you have written down (y/n)?"),read_string(user_input,"\n","\r",_,S6),(S6="y"->(writeln("Have you definitely breasoned out the right number of breasonings for honours/masters/PhD (y/n)?"),read_string(user_input,"\n","\r",_,S7),(S7="y"->(writeln("Have you written 6/16/50 algorithms per day for Master/PhD/Professor (y/n)?"),read_string(user_input,"\n","\r",_,S8),(S8="y"->(L="written 6/16/50 algorithms per day for Master/PhD/Professor");L="Breasoned out the right number of breasonings for honours/masters/PhD."));(L="Developed algorithms")));(L="Medicine arguments")));(L="Recordings argument")));(L="Lecturer argument")));(L="Meditation arguments")));(L="80 breasonings")));(L="Spiritual meditation")));(L="Not started yet"))).
**/test(78,[[n,maplist1],[[1,2,3],[v,b]]],[        [[n,maplist1],[[v,a],[v,b]],":-",        [       [[n,maplist],[[n,+],[v,a],0,[v,b]]]        ]]        ],[[[[v,b],6]]]).test(79,[[n,equals41],[[1,2,3],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[v,a],[[v,b],"|",[v,c]]]]        ]]        ],[[[[v,b],1]]]).test(80,[[n,equals41],[[v,a],[v,d],[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,d],[v,c],[v,b]],":-",        [       [[n,equals4],[[[1,5],2,3,4],[[[v,a],"|",[v,d]],[v,c],"|",[v,b]]]]        ]]        ],[[[[v,a],1],[[v,b],[3,4]],[[v,c],2],[[v,d],[5]]]]).test(81,[[n,equals41],[[v,a],[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,c],[v,b]],":-",        [       [[n,equals4],[[[[v,a],[v,c]],"|",[v,b]],[[1,2],3,4]]]        ]]        ],[[[[v,a],1],[[v,b],[3,4]],[[v,c],2]]]).
**/test_open_types_cases(21,[[n,delicious],[[v,a1]]],        [[[n,delicious],[[t,string]]]],        [[[n,delicious],[output]]],[        [[n,delicious],[[v,a3]],":-",        [                        [[n,writeln],["How will you make sure that the food tastes delicious?"]],                [[n,read_string],[[v,a3]]]        ]]]).% ["Creating and Helping Pedagogues","CREATE AND HELP PEDAGOGUES by Lucian Green Areas of Study to Create a Pedagogue 1 of 1.txt",0,algorithms,"1. *A peer should create a Pedagogue by writing 30 areas of study with 5 As, per student before they have the professor algorithm breasoned out for him or her. Have spiritual questions and answers set up to expand these breasonings, e.g. use the ways of thinking like breasonings, etc."]% Department algorithm filer/**?- test_open_types1(off,22,R).
**/use_module(library(pio)).use_module(library(dcg/basics)).
**/checktypes1(Vars1,TypeStatements0,TypeStatements1,TypeStatements4) :-Vars1=[Vars2|Vars3],TypeStatements0=[TypeStatements2|TypeStatements3],checktypes2(Vars2,TypeStatements2,TypeStatements1,TypeStatements4),%%not(variable_name(Vars2)),checktypes1(Vars3,TypeStatements3,TypeStatements1,TypeStatements4).
**/iv1flagdisjunction(A,B,true) :-((A=true)->true; (B=true)),!.iv1flagdisjunction(_,_,false) :- !.
**/iv1flagdisjunction(A,B,true) :-(A=true); (B=true).
*/enroll(First,Second,Subject,Enrollments1,Enrollments2) :-member([Subject,Enrollments3],Enrollments1),append(Enrollments3,[[First,Second]],Enrollments4),delete(Enrollments1,[Subject,Enrollments3],Enrollments5),append(Enrollments5,[[Subject,Enrollments4]],Enrollments2).
*/data2at(Lines,Code) :- findall(Code,(member(Line,Lines),data2at1(Line,Code)),Code1), sort(Code1,Code2),Code2=[Code].%,_].
*/interpretbody(_Functions1,_Functions2,Vars,Vars,[],true) :- true.%%!.
*/interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_stringconcat],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,((get_lang_word("stringconcat",Dbw_stringconcat1),Dbw_stringconcat1=Dbw_stringconcat)->true;Dbw_stringconcat=string_concat),%%writeln1(8),        ssi_interpretpart(stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2,Vars2c).
*/#=(C,A+B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C is A+B.
*/% test then put q skips% for 80 algs% a b word c automate -> (word->word,automate->recurse) -> recurse(word)% - word or automate used if only a b or c present (or same with another sent), otherwise asks which words to use * x% collects words to note and discard (automatically discards connectives and any non-computational terms without brdict such as plus, variable, box, square, right, down),% asks about new words x% x discards conn and non comp words, asks about rest% x *% *** x records computational, discarded terms x% alg - takes previous status of word as arg or function, in previous relations (if has no function, then make function), if has no previous relation (and, a fn/arg) then ask% x uses previous relations% *** x records weightings of and uses algs (notes string) for single computational terms (also uses dict1 for converting to comp terms)% tech_dict.txt: automate,recurse, alg_dict.txt: [a, b, c, word,recurse],recurse(word) x% *** alg_gen_dict1.txt [add,sum], alg_gen_dict2.txt [sum,1,"1+1=2"]:-include('../Text-to-Breasonings/text_to_breasonings.pl').
*/%:-include('../listprologinterpreter/listprolog.pl').
*//* get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,  get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,*/% if exit or fail fn is in go after, find deepest extent of curr fn, through true, false, the same rule as above% otherwise, use furthest last end line% this works for all fnsget_last_line(Number,D,CL,A,E,Number2,F2,C,Arguments2) :-get_last_line2(Number,D,CL),CL=[Number2,[_Dbw_on_true,_],[_Dbw_go_after,_],[_Dbw_on_false,_],[_Dbw_go_to_predicates,_],[_Dbw_n_or_v1,F2]|Arguments2],append(A,C,D),C=[CL|E].
*//*alg2types(Debug,Algs,Types) :-((not(lang(_Lang1))%var(Lang1))->(retractall(lang(_)), assertz(lang("en")));true),load_lang_db, findall([Alg,Types1],(member(Alg,Algs), (( Alg=[[n,Name],Arguments1%[[v,a],[v,b],[v,c]] ],  checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs), updatevars(FirstArgs,Vars2,[],Result),unique1(Result,[],Types1))->true; (               Alg=[[n,Name],Arguments1%[[v,a],[v,b],[v,c]] ,":-",        Body], %findall([A,A],member(A,Arguments1),FirstArgs), checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs), interpretbody([]%Functions0 ,[]%Functions ,[],Vars2,Body,_Result1), updatevars(FirstArgs,Vars2,[],Result),unique1(Result,[],Types1)))),Types2).
*/:- include('../listprologinterpreter/listprolog').
*/:-include('../../listprologinterpreter/listprolog.pl').
*/:-include('../Prolog-to-List-Prolog/p2lpconverter.pl').:-include('../SSI/ssi.pl').:-include('../List-Prolog-to-Prolog-Converter/lp2pconverter1.pl').
*/:-include('../Prolog-to-List-Prolog/p2lpconverter.pl').:-include('../listprologinterpreter/listprolog.pl').
*/:-include('../SSI/ssi.pl').
*/:-include('../Text-to-Breasonings/text_to_breasonings.pl').professor_algorithm(String, Algorithm) :-phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),splitfurther(BrDict0,BrDict01),sort(BrDict01,BrDict012), SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'\"0123456789", split_string(String,SepandPad,SepandPad,String1),findall([A,POS],(member(A,String1),downcase_atom(A,A11),atom_string(A11,A12),find_pos(A12,POS,BrDict012)),B),((%get_next(B,n,_N1,D),B=D,get_next(D,v,V,E),get_next(E,n,N2,_))->(numbers(3,1,[],Ns),findall([N2,N,", "],member(N,Ns),A1),flatten(A1,A3),append(A2,[_],A3),foldr(string_concat,A2,A4),foldr(string_concat,["A=[",A4,"],maplist(",V,",A).\n",V,"(A):-write(A)."],Algorithm));((%trace,%get_next(B,n,_N1,D),B=D,get_next(D,a,V,E),get_next(E,n,N2,_))->(numbers(3,1,[],Ns),findall([N2,N,", "],member(N,Ns),A1),flatten(A1,A3),append(A2,[_],A3),foldr(string_concat,A2,A4),foldr(string_concat,["A=[",A4,"],foldr(",V,",A,\"\",B).\n",V,"(A,B,C):-string_concat(A,B,C)."],Algorithm));writeln(["Error, no VN or AN parts of speech in",String]),abort)),!.
*/:-include('../listprologinterpreter/la_maths.pl').
*/:-include('../listprologinterpreter/listprolog.pl').
*/a(Tally31):-findall(Tally,todays_students(Tally),Tally2),sum(Tally2,Tally31).
*/alg_conn(A,B,Tree,First,C) :- ontology_connection(A,B,First,Tree,[C2,C1,C3]), foldr(append,[[C2],C1,C3],C4), findall([D,"\n"],member(D,C4),E), flatten(E,F), foldr(string_concat,F,C),!.
*/delete_cp(List1,CP,List5,CP_Vars1,CP_Vars2,Swaps) :-%writeln1(delete_cp1(List1,CP,List5,CP_Vars1,CP_Vars2,Swaps)),%trace,get(curr_cp,Curr_cp,CP_Vars1),%writeln([curr_cp,Curr_cp]),%trace,(debug4(on)->writeln0([delete_cp,curr_cp,Curr_cp,CP,List1,List5,CP_Vars1,CP_Vars2,Swaps]);true),(delete_cp1(List1,CP,List5,CP_Vars1,CP_Vars2,Swaps)->true;(writeln0([delete_cp1,abort]),abort)),%writeln1(delete_cp1(List1,CP,List5)),get(curr_cp,Curr_cp1,CP_Vars1),%writeln([curr_cp,Curr_cp1]),(debug4(on)->writeln0([delete_cp,curr_cp,Curr_cp,Curr_cp1,CP,List1,List5,CP_Vars1,CP_Vars2,Swaps]);true).
*/education_research(0,D,D) :- !.
*/help(sub_term_with_address) :-help(subterm_with_address).
*/lfl2html(HTML) :-read_string(user_input,'\n','\r',_,Input),term_to_atom(Term,Input),lfl2html2(Term,HTML),!.
*/list_to_string(A,B) :- (string(A)->wrap_if_string(A,B)),!.
*/lucianpl(Debug,Query,Functions1,Result) :-international_lucianpl([lang,"en"],Debug,Query,Functions1,Result).
*/no_repeating_lists(A0) :- get_lang_word("t",T), get_lang_word("list",Dbw_list), get_lang_word("brackets",Dbw_brackets), (A0=[[T,Dbw_list],A]->false;(A0=[[T,Dbw_brackets],A]->true;[A0]=A)), findall(A1,(member(A1,A),not(A1=[T,_,_,_])),Data_A2), (Data_A2=[]->true; (forall(member(A2,Data_A2), no_repeating_lists(A2)))).
*/rhetoric3a([A,B,C,D]) :-not(var(A)),not(var(B)),not(var(C)),not(var(D)),(rhetoric3(A)->TA=true;TA=false),(rhetoric3(B)->TB=true;TB=false),(rhetoric3(C)->TC=true;TC=false),(rhetoric3(D)->TD=true;TD=false),((TA=TB,TC=TD)->true;false).
*/same_items(A0,B0):- get_lang_word("t",T), get_lang_word("list",Dbw_list), get_lang_word("brackets",Dbw_brackets), (A0=[[T,Dbw_list],A]->true;(A0=[[T,Dbw_brackets],A]->true;[A0]=A)), (B0=[[T,Dbw_list],B]->true;(B0=[[T,Dbw_brackets],B]->true;[B0]=B)), findall(Data,member([T,_,_,Data],A),Data_A), findall(Data,member([T,_,_,Data],B),Data_B), subtract(Data_A,Data_B,[]), subtract(Data_B,Data_A,[]), findall(A1,(member(A1,A),not(A1=[T,_,_,_])),Data_A2), findall(B1,(member(B1,B),not(B1=[T,_,_,_])),Data_B2), ((Data_A2=[]->true;Data_B2=[])->true; (forall((member(A2,Data_A2), member(B2,Data_B2)), same_items(A2,B2)))).
*/test(192,[[n,findall1],[[1,2,3],[v,b]]],%[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[v,b1],[[[n,member],[[v,a1],[v,a]]],                %[[n,findall],[[v,a3],[[[n,member],[[v,a1],[v,a2]]],        [[n,+],[[v,a1],2,[v,b1]]]],                %[v,b1]]]],                                [v,b]]]        ]]        ],[[[[v,b],[3,4,5]%[[1,11,111],[2,22,222],[3,33,333]]]]]).
*/test_foldr_put_sub_term_wa_ae :-findall(_,(member([N,In,T,T2],[[1,[[[1, 1], [v, 2]], [[1, 2], [v, 3]]], [[v, 1], [v, 2]], [[v, 2], [v, 3]]]]), ((foldr(put_sub_term_wa_ae,In,T,T21),T21=T2)->R=success;R=fail), writeln([R,foldr(put_sub_term_wa_ae),test,N])),_),!.
*/translate_ctt2(Input,FromLang,ToLang,Output3) :-trans_location(Trans_location),insertdoublebackslashbeforequote(Input,Input1),concat_list([Trans_location," ",FromLang,":",ToLang," \"",Input1,"\""],F),repeat,catch(call_with_time_limit(5,catch((bash_command(F,Output1)),   _,(writeln("Translate failed.  Press c to retry."),read_string(user_input, "\n", "\r", _,C),C="c"->fail;abort))),      time_limit_exceeded,      (writeln1("Error: translate timed out."),abort)),split_string(Output1,"\033","\033",Output2),Output2=[_,Output3a|_],atom_string(Output3a,Output3b),string_concat("[1m",Output3,Output3b),!.
*/        save(File_name,Term) :-        string_concat("folder_name/",File_name,Path),        term_to_atom(Term,Atom),        string_atom(String,Atom),        (open_s(Path,write,Stream1),        write(Stream1,String),        close(Stream1)),!.
*//*get_later_cps_than_cp(List1,Cp1,Cps) :-%curr_cp(N),Cp1=[_Cp_b,Cp_a|_Cp],get_later_cps_than_cp(List1,Cp_a,[],Cps1),sort(Cps1,Cps).
*//*test(247,[[n,findall],[[[v,a],[v,b]],[[n,append200],[[v,a],[v,b],["a","b","c"]]],[v,c]]],[[[n,append200],[[],[v,a],[v,a]],":-",[[[n,cut]]]],[[n,append200],[[[v,a],"|",[v,d]],[v,b],[[v,a],"|",[v,c]]],":-",[[[n,append200],[[v,d],[v,b],[v,c]]],[[n,cut]]]]],[[[[v,c],[[[],["a","b","c"]],[["a"],["b","c"]],[["a","b"],["c"]],[["a","b","c"],[]]]]]]).test(248,[[n,test2]],[[[n,test2],":-",[[[n,a],[1,[v,t]]],[[n,b],[[v,t]]]%,%[[n,cut]]]],[[n,test2],":-",[[[n,=],[[v,t],[v,false]]],[[n,b],[[v,t]]]]],[[n,a],[1,true]],[[n,b],[true],":-",[[[n,writeln],[true]]]],[[n,b],[false],":-",[[[n,writeln],[false]]]]],[[]]).*/test(246,[[n,test2]],[[[n,test2],":-",[[[n,a],[1,[v,t]]],[[n,b],[[v,t]]]]],[[n,test2],":-",[[[n,=],[[v,t],[v,false]]],[[n,b],[[v,t]]]]],[[n,a],[1,true]],[[n,b],[true],":-",[[[n,writeln],[true]]]],[[n,b],[false],":-",[[[n,writeln],[false]]]]],[[]]).
*/:-include('../listprologinterpreter/listprolog.pl').
*/diff_combos_vintage(A,A,[A]) :- !.
*/expand_types(Data1,Types1,Types2) :- expand_types1(Data1,Types1,Types2).
*/pft_expand_types(Data1,Types1,Types2,VD1,VD2) :- pft_expand_types1(Data1,Types1,Types2,VD1,VD2).
- extract query and answers- if no answers given, a warning- if can't convert, a warning- moves old cicd.txt to new loc- later: find if all given preds have egs- and whether preds called by preds have egs (if don't, give a warning)- a warning if there is no eg at all* which file should it load?*/:- use_module(library(date)).
---do all in one go without splitting on \n xxdon't worry about 121 131 repeating units, just group[1, 2, [d, 5], 1, [i, 4]]- join same types between non i,d- change i,d in same space to c (change)*/%/*% use in find_insertions_and_deletions,% but need to differentiate same values [1,1] as 1_1 and 1_2/*subtract1(A,B,C) :- subtract1(A,B,[],C),!.
/*insert_stub_arguments(A,B) :- findall(A2,(member(A1,A),A1=[[n,A23],"->",A22],findall([[n,[a,A24]]],(member(A24,A22)%,(A24=[]->A241=1000;A241=A24)),A25),A2=[[n,A23],[[v,a]],":-",A25]),B).
/*split_string17(String1,List) :-%string_codes(String2,String1),test(17,_,Code,_),%trace,%writeln1([interpret(off,[[n,grammar1],[String1,Chars,[v,t]]],%Code,A)]),interpret(off,[[n,grammar1],[String1,[v,t]]],Code,[[[[v,t],List]]]),!.
/*SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789'", % doesn't have "'" xxxstring_codes(SepandPad,SepandPad1),downcase_atom(A0,A22),SepandPad2="\n\r\s\t",string_codes(SepandPad2,SepandPad22),string_codes(A0,A01),%split_string(A0,"\n\r\s\t","\n\r\s\t",A),split_on_substring117(A01,SepandPad22,[],A),findall(A200,(member(AA,A),  downcase_atom(AA,A2),string_codes(A2,Codes),%phrase_from_file_s(string(Codes), "file.txt"),%split_string2(String1,SepandPad1,File_list),split_on_substring117(Codes,SepandPad1,[],A200)),_A20),findall(A210,(member(AA,A),string_codes(AA,Codes0),%phrase_from_file_s(string(Codes), "file.txt"),%split_string2(String1,SepandPad1,File_list),split_on_substring117(Codes0,SepandPad1,[],A210)),A21), %split_string(A2,SepandPad,SepandPad,A21), downcase_atom(W,W2), (member(entire_word,Options)-> ( (member(case_sensitive,Options)-> (atom_string(W,WS),  findall(B11,(member(A211,A21),  findall([N,WR],get_n_item(A211,WS,N),N1),  put_item_ns(A211,N1,B11) ),B12),foldr(append,B12,B1)  );  (%trace,  atom_string(W2,W2S),  findall(B11,(%member(A201,A),  findall([N,WR],get_n_item(A,W2S,N),N1),  put_item_ns(A,N1,B11)  ),B12),foldr(append,B12,B13),  findall(A200,(member(AA,B13),  downcase_atom(AA,A2),string_codes(A2,Codes),%phrase_from_file_s(string(Codes), "file.txt"),%split_string2(String1,SepandPad1,File_list),split_on_substring117(Codes,SepandPad1,[],A200)),A20), findall(B11,(member(A201,A20),  findall([N,WR],get_n_item(A201,W2S,N),N1),  put_item_ns(A201,N1,B11)  ),B14),foldr(append,B14,B1)  )), foldr(string_concat,B1,B) );  ((member(case_sensitive,Options)-> ( string_atom(A0,A1), string_atom(W,W1), atomic_list_concat(D,W1,A1), atomic_list_concat(D,WR,B1) ); ( string_atom(A22,A1), string_atom(W2,W1), atomic_list_concat(D,W1,A1), atomic_list_concat(D,WR,B1) ) )), atom_string(B1,B)).
/*sort(String3,String4),findall([A2,A],(member(A,String4),findall(A,(member(A,String3)),A1),length(A1,A2)),Freq).
/*      -4-   -2-      -5--1-   -3-      -6-*/insert_vertical_lines(A,N,A) :- N1 is N+4, end_of_cols(A,N1),!.
/*%->,2get("->",Number,D,E3,_C1,C3,_,Wrap) :-F="->", get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,  get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,(Wrap=nowrap->append([_],D1,D);D1=D), append(A,C,D1),(false%Wrap=nowrap->not(A=[]);true), C=[C111|E], %trace, C111=[Number2,[Dbw_on_true,_N1],[Dbw_go_after,_],[Dbw_on_false,_Number3],[Dbw_go_to_predicates,_],[Dbw_n_or_v1,F2]|Arguments2],%trace,(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),((F2="[]"->true;(F2=Dbw_not->true;(F2=Dbw_or->true;(F2="->"->true;(F2=Dbw_findall)))))-> (%append(A,[C111],AC), %trace, get_up_to_next_chunk(A,[],Ax1), get(F2,Number2,C%AC%E E*  ,E2,[],C32,Arguments2,nowrap),  append(Ax1  ,C32,C31));(%convert_chunk%trace,append(A,[C111],AC),%trace,get_up_to_next_chunk(AC,[],C31),E=E2)),%(Wrap=nowrap->append([_],E21,E2);E21=E2), append(A1,C11,E2), C11=[C112|E1],  %trace, C112=[Number31,[Dbw_on_true,A3],[Dbw_go_after,B],[Dbw_on_false,_Number4],[Dbw_go_to_predicates,_],[Dbw_n_or_v2,F3]|Arguments3],(Dbw_n_or_v2=Dbw_n->true;Dbw_n_or_v2=Dbw_v),(A3=[Fail_or_exit3,Number]->true;B=[Fail_or_exit3,Number]),  (Fail_or_exit3=exit_function->true;Fail_or_exit3=fail_function),((F3="[]"->true;(F3=Dbw_not->true;(F3=Dbw_or->true;(F3="->"->true;(F3=Dbw_findall)))))-> (%append(A1,[C112],AC1), get_up_to_next_chunk(A1,[],Ax), get(F3,Number31,%E1% C11%,AC1%E*  ,E3,[]%C1  ,C3111,Arguments3,nowrap),  append(Ax,C3111,C311));(%convert_chunk%trace,append(A1,[C112],AC1),get_up_to_next_chunk(AC1,[],C311),E1=E3)),%trace,foldr(append,[C31,C311],C313),(true%Wrap=wrap->C3=[[[Dbw_n,F],C313]];C3=[[Dbw_n,F],C313]).*//*get(Dbw_findall,Number,D,E2,_C1,C3,[Argument1,Argument2],Wrap) :-F=Dbw_findall, get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,  get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,%get_lang_word("findall_exit_function",Dbw_findall_exit_function1),Dbw_findall_exit_function1=Dbw_findall_exit_function,%get_lang_word("findall_fail_function",Dbw_findall_fail_function1),Dbw_findall_fail_function1=Dbw_findall_fail_function,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,(Wrap=nowrap->append([_],D1,D);D1=D), append(A,C,D1),(false%Wrap=nowrap->not(A=[]);true), C=[C111|E],  C111=[Number2,[Dbw_on_true,[Fail_or_exit1,Number]],[Dbw_go_after,_],[Dbw_on_false,[Fail_or_exit2,Number]],[Dbw_go_to_predicates,_],[Dbw_n_or_v1,F2]|Arguments2],  (Fail_or_exit1=exit_function->true;Fail_or_exit1=fail_function),  (Fail_or_exit2=exit_function->true;Fail_or_exit2=fail_function),(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),%convert_chunk%trace,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,%trace,((F2="[]"->true;(F2=Dbw_not->true;(F2=Dbw_or->true;(F2="->"->true;(F2=Dbw_findall)))))-> (%append(A,[C111],AC), %trace, get_up_to_next_chunk(A,[],Ax1), get(F2,Number2,C%AC%E E*  ,E2,[],C32,Arguments2,nowrap),  append(Ax1  ,C32,C31));(%convert_chunk%trace,append(A,[C111],AC),%trace,get_up_to_next_chunk(AC,[],C31),E=E2)),%C3=[C31], % "[]"foldr(append,[[Argument1],C31,[Argument2]],Arguments3),(true%Wrap=wrap->C3=[[[Dbw_n,F],Arguments3]];C3=[[Dbw_n,F],Arguments3]).
/**/test(245,[[[n,equals4],[[v,a],"abc"]],[[n,string_chars],[[v,a],[[v,x],[v,y],[v,z]]]]],[],[[[[v,a], "abc"],[[v,x], a],[[v,y], b],[[v,z], c]]]).
/*- finds, checks types- pred calls are "any" types - if clause types don't fit - error - need to fit clause types together to find return var types go backwards from end x from start, collecting type/list/var transformationslike an interpreter without recursion, find typesdeals with lists - list type in type statementfindall - produce a list of format varsif-then - use type=ab, a=one type, b=anothertest(33,[[n,downpipe],[3,1,[[3,[4,2]],[2,[3,1]]]]],[        [[n,downpipe],[[v,a],[v,a],[v,b]]],        [[n,downpipe],[[v,a],[v,b],[v,c]],":-",        [       [[n,member2],[[v,c],[v,c1]]],                [[n,equals4],[[v,c1],[[v,a],[v,c12]]]],                [[n,equals4],[[v,c12],[[v,c121],[v,c122]]]],                [[n,"->"],[[[n,>],[[v,a],[v,c121]]],                [[n,downpipe],[[v,c121],[v,b],[v,c]]],                [[n,"->"],[[[n,>],[[v,a],[v,c122]]],                        [[n,downpipe],[[v,c122],[v,b],[v,c]]],                        [[n,fail]]]]]]        ]]        ],[[]]).
/*?- product_name(N).N = "KNYTUJM".?- product_name(N).
/*?- professor_algorithm("In this way, I prepared to verify that the algorithms had the same qualities by stating that the self should find similarities of ontologies in the other's five algorithms.",A).
/*A = (append(b, c, l), append([b], e, c), append(f, g, e), append([d], j, g)).
/*Necessary to load before running s2a each time:retractall(vars_table_s2a(_)),                                               assertz(vars_table_s2a([])),                                                    ['spec_to_algorithm'].
/*[debug]  ?- find_lists1([[1, [2, 2], 1, [2]], [1, [2, 2]],[1, [2, 2], 1, [2],1,[2,2,2]]], [],A).A = [1, [2]].[debug]  ?- find_lists1([[1, [2, 2], 1, [2]], [1, [2, 2]]], [],A). A = [1, [2]].
/*a(A).A = 6.
/*enroll_with_quota([[a,b,m],[c,d,m]],[[m,1,[[e,f]]]],A).A = [[m, 1, [[e, f]]]].enroll_with_quota([[a,b,m],[c,d,m]],[[m,0,[]]],A).A = [[m, 0, []]].
/*no_repeating_lists([[t,brackets],[[_,_,_,2],[[t,brackets],[[_,_,_,1]]]]]).                                                                          true.no_repeating_lists([[t,brackets],[[_,_,_,2],[[t,list],[[_,_,_,1]]]]]).false.
/*translate_ctt2("Hello.","en","fr","Bonjoura.").translate_ctt2("Bonjoura.","fr","en","Hellok.").
/*uncompile_list([[5,7],[0,1,4],[0,2,0,3,0,4,4],[4],[4],[4]],[0, 0],L).
/* append(After4,After5,After), not(After4=[]), %not(i_or_d(After4)), %forall(member(After45,After4),not(i_or_d(After45)))-> append(After53,_After54,After5), not(After53=[]), (i_or_d(After53)), append(After4,After53,After500), (After500=[]->After2=After3; append(After2,After4,After6), join_and_change(After5,After6,After3)),!.
/* pretty_print(argument,dfs_in_order,A),findall(A1,(member(A1,A),write(A1)),_).        -4-   |-2-   |   -5--1-|   |-3-       -6-        pretty_print(argument1,dfs_in_order,A),findall(A1,(member(A1,A),write(A1)),_).        -1-   |-2-   |   -3--5-|   |-4-       -6-       */object(argument1,(((null,1,null),2,(null,3,null)),5,(null,4,(null,6,null)))).
/*- for each customer, each time- medit and medic each given 250- 3 points each given 250- my opinion - + if they have finished, are happy*/sectest_p:-%random(X),N is round(100*X),%phrase_from_file_s(string([N,_]), "a_tally.txt"),%string_codes(String02b,String00a),%atom_to_term(String00a,[N,_],[]),numbers(2,1,[],Ns),%writeln(N),findall(_,(member(N1,Ns),find_time1(H,M,S),politeness(0,Medit),politeness(0,Medic),politeness(0,Three_points),politeness(0,My_opinion), % if there's nothing else wrong, is there anything else wrong?% no_death(0,Threats2), % medits for lifewriteln([N1,H,M,S,Medit,medit]),writeln([N1,H,M,S,Medic,medic]),writeln([N1,H,M,S,Three_points,three_points]),writeln([N1,H,M,S,My_opinion,my_opinion]),Br=16000, W=80,grammar_logic_to_alg1("I am happy.",Br,GL_out1),term_to_atom(GL_out1,GL_out2),string_atom(GL_out,GL_out2),texttobr2(u,u,GL_out,Br,false,false,false,false,false,false,W),texttobr(u,u,GL_out,Br)),_).%,Threats2,no_death]).
/*1:1:2:2:2:2:4*/more_objects(O) :-findall_until_fail([S2,D2],(repeat,writeln("If there is another shape in the object, please enter its name, otherwise enter 'cancel'."),read_string(user_input,"\n","\n",_,S2),(S2="cancel"->S3=fail;(S3=true,dim(D2)))),S3,O),!.
/*?- add1(A,B,3).                                                                 A = 0,B = 3 ;A = 1,B = 2 ;A = 2,B = 1 ;A = 3,B = 0 ;*/add1(A,B,C) :- var(A), var(B), length(C1,C), append(A1,B1,C1), length(A1,A), length(B1,B).
/*?- distance_greater3d(0,0,0,14,15,0,9).
/*?- education_research(1,[],D),writeln(D).
/*?- evader(5,N1),writeln(N1).
/*?- foldr(unenroll,[[a,b,m],[c,d,m]],[[m,[[e,f],[a,b]]]],A).
/*?- house_cross_section([r1,r2,r3],[1,1.5],A).
/*?- perpetual_motion(2,N).
/*?- pretty_print_table([[1,2,3],[4,5,6],[7,8,9]]).123456789*/pretty_print_table(Data) :-findall(_,(member(Item,Data),findall(_,(member(Item1,Item),write(Item1),write("\t")),_),writeln("")),_).
/*?- qa_tt2(2).
/*?- qa_tt3(1).*** Journey 1 ***Have you meditated before time travel?(y/n)?|: yYou may now time travel.
/*?- r31(A,_,_,_).A = true ;false.?- r32(_,B,_,_).B = true ;false.?- r33(_,_,C,_).C = true ;false.
/*?- revoke([land,contract,money],R).
/*?- rhetoric_merge_trees([a,[b,[]]],[c,[d,[]]],T3).T3 = [a-c, [b-d, [[]]]].
/*?- trace,                                                              time_proportion(0,0,0,1,0,0,1,0,0,P).
/*?- two_contact_points(S3),writeln(S3).
/*[debug]  ?- point_dups(["a","a",b,b,"c"],1,[],A,[],B,[],C,[],D).                               A = [["a", 1], [b, 3], ["c", 5]],non duplicated items and their indicesB = [[1, 1], [2, 1], [3, 3], [4, 3], [5, 5]],(duplicated items x all items), their former indices and the indices of the items they are duplicates ofC = ["a", b, "c"].
/*append_list3(A1,B):-append_list3(A1,[],B),!.
/*append_list3(A1,B):-append_list3(A1,[],B),!.append_list3([],A,A):-!.append_list3(List,A,B) :-List=[Item|Items],append(A,Item,C),append_list3(Items,C,B),!.
/*append_tree(Tree,Code) :- pattern(Line,Code) :- Line=[Direction|Pattern] (Direction=l->DC=[];(get_var_at(Var), % delete l CD=[[[n,reverse],[[v,*],Var]]])), */get_var_at(Var) :- var_at(N1), N2 is N1+1, retractall(var_at(_)), assertz(var_at(N2)), atom_concat('v',N1,N3), Var=[v,N3].
/*background(X1,Y1,File_contents1) :-X is X1*6,Y is Y1*10,numbers(X,1,[],XN),numbers(Y,1,[],YN),findall([X2,Y2,0],(member(X2,XN),member(Y2,YN)),File_contents1).
/*calc_form([A,%[[function,_,_,FEC1,F21],B],%[function,_,_,FEC2,F22]][C%[function,_,_,C1,F21],D%[function,_,_,C2,F22]],[[A,B],[C1,D1]]) :- calc_form2(A%FEC1 ,B%F21,C1 ), calc_form2(C%FEC2 ,D%F22,C2 ,[C1,D1]),!.
/*calc_form([A,%[[function,_,_,FEC1,F21],B],%[function,_,_,FEC2,F22]][C%[function,_,_,C1,F21],D%[function,_,_,C2,F22]],[[A,B],[C1,D1]]) :- calc_form2(A%FEC1 ,B%F21,C1 ), calc_form2(C%FEC2 ,D%F22,C2 ,[C1,D1]),!.calc_form(A%[function,_,_,FEC1,F21],B%[function,_,_,C1,F21],[A,B1]) :- calc_form2(A%FEC1 ,B%F21,C1 B1),!.
/*check_same2(TL14,TL17,L1,L2,Start,TN1,TN2) :- get_lang_word("t",T),  get_lang_word("brackets",Dbw_brackets),  get_lang_word("list",Dbw_list),  %trace, TL14=[[T,Dbw_brackets],[TL141|TL142]], TL17=[TL15|TL16], TL15=[[T,Dbw_brackets],[TL151|TL152]], check_same([TL141],[TL151],[],L3,Start,TN1,TN3), append(TL142,TL152,TL142TL152), find_lists(TL142TL152,[],L4,Start,TN3,TN4), foldr(append,[L3,[[t,list],L4]],L34), %*** foldr(append,[L1,L34],L5), %trace, %append(TL17,)) (TL16=[]->(L5=L2,TN4=TN2); (TL16=[TL171|TL18], check_same2(TL171,[L5],TL18,L2,Start,TN4,TN2))),!.
/*collect_simplify_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[[T,Dbw_brackets],Types4]|Types6],collect_simplify_types(Types4,[],Data2),Types5=[Data2],append_list3([Types1,Types5],Types2a),collect_simplify_types(Types6,Types2a,Types2),!.
/*cut_cps_if_necessary1(Pred_id,Choice_point_trail11,Choice_point_trail2,CP_Vars1,CP_Vars2,Predicate_number,Globals3) :-cut_cps_if_necessary(Pred_id,Choice_point_trail11,Choice_point_trail2,CP_Vars1,CP_Vars2,Predicate_number,Globals3,no-check-rec).
/*data_to_types20(Data,Types1,Types2,VD1,VD2) :-(data_to_types21(Data,Types1,Types2,VD1,VD2)->true;data_to_types2(Data,Types1,Types2,VD1,VD2,true)).
/*del_append(Globals31,[[[vars1,Pred_id],Vars1]],Globals32) :- delete(Globals31,[[[vars1,Pred_id],_]],Globals33), append(Globals33,[[[vars1,Pred_id],Vars1]],Globals32),!.
/*diff_combos(A,A,[]) :- !.
/*expand_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[Data2],not(Data2=[T,_]),expand_types1(Data2,[],Types4),Types5=Types4,append_list3([Types1,Types5],Types2),!.
/*file(Ls2) --> newlines1(N),file(Ls),%{writeln1(L)}, %%*** {%foldr(append,[[L],N|Ls],Ls3), delete([N|Ls],[],Ls2)},%{foldr(append,[N],Ls2)},%{writeln1(L)},!.*/%%predicate([]) --> newlines1(_).
/*find_complexity(n,C).
/*find_first(A,B,B_condition,C) :- D = (B,(B_condition->!;fail)),findall(A,D,C1), (C1=[C|_]->true;C=[]),!.
/*find_insertions_and_deletions(Before,After,Insertions,Deletions) :- subtract(After,Before,Insertions), subtract(Before,After,Deletions).
/*find_lists(T1,T2,L1,L2,Start) :- length(T1,TL), length(T2,TL), check_same(T1,T2,L1,L2,Start),!.
/*find_merge2(H,K11,LP,Tests) :-%trace,findall1(N1,(member([[n,N]|_],LP),string_strings(N,N1)),Ns),findall1([K11,H,F2],(member([[n,comment%c],[Comment]],LP),string_strings(Comment,C),member(N2,Ns),append(_A,B,C),append(N2,Dx,B),%trace,append(Ex,Dx1,Dx),%append(_Ex1,Dx2,Dx1),append(["."],_N21,Dx1),%trace,flatten([N2,Ex%,"."],N2Ex),foldr(string_concat,N2Ex,F),% the answer is A= ... "." or " "% in this, just 1 answer%trace,reverse(Ex,D),append(E2,_E3,D),reverse(E2,E31),(append([","],E5,E31)->true;append(["("],E5,E31)),append(E6,E7,E5),append([")"],_,E7),%trace,%member(N21,Ns),member([[n,comment%c],[Comment1]],LP),string_strings(Comment1,C1),append(_A1,Bx,C1),append(E6,Dxx,Bx),append(E61,Dxx1,Dxx),%trace,(append(["."],_Exx,Dxx1)%->true;%append([],Exx,Dxx1)),%trace,%writeln([_A1,Bx,E6,Dxx,E61,Dxx1]),%flatten([])foldr(string_concat,E61,E612),sub_string(E612,_,_,_,"="),%trace,flatten([E6,E612%,Exx%,"."],E6Exx),foldr(string_concat,E6Exx,F1),%trace,%term_to_atom((F,F1),F00),%term_to_atom(F0,F00),%term_to_atom(F10,F1),foldr(string_concat,["(",F,",",F1,")"],F2)%atom_string(F0,F),%atom_string(F10,F1),%F2=%F0%%(F0,F10)),Tests),!.
/*find_number([[var,_,_,_,_,1,_,_,_,_,_]],A).
/*find_number([[var,_,_,_,_,1,_,_,_,_,_]],A).A = 1.find_number([var,_,_,_,_,1,_,_,_,_,_],A).A = 1.*/find_number(A,N) :-(sub_term_wa([var,_,_,_,_,_,_,_,_,_,_], A, B)->B=[[_, [var,_,_,_,_,N,_,_,_,_,_]]|_];A=N),%->true;%find_first(B,(member(B,A),number(B)),N)),%C=[N|_],!.% number1(1,A),number1([var,_,_,_,_,1,_,_,_,_,_],B),number1("1",C).
/*find_sums_in_term([],%F2,F3,F3) :- !.
/*find_sums_in_term([],%F2,F3,F3) :- !.find_sums_in_term(F1,%F2,F3,F33) :-sort(F1,F13),%reverse(F13,F14),F13=[[Add,_T]|_F4],append(Add2,[_Last],Add),append(Add2,[_],Add3),%reverse(F1,F12),F1=F12,member([Add3,T2],F12),append(Add4,[Last],Add3),append(Add4,[_],Add5),%delete(F12,[Add3,T2],F131),findall(Add6,member([Add6,_T3],F12),Add61),sub_term_wa(Add5, Add61%F12, Formula_Instances1),%trace,find_2_steps(Last,%F12,%Formula_Instances1,[],Formula_Instances2),foldr(put_sub_term_wa_ae,Formula_Instances2,Add61%F131,F132),findall([ZZ,ZZ2],(member(ZZ,F132),member([ZZ,ZZ2],F12)),ZZ3),%trace,subtract(F1,%Formula_Instances1,ZZ3,F35%Formula_Instances3),foldr(append,[F35,%F3,[[Add3,T2]],[ZZ3]],F34),((sort(F1,L),sort(F34,%Formula_Instances3,L))->F34=Formula_Instances3;find_sums_in_term(Formula_Instances3,F34,F33)),!.
/*find_tails1([G,Val1],V4,V2,V3) :- V4=[[G2,[Val2|Val1]]], trace, append(V2,[[G2,[tail,G]]],V5), append(V5,[[G2,[Val2|Val1]]],V3),!.
/*findall1(B,(member([[n,comment],[A]],LP),string_strings(A,A12),truncate_comment(A12,A11),reverse(A11,A13),truncate_full_stop(A13,A14),reverse(A14,A15),foldr(string_concat,A15,A16),term_to_atom(A1,A16),((functor(A1,(=),2),arg(1,A1,N),arg(2,A1,Ans),B=[ans,N,=,Ans])->true;(functor(A1,N,Ar),numbers(Ar,1,[],ArN),findall1(ArN2,(member(ArN1,ArN),arg(ArN1,A1,ArN2),var(ArN2)),ArN3),B=[A1,ArN3]))),C),findall1([K11,H,F2],(member([ans,N,=,Ans],C),member([A1,Ans],C),F=A1,F1=(N=Ans),foldr(string_concat,["(",F,",",F1,")"],F2)),Tests),!.
/*get(Dbw_not,Number,D,E2,_C1,C3,_,Wrap) :-F=Dbw_not, get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,  get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,*//* get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,%trace,(Wrap=nowrap->append([_],D1,D);D1=D), append(A,C,D1),(false%Wrap=nowrap->not(A=[]);true), C=[C112|E],C112=[Number2,[Dbw_on_true,A3],[Dbw_go_after,A4],[Dbw_on_false,_%[fail_function,Number]],[Dbw_go_to_predicates,_],[Dbw_n_or_v1,F2]|Arguments2],(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),(A3=[Fail_or_exit,Number]->true;A4=[Fail_or_exit,Number]),(Fail_or_exit=exit_function->true;Fail_or_exit=fail_function),%convert_chunk%trace,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,%trace,((F2="[]"->true;(F2=Dbw_not->true;(F2=Dbw_or->true;(F2="->"->true;(F2=Dbw_findall)))))-> (%append(A,[C111],AC), %trace,  get_up_to_next_chunk(A,[],Ax1), get(F2,Number2,C%AC%E E*  ,E2,[],C32,Arguments2,nowrap),  append(Ax1  ,C32,C31));(%convert_chunk%trace,append(A,[C112],AC),%trace,get_up_to_next_chunk(AC,[],C31),E=E2)),(true%Wrap=wrap->C3=[[[Dbw_n,F],C31]];C3=[[Dbw_n,F],C31]).
/*get_ampersand_var_s2a(N) :-ampersand_var_n_s2a(N),N1 is N+1,retractall(ampersand_var_n_s2a(_)),assertz(ampersand_var_n_s2a(N1)).
/*get_items_summing_to_l(_Q2,_,N,N,L,L) :- !.
/*get_items_summing_to_l(_Q2,_,N,N,L,L) :- !.get_items_summing_to_l(Q2,L16,N1,N2,L1,L2) :-Q2=[S-N|Q4],(L16=N->(N3 is N1+L16,N->a,N3 is N1-N)).*/find_a_or_n(Q2,L111) :-%SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",operators1(Ops),extra_characters(EC),string_concat(Ops,EC,SepandPad),% SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",findall(L14,(member(L2,Q2),split_on_substring(L2,SepandPad,L3),foldr(string_concat,L3,S3),atom_chars(S3,A3),%atom_string(S31,S3),%string_concat(L4,_,S3),%string_length(L4,1),%atom_string(L5,L4),%L3=[L31|_],(A3=''->L13=[(*)];findall(L12,(member(A,A3)%atom_concat(S34,_,A3),((atom_length(S34,1)->((,((char_type(A,alpha)->L12=a;(char_type(A,digit),L12=n))->true;L12=(*))),L13),(member(n,L13)->L14=n;(member(a,L13)->L14=a;L14=(*))))),L11),findall(X,(member(X1,L11),(X1=(*)->X=n;X=X1)),L111),!.
/*get_up_to_next_chunk2([],C,C) :- !.
/*induct(In,Out,Commands1,Commands2) :- %type(Command,In1,Out1), interpret_induct(Command,In,Out1,Alg14), append(Commands1,[[Command,Alg14,Out1]],Commands3), induct(Out1,Out2,Commands3,Commands2),  %data_to_alg41(Out2,[],_,[],O31), %data_to_alg41(Out,[],_,[],O11), %append(O31,O32,O11), %(O32=[]->Commands4=Commands2; %induct(O32,Out2,Commands4,Commands2)),  Out=Out2.
/*interpretpart(term_to_atom,Variable1,Variable2,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("term_to_atom",Dbw_term_to_atom),       getvalues(Variable1,Variable2,Value1,Value2,Vars1),        ((contains_empty(Value1),not(contains_empty(Value2)))->                       (debug_call(Skip,[[Dbw_n,Dbw_term_to_atom],[variable,Value2]]),((%is_list(Value1),term_to_atom(Value1A,Value2),%string_atom(Value2A,Value2A1), % *** LPI only takes strings   %sort(Value1,Value2A),        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_term_to_atom],[Value1A,Value2]]);     debug_fail(Skip,[[Dbw_n,Dbw_term_to_atom],[variable,Value2]])));(        (debug_call(Skip,[[Dbw_n,Dbw_term_to_atom],[Value1,variable]]),((%is_list(Value1),term_to_atom(Value1,Value2A),%string_atom(Value2A,Value2A1), % *** LPI only takes strings   %sort(Value1,Value2A),        val1emptyorvalsequal(Value2,Value2A),        putvalue(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_term_to_atom],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_term_to_atom],[Value1,variable]]))))),!.
/*interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_member],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member",Dbw_member1),Dbw_member1=Dbw_member,%%writeln1(8),        interpretpart(member2,Variable1,Variable2,Vars1,Vars2).
/*interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_stringconcat],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string_concat",Dbw_stringconcat1),Dbw_stringconcat1=Dbw_stringconcat,        interpretpart(stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2).
/*interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_term_to_atom],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("term_to_atom",Dbw_term_to_atom1),Dbw_term_to_atom1=Dbw_term_to_atom,        %trace,        interpretpart(term_to_atom,Variable1,Variable2,Vars1,Vars2).
/*interpretstatement4(ssi,_F0,_Functions,[[Dbw_n,Dbw_member],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[],AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member",Dbw_member1),Dbw_member1=Dbw_member,%%writeln1(8),        ssi_interpretpart(member,Variable1,Variable2,Vars1,Vars2,AC).
/*length1([],_,T,T,L,L).
/*list_to_string(A,"",C) :- wrap_if_string(A,C), %foldr(string_concat,["[",B,"]"],C), !.
/*list_to_string([["a"],b],"",A).
/*make_formula_term1([],F3,F3) :- !.
/*merge2a(Old_S1,S1,T3) :- %open_s("test.lp",write,S21), %write(S21,S3),close(S21), retractall(term_to_numbers1(_)), assertz(term_to_numbers1(1)), term_to_numbers(Old_S1,[],Corr,[],N1), term_to_numbers(S1,Corr,Corr2,[],N2), diff_group_combos(N1,N2,C), findall1(T,(member(C1,C),numbers_to_term(C1,Corr2,[],T)%, %lp2p1(T0,T) ),T1), delete(T1,[],T3),!.
/*newlines11([]) --> [],%lookahead([]),!.
/*order_preds_bottom_up_post_order_dfs(_L,Functions,Ordered_pred_nums1,Ordered_pred_nums2) :-%trace,Functions=[[N,P]|F],append(Ordered_pred_nums1,[%[L,N%]],Ordered_pred_nums3), findall1(Ordered_pred_nums21,order_preds_bottom_up1_post_order_dfs(_L1,P,F,Ordered_pred_nums3,Ordered_pred_nums21),Ordered_pred_nums2),!.
/*perimeter(3, 3, _79014).-1-----1*1-----1---------------------------------P = 4.perimeter(3, 3, _87624).-------------------1-----1*1-----------1*1-----1-P = 6.*/random_2d_shape(X_lim,Y_lim,Cs) :- X_lim1 is 2*X_lim+1, numbers(X_lim1,1,[],Xs), Y_lim1 is 2*Y_lim+1, numbers(Y_lim1,1,[],Ys), findall([X,Y,C],(member(X,Xs),member(Y,Ys), X1 is floor(X/2),X2 is X/2, Y1 is floor(Y/2),Y2 is Y/2, ((X1=X2,Y1=Y2 )-> (random(X3),X4 is floor(2*X3), random(Y3),Y4 is floor(2*Y3), ((%true% X4=1,Y4=1 )->C=(*);C=(-))); C=(-))),Cs).
/*pft_expand_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[Data2],not(Data2=[T,_]),pft_expand_types1(Data2,[],Types4),Types5=Types4,append_list3([Types1,Types5],Types2),!.
/*pp(C,N1) :-findall(N,(member(B,C),B=[D|E],string_concat(F,H,D),string_length(F,1),upcase_atom(F,G),concat_list([G,H," "],J),findall([K," "],member(K,E),L),maplist(append,[L],[L1]),concat_list(L1,M),string_concat(M1,M2,M),string_length(M2,1),concat_list([J,M1,". "],N)),P),concat_list(P,N1),!.
/*put_var([V,T],Vars,Vars2) :- (member([V,Val],Vars)->match4_new1(Val,T,Vars,Vars1); %fail)-> Vars=Vars1), append(Vars1,[[V,T]],Vars2).
/*repeat_until_last_two_same(Pred,Pred_res_var,A, B, Result) :-functor(Pred,Name,Arity),functor(Pred_new,Name,Arity),copy_term(Pred_res_var,Pred_res_var_new),%copy_term(Pred_new,Pred_new1),%copy_term(Pred_new,Pred_new2),% Generate some result    (Pred,%generate_result(Result1),    (%false%var(Pred_res_var)    %->%var(B)        %(        %repeat_until_last_two_same(Pred_new1,Pred_res_var,B,Pred_res_var, Result);        % repeat_until_last_two_same(Result1).
/*repeat_until_the_same(A,Value,B,B_res_var) :-repeat_until_the_same1(A,Value,B_res_var,B,B_res_var,B_res_var),!.
/*repeat_until_the_same(A,Value,B_initial,B,B_result) :-%copy_term(B,B1),A=Value,%A_initial_assignment,repeat_until_the_same1(A,B_initial,B,B_result),!.
/*replace11_vintage([],_Insertions,_Permanent_insertions,After,After) :- !.
/*reset_min(X,Y,Z,Coords1,Coords2,Max_X,Max_Y,Max_Z) :- min_max(Coords1,Min_X,Min_Y,Min_Z,Max_X1,Max_Y1,Max_Z1), Max_X is Max_X1-Min_X+1, Max_Y is Max_Y1-Min_Y+1, Max_Z is Max_Z1-Min_Z+1, DX is Min_X-1, DY is Min_Y-1, DZ is Min_Z-1, %trace, findall([X5,Y5,Z5],(member([X4,Y4,Z4],Coords1), X5 is X4-DX+X-1, Y5 is Y4-DY+Y-1, Z5 is Z4-DZ+Z-1),Coords2). */% reflect shapereflect_shape(Shape_coords1,D,Shape_coords2) :-%trace, findall(Shape_coords3,(member(List,Shape_coords1), reflect_shape1(List,D,Shape_coords3)), Shape_coords2).
/*reverse_engineering1(5,A).
/*set_up_merge(Type,File1) :- get_file(Type,File1,S1), %p2lpconverter([Type,File1],S1), pp0(S1,S2),S2=S3,%term_to_atom(S2,S3), open_s("test.lp",write,S21), write(S21,S3),close(S21).
/*simplify_by_replacing([],V,V) :- !.
/*split_into_lp_files1(T7,T10) :- split_into_lp_files1(T7,[],_T8,[],T9), delete(T9,[],T10),!.
/*ss([[[200,2000],[2,20]],[[100,1000],[1,10]]],X,Y,Z).                               X = [2200, 22, 1100, 11],Y = [202, 2020, 101, 1010],Z = [300, 3, 3000, 30].
/*ssi_interpretpart(member3,_Variable2,_Variable1,_Vars1,Vars2,_Vars2c,AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member3",Dbw_member2),%trace,AC=[[_Dbw_n,_Dbw_member],[Value1,Value2],[Value1a,Value2a],Vars2|_],%getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_member2],[Value1,Value2]]),%((%Value2=empty,%((findall([Vars2b,Value2a],(member(Value2a,Value1),%putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)%),Vars2a),Vars2a=[[Vars2,Value2a]|Vars2d],%findall(Vars2e,member([Vars2e,_],Vars2d),Vars2c)%))),      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value1a,Value2a]]).
/*succ1("January",A),succ1("A",B),succ1("14",C).
/*term_to_list1(T,L) :-term_to_list1(T,[],L).term_to_list1([],L1,L1) :-!.term_to_list1(T,L1,L2) :-T=[T1|T2],(T1=[r,[_V,T3]]->(foldr(append,T3,T31),append(L1,T31,L3));%(T1=[nd,T3s]->%(member(T3,T3s),%foldr(append,T3,T31),%append(L1,T31,L3));(T1=[]->append(L1,[[]],L3);((is_list(T1),term_to_list1(T1,[],L32))->(L31=[L32],append(L1,L31,L3));append(L1,[T1],L3)))),term_to_list1(T2,L3,L2).
/*test(192,[[n,a]],[[[n,a],":-",[[[[n,writeln],["1"]],[[n,writeln],["2"]]],[[n,writeln],["3"]],[[n,false]]]]]      ,[]).
/*test(217,[[n,a],[[v,a]]],[[[n,a],[[v,a]],":-",[[[n,b],[[v,a]]]]],[[n,b],[empty],":-",[[[n,true]]]]%[[n,b],[2],":-",[[[n,true]]]]],],[[[[v,a],empty]]]).
/*test(246,[[n,a],[[v,b]]],%test(244,[[n,foldl1],[[n,add],[1,2,3],0,[v,d]]],[        [[n,a],[[v,b]],":-",        [       [[n,not],[[[[n,c],[v,c]]]]]        ]]],[[]]).test(247,[[n,a],[[v,b]]],%test(244,[[n,foldl1],[[n,add],[1,2,3],0,[v,d]]],[        [[n,a],[[v,b]],":-",        [       [[n,"->"],[[[[n,c],[[v,c]]]],[[[n,c],[[v,c]]]],[[[n,c],[[v,c]]]]]]        ]]],[[]]).
/*test(247,[[n,test]],[[[n,test],":-",[[[n,not],[[[[n,member],[[1,2],[v,a]]]%,[[n,cut]]]]]]]],[]).
/*tests_pred(AT1331c,Command) :- member([N|VE],AT1331c), N=[_,N1], ((VE=[V]->true;(VE=[V|_]))->length(V,Arity);Arity=0), square_to_round(List,Command), functor(Item,N1,Arity), member(Item,List),!.
/**caw00(off,f,[[append,2,1],[delete,2,1],[head,1,1],[tail,1,1],[member,1,1]],50,7,[[a,1]],[[b,1]],[],Program).
/**merge_lists1a([],Options,Options) :- !.merge_lists1a(Options1,Options2a,Options2b) :-Options1=[Options4|Options5],merge_lists1c(Options4,Options5,Options2a,Options2c),merge_lists1a(Options5,Options2c,Options2b).
/**%% Need to analyse body, test whether cut is after a statement, cut resultstest(105a,[[n,findall1],[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[v,b1],[[[n,member],[[v,a],[v,a1]]],                [[n,cut]],                [[n,findall],[[v,a2],[[n,member],[[v,a1],[v,a2]]],                [v,b1]]]                ],                                [v,b]]]        ]]        ],[[[[v,b],[[1,11,111]]]]]).test(105b,[[n,findall1],[[1,2,3],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[[v,a1],[v,a1]],[[[n,member],[[v,a],[v,a1]]],[[n,cut]]],                [v,b]]]        ]]        ],[[[[v,b],[[1,1]]]]]).
/**?- add_to_breasoning_log(["file","file.txt"]).
/**?- expand_types1([[[t, number]], [t, string], [t, number]],[],T).
/**?- logarithm_br(100000,N).                                                      [5,*250 breasonings]N = 5.
/**?- pft_expand_types1([[[t, number]], [t, string], [t, number]],[],T).
/**Ideas:[3,35,statement 3,comment 2][21,18,statement 2,comment 2]**/interesting_ideas(Philosophies,Comments) :-ideas(Philosophies,Comments,[],Ideas1),sort(Ideas1,Ideas),writeln("Ideas:"),findall(_,(member(Idea,Ideas),writeln(Idea)),_).
/**[debug]  ?- rpg_game_player3D.                                                  Enter filename (to be loaded from saved_games/*):|: aEnter X co-ordinate of starting position:|: 14Enter Y co-ordinate of starting position:|: 16Enter Z co-ordinate of starting position:|: 5Enter apply a to b giving c, in the form [[a1,b1,c1],[a2,b2,c2]]:|: [[s1,r,b1],[b1,m,b2],[b2,s2,b3],[b3,k,b4],[b4,c,e]]*****[At,Unknown][Go,[w,s],or take,[a],or drop,[],map, or apply an object to an object]|: load bEnter X co-ordinate of starting position:|: 2Enter Y co-ordinate of starting position:|: 3Enter Z co-ordinate of starting position:|: 4Enter apply a to b giving c, in the form [[a1,b1,c1],[a2,b2,c2]]:|: [][You have loaded,b][At,Unknown][Go,[s,e,n,u],or take,[],or drop,[],map, or apply an object to an object]|: mapt,Unknown][Go,[s,e,n,u],or take,[],or drop,[],map, or apply an object to an object]|: load dEnter X co-ordinate of starting position:|: 2Enter Y co-ordinate of starting position:|: 2Enter Z co-ordinate of starting position:|: 2Enter apply a to b giving c, in the form [[a1,b1,c1],[a2,b2,c2]]:|: [][You have loaded,d][At,Unknown][Go,[],or take,[],or drop,[],map, or apply an object to an object]|: map[*][*][*][*][*][*][*][*][*][*][*][*][*][+][*][*][*][*][*][*][*][*][*][*][*][*][*]**/%% vetusia user interface:-include('Theology/theology3.7.1.3_vetusia3d.pl').:-include('../../listprologinterpreter/la_strings.pl').:-include('../../listprologinterpreter/la_strings_string.pl').
/**[debug]  ?- split_on_number("en 2",A,B).
/**a ****b  *****c     ********/:-include('../../listprologinterpreter/la_strings.pl').:-include('../../listprologinterpreter/la_maths.pl').time_chart(Data,Chart) :-% find maximum label lengthfindall(Length,(member([_N1,_N2,Label1],Data),string_length(Label1,Length)),Lengths1),sort(Lengths1,Lengths2),reverse(Lengths2,[Maximum1|_Lengths3]),Maximum2 is Maximum1+1,% find time chartfindall([Label2,Chart1],(member([N1,N2,Label1],Data),label(Label1,Maximum2,Label2),chart(N1,N2,Chart1)),Chart3),maplist(append,[Chart3],[Chart4]),concat_list(Chart4,Chart),writeln(Chart).
/**caw00(off,function3,[],5,7,[[[[a,1],[b,1]],[[c,2]],true],[[[a,1],[b,1]],[[c,2]],true],[[[a,1],[b,1]],[[c,1]],fail],[[[a,1],[b,1]],[[c,1]],fail]],[],Program),writeln(Program).
/**caw00(off,function3,[],5,7,[[[[a,1],[b,1]],[[c,2]],true],[[[a,1],[b,1]],[[c,2]],true],[[[a,1],[b,1]],[[c,1]],fail],[[[a,1],[b,1]],[[c,1]],fail]],[],Program),writeln(Program).VarLists is in format list of [InputVarList,OutputVarList,Positivity], where these are specification lines that are either Positivity=true or failNotes:- true specification line in first position of varlists, otherwise will try all except the specification line- manually write a,a in algdict in a,b :- a,a,b because cawp would take too long finding all combinations including a,a- give argument values in order 3 2 1 not 1 2 3 when adding, or will try 1+1+1 instead of 3 at first**/%%:- include('algdict.pl').%%:- include('remove_duplicate_predicates.pl').
/**combo of algswhat the alg is - phil desc - verb(object)how it will workdata?- find_new_algorithms.
/**graph(1, 0, _).         *        *        *        *        *        *        *        *        *        *         graph(-1, 10, _).
/**need to run test1(off,1,R). to load db before following.get_lang_word3(member1,"en","en2",A).
/**object 1distinction 1distinction 2object 2distinction 3**/cover_once(Objects,Differentiations) :-findall(_,(member(Object,Objects),nl,writeln(Object),member([Object,Differentiations1],Differentiations),member(Differentiation,Differentiations1),writeln(Differentiation)),_).
/**translate(Input1,FromLang,ToLang,Output3) :-insertdoublebackslashbeforequote(Input1,Input),atom_concat("export GOOGLE_APPLICATION_CREDENTIALS=\"/Users/luciangreen/Dropbox/Program Finder/possibly not working/translationmanagementsystem/Cultural Translation Tool-19XXXXXXb4.json\"\ncurl -s -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer \"$(/Users/luciangreen/Dropbox/Program\\ Finder/possibly\\ not\\ working/translationmanagementsystem/google-cloud-sdk/bin/gcloud auth application-default print-access-token)     --data \"{  'q': '",Input,A),atom_concat(A,"',  'source': '",B),atom_concat(B,FromLang,C),atom_concat(C,"',  'target': '",D),atom_concat(D,ToLang,E),atom_concat(E,"',  'format': 'text'}\" \"https://translation.googleapis.com/language/translate/v2\"",F),bash_command(F,Output1),atom_concat("{\n  \"data\": {\n    \"translations\": [\n      {\n        \"translatedText\": \"",A1,Output1),atom_concat(Output2,"\"\n      }\n    ]\n  }\n}\n",A1),atom_string(Output2,Output3).
/** Not tested nonrecursive multiclausescawptest2(8,add0,[[[n,+],2,1],[[n,-],2,1]],2,3,4,[2],[1],[[[[[[v,a],1],[[v,b],1]],[[[v,b],2]],true],[[[[v,a],2],[[v,b],1]],[[[v,b],1]],true]],[[[[[v,a],1],[[v,b],1]],[[[v,b],2]],true]],[[[[[v,a],2],[[v,b],1]],[[[v,b],1]],true]]],[ %% Algorithm dictionary], %% Result[[[n,1],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,d]]],[[n,=],[[v,c],[v,d]]]]],[[n,1],[[v,a],[v,b],[v,c]],":-",[[[n,-],[[v,a],[v,b],[v,d]]],[[n,=],[[v,d],[v,c]]]]],[[n,add0],[[v,a],[v,b],[v,c]],":-",[[[n,1],[[v,a],[v,b],[v,d]]],[[n,=],[[v,c],[v,d]]]]]]).
/**%%**cawptest2(7,add0,[],3,3,%% it could be 54,[1],[1],[[[[[[v,a],[1,2]]],[[[v,b],[]]],true]],[[[[[v,a],[1,2]]],[[[v,b],[]]],true]],[[[[[v,a],[1,2]]],[[[v,b],[2]]],true]],[[[[[v,a],[2]]],[[[v,b],[]]],true]],[[[[[v,a],[]]],[[[v,b],[]]],true]]],[ %% Algorithm dictionary[[[n,add2],1,1],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[[n,add3],1,1],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]]],[ %% Result[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,1],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],[[n,1],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],[[n,1],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,1],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]]]).cawptest2(7.1,add0,[],2,1,%% it could be 53,[1],[1],[%%[[[[[v,a],[1,2]]],[[[v,b],[]]],true]],%%[[[[[v,a],[1,2]]],[[[v,b],[]]],true]],%%[[[[[v,a],[1,2]]],[[[v,b],[2]]],true]],%%[[[[[v,a],[2]]],[[[v,b],[]]],true]],[[[[[v,a],[]]],[[[v,b],[]]],true]]],[ %% Algorithm dictionary[[[n,add2],1,1],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]]%%[[[n,add3],1,1],[[v,a],[v,b]],":-",%%[[[n,tail],[[v,a],[v,b]]]]]],[ %% Result[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]]]).cawptest2(7.2,add0,[],3,2,%% it could be 53,[1],[1],[[[[[[v,a],[1,2]]],[[[v,b],[]]],true]],[[[[[v,a],[1,2]]],[[[v,b],[2]]],true]],[[[[[v,a],[2]]],[[[v,b],[]]],true]],[[[[[v,a],[]]],[[[v,b],[]]],true]]],[ %% Algorithm dictionary[[[n,add2],1,1],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[[n,add3],1,1],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]]],[ %% Result[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,add0],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]]]).
/**%%addrules(_,_,[],PV,PV,Program,Program) :- !.addrules(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program3) :-writeln1(addrules(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program3)),%%trace,OutputVars2=[],%%[OutputVar|OutputVars3],member(Var,VarList),%%member(OutputVar,OutputVars1),%%()append(VarList,OutputVars1,OutputVars4),member(Var2,OutputVars4),append(Program1,[[[n,=],[Var,Var2%%OutputVar]]],Program3),append(PenultimateVars1,[Var],PenultimateVars2).
/**?- combination(A,B,C).A = C, C = hat,B = write ;A = hat,B = write,C = flask ;A = hat,B = write,C = bottle ;A = hat,B = write,C = book .
/**?- one_fill("           ",Ones1).
/**?- split_string2("a   a",[" "],A).
/**?- truncate_words_conserving_formatting(["file","file3.txt"],1,["file","file4.txt"]).
/**?- truncate_words_conserving_formatting(["file","file3.txt"],1,["file","file4.txt"]).**/truncate_words_conserving_formatting([Type1,File1],Words1,[Type2,File2]) :-% split on non-alpha chars, count n words and keep formattingSepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",(Type1="file"->(phrase_from_file_s(string(String2), File1));File1=String2),split_string_onnonletter_by_itself2(String2,SepandPad,String3),%trace,first_n_words(String3,Words1,[],String4),maplist(append,[[String4]],[Item3]),concat_list(Item3,String5),(Type2="file"->(open_s(File2,write,Stream2),write(Stream2,String5),close(Stream2),!);(String5=File2)).
/**[[ read this , [ go down, read **/% vision_impaired_navigator([[[1],"a"],[[1,1],"a.1"],[[1,2],"a.2"],[[2],"b"]],[1]).
/**[][][1,2][][][][][1,2][][][][1][][2][][][1][][2][][][1,3][3][2,3][][1][][][][2][1][][][][2][][][][][][][][][][]**/ /** %% Takes too long, run mindreadtestmusiccomposer-unusual.pl or postsongprep :-ttb2(["scrnsong2019620131426.87270498275757.txt","scrnsong2019620131426.87270498275757lyrics.txt","scrnsong2019620131428.09975290298462.txt","scrnsong2019620131428.09975290298462lyrics.txt","scrnsong2019620131430.95198392868042.txt","scrnsong2019620131430.95198392868042lyrics.txt","scrnsong2019620131432.72644400596619.txt","scrnsong2019620131432.72644400596619lyrics.txt","scrnsong2019620131435.184492111206055.txt","scrnsong2019620131435.184492111206055lyrics.txt","scrnsong2019620131437.28680896759033.txt","scrnsong2019620131437.28680896759033lyrics.txt","scrnsong2019620131438.37197399139404.txt","scrnsong2019620131438.37197399139404lyrics.txt","scrnsong2019620131439.7610969543457.txt","scrnsong2019620131439.7610969543457lyrics.txt","scrnsong2019620131442.2528030872345.txt","scrnsong2019620131442.2528030872345lyrics.txt","scrnsong2019620131443.59552311897278.txt","scrnsong2019620131443.59552311897278lyrics.txt"]).
/**\"'a'\"\"\\\"a\\\"\"'"a"''\\'a\\''**/name101(XXs) --> "'",name1010(XXs1),"'", {atom_concat_list(['\'',XXs1,'\''],XXs)}, !. name1010(XXs) --> [X],[Y], {char_code(Ch1,X),char_code(Ch2,Y),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),Ch1='\\',Ch2='\'',atom_string(CA2,Ch1),atom_string(CA22,Ch2)},%%downcase_atom(CA,CA2)},name1010(Xs), {atom_concat_list([CA2,CA22,Xs],XXs)}, !. name1010(XXs) --> [X], [Y],{char_code(Ch1,X),char_code(Ch2,Y),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),Ch1='\\',Ch2='\'',atom_string(CA2,Ch1),atom_string(CA22,Ch2)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat_list([CA2,CA22,''],XXs)}, !. name1010(XXs) --> [X],{char_code(Ch1,X),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='\''),%not(Ch1='('),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},name1010(Xs), {atom_concat(CA2,Xs,XXs)}, !. name1010(XXs) --> [X], {char_code(Ch1,X),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='\''),%not(Ch1='('),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat(CA2,'',XXs)}, !. name101(XXs) --> "\"",name1011(XXs1),"\"", {atom_concat_list(['"',XXs1,'"'],XXs)}, !. /*name1011(XXs) --> [X], {char_code(Ch1,X),%char_code(Ch2,Y),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),Ch1='"',%trace,%Ch2='"',atom_string(CA2,Ch1)%,atom_string(CA22,Ch2)},%%downcase_atom(CA,CA2)},%name1011(Xs), {atom_concat_list([%'\'',CA2],XXs)}, !. */name1011(XXs) --> [X],[Y], {char_code(Ch1,X),char_code(Ch2,Y),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),Ch1='\\',Ch2='"',atom_string(CA2,Ch1),atom_string(CA22,Ch2)},%%downcase_atom(CA,CA2)},name1011(Xs), {atom_concat_list([CA2,CA22,Xs],XXs)}, !. name1011(XXs) --> [X], [Y],{char_code(Ch1,X),char_code(Ch2,Y),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),Ch1='\\',Ch2='"',atom_string(CA2,Ch1),atom_string(CA22,Ch2)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat_list([CA2,CA22,''],XXs)}, !. name1011(XXs) --> [X], {char_code(Ch1,X),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='"'),%not(Ch1='('),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},name1011(Xs), {atom_concat(CA2,Xs,XXs)}, !. name1011(XXs) --> [X], {char_code(Ch1,X),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='"'),%not(Ch1='('),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat(CA2,'',XXs)}, !. name101(XXs) --> name1012(XXs1),{atom_concat_list([XXs1],XXs)}, !. name1012(XXs) --> [X],lookahead2([',',')',']','|']),{char_code(Ch1,X),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='['),not(Ch1=']'),not(Ch1='('),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat(CA2,'',XXs)}, !. name1012(XXs) --> %{trace},[X], %lookahead2([',',')'%,']'%]),%{trace},%lookahead3(A),{%char_code(ChA,A),not(ChA=','),not(ChA=')'),char_code(Ch1,X),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),%not(Ch1=','),not(Ch1='['),not(Ch1=']'),not(Ch1='('),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},name1012(Xs), {atom_concat(CA2,Xs,XXs)}, !. name2(X1) --> name20(X1).%%, {atom_string(X2,X1)}.
/**\"'a'\"\"\\\"a\\\"\"'"a"''\\'a\\''**/name101(XXs) --> "'",name1010(XXs1),"'", {atom_concat_list(['\'',XXs1,'\''],XXs)}, !. name1010(XXs) --> [X],[Y], {char_code(Ch1,X),char_code(Ch2,Y),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),Ch1='\\',Ch2='\'',atom_string(CA2,Ch1),atom_string(CA22,Ch2)},%%downcase_atom(CA,CA2)},name1010(Xs), {atom_concat_list([CA2,CA22,Xs],XXs)}, !. name1010(XXs) --> [X], [Y],{char_code(Ch1,X),char_code(Ch2,Y),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),Ch1='\\',Ch2='\'',atom_string(CA2,Ch1),atom_string(CA22,Ch2)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat_list([CA2,CA22,''],XXs)}, !. name1010(XXs) --> [X],{char_code(Ch1,X),char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='\''),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},name1010(Xs), {atom_concat(CA2,Xs,XXs)}, !. name1010(XXs) --> [X], {char_code(Ch1,X),char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='\''),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat(CA2,'',XXs)}, !. name101(XXs) --> "\"",name1011(XXs1),"\"", {atom_concat_list(['"',XXs1,'"'],XXs)}, !. name1011(XXs) --> [X],[Y], {char_code(Ch1,X),char_code(Ch2,Y),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),Ch1='\\',Ch2='"',atom_string(CA2,Ch1),atom_string(CA22,Ch2)},%%downcase_atom(CA,CA2)},name1011(Xs), {atom_concat_list([CA2,CA22,Xs],XXs)}, !. name1011(XXs) --> [X], [Y],{char_code(Ch1,X),char_code(Ch2,Y),%char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),Ch1='\\',Ch2='"',atom_string(CA2,Ch1),atom_string(CA22,Ch2)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat_list([CA2,CA22,''],XXs)}, !. name1011(XXs) --> [X], {char_code(Ch1,X),char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='"'),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},name1011(Xs), {atom_concat(CA2,Xs,XXs)}, !. name1011(XXs) --> [X], {char_code(Ch1,X),char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='"'),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat(CA2,'',XXs)}, !. name101(XXs) --> name1012(XXs1),{atom_concat_list([XXs1],XXs)}, !. name1012(XXs) --> [X],lookahead2([',',')',']','|']),{char_code(Ch1,X),char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),not(Ch1='['),not(Ch1=']'),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},%name101(Xs), {atom_concat(CA2,'',XXs)}, !. name1012(XXs) --> %{trace},[X], %lookahead2([',',')'%,']'%]),%{trace},%lookahead3(A),{%char_code(ChA,A),not(ChA=','),not(ChA=')'),char_code(Ch1,X),char_type(X,ascii),%->true;(Ch1='\''->true;(Ch1='"'->true;(Ch1='_'->true;%Ch1='!'->true;Ch1='.')))),%not(Ch1=','),not(Ch1='['),not(Ch1=']'),atom_string(CA2,Ch1)},%%downcase_atom(CA,CA2)},name1012(Xs), {atom_concat(CA2,Xs,XXs)}, !. name2(X1) --> name20(X1).%%, {atom_string(X2,X1)}.
/**add_line_numbers_to_algorithm_body(Body1,Body2) :-findall(*,(member(Statement1,Body1add_line_numbers_to_algorithm_body(Body1,[],Body2) :-**/%%predicate_or_rule_name([A,B]) :- atom(A),is_list(B),!.
/**checktypes2(Vars,TypeStatements1,TypeStatements2,TypeStatements4) :-TypeStatements1=[t,Type],member([[t,Type]|[TypeStatements3]],TypeStatements4),checktypes1([Vars],TypeStatements3,TypeStatements2,TypeStatements4).
/**collect_arguments_body(Body1,Body2) :-findall(*,(member(Statement1,Body1collect_arguments_body(Body1,[],Body2) :-**/%%predicate_or_rule_name([A,B]) :- atom(A),is_list(B),!.
/**concat_list(A,[],A):-!.
/**crop down pred from top x just goes to next command- sets up antecedant(s) in if, not, or if, brackets backtracks to it- x based on states, it continues on from antecedants**/%% find called line%% find next line%% - go to next numbered line if in brackets, etc.
/**ctt-orig1-orig2-tmp-1.txt[['<>','I love you.'],[['','']],[['I dote on you.', '']]]backtranslateuntilcorrect([['I love you.','I dote on you.']],[['I dote on you.','Je me passionne pour toi.']],'I love you.',[],'en','fr','tmp/ctt-orig1-orig2-tmp-1.txt','/Applications/Grammarly.app/Contents/MacOS/Grammarly tmp/ctt-orig1-orig2-tmp-1.txt --line','<>',O).
/**everyvarmentioned(Vars1,Program) :-everyvarmentioned1(Vars1,Program).
/**find_state_machine_body(Body1,Body2) :-findall(*,(member(Statement1,Body1find_state_machine_body(Body1,[],Body2) :-**/%%predicate_or_rule_name([A,B]) :- atom(A),is_list(B),!./**defined in grammar.plpredicate_or_rule_name([V_or_n,_Name]) :- (V_or_n=v->true;V_or_n=n),!.%%,atom(Name),!.
/**findrulesflowingtopv2(_Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[_PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program2),%%Program2=Program1,(not(member(Rule,Rules1))->append(Rules1,[Rule],Rules2);Rules2=Rules1),subset(Rest,InputVars2),intersection(Rest,InputVars1,Intersection),length(Intersection,0),%%not((member(Var2,Rest),%%member(Var2,InputVars1))),IV1Flag1=false.
/**findrulesflowingtopv2(_Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[_PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program2),%%Program2=Program1,(not(member(Rule,Rules1))->append(Rules1,[Rule],Rules2);Rules2=Rules1),subset(Rest,InputVars2),intersection(Rest,InputVars1,Intersection),length(Intersection,0),%%not((member(Var2,Rest),%%member(Var2,InputVars1))),IV1Flag1=false.**//**findrulesflowingtopv2(Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[_PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program3),%%Program3=Program1,%%append(Rules1,[Rule],Rules3),subset(Rest,InputVars2),intersection(Rest,InputVars1,Intersection),length(Intersection,0),%%not((member(Var2,Rest),%%member(Var2,InputVars1))),%%delete(Program0,Rule,Program1),IV1Flag2=false,findrulesflowingtopv1(Program0,InputVars1,InputVars2,Rest,[],Rules4,IV1Flag3),%%not(Rules4=[]),iv1flagdisjunction(IV1Flag2,IV1Flag3,IV1Flag1),append(Rules1,[Rule],Rules7),append(Rules7,Rules4,Rules8),unique1(Rules8,[],Rules2).
/**findrulesflowingtopv2(_Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[_PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program2),%%Program2=Program1,(not(member(Rule,Rules1))->append(Rules1,[Rule],Rules2);Rules2=Rules1),subset(Rest,InputVars2),intersection(Rest,InputVars1,Intersection),length(Intersection,0),%%not((member(Var2,Rest),%%member(Var2,InputVars1))),IV1Flag1=false.
/**interpretstatement1(Functions0,Functions,[[n,not],[Statements]],Vars1,Vars2,Result,nocut) :-not(interpretbody(Functions0,Functions,Vars1,Vars2,Statements,Result)).
/**interpretstatement1(_F0,_Functions,[[n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln1(31),        isop(Operator),        interpretpart(is,Variable2,Variable1,Vars1,Vars2).
/**interpretstatement1(ssi,Functions0,Functions,[[n,not],[Statements]],Vars1,Vars2,Result,nocut) :-not(interpretbody(Functions0,Functions,Vars1,Vars2,Statements,Result)).
/**interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_stringconcat_1],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat1",Dbw_stringconcat1),Dbw_stringconcat1=Dbw_stringconcat_1,        interpretpart(stringconcat1,Variable1,Variable2,Variable3,Vars1,Vars2).
/**interpretstatement1(ssi,_F0,_Functions,[[n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln1(31),        isop(Operator),        interpretpart(is,Variable2,Variable1,Vars1,Vars2).
/**location(5,14,16,"Highway") :- !.
/**make_mind_reading_tree4_a1(Options2a,Options3) :-make_mind_reading_tree4_a(Options2a,Options3a),make_mind_reading_tree4_a(Options3a,Options3b),(Options3a=Options3b->Options3=Options3a;make_mind_reading_tree4_a1(Options3b,Options3)).
/**name2([L3|Xs]) --> [X], {(char_type(X,alnum)->true;char_type(X,punct)),string_codes(L2,[X]),downcase_atom(L2,L3)}, name2(Xs), !.
/**newbranchifcall(RuleName0,PredicateName,Itema):-RuleName0=[n,PredicateName],member(Itema,[useexisting,newbranch]).
/**positive_sentences(Sentences),writeln1(Sentences).
/**read_string_c(Stream, Chars1, Chars2, End, Result) :-read_string(Stream, Chars1, Chars2, End, Result1),prepare_string(Result1,Result).
/**split2([],List,List) :- !.
/**split2([],List,List) :- !.split2(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[n,[Name,[[test,Test1],[numin,Numin],[numout,Numout]]]]|Rest],member([[n,[Name,[[test,_Test3],[numin,Numin],[numout,Numout]]]]|Rest],List4),delete(List4,[[n,[Name,[[test,_Test4],[numin,Numin],[numout,Numout]]]]|Rest],List7),append(List1,[[[n,[Name,[[test,Test1],[numin,Numin],[numout,Numout]]]]|Rest]],List6),split2(List7,List6,List2),!.
/**test(77a,[[n,member2a],[[1,2,3],[v,b]]],[        [[n,member2a],[[v,a],[v,b]],":-",        [[[n,member2],[[v,a],[v,b]]]        ]]                ],[[[[v,b],1]],[[[v,b],2]],[[[v,b],3]]]).**/test(78,[[n,maplist1],[[1,2,3],[v,b]]],[        [[n,maplist1],[[v,a],[v,b]],":-",        [       [[n,maplist],[[n,+],[v,a],0,[v,b]]]        ]]        ],[[[[v,b],6]]]).
/**test(77a,[[n,member2a],[[1,2,3],[v,b]]],[        [[n,member2a],[[v,a],[v,b]],":-",        [[[n,member],[[v,a],[v,b]]]        ]]                ],[[[[v,b],1]],[[[v,b],2]],[[[v,b],3]]]).
/**test_types_cases(16,[[n,a],[[1,[1,[1]]]]],        [[[n,a],[[t,b2]]],        [[t,b2],[[t,number]]],        [[t,b2],[[t,number],[t,b2]]]],        [[[n,a],[input]]],[        [[n,a],[[v,a]],":-",        [       [[n,true]]        ]]        ],[[]]).**/% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Children, H1, Earning Jobs and Protection in Jobs 3 of 4.txt",0,algorithms,"24.     *I prepared to watch the insect eat a fruit.  I did this by feeding it the raspberry.  First, I lifted the raspberry on a fork.  Second, I placed it in the airlock.  Third, I unlocked the airlockÕs den side to feed the raspberry to the mosquitoes.  In this way, I prepared to watch the insect eat a fruit by feeding it the raspberry."]test_types_cases(16,[[n,insect_food],["food",[v,stomach]]],        [[[n,insect_food],[[t,string],[t,string]]]],        [[[n,insect_food],[input,output]]],[        [[n,insect_food],[[v,mouth],[v,mouth]]]],[[[[v,stomach],"food"]]]).
/**varnames([L1|Ls]) --> varname1(L1),",", %%{writeln(L)}, %%***varnames(Ls), !. varnames([L1]) --> varname1(L1),!.**/varnames01(L1) --> %{trace},"[",varnames0(L2),"]", {L1 = L2},!. varnames01(L1) --> varname1(L2),{L1=L2},!.
/** <examples> ?-data(X),test(T),data_instance_k_classification(X,T,3,C).
/** ?- tryoutputs11([bt,t],[[bt1,t1]],L).
/** List Prolog Interpreter **/interpret(Debug,Query,Functions,Result) :-%%writeln([i1]),interpret1(Debug,Query,Functions,Functions,Result),!.
/** List Prolog Interpreter **/interpret(Debug,Query,Functions1,Result) :-international_interpret([lang,"en"],Debug,Query,Functions1,Result).
/** List Prolog Interpreter **/interpret(Debug,Query,Functions1,Result) :-%%writeln([i1]),convert_to_grammar_part1(Functions1,[],Functions2),%%writeln(Functions2),%%writeln(Functions2),interpret1(Debug,Query,Functions2,Functions2,Result),!.
/** match4from bracketed head:match4([[[v,a],[v,c]],"|",[v,b]],[[1,2],3,4],[],V).          V = [[[v, a], 1], [[v, c], 2], [[v, b], [3, 4]]].                                                              match4([[v,a],"|",[v,b]],[1,2,3,4],[],V).
/** string_codes(                                                                   "[[[a],[a]],[[a],[a]]]"                                                         ,Y),phrase(entry(X),Y). **/entry([Word1,Word2,Word3,Word4]) -->"[","[",   sentence1(Word11), "]", {string_codes(Word1,Word11),string(Word1)},",",           "[",   sentence1(Word22),"]",  {string_codes(Word2,Word22),string(Word2)},           ",","[","[",  sentence1(Word33), "]", {string_codes(Word3,Word33),string(Word3)},",",            "[",sentence1(Word44), "]","]", {string_codes(Word4,Word44),string(Word4)},           "]",!.
/**%%% already to atom in removerstowords2([],A,A) :- !.
/**%%file([]) --> [].
/***        Query1=[[n,grammar_part]|Arguments],        Arguments=[[RuleName|Variables2]],        %%(([Variables4|Rest]=Variables2->Variables3=Variables2;(Variables2=[],Variables3=[]))),        ((not(terminal(RuleName)),%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),        substitutevarsA1(Variables2,Vars1,[],Vars3,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln1([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),  (not(Vars3=[])->(append([RuleName],Vars3,Vars4),Query2=[[n,grammar_part],Vars4]);  Query2=[[n,grammar_part],RuleName]), %% Bodyvars2?%%        debug(on)->writeln1([call,[Function,[Vars3]]]),%%writeln1(["Query2",Query2,"Functions0",Functions0]),        %%notrace,%%**** interpret2(Query2,Grammar,Grammar,Result1), %%trace,%****updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8))->true;(%%writeln1(here1),Vars8=[]))->true)->true;(terminal(RuleName),substitutevarsA1(Variables2,Vars1,[],Vars3,[],FirstArgs),%%writeln1(here), %%****%%Vars3=[Phrase,End],%%Vars41=[Phrase,[v,vgp]],append([RuleName],Vars3,Vars9),%%writeln1([vars9,Vars9]), %%%%%*****interpretpart(grammar_part,Vars9,[],Result1),updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars3,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8)%%writeln1([vars8,Vars8]) %%%*****)->true;(%%writeln1(here1),Vars8=[]))->true)),%%notrace, %%****!.
/***interpretstatement1(Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-%%writeln1("h1/10"),        Query1=[[n,grammar]|Arguments],        ((Arguments=[[Grammar1,Phrase1,RuleName|Variables2]],        %%[Variables3]=Variables2,        name(RuleName),  convert_to_grammar_part1(Grammar1,[],Grammar2))->true;  (Grammar2=Functions0,  ((Arguments=[[Phrase1,RuleName|Variables2]]  %%([Variables3]=Variables2->true;(Variables2=[],Variables3=[]))  )))),%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),%%substitutevarsA1(Phrase,Vars1,[],Vars3,[],FirstArgs1),%%Vars3=[[[v,PhraseVarName],PhraseValue]],%%Vars4=[[[v,vgp1],PhraseValue]],   append([Phrase1],Variables2,Variables4), %% *** Should V3 be in [] vsubstitutevarsA1(Variables4,Vars1,[],Vars2,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln1([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),  Vars2=[Phrase2|Vars4],((Phrase2=[]->true;Phrase2=[_A|_B])->End=[];End=""),  (not(Vars4=[])->append([RuleName,Phrase2,End],Vars4,Vars5);  (Vars5=[RuleName,Phrase2,End])),  Query2=[[n,grammar_part],Vars5],  ((((terminal(RuleName),      (not(Vars4=[])->append([Phrase2,RuleName],Vars4,Vars52);  (Vars52=[Phrase2,RuleName])),    (debug(on)->(writeln1([call,[[n,grammar],Vars52],"Press c."]),(leash1(on)->true;(not(get_single_char(97))->true;abort)));true),      interpretpart(grammar_part,Vars5,[],Result1),    updatevars2(FirstArgs,Result1,[],Vars51),updatevars3(Vars2,Vars51,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8))->true;(%%writeln1(here1),Vars8=[]),strip(Vars8,[],Result2))->true)),        (debug(on)->(writeln1([exit,[[n,grammar],Result2],"Press c."]),(leash1(on)->true;(not(get_single_char(97))->true;abort)));true))->true;(not(terminal(RuleName)),         %% Bodyvars2?                      (not(Vars4=[])->append([Phrase2,RuleName],Vars4,Vars52);  (Vars52=[Phrase2,RuleName])),(debug(on)->(writeln1([call,[[n,grammar],Vars52],"Press c."]),(leash1(on)->true;(not(get_single_char(97))->true;abort)));true),%%        debug(on)->writeln1([call,[Function,[Vars3]]]),%%writeln1(["Query2",Query2,"Functions0",Functions0]),        interpret2(Query2,Grammar2,Grammar2,Result1),         (debug(on)->(writeln1([exit,[[n,grammar],Vars52],"Press c."]),(leash1(on)->true;(not(get_single_char(97))->true;abort)));true),updatevars2(FirstArgs,Result1,[],Vars51),updatevars3(Vars2,Vars51,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8));(%%writeln1(here1),Vars8=[])))),!.
/***interpretstatement1(ssi,Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-%%writeln1("h1/10"),        Query1=[[n,grammar]|Arguments],        ((Arguments=[[Grammar1,Phrase1,RuleName|Variables2]],        %%[Variables3]=Variables2,        name(RuleName),  convert_to_grammar_part1(Grammar1,[],Grammar2))->true;  (Grammar2=Functions0,  ((Arguments=[[Phrase1,RuleName|Variables2]]  %%([Variables3]=Variables2->true;(Variables2=[],Variables3=[]))  )))),%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),%%substitutevarsA1(Phrase,Vars1,[],Vars3,[],FirstArgs1),%%Vars3=[[[v,PhraseVarName],PhraseValue]],%%Vars4=[[[v,vgp1],PhraseValue]],   append([Phrase1],Variables2,Variables4), %% *** Should V3 be in [] vsubstitutevarsA1(Variables4,Vars1,[],Vars2,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln1([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),  Vars2=[Phrase2|Vars4],((Phrase2=[]->true;Phrase2=[_A|_B])->End=[];End=""),  (not(Vars4=[])->append([RuleName,Phrase2,End],Vars4,Vars5);  (Vars5=[RuleName,Phrase2,End])),  Query2=[[n,grammar_part],Vars5],  ((((terminal(RuleName),      (not(Vars4=[])->append([Phrase2,RuleName],Vars4,Vars52);  (Vars52=[Phrase2,RuleName])),    (debug(on)->(writeln1([call,[[n,grammar],Vars52],"Press c."]),(leash1(on)->true;(not(get_single_char(97))->true;abort)));true),      interpretpart(grammar_part,Vars5,[],Result1),    updatevars2(FirstArgs,Result1,[],Vars51),updatevars3(Vars2,Vars51,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8))->true;(%%writeln1(here1),Vars8=[]),strip(Vars8,[],Result2))->true)),        (debug(on)->(writeln1([exit,[[n,grammar],Result2],"Press c."]),(leash1(on)->true;(not(get_single_char(97))->true;abort)));true))->true;(not(terminal(RuleName)),         %% Bodyvars2?                      (not(Vars4=[])->append([Phrase2,RuleName],Vars4,Vars52);  (Vars52=[Phrase2,RuleName])),(debug(on)->(writeln1([call,[[n,grammar],Vars52],"Press c."]),(leash1(on)->true;(not(get_single_char(97))->true;abort)));true),%%        debug(on)->writeln1([call,[Function,[Vars3]]]),%%writeln1(["Query2",Query2,"Functions0",Functions0]),        interpret2(Query2,Grammar2,Grammar2,Result1),         (debug(on)->(writeln1([exit,[[n,grammar],Vars52],"Press c."]),(leash1(on)->true;(not(get_single_char(97))->true;abort)));true),updatevars2(FirstArgs,Result1,[],Vars51),updatevars3(Vars2,Vars51,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8));(%%writeln1(here1),Vars8=[])))),!.
/**atom_concat2([],List,List) :- !.
/**caw00a(Debug,PredicateName,Rules1,MaxLength,MaxPredicates,TotalVars,VarLists,Program1,Program2B) :-(caw00(Debug,PredicateName,Rules1,MaxLength,MaxPredicates,TotalVars,VarLists,Program1,Program2B),%%writeln("If error, returned true");(furthest_rule([Number,Rules]),writeln(["Error: No specification for predicate.  Programs so far:",Rules,"\n\nPredicate number:",Number]).
/**generatelyricslistsverse(Character,Lyrics1,Lyrics2):-%% read c, o, v reado(Objects), readv(Verbs), charobj( %% character verb object  first%% object verb object pairslyrics1([],_Character,Lyrics,Lyrics) :- !.
/**interpretstatement1(_F0,_Functions,[[n,=],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln1(5),        interpretpart(is,Variable1,Variable2,Vars1,Vars2).
/**interpretstatement1(_F0,_Functions,[[n,Operator],[Variable1]],Vars1,Vars2,true,nocut) :-isop(Operator),interpretpart(is,Variable1,Vars1,Vars2),!.
/**interpretstatement1(_F0,_Functions,[[n,grammar_part]|Variables1],Vars1,Vars2,true,nocut) :-%%writeln(x9),  [Variables2]=Variables1,        interpretpart(grammar_part,Variables2,Vars1,Vars2),!.**/interpretstatement1(_F0,_Functions,[[n,stringtonumber],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(52), wrap        interpretpart(stringtonumber,Variable1,Variable2,Vars1,Vars2).
/**interpretstatement1(_F0,_Functions,[[n,grammar_part]|Variables1],Vars1,Vars2,true,nocut) :-%%writeln1(x9),  [Variables2]=Variables1,        interpretpart(grammar_part,Variables2,Vars1,Vars2),!.**/interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_stringtonumber],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringtonumber",Dbw_stringtonumber1),Dbw_stringtonumber1=Dbw_stringtonumber,        interpretpart(stringtonumber,Variable1,Variable2,Vars1,Vars2).
/**interpretstatement1(ssi,_F0,_Functions,[[n,=],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln1(5),        interpretpart(is,Variable1,Variable2,Vars1,Vars2).
/**interpretstatement1(ssi,_F0,_Functions,[[n,Operator],[Variable1]],Vars1,Vars2,true,nocut) :-isop(Operator),interpretpart(is,Variable1,Vars1,Vars2),!.**/interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,isop(Operator),%trace,interpretpart(is,Variable1,Variable2,Vars1,Vars2),!.
/**string(String) --> list(String).
/**string(String) --> list(String).list([]) --> [].
/**string(String) --> list(String).list([]) --> [].list([L|Ls]) --> [L], list(Ls).
/**trace,string_codes("a.\nb(C,D).\nef('A'):-(h(a)->true;true),!.",A),phrase(file(B),A),write(B).
/*cicd(Path) :- merge(Path), build_and_test.
/*find_lists3(L1,L2,L3) :-L1=[L4|L5],append(L2,[L4],L6),find_lists3(L5,L6,L3),!.
/*get_rows(In1,T2,Before_After) :-findall(A,(member([Ad,A1],In1),append(A2,[A4],Ad),append(A2,[_],A3),sub_term_wa(A3,T2,In2),foldr()*//*process_terms2([],T1,T1,R,R) :- %trace,%try(T1,T2),!.
/*one_neighbour(Cs,X,Y) :- XM is X-2, XP is X+2, YM is Y-2, YP is Y+2,*/one_neighbour(Cs,X,Y,CC3) :-%((X=2,Y=2)->trace;true), XM is X-1, XP is X+1, YM is Y-1, YP is Y+1, /*((member([X,Y,(*)],Cs), not(member([XM,Y,(*)],Cs)), not(member([XP,Y,(*)],Cs)), not(member([X,YM,(*)],Cs)), not(member([X,YP,(*)],Cs)))->(%trace, CC3 is 4); */ ( (member([XM,Y,(*)],Cs)->CC=1;CC=0), (member([XP,Y,(*)],Cs)->CC1 is CC+1;CC1 is CC), (member([X,YM,(*)],Cs)->CC2 is CC1+1;CC2 is CC1), (member([X,YP,(*)],Cs)->CC3 is CC2+1;CC3 is CC2) ) ,CC3=1 .
/*predicate(A) -->name1(Word11), ".", {A=[[n,Word11]]}.
/*predicate(A2) -->name1(Word11),"(",varnames(Varnames),")",spaces1(_),"->",newlines1(_N),lines(L), ".",{foldr(append,[[[n,Word11],Varnames,"->"],%N,[L]],A2)%delete(A,[],A2)}.predicate(A2) -->name1(Word11),spaces1(_),":-",newlines1(_N),%{trace},lines(L), ".",{foldr(append,[[[n,Word11],":-"],%N,[L]],A2)%delete(A,[],A2)}.predicate(A2) -->name1(Word11),spaces1(_),"->",newlines1(_N),lines(L), ".",{foldr(append,[[[n,Word11],"->"],%N,[L]],A2)%delete(A,[],A2)}.*//**name1([L3|Xs]) --> [X], {string_codes(L2,[X]),(char_type(X,alnum)->true;L2="_"),downcase_atom(L2,L3)}, name1(Xs), !.
12341234123412341234123412341234*/pretty_print_nd(Data):-findall(_,(member(Item,Data),((is_list(Item),Item=[Item1|_],is_list(Item1),Item1=[Item2|_],not(is_list(Item2)))->(pretty_print_table(Item),nl);pretty_print_nd(Item))),_).
:- http_handler('/new_folder', new_folder1, []).
:- http_handler('/return', return, []).
:- include('../Text-to-Breasonings/texttobr2qb').
:- include('../Text-to-Breasonings/texttobr2qb').%%:- include('texttobrqb').
:- include('../listprologinterpreter/la_strings').
:- include('../listprologinterpreter/la_strings.pl').
:- include('../listprologinterpreter/la_strings.pl'). %% Move la_strings and the contents of the repository into the root folder:- include('la_com_marks.pl').
:- include('../listprologinterpreter/listprolog').
:- include('../listprologinterpreter/listprolog.pl').
:- include('distances.pl').
:- include('distances.pl').:- use_module(library(date)).
:- include('files/Combination-Algorithm-Writer-Stable/listprologinterpreter1listrecursion4copy52.pl').
:- include('files/la_strings.pl').
:- include('files/listprolog.pl').
:- include('grammar.pl').
:- include('la_com1.pl').
:- include('la_strings.pl').
:- include('la_strings.pl').%:- include('la_strings.pl'). %% Move la_strings and the contents of the repository into the root folderlppm_start_server(Port) :-        http_server(http_dispatch, [port(Port)]).
:- include('meditationnoreplace.pl').
:- include('mindreadtestmusiccomposer-unusual-ui-rhythm.pl').%mindreadtestmusiccomposer-unusual-mr-tree.pl').
:- include('musiclibrary').
:- include('word_frequency_count.pl').
:- use_module(library(date)).
:- use_module(library(date)).:- include('mindreadtestshared').
:- use_module(library(http/thread_httpd)).
:-include("../../listprologinterpreter/la_strings.pl").
:-include('../../listprologinterpreter/la_maths.pl').
:-include('../../mindreader/make_mind_reading_tree4 working1.pl').
:-include('../SSI/ssi.pl').
:-include('../Text-to-Breasonings/text_to_breasonings.pl').
:-include('../Text-to-Breasonings/text_to_breasonings.pl').:-include('../Text-to-Breasonings/texttobrall2_reading3.pl').
:-include('../Text-to-Breasonings/texttobr.pl').
:-include('../Time_Machine/t2b_br_adder.pl').
:-include('../listprologinterpreter/la_maths.pl').
:-include('../listprologinterpreter/la_strings.pl').
:-include('../listprologinterpreter/listprolog.pl').
:-include('11 6 23.pl').
:-include('26 5 23.pl').
:-include('auxiliary_s2a_used.pl').
:-include('bag2philn-rel.pl')./*big_connections_with_bag3_and_mr2(Keywords) :-%trace, retractall(spec(_)), assertz(spec(on)), findall(Keyword1,(member(Keyword,Keywords),downcase_atom(Keyword,Keyword1)),Keywords2), retractall(keywords(_)), assertz(keywords(Keywords2)), big_connections_with_bag3_and_mr.
:-include('bag2philn.pl').
:-include('bag2philn.pl').big_connections_with_bag3_and_mr2(Keywords) :-%trace, retractall(spec(_)), assertz(spec(on)), findall(Keyword1,(member(Keyword,Keywords),downcase_atom(Keyword,Keyword1)),Keywords2), retractall(keywords(_)), assertz(keywords(Keywords2)), big_connections_with_bag3_and_mr.
:-include('bag_algs.pl').
:-include('bag_args2.pl').
:-include('decision_tree.pl').
:-include('interpretstatement3.pl').
:-include('maths_formulas.pl').
:-include('ssi_listrecursion4.pl').
:-include('version.pl').
:-style_check(-discontiguous).
<html><head><style>td.single_underline {    border-bottom: 1px solid #333;    padding: 1px 0;}td.double_underline {    border-bottom: 4px double #333;    padding: 4px 0;}</style></head><body><table><tr><td>1+1</td></tr></table></body></html>*/term_to_html(Answers,HTML) :-findall([A8,"\n"],(member(A81,Answers),findall(["<table>",A6,"</table>\n"],(member(A5,A81),((findall(["<tr>",A4,"</tr>\n"],(member(A2,A5),findall([A31,"</td>\n"],(member(A3,A2),td_underline(A3,A31)),A4),not(A4=[])),A6),not(A6=[]))->true;((%member(A2,A5),findall([A31,"</td>\n"],(member(A3,A5),td_underline(A3,A31)),A51),not(A51=[]),A6=["<tr>",A51,"</tr>\n"])->true;(td_underline(A5,A51),A6=["<tr>",A51,"</td></tr>\n"])))),A8)),A61),flatten(["<html><head><style>","\n","td.single_underline {","\n","    border-bottom: 1px solid #333;","\n","    padding: 1px 0;","\n","}","\n","td.double_underline {","\n","    border-bottom: 4px double #333;","\n","    padding: 4px 0;","\n","}","\n","</style></head><body>",A61,"</body></html>"],A7),foldr(string_concat,A7,HTML),!.
<html><head><style>td.single_underline {    border-bottom: 1px solid #333;    padding: 1px 0;}td.double_underline {    border-bottom: 4px double #333;    padding: 4px 0;}</style></head><body><table><tr><td>1+1</td></tr></table></body></html>*/term_to_html(Answers,HTML) :-findall([A8,"\n"],(member(A81,Answers),findall(["<table>",A6,"</table>\n"],(member(A5,A81),((findall(["<tr>",A4,"</tr>\n"],(member(A2,A5),findall([A31,"</td>\n"],(member(A3,A2),td_underline(A3,A31)),A4),not(A4=[])),A6),not(A6=[]))->true;((%member(A2,A5),findall([A31,"</td>\n"],(member(A3,A5),td_underline(A3,A31)),A51),not(A51=[]),A6=["<tr>",A51,"</tr>\n"])->true;(td_underline(A5,A51),A6=["<tr>",A51,"</td></tr>\n"])))),A8)),A61),flatten(["<html><head><style>","\n","td.single_underline {","\n","    border-bottom: 1px solid #333;","\n","    padding: 1px 0;","\n","}","\n","td.double_underline {","\n","    border-bottom: 4px double #333;","\n","    padding: 4px 0;","\n","}","\n","</style></head><body>",A61,"</body></html>"],A7),foldr(string_concat,A7,HTML),!.% single values and rowstd_underline(String10,H) :-get_formula_value(String10,String1),atomic_list_concat(S2,'\n',String1),atomic_list_concat(S2,'<br>',String),((search_and_replace(String,"<single underline>","",R),string_concat("<td class=\"single_underline\">",R,H))->true;((search_and_replace(String,"<double underline>","",R),string_concat("<td class=\"double_underline\">",R,H))->true;(string_concat("<td>",String,H)))),!.
<html><head><style>td.single_underline {    border-bottom: 1px solid #333;    padding: 1px 0;}td.double_underline {    border-bottom: 4px double #333;    padding: 4px 0;}</style></head><body><table><tr><td>1+1</td></tr></table></body></html>*/term_to_html(Answers,HTML) :-findall([A8,"\n"],(member(A81,Answers),findall(["<table>",A6,"</table>\n"],(member(A5,A81),((findall(["<tr>",A4,"</tr>\n"],(member(A2,A5),findall([A31,"</td>\n"],(member(A3,A2),td_underline(A3,A31)),A4),not(A4=[])),A6),not(A6=[]))->true;((%member(A2,A5),findall([A31,"</td>\n"],(member(A3,A5),td_underline(A3,A31)),A51),not(A51=[]),A6=["<tr>",A51,"</tr>\n"])->true;(td_underline(A5,A51),A6=["<tr>",A51,"</td></tr>\n"])))),A8)),A61),flatten(["<html><head><style>","\n","td.single_underline {","\n","    border-bottom: 1px solid #333;","\n","    padding: 1px 0;","\n","}","\n","td.double_underline {","\n","    border-bottom: 4px double #333;","\n","    padding: 4px 0;","\n","}","\n","</style></head><body>",A61,"</body></html>"],A7),foldr(string_concat,A7,HTML),!.% single values and rowstd_underline(String10,H) :-get_formula_value(String10,String1),atomic_list_concat(S2,'\n',String1),atomic_list_concat(S2,'<br>',String),((search_and_replace(String,"<single underline>","",R),string_concat("<td class=\"single_underline\">",R,H))->true;((search_and_replace(String,"<double underline>","",R),string_concat("<td class=\"double_underline\">",R,H))->true;(string_concat("<td>",String,H)))),!.get_formula_value(String10,String1) :-(String10=[calculate,[function,_,_,_,String1,_]]->true;(String10=[function,_,_,_,Term,_]->(%trace,sub_term_wa([var|_],Term,Instances1),findall([Add,V],(member([Add,X1],Instances1),X1=[var, _, _, _, _, V|_]),Instances1b),foldr(put_sub_term_wa_ae,Instances1b,Term,Term2),flatten(Term2,Term1),foldr(string_concat,Term1,String1)->true;String10=String1))),!.
<html><head><style>td.single_underline {    border-bottom: 1px solid #333;    padding: 1px 0;}td.double_underline {    border-bottom: 4px double #333;    padding: 4px 0;}</style></head><body><table><tr><td>1</td></tr></table></body></html>term_to_html([[[["a",[function,_,_,[[var,T1,R1,C1,IN1,1,VN1,TP1,RP1,CP1,INP1],"+",[var,T1,R1,C1,IN1,1,VN1,TP1,RP1,CP1,INP1]],[[var,T1,R1,C1,IN1,1,VN1,TP1,RP1,CP1,INP1],"+",[var,T1,R1,C1,IN1,1,VN1,TP1,RP1,CP1,INP1]]]],[[calculate,[[function,_,_,[[var,T1,R1,C1,IN1,1,VN1,TP1,RP1,CP1,INP1],"+",[var,T1,R1,C1,IN1,1,VN1,TP1,RP1,CP1,INP1]],[[var,T1,R1,C1,IN1,1,VN1,TP1,RP1,CP1,INP1],"+",[var,T1,R1,C1,IN1,1,VN1,TP1,RP1,CP1,INP1]]]]]]]]],A),writeln(A).
?- compile_list([1,2,3,4],N,S),writeln(N).N = [[2,9],[0,1,4],[1,1,1,2,1,3,1,4,4]]S = [0, 0].
?- compile_list([3,4],N,S).
?- data_to_types([1,"a",[1]],[],T).
?- data_to_types([1,"a",[1]],[],T).T = [[t, number], [t, string], [[t, brackets], [[t, number]]]].
?- data_to_types([1,["a"],1],[],T).T = [[t, number], [[t, brackets], [[t, string]]], [t, number]].
?- distance_greater(0,0,14,15,200).
?- distance_greater3d(0,0,0,14,15,0,200).
?- education_research(1,[],D),writeln(D).
?- enroll("Anne","Mable","Mathematics",[["Mathematics", [["Joan", "Clemens"]]]],E2),writeln(E2).
?- enroll("Joan","Clemens","Mathematics",[["Mathematics",[]]],E2),writeln(E2).
?- evader(5,N1),writeln(N1).
?- evader(6,N1),writeln(N1).
?- foldl1(append1,A,[],["a", "b", "c"]).A = [["a", "b", "c"]]*/:-include('string_concat1.pl').
?- foldl1(append1,[["a"],["b","c"]],D,["a", "b", "c"]).
?- foldl1(string_concat1,A,"","ab").
?- foldl1(string_concat1,["a","b"],D,"ab").
?- house_cross_section([r1,r2,r3],[1,1.5],A).
?- interpret(on,[[n,f],[["b","c"],["b","a"],[v,d]]],[[[n,f],[[v,a],[v,b],[v,d]],":-",[[[n,append],[[v,b],[v,a],[v,e]]],[[n,=],[[v,d],[v,e]]]]]],Result).
?- logarithm_br(100,N).
?- logarithm_br(10000,N).
?- logarithm_br(8000,N).
?- n_m(31999,N,M).
?- n_m(32002,N,M).
?- operate1([*,2,1],Outputs),writeln(Outputs).
?- operate1([+,2,1],Outputs),writeln(Outputs).
?- operate1([-,2,1],Outputs),writeln(Outputs).
?- operate1([/,2,1],Outputs),writeln(Outputs).
?- perpetual_motion(0.00001,N).
?- perpetual_motion(0.01,N).
?- perpetual_motion(1,N).
?- pft_expand_types([[1],[1]],[],T,[],V),T=[T1,T2],find_lists(T1,T2,[],L,[],S),writeln(T),writeln(V),writeln(S),writeln(L).
?- product_name(N).
?- professor_algorithm("go hill",A).
?- professor_algorithm("walk to paper.",A).
?- qa_tt2(2).
?- r34(_,_,_,D).
?- revoke([],R).
?- revoke([contract,money],R).                                             R = true.
?- revoke([else],R).
?- revoke([land],R).
?- rhetoric_merge_trees([a,[[b,[]],[e,[]]]],[c,[[d,[]],[f,[]]]],T3).
?- rhetoric_merge_trees([a,[b,[e,[]]]],[c,[]],T3).T3 = [a-c, [[]-b, [[e, []]]]].*/rhetoric_merge_trees(T1,T2,T3) :- T1=[Text1|Branches1], atom(Text1), T2=[], T3=[Text1-[]|Branches1].rhetoric_merge_trees(T1,T2,T3) :- T1=[], T2=[Text1|Branches1], atom(Text1), T3=[[]-Text1|Branches1].
?- rhetoric_merge_trees([a,[b,[e,[]]]],[c,[d,[]]],T3).T3 = [a-c, [b-d, [[[]-e, [[]]]]]].
?- rhetoric_merge_trees([a,[b,[e,[]]]],[c,[d,[f,[]]]],T3).
?- stages_of_life(L).
?- stages_of_life(L).Have you learnt spiritual meditation (y/n)?|: yHave you breasoned out 80 breasonings that definitely worked (y/n)?|: yHave you definitely breasoned out meditation arguments (y/n)?|: yHave you definitely breasoned out the lecturer argument, allowing you to choose breasonings, not have breasonings chosen for you (y/n)?|: yHave you definitely breasoned out the recordings argument, allowing you to mentally duplicate and project breasonings (y/n)?|: yHave you definitely breasoned out medicine arguments, allowing you to definitely prevent a headache with spiritual means (y/n)?|: nL = "Recordings argument".
?- trace,                                                              time_proportion(0,0,0,1,0,0,1,30,0,P).
?- trytranslations1([['I love you.-1','I love you3.']],'en','fr',false,Flag,[],O,_,O2).
A = 2,B = 7,C = 6,D = 9,E = 5,F = 1,G = 4,H = 3,I = 8 ;*/magic_square([A,B,C, D,E,F, G,H,I]) :-permutation([1,2,3,4,5,6,7,8,9],[A,B,C, D,E,F, G,H,I]),J is A+B+C,J is D+E+F,J is G+H+I,J is A+D+G,J is B+E+H,J is C+F+I,J is A+E+I,J is G+E+C.
Algorithm2= [[[n,f1],[[v,a],[v,b],[v,c],[v,d],[v,e]],":-",[[[n,+],[[v,a],[v,b],[v,f]]],[[n,+],[[v,c],[v,f],[v,g]]],[[n,+],[[v,d],[v,g],[v,h]]],[[n,=],[[v,h],[v,e]]]]]]**/:- include('la_strings.pl').
B=[[0,[n,downpipe],[[v,a],[v,a],[v,b]]],[1,[n,downpipe],[[v,a],[v,b],[v,c]],":-",[[0,["on true",1],["go after",-],["on false",-3],["go to predicates",-],[n,member2],[[v,c],[v,c1]]],[1,["on true",2],["go after",-],["on false",-3],["go to predicates",-],[n,equals1],[[v,c1]]],[2,["on true",3],["go after",-],["on false",-3],["go to predicates",-],[n,equals1],[[v,c12]]],[3,["on true",4],["go after",-2],["on false",-3],[n,"->"]],[4,["on true",5],["go after",-],["on false",6],["go to predicates",-],[n,>],[[v,a],[v,c121]]],[5,["on true",[end_function,3]],["go after",-],["on false",-3],["go to predicates",[0,1]],[n,downpipe],[[v,c121],[v,b],[v,c]]],[6,["on true",7],["go after",[end_function,3]],["on false",-3],[n,"->"]],[7,["on true",8],["go after",-],["on false",9],["go to predicates",-],[n,>],[[v,a],[v,c122]]],[8,["on true",[end_function,6]],["go after",-],["on false",-3],["go to predicates",[0,1]],[n,downpipe],[[v,c122],[v,b],[v,c]]],[9,["on true",[end_function,6]],["go after",-],["on false",-3],["go to predicates",-],[n,fail]]]]]***A=[        [[n,reverse],[[],[v,l],[v,l]]],        [[n,reverse],[[v,l],[v,m],[v,n]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,wrap],[[v,h],[v,h1]]],                [[n,append],[[v,h1],[v,m],[v,o]]],                [[n,reverse],[[v,t],[v,o],[v,n]]]        ]        ]],add_line_numbers_to_algorithm1(A,A2),writeln1(A2).
B=[[0,[n,reverse],[[],[v,l],[v,l]]],[1,[n,reverse],[[v,l],[v,m],[v,n]],":-",[[0,["on true",1],["go after",-],["on false",-3],["go to predicates",-],[n,head],[[v,l],[v,h]]],[1,["on true",2],["go after",-],["on false",-3],["go to predicates",-],[n,tail],[[v,l],[v,t]]],[2,["on true",3],["go after",-],["on false",-3],["go to predicates",-],[n,wrap],[[v,h],[v,h1]]],[3,["on true",4],["go after",-],["on false",-3],["go to predicates",-],[n,append],[[v,h1],[v,m],[v,o]]],[4,["on true",-2],["go after",-],["on false",-3],["go to predicates",-],[n,reverse],[[v,t],[v,o],[v,n]]]]]][debug]  ?- test(77,_,C,_),add_line_numbers_to_algorithm1(C,D),writeln1(C),writeln1(D).
Dear Quentin Guache,Could you please send the parcel code 001 to me by the end April?Yours Sincerely,Harry Jones*/letter1(Letter):-letter(to,To),letter(address,Address),letter(suburb,Suburb),letter(postcode,Postcode),letter(date,Date),letter(message,Message),letter(dear,Dear),letter(yours_sincerely,Yours_sincerely),letter(from,From),letter(from_address,From_address),letter(from_suburb,From_suburb),letter(from_postcode,From_postcode),foldr(string_concat,[From,"\n",From_address,",\n",From_suburb,",\n",From_postcode,".\n\n",Date,".\n\n",To,"\n",Address,",\n",Suburb,",\n",Postcode,".\n\n",Dear," ",To,",\n\n",Message,"\n\n",Yours_sincerely,",\n\n",From],Letter).
Don't need Height,Length in N - just for memory allocation, start with index 1Don't need Height,Length in S - just for memory allocation, use indices from N*/uncompile_list(N,S,L) :- uncompile_list(N,S,[],L),!.
L = [[1, 2], 3, 4, 3, [[]], 4] compile_list([],N1,S1),compile_list([],N2,S2),append_iio(N1,S1,N2,S2,N3,S3),uncompile_list(N3,S3,L).
L = [[a, "b"], c, "d", "e", [[]], f] ;compile_list([a,"b"],N1,S1),compile_list([a,"b"],N2,S2),append_iio(N1,S1,N2,S2,N3,S3),uncompile_list(N3,S3,L).
L = [] compile_list([a,"b"],N1,S1),compile_list(["a",b],N2,S2),append_iio(N1,S1,N2,S2,N3,S3),uncompile_list(N3,S3,L).
Load files with load(File_name,Term), where File_name is the file name in folder folder_name and Term is the contents loaded from the file.
NOT:turn_save_debug(on),numbers(13,13,[],N),findall(N1,(member(N1,N),test(N1,Q,F,R1),do_saved_debug([]),interpret(on,Q,F,R2),saved_debug(S1),writeln1([s,S1]),writeln(""),do_saved_debug([]),catch(call_with_time_limit(3,lucianpl(on,Q,F,R3)),_,false),saved_debug(S2),writeln([s,S2]),S1=S2,do_saved_debug([]),writeln(N1),writeln("")),N2),sort(N2,N3),writeln(N3),length(N3,L),subtract(N,N3,U),writeln(U).
VarLists is in format list of [InputVarList,OutputVarList,Positivity], where these are specification lines that are either Positivity=true or failNotes:- true specification line in first position of varlists, otherwise will try all except the specification line- manually write a,a in algdict in a,b :- a,a,b because cawp would take too long finding all combinations including a,a- give argument values in order 3 2 1 not 1 2 3 when adding, or will try 1+1+1 instead of 3 at first**/%%:- include('algdict.pl').%%:- include('remove_duplicate_predicates.pl').
X:[debug]  ?- a([q,e,r,a,t,y,u,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,u]]).
X:[debug]  ?- a([q,e,r,a,t,y,u,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,u]]).[[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[b,x,u]],[c,b,x]]true.
X:[debug]  ?- a([q,e,r,a,t,y,u,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,u]]).[[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[b,x,u]],[c,b,x]]true.[debug]  ?- a([q,e,r,a,t,y,u,c,c,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,v]]).                   [[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[b,x,v]],[c,c,c]]true.
X:[debug]  ?- a([q,e,r,a,t,y,u,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,u]]).[[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[b,x,u]],[c,b,x]]true.[debug]  ?- a([q,e,r,a,t,y,u,c,c,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,v]]).                   [[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[b,x,v]],[c,c,c]]true.**/check_strings(String1,ML_db) :-%%member([P1,S1,String2],ML_db),%%member([P2,S2,String3],ML_db),ML_db=[String2a,String3a],%%writeln(["String1,String2a,String3a",String1,String2a,String3a]),String2=[0,0,String2a],String3=[0,0,String3a],%%a(String1,String2,String3):-length(String1,Length_string1),((writeln("Attempt 1"),check_strings_container1(Length_string1,String1,String2,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String2,[999,999,[]]],_,List2),length(List2,Length_list2),%%Length_list3 is Length_list2+1,%%writeln(here),check_strings_container1(Length_list2,List2,String3,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String3,[999,999,[]]],_,_List3),writeln("Success")%%,trace)->true;(writeln("Failed"),writeln("Attempt 2"),((check_strings_container1(Length_string1,String1,String3,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String3,[999,999,[]]],_,List2),length(List2,Length_list2),%%Length_list3 is Length_list2+1,%%writeln(here),check_strings_container1(Length_list2,List2,String2,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String2,[999,999,[]]],_,_List3))->writeln("Success");(writeln("Failed"),fail)))).
["+","-","*","/","abort","any","append","atom","brackets","call","ceiling","code","creep","cut","date","delete","equals1","equals2","equals3","equals4","exit","fail","grammar","head","is","length","letters","list","member","member2","n","not","number","or","predicatename","random","round","skip","string","string_from_file","stringconcat","stringtonumber","sys","findall_sys","t","tail","true","unwrap","v","variable","vgp","wrap","input","output","string_length","sort","intersection","read_string","writeln","atom_string","trace","notrace","sqrt","notrace"]**//*find_pred_sm(Reserved_words1) :-Reserved_words1=["+","-","*","/","abort","any","append","atom","brackets","call","ceiling","code","creep","cut","date","delete","equals1","equals2","equals3","equals4","equals4_on","equals4_off","exit","fail","grammar","head","is","length","letters","list","member","member2","member3","n","not","number","or","predicatename","random","round","skip","string","string_from_file","stringconcat","stringtonumber","sys","findall_sys","t","tail","true","unwrap","v","variable","vgp","wrap","input","output","string_length","sort","intersection","read_string","writeln","atom_string","trace","notrace","sqrt","notrace","get_lang_word","on_true","go_after","on_false","go_to_predicates","exit_function","fail_function","findall_exit_function"].*/% list of reserved words from lang dict/**lang(Lang1),%(Lang1="en"->Lang2="en2";Lang2=Lang1),lang_db(Lang_DB),findall(En_word3, (member([En_word,En_word2,Lang1,_T_word], Lang_DB), (Lang2="en"->En_word3=En_word;En_word3=En_word2), not(member(En_word,["findall","maplist"]))), % these reserved words are taken out to be run as list prolog algorithms Reserved_words1).
[*][*][*][*][*][*][*][*][*][*][*][*][*][+][*][*][*][*][*][*][*][*][*][*][*][*][*]**/print_map(Grid1,X,Y,Z,X2,Y2,Z2) :-member([Z2,X2,Y2,Pixel1],Grid1),append(Pixel1,[+],Pixel2),delete(Grid1,[Z2,X2,Y2,_],Grid2),append(Grid2,[[Z2,X2,Y2,Pixel2]],Grid),numbers(Y,0,[],YN1),reverse(YN1,YN),numbers(X,0,[],XN),numbers(Z,0,[],ZN1),reverse(ZN1,ZN),findall(_,(member(Z1,ZN),nl,nl,member(Y1,YN),nl,member(X1,XN),member([Z1,X1,Y1,Pixel],Grid),%(Pixel1=[*]->Pixel="*";Pixel=" "),write(Pixel),write("\t")),_),nl.
[*][*][*][*][*][*][*][*][+][][][][][*][*][*][*][][*][][*][*][][][][*][][*][*][*][*][][*][*][*]**/print_map(Grid1,X,Y,X2,Y2) :-member([X2,Y2,Pixel1],Grid1),append(Pixel1,[+],Pixel2),delete(Grid1,[X2,Y2,_],Grid2),append(Grid2,[[X2,Y2,Pixel2]],Grid),numbers(Y,0,[],YN1),reverse(YN1,YN),numbers(X,0,[],XN),findall(_,(member(Y1,YN),nl,member(X1,XN),member([X1,Y1,Pixel],Grid),%(Pixel1=[*]->Pixel="*";Pixel=" "),write(Pixel),write("\t")),_),nl.
[[0,[n,downpipe],[[v,a],[v,a],[v,b]]],[1,[n,downpipe],[[v,a],[v,b],[v,c]],":-",[[0,[n,member2],[[v,c],[v,c1]]],[1,[n,equals1],[[v,c1]]],[2,[n,equals1],[[v,c12]]],[3,[n,"->"],[[4,[n,>],[[v,a],[v,c121]]],[5,[n,downpipe],[[v,c121],[v,b],[v,c]]],[6,[n,"->"],[[7,[n,>],[[v,a],[v,c122]]],[8,[n,downpipe],[[v,c122],[v,b],[v,c]]],[9,[n,fail]]]]]]]]]A = BxB=[[0,[n,downpipe],[[v,a],[v,a],[v,b]]],[1,[n,downpipe],[[v,a],[v,b],[v,c]],":-",[[0,1,-,-3,[n,member2],[[v,c],[v,c1]]],[1,2,-,-3,[n,equals1],[[v,c1]]],[2,3,-,-3,[n,equals1],[[v,c12]]],[3,4,-2,-3,[n,"->"],[[4,5,-,6,[n,>],[[v,a],[v,c121]]],[5,[end_function,3],-,-3,[n,downpipe],[[v,c121],[v,b],[v,c]]],[6,7,[end_function,3],-3,[n,"->"],[[7,8,-,9,[n,>],[[v,a],[v,c122]]],[8,[end_function,6],-,-3,[n,downpipe],[[v,c122],[v,b],[v,c]]],[9,[end_function,6],-,-3,[n,fail]]]]]]]]]***A=[[0,[n,downpipe],[[v,a],[v,a],[v,b]]],[1,[n,downpipe],[[v,a],[v,b],[v,c]],":-",[[0,[n,member2],[[v,c],[v,c1]]],[1,[n,equals1],[[v,c1]]],[2,[n,equals1],[[v,c12]]],[3,[n,"->"],[[4,[n,>],[[v,a],[v,c121]]],[5,[n,downpipe],[[v,c121],[v,b],[v,c]]],[6,[n,"->"],[[7,[n,>],[[v,a],[v,c122]]],[8,[n,downpipe],[[v,c122],[v,b],[v,c]]],[9,[n,fail]]]]]]]]],                                                     find_state_machine1(A,B,[[[n, downpipe], 3, [0, 1]]]),writeln1(B).
[[[n,function],":-",[[[n,"->"],[[[n,true]],[[n,true]]]],[[n,true]]]]]minimise_alg([[[n,function],":-",[[[n,"->"],[[[n,true]],[[n,true]],[[n,true]]]],[[n,true]]]]],A),writeln1(A).[[[n,function],":-",[[[n,"->"],[[[n,true]],[[n,true]],[[n,true]]]],[[n,true]]]]]*/minimise_alg(Algorithm1,Algorithm2) :-%trace, sort(Algorithm1,Algorithm3), minimise_alg1(Algorithm3,Algorithm2).
[[[n,function],":-",[[[n,not],[[[[n,false]],[[n,false]]]]],[[n,true]]]]]minimise_alg([[[n,function],":-",[[[n,or],[[[n,false]],[[n,true]]]],[[n,true]]]]],A),writeln1(A).[[[n,function],":-",[[[n,or],[[[n,false]],[[n,true]]]],[[n,true]]]]]minimise_alg([[[n,function],":-",[[[n,"->"],[[[n,true]],[[n,true]]]],[[n,true]]]]],A),writeln1(A).
[[[n,function],[[v,a],[v,b],[v,c]],":-",[[[[n,+],[[v,a],[v,b],[v,d]]],[[n,+],[[v,d],[v,d],[v,e]]]],[[n,-],[[v,e],[v,e],[v,c]]]]]][debug]  ?- minimise_alg([[[n,function],":-",[[[n,not],[[[[n,false]],[[n,false]]]]],[[n,true]]]]],A),writeln1(A).
[debug]  ?- a([q,e,r,a,t,y,u,c,c,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,v]]).                   [[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[b,x,v]],[c,c,c]]true.
[debug]  ?- a([q,e,r,a,t,y,u,c,c,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,v]]).                   [[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[b,x,v]],[c,c,c]]true.**/check_strings(String1,ML_db) :-%%member([P1,S1,String2],ML_db),%%member([P2,S2,String3],ML_db),ML_db=[String2a,String3a],%%writeln(["String1,String2a,String3a",String1,String2a,String3a]),String2=[0,0,String2a],String3=[0,0,String3a],%%a(String1,String2,String3):-length(String1,Length_string1),((writeln("Attempt 1"),check_strings_container1(Length_string1,String1,String2,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String2,[999,999,[]]],_,List2),length(List2,Length_list2),%%Length_list3 is Length_list2+1,%%writeln(here),check_strings_container1(Length_list2,List2,String3,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String3,[999,999,[]]],_,_List3),writeln("Success")%%,trace)->true;(writeln("Failed"),writeln("Attempt 2"),((check_strings_container1(Length_string1,String1,String3,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String3,[999,999,[]]],_,List2),length(List2,Length_list2),%%Length_list3 is Length_list2+1,%%writeln(here),check_strings_container1(Length_list2,List2,String2,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String2,[999,999,[]]],_,_List3))->writeln("Success");(writeln("Failed"),fail)))).
[debug]  ?- a([q,e,r,a,t,y,u,c,c,c,b,x,v,n],[1,1,[c,a,t,y,u]],[1,2,[b,x,v]]).                   [[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[b,x,v]],[c,c,c]]true.**/check_strings(String1,ML_db) :-%%member([P1,S1,String2],ML_db),%%member([P2,S2,String3],ML_db),ML_db=[String2a,String3a],%%writeln(["String1,String2a,String3a",String1,String2a,String3a]),String2=[0,0,String2a],String3=[0,0,String3a],%%a(String1,String2,String3):-length(String1,Length_string1),((writeln("Attempt 1"),check_strings_container1(Length_string1,String1,String2,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String2,[999,999,[]]],_,List2),length(List2,Length_list2),%%Length_list3 is Length_list2+1,%%writeln(here),check_strings_container1(Length_list2,List2,String3,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String3,[999,999,[]]],_,_List3),writeln("Success")%%,trace)->true;(writeln("Failed"),writeln("Attempt 2"),((check_strings_container1(Length_string1,String1,String3,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String3,[999,999,[]]],_,List2),length(List2,Length_list2),%%Length_list3 is Length_list2+1,%%writeln(here),check_strings_container1(Length_list2,List2,String2,[[0,0,[xxx,xxx,xxx,xxx,xxx]],String2,[999,999,[]]],_,_List3))->writeln("Success");(writeln("Failed"),fail)))).check_strings_container1(Length_string1,String1,String2,Db,List2,List2b) :-check_strings1(Length_string1,String1,String2,Db,List2,List2b),not(var(List2b)).
[debug]  ?- factors(12,[],F).F = [2, 2, 3].
[debug]  ?- factors(3,[],F).
[debug]  ?- factors(4,[],F).
[debug]  ?- factors(5,[],F).F = [5].
[debug]  ?- factors(8,[],F).
[debug]  ?- get_later_cps_than_cp([[1,2,a],[2,3,b],[3,4,c]],[1,2,a],C).C = [[1, 2, a]].
[debug]  ?- get_later_cps_than_cp([[1,2,a],[2,3,b],[3,4,c]],[3,4,c],C).
[debug]  ?- lucianpl.                                                                 Lucian PrologL:member([1,2],2).
[debug]  ?- lucianpl.                                                                 Lucian PrologL:member([1,2],2).true.
[debug]  ?- merge_lists2([2, "b",3],[5, "b", 6],[[[1, "a", 2], [2, "b", 3], [3, "c",-]], [[1, "a", 5], [5, "b", 6], [6, "e",-]]],O).O = [[[1, "a", 2], [2, "b", 3], [3, "c", -]], [[1, "a", 2], [2, "b", 6], [6, "e", -]]].remove [1, "a", 2],flattendoes reordering cause a bug?() replace in place, redo each time changedmerge if no more than 1 parent of each node before itremove chains of 1-childrenflatten, sort at end* strings must be same length- same parents, etc in next level x whole thingdebug each predfore and post cut in shortening (no middle cut)- if middle cut (where abd acd->ad ad), find minimum combos of intermediate letters between forks with no conflicting (not the same items in the same order/same place)- letter for letter x- a single new level x- cut only if necessary (leave alone) x- a single new letter vcontinually merge and shorten until returns the same**//**same_parents([N1,_A1,_N2],[N4,_A2,_N3],Options61) :-findall([B1,B2,N1],member([B1,B2,N1],Options61),C1),findall([B3,B4,N4],member([B3,B4,N4],Options61),C2),subtract(C2,C1,[]).
[debug]  ?- mr2pp("tabs",[[[n,a],":-",[[[n,true]]]]],A),writeln(A).
[debug]  ?- split_on_number("en a 22",A,B).A = "en a",B = "22".
[debug]  ?- split_on_number("en a",A,B).
[debug]  ?- split_on_number("en22",A,B).A = "en",B = "22".
find_path(5,5,3,1,5).                                                              -----^-*---^-----^^^--**-find_path(20,30,100,1,25).
find_path(20,30,500,1,25).false.
a(L1,In,MN,RN,M2,R2):- init(MN,M1),init(RN,R1), a2(L1,In,M1,M2,R1,R2).
a(OT,TB,BO,O,T):-member(A1,OT),A1=[O,T],member(A2,TB),A2=[T,B],member(A3,BO),A3=[B,O].
a(a).
a1(A):-a(A),!.
a1([File_strings,Limit],L1,File_string_a) :- %findall(Sent_br2,( %member(L1,Ls), count21(C2),(C2>=Limit-> (File_string_a=""%open_s("../Lucian-Academy/Books1/algs/lgalgs_a.txt",write,Stream1),%write(Stream1,File_string),%close(Stream1),abort);(writeln([count,C2,/,Limit]),get_item_n(File_strings,L1,N),       (((catch(call_with_time_limit(0.84,                          time( big_connections_with_bag3_and_mr(N,File_string_a))),      time_limit_exceeded,      false)),%->  findall(_,sub_string(File_string_a,_,_,_,". "),A),length(A,L2),split_string(File_string_a,"\n\r","\n\r",NL),length(NL,NLN),Sent_br2 is L2-NLN, %split_string(File_string_a,"\n\r.","\n\r.",Sents), %split_string(File_string_a,"\n\r","\n\r",Sents1), %length(Sents1,Sents1L), %length(Sents,Sent_br21), %Sent_br2 is Sent_br21-Sents1L,     %trace,  %t2b, %t2ab,%N1=1,texttobr2(N1,"Books/args/lgtext_a.txt",u,u,false,false,false,false,false,false,[auto,on]),  %trace, %t2ab(u,"Books/args/lgtext_a.txt",u,u,on),   count21(C), C1 is C+Sent_br2, retractall(count2(_)), assertz(count2(C1)),  br_bar(Br), append(Br,[File_string_a],Br1),  retractall(br_bar(_)), assertz(br_bar(Br1))  )->true;(File_string_a="")))),!.  %split1(17,A"a:-b,c.",B).
a4(R):-foldr(sum,[1,2,3,4,5],0,R).
abort_if_empty_string(Options1) :-(member("",Options1)->(writeln1("Error: Cannot mind read \"\"."),abort);true),!.
abort_if_gone_past_error(M1,Options1) :-%trace,((member([M1,A,N22],Options1),member([M1,A,N23],Options1),not(N22=N23),not(N22=[-,_]),N23=[-,_])->(term_to_atom([M1,A,N22],N221),term_to_atom([M1,A,N23],N231),concat_list(["Error: Conflicting branches ",N221," and ",N231,"."],W),writeln1(W),abort);true),!.
absdiffmean([],_M,D,D) :- !.
absdiffmean([],_M,D,D) :- !.absdiffmean(S,M,D1,D2) :-S=[S1|S2],S3 is abs(S1-M),append(D1,[[S3,S1]],D3),absdiffmean(S2,M,D3,D2).
accident_preventer_game :-%tty_size(R,_C),R=8,numbers(R,1,[],Rs),numbers(8,1,[],Ns),random_permutation(Ns,Ns2),findall(" ",member(_,Rs),L),append([9],L,L1),accident_preventer_game2(Ns2,L1).
accident_preventer_game2(Ns,L) :-%findall(_,(member(L3,L),writeln(L3),nl),_),writeln(L),append(_,[N1],L),(not(N1=" ")->writeln("Game Over - You Lost.");%(Ns=[]->((not((member(N,L),number(N))),Ns=[])->(trace,writeln("Game Over - You Won."));(move_down(Ns,Ns1,L,L1),accident_preventer_game2(Ns1,L1)))),!.move_down(Ns,Ns1,L0,L2) :-keyboard_input(L0,L,T),T1 is 0.5-T,sleep(T1),random(1,3,N1),((N1=1,not(Ns=[]))->(append(L3,[_],L),Ns=[N|Ns1],append([N],L3,L2));(append(L3,[_],L),Ns=Ns1,append([" "],L3,L2))),!.keyboard_input(L1,L2,T) :-get_time(T1),(catch(call_with_time_limit(0.5,get_single_char(Code)),_,fail)->(%trace,get_time(T2),(catch(number_codes(Num,[Code]),_,fail)->true;Num=65),T is T2-T1,%trace,%get_single_char(Code),(member(Num,L1)->(get_n_item(L1,Num,N),put_item_n(L1,N," ",L2));L1=L2));(L1=L2,T=0.5)),!.% I felt clear.
adacbc**/remove_chains_of_one_child_a([],Options1,Options2,Options3) :- append(Options1,Options2,Options3),!. %*?remove_chains_of_one_child_a(N1,Options0,Options1,Options2) :- N1=[[-,A1]|Ms],member([N,A1,[-,A]],Options0),append(Options1,[[N,A1,[-,A]]],Options21),remove_chains_of_one_child_a(Ms,Options21,[],Options2),!.remove_chains_of_one_child_a(N1,Options1,Options2,Options3) :-N1=[M1|Ms],findall(A,(member([M1,A,_N2],Options1)),A1),sort(A1,A11),length(A11,A11L),(A11L>1->Switch=left;Switch=right),remove_chains_of_one_child_a1(Switch,M1,A11,Options1,[],Options31,[],N21),append(Options2,Options31,Options32),append(Ms,N21,M21),sort(M21,M2),remove_chains_of_one_child_a(M2,Options32,[],Options3).
add1(0,_,_C,B,B):-!.
add1(A,B,C) :- var(C), length(A1,A), length(B1,B), append(A1,B1,C1), length(C1,C).
add_1_to_end_note_number :-end_note_number(N1),N2 is N1+1,retractall(end_note_number(_)),assertz(end_note_number(N2)).
add_furthest_rule1(New_rule_number,Program1) :-furthest_rule(Rule),Rule=[Number,Rules],add_furthest_rule2(New_rule_number,Number,Rules,Program1).
add_line_numbers_to_algorithm_body2([],[],N,N):-!.%%,Body3%%add_line_numbers_to_algorithm_body2([],Body,Body) :- !.
add_line_numbers_to_algorithm_statement1(Statement,Result1,Number1,Number2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,((Statement=[[Dbw_n,Dbw_findall],[Arguments1,Arguments2,Arguments3]],%Arguments=Result2,%trace,Number1a is Number1+1,add_line_numbers_to_algorithm_body2([Arguments2],Body3,Number1a,Number2),%%*** [Arguments2] to Arguments2  %findall(Argument,(member(Argument,Arguments),(predicate_or_rule_name(Argument))),Result2),Result1=[[Number1,[Dbw_n,Dbw_findall],[Arguments1,Arguments3,Body3]]]))./*add_line_numbers_to_algorithm_statement1(Statement,Result1,Number1,Number2) :-((Statement=[[n,maplist],[Arguments1,Arguments2,Arguments3,Arguments4]],%Arguments=Result2,%trace,Number1a is Number1+1,add_line_numbers_to_algorithm_body2([Arguments1],Body3,Number1a,Number2),  %findall(Argument,(member(Argument,Arguments),(predicate_or_rule_name(Argument))),Result2),Result1=[[Number1,[n,maplist],[Arguments2,Arguments3,Arguments4,Body3]]])).
add_line_numbers_to_algorithm_statement1(Statement,Result1,Number1,Number2) :-get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,((Statement=[[Dbw_v,Name],Arguments],%not(Name=findall),Arguments=Result2,%findall(Argument,(member(Argument,Arguments),(predicate_or_rule_name(Argument))),Result2),Result1=[[Number1,[Dbw_v,Name],Result2]])->true;(Statement=[[Dbw_v,Name]],Result1=[[Number1,[Dbw_v,Name],[]]])),Number2 is Number1+1.
add_to_detail_log([Type,Content]) :-get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),% add to detail log% add fileword_count([Type,Content],Words),phrase_from_file_s(string(String1), "detlog.txt"),string_codes(String02b,String1),atom_to_term(String02b,String02a,[]),append(String02a,[[Year,Month,Day,Hour1,Minute1,Seconda,Words,words]],String02c),term_to_atom(String02c,String02a_b),string_atom(String02a_c,String02a_b),(open_s("detlog.txt",write,Stream1),write(Stream1,String02a_c),close(Stream1)),!,concat_list(["detlog_",Year,Month,Day,Hour1,Minute1,Seconda],File1),(Type="file"->(concat_list(["cp ",Content," detlog/",File1,".txt"],Command),shell1_s(Command));((concat_list(["detlog/",File1,".txt"],File2),open_s(File2,write,Stream2),write(Stream2,Content),close(Stream2)),!)).
addfromtolang(_FromLang,_ToLang,[],WithFromToLang,WithFromToLang) :- !.addfromtolang(FromLang,ToLang,WithoutFromToLang,WithFromToLang1,WithFromToLang2) :-WithoutFromToLang=[[A,B]|Rest],WithFromToLang3=[[FromLang],[ToLang],[[A],[B]]],append(WithFromToLang1,[WithFromToLang3],WithFromToLang4),addfromtolang(FromLang,ToLang,Rest,WithFromToLang4,WithFromToLang2), !.
addrules(_,_,[],PV,PV,Program,Program) :- !.
addrules(_,_,[],PV,PV,Program,Program) :- !.addrules(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2) :-OutputVars2=[OutputVar|OutputVars3],member(Var,VarList),member(OutputVar,OutputVars1),append(Program1,[[=,[OutputVar,Var]]],Program3),append(PenultimateVars1,[Var],PenultimateVars3),addrules(VarList,OutputVars1,OutputVars3,PenultimateVars3,PenultimateVars2,Program3,Program2).
addrules0(_,_,[],Program,Program) :- !.
addrules0(_,_,[],Program,Program) :- !.addrules0(VarList,OutputVars1,OutputVars2,Program1,Program2) :-OutputVars2=[OutputVar|OutputVars3],random1(N0), N1 is N0/100, length(VarList,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,VarList),List2=[Var|_Rest]);fail),random1(N01), N11 is N01/100, length(OutputVars1,L1), N21 is round(L1*N11)-1,(N21>=0->(length(List11,N21), append(List11,List21,OutputVars1),List21=[OutputVar|_Rest2]);fail),append(Program1,[[[n,=],[OutputVar,Var]]],Program3),addrules0(VarList,OutputVars1,OutputVars3,Program3,Program2),!.
addrules2([],_,_,PV,PV,Program,Program) :- !.
addrules2(_,_,[],PV,PV,Program,Program) :- !.
addrules2(_,_,[],PV,PV,Program,Program) :- !.addrules2(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2) :-%%restlast(VarList,[],_,Var),OutputVars2=[OutputVar|OutputVars3],random1(N0), N1 is N0/100, length(VarList,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,VarList),List2=[Var|_Rest]);fail),not(member(Var,PenultimateVars1)),random1(N01), N11 is N01/100, length(OutputVars1,L1), N21 is round(L1*N11)-1,(N21>=0->(length(List11,N21), append(List11,List21,OutputVars1),List21=[OutputVar|_Rest2]);fail),append(Program1,[[[n,=],[OutputVar,Var]]],Program3),append(PenultimateVars1,[Var],PenultimateVars3),addrules2(VarList,OutputVars1,OutputVars3,PenultimateVars3,PenultimateVars2,Program3,Program2),!.
agree(with_person_a,about_me).
alarm_clock(Hour_a,Minute_a) :-get_time(TS1),stamp_date_time(TS1,date(Year1,Month1,Day1,_,_,Second1,_,_,_),local),%writeln([timenow,[Year1,Month1,Day1,_,_,Second1,_,_,_]]),date_time_stamp(date(Year1,Month1,Day1,Hour_a,Minute_a,Second1,_,_,_),TS2),%writeln([try_alarm,[Year1,Month1,Day1,Hour_a,Minute_a,Second1,_,_,_]]),%writeln([ts,TS,ts2,TS2]),(TS1>=TS2->(Day12 is Day1+1,date_time_stamp(date(Year1,Month1,Day12,Hour_a,Minute_a,Second1,_,_,_),TS3));(_Day12=Day1,TS3=TS2)),/**((Hour1=Hour_a,Minute1>=Minute_a)->(Hour12=Hour1,Day12 is Day);(%Hour11 is Hour1+1,Hour12 is mod(Hour1,24),Day12 is Day+1)),**/%date_time_stamp(date(Year,Month,Day12,Hour12,Minute_a,Seconda,_,_,_),_TS2),%writeln(date(year,Year1,month,Month1,day,Day12,hour,Hour_a,minute,Minute_a,second,Second1)),DTS is TS3-TS1,writeln([sleeping,DTS]),sleep(DTS),writeln(alarm).
alg_gen :- phrase_from_file_s(string(File), "../Text-to-Breasonings/file.txt"), string_codes(File_string0,File),  downcase_atom(File_string0,File_string1), split_string(File_string1,".\n\r",".\n\r",File_string3),  % to delete connectives such as and, the open_file_s("connectives.txt",Connectives), open_file_s("tech_dict.txt",Tech_dict1), open_file_s("alg_dict.txt",Alg_dict1),% * Recursively do it, replacing old tech dict entriesalg_gen1(File_string3,Connectives,Tech_dict1,Tech_dict2,Alg_dict1,Alg_dict2), save_file_s("tech_dict.txt",Tech_dict2), save_file_s("alg_dict.txt",Alg_dict2).
alg_gen :- phrase_from_file_s(string(File), "../Text-to-Breasonings/file.txt"), string_codes(File_string0,File),  downcase_atom(File_string0,File_string1), split_string(File_string1,".\n\r",".\n\r",File_string31),  delete(File_string31,"",File_string3),  % to delete connectives such as and, the % open_file_s("connectives.txt",Connectives), open_file_s("alg_gen3_dict1.txt",Alg_gen_dict1), open_file_s("alg_gen3_dict2.txt",Alg_gen_dict2),% * Recursively do it, replacing old dict entries alg_gen1(File_string3,Alg_gen_dict1,Alg_gen_dict1a,Alg_gen_dict2,Alg_gen_dict2a),  save_file_s("alg_gen3_dict1.txt",Alg_gen_dict1a), save_file_s("alg_gen3_dict2.txt",Alg_gen_dict2a).
alg_gen :- phrase_from_file_s(string(File), "../Text-to-Breasonings/file.txt"), string_codes(File_string0,File),  downcase_atom(File_string0,File_string1), split_string(File_string1,".\n\r",".\n\r",File_string31),  delete(File_string31,"",File_string3),  % to delete connectives such as and, the % open_file_s("connectives.txt",Connectives), open_file_s("alg_gen_dict1.txt",Alg_gen_dict1), open_file_s("alg_gen_dict2.txt",Alg_gen_dict2),% * Recursively do it, replacing old dict entries alg_gen1(File_string3,Alg_gen_dict1,Alg_gen_dict1a,Alg_gen_dict2,Alg_gen_dict2a),  save_file_s("alg_gen_dict1.txt",Alg_gen_dict1a), save_file_s("alg_gen_dict2.txt",Alg_gen_dict2a).
alg_gen1(File_string3,Connectives,Tech_dict1,Tech_dict2,Alg_dict1,Alg_dict2) :- File_string3=[File_string3a|Rest],  %findall(Words1j,(member(File_string3a,File_string3),   SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'\"0123456789", split_string(File_string3a,SepandPad,SepandPad,File_string2),  subtract(File_string2,Connectives,Words1f), findall(Words1e,(member(Words1c,Words1f), (member([Words1c,Words1d],Tech_dict1)->Words1e=Words1d; Words1e=Words1c)),Words1g1),  % remove duplicates sort(Words1g1,Words1h),  (member([Words1h,_A],Alg_dict1)-> (Tech_dict1=Tech_dict3,Alg_dict1=Alg_dict3); (  term_to_atom(Words1f,Words1g),  foldr(string_concat,["What are the [Computational_words,Algorithm] for: ",Words1g, "\n","e.g. [[[\"word\",\"word\"],[\"automate\",\"recurse\"]], \"recurse(word)\"] ?"],"",Prompt), repeat, writeln(Prompt), read_string(user_input,"\n","\r",_,S),  term_to_atom(S1,S),  S1=[Computational_words,Algorithm],  findall([A,B],(member([A,B],Computational_words)%, %(string_atom(A1,A),string_atom(B1,B)) ),Computational_words1), findall(Words1e,(member(Words1c,Words1h), (member([Words1c,Words1d],Computational_words1)-> Words1e=Words1d; Words1e=Words1c)),Words1j), %))),Words1k),  sort(Words1j,Words1j1), % foldr(append,Words1k,[],Words1m),  append(Tech_dict1,Computational_words,Tech_dict31), sort(Tech_dict31,Tech_dict3), append(Alg_dict1,[[Words1j1,Algorithm]],Alg_dict31), sort(Alg_dict31,Alg_dict3) )),alg_gen1(Rest,Connectives,Tech_dict3,Tech_dict2,Alg_dict3,Alg_dict2),!.
alg_gen1([],_Connectives,Tech_dict,Tech_dict,Alg_dict,Alg_dict) :- !.
alg_gen2(File_string2,Single,Alg_gen_dict1a,Alg_gen_dict1b, Alg_gen_dict2a,Alg_gen_dict2b, Alg_gen_dict3a,Alg_gen_dict3b, New_flag ) :-File_string2=[Word|Rest],% if a word is not in a_dict1, then asks for that word's status or computational version(member([Word,Words1d],Alg_gen_dict1a)->(Alg_gen_dict1a=Alg_gen_dict1c,member([W,Words1d,Note],Alg_gen_dict2a),W1 is W+1,delete(Alg_gen_dict2a,[W,Words1d,Note],Alg_gen_dict2a1),append(Alg_gen_dict2a1,[[W1,Words1d,Note]],Alg_gen_dict2c),append(Alg_gen_dict3a,[Words1d],Alg_gen_dict3c));(foldr(string_concat,[Word," is not in dictionary.  Is it computational (y/n)?"],"",Prompt1),%repeat,(Single=true->S1="y";(writeln(Prompt1),read_string(user_input,"\n","\r",_,S1))),(S1="y"->(%trace,foldr(string_concat,["What is the command name for ",Word," (<return> for the same)?"],"",Prompt2),%repeat,writeln(Prompt2),read_string(user_input,"\n","\r",_,S2),(S2=""->S3=Word;S3=S2),append(Alg_gen_dict1a,[[Word,S3]],Alg_gen_dict1c),append(Alg_gen_dict2a,[[0,S3,-]],Alg_gen_dict2c),append(Alg_gen_dict3a,[S3],Alg_gen_dict3c),New_flag=true);(append(Alg_gen_dict1a,[[Word,-]],Alg_gen_dict1c),Alg_gen_dict2a=Alg_gen_dict2c,Alg_gen_dict3a=Alg_gen_dict3c)))),alg_gen2(Rest,Single,Alg_gen_dict1c,Alg_gen_dict1b,Alg_gen_dict2c,Alg_gen_dict2b,Alg_gen_dict3c,Alg_gen_dict3b,New_flag).
alg_gen2(File_string2,Single,Alg_gen_dict1a1,Alg_gen_dict1b, Alg_gen_dict2a1,Alg_gen_dict2b, Alg_gen_dict3a,Alg_gen_dict3b, New_flag ) :- alg_gen3(File_string2,Alg_gen_dict1a1,Alg_gen_dict1a, Alg_gen_dict2a1,Alg_gen_dict2a, [],Alg_gen_dict4a),  File_string2=[File_string22|Rest], length(Alg_gen_dict4a,L),numbers(L,1,[],N),(Alg_gen_dict4a=[]->( Alg_gen_dict1a=Alg_gen_dict1d, Alg_gen_dict2a=Alg_gen_dict2d, Alg_gen_dict3a=Alg_gen_dict3d);(term_to_atom(File_string2,File_string3a1),(length(Alg_gen_dict4a,1)->SS=[1];(findall([N1," - ",Item,"\n"],(member(N1,N),get_item_n(Alg_gen_dict4a,N1,Item)),List),foldr(append,List,[],Item2a),foldr(string_concat,Item2a,"",Item2),%term_to_atom(Alg_gen_dict3b,Alg_gen_dict3b1),foldr(string_concat,["The sentence: ",File_string3a1," has the undefined words:","\n",Item2,"What are the numbers of the computational terms?"],"",Prompt1),repeat,writeln(Prompt1),read_string(user_input,"\n","\r",_,S1),split_string(S1,", ",", ",S3),%trace,findall(S5,(member(S4,S3),number_string(S5,S4)),SS))),%trace,findall(Item3,(member(S5,SS),get_item_n(Alg_gen_dict4a,S5,Item3)),S6),findall(Item3,(member(S5,N),not(member(S5,SS)),get_item_n(Alg_gen_dict4a,S5,Item3)),S7),%Flag=true,%%Alg_gen_dict2=Alg_gen_dict2c /*File_string2=[Word|Rest],% if a word is not in a_dict1, then asks for that word's status or computational version(member([Word,Words1d],Alg_gen_dict1a)->(Alg_gen_dict1a=Alg_gen_dict1c,member([W,Words1d,Note],Alg_gen_dict2a),W1 is W+1,delete(Alg_gen_dict2a,[W,Words1d,Note],Alg_gen_dict2a1),append(Alg_gen_dict2a1,[[W1,Words1d,Note]],Alg_gen_dict2c),append(Alg_gen_dict3a,[Words1d],Alg_gen_dict3c));(foldr(string_concat,[Word," is not in dictionary.  Is it computational (y/n)?"],"",Prompt1),%repeat,(Single=true->S1="y";(writeln(Prompt1),read_string(user_input,"\n","\r",_,S1))),(S1="y"->*/alg_gen4(S6,Alg_gen_dict1a,Alg_gen_dict1c,Alg_gen_dict2a,Alg_gen_dict2c,Alg_gen_dict3a,Alg_gen_dict3c,New_flag),alg_gen5(S7,Alg_gen_dict1c,Alg_gen_dict1d,Alg_gen_dict2c,Alg_gen_dict2d,Alg_gen_dict3c,Alg_gen_dict3d))),/*findall(*,(member(S7,S6),foldr(string_concat,["What is the command name for ",S7," (<return> for the same)?"],"",Prompt2),%repeat,writeln(Prompt2),read_string(user_input,"\n","\r",_,S2),(S2=""->S3=Word;S3=S2),append(Alg_gen_dict1a,[[Word,S3]],Alg_gen_dict1c),append(Alg_gen_dict2a,[[0,S3,-]],Alg_gen_dict2c),append(Alg_gen_dict3a,[S3],Alg_gen_dict3c),New_flag=true);(append(Alg_gen_dict1a,[[Word,-]],Alg_gen_dict1c),Alg_gen_dict2a=Alg_gen_dict2c,Alg_gen_dict3a=Alg_gen_dict3c)))),*/alg_gen2(Rest,Single,Alg_gen_dict1d,Alg_gen_dict1b,Alg_gen_dict2d,Alg_gen_dict2b,Alg_gen_dict3d,Alg_gen_dict3b,New_flag).
alg_gen3(File_string2,Alg_gen_dict1a,Alg_gen_dict1b, Alg_gen_dict2a,Alg_gen_dict2b, Alg_gen_dict3a,Alg_gen_dict3b) :- File_string2=[Word|Rest],% if a word is not in a_dict1, then asks for that word's status or computational version(member([Word,Words1d],Alg_gen_dict1a)->(Alg_gen_dict1a=Alg_gen_dict1c,member([W,Words1d,Note],Alg_gen_dict2a),W1 is W+1,delete(Alg_gen_dict2a,[W,Words1d,Note],Alg_gen_dict2a1),append(Alg_gen_dict2a1,[[W1,Words1d,Note]],Alg_gen_dict2c),Alg_gen_dict3a=Alg_gen_dict3c);(Alg_gen_dict1a=Alg_gen_dict1c,Alg_gen_dict2a=Alg_gen_dict2c,append(Alg_gen_dict3a,[Word%Words1d],Alg_gen_dict3c))),alg_gen3(Rest,Alg_gen_dict1c,Alg_gen_dict1b, Alg_gen_dict2c,Alg_gen_dict2b, Alg_gen_dict3c,Alg_gen_dict3b).
alg_gen4(S6,Alg_gen_dict1a,Alg_gen_dict1b,Alg_gen_dict2a,Alg_gen_dict2b,Alg_gen_dict3a,Alg_gen_dict3b,New_flag) :-S6=[S7|S8],foldr(string_concat,["What is the command name for ",S7," (<return> for the same)?"],"",Prompt2),%repeat,writeln(Prompt2),read_string(user_input,"\n","\r",_,S2),(S2=""->S3=S7;S3=S2),append(Alg_gen_dict1a,[[S7,S3]],Alg_gen_dict1c),append(Alg_gen_dict2a,[[0,S3,-]],Alg_gen_dict2c),append(Alg_gen_dict3a,[S3],Alg_gen_dict3c),New_flag=true,alg_gen4(S8,Alg_gen_dict1c,Alg_gen_dict1b,Alg_gen_dict2c,Alg_gen_dict2b,Alg_gen_dict3c,Alg_gen_dict3b,New_flag).
alg_gen5(S7,Alg_gen_dict1a,Alg_gen_dict1b,Alg_gen_dict2a,Alg_gen_dict2b,Alg_gen_dict3a,Alg_gen_dict3b) :-S7=[Word|S8],append(Alg_gen_dict1a,[[Word,-]],Alg_gen_dict1c),Alg_gen_dict2a=Alg_gen_dict2c,Alg_gen_dict3a=Alg_gen_dict3c,alg_gen5(S8,Alg_gen_dict1c,Alg_gen_dict1b,Alg_gen_dict2c,Alg_gen_dict2b,Alg_gen_dict3c,Alg_gen_dict3b).
algebra([(A+B)*(C+D)],[A*C+A*D+B*C+B*D]).
algebra([A*X,+,B*X],[C*X]) :-C is A+B.
algebra_finder(A+B,C,B,C-A).
algebra_finder1(A,B,C,D) :-algebra_finder(A,B,C,D),!.
algorithm_decision_tree0 :- %% run this secondphrase_from_file_s(string(Codes), "alg_file.txt"),SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % No 'string_codes(SepandPad,_SepandPad1),split_on_substring117(Codes,[]%SepandPad1,[],File_list),phrase_from_file_s(string(String_dict2), "alg_string_dict.txt"),string_codes(String_dict1,String_dict2),atom_to_term(String_dict1,String_dict,_),phrase_from_file_s(string(Dictionary_d2), "alg_dict2.txt"),string_codes(Dictionary_d1,Dictionary_d2),atom_to_term(Dictionary_d1,Dictionary_d,_),phrase_from_file_s(string(Reversed_dictionary22), "reversed_alg_dict.txt"),string_codes(Reversed_dictionary21,Reversed_dictionary22),atom_to_term(Reversed_dictionary21,Reversed_dictionary2,_),algorithm_decision_tree(File_list,[],File_list2a,String_dict,Dictionary_d,Reversed_dictionary2),%trace,%maplist(append,[File_list2a],File_list2a2),%[File_list_a]=File_list2a,concat_list(File_list2a,File_list2a1),(open_s("alg_file2.txt",write,Stream1),write(Stream1,File_list2a1),close(Stream1)),!.
algorithm_decision_tree1(Dictionary2,Reversed_dictionary2,Word1,Suggestions) :-string_to_list21(Word1,[],A2),%trace,A2=[Letter0|Rest],((Letter0=Letter)->true;(downcase_atom(Letter0,Letter01),atom_string(Letter01,Letter))),(%trace,(findall(Suggestions1A,((member(Dictionary2_a,Dictionary2),member([1,Letter_a,State2],Dictionary2_a),((Letter_a=Letter)->true;(downcase_atom(Letter_a,Letter01),atom_string(Letter01,Letter))),algorithm_decision_tree2(d,Dictionary2_a,State2,Rest,[Letter_a],_Word2,[],Suggestions1A))),Suggestions1B),maplist(append,[Suggestions1B],[Suggestions1])%maplist(append,[Suggestions1_a],[Suggestions1]))->true;(Suggestions1=[])),%trace,reverse(A2,A3),A3=[Letter10|Rest1],((Letter10=Letter1)->true;(downcase_atom(Letter10,Letter101),atom_string(Letter101,Letter1))),%trace,((findall(Suggestions2A,(member(Reversed_dictionary2_a,Reversed_dictionary2),(member([1,Letter_a1,State21],Reversed_dictionary2_a),((Letter_a1=Letter1)->true;(downcase_atom(Letter_a1,Lettera01),atom_string(Lettera01,Letter1))),%writeln1(algorithm_decision_tree2(r,Reversed_dictionary2,State21,Rest1,[Letter1],_Word21,[],Suggestions11)),algorithm_decision_tree2(r,Reversed_dictionary2_a,State21,Rest1,[Letter_a1],_Word21,[],Suggestions2A))),Suggestions2B),maplist(append,[Suggestions2B],[Suggestions11])%maplist(append,[Suggestions11_a],[Suggestions11]))->true;(Suggestions11=[])),%trace,%length(Suggestions1,L_Word2),%length(Suggestions11,L_Word21),%(L_Word2>L_Word21->Suggestions=Suggestions1;%Suggestions=Suggestions11).
algorithm_decision_tree_dict_setup :- %% run this first%SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % No '%phrase_from_file_s(string(Codes2), "brdict1.txt"),findall([F1,F1],(test(_,_,F,_),member(F2,F),replace_vars1(F2,F3,1,_,[],_),term_to_atom(F3,F1),string_length(F1,L),L=<100),Dictionary_c),%phrase_from_file_s(string(Codes2), "../Text-to-Breasonings/brdict1.txt"),%string_codes(String2,Codes2),%atom_to_term(String2,Dictionary_c,_),%splitfurther(Codes2,Dictionary_c),findall(A,(member([A1,_],Dictionary_c),atom_string(A1,A)),String_dict),%trace,split_into_sets(Dictionary_c,%23%50% ***,Dictionary_a),length(Dictionary_a,L),numbers(L,1,[],NN),findall(Dictionary2,(member(NN1,NN),get_item_n(Dictionary_a,NN1,Dictionary_b),writeln([dictionary,NN1,of,L]),%member(Dictionary_b,Dictionary_a),dictionary_to_decision_tree(Dictionary_b,Dictionary2)),Dictionary_d),%trace,findall(Reversed_dictionary2_a,(member(NN1,NN),get_item_n(Dictionary_a,NN1,Dictionary_b),writeln([reversed,dictionary,NN1,of,L]),findall([A4,_],(member([B,_],Dictionary_b),%string_concat(B1,"01",B)string_to_list21(B,[],A2),reverse(A2,A3),maplist(append,[[A3]],[A]),concat_list(A,A4)),Dictionary3),dictionary_to_decision_tree(Dictionary3,Reversed_dictionary2_a)),Reversed_dictionary2),%trace,term_to_atom(String_dict,String_dict1),(open_s("alg_string_dict.txt",write,Stream1),write(Stream1,String_dict1),close(Stream1)),term_to_atom(Dictionary_d,Dictionary_d1),(open_s("alg_dict2.txt",write,Stream2),write(Stream2,Dictionary_d1),close(Stream2)),term_to_atom(Reversed_dictionary2,Reversed_dictionary21),(open_s("reversed_alg_dict.txt",write,Stream3),write(Stream3,Reversed_dictionary21),close(Stream3)),!.
algwriter(Na) :- %%notrace,phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),%%SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",splitfurther(BrDict0,BrDict01),%%trace,sort(BrDict01,BrDict02),makerandomlist(BrDict02,5,[],R0),makerandomlist(R0,3,[],R1),makerandomlist(R0,3,[],R2),wrap(R1,Nb1),wrap(R2,Nb2),append(Nb1,Nb2,Nb3),trialy2A([3,4,5,6,7,8],NFns),randomfns(NFns,Nb3,Na),!.
algwriter(Na) :- notrace,phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),%%SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",splitfurther(BrDict0,BrDict01),%%trace,sort(BrDict01,BrDict02),makerandomlist(BrDict02,5,[],R0),makerandomlist(R0,3,[],R1),makerandomlist(R0,3,[],R2),wrap(R1,Nb1),wrap(R2,Nb2),append(Nb1,Nb2,Nb3),trialy2A([3,4,5,6,7,8],NFns),randomfns(NFns,Nb3,Na),!.
all_fifty(Data):-findall([Name,Number],(book1(Name,Number),Number >=50),Data).
all_supported(Items,List,Result) :-(forall(member(Item,Items),member([Item,_],List))->Result=true;Result=false).
ancestor(different).
ancestor1(Person1, Ancestor,[[_C2,Person2]|C1],E) :-  not(Person1=Person2), ancestor1(Person1,Ancestor, C1,E),!.
angles([0,90,180,270]).
append(_B,C,[a,b,c,d]), append([b],E,C), append(F,G,E), append([d],_J,G).       _B = [a],C = [b, c, d],E = [c, d], *F = [c],G = [d],_J = [] ;reverse_engineering2([[[a,b,c,d],[b,c]],[[z,b,q,d],[b,q]],[[e,b,f,d],[b,f]]],A).
append1(0,A0,A01,A02) :- append(A01,[A0],A02),!.
append1([],Item,Item) :-!.
append1([],Item,Item) :-!.append1(Item11,Item21,Item31) :-replace_empty_with_empty_set([Item11,Item21,Item31],[],[Item1,Item2,Item3]),maplist(expressionnotatom,[Item1,Item2,Item3]),/**((isvalstr(Item1),Item1A=[Item1]);(not(isvalstr(Item1)),Item1A=Item1)),        ((isvalstr(Item2),Item2A=[Item2]);(not(isvalstr(Item2)),Item2A=Item2)),        %%((isvalstr(Item3),Item3A=[Item3]);(not(isvalstr(Item3)),Item3A=Item3)),        **/append(Item1,Item2,Item3),!./**delete1(Item1,Item2,Item3) :-((isvalstr(Item1),Item1A=[Item1]);(not(isvalstr(Item1)),Item1A=Item1)),        ((isvalstr(Item2),Item2A=[Item2]);(not(isvalstr(Item2)),Item2A=Item2)),        %%((isvalstr(Item3),Item3A=[Item3]);(not(isvalstr(Item3)),Item3A=Item3)),delete(Item1A,Item2A,Item3).
append11(Empty,A,A) :- is_empty(Empty),!.
append11(empty,A,A) :- !.
append2(Dbw_n,Dbw_append,Variable1,_Variable2,_Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(3),(contains_empty(Value11),not(contains_empty(Value21)),not(contains_empty(Value31))),(Value21=Value2,Value31=Value3,debug_call(Skip,[[Dbw_n,Dbw_append],[variable1,Value2,Value3]]),        ((append1(Value1A,Value2,Value3),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        putvalue_equals4(Variable1,Value1A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1A,Value2,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_append],[variable1,Value2,Value3]]))%);))).
append2(Dbw_n,Dbw_append,_Variable1,Variable2,_Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(4),(contains_empty(Value21),not(contains_empty(Value11)),not(contains_empty(Value31))),(Value11=Value1,Value31=Value3,debug_call(Skip,[[Dbw_n,Dbw_append],[Value1,variable2,Value3]]),        ((append1(Value1,Value2A,Value3),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        putvalue_equals4(Variable2,Value2A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1,Value2A,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_append],[Value1,variable2,Value3]]))))).                        append2(Dbw_n,Dbw_append,_Variable1,_Variable2,_Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(5),(not(contains_empty(Value21)),not(contains_empty(Value11)),not(contains_empty(Value31))),(Value11=Value1,Value21=Value2,Value31=Value3,debug_call(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3]]),        ((append1(Value1,Value2,Value3),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        Vars1=Vars2,        %putvalue_equals4(Variable2,Value2A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_append],[Value1,variable2,Value3]]))))).                        %oioappend2(Dbw_n,Dbw_append,Variable1,_Variable2,Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(5),%trace,(contains_empty(Value11),not(contains_empty(Value21)),contains_empty(Value31)),(%trace,%Value11=Value1,Value21=Value2,%Value31=Value3,debug_call(Skip,[[Dbw_n,Dbw_append],[_Value1,Value2,_Value3]]),command_n_sols(N),%trace,        ((findnsols(N,[Value1A1,Value3A1],(append1(Value1A,Value2,Value3A),        find_v_sys(V_sys1),        replace_in_term(Value1A,_%'$VAR'(_)        ,V_sys1,Value1A1),        find_v_sys(V_sys2),        replace_in_term(Value3A,_%'$VAR'(_)        ,V_sys2,Value3A1))        ,ValueA),!,        %val1emptyorvalsequal(Value3,Value3A),        %trace,        %Vars1=Vars2,        member([Value1A,Value3A],ValueA),        putvalue_equals4(Variable1,Value1A,Vars1,Vars3),%)->        putvalue_equals4(Variable3,Value3A,Vars3,Vars2),%)->                %putvalue_equals4(Variable2,Value2A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1A,Value2,Value3A]])%;     debug_fail(Skip,[[Dbw_n,Dbw_append],[Value1,variable2,Value3]]))))).                        %iooappend2(Dbw_n,Dbw_append,_Variable1,_Variable2,Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(5),(not(contains_empty(Value11)),contains_empty(Value21),contains_empty(Value31)),(%trace,%Value11=Value1,Value11=Value1,%Value31=Value3,Value21=Value2,debug_call(Skip,[[Dbw_n,Dbw_append],[Value1,Value21,Value31]]),%command_n_sols(N),        ((%findnsols(N,[Value1A,Value3A],        find_v_sys(V_sys),        append1(Value1,_Value2A,Value3A),%ValueA),        replace_in_term(Value3A,_%'$VAR'(_)        ,V_sys,Value3A1),        Value3A1=[Value3A2|Value3A3],        Value3A4=[Value3A2,"|",Value3A3],        %val1emptyorvalsequal(Value3,Value3A),        %trace,        %Vars1=Vars2,        %member([Value1A,Value3A],ValueA),        putvalue_equals4(Variable3,Value3A4,Vars1,Vars2),%)->                %putvalue_equals4(Variable2,Value2A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3A4]])%;     debug_fail(Skip,[[Dbw_n,Dbw_append],[Value1,variable2,Value3]]))))).                        %oooappend2(Dbw_n,Dbw_append,Variable1,_Variable2,Variable3,Value11,Value21,Value31,Vars1,Vars2) :-get_lang_word("v",Dbw_v),%writeln(5),(contains_empty(Value11),contains_empty(Value21),contains_empty(Value31)),(%trace,%Value11=Value1,Value11=Value1,Value31=Value3,Value21=Value2,debug_call(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3]]),command_n_sols(N),%N=3,%find_v_sys(V_sys),replace_in_term(Value2,[Dbw_v,_],%'$VAR'(_)        _,Value22),        ((findnsols(N,[Value1A1,Value3A1],(        append1(Value1A,Value22,Value3A),        find_v_sys(V_sys1),        replace_in_term(Value1A,_%'$VAR'(_)        ,empty2,Value1A2),        %replace_in_term(Value2A,_%'$VAR'(_)        %,empty,Value2A1),        find_v_sys(V_sys2),        replace_in_term(Value3A,_%'$VAR'(_)        ,empty2,Value3A2),        convert_to_lp_pipe(Value1A2,Value1A3),        %convert_to_lp_pipe(Value2A2,Value2A1),        convert_to_lp_pipe(Value3A2,Value3A3),                replace_in_term(Value1A3,empty2%'$VAR'(_)        ,V_sys1,Value1A1),        replace_in_term(Value3A3,empty2%'$VAR'(_)        ,V_sys2,Value3A1)        ),ValueA),!,        member([Value1a,Value3a],ValueA),        %Value1A1=Value1a,        %Value3A1=Value3a,        %trace,        putvalue_equals4(Variable1,Value1a,Vars1,Vars3b),%)->        %putvalue_equals4(Variable2,Value2a,Vars3b,Vars3),%)->        %trace,        putvalue_equals4(Variable3,Value3a,Vars3b,Vars2),              debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1a,Value2,Value3a]]))%;     debug_fail(Skip,[[Dbw_n,Dbw_append],[Value1,variable2,Value3]])))).                        interpretpart(stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat",Dbw_stringconcat),        %trace,        %getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),getvalue_equals4(Variable1,Value11,Vars1),getvalue_equals4(Variable2,Value21,Vars1),getvalue_equals4(Variable3,Value31,Vars1),stringconcat2(Dbw_n,Dbw_stringconcat,Variable1,Variable2,Variable3,Value11,Value21,Value31,Vars1,Vars2).stringconcat2(Dbw_n,Dbw_stringconcat,_Variable1,_Variable2,Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(1),(contains_empty(Value31),not(contains_empty(Value11)),not(contains_empty(Value21))),(Value11=Value1,Value21=Value2,debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2,variable3]]),        ((string_concat(Value1,Value2,Value3A),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        putvalue_equals4(Variable3,Value3A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3A]])%;     debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2,variable3]])))).
append_cp1(List1,CP,List5a,CP_Vars1,CP_Vars2a) :-CP=[CP2],get(curr_cp,N,CP_Vars1),get(curr_cp_index,Curr_cp_index1,CP_Vars1),Curr_cp_index2 is Curr_cp_index1+1,(((List1=[],%curr_cp_index3 is curr_cp_index2+1,List5=[[1,2|CP2]]),set(curr_cp,2,CP_Vars1,CP_Vars3),set(curr_cp_index,2,CP_Vars3,CP_Vars4),set(min_cp,1,CP_Vars4,CP_Vars5),set(max_cp,2,CP_Vars5,CP_Vars2)%curr_cp_index2=curr_cp_index3)->true;((member([N,_A|_CP21],List1),not(member([_F,N|_],List1)),append([[Curr_cp_index2,N|CP2]],List1,List5),set(curr_cp,N,CP_Vars1,CP_Vars3),set(curr_cp_index,Curr_cp_index2,CP_Vars3,CP_Vars4),set(min_cp,Curr_cp_index2,CP_Vars4,CP_Vars2))->true;((member([_A,N|_CP21],List1),not(member([N,_F|_],List1)),%curr_cp_index3 is curr_cp_index2+1,append(List1,[[N,Curr_cp_index2|CP2]],List5),set(curr_cp,Curr_cp_index2,CP_Vars1,CP_Vars3),set(curr_cp_index,Curr_cp_index2,CP_Vars3,CP_Vars4),set(max_cp,Curr_cp_index2,CP_Vars4,CP_Vars2)%,(curr_cp_index2=24->writeln([curr_cp_index2,curr_cp_index2]);true))->true;(%curr_cp_index3 is curr_cp_index2+1,member([D,N|CP4],List1),member([N,_B|_CP21],List1),delete(List1,[D,N|CP4],List4),append(List4,[[D,Curr_cp_index2|CP4]],List2),append(List2,[[Curr_cp_index2,N|CP2]],List5),set(curr_cp,N,CP_Vars1,CP_Vars3),set(curr_cp_index,Curr_cp_index2,CP_Vars3,CP_Vars2))))),renumber_cps(List5,List5a,CP_Vars2,CP_Vars2a,_),%sort(List5,List5a),!.
append_if_needed(A,[B],C) :-%trace,(member(B,A)->C=A;append(A,[B],C))%,notrace,!.
append_iio(N1,S1,N2,S2,N3,S3) :-%trace, % get max index of N1 N1=[[NAL1,Max_N1]|N11], % use in iteration in C N2=[[NAL2,Max_N2]|N21], S1=[SAL1,Max_S1|S11], % use in iteration in C S2=[SAL2,Max_S2|S21],% test both are listsN11=[[0,1,4]|N12],N21=[[0,1,4]|N22],% get both listsN12=[N13|N14],length(N12,LN12),append(N15,[4],N13),length(S11,LS11),%N22=[N23|N24],length(N22,LN22),%trace,%append(N25,[4],N23),length(S21,LS21),% repoint ns of later items in (n) list 2 to N+LN12numbers(LN22,1,[],LNs),findall(LNs1,(member(LNs2,LNs),LNs1 is LNs2+LN12-1),LNs3),%trace,findall(N245,(member(N241,N22),replace_items0(N241,LNs3,[],N245%(N241=[0,N242,4]->(get_item_n(LNs3,N242,N244),N245=[0,N244,4]);N245=N241))),N35),%N246),numbers(LS21,1,[],LSs),findall(LSs1,(member(LSs2,LSs),LSs1 is LSs2+LS11-1),LSs3),%trace,findall(N249,(member(N248,N35%N246),replace_items(N248,LSs3,[],N249)),N351),%trace,%findall(N249,(member(N248,S21%N246%),replace_items(N248,LSs3,[],N249)),N3512),N351=[N247|N251],%trace,/* N15=N151,%append(N15,[4],N151),append(N25,[4],N251),foldr(append,[N151,N251],N35),*/NAL3 is NAL1+NAL2,(Max_N1>=Max_N2->Max_N3=Max_N1;Max_N3=Max_N2),length(N35,LN35),(Max_N3>=LN35->Max_N4=Max_N3;Max_N4=LN35),%trace,(N14=[]->N141=[];N141=N14),%trace,(N24=[]->N241=[];(%foldr(append,N24,N242),N241=N24)),%foldr(append,[[[NAL3,Max_N4]],[[0,1,4]],[N35],N141,N241],N3),append(N15,N247,N2470),%trace,% * get dimensions%same for strings,atoms in L1 (below)% watch for string, atoms in v,p% repoint ns of later items in (s) list 2 to N+LS11%trace,foldr(append,[[[NAL3,Max_N4]],[[0,1,4]],[N2470],N14,N251%[N35],N141,N241],N31),%trace,append(S11,S21,S31),%SAL3 is SAL1+SAL2,% get max s3(Max_S1>=Max_S2->Max_S3=Max_S1;Max_S3=Max_S2),%S311=[SAL3,Max_S3|S31],% one copy of strings, atoms%trace,point_dups(S31,1,[],_S311,[],_S312,[],S313,[],S314),length(S313,SAL4),S3=[SAL4,Max_S3|S313],N31=[[X,Y]|Z],%trace,findall(S315,(member(Z1,Z),replace_items(Z1,S314,[],S315)),S315),% Get array length, max length for N list%trace, findall(L,(member(List1,S315),length(List1,L)),L2), sort(L2,L3), (L3=[]->Y1=0;append(_,[Y1],L3)), length(S315,X1),N3=[[X1,Y1]|S315],!.
append_iio([[2, 5], [0, 1, 4], [1, 1, 1, 2, 4]],[0, 0],[[2, 5], [0, 1, 4], [1, 3, 1, 4, 4]],[0, 0],N3,S3),uncompile_list(N3,S3,L).L=[1,2,3,4].
append_last_rule(Program2):-lastrule(LastRule1),append_last_rule1(Program2,LastRule1).
append_line(Line,Code,V,V6,Dir,Results1,Spaces1,-,_) :- append(_A,B1,Line), append([B],C1,B1), append(B2,D1,C1), append([C],C2,D1), find_rev(Dir,D_code,V,V1), %(Dir=l->(D_code=[],V=V1); %(get_var_at(V1), %D_code=[[[n,reverse],[V,V1]]])), get_var_at(V2), get_var_at(V3), get_var_at(V4), get_var_at(V5), get_var_at(V6), get_var_at(V7),  Code1= [ [[n,append],[V2,V3,V1]], [[n,append],[[B],V4,V3]], [[n,append],[%B2 V7,V5,V4]], [[n,append],[[C],V6,V5]] ],  %trace, foldr(append,[D_code,Code1],Code), %foldr(append,Code2,Code), Results=[%A,[B], B2%,[C] ], foldr(append,Results,Results1), Spaces=[C2], foldr(append,Spaces,Spaces1).
append_list(A,[],A):-!.
append_list(A,[],A):-!.append_list(A,List,B) :-List=[Item|Items],append(A,[Item],C),append_list(C,Items,B).
append_list(A1,B):-%A1=[A|List],append_list([],A1,B),!.
append_list(A1,B):-A1=[A|List],append_list(A,List,B),!.
append_list(A1,B):-append_list(A1,[],B),!.
append_list([],A,A):-!.
append_list2(A,[],A):-!.
append_list2([],[]):-!.
append_list3([],A,A):-!.
append_list3([],A,A):-!.append_list3(List,A,B) :-List=[Item|Items],append(A,Item,C),append_list3(Items,C,B),!.
append_node(List2,Node,List6) :- append(List2,Node,List6),!.
appendlogic(Formula1,Name,Formula2) :-atom(Formula1),append([Formula1],[and,Name],Formula3),Formula2=[not,Formula3].
appendlogic([Operator,Formula2],Name2,Formula3) :-        appendlogic(Formula2,Name2,Formula4),        Formula3=[Operator,Formula4].appendlogic(Formula1,Name,Formula2) :-atom(Formula1),append([Formula1],[and,Name],Formula2).
apply(k,c,m).
apply(k,c,m).apply(m,v,e).
apply(oh,fm,f).
apply(pinecone,beachball,box1).
apply(s1,r,b1).
apply_all_to_all(Inventory1,Inventory2) :-findall(Item3,(member(Item1,Inventory1),member(Item2,Inventory1),not(Item1=Item2),apply(Apply),member([Item1,Item2,Item3],Apply),not(member(Item3,Inventory1))),AddedItems),(AddedItems=[]->Inventory1=Inventory2;(append(Inventory1,AddedItems,Inventory3),apply_all_to_all(Inventory3,Inventory2))).
apply_all_to_all(Inventory1,Inventory2) :-findall(Item3,(member(Item1,Inventory1),member(Item2,Inventory1),not(Item1=Item2),apply(Item1,Item2,Item3),not(member(Item3,Inventory1))),AddedItems),(AddedItems=[]->Inventory1=Inventory2;(append(Inventory1,AddedItems,Inventory3),apply_all_to_all(Inventory3,Inventory2))).
apply_all_to_all(Inventory1,Inventory2) :-findall(Item3,(member(Item1,Inventory1),member(Item2,Inventory1),not(Item1=Item2),apply1([Item1,Item2,Item3]),not(member(Item3,Inventory1))),AddedItems),(AddedItems=[]->Inventory1=Inventory2;(append(Inventory1,AddedItems,Inventory3),apply_all_to_all(Inventory3,Inventory2))).
apply_for_loan(1,1,0,2,A).
apply_for_loan(2,1,1,2,A).A = 0.5.apply_for_loan(1,1,-1,3,A).
apply_rules_existing_and_new_branch(Rules1,Rules2) :-apply_rules_existing_and_new_branch2(Rules1,Rules3),apply_rules_existing_and_new_branch3(Rules1,Rules4),append(Rules3,Rules4,Rules2).
apply_rules_existing_and_new_branch2(Rules1,Rules2) :-findall([A,C1,C2],(member(B,Rules1),B=[A1,C1,C2],member(D,[rules_existing]),A=[D,A1]),Rules2).
area(X,Y,XY) :-XY is X*Y.
arg2([],_Command,_Args) :- !.
arg_conn(A,B,Tree,First,C) :- ontology_connection(A,B,First,Tree,[C2,C1,C3]), reverse(C1,C11), foldr(append,[C11,[C2],C3],C41), findall([C5,", "],member(C5,C41),C51), flatten(C51,C52), append(C53,[", ",C54,", "],C52), foldr(append,[C53,[" and "],[C54],["."]],C531), foldr(string_concat,C531,C),!. /*alg_conn("c:-d","b:-f",[["a:-b",["b:-c"]],["b:-c",["c:-d"]],["a:-b",["b:-f"]]],"a:-b",C).
as('enough room to move around in his seat', 'putting his mouth around the spoon').
ask(Prompt,S) :- writeln(Prompt), read_string(user_input,"\n\r","\n\r",_,S),!.
ask_for_new_tag(A,B) :-prompt("New tag? (y/n)",New_tag),(New_tag="y"->(tag(Tag,Text,Source),append(A,[[Tag,Text,Source]],C),ask_for_new_tag(C,B));A=B).
assertz_append1(FR) :-assertz_append(A),append(A,[FR],B),retractall(assertz_append(_)), assertz(assertz_append(B)),!.
assort_words([],[],G,G) :- !.
atom_concat_list(A,[],A):-!.
atom_concat_list([],''):-!.
atom_concat_list1(A,[],A):-!.
attacks(Philosophies,People,Attacks1,Attacks2) :-((random(X),1 is ceiling(X*2))->(random_member(Philosophy,Philosophies),random_member(Person,People),append(Attacks1,[[Philosophy,Person]],Attacks3),% rebut attack hereattacks(Philosophies,People,Attacks3,Attacks2));Attacks1=Attacks2).
b([],A,A).
b1(A,G) :-string_codes(A,B),findall(C,(member(D,B),char_code(C,D)),E),a(F,[],E),foldr(string_concat,F,G),!.
ba(File_codes, Header,Footer,Middle) :-%trace,A=`BA    1   CR         0   TR  1   CH  1   Instrument `,append(Header2,D2,File_codes),string_codes(Header,Header2),append(A,D,D2),%trace,foldr(append,[A,D],[],D4),reverse(D4,File_codes_reversed),append(Footer1,D3,File_codes_reversed),append(`\n`,_D1,D3),reverse(Footer1,Footer2),string_codes(Footer,Footer2),foldr(append,[%`\n`,D3],[],E),reverse(E,Middle),!.
back_translate([],Ctt_orig1_orig2,Ctt_orig_tran,_From_lang,_To_lang,Translation,Translation,Ctt_orig1_orig2_1,Ctt_orig1_orig2_2,Ctt_orig_tran_1,Ctt_orig_tran_2) :- append(Ctt_orig1_orig2,Ctt_orig1_orig2_1,Ctt_orig1_orig2_2),append(Ctt_orig_tran,Ctt_orig_tran_1,Ctt_orig_tran_2),!.
background(Scale,Background) :-X is 5*Scale,Y is 9*Scale,numbers(X,1,[],XN),numbers(Y,1,[],YN),findall([X1,Y1,[]],(member(Y1,YN),member(X1,XN)),Background).scale2([Scale,C],Background,C1) :-C=[A,B,D],A1 is Scale*A,B1 is Scale*B,%C2=[A1,B1,D],delete(Background,[A1,B1,_],Background2),append(Background2,[[A1,B1,D]],C1).
bag2phil2(Length,T5,Twists,Br32) :-%trace,flatten(T5,T6),%findall([T61,". "],member(T61,T6),T62),%flatten(T62,T63),foldr(string_concat,T6,T7),%open_s("../Text-to-Breasonings/file.txt",write,S3),write(S3,T7),close(S3),%trace,repeat(Length,Twists,T7,Br32),!.
bag2phil2(Length,T5,Twists,Br32,Keywords) :-%trace,flatten(T5,T6),%findall([T61,". "],member(T61,T6),T62),%flatten(T62,T63),foldr(string_concat,T6,T7),%open_s("../Text-to-Breasonings/file.txt",write,S3),write(S3,T7),close(S3),%trace,repeat(Length,Twists,T7,Br32,Keywords),!.
bag_algs(Limit1,C2) :-(((exists_directory('Books/algs')->(get_r(X2),mv("Books/algs/",X2));true),time((Split_into_n=4,%Limit is ceiling((Limit1*2.5*Split_into_n)),%/(*5)),Limit is Limit1, retractall(count2(_)), assertz(count2(0)),  retractall(br_bal(_)), assertz(br_bal([])),  %length(L,10), %L=[1,2,3,4,5,6,7,8,9,10], open_string_file_s("../Lucian-Academy/Books1/algs/lgalgs_a.txt",File_string), term_to_atom(File_string2,File_string), File_string2=["","","",File_string1], not(File_string1=""), split1(Split_into_n%17 ,File_string1,File_strings), length(File_strings,L), numbers(L,1,[],Ls), concurrent_maplist(a1([File_strings,Limit]),Ls,_N2))) )-> ( true);true%bag_algs(Limit1)), count21(C2),writeln([count,C2,/,Limit1]),get_time(A),stamp_date_time(A,date(_Year,_Month,_Day,Hour1,Minute1,_Seconda,_A,_TZ,_False),local),open_string_file_s("aa_log.txt",File_string_b), term_to_atom(File_string2_b,File_string_b), append(File_string2_b,[[alg,Hour1,Minute1,C2]],File_string2_b1), open_s("aa_log.txt",write,Stream1a),write(Stream1a,File_string2_b1),close(Stream1a),   br_bal(Br),  open_string_file_s("alg_cache.txt",File_string_b_cache), term_to_atom([Cache_N,File_string2_b_cache],File_string_b_cache), term_to_atom(Br,N5),atom_string(N5,N6),  string_concat(File_string2_b_cache,N6,N7),  %word_count(["string",N7],WC), WC is C2+Cache_N,  (WC>6000-> ( %delete(N2,0,N3),append(_,[N4],N3),writeln1(N4),  texttobr2(u,u,N7,u,[auto,on]), t2ab(u,u,N7,u,on),  term_to_atom([0,""],Cache_atom),  open_s("alg_cache.txt",write,Stream1a_cache),write(Stream1a_cache,Cache_atom),close(Stream1a_cache)); (%WC1 is Cache_N+WC,  term_to_atom([WC,N7],N8),  open_s("alg_cache.txt",write,Stream1a_cache),write(Stream1a_cache,N8),close(Stream1a_cache))),  !.
bag_args(Limit1,C2) :- (((exists_directory('Books/args')->(get_r(X2),mv("Books/args/",X2));true),time((Split_into_n=%1,%2,%Limit is ceiling((Limit1*2.5*Split_into_n)),%/(*5)),Limit is Limit1,%*2.5*Split_into_n)),%/(*5)), retractall(count2(_)), assertz(count2(0)),  retractall(br_bar(_)), assertz(br_bar([])),  %length(L,10), %L=[1,2,3,4,5,6,7,8,9,10], open_string_file_s("../Lucian-Academy/Books1/args/lgtext_a.txt",File_string), term_to_atom(File_string2,File_string), File_string2=["","","",File_string1], not(File_string1=""), split1(Split_into_n,File_string1,File_strings), length(File_strings,L), numbers(L,1,[],Ls), concurrent_maplist(a1([File_strings,Limit]),Ls,_N2))) )->  (true);true%bag_args(Limit1)), count21(C2),writeln([count,C2,/,Limit1]),    get_time(A),stamp_date_time(A,date(_Year,_Month,_Day,Hour1,Minute1,_Seconda,_A,_TZ,_False),local),open_string_file_s("aa_log.txt",File_string_b), term_to_atom(File_string2_b,File_string_b), append(File_string2_b,[[arg,Hour1,Minute1,C2]],File_string2_b1), open_s("aa_log.txt",write,Stream1a),write(Stream1a,File_string2_b1),close(Stream1a), %delete(N2,0,N3),append(_,[N4],N3),writeln1(N4),  br_bar(Br),open_string_file_s("arg_cache.txt",File_string_b_cache), term_to_atom([Cache_N,File_string2_b_cache],File_string_b_cache), term_to_atom(Br,N5),atom_string(N5,N6),  string_concat(File_string2_b_cache,N6,N7),  WC is C2+Cache_N,  %word_count(["string",N7],WC),  (WC>6000-> (texttobr2(u,u,N7,u,[auto,on]), t2ab(u,u,N7,u,on), term_to_atom([0,""],Cache_atom),  open_s("arg_cache.txt",write,Stream1a_cache),write(Stream1a_cache,Cache_atom),close(Stream1a_cache)); (%WC1 is Cache_N+WC,  term_to_atom([WC,N7],N8),  open_s("arg_cache.txt",write,Stream1a_cache),write(Stream1a_cache,N8),close(Stream1a_cache))),   !.
bash_command(Command, Output) :-        setup_call_cleanup(process_create(path(bash),                ['-c', Command],                [stdout(pipe(Out))]),        read_string(Out, _, Output),        close(Out)).
bash_command(Command, Output) :-        setup_call_cleanup(process_create(path(bash),                ['-c', Command],                [stdout(pipe(Out))]),        read_string(Out, _, Output),        close(Out)),!.foldr(string_concat,[A,B,C],D) :-not(var(A)),var(B),not(var(C)),string_concat(A,G,D),string_concat(B,C,G),!.
bash_command(Command, Output) :-        setup_call_cleanup(process_create(path(bash),                ['-c', Command],                [stdout(pipe(Out))]),        read_string(Out, _, Output),        close(Out)).concat_list(A1,B):-A1=[A|List],concat_list(A,List,B),!.
bash_command(Command, Output) :-        setup_call_cleanup(process_create(path(bash),                ['-c', Command],                [stdout(pipe(Out))]),        read_string(Out, _, Output),        close(Out)).concat_list([],""):-!.
bc12 :-working_directory1(WD,WD),working_directory1(_,"../Text-to-Breasonings"),shell1_s("./bc12.sh"),working_directory1(_,WD),!.point_to_br(T) :-N2 is (T div 16000)+1,texttobr2_1(N2),!.
bell(H,M,Spoken_notification) :- alarm_clock(H,M), /* string_codes(S,[101, 99, 104, 111, 32, %022, %86,  007%, 71  ]),*/ foldr(string_concat,["afplay /System/Library/Sounds/Funk.aiff\nsay \""%done"%"echo " ,%""% Spoken_notification, "\""],S1), shell1_s(S1).
bell(Spoken_notification) :- catch((bell1(Spoken_notification)->true;true),_,true),!.
big_connections_with_bag3_and_mr :-(exists_directory('Books')->true;make_directory('Books')),K=["../Lucian-Academy/Books/BOTS/","../Lucian-Academy/Books/COMPUTER SCIENCE/","../Lucian-Academy/Books/Computational English/","../Lucian-Academy/Books/Creating and Helping Pedagogues/","../Lucian-Academy/Books/Delegate workloads, Lecturer, Recordings/","../Lucian-Academy/Books/ECONOMICS/","../Lucian-Academy/Books/Fundamentals of Meditation and Meditation Indicators/","../Lucian-Academy/Books/Fundamentals of Pedagogy and Pedagogy Indicators/","../Lucian-Academy/Books/IMMORTALITY/","../Lucian-Academy/Books/Lecturer/","../Lucian-Academy/Books/MEDICINE/","../Lucian-Academy/Books/MEDITATION/","../Lucian-Academy/Books/Mind Reading/","../Lucian-Academy/Books/PEDAGOGY/","../Lucian-Academy/Books/POLITICS/","../Lucian-Academy/Books/POPOLOGY/","../Lucian-Academy/Books/REPLICATION/","../Lucian-Academy/Books/SALES/","../Lucian-Academy/Books/Short Arguments/","../Lucian-Academy/Books/SIMULATION/","../Lucian-Academy/Books/Time Travel/"],findall(_J,(member(K1,K),directory_files(K1,F),delete_invisibles_etc(F,G),%/*findall([A,"\n",B,"\n",File_term,"\n"],(member(H,G),not(string_concat("dot",_,H)),string_concat(K1,H,H1),open_file_s(H1,[A,B,_,File_term])),J10),%*/%J10=["Hello, I am Lucian Green.  I enjoy programming, writing Philosophy and going for walks.  I also compose songs and do acting.  Programming is on the topic compilers, inductive algorithm finders and philosophy.  I love animals, and secretly wrote songs with about my (human-like) pets.  I also enjoy programming about each of my books, on topics such as meditation.
big_connections_with_bag3_and_mr2(File_term,Br32) :-flatten([File_term],J1),foldr(string_concat,J1,"",J2),split_string(J2,"\n\r.","\n\r.",J3),delete(J3,"",J4),length(J4,Length),Length2 is Length*16,%trace, bag2phil2(Length2,J2,2,Br32),!.
books_written(A,B) :- subtract([spirituality,computationalism,business],A,B).
bot("synthesis of interests").
br("down",[1,1,0]).br("square",[1,1,0]).
br('?',1,1.5,0).
br(Word,_) :-%[],B,B,C,C,_,D,D,_Room,RoomDict03,RoomDict03,_PartOfRoom,PartOfRoomDict03,PartOfRoomDict03,_Direction,DirectionDict03,DirectionDict03,_ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict03,_ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict03) :-%!.
br([]) :-!.br([Code|Codes]) :-char_code(Character,Code),br(Character,_X,_Y,_Z),brth2(Character,_Brth),%%writeln([Character]),%%,X,Y,Z]), %%%%write(' '),br(Codes).
br([],B,B,C,C,Shell,Shell,_N1,_M1,_Brth,_Room,_PartOfRoom,_Direction,_ObjectToPrepare,_ObjectToFinish) :-!.br([Word|Words],BrDict,BrDict2,BrDict4,BrDict5,Shell1,Shell2,N1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish) :-downcase_atom(Word, Word2), atom_string(Word2,Word3),/**member([Word3,X,Y,Z],BrDict4) -> %% This feature is a bug because words in brdict2 shouldn't necessarily be the words in brdict1%%(append(BrDict,[[Word3,""]],BrDict3), BrDict3t=BrDict4,%%br(Words,BrDict3,BrDict2,BrDict3t,BrDict5))%%;%%(**/%%(member([Word3,X,Y,Z],BrDict4) -> %% This feature is a bug because words in brdict1 should correspond to those in brdict2%%(atom_concat("The breasoning for ", Word3, P1),%%atom_concat(P1, " is defined.  Enter object name (without spaces), if different for ", Prompt));%Prompt="Enter object name (without spaces), if different for "),%%writeln([word3,Word3]),(member([Word3,String4],BrDict)-> BrDict3=BrDict;((repeat,write("Enter algorithm name (without spaces), if different for "), writeln(Word3),read_string(user_input, "\n", "\r", _End2, String2),split_string(String2, "", " ", String3),String3=[String4]),append(BrDict,[[Word3,String4]],BrDict3),texttobr(1,u,String4,1))),%%*brth(Word3,_Brth),(String4=""->String5=Word3;String5=String4),downcase_atom(String5, String52), atom_string(String52,String53),(member([String53,Query,Algorithm,Result],BrDict4)->BrDict3t1=BrDict4;((repeat,write("Enter specification, algorithm and result for "), writeln(String53),read_string(user_input, "\n", "\r", _End, String),term_to_atom(Values,String),%% ",", " ", Values),Values=(Query,Algorithm,Result),%%number_string(X,X1),number_string(Y,Y1),number_string(Z,Z1)),append(BrDict4,[[String53,Query,Algorithm,Result]],BrDict3t1)))->true;true),%%*brth(String53,_Brth2),%%write("br(\'"),write(Word3),writeln("\',)."),%%writeln([Word3,X,Y,Z]),%%write(' '),term_to_atom(Query,Query1),term_to_atom(Algorithm,Algorithm1),term_to_atom(Result,Result1),concat_list([Shell1,"swipl -G100g -T20g -L2g\n[listprolog].\nleash(-all),visible(+all),protocol(\"./file1.txt\"),trace,interpret(off,",Query1,",",Algorithm1,",",Result1,"),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N = ",N1,",","M = ",M1,", texttobr2(N,\"file1.txt\",u,M,",Brth,",",Room,",",PartOfRoom,",",Direction,",",ObjectToPrepare,",",ObjectToFinish,"),texttobr(N,\"file1.txt\",u,M))).\nhalt.\n\n"],Shell3),br(Words,BrDict3,BrDict2,BrDict3t1,BrDict5,Shell3,Shell2,N1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish).
br([],B,B,C,C,_,D,D,_Room,RoomDict03,RoomDict03,_PartOfRoom,PartOfRoomDict03,PartOfRoomDict03,_Direction,DirectionDict03,DirectionDict03,_ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict03,_ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict03) :-!.
br1("hat","").br1("cape","").
br1([[a,1,1.5,0],[about,1,1,0],[ache,1,0,0],[after,1,1,0],[all,1,1.5,0],[an,1,1.5,0],[and,1,1,0],[appearances,5,0,5],[apple,5,5,5],[are,1,1,0],[area,5,5,0],[argument,1,1.5,0],[as,1,1,0],[asanas,180,50,1],[at,1,1,0],[ate,15,2,1],[avoid,1,1,0],[b,1,1,1],[bacteria,2,1,1],[based,5,5,1],[be,50,30,180],[before,1,1,0],[being,50,30,180],[binding,1,1,0],[blocking,1,1,1],[bolt,2,1,1],[box,1,1,1],[breakfast,10,10,1],[breasoned,5,5,5],[breasoning,5,5,5],[breasonings,5,5,5],[by,1,1,0],[chapter,10,15,1],[clear,1,1,0],[colds,1,1,1],[comfort,180,50,30],[comfortable,50,50,100],[complexes,1,1,1],[conception,50,14,8],[connected,1,1,0],[correctness,1,1,0],[day,10,10,10],[depression,1,1,0],[details,1,1,1],[did,1,1,0],[do,50,30,180],[dotted,1,1,0],[down,1,1,0],[drinking,5,5,5],[during,1,1.5,0],[each,1,1,0],[earned,1,1.5,0],[education,50,30,180],[effects,1,1.5,0],[elderberries,1,1,1],[ensure,1,1,0],[excess,1,1,1],[exercises,10,10,1],[f,5,5,5],[feeling,1,1,0],[felt,1,1,0],[first,1,1.5,0],[flu,1,1,0],[food,2,1,1],[for,1,1,0],[from,1,1,0],[fruits,1,1,1],[function,1,1.5,0],[gaffer,10,10,1],[gave,1,1,1],[glasses,15,11,3],[god,50,30,180],[grade,1,1.5,0],[grains,1,1,1],[had,1,1,0],[hallucinogenic,1,1,0],[happiness,1,1,0],[happy,1,1,0],[have,5,5,5],[head,15,20,23],[headache,1,1,0],[headaches,1,1,0],[health,50,30,180],[healthy,50,30,180],[help,5,5,0],[helped,50,30,180],[high,1,1.5,0],[hills,5,5,2],[honey,10,10,10],[i,50,30,180],[imagery,5,5,0],[in,1,1,0],[incompatibility,1,1,0],[interpretation,20,30,0],[it,1,1,0],[keep,1,1,0],[laughter,1,1.5,0],[maintain,1,1,0],[maintaining,1,1,0],[master,50,30,180],[mind,3,4,4],[minutes,20,30,0],[mistake,1,1,0],[muscle,1,1,1],[muscles,1,1,1],[music,1,1,0],[must,1,1,0],[my,50,30,180],[namaskar,15,10,23],[neck,15,15,10],[next,1,1,0],[nietzsche,50,30,180],[no,1,1,0],[noticed,50,30,180],[nut,1,1,0],[nuts,1,1,1],[of,1,1,0],[off,1,1.5,0],[on,1,1,0],[one,1,1.5,0],[organs,1,1,1],[out,1,1,0],[over,1,1,0],[part,1,1,1],[peace,1,1.5,0],[perfect,1,1.5,0],[performed,50,30,180],[performing,50,30,250],[philosophy,10,20,1],[physiology,50,30,180],[pimple,1,1,0],[pm,5,5,5],[poem,1,1.5,0],[positive,1,1,0],[pot,5,5,10],[prayer,5,5,0],[prepared,1,1,0],[prevent,1,1,0],[prevented,1,1,0],[preventing,1,1,0],[prevention,1,1,0],[problems,1,1.5,0],[product,1,150,1],[products,5,5,5],[psychiatry,50,30,180],[psychology,2,2,0],[quality,1,1.5,0],[quantum,1,1,0],[read,15,1,20],[relax,180,50,30],[relaxed,180,50,30],[remain,1,1.5,0],[require,1,1,0],[room,500,400,300],[s,1,1,0],[safe,1,1.5,0],[sales,1,1.5,0],[same,1,1,0],[schizophrenia,1,1,0],[second,1,1.5,0],[see,1,0,1],[seek,1,1,0],[sell,5,3,0],[sets,5,1,0],[sex,1,1.5,0],[short,1,1,0],[single,1,1.5,0],[sites,20,0,30],[sitting,50,70,150],[sized,30,1,0],[skin,1,1,0],[sleep,180,50,30],[slices,2,2,2],[so,1,1,0],[societal,50,30,180],[some,1,1,0],[spine,1,1,10],[spiritual,50,30,180],[state,1,1.5,0],[stated,20,30,0],[stating,50,30,180],[status,1,1.5,0],[stop,5,1,15],[straight,1,1,0],[strawberry,1,1,1],[structure,1,1,1],[studied,50,30,180],[study,100,50,100],[studying,50,30,180],[subject,50,30,180],[successful,1,1.5,0],[surya,1,1.5,0],[sutra,5,1.5,0],[table,7,5,0],[tape,10,10,1],[task,15,2.5,0],[technique,1,1,0],[test,20,20,0],[text,20,30,0],[that,1,1,0],[the,1,1,0],[them,50,30,180],[then,1,1,0],[they,50,30,180],[thinking,1,1.5,0],[third,1,1.5,0],[this,1,1,0],[thoughts,1,1,0],[through,1,1,0],[tied,1,1,0],[time,1,1.5,0],[to,1,1,0],[together,1,1,0],[touch,1,1,0],[train,1,1,1],[trains,50,30,180],[travel,10,3,0],[treating,20,15,3],[turn,1,1,0],[two,1,1.5,0],[university,100,75,3],[unwanted,1,1,0],[up,1,1,0],[upasana,100,75,100],[used,1,1,0],[using,1,1,0],[var,1,1,1],[vegetables,5,5,5],[videos,5,0,3],[view,5,5,5],[virality,1,1,0],[viruses,1,1,2],[vitamin,1,1,1],[walks,100,500,0],[wanted,15,20,3],[warm,1,1,0],[was,1,1,0],[water,5,5,5],[way,1,1,0],[ways,50,100,0],[well,50,30,180],[where,1,1,0],[whole,1,1,1],[with,1,1,0],[without,1,1,0],[words,5,7,1],[write,15,1,1],[writing,5,5,0],[wrote,15,1,1],[years,3,1,0]]).
br1_l2b(File_contents_list_term,File_contents_assignments_term1,File_contents_assignments_term2) :-length(File_contents_assignments_term1,Ass_length),(Ass_length=<10->New_ass=File_contents_assignments_term1;B is 10,length(New_ass,B),append(_,New_ass,File_contents_assignments_term1)),writeln("10 Previous Assignments and Breasoning Counts"),findall(_,(member(C,New_ass),writeln(C)),_),%%writeln(""),findall(E,(member(D,File_contents_assignments_term1),D=[_,E]),F), sum(F,G),findall(H,(member(I,File_contents_list_term),I=[_,H]),J), sum(J,K),L is round(100*(G/K)),write(G),write(" of "),write(K),write(" breasonings ("),write(L),writeln("%) used."),(repeat,write("Enter the subject and assignment number: "),read_string(user_input, "\n", "\r", _NC1, NC2)),(repeat,write("Enter <Return> for 128k breasonings in this assignment, or the number of breasonings: "),read_string(user_input, "\n", "\r", _NB1, NB2),split_string(NB2, "", " ", NB3),NB3=[NB4],(NB4=""->NB5=128000;number_string(NB5,NB4))),append(File_contents_assignments_term1,[[NC2,NB5]],File_contents_assignments_term2),%%(File_contents_list_term=[]->(concat_list(["Error: Database is empty."],A),   %%writeln(A),abort);(find_br1(File_contents_list_term,G,NB5,0,[],Text_term),% convert to stringterm_to_atom(Text_term,Text_atom),string_atom(Text_string,Text_atom),% t2b2%%writeln1(Text_string),texttobr2(u,u,Text_string,u,true,false,false,false,false,false),texttobr(u,u,Text_string,u))%%.
br2(List1,N) :-%br2(_,A,A,B,B,0,_Brth,BrthDict03,BrthDict03,_Room,RoomDict03,RoomDict03,_PartOfRoom,PartOfRoomDict03,PartOfRoomDict03,_Direction,DirectionDict03,DirectionDict03,_ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict03,_ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict03) :- !.
br2(_,A,A,B,B,0,Shell,Shell,_N1,_M1,_Brth,_Room,_PartOfRoom,_Direction,_ObjectToPrepare,_ObjectToFinish) :- !.br2(List1,BrDict03,BrDict2,BrDict03t,BrDict03t2,N1,Shell1,Shell2,N11,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish) :-br(List1,BrDict03,BrDict21,BrDict03t,BrDict03t21,Shell1,Shell3,N11,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish),N2 is N1-1,br2(List1,BrDict21,BrDict2,BrDict03t21,BrDict03t2,N2,Shell3,Shell2,N11,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish),!.
br2(_,A,A,B,B,0,_Brth,BrthDict03,BrthDict03,_Room,RoomDict03,RoomDict03,_PartOfRoom,PartOfRoomDict03,PartOfRoomDict03,_Direction,DirectionDict03,DirectionDict03,_ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict03,_ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict03) :- !.
br_alg_gen2(Br) :-phrase_from_file_s(string(Codes), "../Text-to-Breasonings/file.txt"),string_codes(String,Codes),br_alg_gen21(String,Br),!.
br_alg_gen21(String,Br) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xx%string_codes(String1,Codes),%string_to_list2(SepandPad,[],SepandPad1),string_codes(SepandPad,SepandPad1),split_string(String,"\n\r.","\n\r.",Strings),findall(File_list1,(member(String1,Strings),string_codes(String1,Codes1),split_on_substring117(Codes1,SepandPad1,[],File_list1)),File_list),% gets aa bb from Aa Bbfindall(C,(member(AA,File_list),findall([A,B1],(member(A,AA),downcase_atom(A,B),atom_string(B,B1)),C)),CC),%findall(A,member([_,A],C),D),% gets join word pairs%trace,%flatten(CC,CC1),%foldr(string_concat,CC1,CC2),br_gen2(String,Raw,_Chains),% finds joined sentences with Aa Bbfindall(L3,%[G,E,F,H],(member([E,F],Raw),%member([C1,C2],CC),get_n_item([C1,C2],E,N1),member(C3,CC),get_n_item(C3,[_,E],N1),%numbers(N1,1,[],N11),length(L1,N1),%append(G,[E|_],C2)append(L1,_,C3),%append(L2,_,C1),findall(C4,member([C4,_],L1),C5),member(D3,CC),%append(_,[F|H],D2)),Br).
br_gen(Raw,Chains) :- %phrase_from_file_s(string(File), "../Text-to-Breasonings/file.txt"), phrase_from_file_s(string(File), "../Text-to-Breasonings/file.txt"), string_codes(File_string0,File), br_gen2(File_string0,Raw,Chains).
br_n_calculator(Text,Br_n_required,Gl_br_n_required) :- SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'\"0123456789", split_string(Text,"\n\r.","\n\r.",Text2), length(Text2,L2), writeln(["Number of lines and sentences:",L2]), split_string(Text,SepandPad,SepandPad,Text3), length(Text3,L3), writeln(["Number of words:",L3]), Gl_br_n_required is round(125*Br_n_required-L2), writeln(["Number of GL breasonings required for",Br_n_required,"breasonings:",Gl_br_n_required]).
bracket_if_single(Value1A,Value1A) :-is_list(Value1A),!.
bs_before_meditation(Threats1,Threats2):-%% "Given that we are interested in friendliness in primary school, secondary school and university, is there anything else?"trialy2_6("Yes",R1),trialy2_6("No",R2),R=[R1,R2/**,R3,R4,R5,R6,R7,R8,R9,R10**,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27**/],sort(R,RA),reverse(RA,RB),RB=[[_,Answer]|_Rest],(Answer="No"->Threats2=Threats1;(Threats3 is Threats1+1,bs_before_meditation(Threats3,Threats2))),!.
bt-lp2sm_en2test1(Lang,N,A) :-lp2sm_en2test(N,I,O),((retractall(lang(_)),assertz(lang("en")),sm_to_lp(O,I2),trans_alg(I2,"en",Lang,I3),I=I3)->(writeln([bt-lp2sm_en2test,N,passed]),A=passed);(writeln([bt-lp2sm_en2test,N,failed]),A=failed)),!.
bt-p2lp_pp_test1(N,A) :-p2lp_test(N,_I,O),((pp_lp2p0(O,I1),p2lpconverter([string,I1],O2),O=O2)->(writeln([bt-p2lp_test,N,passed]),A=passed);(writeln([bt-p2lp_test,N,failed]),A=failed)),!.
bt-p2lp_test1(N,A) :-p2lp_test(N,_I,O),((lp2p1(O,I1),p2lpconverter([string,I1],O2),O=O2)->(writeln([bt-p2lp_test,N,passed]),A=passed);(writeln([bt-p2lp_test,N,failed]),A=failed)),!.
bt1-lp2sm_en2test1(Lang,N,A) :-lp2sm_en2test(N,I,O),(((once((trans_alg(I,Lang,"en",I2),retractall(lang(_)),assertz(lang("en")),add_line_numbers_to_algorithm1(I2,Functions2a),find_pred_numbers(Functions2a,[]                                          ,Pred_numbers),retractall(pred_numbers(_)),assertz(pred_numbers(Pred_numbers)),find_state_machine1(Functions2a,O1,Pred_numbers))),O=O1)->(writeln([bt1-lp2sm_en2test,N,passed]),A=passed);(writeln([bt1-lp2sm_en2test,N,failed]),A=failed))),!.
bt1-lp2sm_test1(N,A) :-lp2sm_test(N,I,O),(((once((add_line_numbers_to_algorithm1(I,Functions2a),find_pred_numbers(Functions2a,[]                                          ,Pred_numbers),retractall(pred_numbers(_)),assertz(pred_numbers(Pred_numbers)),find_state_machine1(Functions2a,O1,Pred_numbers))),O=O1)->(writeln([bt1-lp2sm_test,N,passed]),A=passed);(writeln([bt1-lp2sm_test,N,failed]),A=failed))),!.
bt1-p2lp_test1(N,A) :-p2lp_test(N,I,_O),(p2lpconverter([string,I],O1),(lp2p1(O1,I2),(string_concat(I1,"\n",I2)->true;I1=I2),I=I1)->(writeln([bt1-p2lp_test,N,passed]),A=passed);(writeln([bt1-p2lp_test,N,failed]),A=failed)),!.
bus_trans_sol(Pre_info1,Question1,Question_table1,Answer3) :-answer_number(Question1,AN),findall(Table_a,(member(A1,Question_table1),findall(B,(member([[[function,_,_,_,C121,_F211]],[[function,_,_,_,C122,_F212]]|_],A1),((search(C122,["personal"]),fail)->true;((search(C122,["business","cash"]),find_number(C121,N1),find_number(C122,N2),B=[N1,N2,0,0,0,N2,0])->true;((search(C122,["credit"]),find_number(C121,N1),find_number(C122,N2),B=[N1,0,0,N2,N2,0,0])->true;(((search(C122,["paid"])->true;search(C122,["purchased"])),find_number(C121,N1),find_number(C122,N2),N3 is -N2,B=[N1,N3,0,0,0,0,N3])->true;((search(C122,["invoice"]),find_number(C121,N1),find_number(C122,N2),B=[N1,0,N2,0,0,0,N2])->true;((search(C122,["withdrew"]),find_number(C121,N1),find_number(C122,N2),N3 is -N2,B=[N1,N3,0,0,0,N3,0])->true;((search(C122,["interest"]),find_number(C121,N1),find_number(C122,N2),B=[N1,N2,0,0,0,0,N2])))))))),Table1),Table1=[Row1|_],length(Row1,L),numbers(L,1,[],Ls),findall(Total,(member(Cols,Ls),findall(Value,(member(Row,Table1),get_item_n(Row,L1,Value)),Column),foldr(plus,Value,(member(Row,Table1),get_item_n(Row,L1,Value)),Column,0,Total)),Totals)),append(Pre_info1,Question1,Q_data),find(Q_data,["January","February","March","April","May","June","July","August","September","September","October","November","December"],B1),B1=[Month|_],string_concat("Date ",Month,MS),foldr(append,[AN,[[MS," Cash","Accounts rec.","Equipment","Accounts payable","Capital","Profit or loss"]],Table1,[["Total"|Totals]]],Answer1),%bus_trans_sol_sfp(Pre_info1,Question1,Question_table1,Answer1) :-%answer_number(Question2,AN2),find_between(Pre_info1,"business transactions of ","",Company_name),append(_,[Final_table],Question_table1),append(_,[[[[function,_,_,_,C121,_F211]],[[function,_,_,_,C122,_F212]]|_]],Final_table),find_number(C121,Day),find(Pre_info1,["January","February","March","April","May","June","July","August","September","September","October","November","December"],B1),B1=[Month|_],find_number(Pre_info1,Year),foldr(string_concat,[Company_name,"\n","Statement of financial position","\n","as at ",Day," ",Month," ",Year],S1),get_item_n(Totals,2,Cash_total),string_concat("$ ",Cash_total,Cash_total1),get_item_n(Totals,3,Accts_rec),string_concat(Accts_rec," <single underline>",Accts_rec1),Total_current_assets is Cash_total+Accts_rec,string_concat("$ ",Total_current_assets,Total_current_assets1),get_item_n(Totals,4,Office_equipment),string_concat(Office_equipment," <single underline>",Office_equipment1),Total_non_current_assets=Office_equipment1,Total_assets is Total_current_assets+Total_non_current_assets,string_concat(Total_assets," <single underline>",Total_assets1),get_item_n(Totals,5,Accounts_payable),string_concat(Accounts_payable," <single underline>",Accounts_payable1),Total_current_liabilities = Accounts_payable1,string_concat(Net_assets," <double underline>",Net_assets1),string_concat("Capital - ",Company_name,Capital_string),member(A1,Question_table1),member([[[function,_,_,_,C121,_F211]],[[function,_,_,_,C122,_F212]]|_],A1),search(C122,["business","cash"]),find_number(C122,Capital),member([[[function,_,_,_,C1211,_F2111]],[[function,_,_,_,C1221,_F2121]]|_],A1),search(C1221,["withdrew"]),find_number(C1221,Drawings),Drawings1 is -Drawings,get_item_n(Totals,7,Profit_loss),string_concat(Profit_loss," <single underline>",Profit_loss1),Total_equity is Capital+Drawings1+Profit_loss,foldr(string_concat,["$ ",Total_equity," <double underline>"],Total_equity1),T=[["Assets","",""],["Current assets","",""],["Cash",Cash_total1,""],["Accounts receivable",Accts_rec1,""],["Total current assets","",Total_current_assets1],["Non-current assets","",""],["Office equipment",Office_equipment1,""],["Total non-current assets","",Total_non_current_assets],["Total assets","",Total_assets1],["Liabilities","",""],["Current liabilities","",""],["Accounts payable",Accounts_payable1,""],["Total current liabilities","",Accounts_payable1],["Total liabilities","",Total_current_liabilities],["Net assets","",Net_assets1],["Equity","",""],[Capital_string,"",Capital],["Drawings","",Drawings1],["Profit/(loss)","",Profit_loss1],["Total equity","",Total_equity1]],foldr(append,[[Answer1],[S1],[T]],Table_a)),Answer3),!.
c(A,B):-a(A,C),b(C,B).a(A,B):-foldr(append,A,B).
c2lpconverter(List3) :-File1="test1.pl",readfile(File1,"test1.pl file read error.",List3).
c2lpconverter([file,File1],List3) :-%File1="test1.pl",readfile(File1,"test1.pl file read error.",List3).
c2lpconverter([string,String],List3) :-%File1="test1.pl",string_codes(String,String1),(phrase(file(List3),String1)->true;%(writeln(Error),fail).
calc_form(A%[function,_,_,FEC1,F21],B%[function,_,_,C1,F21],[A,B1]) :- calc_form2(A%FEC1 ,B%F21,C1 B1),!.
calcbtremaining(CttInput1,CttOrig1Orig211,CttOrigTran1,FromLang,ToLang) :-towords(FromLang,ToLang,CttOrig1Orig211,[],CttOrig1Orig212,[],_ObjectNames,[],AllUsedNames),tranfrom(CttOrigTran1,[],TranFrom),subtract(CttInput1,CttOrig1Orig212,D1), %%length(D1,Length),Difference is abs(Length),write("Number of back-translations remaining to define: "), writeln(Difference),%%towords2(CttInput1,[],CttInput2),subtract(AllUsedNames,TranFrom,D2), %% Should AUN be appended to TF, " x%%delete(D21,'',D2),length(D2,Length01t),Differencet is abs(Length01t),write("Number of undefined back-translations: "), writeln(Differencet),%%writeln([undefined,D2]), %% Print undefined %%delete(D31,'',D3),subtract(TranFrom,AllUsedNames,D3),length(D3,Length01t2),Differencet2 is abs(Length01t2),write("Number of orphaned translations: "), writeln(Differencet2),!.
calculate_loop(Ad2,Q2,A1,A2) :-summarise_formulas(Ad2,Q2,A1,A3),calculate(A3,A4),(A1=A4->A1=A2;calculate_loop(Ad2,Q2,A4,A2)),!.
can convert lp to pl later */:-include('../listprologinterpreter/listprolog.pl').
caw(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program2,Programs3,Programs3) :-%%writeln([here2,caw(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program21,Programs3,Programs3)]),!.
caw(_Query,_PredicateName,_Rules,_MaxLength2,_VarList,_InputVars1,_InputVars2,_InputVars3,_OutputVarList,_OutputVars,[],_Program2,Programs3,Programs3) :-%%writeln([here2,caw(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program21,Programs3,Programs3)]),!.
caw0(PredicateName,Rules,MaxLength,InputVarList,OutputVarList,Program1,Program2) :-varnames(InputVarList,[],InputVars,[],InputValues),varnames(OutputVarList,[],OutputVars,[],_OutputValues),retractall(outputvars(_)),    assertz(outputvars(OutputVars)),append(InputVars,OutputVars,Vars11),%%Vars11=InputVars,%%Vars12=InputVars,append(InputValues,OutputVars,Vars2),%%append(InputValues,OutputValues,Values),Query=[PredicateName,Vars2],caw(Query,PredicateName,Rules,MaxLength,Vars11,InputVars,InputVars,_,OutputVarList,OutputVars,Program1,Program2).
caw0(PredicateName,Rules,MaxLength,InputVarList,OutputVarList,Program1,Program2,Ps2) :-varnames(InputVarList,[],InputVars,[],InputValues),varnames(OutputVarList,[],OutputVars,[],_OutputValues),retractall(outputvars(_)),    assertz(outputvars(OutputVars)),append(InputVars,OutputVars,Vars11),%%Vars11=InputVars,%%Vars12=InputVars,append(InputValues,OutputVars,Vars2),%%append(InputValues,OutputValues,Values),Query=[PredicateName,Vars2],caw1(Query,PredicateName,Rules,MaxLength,Vars11,InputVars,InputVars,_,OutputVarList,OutputVars,Program1,Program2,[],Ps2), !.
caw0(Predicates,PredicateName,Rules,MaxLength,InputVarList,OutputVarList,Program1,Program2) :-varnames(InputVarList,[],InputVars,[],InputValues),varnames(OutputVarList,[],OutputVars,[],_OutputValues),retractall(outputvars(_)),    assertz(outputvars(OutputVars)),append(InputVars,OutputVars,Vars11),%%Vars11=InputVars,%%Vars12=InputVars,append(InputValues,OutputVars,Vars2),%%append(InputValues,OutputValues,Values),Query=[PredicateName,Vars2],caw(Predicates,Query,PredicateName,Rules,MaxLength,Vars11,InputVars,InputVars,_,OutputVarList,OutputVars,Program1,Program2).
caw00(Debug,PredicateName,Rules,MaxLength,TotalVars,_InputVarList,_OutputVarList,Program1,_Program2,Ps1) :-repeat,%%MaxLength2 is MaxLength + 1,%%TotalVars = MaxLength,randvars(MaxLength,MaxLength,[],RandVars),populatevars(RandVars,MaxLength,[],PV),Code is MaxLength + 1 + 97,char_code(Char,Code),OutputVarList=[[[v,Char],1]],retractall(debug(_)),    assertz(debug(Debug)),retractall(totalvars(_)),    assertz(totalvars(TotalVars)),caw0(PredicateName,Rules,MaxLength,PV,OutputVarList,Program1,_Program3,Ps),sort(Ps,Ps1),not(Ps1=[]),!.
caw00(Debug,PredicateName,Rules1,MaxLength,MaxPredicates,TotalVars,NumInputs,NumOutputs,VarLists,AlgDict,Program1,Program2B) :-PredicatesA=AlgDict,%% remove duplicate predicates%%remvdup(PredicatesA0,[],PredicatesA),split3(PredicatesA,[],Rules2),split2(PredicatesA,[],Predicates),%%writeln([Rules2,Predicates]),append(Rules1,Rules2,Rules3),%%retractall(a(_)),retractall(debug(_)),assertz(debug(Debug)),retractall(totalvars(_)),   assertz(totalvars(TotalVars)),retractall(maxlength(_)),   assertz(maxlength(MaxLength)),retractall(lastrule(_)),   assertz(lastrule([])),retractall(furthest_rule(_)),   assertz(furthest_rule([0,[]])),%%retractall(newrulenumber(_)),%%assertz(newrulenumber(0)),retractall(numInputs(_)),   assertz(numInputs(NumInputs)),retractall(numOutputs(_)),   assertz(numOutputs(NumOutputs)),/**catch(call_with_time_limit(10, **/caw01(VarLists,_,Predicates,PredicateName,Rules3,MaxLength,MaxPredicates,0,_,Program1,Program2B,_)%%writeln1(Program2B)/**),      time_limit_exceeded,      fail)      **/      .%%,not(length(Program2B,1)).
caw00(Debug,PredicateName,Rules1,MaxLength,TotalVars,InputVarList,OutputVarList,Predicates1,Program1,Program2) :-split3(Predicates1,[],Rules2),split2(Predicates1,[],Predicates),%%writeln([Rules2,Predicates]),append(Rules1,Rules2,Rules3),retractall(debug(_)),    assertz(debug(Debug)),retractall(totalvars(_)),    assertz(totalvars(TotalVars)),caw0(Predicates,PredicateName,Rules3,MaxLength,InputVarList,OutputVarList,Program1,Program2).
caw00(Debug,PredicateName,Rules1,MaxLength,TotalVars,InputVarList,OutputVarList,Predicates1,Program1,Program2) :-split3(Predicates1,[],Rules2),split2(Predicates1,[],Predicates),%%writeln([Rules2,Predicates]),append(Rules1,Rules2,Rules3),retractall(debug(_)),    assertz(debug(Debug)),retractall(totalvars(_)),    assertz(totalvars(TotalVars)),retractall(test(_)),    assertz(test(0)),caw0(Predicates,PredicateName,Rules3,MaxLength,InputVarList,OutputVarList,Program1,Program2).
caw00(off,f,[[append,2,1],[delete,2,1],[head,1,1],[tail,1,1],[member,1,1]],50,7,[[a,[4,1,2,3]],[b,1]],[[d,[4,2,3]]],[],Program).[debug]  ?- optimise([[append,[a,b,c]],[append,[c,d,e]]],[a,b,d],[a,b,c,d],[e],P).                                                                                P = [[append, [a, b, c]], [append, [c, d, e]]] ;[debug]  ?- optimise([[append,[a,b,c]],[append,[a,b,c]]],[a,b],[a,b,c],[c],P). P = [[append, [a, b, c]]] ;[debug]  ?- optimise([[append,[a,b,c]],[delete,[a,b,c]]],[a,b],[a,b,c],[c],P).P = [[append, [a, b, c]], [delete, [a, b, c]]] ;[debug]  ?- optimise([[append,[a,b,c]],[delete,[a,b,x]]],[a,b],[a,b,c,x],[c],P).
caw000(Debug,PredicateName,Rules,MaxLength,MaxPredicates,TotalVars,NumInputs,NumOutputs,VarLists,AlgDict,Program1,Program2A) :-PredicateName=[PredicateName1|PredicateName2],MaxLength=[MaxLength1|MaxLength2],MaxPredicates=[MaxPredicates1|MaxPredicates2],TotalVars=[TotalVars1|TotalVars2],VarLists=[VarLists1|VarLists2],%%AlgDict=[AlgDict1|AlgDict2],Program2A=[Program2A1|Program2A2],caw00(Debug,PredicateName1,Rules,MaxLength1,MaxPredicates1,TotalVars1,NumInputs,NumOutputs,VarLists1,AlgDict,Program1,Program2A1),%%trace,findall(A,(member(B,Program2A1),findall(K,(member(F,NumInputs),member(G,NumOutputs),B=[[n,C],Q,D,E],K=[[[n,C],F,G],Q,D,E]),L),member(A,L)),J),append(AlgDict,J,Program2AA4),%%Program2AA3=[Program2AA4],remvdup(Program2AA4,[],Program2A3),%%trace,caw000(Debug,PredicateName2,Rules,MaxLength2,MaxPredicates2,TotalVars2,NumInputs,NumOutputs,VarLists2,Program2A3,[],Program2A2).
caw000(Debug,PredicateName,Rules,MaxLength,MaxPredicates,TotalVars,NumInputs,NumOutputs,VarLists,AlgDict,Program1,Program2A) :-PredicateName=[PredicateName1|PredicateName2],MaxLength=[MaxLength1|MaxLength2],MaxPredicates=[MaxPredicates1|MaxPredicates2],TotalVars=[TotalVars1|TotalVars2],VarLists=[VarLists1|VarLists2],%%AlgDict=[AlgDict1|AlgDict2],Program2A=[Program2A1|Program2A2],caw00(Debug,PredicateName1,Rules,MaxLength1,MaxPredicates1,TotalVars1,NumInputs,NumOutputs,VarLists1,AlgDict,Program1,Program2A1),%%trace,findall(A,(member(B,Program2A1),findall(K,(member(F,NumInputs),member(G,NumOutputs),B=[[n,C],Q,D,E],K=[[[n,C],F,G],Q,D,E]),L),member(A,L)),J),append(AlgDict,J,Program2AA4),%%Program2AA3=[Program2AA4],remvdup(Program2AA4,[],Program2A3),%%trace,caw000(Debug,PredicateName2,Rules,MaxLength2,MaxPredicates2,TotalVars2,NumInputs,NumOutputs,VarLists2,Program2A3,[],Program2A2).caw00(Debug,PredicateName,Rules1,MaxLength,MaxPredicates,TotalVars,NumInputs,NumOutputs,VarLists,AlgDict,Program1,Program2B) :-PredicatesA=AlgDict,%% remove duplicate predicates%%remvdup(PredicatesA0,[],PredicatesA),split3(PredicatesA,[],Rules2),split2(PredicatesA,[],Predicates),%%writeln([Rules2,Predicates]),append(Rules1,Rules2,Rules3),%%retractall(a(_)),retractall(debug(_)),assertz(debug(Debug)),retractall(totalvars(_)),   assertz(totalvars(TotalVars)),retractall(maxlength(_)),   assertz(maxlength(MaxLength)),retractall(lastrule(_)),   assertz(lastrule([])),retractall(furthest_rule(_)),   assertz(furthest_rule([0,[]])),%%retractall(newrulenumber(_)),%%assertz(newrulenumber(0)),retractall(numInputs(_)),   assertz(numInputs(NumInputs)),retractall(numOutputs(_)),   assertz(numOutputs(NumOutputs)),/**catch(call_with_time_limit(10, **/caw01(VarLists,_,Predicates,PredicateName,Rules3,MaxLength,MaxPredicates,0,_,Program1,Program2B,_)%%writeln1(Program2B)/**),      time_limit_exceeded,      fail)      **/      .%%,not(length(Program2B,1)).
caw1(_,_,_,0,_,_,_,_,_,_,_,_,Ps,Ps) :- !.
caw1(_,_,_,0,_,_,_,_,_,_,_,_,Ps,Ps) :- !.caw1(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program2,Programs2,Ps1) :-MaxLength2 is MaxLength - 1,addrules0(InputVars2,OutputVars,OutputVars,[],Program3),%%writeln([addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3)]),%%optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4), %% IV2->3%%writeln([optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4)]),append(Program1,Program3,Program5),append(InputVars1,OutputVars,Vars2),Program2=[        [PredicateName,Vars2,":-",                Program5        ]        ],debug(Debug),        %%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),interpret(Debug,Query,Program2,OutputVarList2),        %%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),append(Programs2,[[Query,Program2,OutputVarList2]],Programs3),caw1a(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program2,Programs3,Ps1),!.
caw1(_,_,_,0,_,_,_,_,_,_,_,_,Ps,Ps) :- !.caw1(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program2,Programs2,Ps1) :-MaxLength2 is MaxLength - 1,addrules0(InputVars2,OutputVars,OutputVars,[],Program3),%%writeln([addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3)]),%%optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4), %% IV2->3%%writeln([optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4)]),append(Program1,Program3,Program5),append(InputVars1,OutputVars,Vars2),Program2=[        [PredicateName,Vars2,":-",                Program5        ]        ],debug(Debug),        %%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),interpret(Debug,Query,Program2,OutputVarList2),        %%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),append(Programs2,[[Query,Program2,OutputVarList2]],Ps1).%% ,Programs3->Ps1%%caw1a(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program2,Programs3,Ps1),!.
caw1a(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4,Ps1,Ps2) :-%%writeln([caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,OutputVarList,OutputVars,Program1,Program4)]),%%MaxLength2 is MaxLength - 1,%%writeln(["ml",MaxLength2]),reverse(InputVars2,InputVars5),random_member([RuleName,NumInputs,NumOutputs],Rules),%%writeln([member([RuleName,NumInputs,NumOutputs],Rules)]),%%writeln([rule(RuleName,NumInputs,NumOutputs,VarList,VarList2,Rule)]),rule(RuleName,NumInputs,NumOutputs,InputVars5,InputVars4,VarList,VarList2,Rule),%%writeln([inputVars1,InputVars1]),%%writeln([rule(RuleName,NumInputs,NumOutputs,InputVars5,InputVars4,VarList,VarList2,Rule)]),append(Program1,[Rule],Program3),%%writeln([inputVars3,InputVars3]),%%InputVars2=InputVars3,%%writeln([program4,Program4]),%%caw1a(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4,Ps,Ps) :-%%writeln([here,caw1a(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4,Ps,Ps)])caw(Query,PredicateName,Rules,MaxLength,VarList2,InputVars1,InputVars4,InputVars3,OutputVarList,OutputVars,Program3,Program4,Ps1,Ps2),!.
caw3(RuleName0,Algorithms,Algorithms2,NumInputs0,NumOutputs0,New_rule_number,New_rule_number1,Rules,PredicateName,Program1,VarList,VarList2,InputVars2,InputVars4,OutputVars,Rule,_NumInputs1,_NumOutputs1,VarLists02,VarLists02,_MaxPredicates,Rules2) :-%% rules_existingnot(RuleName0=predicatename_new_branch),not(RuleName0=other_new_branch),not(RuleName0=[rules_new_branch,_]),not(RuleName0=predicatename_existing),%%trace,find_rule_name(RuleName0,RuleName2),Algorithms2=Algorithms,%%RuleName=RuleName0,NumInputs=NumInputs0,NumOutputs=NumOutputs0,New_rule_number1 = New_rule_number,Rules2=Rules,rulename_if_limit(RuleName2,PredicateName,RuleName),rule(Program1,RuleName,NumInputs,NumOutputs,InputVars2,InputVars4,VarList,VarList2,OutputVars,Rule).
caw4a(RuleName0,New_rule_number,Rules,PredicateName,NumInputs0,NumOutputs0,_NumInputs1,_NumOutputs1,Rules2,New_rule_number1,RuleName) :-RuleName0=predicatename_existing,%%trace,find_rule_name(RuleName0,RuleName2),%%Algorithms2=Algorithms,%%RuleName=RuleName0, *** not this%%NumInputs1=NumInputs0,NumOutputs1=NumOutputs0,%% n i,o epsilon to 1New_rule_number1 = New_rule_number,%%Rules2=Rules,rulename_if_limit(RuleName2,PredicateName,RuleName),append(Rules,[[RuleName,NumInputs0,NumOutputs0]],Rules2).
caw4a(RuleName0,New_rule_number,Rules,PredicateName,NumInputs0,NumOutputs0,_NumInputs1,_NumOutputs1,Rules2,New_rule_number1,RuleName) :-RuleName0=predicatename_new_branch, %% New branch with same name as current predicateRuleName=[n,PredicateName],New_rule_number1 is New_rule_number+1,append(Rules,[[RuleName,NumInputs0,NumOutputs0]],Rules2).
caw4a(RuleName0,New_rule_number,Rules,_PredicateName,NumInputs0,NumOutputs0,_NumInputs1,_NumOutputs1,Rules2,New_rule_number1,RuleName) :-RuleName0=[rules_new_branch,RuleName], %% New branch with same name as current predicate%%trace,%%RuleName=[n,RuleName1],New_rule_number1 is New_rule_number+1,append(Rules,[[RuleName,NumInputs0,NumOutputs0]],Rules2).
caw4a(RuleName0,New_rule_number,Rules,_PredicateName,NumInputs0,NumOutputs0,_NumInputs1,_NumOutputs1,Rules2,New_rule_number1,RuleName) :-RuleName0=[rules_new_branch,RuleName], %% New branch with same name as current predicate%%trace,%%RuleName=[n,RuleName1],New_rule_number1 is New_rule_number+1,append(Rules,[[RuleName,NumInputs0,NumOutputs0]],Rules2).caw4a(RuleName0,New_rule_number,Rules,PredicateName,NumInputs0,NumOutputs0,_NumInputs1,_NumOutputs1,Rules2,New_rule_number1,RuleName) :-RuleName0=predicatename_existing,%%trace,find_rule_name(RuleName0,RuleName2),%%Algorithms2=Algorithms,%%RuleName=RuleName0, *** not this%%NumInputs1=NumInputs0,NumOutputs1=NumOutputs0,%% n i,o epsilon to 1New_rule_number1 = New_rule_number,%%Rules2=Rules,rulename_if_limit(RuleName2,PredicateName,RuleName),append(Rules,[[RuleName,NumInputs0,NumOutputs0]],Rules2).
cawptest(Debug,NTotal,Score) :- cawptest(Debug,0,NTotal,0,Score),!.
change([B1,"findall1(A,findall1(A,member(A,B),C)",B]) :-length(B1,L),numbers(L,1,[],N),fa1(N,B1,[],B).
changegrid2(Prevstate,_State,Grid1,Grid2,X,Y,C2,C2,N,Stroke1,_States) :-%%notrace,member11(C2,N,false,false),(Prevstate=[1,-]->(Stroke2 is Stroke1+1,line1(X,Y,X,Y,Grid1,Grid2,Stroke2));(Grid2=Grid1)),%%trace,!.
characterise(A1,_,A2) :- string_strings(A1,A2),!.
characterise(A1,compound,A2) :- term_to_atom(A1,A3),string_strings(A3,A2),!.
characterise1(A,A) :-!.
check(State1,M1,N2,X1,Y1,X2,Y2,C2,C6,Grid1,Grid3,Stroke1,States) :-%%writeln([a,state1,m1,n2,x1,y1,c2,y2,c2,c6,grid1,grid3,stroke1,states,%%State1,M1,N2,X1,Y1,X2,Y2,C2,C6,Grid1,Grid3,Stroke1,States]),State1=[_,s],M1=[N2|Ms1],Ms1=[s|Ms], %% has stopped, don't need to connect line from here %%get(States,State1,Line,States2),check2(Line,X1,Y1,X2,Y2,C2,M1,Ms,C5,Grid1,Grid2,Stroke1,Stroke2,true),N3 is N2+1,%%writeln([a,state,State1,index,N3,stroke1,Stroke1]),%%writeln([gotostates(states2,States2,grid2,Grid2,grid3,Grid3,x2,X2,y2,Y2,c5,C5,c6,C6,n3,N3,stroke1,Stroke1,states,States)]),%%writeln([gotostates(States2,Grid2,Grid3,X2,Y2,C5,C6,N3,Stroke1,States)]),gotostates(State1,States2,Grid2,Grid3,X2,Y2,C5,C6,N3,Stroke2,States).
check(X,Y,Direction,Directions1,Directions2,Map) :-member([X,Y,Cell],Map),(Cell=[*]->Directions2=Directions1;append(Directions1,[Direction],Directions2)),!.
check(Z,X,Y,Direction,Directions1,Directions2,Map) :-member([Z,X,Y,Cell],Map),(Cell=[*]->Directions2=Directions1;append(Directions1,[Direction],Directions2)),!.
check2(true,X,Y,X,Y,C,_M1,_Ms,C,Grid,Grid,Stroke,Stroke,_S) :- !.check2(true,X1,Y1,X2,Y2,C2,M1,Ms,C4,Grid1,Grid3,Stroke1,Stroke2,_S) :-update(C2,X2,Y2,M1,Ms,C4),%%%%writeln([a,update(C2,X2,Y2,M1,Ms,C4)]),%%%%notrace,Stroke2 is Stroke1+1,line1(X1,Y1,X2,Y2,Grid1,Grid3,Stroke2).
check_asc2mid :-directory_files("./",F),delete_invisibles_etc(F,G),%writeln1(G),(member("asc2mid",G)->true;(writeln1("Error: asc2mid not found."),abort)).delete_invisibles_etc(F,G) :-findall(J,(member(H,F),atom_string(H,J),not(J="."),not(J=".."),not(string_concat(".",_,J))),G).
check_repositories_paths :- repositories_paths(Paths), (not(Paths=[_])-> (writeln2("Only one repository path can be processed at a time."),abort); true),!.
check_same2(A,[],L1,L2,_Start,TN,TN) :- %trace, %writeln(['*a',A]), get_lang_word("t",T),  (%true% not(A=[T,_,_,_]) -> append(L1,A,L2); append(L1,[A],L2)),!.
check_similar_sentences(Ctt_input0,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang,Translation3,Ctt_orig1_orig2_1,Ctt_orig_tran_1) :-concat_list(["\n","Please enter a sentence with the same meaning as \"",Ctt_input0,"\", which can be more easily translated:"],Note1),writeln(Note1),read_string(user_input,"\n\r","\n\r",_,Ctt_input1b),%trace,back_translate2(Ctt_input0,Ctt_input1b,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang,Translation3,_Ctt_orig1_orig2_2,Ctt_orig_tran_2),%Ctt_orig1_orig2_2=Ctt_orig1_orig2_1,Ctt_orig1_orig2_1=[[From_lang,To_lang,Ctt_input0,Ctt_input1b]],Ctt_orig_tran_2=Ctt_orig_tran_1,%append_if_needed(Ctt_orig1_orig2_2,[[From_lang,To_lang,Ctt_input0,%*** not earlier % here too%Ctt_input1b]],Ctt_orig1_orig2_1),%append_if_needed(Ctt_orig_tran_2,[[From_lang,To_lang,Ctt_input1b, % here too%Translation3]],Ctt_orig_tran_1),!.
check_strings2(Length_string,Length_string,_String1,_String2,_Db,List2,List2) :- !.
check_strings_container1(Length_string1,String1,String2,Db,List2,List2b) :-check_strings1(Length_string1,String1,String2,Db,List2,List2b),not(var(List2b)).
check_strings_container1(Length_string1,String1,String2,Db,List2,List2b) :-check_strings1(Length_string1,String1,String2,Db,List2,List2b),not(var(List2b)).%%check_strings_container2(Length_string1,Length_string3,List1,String2,Db,List2,List2b) :-%%check_strings2(Length_string1,Length_string3,List1,String2,Db,List2,List2b),not(var(List2b)).
checkarguments(Variable1a,Variable2a,Vars1,Vars2,_,FirstArgs2) :-%writeln1(a1checkarguments(Variable1a,Variable2a,Vars1,Vars2,_,FirstArgs2)),%trace,%(a1checkarguments(Variable1a,Variable2a,Vars1,Vars2,_,FirstArgs2)=a1checkarguments([[v,a],[[v,b],[v,c]]],[[[v,d],[v,e]],[v,f]],[],_346892,_346906,_346894)->trace;true),%(not(Variable1a=[[v,a],[v,d]])->trace;true),%writeln([Variable1a,Variable2a]),%(Variable2a=[[[v,a],"|",_]|_]->trace;true),simplify(Variable1a,Variable1),simplify(Variable2a,Variable2),(equals4(on)->checkarguments1(Variable1,Variable2,Vars1,Vars2,[],FirstArgs2);checkarguments2(Variable1,Variable2,Vars1,Vars2,[],FirstArgs2)),% fail if two bs in a,b c,b in first args%trace,/*length(FirstArgs2,L),findall(FA3,(member([_,FA3],FirstArgs2),not(expression_not_var(FA3))),FA4),sort(FA4,FA5),findall(FA6,(member([_,FA6],FirstArgs2),expression_not_var(FA6)),FA7),append(FA5,FA7,FA8),length(FA8,L),*/%writeln1(a2checkarguments(Variable1a,Variable2a,Vars1,Vars2,_,FirstArgs2)),!.
checkarguments1(Variable1,Variable2,Vars1,Vars2,_,FirstArgs2) :-%trace,%writeln1(checkarguments1(Variable1,Variable2,Vars1,Vars2,_,FirstArgs2)),occurs_check(Variable1,Variable2),%notrace,%trace,replace_vars(Variable1,[],Variable1a,[],First_vars1),%writeln1(replace_vars(Variable1,[],Variable1a,[],First_vars1)),replace_vars(Variable2,[],Variable2a,[],First_vars2),%writeln1(replace_vars(Variable2,[],Variable2a,[],First_vars2)),append(First_vars1,First_vars2,First_vars3),%match4_21(Variable2a,Variable1a,Vars1,Vars3),match4_new_22(Variable2a,Variable1a,Vars1,Vars3%,standard), %writeln1(match4_21(Variable2a,Variable1a,Vars1,Vars3)),%match4_21(Arguments2,Arguments1,Vars1,Vars2),replace_first_vars1(Vars3,First_vars2,[],Vars2a),%writeln1(replace_first_vars1(Vars3,First_vars2,[],Vars2a)),replace_vars011(Vars2a,_Variable1a,[],Vars2b), % Vars2b->Vars2%writeln1(replace_vars011(Vars2a,_Variable1a,[],Vars2b)),equals4_first_args(Variable1a,Variable2a,FirstArgs3),%writeln1(equals4_first_args(Variable1a,Variable2a,FirstArgs3)),replace_first_vars1(Vars2b,First_vars1,[],Vars2),%writeln1(replace_first_vars1(Vars2b,First_vars1,[],Vars2)),%equals4_first_args(Vars2b,Vars2,FirstArgs3),replace_first_vars2(FirstArgs3,First_vars3,[],FirstArgs2),%writeln1(replace_first_vars2(FirstArgs3,First_vars3,[],FirstArgs2)),!.
checkarguments1([],[],Vars,Vars,FirstArgs,FirstArgs). checkarguments1(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%%%writeln(1),Arguments1=[Value|Arguments3], %% Value may be a number, string, list or treeexpressionnotatom(Value),Arguments2=[Variable2|Arguments4],not(var(Variable2)),isvar(Variable2),putvalue(Variable2,Value,Vars1,Vars3),checkarguments1(Arguments3,Arguments4,Vars3,Vars2,FirstArgs1,FirstArgs2).
checkarguments2(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%A%%writeln1(2),        Arguments1=[Variable|Arguments3], %% Value may be a number, string, list or tree        not(var(Variable)),isvar(Variable),        Arguments2=[Value|Arguments4],        expressionnotatom3(Value),        putvalue(Variable,Value,Vars1,Vars3),append(FirstArgs1,[[Variable,Value]],FirstArgs3),        checkarguments2(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2),!.
checktypes1(Vars1,TypeStatements0,TypeStatements1,TypeStatements4) :- findall(-,member("|",Vars1),A),length(A,L),not(L>=2),checktypes10(Vars1,TypeStatements0,TypeStatements1,TypeStatements4).checktypes10([],[],_,_) :- !.
checktypes1([],[],_,_) :- !.
checktypes2(Vars,TypeStatements1,TypeStatements2,TypeStatements4) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),get_lang_word("brackets",Dbw_brackets),get_lang_word("number",Dbw_number),get_lang_word("predicatename",Dbw_predicatename),get_lang_word("string",Dbw_string),get_lang_word("any",Dbw_any),TypeStatements1=[T,Type],(not(Type=Dbw_list),not(Type=Dbw_brackets),not(Type=Dbw_number),not(Type=Dbw_predicatename),not(Type=Dbw_string),not(Type=Dbw_any)),(types(on)->debug_call(Skip,[[T,Type],Vars]);true),((%%not(variable_name(Vars)),member([[T,Type]|[TypeStatements3]],TypeStatements4),(checktypes1(Vars,TypeStatements3,TypeStatements2,TypeStatements4)->true;checktypes1([Vars],TypeStatements3,TypeStatements2,TypeStatements4)))->(types(on)->debug_exit(Skip,[[T,Type],Vars]);true);     (types(on)->debug_fail(Skip,[[T,Type],Vars]);true)).
checktypes2(Vars,TypeStatements1,TypeStatements2,TypeStatements4) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),get_lang_word("brackets",Dbw_brackets),get_lang_word("number",Dbw_number),get_lang_word("predicatename",Dbw_predicatename),get_lang_word("string",Dbw_string),get_lang_word("any",Dbw_any),TypeStatements1=[T,Type],(not(Type=Dbw_list),not(Type=Dbw_brackets),not(Type=Dbw_number),not(Type=Dbw_predicatename),not(Type=Dbw_string),not(Type=Dbw_any)),(types(on)->debug_call(Skip,[[T,Type],Vars]);true),((%%not(variable_name(Vars)),member([[T,Type]|[TypeStatements3]],TypeStatements4),(checktypes10(Vars,TypeStatements3,TypeStatements2,TypeStatements4)->true;checktypes10([Vars],TypeStatements3,TypeStatements2,TypeStatements4)))->(types(on)->debug_exit(Skip,[[T,Type],Vars]);true);     (types(on)->debug_fail(Skip,[[T,Type],Vars]);true))./**checktypes2(Vars,TypeStatements1,TypeStatements2,TypeStatements4) :-TypeStatements1=[t,Type],member([[t,Type]|[TypeStatements3]],TypeStatements4),checktypes1([Vars],TypeStatements3,TypeStatements2,TypeStatements4).**/checktypes3([],_,_TypeStatements2,_) :- !.
checktypes2(Vars,TypeStatements1,_TypeStatements2,_) :-get_lang_word("t",T),get_lang_word("any",Dbw_any),TypeStatements1=[T,Dbw_any],(types(on)->debug_call(Skip,[[T,Dbw_any],Vars]);true),((true)->(types(on)->debug_exit(Skip,[[T,Dbw_any],Vars]);true);     (types(on)->debug_fail(Skip,[[T,Dbw_any],Vars]);true)).
checktypes2(Vars,TypeStatements1,_TypeStatements2,_) :-get_lang_word("t",T),get_lang_word("string",Dbw_string),TypeStatements1=[T,Dbw_string],(types(on)->debug_call(Skip,[[T,Dbw_string],Vars]);true),((string(Vars))->(types(on)->debug_exit(Skip,[[T,Dbw_string],Vars]);true);     (types(on)->debug_fail(Skip,[[T,Dbw_string],Vars]);true)).
chemical_cascade_fire :-fire_lab(Map),get_map_dimensions(Map), traverse(1,1,1,[],_,[],_,Map,_),!.traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2) :-member([Z,X,Y,Cell],Map1),append(Explored1,[[Z,X,Y]],Explored3a),sort(Explored3a,Explored3),location(Z,X,Y,Location),writeln(["At",Location]),%%trace,%% can take, drop objects, recorded in maze%%(Cell=[]->Inventory4a=Inventory1;%%(Cell=Items,append(Inventory1,[Item],Inventory3),%%apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),%%writeln(Inventory4a),%% Find, accept only available directions(member("fcre",Inventory1)->(writeln("Game Over"),true);true),%%append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,check(Z,Xm1,Y,"w",[],Directions1,Map1),check(Z,X,Ym1,"s",Directions1,Directions2,Map1),check(Z,Xp1,Y,"e",Directions2,Directions3,Map1),check(Z,X,Yp1,"n",Directions3,Directions4,Map1),check(Zm1,X,Y,"d",Directions4,Directions5,Map1),check(Zp1,X,Y,"u",Directions5,Directions6,Map1),writeln(["Go",Directions6,"or take",Cell,"or drop",Inventory1,"map, or apply an object to an object"]),read_string(user_input, "\n", "\r", _End,Input1),downcase_atom(Input1,Input1a),atom_string(Input1a,Input1b),%%trace,split_string(Input1b, ", ", ", ", Input2),(((Input2=["go","n"]->true;Input2=["n"]),(member("n",Directions6)->traverse(Z,X,Yp1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go n"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["map"]->true;Input2=["m"]),((%trace,map_dimensions([X2,Y2,Z2]),print_map(Map1,X2,Y2,Z2,X,Y,Z))->true;;(writeln(["You can't view the map."]))),traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2))->true;((Input2=["go","e"]->true;Input2=["e"]),(member("e",Directions6)->traverse(Z,Xp1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go e"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","s"]->true;Input2=["s"]),(member("s",Directions6)->traverse(Z,X,Ym1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go s"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","w"]->true;Input2=["w"]),(member("w",Directions6)->traverse(Z,Xm1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go w"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","u"]->true;Input2=["u"]),(member("u",Directions6)->traverse(Zp1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go u"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","d"]->true;Input2=["d"]),(member("d",Directions6)->traverse(Zm1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go d"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["take",Item_to_take],((atom_string(Item_to_take_a,Item_to_take),(member(Item_to_take_a,Cell)->delete(Cell,Item_to_take_a,Cell2);(member(Item_to_take,Cell),delete(Cell,Item_to_take,Cell2))),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4),append(Inventory1,[Item_to_take],Inventory3))->(writeln(["You have taken",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't take",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["drop",Item_to_drop],((%%atom_string(Item_to_drop_a,Item_to_drop),member(Item_to_drop,Inventory1),delete(Inventory1,Item_to_drop,Inventory3),append(Cell,[Item_to_drop],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have dropped",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't drop",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["apply",First_item,"to",Second_item],((member(First_item,Inventory1),member(Second_item,Inventory1),atom_string(First_item_a,First_item),atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),append(Cell,[Third_item],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have applied",First_item,"to",Second_item,"producing",Third_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't apply",First_item,"to",Second_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(writeln(["I don't understand."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))).
children(Person,Partner,Children1,Children2) :-writeln(["Do",Person,"and",Partner,"have any more children? (y/n)"]), read_string(user_input,"\n","\r",_,Children10),(Children10="n"->Children1=Children2; (writeln(["Who is the next oldest child of",Person,"and",Partner,"?"]), read_string(user_input,"\n","\r",_,Child1), partner_and_children(Child1,Children4), append(Children1,[[Child1,Children4]],Children3), children(Person,Partner,Children3,Children2))),!.
choice_points([[1,":-","!",3],[1],[3]],1,[],Flow).
choice_points([[1,":-","fail",3],[1],[3]],1,[],Flow).
choose(List0,Item) :-random_member(Item10,List0),string_codes(Item10,List),split_string(List,".\n",".\n",List2),random_member(Item1,List2),string_concat(E,D,Item1),string_length(E,1),downcase_atom(E,E1),atom_string(E1,E2),string_concat(E2,D,Item2),string_concat(Item2,""%%".",Item).
choose(N2,B,B1,B2,C,Item) :-%%trace,(choose2(N2,B,B1,B2,C,Item)->true;(Item="* All quotes exhausted. (*)"),N2=0,B="()",B1="()",B2=0,C=""),%%notrace,!.
choose(N2,B,B1,B2,C,Item) :-%%trace,(choose2(N2,B,B1,B2,C,Item)->true;(Item="* All quotes exhausted. (*)"),N2=0,B="()",B1="()",B2=0,C=""),%%notrace,!.choose2(N2,B,B1,B2,List0,List0) :-%%trace,string00_z(String00),choose_sentence_range(String00,N1,B,B1,B2,List0),%%chosen_quotes(Chosen_quotes1),%%trace,%%length(List0,L),%%numbers(L,1,[],N),%%random_%%member(N1,N),%%%%random_%%mind_read([N1,Item10],List0),%%random_%%mind_read(Item1,Item10),N2 is N1+B2-1,%%get_item_n(List0,N1,Item10),%%**string_codes(Item10,List),%%notrace,%%**split_string(List,".\n",".\n",List2),%%length(List2,L),%%numbers(L,1,[],N),%%random_%%member(N1,N),%%N2 is N1+B2-1,%%random_%%**member(Item1,List2),%%get_item_n(List2,N1,Item1),/**string_concat(E,D,Item1),string_length(E,1),downcase_atom(E,E1),atom_string(E1,E2),string_concat(E2,D,Item2),string_length(E2,1),string_concat(Item2,""%%".",Item),**/delete(String00,[B,B1,B2,N1,List0],String00_a),%%**delete(String00,[B,B1,B2|_],String00_a),%%**delete(List0,[N1,Item10],List6),%%findall([Item3,". "],(member(Item3,List2)),List3),%%maplist(append,[List3],[List4]),%%concat_list(List4,_List5),%%append(List6,[]%%List5%%,List7),%%**(List6=[]->String00_b=String00_a;%%**(%%trace,%%**maplist(append,[[[B,B1,B2],List6]],[String00_c]),%%**append(String00_a,[String00_c],String00_b)%%,notrace%%**)),retractall(string00_z(_)),assertz(string00_z(String00_a))%%trace,%%writeln1(String00_b),notrace%%,not(member(Item,Chosen_quotes1)),%%append(Chosen_quotes1,[Item],Chosen_quotes2),%%retractall(chosen_quotes(_)),%%assertz(chosen_quotes(Chosen_quotes2)).
choose_sentence_range(String00,N2,B,B1,B2,C) :-length(String00,L),numbers(L,1,[],N),%%random_member(N1,N),get_item_n(String00,N1,A),A=[B,B1,B2,N2,C].
choose_sentence_range(String00,N2,B,B1,B2,C) :-length(String00,L),numbers(L,1,[],N),mind_read(N1,N),get_item_n(String00,N1,A),A=[B,B1,B2,N2,C].
choose_sentence_range(String00,N2,B,B1,B2,C) :-length(String00,L),numbers(L,1,[],N),random_member(N1,N),get_item_n(String00,N1,A),A=[B,B1,B2|C],N2 is N1+B2-1.
choose_sentence_range(String00,N2,B,B1,B2,C) :-%trace,%length(String00,L),%numbers(L,1,[],N),%trace,%writeln1(mind_read(N1,N)),%findall(D1,(member(D2,String00),term_to_atom(D2,D3),string_atom(D1,D3)),D4),%trace,mind_read(A%N1,%%["[\"ref1\",\"author 2003\",1,1,\"M1\"]"]),%String00),writeln(here2),%% changed from mind_read to random_member%number_string(N1,N11),%term_to_atom(A,N11),%get_item_n(String00,N1,A),A=[B,B1,B2,N2,C].
choose_starting_point(Points1,Point,Points2) :-random_member(Point,Points1),delete(Points1,Point,Points2).
choose_texts(K1,H,J1):-%member(H,G),not(string_concat("dot",_,H)),string_concat(K1,H,H1),open_file_s(H1,[A,B,_,File_term]),flatten([A,"\n",B,"\n",File_term,"\n"],J1).
choose_texts(K1,H,J1):-%member(H,G),not(string_concat("dot",_,H)),string_concat(K1,H,H1),open_file_s(H1,[A,B,_,File_term]),flatten([A,"\n",B,"\n",File_term,"\n"],J1).big_connections_with_bag3_and_mr :- /*(not(spec(_))-> (retractall(spec(_)), assertz(spec(off))); true),*/(exists_directory('Books')->true;make_directory('Books')),K=["../Lucian-Academy/Books/Fundamentals of Pedagogy and Pedagogy Indicators1/"%"../Lucian-Academy/Books/BOTS/"%/*/*"../Lucian-Academy/Books/COMPUTER SCIENCE/","../Lucian-Academy/Books/Computational English/","../Lucian-Academy/Books/Creating and Helping Pedagogues/","../Lucian-Academy/Books/Delegate workloads, Lecturer, Recordings/",*/%"../Lucian-Academy/Books/ECONOMICS/",/*"../Lucian-Academy/Books/Fundamentals of Meditation and Meditation Indicators/","../Lucian-Academy/Books/Fundamentals of Pedagogy and Pedagogy Indicators/","../Lucian-Academy/Books/IMMORTALITY/","../Lucian-Academy/Books/Lecturer/","../Lucian-Academy/Books/MEDICINE/","../Lucian-Academy/Books/MEDITATION/","../Lucian-Academy/Books/Mind Reading/","../Lucian-Academy/Books/PEDAGOGY/","../Lucian-Academy/Books/POLITICS/","../Lucian-Academy/Books/POPOLOGY/"*/%"../Lucian-Academy/Books/REPLICATION/",%"../Lucian-Academy/Books/SALES/"/*,"../Lucian-Academy/Books/Short Arguments/","../Lucian-Academy/Books/SIMULATION/","../Lucian-Academy/Books/Time Travel/"%*/%"../Lucian-Academy/Books/books2/"],findall(_J,(member(K1,K),directory_files(K1,F),delete_invisibles_etc(F,G),%/*findall(_,(member(H,G),not(string_concat("dot",_,H)),string_concat(K1,H,H1),open_file_s(H1,[A,B,_,File_term]),flatten([A,"\n",B,"\n",File_term,"\n"],J1),foldr(string_concat,J1,"",J2),split_string(J2,"\n\r.","\n\r.",J3),delete(J3,"",J4),length(J4,Length),Length2 is Length*16,%trace, bag2phil2(Length2,J2,2,Br32),  string_concat("../Lucian-Academy/Books/",K2,K1), string_concat("Books/",K2,K3),(exists_directory(K3)->true;make_directory(K3)),%string_concat(K4,"/",K3),%string_concat(K4,".txt",K5),foldr(string_concat,[K3,H],K5),open_s(K5,write,S),write(S,Br32),close(S),writeln([K5,written])),_J10)%*/%J10=["Hello, I am Lucian Green.  I enjoy programming, writing Philosophy and going for walks.  I also compose songs and do acting.  Programming is on the topic compilers, inductive algorithm finders and philosophy.  I love animals, and secretly wrote songs with about my (human-like) pets.  I also enjoy programming about each of my books, on topics such as meditation.%"],),_),!.
ci :-working_directory1(A,A),retractall(home_dir(_)),assertz(home_dir(A)),retractall(ci_fail(_)),assertz(ci_fail([])),(exists_directory('../../Github_lc')->true;make_directory('../../Github_lc')),repositories_paths(K),omit_paths(Omit),%findall1(Omit1,(member(Omit2,Omit),atom_string(Omit1,Omit2)),Omit3),findall1([K1,G4],(member(K1,K), directory_files(K1,F),delete_invisibles_etc(F,G),%retractall(merges_files(_)),%assertz(merges_files([])),%retractall(merges_preds(_)),%assertz(merges_preds([])),% merge_files contains the file data from the repository.
clarify1(S1,S2,S3):- ask(["What part of",S2,"leads to",S1,"?"],Part1), ask(["What part of",S1,"is lead to by",S2,"?"],Part2), ask(["Complete:",Part1,"...",Part2],C), connect([[S1,S2,done],[S1,Part2,undone],[Part1,S2,undone],[Part2,C,undone],[C,Part1,undone]],S3).
classicalcomposition2(_, _, _, Counter, b, Progression, Progression) :-Counter = 3, !.
classicalcomposition2(_, _, _, Counter, b, Progression, Progression) :-Counter = 4, !.classicalcomposition2(Note, _, Note, _, _, _, _) :- !.
clean_formula(List1,A,B) :-%operators1(Ops1),%operators2(Ops2),Ops2="()",extra_characters(Ch),foldr(string_concat,[Ops2,%Ops2,Ch],Ch2),string_strings(Ch2,Ch2L),is_list(List1),List1=[Op2%,Op3|List2],%number1(N),(member(Op2,Ch2L)->true;number1(Op2)),%member(Op3,Ch2L),append(A,[Op2],A1),clean_formula(List2,A1,B),!.
clean_formula(List1,A,B) :-operators1(Ops1), % +-/*^%operators2(Ops2), % =()Ops2="()",extra_characters(Ch), % %$, :foldr(string_concat,[Ops1,Ops2,%Ops2,Ch],Ch2),string_strings(Ch2,Ch2L),is_list(List1),List1=[Op2|List2],member(Op2,Ch2L),append(A,[Op2],A1),clean_formula(List2,A1,B),!.
clean_formula(List1,A,B) :-operators1(Ops1), % +-/*^%operators2(Ops2), % =()Ops2="()",extra_characters(Ch), % %$, :foldr(string_concat,[Ops1,Ops2,%Ops2,Ch],Ch2),string_strings(Ch2,Ch2L),is_list(List1),List1=[Op2|List2],member(Op2,Ch2L),append(A,[Op2],A1),clean_formula(List2,A1,B),!.clean_formula(List1,A,B) :-operators1(Ops1),%operators2(Ops2),extra_characters(Ch),foldr(string_concat,[Ops1,%Ops2,Ch],Ch2),string_strings(Ch2,Ch2L),is_list(List1),List1=[Op2,N%Op3|List2],member(Op2,Ch2L),number1(N),%member(Op3,Ch2L),append(A,[N,Op2],A1),clean_formula(List2,A1,B),!.
clique(Points,Links) :-findall([Item1,Item2],(member(Item1,Points),member(Item2,Points)),Links).
codes_key([27,91,65],up)    :- !.
codes_to_string_c(C,S) :-string_codes(S,C).
collect_arguments_body2([],N,N):-!.%%,Body3%%collect_arguments_body2([],Body,Body) :- !.
collect_clauses_in_loops1([],A,A) :- !.
collect_clauses_in_loops1(_,[],F,F) :- !.
collect_connected_pred_ids01(Pred_id,Pred_ids1,Pred_ids2,Predicate_number,Globals3) :- ((%member([pred_id_chain,Prev_pred_id,Pred_id],Globals3), Prev_pred_id=Pred_id, not(member(Prev_pred_id,Pred_ids1)), member([[pred_num,Prev_pred_id],Predicate_number],Globals3))-> (%trace, append(Pred_ids1,[Prev_pred_id],Pred_ids3), %findall(Pred_ids4, collect_connected_pred_ids2(Prev_pred_id,Pred_ids3,Pred_ids4,Globals3),Pred_ids5), Pred_ids3=Pred_ids5, collect_connected_pred_ids01(Prev_pred_id,Pred_ids5,Pred_ids2,Predicate_number,Globals3)); Pred_ids1=Pred_ids2).
collect_connected_pred_ids01(Pred_id,Pred_ids1,Pred_ids2,Predicate_number,Globals3) :- ((member([pred_id_chain,Prev_pred_id,Pred_id],Globals3), not(member(Prev_pred_id,Pred_ids1)), member([[pred_num,Prev_pred_id],Predicate_number],Globals3))-> (%trace, append(Pred_ids1,[Prev_pred_id],Pred_ids3), %findall(Pred_ids4, collect_connected_pred_ids2(Prev_pred_id,Pred_ids3,Pred_ids4,Globals3),Pred_ids5), Pred_ids3=Pred_ids5, collect_connected_pred_ids01(Prev_pred_id,Pred_ids5,Pred_ids2,Predicate_number,Globals3)); Pred_ids1=Pred_ids2).
collect_connected_pred_ids1(Pred_id,Pred_ids1,Pred_ids2,Predicate_number,Globals3) :- ((member([pred_id_chain,Prev_pred_id,Pred_id],Globals3), not(member(Prev_pred_id,Pred_ids1)), member([[pred_num,Prev_pred_id],Predicate_number],Globals3))-> (%trace, append(Pred_ids1,[Prev_pred_id],Pred_ids3), %findall(Pred_ids4, collect_connected_pred_ids2(Prev_pred_id,Pred_ids3,Pred_ids4,Globals3),Pred_ids5), Pred_ids3=Pred_ids5, collect_connected_pred_ids1(Prev_pred_id,Pred_ids5,Pred_ids2,Predicate_number,Globals3)); Pred_ids1=Pred_ids2).
collision(AX1,BX1,CX1,AY1,BY1,CY1,AX2,BX2,CX2,AY2,BY2,CY2,T1,T2) :-numbers(T2,T1,[],Ts),findall([X1,Y1,X2,Y2],(member(T,Ts),X1 is AX1*T^2 + BX1*T + CX1,Y1 is AY1*T^2 + BY1*T + CY1,X2 is AX2*T^2 + BX2*T + CX2,Y2 is AY2*T^2 + BY2*T + CY2),Coords),member(Coord,Coords),collision(Coord),!.
collision([X,Y,X,Y]).
colours_to_image :-writeln("Enter pixel colours for image as e.g. \"[[red,yellow],[yellow,red]]\"."),read_string(user_input, "\n", "\r", _, Input),term_to_atom(Grid,Input),length(Grid,Y),Grid=[Row|_],length(Row,X),findall(Pixel_RGB2,(member(Line,Grid),findall([R," ",G," ",B,"\n"],(member(Pixel_colour,Line),colour(Pixel_colour,[R,G,B])),Pixel_RGB2)),Grid2),%trace,%writeln1(Grid31),maplist(append,[Grid2],[Grid32]),maplist(append,[Grid32],[Grid3]),%maplist(append,[[Grid33]],[Grid34]),%maplist(append,[[Grid34]],[Grid3]),%trace,maplist(append,[[["P3","\n",X," ",Y,"\n","255","\n"],Grid3,["\n"]]],[Grid31]),concat_list(Grid31,Grid4),writeln("Enter file name, ending with \".ppm\"."),read_string(user_input, "\n", "\r", _, File),%term_to_atom(Grid4,D85),string_atom(D85,Grid4),(open_s(File,write,Stream2),write(Stream2,D85),close(Stream2)),!.
combo_pass(A,B,Sum,G) :- length(A,L), numbers(L,1,[],Ns),  % Finds the possibility list [[1], [2, 4], [3], [5, 6]] findall(C,(member(N,Ns),get_item_n(A,N,An),get_item_n(B,N,Bn),(An=Bn->C=[An];C=[An,Bn])),D),  % Finds the expanded possibility list [[1, 2, 3, 5], [1, 2, 3, 6], [1, 4, 3, 5], [1, 4, 3, 6]]  findall(H,findall2(D,[],H),J),  % Finds the list that sums to Sum=11 [[1, 2, 3, 5]]  findall(M,(member(M,J),sum(M,Sum)),G) .%(E,(member(F,D),member(E,F)),G). findall2([],A,A) :- !.
combophil_grammar_logic_to_alg1 :-phrase_from_file_s(string(Text1), "../Text-to-Breasonings/file.txt"),phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),splitfurther(BrDict0,BrDict01),sort(BrDict01,BrDict012),retractall(brdict(_)),assertz(brdict(BrDict012)),%%SepandPad=".\n",%%split_string(Text1,SepandPad,SepandPad,Text2a),%%delete(Text2a,"",Text2),%%findall(B2,(member(B1,Text2),string_codes(Text11,Text1),downcase_atom(%%B1Text11,B11),atom_string(B11,B12),SepandPad1=" .\n",split_string(B12,SepandPad1,SepandPad1,A),%%trace,findall(D,(member(C3,A),member([C3,"right"],BrDict012),member(C1,A),not(member([C1,"right"],BrDict012)),concat_list([C3," ",C1],C2),grammar_logic_to_alg(C2,D)),C),%%writeln(C),trace,%%grammar_logic_to_alg(D,B2)),C),length(C,CLength),writeln([CLength,sentences]),C=[[[_,Sentence1,a_alg(List_a),_,bb_alg(List_bb)]|Cs1]|Cs2],%%get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list(["gla_del"],%%[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(["\"",File1,".txt\""],File2),term_to_atom(List_a,List_a2),string_atom(List_a3,List_a2),concat_list(["swipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_a3,"]],[[[n,function],[[v,a]],\":-\",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],\":-\",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],\":-\",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],\":-\",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_a1),writeln1([*,Sentence1,a_alg(List_a)]),writeln(List_a1),concat_list(["\n\nswipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_a3,",[v,b]]],[[[n,function],[[v,a],[v,b]],\":-\",[[[n,tail],[[v,a],[v,b]]]]]],_),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_b1),writeln1([*,Sentence1,b_alg(List_a)]),writeln(List_b1),term_to_atom(List_bb,List_bb2),string_atom(List_bb3,List_bb2),concat_list(["swipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_bb3,"]],[[[n,function],[[v,a]],\":-\",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],\":-\",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],\":-\",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],\":-\",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_bb1),writeln1([*,Sentence1,bb_alg(List_bb)]),writeln(List_bb1),writeln1(Cs1),writeln1(Cs2).
combophil_grammar_logic_to_alg1(P,String000) :-%%(String000) :-phrase_from_file_s(string(Text1), "../Lucian-Academy/luciansphilosophy.txt"),combophil_grammar_logic_to_alg2(String000,Text1).
combophil_grammar_logic_to_alg2(String000,Text1) :-phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),splitfurther(BrDict0,BrDict01),sort(BrDict01,BrDict012),retractall(brdict(_)),assertz(brdict(BrDict012)),%%SepandPad=".\n",%%split_string(Text1,SepandPad,SepandPad,Text2a),%%delete(Text2a,"",Text2),%%findall(B2,(member(B1,Text2),string_codes(Text11,Text1),downcase_atom(%%B1Text11,B11),atom_string(B11,B12),SepandPad1=" .\n",split_string(B12,SepandPad1,SepandPad1,A01),append(["go"],A01,A0),truncate(A0,20,A),findall(D,(member(C3,A),member([C3,"right"],BrDict012),member(C1,A),not(member([C1,"right"],BrDict012)),concat_list([C3," ",C1],C2),grammar_logic_to_alg(C2,D)),C),%%writeln(C),trace,%%grammar_logic_to_alg(D,B2)),C),length(C,CLength),writeln([CLength,sentences]),C=[[[_,Sentence1,a_alg(List_a),_,bb_alg(List_bb)]|Cs1]|Cs2],%%get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list(["gla_del"],%%[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(["\"",File1,".txt\""],File2),term_to_atom(List_a,List_a2),string_atom(List_a3,List_a2),concat_list(["swipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_a3,"]],[[[n,function],[[v,a]],\":-\",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],\":-\",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],\":-\",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],\":-\",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_a1),writeln1([*,Sentence1,a_alg(List_a)]),writeln(List_a1),concat_list(["\n\nswipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_a3,",[v,b]]],[[[n,function],[[v,a],[v,b]],\":-\",[[[n,tail],[[v,a],[v,b]]]]]],_),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_b1),writeln1([*,Sentence1,b_alg(List_a)]),writeln(List_b1),term_to_atom(List_bb,List_bb2),string_atom(List_bb3,List_bb2),concat_list(["swipl -G100g -T20g -L2g\n['../listprolog'].\nleash(-all),visible(+all),protocol(",File2,"),trace,interpret(off,[[n,function],[",List_bb3,"]],[[[n,function],[[v,a]],\":-\",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],\":-\",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],\":-\",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],\":-\",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],\":-\",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n['../Text-to-Breasonings/text_to_breasonings.pl'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,",File2,",u,M),texttobr(N,",File2,",u,M))).\n['../texttobr2qb'].\ntexttobr2(3).\nhalt."],List_bb1),writeln1([*,Sentence1,bb_alg(List_bb)]),writeln(List_bb1),writeln1(Cs1),writeln1(Cs2),term_to_atom([[CLength,sentences],[*,Sentence1,a_alg(List_a)],List_a1,[*,Sentence1,b_alg(List_a)],List_b1,[*,Sentence1,bb_alg(List_bb)],List_bb1,Cs1,Cs2],String0001),atom_string(String0001,String000)%%a(P,String000):-%%CLength=a,Sentence1=a,List_a=a,List_a1=a,List_b1=a,List_bb=a,List_bb1=a,Cs1=a,Cs2=a,.
command_n_sols(10).
comment(fiftyastest).
comments([L|Ls]) --> comments2(L),%%{writeln(L)}, %%***comments(Ls), !. comments([L]) --> comments2(L), %%{writeln(L)},!.
comments([L|Ls]) --> comments2(L),%%{writeln(L)}, %%***comments(Ls), !. comments([L]) --> comments2(L), %%{writeln(L)},!.comments2(_) --> spaces1(_),name1(_).%%[X], {string_codes(X1,[X]), not(X1="\n")}.commentsa([L|Ls]) --> comments3(L),%%{writeln(L)}, %%***commentsa(Ls), !. commentsa([L]) --> comments3(L), %%{writeln(L)},!.
comments2(_) --> spaces1(_),name1(_).%%[X], {string_codes(X1,[X]), not(X1="\n")}.
comments3(_) --> spaces1(_),name1(_).%%[X], [Y], {string_codes(X1,[X]),%%string_codes(Y1,[Y]), not((X1="*",Y1="/"))}.
comments3(_) --> spaces1(_),name1(_).%%[X], [Y], {string_codes(X1,[X]),%%string_codes(Y1,[Y]), not((X1="*",Y1="/"))}.**/lines([L|Ls]) --> line(L),",",newlines1(_),%%{writeln(L)}, %%***lines(Ls), !. lines([L]) --> line(L), %%{writeln(L)},!.
commit(Repository1,Label) :- (string_concat(Repository,"/",Repository1)->true; Repository=Repository1),  working_directory1(A1,A1), repository_root_path(Repository_root_path), (exists_directory_s(Repository_root_path)->true;make_directory(Repository_root_path)), gitl_data_path(Gitl_data_path1), (exists_directory_s(Gitl_data_path1)->true;make_directory(Gitl_data_path1)),  %trace,  foldr(string_concat,[Repository_root_path,Repository,"/"],R1), (exists_directory_s(R1)->true;make_directory(R1)),  foldr(string_concat,[Gitl_data_path1,Repository,"/"],R21), (exists_directory_s(R21)->true;make_directory(R21)),%trace, foldr(string_concat,[Gitl_data_path1,Repository,"/","n.txt"],N_path), (exists_file_s(N_path)-> open_file_s(N_path,N); (N=0,number_string(N,NS),save_file_s(N_path,NS))), N1 is N+1,  (N=0->N0=N1;N0=N), foldr(string_concat,[Gitl_data_path1,Repository,"/",N0,"/"],To_m_1), foldr(string_concat,[Gitl_data_path1,Repository,"/",N1,"/"],To1), %trace, %(N0=0->     ((To=To1, find_files(R1,RTests), (N1=1->(scp1(Repository_root_path,Repository,Gitl_data_path1,N1,R1,N_path), HTML=(-)); (sd1(RTests,R1,To_m_1,Repository_root_path,Repository,Gitl_data_path1,N1,R1,N_path,To,HTML))) ) ->(  %working_directory1(_,A1),  %Gitl_data_path=R2,   foldr(string_concat,[Gitl_data_path1,Repository,"/",N1,"-",Label,".html"],HTMLP), working_directory1(_,A1), (HTML=(-) ->true; save_file_s(HTMLP,HTML)) );(writeln("Not committed. Folders identical."),abort)),!.
common_factors(Length,Common_factors1) :- Length2 is ceiling(Length), numbers(Length2,1,[],Ns), findall(N,(member(N,Ns),0 is mod(Length2,N)),Common_factors1).
comparison(A,B,C) :-(A>=B->C='>=';C='<').
comparisonoperator(>).
compile_list(List, Number_array, String_array) :-retractall(number_index(_)),assertz(number_index(0)),retractall(string_index(_)),assertz(string_index(-1)), compile_list1(0, [List], [], Number_array1, [], String_array1),  % add ends, sort and findall lists, array lengths %trace, %findall(Number_array2,(member(List1,Number_array1),append(List1,[4],Number_array2)),Number_array3),  sort(Number_array1,Number_array4), %trace, findall(List1,(member([_,List1],Number_array4)),Number_array5),   findall(Number_array2,(member(List1,Number_array5),append(List1,[4],Number_array2)),Number_array51),%trace, findall(L,(member(List1,Number_array51),length(List1,L)),L2), sort(L2,L3), (L3=[]->MaxN=0;append(_,[MaxN],L3)), length(Number_array51,Number_array5_length),  append([[Number_array5_length,MaxN]],Number_array51,Number_array),%(String_array1=[]->String_array2=[];) findall(List1,(member([_,List1],String_array1)),String_array2), findall(L,(member(List1,String_array2),string_length(List1,L)),L4), sort(L4,L5), (L5=[]->MaxS=0;append(_,[MaxS],L5)),  length(String_array2,String_array2_length),  append([String_array2_length,MaxS],String_array2,String_array), !.
compile_list([1,[2]],N1,S1),compile_list([[3],4],N2,S2),append_iio(N1,S1,N2,S2,N3,S3),uncompile_list(N3,S3,L),writeln(N3).
compile_list([1,[a,["a"],[v,a]],[n,a]],N,S),uncompile_list(N,S,L).L = [1, [a, ["a"], [v, a]], [n, a]].
compile_list1(Index, List1, Number_array1, Number_array2, String_array1, String_array2) :-compile_list(Index, List1, Number_array1, Number_array2, String_array1, String_array2),!.
complexity_from_findall(L,n^C) :- length(L,C).
compound_image2html(Pixels) :-HTML_header="<html><head></head><body><table border = \"0\" cellpadding = \"0\" cellspacing = \"0\">",findall(["<tr height=\"100\">",Cell,"</tr>"],(member(Row,Pixels),findall([%"<td bgcolor = \"RGB( ",R,", ",G,", ",B," )\">""<td width=\"100\" bgcolor=\"",Pixel_colour,"\">",%"&nbsp;","</td>"],(member(Pixel_colour,Row)%colour(Pixel_colour,[R,G,B])),),Cell)),Body),HTML_footer="</table></body></html>",flatten([HTML_header,Body,HTML_footer],HTML1),foldr(string_concat,HTML1,"",HTML),save_file_s("file.html",HTML).
compress_vars(V1,V2,VG3) :- retractall(garbage_token_number(_)), assertz(garbage_token_number(1)), get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v, findall([Size,V4],(member(V4,V1),V4=[[Dbw_v,_Name],Value], size_of_value(Value,Size) %(Size>=10 -> %();V3=[V4,[]]) ),V5), sort(V5,V11),reverse(V11,V12),  findall(V122,member([_,V122],V12),V123),findall([G,V13],(member([V14,Val],V123),compress_vars1(V14,Val,[],V13,[],G)),VG1), findall(V124,member([V124,_],VG1),VG), findall(V125,member([_,V125],VG1),VG2), findall([Size,G],(member(G,VG),%V4=[[Dbw_v,Name],Value], size_of_value(G,Size) %(Size>=10 -> %();V3=[V4,[]]) ),V51), sort(V51,V121),%reverse(V111,V121), findall(V21,member([_,V21],V121),V22),  foldr(append,V22,V23), %trace, simplify_by_replacing(V23,VG2,[],V24,%[], VG3),  find_tails(V24,[],V2), !.
concat_list(A,List,B) :-concat_list1(A,List,B).
concat_list(A,[],A) :-!.concat_list(A,List,B) :-List=[Item|Items],concat_list2(A,[Item],C),concat_list(C,Items,B).
concat_list(A,[],A):-!.
concat_list(A,[],A):-!.concat_list(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list(C,Items,B).atom_concat_list([],""):-!.
concat_list0(A,[],A):-!.
concat_list1(A,[],A):-!.concat_list1(A,List,B) :-List=[Item|Items],%string_codes(Item,Item1),string_concat(A,Item,C),concat_list1(C,Items,B).
concat_list1(D,F) :-maplist(append,[D],[E]),concat_list(E,F).
concat_list2A(A,[],A):-!.
concat_list2A(A,[],A):-!.concat_list2A(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list2A(C,Items,B).
concat_list2A(A1,B):-A1=[A|List],concat_list2A(A,List,B),!.
conjunction(true,true,true) :- !.
connect(S,S) :- not(member([_,_,undone],S)),writeln(S),abort,!.
connect1(S1,S9) :- member([S4,S5,undone],S1), delete(S1,[S4,S5,undone],S6), append(S6,[[S4,S5,done]],S7),  repeat, ask(["Is there a connection between",S4,"and",S5,"? (y/n)"],YN), %trace, (YN="y"->true;YN="n"), (YN="n"->S7=S9; (ask(["What is the connection between",S4,"and",S5,"?"],C), append(S7,[[S4,C,undone]],S8), append(S8,[[C,S5,undone]],S9))).
connection('The First Technique','The Computational English calculator',% connection:'The computed use is good').
connector_coords(N,N1) :-N1 is (N*2)-1.
connector_coords(N,N1) :-N1 is (N*2)-1.connector_points(_XN1,[],Grid,Grid) :- !.
connector_points1([],_YN2,Grid,Grid) :- !.
connector_points1(_XN1,[],_ZN1,Grid,Grid) :- !.
connector_points2([],_YN2,_ZN2,Grid,Grid) :- !.
consonants("BCDFGHJKLMNPQRSTVWXYZ").
contains_loop(Ordered_pred_nums1,Ordered_pred_nums2,P1,P2) :- (Ordered_pred_nums2=[loop,Ordered_pred_nums1]->P1=P2; (Ordered_pred_nums2=[Ordered_pred_nums3|Ordered_pred_nums4], member(Ordered_pred_nums41,Ordered_pred_nums4), append(P1,[Ordered_pred_nums3],P3), contains_loop(Ordered_pred_nums1,Ordered_pred_nums41,P3,P2))).
contains_loop_dfs(Curr1,Curr,Items_all,Items2_all1,Items6_all1,Not_on_line1,Not_on_line2) :- member([Curr,Items],Items_all), (member(Curr,Items2_all1)-> (Items2_all1=Items7_all1, Not_on_line1=Not_on_line3); %findall1(Items7_all1, contains_loop_dfs2(Curr1,Items,Items_all%,Items2,Items6 ,Items2_all1,Items7_all1,Not_on_line1,Not_on_line3)), %),Items71_all1), %trace, %/*  %trace, %writeln(lead_to_empty_list(Items,Items_all,[],_)), (true%,lead_to_empty_list(Items,Items_all,[],_) ->( %writeln(lead_to_empty_list(Items,Items_all,[],_)), %trace, append([Curr|Items],Not_on_line3,Not_on_line2) %Items7_all1=Items6_all1 ); Not_on_line3=Not_on_line2), (member(Curr,Items7_all1)-> Items7_all1=Items6_all1; append(Items7_all1,[Curr],Items6_all1))%); %Items2_all1=Items6_all1), %*/ %flatten(Items6_all1,Items61_all1), %append(Items6_all1,[Curr],Items3_all1), %append(Items6,[Curr],Items3), .
contains_loop_dfs1(Curr1,Curr,Items_all,Items2_all1,Items61_all1,Not_on_line1,Not_on_line21) :-contains_loop_dfs(Curr1,Curr,Items_all,Items2_all1,Items6_all1,Not_on_line1,Not_on_line2),%not%trace,subtract(Not_on_line2,Items6_all1,Not_on_line21),subtract(Items6_all1,Not_on_line21,Items61_all1),(member(Curr,Items61_all1)%->true;%member(Curr,Items6_all1)),!.
convert_to_grammar_part11([],Grammar,Grammar,EndGrammar,EndGrammar) :- !.
convert_to_grammar_part11([],Grammar1,Grammar1,EndGrammar1,EndGrammar1,Grammar2,Grammar2,EndGrammar2,EndGrammar2) :- !.
convert_to_grammar_part11([],Grammar1,Grammar1,_EndGrammar1,_EndGrammar1,_Grammar2,_Grammar2,_EndGrammar2,_EndGrammar2) :- !.
convert_to_grammar_part2(Body1,FirstVar,SecondVar,SecondVarParent,Body2,Body3) :-Body1=[Item|Rest1],Item=[[n,code]|Rest2],append(Body2,Rest2,Body4),convert_to_grammar_part2(Rest1,FirstVar,SecondVar,SecondVarParent,Body4,Body3),!.
convert_to_grammar_part2(Body1,FirstVar,SecondVar,SecondVarParent,Body2,Body3) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("code",Dbw_code),Body1=[Item|Rest1],Item=[[Dbw_n,Dbw_code]|Rest2],append(Body2,Rest2,Body4),convert_to_grammar_part2(Rest1,FirstVar,SecondVar,SecondVarParent,Body4,Body3),!.
convert_to_grammar_part2(Body1,_FirstVar,_SecondVar,_SecondVarParent,_Body4,_Body3) :-Body1=[Item|_Rest1],writeln(["Error: Item",Item,"badly formed."]),abort,!.
convert_to_grammar_part2(Body1,_FirstVar,_SecondVar,_SecondVarParent,_Body4,_Body3) :-Body1=[Item|_Rest1],writeln1(["Error: Item",Item,"badly formed."]),abort,!.
convert_to_grammar_part31(Body1,FirstVar,SecondVar,SecondVarParent,Body2,Body3) :-Body1=[Item1|Rest1],convert_to_grammar_part311(Item1,FirstVar,SecondVarParent,Body2,Body4),convert_to_grammar_part2(Rest1,FirstVar,SecondVar,SecondVarParent,Body4,Body3), !.
convert_to_grammar_part311([[Dbw_n,RuleName]],FirstVar1,SecondVarParent,Body2,Body3) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVarParent,SecondVarParentName),Item=[[Dbw_n,RuleName],[FirstVarName,SecondVarParentName]],%%append([[n,grammar_part]],[Call],Item),append(Body2,[Item],Body3),!.
convert_to_grammar_part311([[Dbw_n,RuleName]|[Variables1]],FirstVar1,SecondVarParent,Body2,Body3) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,variables(Variables1),to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVarParent,SecondVarParentName),append([FirstVarName,SecondVarParentName],Variables1,Call),append([[Dbw_n,RuleName]],[Call],Item2),append(Body2,[Item2],Body3),!.
convert_to_grammar_part311([[n,RuleName]],FirstVar1,SecondVarParent,Body2,Body3) :-to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVarParent,SecondVarParentName),Call=[[n,RuleName],FirstVarName,SecondVarParentName],append([[n,grammar_part]],[Call],Item),append(Body2,[Item],Body3),!.
convert_to_grammar_part311([[n,RuleName]|[Variables1]],FirstVar1,SecondVarParent,Body2,Body3) :-variables(Variables1),to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVarParent,SecondVarParentName),append([[n,RuleName],FirstVarName,SecondVarParentName],Variables1,Call),append([[n,grammar_part]],[Call],Item2),append(Body2,[Item2],Body3),!.
convert_to_grammar_part311t(Item1,FirstVar1,SecondVarParent,Body2,Body3) :-to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVarParent,SecondVarParentName),Call=[Item1,FirstVarName,SecondVarParentName],append([[n,grammar_part]],[Call],Item2),append(Body2,[Item2],Body3),!.
convert_to_grammar_part311t(Item1,FirstVar1,SecondVarParent,Body2,Body3) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVarParent,SecondVarParentName),Call=[Item1,FirstVarName,SecondVarParentName],append([[Dbw_n,grammar_part]],[Call],Item2),append(Body2,[Item2],Body3),!.
convert_to_grammar_part32(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3) :-Body1=[Item1|Rest1],convert_to_grammar_part321(Item1,Rest1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3),!.
convert_to_grammar_part32(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3) :-Body1=[Item1|Rest1],convert_to_grammar_part321(Item1,Rest1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3),!.convert_to_grammar_part321(Item1,Rest1,FirstVar1,SecondVar1,SecondVarParent,Body2,Body3) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,Item1=[[Dbw_n,RuleName]],to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVar1,SecondVarName),Call=[FirstVarName,SecondVarName],append([[Dbw_n,RuleName]],[Call],Item2),append(Body2,[Item2],Body4),FirstVar2 is SecondVar1,SecondVar2 is SecondVar1+1,convert_to_grammar_part2(Rest1,FirstVar2,SecondVar2,SecondVarParent,Body4,Body3),!.
convert_to_grammar_part321(Item1,Rest1,FirstVar1,SecondVar1,SecondVarParent,Body2,Body3) :-Item1=[[n,RuleName]],to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVar1,SecondVarName),Call=[[n,RuleName],FirstVarName,SecondVarName],append([[n,grammar_part]],[Call],Item2),append(Body2,[Item2],Body4),FirstVar2 is SecondVar1,SecondVar2 is SecondVar1+1,convert_to_grammar_part2(Rest1,FirstVar2,SecondVar2,SecondVarParent,Body4,Body3),!.
convert_to_grammar_part321(Item1,Rest1,FirstVar1,SecondVar1,SecondVarParent,Body2,Body3) :-Item1=[[n,RuleName]|[Variables1]],variables(Variables1),to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVar1,SecondVarName),append([[n,RuleName],FirstVarName,SecondVarName],Variables1,Call),append([[n,grammar_part]],[Call],Item2),append(Body2,[Item2],Body4),FirstVar2 is SecondVar1,SecondVar2 is SecondVar1+1,convert_to_grammar_part2(Rest1,FirstVar2,SecondVar2,SecondVarParent,Body4,Body3),!.
convert_to_grammar_part321(Item1,Rest1,FirstVar1,SecondVar1,SecondVarParent,Body2,Body3) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,Item1=[[Dbw_n,RuleName]],to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVar1,SecondVarName),Call=[FirstVarName,SecondVarName],append([[Dbw_n,RuleName]],[Call],Item2),append(Body2,[Item2],Body4),FirstVar2 is SecondVar1,SecondVar2 is SecondVar1+1,convert_to_grammar_part2(Rest1,FirstVar2,SecondVar2,SecondVarParent,Body4,Body3),!.
convert_to_grammar_part321(Item1,Rest1,FirstVar1,SecondVar1,SecondVarParent,Body2,Body3) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,Item1=[[Dbw_n,RuleName]|[Variables1]],variables(Variables1),to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVar1,SecondVarName),append([FirstVarName,SecondVarName],Variables1,Call),append([[Dbw_n,RuleName]],[Call],Item2),append(Body2,[Item2],Body4),FirstVar2 is SecondVar1,SecondVar2 is SecondVar1+1,convert_to_grammar_part2(Rest1,FirstVar2,SecondVar2,SecondVarParent,Body4,Body3),!.
convert_to_grammar_part321t(Item1,Rest1,FirstVar1,SecondVar1,SecondVarParent,Body2,Body3) :-to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVar1,SecondVarName),Call=[Item1,FirstVarName,SecondVarName],append([[n,grammar_part]],[Call],Item2),append(Body2,[Item2],Body4),FirstVar2 is SecondVar1,SecondVar2 is SecondVar1+1,convert_to_grammar_part2(Rest1,FirstVar2,SecondVar2,SecondVarParent,Body4,Body3),!.
convert_to_grammar_part321t(Item1,Rest1,FirstVar1,SecondVar1,SecondVarParent,Body2,Body3) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,to_variable_name(FirstVar1,FirstVarName),to_variable_name(SecondVar1,SecondVarName),Call=[Item1,FirstVarName,SecondVarName],append([[Dbw_n,grammar_part]],[Call],Item2),append(Body2,[Item2],Body4),FirstVar2 is SecondVar1,SecondVar2 is SecondVar1+1,convert_to_grammar_part2(Rest1,FirstVar2,SecondVar2,SecondVarParent,Body4,Body3),!.
convert_to_grammar_part32t(Body1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3) :-Body1=[Item1|Rest1],convert_to_grammar_part321t(Item1,Rest1,FirstVar1,SecondVar,SecondVarParent,Body2,Body3),!.
convert_to_lp_pipe(Value1A,Value1A1) :- command_n_sols(N), numbers(N,1,[],N1), member(N2,N1), length(L,N2), append(L,A,Value1A), %length(A,1), %foldr(append,[A],[],_), %var(A), A=empty2, foldr(append,[L,["|"],[A]],[],Value1A1).
convert_to_matrix(Grid,X1,Y1,Matrix) :- %numbers(Z1,1,[],Zs), findall([X,Y,Char],(%member(Z,Zs), %get_item_n(Grid,Z,Plane), numbers(Y1,1,[],Ys), %findall(*,( member(Y,Ys), get_item_n(Grid,Y,Line), string_chars(Line,Chars), numbers(X1,1,[],Xs), %findall(*,( member(X,Xs), get_item_n(Chars,X,Char)),Matrix).
convert_to_matrix(Grid,X1,Y1,Z1,Matrix) :- numbers(Z1,1,[],Zs), findall([X,Y,Z,Char],(member(Z,Zs), get_item_n(Grid,Z,Plane), numbers(Y1,1,[],Ys), %findall(*,( member(Y,Ys), get_item_n(Plane,Y,Line), string_chars(Line,Chars), numbers(X1,1,[],Xs), %findall(*,( member(X,Xs), get_item_n(Chars,X,Char)),Matrix).
convert_verbs_to_base(Text1,Word12) :-read_term1("../texttoalg2/prefixes.txt",Prefixes),read_term1("../texttoalg2/suffixes.txt",Suffixes),findall(Word1,(member(Word,Text1),once((member(Prefix,Prefixes),string_concat(Prefix,Word1,Word))->true;Word1=Word)),Word11),findall(Word_a1,(member(Word_a,Word11),once((member(Suffix,Suffixes),string_concat(Word_a1,Suffix,Word_a))->true;Word_a1=Word_a)),Word12).
copy(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),%format(Data,[])        %/*Data=[%%debug='off',%%Debug1,text1=From,text2=To,text01=Path,submit=_],%term_to_atom(From,Text1),%term_to_atom(To,Text2),%term_to_atom(Path,Text01),Scp="scp -pr ",%Scp="cp ",concat_list([Scp,From," ",To],Command),shell1_s(Command),file_browser(Path).:- http_handler('/edit', edit, []).edit(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),%format(Data,[])%writeln1(Data),      Data=[%%debug='off',%%Debug1,text1=Text1,text2=Text2,text01=Path,submit=_],/*%term_to_atom(Text11,Text1),%term_to_atom(Text21,Text2),%term_to_atom(Path,Text01),*/atom_string(Text1,Text1s),atom_string(Text2,Text2s),save_file_s(Text1s,Text2s),file_browser(Path).:- http_handler('/new_file', new_file1, []).
cos_theta(Theta,Cos_theta) :- degrees_to_radians(Theta,R), cos(R,A),round(A,Cos_theta).
count21(C) :- count2(C).a1([File_strings,Limit],L1,File_string_a) :- %findall(Sent_br2,(member(L1,Ls), count21(C2),(C2>=Limit-> (File_string_a=""); ( %open_s("../Lucian-Academy/Books1/algs/lgalgs_a.txt",write,Stream1),%write(Stream1,File_string),%close(Stream1),abort);true),writeln([count,C2,/,Limit]),get_item_n(File_strings,L1,N), ((((catch(call_with_time_limit(0.84,                          time( big_connections_with_bag3_and_mr2(N,File_string_a))),      time_limit_exceeded,      false))            ,%->              findall(_,sub_string(File_string_a,_,_,_,". "),A),length(A,L2),split_string(File_string_a,"\n\r","\n\r",NL),length(NL,NLN),Sent_br2 is L2-NLN, count21(C), C1 is C+Sent_br2, retractall(count2(_)), assertz(count2(C1)),  br_bal(Br), append(Br,[File_string_a],Br1),  retractall(br_bal(_)), assertz(br_bal(Br1))   )->true;(File_string_a=""))))),!.
count_call_or_terminal([],N,N,I,I) :- !.
course_and_essay_topic3(Courses_and_essay_topics) :-findall(A,(course_and_essay_topic2(A)),Courses_and_essay_topics).
cp(From,To) :-Scp="scp -pr ",concat_list([Scp,From," ",To],Command),shell1_s(Command).
cp_since_findall_start21(List1,_Cp1,N,_Cp2) :-(not(member([N,_|_],List1)),fail),!.
create_blocks(Blocks,X,Y,Matrix1,Matrix2) :- %Blocks is 10, create_blocks1(Blocks,X,Y,Matrix1,Matrix2).create_blocks1(0,_,_,Matrix,Matrix) :- !.
create_check_cube(Y_win,X_win,Z_win) :-create_rectangular_prism_in_space(Y_win,X_win,Z_win,G),detect_data(G),prettyprint_3d_1_e1(G,Y_win,X_win,Z_win),!.
create_edu_pol(A,D):- writeln("Are there any more contentions? (y/n)"), read_string(user_input,"\n\r","\n\r",_,C), (C="y"-> (writeln("What is the binary contention?"), read_string(user_input,"\n\r","\n\r",_,B), writeln("What is your opinion (1-strongly disagree, 5-strongly agree)?"), read_string(user_input,"\n\r","\n\r",_,O), append(A,[[B,O]],E), create_edu_pol(E,D)); (A=D, writeln(D))),!.
create_multiple_nonrecursive_clauses(Number_of_clauses1,RuleName0,Algorithms,Algorithms2,NumInputs0,NumOutputs0,New_rule_number1,New_rule_number3,Rules,PredicateName,Program1,VarList,VarList2,InputVars2,InputVars4,OutputVars,Rule,NumInputs1,NumOutputs1,VarLists02,VarLists03,MaxPredicates,Rules2) :-caw4a(RuleName0,New_rule_number1,Rules,PredicateName,NumInputs0,NumOutputs0,NumInputs1,NumOutputs1,Rules3,New_rule_number4,RuleName),%%writeln(before4b),%%trace,caw4b(VarLists02,VarLists04,Algorithms,New_rule_number5,MaxPredicates,New_rule_number4,Program1,RuleName,NumInputs1,NumOutputs1,InputVars2,InputVars5,VarList,VarList3,OutputVars,Rule,Algorithms3,Rules3),%%trace,Number_of_clauses2 is Number_of_clauses1-1,create_multiple_nonrecursive_clauses(Number_of_clauses2,RuleName0,Algorithms3,Algorithms2,NumInputs0,NumOutputs0,New_rule_number5,New_rule_number3,Rules3,PredicateName,Program1,VarList3,VarList2,InputVars5,InputVars4,OutputVars,Rule,NumInputs1,NumOutputs1,VarLists04,VarLists03,MaxPredicates,Rules2).
create_rectangular_prism_in_space(X_min,Y_min,Z_min,Grid2) :-make_grid_3d(X_min,Y_min,Z_min,Grid1),random(1,3,N),(N=1->(random(1,X_min,X1),random(1,X_min,X2),random(1,Y_min,Y1),random(1,Y_min,Y2),random(1,Z_min,Z1),random(1,Z_min,Z2),draw_cube_edges_3d(X1,Y1,Z1,X2,Y2,Z2,Grid1,Grid2));Grid1=Grid2).
create_straight_line_through_remaining_space(Y1,Y2,X_max,Matrix1,Matrix2,Blocked_coords) :-   M is (X_max-1)/(Y2-Y1), C is Y1, Curr_X1 is 1, Curr_Y1 is floor(M*1)+C,  create_straight_line_through_remaining_space_forwards(1,M,C,X_max,Curr_X1,Curr_Y1,Matrix1,Matrix2,[],Blocked_coords).
cross :-prompt("What is their cross?",_Cross11),prompt("What is at the same level as this?",_Cross12).
ctobr0 :- ctobr1(['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','?','-',' ',',','(',')','|','.',':','_','\\','[',']','<','>','0','1','2','3','4','5','6','7','8','9']).
ctobr_1(C1_1,Grid2) :-%writeln(C1),characterbr(Cs),string_atom(C1_1,C1),member([C1,_C1Name,C2],Cs),%writeln(C1Name),writeln(''),grid(Grid1), member([X1,Y1,M1],C2), N2=1, Stroke1=0, %% States:[[this,state],Line:[[any,state,to,this,state],[true,or,false]],State:[[this,state,to,a,state],states]] States= [ [[1,s],false,[[1,s],[1,-]]], [[1,-],false,[[3,s],[2,-]]], %%[[2,s],false,[[2,s],[3,-]]], [[2,-],true,[[3,s],[2,-]]], [[3,s],true,[[1,s],[1,-]]] %%[[3,-],false,[[3,s],[2,-]]] ],M1=[N2|_Ms],(changegrid2(_Prevstate,[1,s],Grid1,Grid2,X1,Y1,C2,_C4,N2,Stroke1,States);changegrid2(_Prevstate,[1,-],Grid1,Grid2,X1,Y1,C2,_C4,N2,Stroke1,States)), %y(Y), %prettyprint1(Grid2,Y),writeln(''), %prettyprint1A(Grid2,Y), !. %% 2 %%string_to_pbm1(_,_,40,24,_,File_contents,File_contents) :- !.
ctt :-cttInput('files/ctt-input.txt',CttInput1,FromLang,ToLang,Tokens2,_Tokens3,Tokens32),File1='files/ctt-orig1-orig2.txt',readfile(File1,CttOrig1Orig21,COOOtherLangPairs,COOWithoutLangPairs,FromLang,ToLang,"files/ctt-orig1-orig2.txt file read error.","Number of back-translation pairs in lang1->lang2: "),File2='files/ctt-orig-tran.txt',readfile(File2,CttOrigTran1,COTOtherLangPairs,_,FromLang,ToLang,"files/ctt-orig-tran.txt file read error.","Number of translation pairs in lang1->lang2: "),%% ctt-orig1-orig2.txt, ctt-orig-tran.txt->googlecalcbtremaining(CttInput1,CttOrig1Orig21,CttOrigTran1,FromLang,ToLang), %% redo calc based on google x can't bec relies on on-fly processing%%ctt(Tokens2,[],Translation,CttOrig1Orig21,_Translation1,CttOrig1Orig212,CttOrigTran1,CttOrigTran2,FromLang,ToLang),ctt2(Tokens2,[],Translation,CttOrig1Orig21,CttOrig1Orig212,CttOrigTran1,CttOrigTran2,FromLang,ToLang,COOWithoutLangPairs),updatetrans(Translation,Tokens32,"",Translation2),removerepeatedterm(CttOrig1Orig212,[],CttOrig1Orig2123),addfromtolang(FromLang,ToLang,CttOrig1Orig2123,[],CttOrig1Orig2122),addfromtolang(FromLang,ToLang,CttOrigTran2,[],CttOrigTran21),wrap2(COOOtherLangPairs,[],COO1),wrap2(COTOtherLangPairs,[],COT1),append(CttOrig1Orig2122,COO1,COO3),append(CttOrigTran21,COT1,COT),updatefile1(COO3,File1),updatefile1(COT,File2),updatefile2(Translation2,'files/ctt-output.txt'),!.
ctt2 :-get_files(Ctt_input,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang),back_translate(Ctt_input,Ctt_orig1_orig2,Ctt_orig_tran,From_lang,To_lang,"",Translation,[],Ctt_orig1_orig2_1,[],Ctt_orig_tran_1),save_file("files/ctt-output.txt",[From_lang,To_lang,Translation]),save_file("files/ctt-orig1-orig2.txt",Ctt_orig1_orig2_1),save_file("files/ctt-orig-tran.txt",Ctt_orig_tran_1),!.
ctt3(Source,Dest,_Orig_lang,Dest_lang) :-(exists_file_s(Source)->(open_string_file_s(Source,File1),Files=[[Source,File1]],Dest_type=file); (find_files(Source,Files),(not(exists_directory_s(Dest))->(writeln([Dest,"is not a directory."]),abort);true),Dest_type=folder)),findall(X,(member([X1,X2],Files),(string_concat(_,".pl",X1)->(%trace,p2lpconverter([string,X2],LP),sub_term_types_wa([string],LP,Instances1),findall([Address,Z9],(member([Address,Y1],Instances1),%trace,find_formatting(Y1,Z9)),Z7),X=[stwa,X1,LP,Z7]);(%trace,find_formatting(X2,Z9),X=[string,X1,Z9]))),X3),findall(A9,(member(A10,X3),(A10=[stwa,X11,LP,X12]->(findall([Address,A171],(member(A12,X12),A12=[Address,A13],findall(A14,(member(A15,A13),(is_white_space(A15)->A14=A15;(foldr(string_concat,["What is ",A15," in the language ",Dest_lang,"?"],S),(catch(q(S,A16),_,false)->A16=A14;(writeln("Translation failed."),abort))))),A17),foldr(string_concat,A17,A171)),A18),A9=[stwa,X11,LP,%X12,A18]);(A10=[string,X11,X12]->findall(A14,(member(A15,X12),(is_white_space(A15)->A14=A15;(foldr(string_concat,["What is ",A15," in the language ",Dest_lang,"?"],S),(catch(q(S,A16),_,false)->A16=A14;(writeln("Translation failed."),abort))))),A17),foldr(string_concat,A17,A171),A9=[string,X11,A171]))),A19),findall(A20,(member(A21,A19),(A21=[string,X1,Z9]->A20=[X1,Z9];(A21=[stwa,X11,LP,%X12,A18]->(%trace,foldr(put_sub_term_wa_ae,A18,LP,X13),lp2p1(X13,X14),A20=[X11,X14])))),X21),%trace,findall(_,(member([K2,File2],X21),(Dest_type=file->K3=Dest;((string_concat(S5,"/",Dest)->true;S5=Dest),split_string1(K2,"/",S2),append([S3],S4,S2),%foldr(string_concat,[S5,"/",S4],S6)flatten([S3,"/../",S5,S4],S6),foldr(string_concat,S6,K3))),open_s(K3,write,S),write(S,File2),close(S)),_),!.
curly_head_tail1a(Round_bracket_list,List1,List2) :-  %t_or_empty(T), Round_bracket_list =.. [',', T,  B], %curly_head_tail(T,_,_), append(List1,[T],List3), (B=..[{}, _]->append(List3,[B],List2); curly_head_tail1a(B,List3,List2)),!.
curly_head_tail1a(Round_bracket_list,List1,List2) :- curly_head_taila(Round_bracket_list,List3,List4), append(List1,[[List3|List4]],List2).
curly_head_taila(Head1,C1,C2) :- Head1 =.. [{}, Round_bracket_list],  curly_head_tail1a(Round_bracket_list,[],[Head1a|Head1b]),  (Round_bracket_list =.. [{}, _]-> (square_to_curly(Head1a,C1),( %(Head1b =.. [{}, _]-> square_to_curly(Head1b,C2); Head1b=C2))%) ; [Head1a|Head1b]=[C1|C2]),!.curly_head_tail1a(T,List1,List2) :- t_or_empty(T),append(List1,[T],List2),!.
curly_head_taila(Head1,C1,C2) :- curly_square(Head1,[C1|C2]).
cut1(X1,X2,X3,X4) :- cut2(X1,X3), cut2(X2,X4).
cut_into_equals_segments2(_,[],T,T) :- !.
cycle2([], _,Deps,Deps) :-!.
data(Value1,Value2,Value3) :-to_lang2(To_lang),from_lang2(From_lang),get_lang_word3(n,"en",From_lang,N),Value1=[N,Value4],get_lang_word3(N,From_lang,To_lang,Value6b),data1(Value4,Value6),append(Value2,[Value6b,Value6],Value3),!.
data(Value1,Value2,Value3) :-to_lang2(To_lang),from_lang2(From_lang),get_lang_word3(t,"en",From_lang,T),Value1=[T,Value4],get_lang_word3(T,From_lang,To_lang,Value6b),data1(Value4,Value6),append(Value2,[Value6b,Value6],Value3),!.
data(Value1,Value2,Value3b) :-curly_head_taila(Value1,Value4,Value5),%trace,data([Value4],[],Value6),append(Value2,Value6,Value7),data(Value5,Value7,Value3),curly_square(Value3a,[Value3]),[Value3a]=Value3b,!.
data([],Value,Value) :- !./**data(Value1a,Value2,Value3) :-data_symbol(Symbol),((Value1a=Symbol)->append(Value2,[Value1a],Value3)),!.
data2at([["abc","b"],["zxy","x"]],Code),findall(_,(member(C,Code),pp_lp2p0(C,D),writeln(D)),_).
data_instance_k_classification(Data,I,K,C):-    maplist(o_oclass_disClass(I),Data,DisAndClass),    keysort(DisAndClass,DSorted),        writeln(DSorted),        length(TopK,K),    append(TopK,_,DSorted),    topk_vote(TopK,C).data(X):-    X=[[2,1,["i","prepared","to","neaten","my","desk"]],[2,2,["i","did","this","by","providing","management","service","as","breasonings","currency"]],[2,3,["first","i","deciphered","it"]],[2,4,["second","i","held","it"]],[2,5,["third","i","managed","it"]],[2,6,["in","this","way","i","prepared","to","neaten","my","desk","by","providing","management","service","as","breasonings","currency"]]      ].
data_symbol(":-").data_symbol("->").
data_to_alg4(Alg3,Alg4,Alg1,Alg2) :- % finds [[B],A] from A=a etc. and [[b],a] %                    [A,B],[c,d] interpretpart(match4,Alg3,Alg1,[],Vars2,_), %                    [[B],A] interpretpart(match4,Alg4,[v,sys1],Vars2,Vars4,_),  % finds [[d],c] from [A,B], [[B],A] and [c,d] getvalue([v,sys1],Alg2,Vars4).
data_to_alg4([],Vars,Vars,Alg,Alg) :- !.
data_to_stems :-directory_files("data_files/",F),delete_invisibles_etc(F,G),findall([Filex1,Header,Footer,Instruments],(member(Filex1,G),string_concat("data_files/",Filex1,Filex),phrase_from_file_s(string(File_codes), Filex),%string_codes(File_string,File_codes),%atom_to_term(String02b,Data_file,[])%A=`b i `,%trace,ba(File_codes, Header,Footer,Middle),%string_codes(Middle2,Middle),%trace,writeln1(Middle2),% retrieve data to make stem files%length(B,6),%foldr(B,Middle,_)%trace,%writeln1(split_on_instrument(Middle,[],Instruments)),%trace,split_on_instrument(Middle,[],Instruments)%,%writeln(split_on_instrument(Middle,[],Instruments))%),String00),%writeln(String00),findall(_,(member([File,Header,Footer,Instruments],String00),length(Instruments,Length),numbers(Length,1,[],Ns),findall(_,(member(N,Ns),get_item_n(Instruments,N,Instrument),foldr(string_concat,[Header,Instrument,Footer],"",File1),%trace,%File=File2,string_concat(File2,".txt",File),foldr(string_concat,["stems/",File2,"-","stem",N,".txt"],"",File_name),save_file_s(File_name,File1)),_)),_),!.
data_to_types2(Data1,Types1,Types41,VD1,VD2,Start) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),%trace,Data1=[Data2|Data3],%not(single_item(Data2)),%trace,data_to_types20(Data2,[],Types3,VD1,VD3),append([],[Types3],Types31),data_to_types2(Data3,Types31,Types4,VD3,VD2,false),%trace,(Start=true->Types42=[[T,Dbw_brackets],Types4];Types42=Types4),foldr(append,[Types1,Types42],Types41),%Types5=[[[T,Dbw_brackets],Types4]],!.
data_to_types2([],Types,Types,VD,VD,_) :- !.
data_to_types21(Data,Types1,Types2,VD1,VD2) :-get_lang_word("t",T),get_lang_word("number",Dbw_number),number(Data),(member([Dbw_number,Data,N],VD1)->VD2=VD1;(get_data_n(N),append(VD1,[[Dbw_number,Data,N]],VD2))),append(Types1,[T,Dbw_number,N],Types2),!.
data_to_types22([[1,[2, 2],1,[2]], [1,[2]]],T,V),find_lists1(T,[],L,[],S),writeln(T),writeln(V),writeln(L),writeln(S).
data_to_types22([[1],[1]],T1,VD),                                               find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
data_to_types22([[[1,1]],[[2,2,2,2]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
data_to_types22([[[1]],[[1]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).Sets2 = [[[t, list], [[t, number, 1]]]].
daysbspeoplearmy:-daysbspeoplearmy(2), %% 3 days, 3 people, a b bb, seen as version, hq version, army go, army returndaysbspeoplearmy(2). %% Give to people with graciously give or blame, radio button for graciously give or blamedaysbspeoplearmy(0):-!.
debug_call(Skip,FunctionArguments1) :-%debug(On),leash1(On2),%writeln1([debug(on),debug(On),leash1(on),leash1(On2)]),get_lang_word("call",Dbw_call),get_lang_word("Press c to creep, s to skip or a to abort.",Dbw_note1),%trace,((save_debug(on),debug(on))->(saved_debug(List1),append(List1,[[Dbw_call,FunctionArguments1,Dbw_note1]],List2),do_saved_debug(List2));true),((retry_back(on),debug(on))->(append_retry_back_stack([debug,[Dbw_call,FunctionArguments1,Dbw_note1]]));true),(debug(on)->(write1([Dbw_call,FunctionArguments1,Dbw_note1]),(leash1(on)->writeln0("");(%print_text,get_single_char(Key),debug_react(call,Key,Skip))));Skip=false).
debug_call(Skip,FunctionArguments1) :-get_lang_word("call",Dbw_call),get_lang_word("Press c to creep, s to skip or a to abort.",Dbw_note1),(debug(on)->(write1([Dbw_call,FunctionArguments1,Dbw_note1]),(leash1(on)->writeln("");(get_single_char(Key),debug_react(call,Key,Skip))));Skip=false).
debug_exit(Skip,FunctionResult2) :-get_lang_word("exit",Dbw_exit),get_lang_word("Press c to creep or a to abort.",Dbw_note1),((Skip=true->turndebug(on);true),((debug(on)->(trace,FunctionResult2=[[n,Function],Args],append([Function],Args,FA),FR=..FA,%concat_list([Function,"(",(Args1|Args2),")"],FR),write1(FR%[Dbw_exit,FunctionResult2,Dbw_note1]),assertz_append1(FR),(leash1(on)->writeln("");(get_single_char(Key),debug_react(exit,Key,_Skip))));true))).
debug_exit(Skip,FunctionResult2) :-get_lang_word("exit",Dbw_exit),get_lang_word("Press c to creep or a to abort.",Dbw_note1),((save_debug(on),debug(on))->(saved_debug(List1),append(List1,[[Dbw_exit,FunctionResult2,Dbw_note1]],List2),do_saved_debug(List2));true),((retry_back(on),debug(on))->(append_retry_back_stack([debug,[Dbw_exit,FunctionResult2,Dbw_note1]]));true),((Skip=true->turndebug(on);true),((debug(on)->(write1([Dbw_exit,FunctionResult2,Dbw_note1]),(leash1(on)->writeln0("");(%print_text,get_single_char(Key),debug_react(exit,Key,_Skip))));true))).
debug_fail(Skip,FunctionArguments1) :-get_lang_word("fail",Dbw_fail),get_lang_word("Press c to creep or a to abort.",Dbw_note1),((Skip=true->turndebug(on);true),((debug(on)->(write1([Dbw_fail,FunctionArguments1,Dbw_note1]),(leash1(on)->writeln("");(get_single_char(Key),debug_react(fail,Key,_Skip))));true),fail)).
debug_fail(Skip,FunctionArguments1) :-get_lang_word("fail",Dbw_fail),get_lang_word("Press c to creep or a to abort.",Dbw_note1),((save_debug(on),debug(on))->(saved_debug(List1),append(List1,[[Dbw_fail,FunctionArguments1,Dbw_note1]],List2),do_saved_debug(List2));true),((retry_back(on),debug(on))->(append_retry_back_stack([debug,[Dbw_fail,FunctionArguments1,Dbw_note1]]));true),((Skip=true->turndebug(on);true),((debug(on)->(write1([Dbw_fail,FunctionArguments1,Dbw_note1]),(leash1(on)->writeln0("");(%print_text,get_single_char(Key),debug_react(fail,Key,_Skip))));true),fail)).
debug_fail_fail(Skip) :-(debug(on)->(Skip=true->turndebug(on);true);true).
debug_types(Call,FunctionArguments1) :-((save_debug(on),debug(on))->(saved_debug(List1),append(List1,[[Call,FunctionArguments1]],List2),do_saved_debug(List2));true),((retry_back(on),debug(on))->(append_retry_back_stack([debug,[Call,FunctionArguments1]]));true),(debug(on)->(writeln1([Call,FunctionArguments1]));true).
debug_types_exit(FunctionResult2) :-get_lang_word("exit",Dbw_exit),debug_types(Dbw_exit,FunctionResult2).
debug_types_fail(FunctionArguments1) :-get_lang_word("fail",Dbw_fail),((debug(on)->(writeln1([Dbw_fail,FunctionArguments1]));true),fail).debug_types_exit(FunctionResult2) :-get_lang_word("exit",Dbw_exit),debug_types(Dbw_exit,FunctionResult2).
debug_types_fail(FunctionArguments1) :-get_lang_word("fail",Dbw_fail),((save_debug(on),debug(on))->(saved_debug(List1),append(List1,[[Dbw_fail,FunctionArguments1]],List2),do_saved_debug(List2));true),((retry_back(on),debug(on))->(append_retry_back_stack([debug,[Dbw_fail,FunctionArguments1]]));true),((debug(on)->(writeln1([Dbw_fail,FunctionArguments1]));true),fail).
def_art(the).
degrees_to_radians(Theta,R) :- R is Theta*((22/7)/180).
del_reflections([A,B],Ns2,Ns3) :- delete(Ns2,[B,A],Ns4),append(Ns4,[[A,B]],Ns3).
delete1(E,_,E) :- !.
delete1([],_,C,C):-!.
delete_back_until_repeat(Flow1,Flow2) :-reverse(Flow1,Flow3),append(_,["repeat"|Flow4],Flow3),reverse(["repeat"|Flow4],Flow2).
delete_cps(Choice_point_trail1,[E31|E32],Choice_point_trail2,CP_Vars1,CP_Vars2) :-E31=[_A,_B|E33],delete_cp(Choice_point_trail1,[_,_|E33],Choice_point_trail3,CP_Vars1,CP_Vars3,_),delete_cps(Choice_point_trail3,E32,Choice_point_trail2,CP_Vars3,CP_Vars2),!.
delete_file_sh(F1) :- (absolute_url(F1)-> F1=F2; (working_directory_sh(F11,F11), string_concat_url(F11,F1,F2))),split_string(F2,":",":",F),append([G],[H],F),string_concat(K,K1,H),string_length(K,2),foldr(string_concat,["main_tmp :- catch(delete_file('",K1,"'),Err,handle_error(Err)),halt.\nmain_tmp :- halt(1).\nhandle_error(_Err):-\n  halt(1)."],S1),foldr(string_concat,[G,":~/tmp54837.pl"],P1),save_file_sh(P1,S1),foldr(string_concat,["ssh ",G," swipl --goal=main_tmp --stand_alone=true -o tmp54837 -c tmp54837.pl"],S2),(catch(shell1_s(S2),_,fail)->(foldr(string_concat,["ssh ",G," ./tmp54837"],S),(catch(shell1_s(S,_Out),_,fail)->(true,foldr(string_concat,["ssh ",G," rm tmp54837.pl\nssh ",G," rm tmp54837"],S3),shell1_s(S3));fail));(writeln("delete_file_sh aborted."),abort)),!.
delete_invisibles_etc(F,G) :-findall(J,(member(H,F),atom_string(H,J),not(J="."),not(J=".."),not(string_concat(".",_,J))),G).
delete_sub_term_wa2(Find,Find,A,A) :-!.delete_sub_term_wa2([],_,A,A).
delete_subterm_wa(Instances, Term1, Term2) :-delete_sub_term_wa(Instances, Term1, Term2).
delete_until_last_cp0(Choice_point_trail1,Choice_point_trail2,D1,AC%,Vars3,CP_Vars1,CP_Vars2) :-%trace,%writeln(here4),get_last_p_before_n(Choice_point_trail1,[Pred_id,Level,Predicate_number,Line_number_a,"line",_,Vars3,Vars2c],D2,D,CP_Vars1,CP_Vars3),D=[Pred_id,Level,Predicate_number,Line_number_a,"line",_,Vars3,Vars2c],%trace,D2=[Cp_a,Cp_b|D],%(Vars2c=[]->fail;Vars2c=Vars2e,((%trace,Vars2e=[[Dbw_n,Dbw_member],[Value1,Value2],_,_,_,_%[Value1a,Value2a],Vars2e1],(Vars2e1=[]->fail;(Vars2e1=[Vars2e2|Vars2e3],%(findall(Vars2f1,(member([Vars2f1,_],Vars2e2)),Vars2f),findall(AC1,(member(AC1,Vars2e2)),AC2), % *** x ac2=Vars2e2%trace,Vars2e2=[Value4,_],%findall(AC3,(member([_,AC3],Vars2e2)),AC4),Vars2e2=[_,Value5a],%,Value2a%|_],AC=[[Dbw_n,Dbw_member],[Value1,Value2],Value5a,Value4,Vars2e3])))->true;(%trace,Vars2e=[[Dbw_n,Dbw_member],[Value1,Value2,Value3],_,_,_,_%[Value1a,Value2a],Vars2e1],(Vars2e1=[]->fail;(Vars2e1=[Vars2e2|Vars2e3],%(findall(Vars2f1,(member([Vars2f1,_],Vars2e2)),Vars2f),findall(AC1,(member(AC1,Vars2e2)),AC2), % *** x ac2=Vars2e2%trace,Vars2e2=[Value4,_],%findall(AC3,(member([_,AC3],Vars2e2)),AC4),Vars2e2=[_,Value5a],%,Value2a%|_],AC=[[Dbw_n,Dbw_member],[Value1,Value2,Value3],Value5a,Value4,Vars2e3])))), % Vars2e3->Vars2e1D10=[Pred_id,Level,Predicate_number,Line_number_a,"line",-,AC2,%Vars2f,AC],D1=[Cp_a,Cp_b|D10],%get_later_cps_than_cp(Choice_point_trail1,D2,C1),%subtract(C1,D2,C2),%save_local_to_global_cp_trail(Choice_point_trail1,[],CP_Vars3,CP_Vars3b),%load_local_from_global_cp_trail(Pred_id,%Choice_point_trail1,%Choice_point_trail2a,CP_Vars3b,CP_Vars3a),Choice_point_trail1=Choice_point_trail2a,CP_Vars3=CP_Vars3a,delete_cp(Choice_point_trail2a,D2,Choice_point_trail3,CP_Vars3a,CP_Vars4,_),append_cp(Choice_point_trail3,[D10],Choice_point_trail2,CP_Vars4,CP_Vars2),%set(curr_cp,Cp_a), %% * try without this%reverse(C1,Choice_point_trail2),%trace,writeln([D1,AC]),!.
deleteduplicates2([],List,List) :- !.
deps(T,As,C) :- %forall(member(N,T),(number(N))), deps1(T,As,C).
descendant1(Person1, Descendant,[[Person2,_C2]|C1],E) :-  not(Person1=Person2), descendant1(Person1,Descendant, C1,E),!.
destination(N1,C1,C2,Label) :-point_to_br(N1),prompt_question,prompt_meditation,write(Label),prompt_tt,point_to_br(C1),bc12,point_to_br(C2),prompt_meditation,!.
determiner("down") --> "the".
dfs_in_order((Item7,Item4,Item8),Items2,Items3) :- dfs_in_order(Item7,Items2,Items8), append(Items8,[Item4],Items6), dfs_in_order(Item8,Items6,Items3),!.
dfs_post_order((Item7,Item4,Item8),Items2,Items3) :- dfs_post_order(Item7,Items2,Items8), dfs_post_order(Item8,Items8,Items6), append(Items6,[Item4],Items3),!.
dfs_post_order2(_,[],_,Items,Items,Items_all1,Items_all1) :- !.
dfs_pre_order((Item7,Item4,Item8),Items2,Items3) :- append(Items2,[Item4],Items6), dfs_pre_order(Item7,Items6,Items8), dfs_pre_order(Item8,Items8,Items3),!.
diff(A, B, C, D, E, F, G, H, J) :- diff_a(A, B, C, D, E1, F1, G, H, J), delete(E1,[],E), delete(F1,[],F).
diff1_gitl(After3,HTML3) :- %correspondences(Corr),  findall(HTML_a,(member(Item%[[n,comment],[Item]] ,After3), (Item=[*, Name, Item_a] ->  diff2_gitl(Name,Item_a,HTML_a); ((%trace, not(Item=[i,_]), not(Item=[d,_])) %string(Item) -> (Item=Item2,%numbers_to_term([Item],Corr,[],Item2), Colour="white",Change=""); ((%trace, Item=[i,Item2])-> (%trace, (Item2=[]->fail;true), %numbers_to_term([Item3],Corr,[],Item2), Colour="green",Change="Insertion: "); ((%trace, Item=[d,Item2])-> (%trace, (Item2=[]->fail;true), %numbers_to_term([Item3],Corr,[],Item2), Colour="red",Change="Deletion: ") /*; (Item=[[c,_],Item_a,Item_b]-> (numbers_to_term(Item_a,Corr,[],Item2a), numbers_to_term(Item_b,Corr,[],Item2b), %trace, %term_to_atom(Item2a,Item2a1), %term_to_atom(Item2b,Item2b1), %foldr(string_concat, term_to_atom([Item2b,' -> ',Item2a],Item2), Colour="yellow",Change="Change: ")) */ ))),  HTML_a=["<table bgcolor=\"",Colour,"\"><tr><td>",Change,Item2,"</td></tr></table>"]  )),HTML), flatten(HTML,HTML1), foldr(string_concat,HTML1,HTML3).
diff_combos([1,2,3,4,5],[1,3,5],C).C = [[1, 2, 3, 4, 5], [1, 2, 3, 5], [1, 3, 4, 5], [1, 3, 5]].
diff_combos([1,2,3],[1,3],C).
diff_combos([1,2,3],[1,5,2,4,3],C).
diff_combos([1,3,4,5],[1,2,3,5],C).C = [[1, 2, 3, 4, 5], [1, 2, 3, 5], [1, 3, 4, 5], [1, 3, 5]].diff_combos([1,4,6,5],[1,5],C).C = [[1, 4, 5], [1, 4, 6, 5], [1, 5], [1, 6, 5]].
diff_combos([4,6,5],[5],C).C = [[4, 5], [4, 6, 5], [5], [6, 5]].diff_combos([5],[4,5],C).
diff_combos_vintage(Before,After,Combos4) :- %trace, find_insertions_and_deletions_vintage(Before,After,Insertions1,Deletions1,Permanent_insertions), %trace,diff(Before,After,Insertions1,Deletions1,Insertions,Deletions,Permanent_insertions,[],After3), %replace11_vintage(After,Insertions,Permanent_insertions,[],After2), %trace, %append(Before,["*"],Before1), %append(After2,["*"],After21), %replace12_vintage(Before,After2,Deletions,[],After3), %delete(After31,"*",After3), %save_diff_html(After3), fail_if_greater_than_n_changes(After3),  %trace,  findall1(Combos,find_combos1_vintage(Insertions,Deletions,Permanent_insertions,Combos),Combos2), findall1(Combos1,(member(Combos3,Combos2), find_combos3_vintage(After3,Combos3,[],Combos1)),Combos41), sort(Combos41,Combos4),!.
diff_combos_vintage([1,2,3,4,5],[1,3,5],C).
diff_combos_vintage([1,2,3],[1,3],C).
diff_combos_vintage([1,2,3],[1,5,2,4,3],C).
diff_combos_vintage([1,3,4,5],[1,2,3,5],C).
diff_combos_vintage([1,4,6,5],[1,5],C).
diff_combos_vintage([4,6,5],[5],C).
diff_combos_vintage([5],[4,5],C).
digits([X|Xs]) --> [X], {(char_type(X,digit)->true;(string_codes(Word2,[X]),Word2="."))}, digits(Xs), !.
digits([X|Xs]) --> [X], {(char_type(X,digit)->true;(string_codes(Word2,[X]),Word2="."))}, digits(Xs), !.%%digits([X]) --> [X], {(char_type(X,digit);(string_codes(Word2,[X]),Word2="."))}, !.
dim(D1) :-repeat,writeln("What are the ratios of side lengths of the object in form x:y:z?"),read_string(user_input,"\n","\n",_,D2),Sep_and_pad=" :,.",split_string(D2,Sep_and_pad,Sep_and_pad,D3),forall(member(D,D3),catch(number_string(_,D),_,false)),!,repeat,writeln("What is one of the lengths, i.e. ':1:' for y=1cm?"),read_string(user_input,"\n","\n",_,L1),split_on_substring117a(L1,Sep_and_pad,L2),member(L5,L2),catch(number_string(_,L5),_,false),%trace,length(L2,L),numbers(L,1,[],Ns),%trace,findall(A,(member(N,Ns),get_item_n(L2,N,L3),get_item_n(D3,N,D4),number_string(D5,D4),(catch(number_string(L4,L3),_,false)->(A1 is L4/D5,A=[N,[n,L4,A1]]);A=[N,[u,D5]])),A2),findall(A1,member([N,[n,L4,A1]],A2),A3),maplist(=(_),A3),A3=[A5|_],findall(B1,(member(B,A2),(B=[N,[u,D5]]->B1 is D5*A5;(B=[N,[n,L4,A1]],B1=L4))),D1),!.
dimensions(X,Y,Z) :- object(Grid), %find_bounds(Grid,X1,Y1,Z1), verify(Grid,X1,Y1,Z1), convert_to_matrix(Grid,X1,Y1,Z1,Matrix), find_min_max_x_y_z(Matrix,Min_X,Max_X,Min_Y,Max_Y,Min_Z,Max_Z), find_dimensions(Min_X,Max_X,Min_Y,Max_Y,Min_Z,Max_Z,X,Y,Z), !.
directory_files_s(F1,B) :-atom_string(F1,F2),directory_files(F2,B),!.
dirs_true :- forall((member(A,[1,2,3]),member(B,[1,2,3]),not(A=B)),dir(A,B,true)).
display_messages(Messages2) :- open_file('messages.txt',Messages),length(Messages,Length),numbers(Length,1,[],Ns), findall([N,Title,Message],(member2(Ns,N),get_item_n(Messages,N,[N,Title,Message]),%write(N),write(" - "),writeln(Title)),Messages2).
display_messages_to_select(Messages) :-%trace,findall([N," - ",T,"\n"],member2(Messages,[N,T,_M]),Messages3),maplist([n,append],Messages3,[],Messages1),maplist([n,string_concat],Messages1,"",Messages2),writeln(Messages2).
distance(X1,Y1,Z1,X2,Y2,Z2,D):- D is sqrt((X2-X1)^2+(Y2-Y1)^2+(Z2-Z1)^2).
distribute_thoughts(L) :- findall(N,person1(N),N1), numbers(100,1,[],Ns), findall([N2,P],(member(N2,Ns),random_member(P,N1)),L).
divide(_,[],Words2,Words2) :- !.
do_c(Month1,Day1,Person):-find_time(Hour,Minutes,Seconds),%% "Do you see (hallucinatory) appearances?"trialy2_6("Yes",R1),trialy2_6("No",R2),R=[R1,R2/**,R3,R4,R5,R6,R7,R8,R9,R10**,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27**/],sort(R,RA),reverse(RA,RB),RB=[[_,RC]|_Rest1],%% "Do you feel depressed?"trialy2_6("Yes",S1),trialy2_6("No",S2),S=[S1,S2/**,S3,S4,S5,S6,S7,S8,S9,S10**,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21,S22,S23,S24,S25,S26,S27**/],sort(S,SA),reverse(SA,SB),SB=[[_,SC]|_Rest2],%% "Do you have headaches?"trialy2_6("Yes",T1),trialy2_6("No",T2),T=[T1,T2/**,T3,T4,T5,T6,T7,T8,T9,T10**,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27**/],sort(T,TA),reverse(TA,TB),TB=[[_,TC]|_Rest3],%% "Do you have a job?"trialy2_6("Yes",U1),trialy2_6("No",U2),U=[U1,U2/**,U3,U4,U5,U6,U7,U8,U9,U10**,U11,U12,U13,U14,U15,U16,U17,U18,U19,U20,U21,U22,U23,U24,U25,U26,U27**/],sort(U,UA),reverse(UA,UB),UB=[[_,UC]|_Rest4],%% "Do you have a business?"trialy2_6("Yes",V1),trialy2_6("No",V2),V=[V1,V2/**,V3,V4,V5,V6,V7,V8,V9,V10**,V11,V12,V13,V14,V15,V16,V17,V18,V19,V20,V21,V22,V23,V24,V25,V26,V27**/],sort(V,VA),reverse(VA,VB),VB=[[_,VC]|_Rest5],%% "Are you doing training?"trialy2_6("Yes",W1),trialy2_6("No",W2),W=[W1,W2/**,W3,W4,W5,W6,W7,W8,W9,W10**,W11,W12,W13,W14,W15,W16,W17,W18,W19,W20,W21,W22,W23,W24,W25,W26,W27**/],sort(W,WA),reverse(WA,WB),WB=[[_,WC]|_Rest6],%% "Do you have a partner?"trialy2_6("Yes",X1),trialy2_6("No",X2),X=[X1,X2/**,X3,X4,X5,X6,X7,X8,X9,X10**,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24,X25,X26,X27**/],sort(X,XA),reverse(XA,XB),XB=[[_,XC]|_Rest7],%% "Do you have sex?"trialy2_6("Yes",Y1),trialy2_6("No",Y2),Y=[Y1,Y2/**,Y3,Y4,Y5,Y6,Y7,Y8,Y9,Y10**,Y11,Y12,Y13,Y14,Y15,Y16,Y17,Y18,Y19,Y20,Y21,Y22,Y23,Y24,Y25,Y26,Y27**/],sort(Y,YA),reverse(YA,YB),YB=[[_,YC]|_Rest8],writeln([Person,[appointment,Month1,Day1,Hour,Minutes,Seconds],["Do you see (hallucinatory) appearances?",RC],["Do you feel depressed?",SC],["Do you have headaches?",TC],["Do you have a job?",UC],["Do you have a business?",VC],["Are you doing training?",WC],["Do you have a partner?",XC],["Do you have sex?",YC]]).
doc_db(String) :-open_s("docs.txt",read,Stream),read(Stream,Term),close(Stream),findall([Command," - ",Example,"<br>"], (member([Command,Example],Term)),Term2),  foldr(append,Term2,Term3), foldr(string_concat,Term3,String).
double_to_single_brackets(A,B) :- sub_term_types_wa([heuristic(double_brackets(A1),A1)],A,In),findall([Ad,D],(member([Ad,E],In),E=[D]),In2),foldr(put_sub_term_wa_ae,In2,A,C), (A=C->C=B; double_to_single_brackets(C,B)),!. double_brackets([[_|_]]).
downcase_and_split(String1,String2) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(String1,String3),split_string(String3, SepandPad, SepandPad, String2).
downcase_and_split(String1,String2) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(String1,String3),split_string(String3, SepandPad, SepandPad, String2).get_string(Prompt2,Flag1,Flag2,ML_db0,ML_db1,String2) :-%%writeln1(get_string(Prompt2,Flag1,Flag2,ML_db1,String2)),%%concat_list(Prompt1,Prompt2),%%trace,SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%(repeat,(Flag2=one-not-ml-ref->(concat_list(["Note: Enter in-text reference using AGPS, e.g.\n","The first work supports the second work (Surname 2000, pp. 18-9).\n","Surname (2000, pp. 18-9) states that ...\n","Remember to use words like \"also\", \"moreover\" and \"in addition\" before the sentence."],String_a1),writeln(String_a1));true),writeln(Prompt2),read_string(user_input, "\n", "\r", _End, String2aa),%%not(String2aa=""),%%String2aa=[String2aaa],downcase_atom(String2aa,String3),split_string(String3, SepandPad, SepandPad, String4),Neg_term_list=["no","not","don","t","shouldn","wouldn","disagree","differ","dislikes","disagrees","differs","dislikes","disagreed","differed","disliked","negative","negation","non","negate","negates","negated","but","however","isn","lack"],(Flag1=%%non_negativepositive->((findall(Item11,(member(Item1,String4),findall(Item1,(member(Item2,Neg_term_list),(Item1=Item2->(write("Error: Contains the negative term \""),write(Item1),writeln("\".")))),Item11)),Item12)),maplist(equals_empty_list,Item12));((Flag1=negative->((member(Item1,String4),member(Item1,Neg_term_list))->true;(writeln("Error: Contains no negative term, one of:"),writeln(Neg_term_list),fail));true)->true;Flag1=either)),(Flag2=one-not-ml->String2=String2aa;(Flag2=one-not-ml-ref->(refs(R1),writeln("What is the reference? e.g. Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\n"),writeln("Existing references (copy one or many delimited with \"\\n\"):"), findall(_,(member(R11,R1),writeln(R11)),_),read_string(user_input, "\n", "\r", _End, String2r),not(String2r=""),%%downcase_atom(String2r,_String3r),String2=String2aa,split_string(String2r,"\n\r","\n\r",String2r3),%%trace,retractall(refs(_)),maplist(append,[[R1,String2r3]],[String2r21]),sort1(String2r21,String2r2),assertz(refs(String2r2))%%split_string(String3r, SepandPad, SepandPad, String4));(Flag2=one->(%%split_string(String4,SepandPad,SepandPad,String21),writeln("Attempt 1"),(length(String4,Length_string1),(check_strings_container1(Length_string1,String4,[0,0,ML_db1],[[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1],[999,999,[]]],_,_List2)->writeln("Success");(writeln("Failed"),fail))%%(%%data_instance_k_classification1([[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1]%%,[999,999,[]]%%],[0,0,String4]%%21%%,1,String4a%%21%%),%%String4=String4a)%%)->%%(%%String4a=[_,_,String4a1],%%writeln([found,String4a,String4]),%%writeln("Success"));%%(writeln("Failed"),fail)%%));(Flag2=%%[two,%%,P1,S1,P2,S2],%%trace,append([ML_db0],[ML_db1],ML_db2),check_strings(String4,ML_db2%%,P1,S1,P2,S2))))).
downcase_and_split(String1,String2) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(String1,String3),split_string(String3, SepandPad, SepandPad, String2).get_string(Prompt2,Flag1,Flag2,ML_db0,ML_db1,String2) :-%%writeln1(get_string(Prompt2,Flag1,Flag2,ML_db1,String2)),%%concat_list(Prompt1,Prompt2),%%trace,SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%(repeat,(Flag2=one-not-ml-ref->(concat_list(["Note: Enter in-text reference using AGPS, e.g.\n","The first work supports the second work (Surname 2000, pp. 18-9).\n","Surname (2000, pp. 18-9) states that ...\n","Remember to use words like \"also\", \"moreover\" and \"in addition\" before the sentence."],String_a1),writeln(String_a1));true),writeln(Prompt2),read_string(user_input, "\n", "\r", _End2, String2aa),%%not(String2aa=""),%%String2aa=[String2aaa],downcase_atom(String2aa,String3),split_string(String3, SepandPad, SepandPad, String4),Neg_term_list=["no","not","don","t","shouldn","wouldn","disagree","differ","dislikes","disagrees","differs","dislikes","disagreed","differed","disliked","negative","negation","non","negate","negates","negated","but","however","isn","lack"],(Flag1=%%non_negativepositive->((findall(Item11,(member(Item1,String4),findall(Item1,(member(Item2,Neg_term_list),(Item1=Item2->(write("Error: Contains the negative term \""),write(Item1),writeln("\".")))),Item11)),Item12)),maplist(equals_empty_list,Item12));((Flag1=negative->((member(Item1,String4),member(Item1,Neg_term_list))->true;(writeln("Error: Contains no negative term, one of:"),writeln(Neg_term_list),fail));true)->true;Flag1=either)),(Flag2=one-not-ml->String2=String2aa;(Flag2=one-not-ml-ref->(refs(R1),writeln("What is the reference? e.g. Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\n"),writeln("Existing references (copy one or many delimited with \"\\n\"):"), findall(_,(member(R11,R1),writeln(R11)),_),read_string(user_input, "\n", "\r", _End3, String2r),not(String2r=""),%%downcase_atom(String2r,_String3r),String2=String2aa,split_string(String2r,"\n\r","\n\r",String2r3),%%trace,retractall(refs(_)),maplist(append,[[R1,String2r3]],[String2r21]),sort1(String2r21,String2r2),assertz(refs(String2r2))%%split_string(String3r, SepandPad, SepandPad, String4));(Flag2=one->(%%split_string(String4,SepandPad,SepandPad,String21),writeln("Attempt 1"),(length(String4,Length_string1),(check_strings_container1(Length_string1,String4,[0,0,ML_db1],[[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1],[999,999,[]]],_,_List2)->writeln("Success");(writeln("Failed"),fail))%%(%%data_instance_k_classification1([[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1]%%,[999,999,[]]%%],[0,0,String4]%%21%%,1,String4a%%21%%),%%String4=String4a)%%)->%%(%%String4a=[_,_,String4a1],%%writeln([found,String4a,String4]),%%writeln("Success"));%%(writeln("Failed"),fail)%%));(Flag2=%%[two,%%,P1,S1,P2,S2],%%trace,append([ML_db0],[ML_db1],ML_db2),check_strings(String4,ML_db2%%,P1,S1,P2,S2))))).reference(String2r) :-refs_long(R10),(refs(R1),%%writeln("What is the reference? e.g. Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\n"),writeln("Existing references (copy one or many delimited with \"\\n\"):"), findall(_,(member(R11,R1)%,writeln(R11)),_),%%read_string(user_input, "\n", "\r", _End4, String2r),not(String2r=""),%%downcase_atom(String2r,_String3r),%%String2=String2aa,split_string(String2r,"\n\r","\n\r",String2r3),%%trace,retractall(refs(_)),maplist(append,[[R1,String2r3]],[String2r21]),retractall(refs_long(_)),maplist(append,[[R10,String2r3]],[String2r210]),sort1(String2r21,String2r2),assertz(refs(String2r2)),assertz(refs_long(String2r210))%%split_string(String3r, SepandPad, SepandPad, String4)).
downcase_and_split(String1,String2) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(String1,String3),split_string(String3, SepandPad, SepandPad, String2).get_string(Prompt2,Flag1,Flag2,ML_db0,ML_db1,String2) :-%%writeln1(get_string(Prompt2,Flag1,Flag2,ML_db1,String2)),%%concat_list(Prompt1,Prompt2),%%trace,SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%(repeat,writeln(Prompt2),read_string(user_input, "\n", "\r", _End, String2),not(String2=""),downcase_atom(String2,String3),split_string(String3, SepandPad, SepandPad, String4),Neg_term_list=["no","not","don","t","shouldn","wouldn","disagree","differ","dislikes","disagrees","differs","dislikes","disagreed","differed","disliked","negative","negation","non","negate","negates","negated","but","however","isn","lack"],(Flag1=%%non_negativepositive->((findall(Item11,(member(Item1,String4),findall(Item1,(member(Item2,Neg_term_list),(Item1=Item2->(write("Error: Contains the negative term \""),write(Item1),writeln("\".")))),Item11)),Item12)),maplist(equals_empty_list,Item12));((Flag1=negative->((member(Item1,String4),member(Item1,Neg_term_list))->true;(writeln("Error: Contains no negative term, one of:"),writeln(Neg_term_list),fail));true)->true;Flag1=either)),(Flag2=one-not-ml->true;(Flag2=one->(%%split_string(String4,SepandPad,SepandPad,String21),writeln("Attempt 1"),(length(String4,Length_string1),(check_strings_container1(Length_string1,String4,[0,0,ML_db1],[[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1],[999,999,[]]],_,_List2)->writeln("Success");(writeln("Failed"),fail))%%(%%data_instance_k_classification1([[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1]%%,[999,999,[]]%%],[0,0,String4]%%21%%,1,String4a%%21%%),%%String4=String4a)%%)->%%(%%String4a=[_,_,String4a1],%%writeln([found,String4a,String4]),%%writeln("Success"));%%(writeln("Failed"),fail)%%));(Flag2=%%[two,%%,P1,S1,P2,S2],%%trace,append([ML_db0],[ML_db1],ML_db2),check_strings(String4,ML_db2%%,P1,S1,P2,S2)))).
draw_edges(X1,Y1,X2,Y2,X3,Y3,Grid1,Grid4) :-  line1(X1,Y1,X2,Y2,Grid1,Grid2,1), line1(X2,Y2,X3,Y3,Grid2,Grid3,1), line1(X3,Y3,X1,Y1,Grid3,Grid4,1).triangle_centre(X1,Y1,X2,Y2,X3,Y3,QX,QY) :- QX is floor((X1 + X2 + X3)/3), QY is floor((Y1 + Y2 + Y3)/3).
draw_edges_3d(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X4,Y4,Z4,Grid1,Grid7) :-  line1_3d(X1,Y1,Z1,X2,Y2,Z2,Grid1,Grid2,1), line1_3d(X2,Y2,Z2,X3,Y3,Z3,Grid2,Grid3,1), line1_3d(X3,Y3,Z3,X1,Y1,Z1,Grid3,Grid4,1), line1_3d(X1,Y1,Z1,X4,Y4,Z4,Grid4,Grid5,1), line1_3d(X2,Y2,Z2,X4,Y4,Z4,Grid5,Grid6,1), line1_3d(X3,Y3,Z3,X4,Y4,Z4,Grid6,Grid7,1).draw_faces_3d(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X4,Y4,Z4,Grid1,Grid5) :-  draw_face_3d(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,Grid1,Grid2), draw_face_3d(X1,Y1,Z1,X2,Y2,Z2,X4,Y4,Z4,Grid2,Grid3), draw_face_3d(X1,Y1,Z1,X4,Y4,Z4,X3,Y3,Z3,Grid3,Grid4), draw_face_3d(X4,Y4,Z4,X2,Y2,Z2,X3,Y3,Z3,Grid4,Grid5).  draw_face_3d(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,Grid1,Grid2) :- DX is X3-X2, DY is Y3-Y2, DZ is Z3-Z2, Mod is sqrt(DX^2+DY^2+DZ^2), Segs is ceiling(Mod/0.5), Segs2 is Segs-1, numbers(Segs2,0,[],S), findall([SX,SY,SZ],(member(S1,S), SX is floor(X2+S1*DX), SY is floor(Y2+S1*DY), SZ is floor(Z2+S1*DZ)),Ps), draw_lines(X1,Y1,Z1,Ps,Grid1,Grid2).
draw_lines(_X1,_Y1,_Z1,[],Grid,Grid) :- !.
duplicates([],_L,S,S).duplicates(L,M,S1,S2):-head(L,H),tail(L,T),member(H,M),(deletea2(M,H,M1)->(true);(=(M,M1))),wrap(H,H1),append(S1,H1,S3),duplicates(T,M1,S3,S2),!.
e4_fa_getvalues(Variable1,Variable2,Value1,Value2,Vars) :-        e4_fa_getvalue(Variable1,Value1,Vars),        e4_fa_getvalue(Variable2,Value2,Vars).
e4_fa_getvalues2([],Values,Values,_Vars,Flags,Flags) :- !.e4_fa_getvalues2(VarNames1,Values1,Values2,Vars,Flags1,Flags2) :-VarNames1=[VarName1|VarNames2],(VarName1=[VarName2]->Flag1=true;VarName2=VarName1),e4_fa_getvalue(VarName2,Value1,Vars),(is_empty(Value1)->Flag2=true;(Value2=Value1,Flag2=false)),(Flag1=true->Value3=[Value2];Value3=Value2),append(Values1,Value3,Values3),append(Flags1,[Flag2],Flags3),e4_fa_getvalues2(VarNames2,Values3,Values2,Vars,Flags3,Flags2),!.
e4_substitutevarsA2_getvalue_match1(Variable1,Value1,Vars1,FirstArgs1,FirstArgs3) :-single_item_or_var(Variable1),getvalue(Variable1,Value,Vars1),((is_empty(Value)->((Value1=Variable1),(isvar(Variable1)->append(FirstArgs1,[Variable1],FirstArgs3);FirstArgs3=FirstArgs1));(getvalue(Variable1,Value,Vars1),Value1=Value,FirstArgs3=FirstArgs1))),!.
e4_substitutevarsA2_getvalue_match1([],[],_Vars1,FirstArgs1,FirstArgs1) :- !.
eh_server(Port) :-        http_server(http_dispatch, [port(Port)]).
eliminate_unused_predicates1(_Rules,[],Algorithms,Algorithms) :- !.
empirical([1,+,1,=,2]) :- string_length("*",A), string_length("*",B), string_length("**",C),C is A+B,!.
empirical([A,*,B,=,C]) :- length(AL,A), findall(BL,(member(_,AL),length(BL,B)),BLs),findall(B,(member(BL,BLs),length(BL,B)),Bs),sum(Bs,0,C),!.
end_of_cols(A,N) :- A=[B|_], string_length(B,L), N>=L.
enroll([First,Second,Subject],Enrollments1,Enrollments2) :-enroll(First,Second,Subject,Enrollments1,Enrollments2).
enroll2(First,Second,Subject,Enrollments1,Enrollments2) :-member([Subject,Q,Enrollments3],Enrollments1),append(Enrollments3,[[First,Second]],Enrollments4),delete(Enrollments1,[Subject,Q,Enrollments3],Enrollments5),append(Enrollments5,[[Subject,Q,Enrollments4]],Enrollments2).
enroll2([First,Second,Subject],Enrollments1,Enrollments2) :-enroll2(First,Second,Subject,Enrollments1,Enrollments2).
enroll_with_quota([[a,b,m],[c,d,m]],[[m,2,[[e,f]]]],A).A = [[m, 2, [[e, f], [a, b]]]].*/enroll_with_quota(Students_to_enroll,Enrollments1,Enrollments2) :-% find list of subjects in demandfindall(Subject,(member([_,_,Subject],Students_to_enroll)),Subjects1),sort(Subjects1,Subjects2),% find list of quota limits for each subject, number of students currently in each subject and the number of places availablefindall([Subject,_Quota1,_Number_of_current_students1,Places_available],(member(Subject,Subjects2),member([Subject,Quota,Current_students],Enrollments1),length(Current_students,Number_of_current_students),Places_available is Quota-Number_of_current_students,Places_available>=1),Data),% find lists of new students for each subjectfindall(New_students2,(member([Subject,_Quota,_Number_of_current_students2,Places_available],Data),length(New_students,Places_available),findall([First,Last,Subject],member([First,Last,Subject],Students_to_enroll),Students_demanding_enrollment),%trace,length(Students_demanding_enrollment,Number_of_students_demanding_enrollment),(Places_available>Number_of_students_demanding_enrollment->New_students2=Students_demanding_enrollment;(append(New_students,_,Students_demanding_enrollment),New_students=New_students2))),New_students1),%trace,% add studentsfoldl(append,New_students1,[],New_students3),%(New_students1=[]->Enrollments1=Enrollments2;%([New_students3]=New_students1,foldl(enroll2,New_students3,Enrollments1,Enrollments2).%%)).
enroll_with_quota([[a,b,m],[c,d,m]],[[m,5,[[e,f]]]],A).
entry([Word2,Word4]) -->"[", word(Word), {string_codes(Word2,Word),string(Word2)},",",           word(Word3), {string_codes(Word4,Word3),string(Word4)},           "]".
entry([Word2,Word4]) -->"[", word(Word), {string_codes(Word2,Word),string(Word2)},",",           word(Word3), {string_codes(Word4,Word3),string(Word4)},           "]".splitfurthert(BrDict01,N) :-   phrase(file0t(N),BrDict01).file0t(N) --> "[", filet(N), "]", !.
entryt([Word2,X3,Y3,Z3]) -->"[", word(Word), {string_codes(Word2,Word),string(Word2)},",",      digits(X),",",{atom_codes(X2,X),atom_number(X2,X3),number(X3)},           digits(Y),",",{atom_codes(Y2,Y),atom_number(Y2,Y3),number(Y3)},           digits(Z),{atom_codes(Z2,Z),atom_number(Z2,Z3),number(Z3)},           "]".
equals4(A,B):-A=B.
equals4_first_args(Variable1,Variable2,First_args2) :-%trace,length(Variable1,Length),equals4_first_args1(1,Length,Variable1,Variable2,[],First_args2),!.
equals4_first_args1(Length2,Length1,[],[],First_args,First_args) :-Length2 is Length1+1,!.
equispace_instruments(In,A):- length(In,L), sort(In,In2), append(_,[Max],In2), Interval is Max/L.
everyvarmentioned1([],_Program) :- !.
everyvarmentioned1([],_Program) :- !.everyvarmentioned1(Vars1,Program) :-Vars1=[Vars2|Vars3],findall(Vars2,(member(C,Program),(%%(C=[[n,"_"],[[v,b]]]->(true);true),C=[_E,D],member(Vars2,D)%%Vars2=true)),B),not(B=[]),everyvarmentioned1(Vars3,Program).
exists_directory_sh(F1) :- (absolute_url(F1)-> F1=F2; (working_directory_sh(F11,F11), string_concat_url(F11,F1,F2))),split_string(F2,":",":",F),append([G],[H],F),string_concat(K,K1,H),string_length(K,2),foldr(string_concat,["main_tmp :- catch(exists_directory('",K1,"'),Err,handle_error(Err)),halt.\nmain_tmp :- halt(1).\nhandle_error(_Err):-\n  halt(1)."],S1),foldr(string_concat,[G,":~/tmp54837.pl"],P1),save_file_sh(P1,S1),foldr(string_concat,["ssh ",G," swipl --goal=main_tmp --stand_alone=true -o tmp54837 -c tmp54837.pl"],S2),(catch(shell1_s(S2),_,fail)->(foldr(string_concat,["ssh ",G," ./tmp54837"],S),(catch(shell1_s(S,_Out),_,fail)->(true,foldr(string_concat,["ssh ",G," rm tmp54837.pl\nssh ",G," rm tmp54837"],S3),shell1_s(S3));fail));(writeln("exists_directory_sh aborted."),abort)),!.
exists_file_sh(F1) :- (absolute_url(F1)-> F1=F2; (working_directory_sh(F11,F11), string_concat_url(F11,F1,F2))),split_string(F2,":",":",F),append([G],[H],F),string_concat(K,K1,H),string_length(K,2),foldr(string_concat,["main_tmp :- catch(exists_file('",K1,"'),Err,handle_error(Err)),halt.\nmain_tmp :- halt(1).\nhandle_error(_Err):-\n  halt(1)."],S1),foldr(string_concat,[G,":~/tmp54837.pl"],P1),save_file_sh(P1,S1),foldr(string_concat,["ssh ",G," swipl --goal=main_tmp --stand_alone=true -o tmp54837 -c tmp54837.pl"],S2),(catch(shell1_s(S2),_,fail)->(foldr(string_concat,["ssh ",G," ./tmp54837"],S),(catch(shell1_s(S,_Out),_,fail)->(true,foldr(string_concat,["ssh ",G," rm tmp54837.pl\nssh ",G," rm tmp54837"],S3),shell1_s(S3));fail));(writeln("exists_file aborted."),abort)),!.exists_directory_s(F1) :- atom_string(F2,F1), exists_directory(F2),!.
expand_topic([file,File1],ET0) :-%File1="test1.pl",phrase_from_file_s(string(Codes), File1),string_codes(String,Codes),expand_topic1(String,ET0),open_s("file2.txt",write,Stream1),write(Stream1,ET0),close(Stream1),!.
expand_topic1(String,ET0) :-Sep_and_pad="\n",split_string(String,Sep_and_pad,Sep_and_pad,Strings),length(Strings,L1),numbers(L1,1,[],LN),findall([LN1,". ",A1,". ",ET1,"\n"],(member(LN1,LN),get_item_n(Strings,LN1,String1),Sep_and_pad1=".",split_string(String1,Sep_and_pad1,Sep_and_pad1,Strings1),%length(Strings1,L),(Strings1=[A,B] -> % A use has been provided(%trace,expand_topic11(B,ET10),%(B=ET10->ET100="";ET100=ET10),%foldr(append,[%[A],%ET],ET4),trim_spaces_before(ET10,ET1),trim_spaces_before(B,B1),A1=[A,". ",B1]%foldr(string_concat,ET4,ET1));(Strings1=[B],A1=[*,". ",B],expand_topic11(B,ET1)%(B=ET10->ET1="";ET1=ET10)%foldr(append,ET,ET1)%foldr(string_concat,[ET],ET1)))),ET2),flatten(ET2,ET3),%findall(*,(member(ET3,ET2))) if needs " "foldr(string_concat,ET3,ET0),!.
explain_structure(String01,Reasons_per_paragraph,File1) :-concat_list(["The Short Essay Helper will you help structure and write your essay about \"",String01,"\" with ",Reasons_per_paragraph," reasons per paragraph.","\n","The Helper will help write an exposition (which summarises but doesn't critique the idea), a critique (which agrees with or disagrees with the topic), the introduction and the conclusion (which state whether you agreed or disagreed with the topic, etc.).","\n","The Helper will output the file, \"",File1,"\" used for marking.  After using the Helper, run Text To Breasonings.  Return \"",File1,"\" and the two breasoning dictionaries for marking."],String1),writeln(String1).
exposition(String00,String01,Reasons_per_paragraph,Numbers,ML_db,Exposition1) :-length(List1,5),append(List1,_,Numbers),length(List2,Reasons_per_paragraph),append(List2,_,Numbers),string_codes(String001,String00),writeln(String001),findall([Number1,Exposition2],(%%trace,member(Number1,List1),concat_list(["What is group ",Number1," of 5 in the exposition that groups ideas about \"",String01,"\"? "],String1),get_string(String1,positive,one-not-ml,"","",%ML_db,Exposition2)),Exposition3),findall([Number2,Number3,String3,String3a,String5a,String5],(member(Number2,List1),member(Number3,List2),get_item_n(Exposition3,Number2,[_,Item1]),%%trace,concat_list(["<Exposition Paragraph ",Number2," of 5 - \"",Item1,"\"> <Reason ",Number3," of ",Reasons_per_paragraph,">","\n","The Helper will ask you how the quote you are about to enter relates to the paragraph topic."],String2b),writeln(String2b),%%trace,exposition2(Item1,ML_db,String3,String3a,String5a,String5)),Exposition4),Exposition1=[Exposition3,Exposition4].
expression_not_var1(Variable1,_) :-single_item_not_var(Variable1),!.
expression_not_var1([],_) :- !.
expressionnotatom(N) :-isvalstrempty(N),!.
expressionnotatom3(N) :-expressionnotatom(N),!.
extra_curricular(A,B) :- subtract([headache-medicine,music-number-one,hollywood-actor,prestigious-professor,school-head],A,B).
extract_modes1(TypeStatements1,TypeStatements3,Vars1,Vars2,ModeStatements1) :-%%TypeStatements1=[TypeStatements2|TypeStatements3],%%trace,%%writeln1([TypeStatements1,ModeStatements1]),extract_modes2(TypeStatements1,[],TypeStatements3,Vars1,[],Vars2,ModeStatements1),!.
extrasarguments(_Relations,_FunctionNumber,3,Vars,Vars,Header,Header).
fa1([],_,A,A) :- !.
facesquestions(["Do you see (hallucinatory) appearances?","Do you feel depressed?","Do you have headaches?","Do you have a job?","Do you have a business?","Are you doing training?","Do you have a partner?","Do you have sex?"]).
fail_if_greater_than_n_changes1(%720).
faster_than_personal_best(PB,V) :- V<PB.
fastp2lp1(String,LP) :-%trace,%working_directory1(_,A),%foldr(string_concat,[%"../private2/luciancicd-testing/",Repository1b,"/",Go_path5,%"tmp.pl"],GP),%string_concat(Go_path,"testcicd.pl",GP),%open_s(GP,write,S1),%write(S1,String),close(S1),%foldr(string_concat,["chmod +x ",GP,"\n","swipl -g main -q ./",GP],S3),%,term_to_atom(String_t,String),%trace,%(String_t,arg(1, String_t, Value),arg(2, Value, LP)%,catch(bash_command(S3,LP), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."%],_Text4),%writeln1(Text4),%fail%abort %) %) /*-> (%trace,working_directory1(A,A),%writeln([*,A]),delete_tmp,term_to_atom(LP1,LP));(%writeln("Fatal error on converting Prolog to List Prolog."),%delete_tmp,fail))*/.
fastp2lp2(H1,LP1) :-%string_concat(H10,"\n%",H1),%pwd,%foldr(string_concat,["#!/usr/bin/swipl -g main -q\n\n",":-include('../GitHub/Prolog-to-List-Prolog/p2lpconverter.pl').\n","handle_error(_Err):-\n  halt(1).\n","main :-\n    catch((p2lpconverter([string,\"",H1,"\"],LP),term_to_atom(LP,LP1), write(LP1)),Err, handle_error(Err)), nl,\n    halt.\n","main :- halt(1).\n"],String),foldr(string_concat,["catch(p2lpconverter([string,\"",H1,"\"],LP),_,false)"],String),working_directory1(A,A),%writeln([*,A]),working_directory1(_,"../"),fastp2lp1(String,LP1),working_directory1(_,A).
ff_rows2(Instances1c,Instances1c,[]%Poss_variables_LHS,Poss_variables_LHS,[],[],_L1,_L2) :- !.
file(Ls2) --> newlines1(_N1),predicate(L),%newlines1(N2),file(Ls),%{writeln1(L)}, %%*** {foldr(append,[%N1, [L],%N2, Ls],Ls2)}, %delete(Ls3,[],Ls2)}, !. file(_Ls2) --> newlines1(_Ls3),!.
file0(N) --> "[", file(N), "]", !.
file_os :-pwd,directory_files("./",Files),findall(_,(member(File,Files),writeln(File)),_),writeln("\n"),writeln("Enter \"cd ../\", \"cd <directory>\", \"ls\" or \"q\" to quit."),read_string(user_input, "\n", "\r", _End2, Command),(Command="ls"->true;(Command="q"->abort;(Command="cd ../"->working_directory(_, "../");((string_concat("cd ",Directory,Command),working_directory(_, Directory))->true;true)))),file_os.
fill(X,Y,Grid1,Grid6) :- ((member([X,Y,M],Grid1), member(1,M))-> Grid1=Grid6; (line1(X,Y,X,Y,Grid1,Grid2,1), XM is X-1, XP is X+1, YM is Y-1, YP is Y+1, fill(XM,Y,Grid2,Grid3), fill(XP,Y,Grid3,Grid4), fill(X,YM,Grid4,Grid5), fill(X,YP,Grid5,Grid6))),!.
fill_3d(X,Y,Z,Grid1,Grid6) :- ((member([X,Y,Z,M],Grid1), member(1,M))-> Grid1=Grid6; (line1_3d(X,Y,Z,X,Y,Z,Grid1,Grid2,1), XM is X-1, XP is X+1, YM is Y-1, YP is Y+1, ZM is Z-1, ZP is Z+1, fill_3d(X,Y,ZM,Grid2,Grid3), fill_3d(X,Y,ZP,Grid3,Grid41), fill_3d(XM,Y,Z,Grid41,Grid31), fill_3d(XP,Y,Z,Grid31,Grid4), fill_3d(X,YM,Z,Grid4,Grid5), fill_3d(X,YP,Z,Grid5,Grid6))),!.
find d2t with find lists and pft expand types*/find_lists1(T1T2,L1,L2,TN1,TN2) :-%trace, find_lists(T1T2,L1,L2,true,TN1,TN2).
find("Should a chorus or instrumental come after the first verse?",CorI) :-mind_read(CorI,[c,i1]).
find("Should a chorus or instrumental come after the first verse?",CorI) :-trialy2([c,i1],R),findbest(R,CorI).
find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT) :-mind_read(CPT,[1451, 1564, 1645%%, classical%, classicalpop])./**generatelyricslistsverse(Character,Lyrics1,Lyrics2):-%% read c, o, v reado(Objects), readv(Verbs), charobj( %% character verb object  first%% object verb object pairslyrics1([],_Character,Lyrics,Lyrics) :- !.
find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT) :-trialy2([1451, 1564, 1645%%, classical, classicalpop],R),findbest(R,CPT).
find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT) :-trialy2([1451, 1564, 1645%%, classical, classicalpop],R),findbest(R,CPT)./**generatelyricslistsverse(Character,Lyrics1,Lyrics2):-%% read c, o, v reado(Objects), readv(Verbs), charobj( %% character verb object  first%% object verb object pairslyrics1([],_Character,Lyrics,Lyrics) :- !.
find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT) :-trialy2([1451, 1564, 1645, classical, classicalpop],R),findbest(R,CPT).
find("decimal",Item1) :-mind_read(Item1,[0,1,2,3,4,5,6,7,8,9]).
find("decimal",Item1) :-trialy2([0,1,2,3,4,5,6,7,8,9],R), %% 0 is 0->1 etc.
find("decimal",Item1) :-trialy2([0,1,2,3,4,5,6,7,8,9],R), %% 0 is 0->1 etc.findbest(R,Item1).
find("decimal",Item1) :-trialy2([0,1,2,3,4,5,6,7,8,9],R), %% 0 is 0->1 etc.findbest(R,Item1).find("Should a chorus or instrumental come after the first verse?",CorI) :-trialy2([c,i1],R),findbest(R,CorI).
find(A,Find,B) :- find2(A,Find,[],B), !.
find(A,Terms,B) :-findall(T,(member(T,Terms),search(A,[T])),B),!.
find(["Should a chorus and outro or two solos come after the first solo?",1],COorSS) :-trialy2([[c,o],[s,s]],R),findbest(R,COorSS).
find(["Should a chorus and outro or two solos come after the first solo?",1],COorSS) :-trialy2([[c,o],[s,s]],R),findbest(R,COorSS).find(["Should a chorus and outro or two solos come after the first solo?",2],COorSS) :-mind_read(COorSS,[[c,o],[s,s]]).
find(["Should a chorus and outro or two solos come after the first solo?",2],COorSS) :-trialy2([[c,o],[s,s]],R),findbest(R,COorSS).
find([[a,b],[[a,c]]],[a,_],A).
find([[a,b],[a,[a,e]]],[a,_],A).
find([[a,b],[a,c]],[],A).A = [].
find3(A,Find,B,C) :- A=Find,append(B,[A],C).
find4(A,Find,B,C) :- A=Find,append(B,[A],C).find4(A,Find,B,C) :- copy_term(Find,Find1),  A=[D|E],find2(D,Find1,B,F), find2(E,Find,F,C).
find_2_steps(Last, Formula_Instances1, FI3, Formula_Instances2) :-    find_first(%[Last2, F14, F15],               (member([Add, T], Formula_Instances1),               append(_, [Last], T),                Last2 is Last + 2,                delete(Formula_Instances1, [Add, T], F14),                append(FI3, [[Add, T]], F15))               %F151               ),    %F151 = [Last2, F14, F15],    find_2_steps(Last2, F14, F15, Formula_Instances2),    %append(Formula_Instances21, FI3, Formula_Instances2),     !.
find_2_steps(Last,Formula_Instances1,FI3,Formula_Instances2) :-%trace,%repeat,find_first([Last2,F14,F15],member([Add,T],Formula_Instances1),(Last2 is Last+2,append(_,[Last2],Add),delete(Formula_Instances1,[Add,T],F14),append(FI3,[[Add,T]],F15)),F151),F151=[[Last2,F14,F15]|_],find_2_steps(Last2,F14,F15,Formula_Instances21),%,Formula_Instances2),!.
find_2_steps(_, _, FI3, FI3).
find_addrules_outputvars(OutputVars1,OutputVars3) :-OutputVars1=[],OutputVars3=[_],!.
find_algs(T4) :-phrase_from_file_s(string(String00a), "file_fa.txt"),string_codes(String02b,String00a), SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xxsplit_string(String02b, ".\n\r", ".\n\r", String02cb),findall([String02cd,H],(member(H,String02cb),split_string(H, SepandPad,SepandPad, String02cd)),Texts3),findall([_A,B,C,D],test(A%24%26%24,B,C,D),E),%findall([A,B,C,D],test_types_cases(A,B,_,_,C,D),F),F=[],append(E,F,G),%trace,findall([T2,QueryB,C3,D3],(member(T3,Texts3),find_first_working_alg(T3,G,[T2,QueryB,C3,D3])),T4).
find_and_convert_verbs_to_base :-find_verbs(Text2a2),convert_verbs_to_base(Text2a2,Word12a),term_to_atom(Word12a,Word12),texttoalg(u,u,Word12,u,true,false,false,false,false,false).
find_between(A,Before,After,B) :-(is_list(A)->(flatten(A,A1),findall([A2," "],member(A2,A1),A3),foldr(string_concat,A3,A0));A=A0),string_strings(A0,AL),string_strings(Before,Before_L),string_strings(After,After_L),((Before_L=[],After_L=[],B=A0)->true;((Before_L=[],reverse(AL,A01),reverse(After_L,After_L1),append(_A4,B4,A01),append(After_L1,C4,B4),reverse(C4,B))->true;((After_L=[],append(_A4,B4,AL),append(Before_L,B,B4))->true;((append(_A4,B4,AL),append(Before_L,C,B4),append(B,E,C),append(After_L,_F,E)))))),!.
find_between(A,Before,After,B) :-(is_list(A)->(flatten(A,A1),findall([A2," "],member(A2,A1),A3),foldr(string_concat,A3,A0));A=A0),string_strings(A0,AL),string_strings(Before,Before_L),string_strings(After,After_L),((Before_L=[],After_L=[],B=A0)->true;((Before_L=[],reverse(AL,A01),reverse(After_L,After_L1),append(_A4,B4,A01),append(After_L1,C4,B4),reverse(C4,B))->true;((After_L=[],append(_A4,B4,AL),append(Before_L,B,B4))->true;((append(_A4,B4,AL),append(Before_L,C,B4),append(B,E,C),append(After_L,_F,E)))))),!.% find_between_possibilities("aca b b", ["a", "c"], ["b"], C).% C = "a ".
find_br2(File_contents_list_term,Start,Len_needed,Len_so_far1,Text1,Text2) :-File_contents_list_term=[[Filename,Len]|Rest],phrase_from_file_s(string(File_contents_newlist2), Filename),string_codes(File_contents_newlist1,File_contents_newlist2),atom_string(File_contents_newlist0,File_contents_newlist1),downcase_atom(File_contents_newlist0,File_contents_newlist),term_to_atom(File_contents_newlist_term,File_contents_newlist),%%trace,Start_of_list is Start-Len_so_far1,Len_to_end_of_list is Len - Start_of_list,(Len_needed=<Len_to_end_of_list->(%%trace,C is Start_of_list%-1,length(Texta,Len_needed),length(A,C),append(A,F,File_contents_newlist_term),append(Texta,_,F),append(Text1,Texta,Text2));(B is %%Len_neededLen-Start,length(Texta,B),append(_,Texta,File_contents_newlist_term),append(Text1,Texta,Text3),%text is computed vLen_so_far2 is 0,Start2 is 0,Len_needed2 is Len_needed-B,%%Len_so_far1+Len, find_br2(Rest,Start2,Len_needed2,Len_so_far2,Text3,Text2)) %% go to next list ***).
find_change(%After40,After41,After42,After43) :- ((not(After41=[]),not(After42=[]))-> (After41=[[_,A1]],After42=[[_,A2]], changes(N), N1 is N+1, retractall(changes(_)), assertz(changes(N1)), %append(A1,A2,A3),After43=[[[c,N],A3]] After43=[[[c,N],A1,A2]%,[[d,N],A2] ]); append(After41,After42,After43)),!.
find_combos2([],Combos,Combos).
find_combos2_vintage([],Combos,Combos).
find_combos3(After,Combos,Combos1,Combos2) :- After=[Item1|After2], %trace, (Item1=[_Type,N1,N2],member(Item,[N1,N2])), append(Combos1,Item,Combos3), find_combos3(After2,Combos,Combos3,Combos2).
find_complexity(sqrn, C).
find_data(MA2LN,Q_Table,MA_Table,MA_Table2,Answer_table) :-% find in terms of column headings x% match row and col headings, skip if not found% - skips ans rows if can't find(find_spanning_cols(MA2LN,MA_Table,SC,Q_Table,Answer_table)%->true;%find_spanning_rows(MA2LN,MA_Table,SR,Q_Table,Answer_table)),!.
find_db :-folders(Folders),findall(Texts11,(member(Dept2,Folders), % Dept2->Deptconcat_list(["../Lucian-Academy/",Dept2,"/"],Dept),concat_list([Dept,"/"],Dept1),directory_files(Dept1,F),delete_invisibles_etc(F,G), SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xxfindall(Texts3,(member(Filex1,G),string_concat(Dept1,Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),%downcase_atom(String02b,String00a1),String02b=String00a1,split_string(String00a1, ".\n\r", ".\n\r", String02cb),findall([String02cd,H],(member(H,String02cb),downcase_atom(H,H1),split_string(H1, SepandPad,SepandPad, String02cd)),Texts3)%maplist(append,[Texts3],[Texts31])),Texts1),maplist(append,[Texts1],[Texts11])),Texts21),maplist(append,[Texts21],[Texts2]),% a b phrase_from_file_s(string(Codes_cve), "connectives.txt"),string_codes(String_cve,Codes_cve),atom_to_term(String_cve,Connectives,_),findall([A,WC],(member([B,WC],Texts2),subtract(B,Connectives,A)),C),term_to_atom(C,D82),string_atom(D83,D82),(open_s("find_details3_db.txt",write,Stream1),write(Stream1,D83),close(Stream1)),!.
find_end_notes1(R1,R2) :-%%trace,find_end_notes(R1,[],R3),%%writeln1([r3,R3]),findall(A,member([_,A],R3),B),%%writeln1([b,B])concat_list1(B,R2)%%,%%writeln1([r2,R2]).
find_findall_sys(Name2) :-findall_sys(N1),concat_list(["findall_sys",N1],Name1),get_lang_word(Name1,Name2),%atom_string(Name2,Name1),N2 is N1+1,retractall(findall_sys(_)), assertz(findall_sys(N2)).
find_first_line_number([],-2) :- !.
find_first_term_n(A,Terms,What_is_found) :-find_first((%[Where_searching,What_is_found],member(What_is_found,Terms),search(A,What_is_found))),!.
find_first_working_alg(T3,G,[T2,QueryB,C3,D3]) :-T3=[T1,T2],member(A1,T1),member(A2,T1),not(A1=A2),random_member([_A,B,C,D],G),%writeln([a,A]),%trace,B=[[n,N],Args1],%trace,member_117(B1,Args1),not(B1=[v,_]),%string(B1),[D1]=D,%member([[v, _], B2],D1),%not(B2=[v,_]),member_117(B2,D1),%not(B2=[v,_]),%string(B2),replace_a_word(A1,B1,Args1,[],Args2),replace_a_word(A2,B2,Args2,[],Args3),QueryB=[[n,N],Args3],%trace,replace_a_word(A1,B1,C,[],C2), % it doesn't replace variable namesreplace_a_word(A2,B2,C2,[],C3),replace_a_word(A1,B1,D1,[],D2),replace_a_word(A2,B2,D2,[],D4),%trace,[D4]=D3,%trace,%writeln1(interpret(off,QueryB,C3,D3)),(interpret(off,QueryB,C3,D3)->true;find_first_working_alg(T3,G,[T2,QueryB,C3,D3])),!.
find_g1([],G,G,R,R):- !.
find_g2(T,G1,G2) :-%T=[T1|T2],not(T=[r,%N,T3]),T3=T,get_var_num(N),Name=[n,N],Arrow="->",%Empty=[[]],%trace,find_g1(T3,[],G3,[],Rest),%append(G3,[[Name]],G5),G4=[%[Name,Arrow,Empty],[Name,Arrow,G3]|Rest],append(G1,G4,G2),%foldr(append,G2,G21),!.
find_groups(Ordered_pred_nums0,Ordered_pred_nums1,Ordered_pred_nums22,_) :- Ordered_pred_nums0=[Ordered_pred_nums3|Ordered_pred_nums4], %findall1(Ordered_pred_nums2,( %member(Ordered_pred_nums41,Ordered_pred_nums4),%append([Ordered_pred_nums3],Ordered_pred_nums1,Ordered_pred_nums5),find_groups2(Ordered_pred_nums3,Ordered_pred_nums4,Ordered_pred_nums1,Ordered_pred_nums22).
find_groups2(_,[],Ordered_pred_nums,Ordered_pred_nums) :- !.
find_insertions_and_deletions_vintage(Before,After,Insertions1,Deletions1,Permanent_insertions2) :-%trace, %/* correspondences(Corr), keep1(Kept), findall1(A1,(member(A1,After),get_base_token_number(A1,A10),member([Comm,A10],Corr),%(((string_concat(Comm1,",",Comm)->true;Comm1=Comm),catch(term_to_atom(A2,Comm1),_,fail),A2=[[_,Name],Args],length(Args,Arity),member([Name,Arity],Kept)%)->true;Comm=",")),Permanent_insertions1),sort(Permanent_insertions1,Permanent_insertions), %Permanent_insertions=[], %()subtract(After,After1,After2), %*/  findall1([M21,M11],(member(M21,After),get_base_token_number(M21,M11)),After2), findall1([M22,M12],(member(M22,Before),get_base_token_number(M22,M12)),Before2),  %findall1(P11,(member([P11,P12],M31),member([P13,P14],M32),not(P12=P14)),After11), %sort(After11,After1), %findall1(P11,(member([P11,P12],M32),member([P13,P14],M31),not(P12=P14)),Before11),% sort(Before11,Before1),%trace, %subtract(M31,M32,After1), %subtract(M32,M31,Before1), subtract_civ(After2,Before2,[],After1), subtract_civ(Before2,After2,[],Before1),  %Before1=Insertions, %After1=Deletions.
find_instances(A21,Instances1) :-sub_term_wa([var|_], A21, Instances1),!.
find_instances(A21,Instances1a) :-sub_term_wa([var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3], A21, Instances1),findall([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1)%,number(VN)),Instances1a),!. % variables and values% call from sf x% formulas may not be printed% sums, subtractions - in same row or col (get all same tables, rows, cols, item nums)summarise_formulas2(%_Ad2,_Q2,A20,A26) :-find_instances(A20,Instances1a),group_by_table_rows(Instances1a,Instances1b),find_row_sums(_A20,Instances1b,Instances1c),%trace,foldr(put_sub_term_wa_ae,Instances1c,A20,A22),% by table x, row/col, item% forms across each of these to simplify% group items as row cells and find sum, subtraction% use forms not trcis (convert)% process (find r/c sums in) rows/cols x: with 1 num per cell% X to simplifying x% process with foldr% simplify by i, row/col, (table x) - /*find_instances(A22,Instances1a11),group_by_table_rows(Instances1a11,Instances1b11),find_row_subtractions(A22,Instances1b11,Instances1c11)foldr(put_sub_term_wa_ae,Instances1c11,A22,A23),find_instances(A23,Instances1c1),group_by_table_cols(Instances1c1,Instances1d),find_col_sums(A23,Instances1d,Instances1e)foldr(put_sub_term_wa_ae,Instances1e,A23,A24),find_instances(A24,Instances1c12),group_by_table_cols(Instances1c12,Instances1d2),find_col_sums(A24,Instances1d2,Instances1e2)foldr(put_sub_term_wa_ae,Instances1e2,A24,A25),*/%A20=A22,(A22=A20->A26=A20;summarise_formulas2(A22,A26)),!.
find_last([],[]) :- !.find_last(A,B) :-reverse(A,C),C=[B|_].
find_lists2([],Sets,Sets) :- !.
find_lists3(L1,L2,L3,Rest) :-%reverse(L1,L11),L1=[L4|L5],match_char(L4,L41),%reverse(L5,L511),find_lists4(L2,L5,L4,L41,L3,Rest).find_lists4(L2,L5,L4,L41,L3,Rest) :-member(L4,L5),sub_list(L5,Before_list,[L41],After_list),Before_list1=[L4|Before_list],After_list1=[L41|After_list],%Before_list1=[L4],After_list1=[])),find_lists32(Before_list1,[],L6,_),%(After_list=[]->L7=[];%(%find_lists31([L4|After_list],[],L7)->true;%split13(L6,After_list,L3),!.find_lists3(After_list1,[],L7,Rest),%fail,%trace,foldr(append,[[L6,L7]],L8),foldr(append,[L2,L8],L33),L3=L33.find_lists4(L2,L5,L4,L41,L3,Rest) :-not((member(L41,L5),sub_list(L5,_Before_list,[L4],_After_list))),%foldr(append,[L2,[L6,L7]],L3));append(L2,[L4],L6),find_lists3(L5,L6,L3,Rest).%find_lists3(L1,L2,L3) :-%append(L1,L2,L3).
find_lists3a(L1,L32,Rest) :-%writeln1(find_lists3a(L1,L3)),%trace,%trace,%findall(L91,find_lists3(L1,[],L91,_Rest_a),%,L100),%trace,(fail%L91=[[r, L92]]->(L4=_L92,Flag=true);(L4=L91,Flag=false)),%trace,(L4=[]->L4=L3;(L4=[_L2]->L4=L3;(L4=[L2|L31],%trace,check14(L31,L2,[],L5,Rest),%Rest=[],(L5=[[r|_]|_]->L5=L3;((L5=[L51]->true;L51=L5),L3=[[r,L51]]))))),(Flag=true->L32=[[r,L3]];L32=L3),!.
find_lppm_deps(UR3) :-%open_file_s("../List-Prolog-Package-Manager/lppm_registry.txt",Term),/*Term=[[u,1,_,[[u,2],[u,3]]],[u,2,_,[]],[u,3,_,[[u,3]]]],*/%Term=[[u,1,_,[]],[u,2,_,[]]],Term=[[u,1,_,[[u,2]]],[u,2,_,[[u,3]]],[u,3,_,[]]],findall([U,R,D],member([U,R,_,D],Term),URD),findall(UR21,(member([U,R,D],URD),find_deps1(D,Term,[],UR2,[],_), ((flatten(UR2,UR22),UR22=[])->UR23=[U,R];UR23=[U,R,UR2]),UR21=UR23),UR3),!.
find_mapped_item(Item3,Item2,Map) :-member([Item3,Item4],Map),string_concat(Item2," 01",Item4).
find_mapped_item(Item3,Item2,Map) :-member([Item3,Item4],Map),string_concat(Item2," 01",Item4).too_long1(List4) :-too_long2(List4,0,N),N>=250.
find_min_max_x_y_z(Matrix,Min_X,Max_X,Min_Y,Max_Y,Min_Z,Max_Z) :- findall(X,(member([X,_Y,_Z,C],Matrix),C=(*)),Xs), sort(Xs,Xs2), append([Min_X],_,Xs2), append(_,[Max_X],Xs2), findall(Y,(member([_X,Y,_Z,C],Matrix),C=(*)),Ys), sort(Ys,Ys2), append([Min_Y],_,Ys2), append(_,[Max_Y],Ys2), findall(Z,(member([_X,_Y,Z,C],Matrix),C=(*)),Zs), sort(Zs,Zs2), append([Min_Z],_,Zs2), append(_,[Max_Z],Zs2).
find_new_algorithms :-phrase_from_file_s(string(String00a), "combo_of_algs.txt"),string_codes(String02b,String00a),atom_to_term(String02b,Algorithms,[]),folders(Courses1),findall(_,(member(Course,Courses1),writeln(Course)),_),repeat,writeln("Enter Book of algorithm:"),read_string(user_input,"\n","\r",_,B),member(B,Courses1),repeat,get_essays(B,Texts1),findall(_,(member(Text,Texts1),writeln(Text)),_),writeln("Enter Essay of algorithm:"),read_string(user_input,"\n","\r",_,E),member(E,Texts1),repeat,findall([B,E|Rest1],member([B,E|Rest1],Algorithms),Algorithms1a),sort(Algorithms1a,Algorithms1a2),findall(PN2,member([B,E,PN2|_],Algorithms),Algorithms1b),sort(Algorithms1b,Algorithms1),findall(_,(member(A,Algorithms1),writeln(A)),_),writeln("Enter paragraph number of algorithm :"),read_string(user_input,"\n","\r",_,PN),number_string(PN1,PN),repeat,findall([B,E,PN1|Rest2],member([B,E,PN1|Rest2],Algorithms1a2),Algorithms1c),sort(Algorithms1c,Algorithms1c2),findall(SN2,member([B,E,PN1,SN2|_],Algorithms1a2),Algorithms1d),sort(Algorithms1d,Algorithms2),findall(_,(member(A,Algorithms2),writeln(A)),_),writeln("Enter sentence number of algorithm :"),read_string(user_input,"\n","\r",_,SN),number_string(SN1,SN),repeat,%findall([B,E,PN1,SN1|Rest2],member([B,E,PN1,SN1|Rest2],Algorithms1c2),Algorithms1e),%sort(Algorithms1e,Algorithms1e2),findall(WHD2,member([B,E,PN1,SN1,WHD2|_],Algorithms1c2),Algorithms1f),sort(Algorithms1f,Algorithms3),findall(_,(member(A,Algorithms3),writeln(A)),_),writeln("Enter what the algorithm is (verb(object)), how it will work and its data:"),read_string(user_input,"\n","\r",_,WHD),append(Algorithms,[[B,E,PN1,SN1,WHD]],Algorithms4),term_to_atom(Algorithms4,String02a_b),string_atom(String02a_c,String02a_b),(open_s("combo_of_algs.txt",write,Stream1),write(Stream1,String02a_c),close(Stream1)),!.
find_number([var,_,_,_,_,1,_,_,_,_,_],A).A = 1.
find_path(20,30,200,1,25).
find_pos("right",v,_) :- !.
find_pos(Item,POS2,BrDict012) :-POS1="right",member([Item,POS1],BrDict012),POS2=v,!.
find_pos(Item,POS2,BrDict012) :-member([Item,POS1],BrDict012),POS1="right",POS2=v,!.
find_pred_id(N2) :-pred_id(N1),N2 is N1+1,retractall(pred_id(_)), assertz(pred_id(N2)).
find_rev(Dir,D_code,V,V1) :- Dir=l, D_code=[],V=V1.
find_sent(A,F) :-split_string(A,"\n\r","\n\r",B),findall([B14,"\n"],(member(B11,B),split_string(B11,".",".",B12),findall([B13,"."],member(B13,B12),B1),flatten(B1,B15),(string_concat(_,".",B11)->B14=B15;append(B14,[_],B15))),B2),flatten(B2,B3),((string_concat(_,"\n",A)->true;string_concat(_,"\r",A))->B21=B3;append(B21,[_],B3)),findall(C,(member(C,B21),string_chars(C,D),not(forall(member(E,D),char_type(E,white)))),F),!.
find_spaces_after(A,A52,A8) :-string_chars(A,A1),findall(A2,(member(A3,A1),atom_string(A3,A2)),A4),reverse(A4,A41),append(A5,A6,A41),append([A7],_A8,A6),not(is_space(A7)),reverse(A6,A61),foldr(string_concat,A61,A8),reverse(A5,A51),foldr(string_concat,A51,A52),!.
find_spaces_before_and_after(A,Before,B,After) :-find_spaces_before(A,Before,C),find_spaces_after(C,After,B),!.
find_sys(Name2) :-sys(N1),concat_list(["sys",N1],Name1),get_lang_word(Name1,Name2),%atom_string(Name2,Name1),N2 is N1+1,retractall(sys(_)), assertz(sys(N2)).
find_tails([],V,V) :- !.
find_tails1([G,Val1],V4,V2,V3) :- V4=[[G2,[Val2|Val1]]|V6], append(V2,[[G,[['&',tail],G2]]],V5), find_tails1([G2,[Val2|Val1]],V6,V5,V3),!.
find_tests_from_repos :-working_directory1(A,A),(exists_directory('../luciancicd-cicd-tests')->true;make_directory('../luciancicd-cicd-tests')),repositories_paths(K),omit_paths(Omit),%findall1(Omit1,(member(Omit2,Omit),atom_string(Omit1,Omit2)),Omit3),findall1([K1,G4],(member(K1,K), directory_files(K1,F),delete_invisibles_etc(F,G),%findall1(H,(member(H,G),not(string_concat("dot",_,H)),subtract(G,Omit,G1),findall1(G3,(member(G2,G1),string_concat(G2,"/",G3)),G4)%not(member(G,Omit))),K01),%trace,%foldr(append,K0,K01),working_directory1(Old_D,Old_D),%trace,findall1(Tests1,(member([D,K31],K01),working_directory1(_,Old_D),working_directory1(_,D),%member(K2,K31),%exists_directory(K2),process_directory_tests(K31,%_G, %Omit,% true, Tests1)%),Tests) ),Tests2), foldr(append,Tests2,Tests),  working_directory1(_,A),  (exists_directory('../luciancicd-cicd-tests')->  (time1(Time),foldr(string_concat,["../luciancicd-cicd-tests",Time,"/"],Folder1),%concat_list3(File1,[".txt"],File2),mv_lc("../luciancicd-cicd-tests/",Folder1) %foldr(string_concat,["rsync -av --exclude=\".*\"  ../private2/luciancicd-cicd-tests/ ",Folder1],Command314), %catch(bash_command(Command314,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],Text41),writeln1(Text41),abort)) ); ( %exists_directory('../private2/luciancicd-cicd-tests')->true;%make_directory('../private2/luciancicd-cicd-tests')true)),findall1(_,(member([K21,Tests521],Tests),open_s(K21,write,S21),write(S21,Tests521),close(S21)),_),%writeln("All tests were successful."),sleep(2),!.
find_time(H,M,S) :-trialy2_15("0",H11),trialy2_15("1",H12),trialy2_15("2",H13),H1L=[H11,H12,H13],sort(H1L,H1A),reverse(H1A,H1B),H1B=[[_,H1]|_Rest1],(H1="2"->(trialy2_30("0",H21),trialy2_30("1",H22),trialy2_30("2",H23),trialy2_30("3",H24),H2L=[H21,H22,H23,H24],sort(H2L,H2A),reverse(H2A,H2B),H2B=[[_,H2]|_Rest2]);(trialy2_30("0",H21),trialy2_30("1",H22),trialy2_30("2",H23),trialy2_30("3",H24),trialy2_30("4",H25),trialy2_30("5",H26),trialy2_30("6",H27),trialy2_30("7",H28),trialy2_30("8",H29),trialy2_30("9",H210),H2L=[H21,H22,H23,H24,H25,H26,H27,H28,H29,H210],sort(H2L,H2A),reverse(H2A,H2B),H2B=[[_,H2]|_Rest2])),trialy2_15("0",M11),trialy2_15("1",M12),trialy2_15("2",M13),trialy2_15("3",M14),trialy2_15("4",M15),trialy2_15("5",M16),M1L=[M11,M12,M13,M14,M15,M16],sort(M1L,M1A),reverse(M1A,M1B),M1B=[[_,M1]|_Rest3],trialy2_30("0",M21),trialy2_30("1",M22),trialy2_30("2",M23),trialy2_30("3",M24),trialy2_30("4",M25),trialy2_30("5",M26),trialy2_30("6",M27),trialy2_30("7",M28),trialy2_30("8",M29),trialy2_30("9",M210),M2L=[M21,M22,M23,M24,M25,M26,M27,M28,M29,M210],sort(M2L,M2A),reverse(M2A,M2B),M2B=[[_,M2]|_Rest4],trialy2_15("0",S11),trialy2_15("1",S12),trialy2_15("2",S13),trialy2_15("3",S14),trialy2_15("4",S15),trialy2_15("5",S16),S1L=[S11,S12,S13,S14,S15,S16],sort(S1L,S1A),reverse(S1A,S1B),S1B=[[_,S1]|_Rest5],trialy2_30("0",S21),trialy2_30("1",S22),trialy2_30("2",S23),trialy2_30("3",S24),trialy2_30("4",S25),trialy2_30("5",S26),trialy2_30("6",S27),trialy2_30("7",S28),trialy2_30("8",S29),trialy2_30("9",S210),S2L=[S21,S22,S23,S24,S25,S26,S27,S28,S29,S210],sort(S2L,S2A),reverse(S2A,S2B),S2B=[[_,S2]|_Rest6],string_concat(H1,H2,H),string_concat(M1,M2,M),string_concat(S1,S2,S).
find_time(H,M,S) :-trialy2_15("0",H11),trialy2_15("1",H12),trialy2_15("2",H13),H1L=[H11,H12,H13],sort(H1L,H1A),reverse(H1A,H1B),H1B=[[_,H1]|_Rest1],(H1="2"->(trialy2_30("0",H21),trialy2_30("1",H22),trialy2_30("2",H23),trialy2_30("3",H24),H2L=[H21,H22,H23,H24],sort(H2L,H2A),reverse(H2A,H2B),H2B=[[_,H2]|_Rest2]);(trialy2_30("0",H21),trialy2_30("1",H22),trialy2_30("2",H23),trialy2_30("3",H24),trialy2_30("4",H25),trialy2_30("5",H26),trialy2_30("6",H27),trialy2_30("7",H28),trialy2_30("8",H29),trialy2_30("9",H210),H2L=[H21,H22,H23,H24,H25,H26,H27,H28,H29,H210],sort(H2L,H2A),reverse(H2A,H2B),H2B=[[_,H2]|_Rest2])),trialy2_15("0",M11),trialy2_15("1",M12),trialy2_15("2",M13),trialy2_15("3",M14),trialy2_15("4",M15),trialy2_15("5",M16),M1L=[M11,M12,M13,M14,M15,M16],sort(M1L,M1A),reverse(M1A,M1B),M1B=[[_,M1]|_Rest3],trialy2_30("0",M21),trialy2_30("1",M22),trialy2_30("2",M23),trialy2_30("3",M24),trialy2_30("4",M25),trialy2_30("5",M26),trialy2_30("6",M27),trialy2_30("7",M28),trialy2_30("8",M29),trialy2_30("9",M210),M2L=[M21,M22,M23,M24,M25,M26,M27,M28,M29,M210],sort(M2L,M2A),reverse(M2A,M2B),M2B=[[_,M2]|_Rest4],trialy2_15("0",S11),trialy2_15("1",S12),trialy2_15("2",S13),trialy2_15("3",S14),trialy2_15("4",S15),trialy2_15("5",S16),S1L=[S11,S12,S13,S14,S15,S16],sort(S1L,S1A),reverse(S1A,S1B),S1B=[[_,S1]|_Rest5],trialy2_30("0",S21),trialy2_30("1",S22),trialy2_30("2",S23),trialy2_30("3",S24),trialy2_30("4",S25),trialy2_30("5",S26),trialy2_30("6",S27),trialy2_30("7",S28),trialy2_30("8",S29),trialy2_30("9",S210),S2L=[S21,S22,S23,S24,S25,S26,S27,S28,S29,S210],sort(S2L,S2A),reverse(S2A,S2B),S2B=[[_,S2]|_Rest6],string_concat(H1,H2,H),string_concat(M1,M2,M),string_concat(S1,S2,S).trialy2_6(Label,RA) :-%%writeln([testing,Label]),trialy1(R1),trialy1(R2),trialy1(R3),trialy1(R4),trialy1(R5),trialy1(R6), /**trialy1(R7),trialy1(R8),trialy1(R9),trialy1(R10),trialy1(R11),trialy1(R12),trialy1(R13),trialy1(R14),trialy1(R15),trialy1(R16),trialy1(R17),trialy1(R18),trialy1(R19),trialy1(R20),trialy1(R21),trialy1(R22),trialy1(R23),trialy1(R24),trialy1(R25),trialy1(R26),trialy1(R27),trialy1(R28),trialy1(R29),trialy1(R30), **/R=[R1,R2,R3,R4,R5,R6 /**,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30 **/],%%(member(true,R)->(aggregate_all(count, member(true,R), Count),RA=[Count,Label].%%,writeln([Label,Count,"/10"]));true).
find_unique_variables(S,UV) :-findall([S0,S2],(member([S0,S1],S),%sub_term_types_wa([string,atom,number],S1,In1),sub_term_types_wa([heuristic(var_or_data(A),A)%string,atom,number%heuristic((only_item(O),%(string(O)->true;(atom(O)->true;number(O))),%not_r_o_nd_types(O)),O)],S1,In1),%),C1)findall(Q,member([_,Q],In1),Q2),%remove_dups(Q1,Q2),findall([Add,AN],(member(Q3,Q2),member([Add,Q3],In1),%trace,((Q3=[Type,Data],type_s2a1(Type))->(find_unique_variables(Data,AN1),AN=[Type,AN1]);(vars_s2a(Vars),(member([Q3,Q4],Vars)->AN=Q4;(get_num_s2a(N),vars_base_s2a(Letter),atom_concat(Letter,N,AN),retractall(vars_s2a(_)),append(Vars,[[Q3,AN]],Vars2),assertz(vars_s2a(Vars2))%change_var_base))))),In2),foldr(put_sub_term_wa_ae,In2,S1,S2)%change_var_base),UV).
find_v_sys(V_sys) :- get_lang_word("v",Dbw_v), find_sys(Sys_name), V_sys=[Dbw_v,Sys_name],!.
findall([Sent,Chain4],(member([B,Sent],Texts3),%findnsols(1,Chain2,(%member(A,[1,2,3]),B).
findall([[Address,[function,T,R,C,XY2,F21]],XA2],(test_p(member([Address,Term],Instances1)),test_p(Term=[function,T,R,C,%IN,FEC,F2]),findall(XY,(test_p(member(XY1,FEC)),((test_p(number1(XY1,XY11)),test_p(XY1=[var,T2,R2,C2,IN2,_XY12,_VN2,_TP2,_RP2,_CP2,_INP2]),test_p(get_variable_n(VN)),test_p(XY=[var,T2,R2,C2,IN2,XY11,VN,TP,RP,CP,INP]))->true;test_p(XY=XY1))),XY2),findall(XA,(member(XA,XY2),test_p(XA=[var,T,R,C,_IN,XY1,VN,TP,RP,CP,INP])),XA2),test_p(sub_term_wa([var,_,_,_,_,_,_,_,_,_,_], F2, Instances3)),findall([Address1,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],(test_p(member([Address1,Term1],Instances3)),test_p(Term1=[var,T1,R1,C1,IN1,V,_,TP1,RP1,CP1,INP1]),test_p(member([var,_,_,_,_,V,VN,_,_,_,_],XA2))),New_pairs),test_p(foldr(put_sub_term_wa_ae,New_pairs,F2,F21))),New_pairs2),test_p(findall(X,member([X,_],New_pairs2),New_pairs21)),test_p(findall(X,member([_,X],New_pairs2),XA20)),%trace,test_p(foldr(append,XA20,XA2)),test_p(foldr(put_sub_term_wa_ae,New_pairs21,[Ad1,Q1],[Ad2,Q2])),% A2test_p(sub_term_wa([function,_,_,_,FEC,F2], A1, Instances4)),% A = [[[1, 1], [a, b]], [[1, 2], [a, c]]].
findall1(A,B,C) :- findall(A,B,C),!.
findall_until_fail(A,B,B_condition,C) :-D=(B,(B_condition->true;(!,fail))),findall(A,D,C),!.
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=1451,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?%%repeat,trialy2(Notes,R1),findbest(R1,N2),versechorussoloprogression1451(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),versechorussoloprogression1451(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=1564,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?%%repeat,trialy2(Notes,R1),findbest(R1,N2),versechorussoloprogression1564(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),versechorussoloprogression1564(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=1451,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat,mind_read(N2,Notes),versechorussoloprogression1451(N1,N2,Progression),mind_read(Progression2,Progression),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),versechorussoloprogression1451(N1,N2,Progression3),mind_read(Progression4,Progression3),harmony(Form,CPT,Progression4,Harmony1,Harmony2).findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=1564,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat, %% *1 see other *1mind_read(N2,Notes),versechorussoloprogression1564(N1,N2,Progression),mind_read(Progression2,Progression),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),versechorussoloprogression1564(N1,N2,Progression3),mind_read(Progression4,Progression3),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=1451,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat,trialy2(Notes,R1),findbest(R1,N2),versechorussoloprogression1451(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),versechorussoloprogression1451(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=1564,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat, %% *1 see other *1trialy2(Notes,R1),findbest(R1,N2),versechorussoloprogression1564(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),versechorussoloprogression1564(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT='1451',%%(CPT=1451->findall(A,note0(_,A),Notes);%%findall(A,note0(_,A),Notes)),%% What note should the phrase end on?%%repeat,%%trialy2(Notes,R1),%%findbest(R1,N2),%%versechorussoloprogression1451(N1,N2,Progression),%%trialy2(Progression,R2),%%findbest(R2,Progression2),repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _End21, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT='1564',repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT='1451',%%(CPT=1451->findall(A,note0(_,A),Notes);%%findall(A,note0(_,A),Notes)),%% What note should the phrase end on?%%repeat,%%trialy2(Notes,R1),%%findbest(R1,N2),%%versechorussoloprogression1451(N1,N2,Progression),%%trialy2(Progression,R2),%%findbest(R2,Progression2),repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _End21, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _End2, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT='1564',repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _End2, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _End2, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findnsols1(B,WN,Sent,DB,T) :-%member(A,[1,2,3]),B).
findprogram(_FunctionName,Relations,FunctionNumber,Program,Program) :-not(member([[_Item1,_Type1,_Range1,FunctionNumber,_Position1],[_Item2,_Type2,_Range2,FunctionNumber,_Position2]],Relations)),!.
findr4(R4) :-List1=[0,1,2,3,4,5,6,7,8,9],Trials is 10,%catch((trialy22(List1,Trials,[],R1),findbest2(R1,R4)%writeln1([item,Item]))   %_,%findr4(R4)%).
findr4(R4) :-List1=[0,1,2,3,4,5,6,7,8,9],Trials is 30,%catch((trialy22(List1,Trials,[],R1),findbest2(R1,R4)%writeln1([item,Item]))   %_,%findr4(R4)%).%%number_string(R3,R2),formr5(RList,Upper,Length,R5) :-%%findall(D,(member(C,RList),floor(C,D)),RList2),concat_list2A(RList,R5A),number_string(R5B,R5A),%%R5B=R5A,R51 is floor((R5B/Upper)*Length),(R5B=Upper->R5 is R51-1;R5=R51).
findr4(R4) :-List1=[0,1,2,3,4,5,6,7,8,9],Trials is 30,trialy22(List1,Trials,[],R1),findbest2(R1,R4).
findr4(R4) :-List1=[0,1,2,3,4,5,6,7,8,9],Trials is 30,%catch((trialy22(List1,Trials,[],R1),findbest2(R1,R4)%writeln1([item,Item]))   %_,%findr4(R4)%).
findresult3([],_Result,Result2,Result2).
findresult3([],_Result,Result2,Result2).findresult3(Arguments1,Result1,Result2,Result3) :-Arguments1=[Value|Arguments2],expressionnotatom(Value),append(Result2,[Value],Result4),        findresult3(Arguments2,Result1,Result4,Result3).
findresult3([],_Result,Result2,Result2):-!.
findrhyme(Phrase1,Phrase2,Names1,Names2) :-reverse(Phrase1,Reverse),Reverse=[Lastsyllable|_],readv(Vs),reado(Os),makenames(5,[],N2s1),append(N2s1,Names1,N2s),append(Os,N2s,Os2),trialy2(Os2,R2),findbest(R2,R21),trialy2(Vs,R1),findbest(R1,R11),findall(C,(member(C,N2s),reverse(C,B),B=[E|_],rhymes2(E,Lastsyllable)),Phrases22),trialy2(Phrases22,R3),findbest(R3,R31),append_list(R21,[R11,R31],Phrase2),(member(R21,N2s1)->append(Names1,[R21],Names3);Names3=Names1),(member(Phrases22,N2s1)->append(Names3,[R21],Names2);Names2=Names3).
findrhyme(Phrase1,Phrase2,Names1,Names2) :-reverse(Phrase1,Reverse),Reverse=[Lastsyllable|_],readv(Vs),reado(Os),makenames(5,[],N2s1),append(N2s1,Names1,N2s),append(Os,N2s,Os2),trialy2A(Os2,R2),findbest(R2,R21),trialy2A(Vs,R1),findbest(R1,R11),findall(C,(member(C,N2s),reverse(C,B),B=[E|_],rhymes2(E,Lastsyllable)),Phrases22),trialy2A(Phrases22,R3),findbest(R3,R31),append_list(R21,[R11,R31],Phrase2),(member(R21,N2s1)->append(Names1,[R21],Names3);Names3=Names1),(member(Phrases22,N2s1)->append(Names3,[R21],Names2);Names2=Names3).
findrulesflowingtopv1([[append,[a,e,c]],[member,[a,e]]],[a],[a,e,c],[c],[],R,F).R = [[append, [a, e, c]], [member, [a, e]]]check optimise works with member ef vmember ef and member in inputvars2 (cde) voptimise - aeg (remove e), vdoes optimise work with multiple rules with same output vdelete returning progs in optimise vcut rule -aea cant point to itself in optimise - needs iterative deepeningaec where e not in iv1 or another pred, try first or second in prog vdon't pass rule to lower predicates vdon't choose outputs from non new var vdon't run repeat predsmake predicate, clause writermember predicates returning no output**/caw00(Debug,PredicateName,Rules,MaxLength,TotalVars,InputVarList,OutputVarList,Program1,Program2) :-retractall(debug(_)),    assertz(debug(Debug)),retractall(totalvars(_)),    assertz(totalvars(TotalVars)),caw0(PredicateName,Rules,MaxLength,InputVarList,OutputVarList,Program1,Program2).
findsentence(Sentence,Names1,Names2) :-makename(N1),readv(Vs),reado(Os),makenames(5,[],N2s1),append(N2s1,Names1,N2s),mind_read(R11,Vs),append(Os,N2s,Os2),mind_read(R21,Os2),append_list(N1,[R11,R21],Sentence),(member(R21,N2s1)->append(Names1,[R21],Names2);Names2=Names1).findrhyme(Phrase1,Phrase2,Names1,Names2) :-reverse(Phrase1,Reverse),Reverse=[Lastsyllable|_],readv(Vs),reado(Os),makenames(5,[],N2s1),append(N2s1,Names1,N2s),append(Os,N2s,Os2),mind_read(R21,Os2),mind_read(R11,Vs),findall(C,(member(C,N2s),reverse(C,B),B=[E|_],rhymes2(E,Lastsyllable)),Phrases22),mind_read(R31,Phrases22),append_list(R21,[R11,R31],Phrase2),(member(R21,N2s1)->append(Names1,[R21],Names3);Names3=Names1),(member(Phrases22,N2s1)->append(Names3,[R21],Names2);Names2=Names3).
findsentence(Sentence,Names1,Names2) :-makename(N1),readv(Vs),reado(Os),makenames(5,[],N2s1),append(N2s1,Names1,N2s),trialy2(Vs,R1),findbest(R1,R11),append(Os,N2s,Os2),trialy2(Os2,R2),findbest(R2,R21),append_list(N1,[R11,R21],Sentence),(member(R21,N2s1)->append(Names1,[R21],Names2);Names2=Names1).
findsentence(Sentence,Names1,Names2) :-makename(N1),readv(Vs),reado(Os),makenames(5,[],N2s1),append(N2s1,Names1,N2s),trialy2A(Vs,R1),findbest(R1,R11),append(Os,N2s,Os2),trialy2A(Os2,R2),findbest(R2,R21),append_list(N1,[R11,R21],Sentence),(member(R21,N2s1)->append(Names1,[R21],Names2);Names2=Names1).
first_directory('../gitl_test/').
first_directory(CWD1) :-working_directory(CWD1,CWD1),!.
first_n_words([],_,String,String) :- !.
first_n_words([],_,String,String) :- !.first_n_words(_String1,0,String,String) :- !.
flip_x_y(Model_question_table,Model_question_table1) :-/*length(Model_question_table,Y),Model_question_table=[Row|_],length(Row,X),numbers(X,1,[],Xs),numbers(Y,1,[],Ys),findall(X1,(member(X2,Xs),get_item_n(Model_question_table,X2,Col1),findall(Y1,(member(Y2,Ys),get_item_n(Col1,Y2,Cell),*/transpose(Model_question_table, Model_question_table1).
flush_caches :-open_string_file_s("arg_cache.txt",File_string_b_cache), term_to_atom([_Cache_N,File_string2_b_cache],File_string_b_cache),open_string_file_s("alg_cache.txt",File_string_b_cache2), term_to_atom([_Cache_N2,File_string2_b_cache2],File_string_b_cache2),  string_concat(File_string2_b_cache,File_string2_b_cache2,N7),   %word_count(["string",N7],WC),  texttobr2(u,u,N7,u,[auto,on]), t2ab(u,u,N7,u,on), term_to_atom([0,""],Cache_atom),  open_s("arg_cache.txt",write,Stream1a_cache),write(Stream1a_cache,Cache_atom),close(Stream1a_cache),  open_s("alg_cache.txt",write,Stream1a_cache1),write(Stream1a_cache1,Cache_atom),close(Stream1a_cache1),!.
foldl1(_,[],A,A):-!.foldl1(Function,[A1|D],B,C) :- functor(A,Function,3),arg(1,A,B),arg(2,A,A1),arg(3,A,A3),A, foldl1(Function,D,A3,C),!.
foldr(append,A,B) :-foldr(append,A,[],B),!.%foldr(append1,A,B) :-%foldr(append1,A,[],B),!.foldr(string_concat,A,B) :-foldr(string_concat,A,"",B),!.
foldr(atom_concat,A,B) :-foldr(atom_concat,A,'',B),!.concat_list_terms(A,B) :-findall(X,(member(X1,A),((string(X1)->true;(atom(X1)->true;number(X1)))->X=X1;term_to_atom(X1,X)%,term_to_atom(X2,X))),A1),concat_list(A1,B),!.concat_list([],""):-!.
foldr(plus,A,B) :-foldr(plus,A,0,B).
foldr(put_subterm_wa_ae,Instances, Term1, Term2) :-foldr(put_sub_term_wa_ae,Instances, Term1, Term2).
foldr(put_subterm_wa_ae_smooth, Instances, Term1, Term2) :-foldr(put_sub_term_wa_ae_smooth, Instances, Term1, Term2).
food_dissolver_game :-%tty_size(R,_C),R=8,numbers(R,1,[],Rs),numbers(3,1,[],Ns),random_permutation(Ns,Ns2),findall(" ",member(_,Rs),L),append([4],L,L1),food_dissolver_game2(Ns2,L1).
food_dissolver_game2(Ns,L) :-%findall(_,(member(L3,L),writeln(L3),nl),_),writeln(L),append(_,[N1],L),(not(N1=" ")->writeln("Game Over - You Lost.");%(Ns=[]->((not((member(N,L),number(N))),Ns=[])->writeln("Game Over - You Won.");(move_down_fd(Ns,Ns1,L,L1),food_dissolver_game2(Ns1,L1)))),!.
form(Form) :-Form1=[n,v1],find("Should a chorus or instrumental come after the first verse?",CorI),(CorI=c->(append(Form1,[c,v2,c,t2,s],Form2),find(["Should a chorus and outro or two solos come after the first solo?",1],COorSS),(COorSS=[c,o]->(append(Form2,[c],Form3),append(Form3,[o],Form));COorSS=[s,s],append(Form2,[s],Form3),append(Form3,[s],Form)));(CorI=i1,append(Form1,[i1,v2,c,t2,s],Form2),find(["Should a chorus and outro or two solos come after the first solo?",2],COorSS),(COorSS=[c,o]->(append(Form2,[c],Form3),append(Form3,[o],Form));COorSS=[s,s],append(Form2,[s],Form3),append(Form3,[s],Form)))).
form(Form) :-Form1=[n,v1],find("Should a chorus or instrumental come after the first verse?",CorI),(CorI=c->(append(Form1,[c,v2,c,t2,s],Form2),find(["Should a chorus and outro or two solos come after the first solo?",1],COorSS),(COorSS=[c,o]->(append(Form2,[c],Form3),append(Form3,[o],Form));COorSS=[s,s],append(Form2,[s],Form3),append(Form3,[s],Form)));(CorI=i1,append(Form1,[i1,v2,c,t2,s],Form2),find(["Should a chorus and outro or two solos come after the first solo?",2],COorSS),(COorSS=[c,o]->(append(Form2,[c],Form3),append(Form3,[o],Form));COorSS=[s,s],append(Form2,[s],Form3),append(Form3,[s],Form)))).makename(N3) :-trialy2A(["Ack","Luc","Add","All","Brae","Skye","Whist","Dix","Wilb","Duk","Le","Ven","Syd","Don","Count","Black","Nei"],R1),findbest(R1,N1),trialy2A(["an","ae","ye","ler","ee","ur","ard","ice","ney","ald","ess","el"],R2),findbest(R2,N2),append([N1],[N2],N3).
form(Form) :-Form1=[n,v1],find("Should a chorus or instrumental come after the first verse?",CorI),(CorI=c->(append(Form1,[i1,v2,c,t2,s],Form2),find(["Should a chorus and outro or two solos come after the first solo?",1],COorSS),(COorSS=[c,o]->(append(Form2,[c],Form3),append(Form3,[o],Form));COorSS=[s,s],append(Form2,[s],Form3),append(Form3,[s],Form)));(CorI=i1,append(Form1,[i1,v2,c,t2,s],Form2),find(["Should a chorus and outro or two solos come after the first solo?",2],COorSS),(COorSS=[c,o]->(append(Form2,[c],Form3),append(Form3,[o],Form));COorSS=[s,s],append(Form2,[s],Form3),append(Form3,[s],Form)))).makename(N3) :-trialy2(["Ack","Luc","Add","All","Brae","Skye","Whist","Dix","Wilb","Duk","Le","Ven","Syd","Don","Count","Black","Nei"],R1),findbest(R1,N1),trialy2(["an","ae","ye","ler","ee","ur","ard","ice","ney","ald","ess","el"],R2),findbest(R2,N2),append([N1],[N2],N3).makenames(0,Ns,Ns) :- !.makenames(Num1,N1,N2) :-random_member(R1,["Ack","Luc","Add","All","Brae","Skye","Whist","Dix","Wilb","Duk","Le","Ven","Syd","Don","Count","Black","Nei"]),random_member(R2,["an","ae","ye","ler","ee","ur","ard","ice","ney","ald","ess","el"]),append([R1],[R2],R3),append(N1,[R3],N3),Num2 is Num1-1,makenames(Num2,N3,N2).
formula(round(A),C) :- formula(A,C1), C is round(C1).
frequency([],F,F) :- !.
functions([/**[%% reverse[[n,a],[[],[v,l],[v,l]]],[[n,a],[[v,l],[v,m],[v,n]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,a],[[v,t],[v,o],[v,n]]]]]],[ %% intersection[[n,a],[[],[v,a],[v,l],[v,l]]],[[n,a],[[v,l1],[v,l2],[v,l3a],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,intersection2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,a],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,intersection2],[[v,a],[],[v,l],[v,l]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%,[[n,intersection2],[[v,i1],[v,l4],[v,l5],[v,l3]]]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1],[v,l4],[v,l2],[v,l3]]]]]],[[[n,append1],[[v,b],[v,c],[v,a]],":-",[[[n,append],[[v,b],[v,c],[v,a]]]]]],[[[n,minus1],[[v,l],[],[v,l]]],[[n,minus1],[[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l2],[v,i1]]],[[n,tail],[[v,l2],[v,l5]]],[[n,delete2],[[v,l1],[v,i1],[],[v,l6]]],[[n,minus1],[[v,l6],[v,l5],[v,l3]]]]],[[n,delete2],[[],[v,a],[v,l],[v,l]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l5]]],[[n,delete2],[[v,l5],[v,i1],[v,l2],[v,l3]]]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l5]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,wrap],[[v,i2],[v,i21]]],[[n,append],[[v,l2],[v,i21],[v,l6]]],[[n,delete2],[[v,l5],[v,i1],[v,l6],[v,l3]]]]]],[[[n,mutuallyexclusive],[[],[v,l]]],[[n,mutuallyexclusive],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,membera3],[[v,m],[v,h]]],[[n,mutuallyexclusive],[[v,t],[v,m]]]]],[[n,membera3],[[],[v,l]]],[[n,membera3],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera3],[[v,t],[v,m]]]]]],**/[ % duplicates[[n,a],[[],[v,l],[v,s],[v,s]]],[[n,a],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,member],[[v,h],[v,m]]],[[n,"->"],[[[n,deletea2],[[v,m],[v,h],[v,m1]]],[[n,true]],[[n,=],[[v,m],[v,m1]]]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,s1],[v,h1],[v,s3]]],[[n,a],[[v,t],[v,m1],[v,s3],[v,s2]]]]],[[n,a],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,membera4],[[v,m],[v,h]]]]],[[n,a],[[v,t],[v,m],[v,s1],[v,s2]]]]],[[n,deletea2],[[],[v,l],[v,m1]],":-",[[[n,fail]]]],[[n,deletea2],[[v,l],[v,m],[v,t]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,l],[v,m],[v,m1]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,t],[v,m],[v,m1]]]]],[[n,membera4],[[],[v,l]],":-",[[[n,fail]]]],[[n,membera4],[[v,l],[v,h]],":-",[[[n,head],[[v,l],[v,h]]]]],[[n,membera4],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera4],[[v,t],[v,m]]]]]]/**,[[n,substring],[[],[]]],[[n,substring],[[],[v,b]],":-",[[[n,not],[[[n,=],[[v,b],[]]]]],[[n,fail]]]],[[n,substring],[[],[]]],[[n,substring],[[],[v,b]],":-",[[[n,not],[[[n,=],[[v,b],[]]]]],[[n,fail]]]],%%[[n,substring],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,at]]],[[n,"->"],[[[n,listhead],[[v,a],[v,b]]],[[[n,true]]],[[[n,substring],[[v,at],[v,b]]]]]]]],[[n,substring],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,at]]],[[n,"->"],[[[[n,listhead],[[v,a],[v,b]]]],[[[n,true]]],[[[n,substring],[[v,at],[v,b]]]]]]]]],[[[n,listhead],[[v,l],[]]],[[n,listhead],[[v,a],[v,b]],":-",[[[n,head],[[v,a],[v,ah]]],[[n,tail],[[v,a],[v,at]]],[[n,head],[[v,b],[v,ah]]],[[n,tail],[[v,b],[v,bt]]],[[n,listhead],[[v,at],[v,bt]]]]]%%,%%[[n,listhead],[[v,a],[v,b]],":-",[[[n,head],[[v,a],[v,ah]]],[[n,tail],[[v,a],[v,at]]],[[n,head],[[v,b],[v,ah]]],[[n,tail],[[v,b],[v,bt]]],[[n,listhead],[[v,at],[v,bt]]]]]]**/]).
functions([/**[%% reverse[[n,a],[[],[v,l],[v,l]]],[[n,a],[[v,l],[v,m],[v,n]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,a],[[v,t],[v,o],[v,n]]]]]],[ %% intersection[[n,a],[[],[v,a],[v,l],[v,l]]],[[n,a],[[v,l1],[v,l2],[v,l3a],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,intersection2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,a],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,intersection2],[[v,a],[],[v,l],[v,l]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%,[[n,intersection2],[[v,i1],[v,l4],[v,l5],[v,l3]]]]],[[n,intersection2],[[v,i1],[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1],[v,l4],[v,l2],[v,l3]]]]]],[[[n,append1],[[v,b],[v,c],[v,a]],":-",[[[n,append],[[v,b],[v,c],[v,a]]]]]],[[[n,minus1],[[v,l],[],[v,l]]],[[n,minus1],[[v,l1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l2],[v,i1]]],[[n,tail],[[v,l2],[v,l5]]],[[n,delete2],[[v,l1],[v,i1],[],[v,l6]]],[[n,minus1],[[v,l6],[v,l5],[v,l3]]]]],[[n,delete2],[[],[v,a],[v,l],[v,l]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l5]]],[[n,delete2],[[v,l5],[v,i1],[v,l2],[v,l3]]]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l5]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,wrap],[[v,i2],[v,i21]]],[[n,append],[[v,l2],[v,i21],[v,l6]]],[[n,delete2],[[v,l5],[v,i1],[v,l6],[v,l3]]]]]],[[[n,mutuallyexclusive],[[],[v,l]]],[[n,mutuallyexclusive],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,membera3],[[v,m],[v,h]]],[[n,mutuallyexclusive],[[v,t],[v,m]]]]],[[n,membera3],[[],[v,l]]],[[n,membera3],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera3],[[v,t],[v,m]]]]]],**/[ % duplicates[[n,a],[[],[v,l],[v,s],[v,s]]],[[n,a],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,member],[[v,m],[v,h]]],[[n,"->"],[[[n,deletea2],[[v,m],[v,h],[v,m1]]],[[n,true]],[[n,=],[[v,m],[v,m1]]]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,s1],[v,h1],[v,s3]]],[[n,a],[[v,t],[v,m1],[v,s3],[v,s2]]]]],[[n,a],[[v,l],[v,m],[v,s1],[v,s2]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,membera4],[[v,m],[v,h]]]]],[[n,a],[[v,t],[v,m],[v,s1],[v,s2]]]]],[[n,deletea2],[[],[v,l],[v,m1]],":-",[[[n,fail]]]],[[n,deletea2],[[v,l],[v,m],[v,t]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,l],[v,m],[v,m1]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,deletea2],[[v,t],[v,m],[v,m1]]]]],[[n,membera4],[[],[v,l]],":-",[[[n,fail]]]],[[n,membera4],[[v,l],[v,h]],":-",[[[n,head],[[v,l],[v,h]]]]],[[n,membera4],[[v,l],[v,m]],":-",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,not],[[[n,=],[[v,m],[v,h]]]]],[[n,membera4],[[v,t],[v,m]]]]]]/**,[[n,substring],[[],[]]],[[n,substring],[[],[v,b]],":-",[[[n,not],[[[n,=],[[v,b],[]]]]],[[n,fail]]]],[[n,substring],[[],[]]],[[n,substring],[[],[v,b]],":-",[[[n,not],[[[n,=],[[v,b],[]]]]],[[n,fail]]]],%%[[n,substring],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,at]]],[[n,"->"],[[[n,listhead],[[v,a],[v,b]]],[[[n,true]]],[[[n,substring],[[v,at],[v,b]]]]]]]],[[n,substring],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,at]]],[[n,"->"],[[[[n,listhead],[[v,a],[v,b]]]],[[[n,true]]],[[[n,substring],[[v,at],[v,b]]]]]]]]],[[[n,listhead],[[v,l],[]]],[[n,listhead],[[v,a],[v,b]],":-",[[[n,head],[[v,a],[v,ah]]],[[n,tail],[[v,a],[v,at]]],[[n,head],[[v,b],[v,ah]]],[[n,tail],[[v,b],[v,bt]]],[[n,listhead],[[v,at],[v,bt]]]]]%%,%%[[n,listhead],[[v,a],[v,b]],":-",[[[n,head],[[v,a],[v,ah]]],[[n,tail],[[v,a],[v,at]]],[[n,head],[[v,b],[v,ah]]],[[n,tail],[[v,b],[v,bt]]],[[n,listhead],[[v,at],[v,bt]]]]]]**/]).
furthestfrommean(S,Mean,V) :-absdiffmean(S,Mean,[],D),sort(D,D1),reverse(D1,[[_,V]|_Rest]).
furthestfrommean(S,Mean,V) :-absdiffmean(S,Mean,[],D),sort(D,D1),reverse(D1,[[_,V]|_Rest]).absdiffmean([],_M,D,D) :- !.
gen_alg(L,A2):- retractall(p_name(_)), assertz(p_name(1)), retractall(v_name(_)), assertz(v_name(1)), p_name1(PN1), gen_alg(L,[],A2,[],_B2,true,PN1).
gen_alg([],A1,A2,B,B,_,_) :- append([B],A1,A2),!.
gen_alg([],[],A1,A2,B,B,_,_) :- append(_%[B] ,A1,A2),!.
gender(albert,male).
generate_lines(0,_Max_line_length,L,L) :- !.
generate_p3(I0,O0,VN5s,IVNs,Calls1,Call2,Alg3,Alg4) :- generate_p31(I0,O0,VN5s,IVNs,Calls1,Call2,Alg3,Alg4),!.
generate_p3(_,_,_,[],Calls,Calls,Alg,Alg) :- !.
get(POS,Item1) :- findall(Item,get1(POS,Item),Items),random_member(Item1,Items).
get_base_token_number(S1x,S1) :- split_string(S1x,".x",".x",[S1|_]),!. term_to_numbers(_,[],C,C,N,N) :- !.
get_curr_node(List1,N,Node,List11) :- findall(A,(member(A,List1),A=[[[n,N]|_Item1],_VT]),Node), subtract(List1,Node,List11),!.
get_curr_text(Stack,Text2) :-trace,number_of_current_text(N1),((%member([N1,[_,Text1]],Stack),append(_,[[N1,[_,Text1]]|A],Stack))->true;Text1=[]),findall([Text10,"\n"],member([_,[text,Text10]],[[N1,[_,Text1]]|A]),Text2),%flatten(Text2,Text3),retry_back_stack_n(N2),retractall(number_of_current_text(_)), assertz(number_of_current_text(N2)).
get_down(Curr1,Next) :-append(Curr1,[1],Next).
get_formula_value(String10,String1) :-(String10=[calculate,[function,_,_,_,String1,_]]->true;(String10=[function,_,_,_,Term,_]->(%trace,sub_term_wa([var|_],Term,Instances1),findall([Add,V],(member([Add,X1],Instances1),X1=[var, _, _, _, _, V|_]),Instances1b),foldr(put_sub_term_wa_ae,Instances1b,Term,Term2),flatten(Term2,Term1),foldr(string_concat,Term1,String1)->true;String10=String1))),!.%sub_term_wa([var|_],A,Instances1),%(number1(String10,String1)->true;String10=String1),search_and_replace(String1,Search_string_or_list,Replacement,Result_string) :-search_whole_string(String1,Search_string_or_list),(is_list(Search_string_or_list)->Search_string_or_list1=Search_string_or_list;Search_string_or_list1=[Search_string_or_list]),foldr(replace1_fr([[],Replacement]),Search_string_or_list1,String1,Result_string).
get_formula_value(String10,String1) :-(String10=[calculate,[function,_,_,_,String1,_]]->true;(String10=[function,_,_,_,Term,_]->(%trace,sub_term_wa([var|_],Term,Instances1),findall([Add,V],(member([Add,X1],Instances1),X1=[var, _, _, _, _, V|_]),Instances1b),foldr(put_sub_term_wa_ae,Instances1b,Term,Term2),flatten(Term2,Term1),foldr(string_concat,Term1,String1)->true;String10=String1))),!.%sub_term_wa([var|_],A,Instances1),%(number1(String10,String1)->true;String10=String1),search_and_replace(String1,Search_string_or_list,Replacement,Result_string) :-search_whole_string(String1,Search_string_or_list),(is_list(Search_string_or_list)->Search_string_or_list1=Search_string_or_list;Search_string_or_list1=[Search_string_or_list]),foldr(replace1_fr([[],Replacement]),Search_string_or_list1,String1,Result_string).replace1_fr([Options,Replacement],Search_string_or_list,String1,Result_string) :-replace1(Options,String1,Search_string_or_list,Replacement,Result_string).
get_grad_students(String02a) :-phrase_from_file_s(string(String00a), "grad_student_numbers.txt"),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]).
get_in(N) :-in(N),N1 is N+1,retractall(in(_)),assertz(in(N1)),!.
get_item_n(Exposition,Number1,Item) :-Number2 is Number1-1,length(List,Number2),append(List,[Item|_],Exposition).
get_item_n1([],_,[]) :-!.%,fail.
get_item_n_catch(A,B,C) :- catch(get_item_n(A,B,C),_,(writeln1("Instantiation error."),abort)),!.
get_item_uncompile_list(N2,N3,N,S,L1,L2) :- N2=0, % list N31 is N3+1, uncompile_list(N31,N,S,[],L3),  append(L1,[L3],L2).
get_keywords(L,KW,Connectives) :- Sep_and_pad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", downcase_atom(L,L1), split_string(L1,Sep_and_pad,Sep_and_pad,KW1), subtract(KW1,Connectives,KW).
get_lang_word(Input,Output) :-%% error if word not found(not(lang(Lang))->(Lang="en");lang(Lang)),%lang_db(Lang_db),(not(lang_db(Lang_db))->(load_lang_db,lang_db(Lang_db));lang_db(Lang_db)),(Lang="en"->%Input=Output1,atom_string(Output,Input);((%(%((Input="member2"->trace;true),split_on_number(Input,Input1,Input10),member([Input1,_Input101,Lang,Output2],Lang_db),%notrace,(Input10="" -> Output=Output2;concat_list([Output2," ",Input10],Output))) -> true;(concat_list(["Error: Word: ",Input," not in Language: ",Lang," in lang_db."],Notification1),writeln(Notification1),abort))),%Output=Output1,!.
get_lang_word3("Yes 1","en2","en",A).
get_lang_word3("membre 1","fr","en",A).
get_lang_word3("yes  1","en2","en",A).
get_lang_word3("yes 1","en2","en",A).A = yes1.
get_lang_word3("yes_1","en","en2",A).
get_lang_word3(Input,From_lang,To_lang,Output) :-From_lang="en",To_lang="en",atom_string(Output,Input),!.
get_last_cp_before_n2(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars1) :-/*member([global_cp_trail,Global_cp_trail1],CP_Vars1),append(Global_cp_trail1,[[_,_,List1]],Global_cp_trail1a),reverse(Global_cp_trail1a%List1,B1),*/reverse(List1,B1),%D1=[_Pred_id,Level,_Predicate_number,_Line_number_a,"findall",-|_],%member([_,_|D1],Choice_point_trail1),Cp1=[%A,B2,C,D_Level%2,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],%not(F_Line_number_a2=["returns to", _, "pred_id", _]),%member([_,_,B11],B1),%reverse(B11,B12),member([A,B2,C,D_Level%2,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],B1),%B12),Cp2=[A,B2,C,D_Level%2,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],/*cp_since_findall_start2(%get_last_p_before_n(B,[_,Level%2,_Predicate_number2,_Line_number_a2,Pred_or_line,_,_,All_predicate_numbers2],_,E1,CP_Vars1,CP_Vars2),*/(Pred_or_line="line"->(All_predicate_numbers2=[_,_,_,_,_,_,Vars2c],not(Vars2c=[]));Pred_or_line="predicate"->not(All_predicate_numbers2=[])),Cp2=[_,_|Cp3]%)/*%trace,%writeln1([list1,List1]),%trace,get(curr_cp,N,CP_Vars1),get_last_p_before_n1(List1,Cp1,N,Cp2),Cp2=[_,_|Cp3]*/.
get_last_p_before_n2(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars1) :-reverse(List1,B1),/*member([global_cp_trail,Global_cp_trail1],CP_Vars1),append(Global_cp_trail1,[[_,_,List1]],Global_cp_trail1a),reverse(Global_cp_trail1a%List1,B1),*/%D1=[_Pred_id,Level,_Predicate_number,_Line_number_a,"findall",-|_],%member([_,_|D1],Choice_point_trail1),Cp1=[%A,B2,_CX,D_Level%2,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I|All_predicate_numbers2],%member([_,_,B11],B1),%reverse(B11,B12),member([A,B2,C,D_Level%2,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I|All_predicate_numbers2],B1),%B12),Cp2=[A,B2,C,D_Level%2,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I|All_predicate_numbers2],/*cp_since_findall_start2(%get_last_p_before_n(B,[_,Level%2,_Predicate_number2,_Line_number_a2,Pred_or_line,_,_,All_predicate_numbers2],_,E1,CP_Vars1,CP_Vars2),*//*(Pred_or_line="line"->(All_predicate_numbers2=[_,_,_,_,_,_,Vars2c],not(Vars2c=[]));Pred_or_line="predicate"->not(All_predicate_numbers2=[])),*/Cp2=[_,_|Cp3]%)/*%trace,%writeln1([list1,List1]),%trace,get(curr_cp,N,CP_Vars1),get_last_p_before_n1(List1,Cp1,N,Cp2),Cp2=[_,_|Cp3]*/.
get_later_cps_than_cp(List1,Cp_a,Cps,Cps) :-not(member([Cp_a,_|_],List1)),!.
get_next(B,POS,N1,D) :-append(_,A,B),append([[C,POS]],D,A),downcase_atom(C,N1),!.
get_nodes_to_replace(List4,Node,N3,N28,List41) :- % all nodes that have all same items as node  findall(N1,member([[[n,N1]|Item1],_],List4),N21),  %trace,  Node=[[[[n,N1]|_]|_]|_],  findall(Item1,member([[[n,N1]|Item1],_],Node),N21_items),  sort(N21,N22),  findall([N26,N23],(member(N23,N22),  findall(N25,(member(N25,List4),N25=[[[n,N23]|Item1],_]),N26),  findall(Item1,(member(N25,N26),N25=[[[n,_]|Item1],_]),N26_items),  %trace,  sub_term_wa([n,N1],N21_items,In21),  findall([A,_],member([A,_],In21),In22),  foldr(put_sub_term_wa_ae,In22,N21_items,N21_items1),    sub_term_wa([n,N23],N26_items,In26),  findall([A,_],member([A,_],In26),In27),  foldr(put_sub_term_wa_ae,In27,N26_items,N26_items1),  sort(N21_items1,A),sort(N26_items1,A)),N2),    findall(A,member([A,_],N2),N29),  findall(A,member([_,A],N2),N28),  foldr(append,N29,N3),  subtract(List4,N3,List41),!.
get_num(A) :- num1(A),retractall(num1(_)),A1 is A+1,assertz(num1(A1)).
get_number(Prompt1,Number) :-%%concat_list(Prompt1,Prompt2),(%%repeat,writeln(Prompt1),read_string(user_input, "\n", "\r", _End, String),split_string(String, ",", " ", Value1),Value1=[Value2],number_string(Number,Value2)).
get_number(Prompt1,Number) :-%%concat_list(Prompt1,Prompt2),(%%repeat,writeln(Prompt1),read_string(user_input, "\n", "\r", _End1, String),split_string(String, ",", " ", Value1),Value1=[Value2],number_string(Number,Value2)).
get_number(Prompt1,Number) :-%%concat_list(Prompt1,Prompt2),(%%repeat,writeln(Prompt1),read_string(user_input, "\n", "\r", _End1, String),split_string(String, ",", " ", Value1),Value1=[Value2],number_string(Number,Value2))./**get_string(Prompt1,String1) :-concat_list(Prompt1,Prompt2),(repeat,write(Prompt2),read_string(String1),not(String1="")).
get_order(AT333,AT333B) :-%trace,%writeln1(get_order(AT333,AT333B)), findall1(AT333C,(member(AT333D,AT333), ((AT333D=[N|_],(N=[n, comment]->true;N=":-"))-> AT333C=AT333D; (((%trace, AT333D=[[n, B],Args| _],not(var(Args1)),(not(Args1=":-")))->true;(AT333D=[[n, B]| _],Args=[]))-> (((%trace, not(Args=":-"),not(Args=[]))->Args1=[Args];Args1=[]), AT333C=[[n, B]|Args1])))),AT333E), %list_to_set(AT333E,AT333F), AT333E=AT333F, length(AT333F,AT333FL), numbers(AT333FL,1,[],AT333FN), findall1([N,AT333G],(member(N,AT333FN), get_item_n(AT333F,N,AT333G)),AT333B),!.
get_params(Map,X,Y,Z) :-get_map_dimensions(Map),writeln("Enter X co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End1, X1),number_string(X,X1),writeln("Enter Y co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End2, Y1),number_string(Y,Y1),writeln("Enter Z co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End3, Z1),number_string(Z,Z1),writeln("Enter apply a to b giving c, in the form [[a1,b1,c1],[a2,b2,c2]]:"),read_string(user_input, "\n", "\r", _End5, Applys),atom_to_term(Applys,Applys_atom,[]),retractall(apply1(_)),findall(_,(member(Apply_atom,Applys_atom),assertz(apply1(Apply_atom))),_).traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2) :-member([Z,X,Y,Cell],Map1),append(Explored1,[[Z,X,Y]],Explored3a),sort(Explored3a,Explored3),location(Z,X,Y,Location),writeln(["At",Location]),%%trace,%% can take, drop objects, recorded in maze%%(Cell=[]->Inventory4a=Inventory1;%%(Cell=Items,append(Inventory1,[Item],Inventory3),%%apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),%%writeln(Inventory4a),%% Find, accept only available directions(member("e",Inventory1)->(writeln("Game Over"),true);true),%%append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,check(Z,Xm1,Y,"w",[],Directions1,Map1),check(Z,X,Ym1,"s",Directions1,Directions2,Map1),check(Z,Xp1,Y,"e",Directions2,Directions3,Map1),check(Z,X,Yp1,"n",Directions3,Directions4,Map1),check(Zm1,X,Y,"d",Directions4,Directions5,Map1),check(Zp1,X,Y,"u",Directions5,Directions6,Map1),writeln(["Go",Directions6,"or take",Cell,"or drop",Inventory1,"map, or apply an object to an object"]),read_string(user_input, "\n", "\r", _End,Input1),downcase_atom(Input1,Input1a),atom_string(Input1a,Input1b),%%trace,split_string(Input1b, ", ", ", ", Input2),(((Input2=["go","n"]->true;Input2=["n"]),(member("n",Directions6)->traverse(Z,X,Yp1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go n"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["map"]->true;Input2=["m"]),((%trace,map_dimensions([X2,Y2,Z2]),print_map(Map1,X2,Y2,Z2,X,Y,Z))->true;;(writeln(["You can't view the map."]))),traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2))->true;((Input2=["go","e"]->true;Input2=["e"]),(member("e",Directions6)->traverse(Z,Xp1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go e"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","s"]->true;Input2=["s"]),(member("s",Directions6)->traverse(Z,X,Ym1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go s"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","w"]->true;Input2=["w"]),(member("w",Directions6)->traverse(Z,Xm1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go w"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","u"]->true;Input2=["u"]),(member("u",Directions6)->traverse(Zp1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go u"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","d"]->true;Input2=["d"]),(member("d",Directions6)->traverse(Zm1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go d"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["take",Item_to_take],((atom_string(Item_to_take_a,Item_to_take),(member(Item_to_take_a,Cell)->delete(Cell,Item_to_take_a,Cell2);(member(Item_to_take,Cell),delete(Cell,Item_to_take,Cell2))),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4),append(Inventory1,[Item_to_take],Inventory3))->(writeln(["You have taken",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't take",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["drop",Item_to_drop],((%%atom_string(Item_to_drop_a,Item_to_drop),member(Item_to_drop,Inventory1),delete(Inventory1,Item_to_drop,Inventory3),append(Cell,[Item_to_drop],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have dropped",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't drop",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["apply",First_item,"to",Second_item],((member(First_item,Inventory1),member(Second_item,Inventory1),atom_string(First_item_a,First_item),atom_string(Second_item_a,Second_item),apply1([First_item_a,Second_item_a,Third_item_a]),atom_string(Third_item_a,Third_item),append(Cell,[Third_item],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have applied",First_item,"to",Second_item,"producing",Third_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't apply",First_item,"to",Second_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;/**(Input2=["write",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please write the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),append(Cell,[First_item],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have written",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["Error 1."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["edit",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),member(First_item,Cell),writeln(["Please edit the note",First_item]),read_string(user_input, "\n", "\r", _End2, Note),%trace,delete(Cell,First_item,Cell2a),append(Cell2a,[Note],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have edited",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't edit",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["delete",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please edit the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),%append(Cell,[Note],Cell2),delete(Cell,First_item,Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have deleted",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["Error 3."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;**/(Input2=["load",First_item],%trace,((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please edit the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),%append(Cell,[Note],Cell2),string_concat("saved_games/",First_item,Game_path),phrase_from_file_s(string(String00a),Game_path),string_codes(String02b,String00a),atom_to_term(String02b,Map4,[]),get_params(Map4,X1,Y1,Z1)%delete(Cell,First_item,Cell2),%delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have loaded",First_item]),traverse(Z1,X1,Y1,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["Error 4."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["save",First_item],((%member(First_item,Inventory1),member(Second_item,Inventory1),%atom_string(First_item_a,First_item),%atom_string(Second_item_a,Second_item),apply(First_item_a,Second_item_a,Third_item_a),atom_string(Third_item_a,Third_item),%(writeln(["Please edit the note",First_item]),%read_string(user_input, "\n", "\r", _End2, Note),%append(Cell,[Note],Cell2),string_concat("saved_games/",First_item,Game_path),term_to_atom(Map1,String02a_b),string_atom(String02a_c,String02a_b),(open_s(Game_path,write,Stream1),write(Stream1,String02a_c),close(Stream1)),!%delete(Cell,First_item,Cell2),%delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have saved",First_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2));(writeln(["Error 5."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(writeln(["I don't understand."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))).
get_phrases(PhrasesFile,Phrases) :-SepandPad="\n",phrase_from_file_s(string(String00), PhrasesFile),split_string(String00,SepandPad,SepandPad,List1),delete(List1,"",Phrases1),findall(Text6,(member(Text7,Phrases1),string_codes(Text6,Text7)),Phrases).
get_rec_join_n(N) :-rec_join_n(N),N1 is N+1,retractall(rec_join_n(_)),assertz(rec_join_n(N1)).
get_string(Prompt2,Flag1,Flag2,ML_db0,ML_db1,String2) :-%%writeln1(get_string(Prompt2,Flag1,Flag2,ML_db1,String2)),%%concat_list(Prompt1,Prompt2),%%trace,SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%(repeat,(Flag2=one-not-ml-ref->(concat_list(["Note: Enter in-text reference using AGPS, e.g.\n","The first work supports the second work (Surname 2000, pp. 18-9).\n","Surname (2000, pp. 18-9) states that ...\n","Remember to use words like \"also\", \"moreover\" and \"in addition\" before the sentence."],String_a1),writeln(String_a1));true),writeln(Prompt2),read_string(user_input, "\n", "\r", _End2, String2aa),%%not(String2aa=""),%%String2aa=[String2aaa],downcase_atom(String2aa,String3),split_string(String3, SepandPad, SepandPad, String4),Neg_term_list=["no","not","don","t","shouldn","wouldn","disagree","differ","dislikes","disagrees","differs","dislikes","disagreed","differed","disliked","negative","negation","non","negate","negates","negated","but","however","isn","lack"],(Flag1=%%non_negativepositive->((findall(Item11,(member(Item1,String4),findall(Item1,(member(Item2,Neg_term_list),(Item1=Item2->(write("Error: Contains the negative term \""),write(Item1),writeln("\".")))),Item11)),Item12)),maplist(equals_empty_list,Item12));((Flag1=negative->((member(Item1,String4),member(Item1,Neg_term_list))->true;(writeln("Error: Contains no negative term, one of:"),writeln(Neg_term_list),fail));true)->true;Flag1=either)),(Flag2=one-not-ml->String2=String2aa;(Flag2=one-not-ml-ref->(refs(R1),writeln("What is the reference? e.g. Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\n"),writeln("Existing references (copy one or many delimited with \"\\n\"):"), findall(_,(member(R11,R1),writeln(R11)),_),read_string(user_input, "\n", "\r", _End3, String2r),not(String2r=""),%%downcase_atom(String2r,_String3r),String2=String2aa,split_string(String2r,"\n\r","\n\r",String2r3),%%trace,retractall(refs(_)),maplist(append,[[R1,String2r3]],[String2r21]),sort1(String2r21,String2r2),assertz(refs(String2r2))%%split_string(String3r, SepandPad, SepandPad, String4));(Flag2=one->(%%split_string(String4,SepandPad,SepandPad,String21),writeln("Attempt 1"),(length(String4,Length_string1),(check_strings_container1(Length_string1,String4,[0,0,ML_db1],[[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1],[999,999,[]]],_,_List2)->writeln("Success");(writeln("Failed"),fail))%%(%%data_instance_k_classification1([[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1]%%,[999,999,[]]%%],[0,0,String4]%%21%%,1,String4a%%21%%),%%String4=String4a)%%)->%%(%%String4a=[_,_,String4a1],%%writeln([found,String4a,String4]),%%writeln("Success"));%%(writeln("Failed"),fail)%%));(Flag2=%%[two,%%,P1,S1,P2,S2],%%trace,append([ML_db0],[ML_db1],ML_db2),check_strings(String4,ML_db2%%,P1,S1,P2,S2))))).
get_string(Prompt2,Flag1,Flag2,ML_db0,ML_db1,String2) :-%%writeln1(get_string(Prompt2,Flag1,Flag2,ML_db1,String2)),%%concat_list(Prompt1,Prompt2),%%trace,SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%%(repeat,(Flag2=one-not-ml-ref->(concat_list(["Note: Enter in-text reference using AGPS, e.g.\n","The first work supports the second work (Surname 2000, pp. 18-9).\n","Surname (2000, pp. 18-9) states that ...\n","Remember to use words like \"also\", \"moreover\" and \"in addition\" before the sentence."],String_a1),writeln(String_a1));true),writeln(Prompt2),read_string(user_input, "\n", "\r", _End2, String2aa),%%not(String2aa=""),%%String2aa=[String2aaa],downcase_atom(String2aa,String3),split_string(String3, SepandPad, SepandPad, String4),Neg_term_list=["no","not","don","t","shouldn","wouldn","disagree","differ","dislikes","disagrees","differs","dislikes","disagreed","differed","disliked","negative","negation","non","negate","negates","negated","but","however","isn","lack"],(Flag1=%%non_negativepositive->((findall(Item11,(member(Item1,String4),findall(Item1,(member(Item2,Neg_term_list),(Item1=Item2->(write("Error: Contains the negative term \""),write(Item1),writeln("\".")))),Item11)),Item12)),maplist(equals_empty_list,Item12));((Flag1=negative->((member(Item1,String4),member(Item1,Neg_term_list))->true;(writeln("Error: Contains no negative term, one of:"),writeln(Neg_term_list),fail));true)->true;Flag1=either)),(Flag2=one-not-ml->String2=String2aa;(Flag2=one-not-ml-ref->(refs(R1),writeln("What is the reference? e.g. Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\n"),writeln("Existing references (copy one or many delimited with \"\\n\"):"), findall(_,(member(R11,R1),writeln(R11)),_),read_string(user_input, "\n", "\r", _End3, String2r),not(String2r=""),%%downcase_atom(String2r,_String3r),String2=String2aa,split_string(String2r,"\n\r","\n\r",String2r3),%%trace,retractall(refs(_)),maplist(append,[[R1,String2r3]],[String2r21]),sort1(String2r21,String2r2),assertz(refs(String2r2))%%split_string(String3r, SepandPad, SepandPad, String4));(Flag2=one->(%%split_string(String4,SepandPad,SepandPad,String21),writeln("Attempt 1"),(length(String4,Length_string1),(check_strings_container1(Length_string1,String4,[0,0,ML_db1],[[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1],[999,999,[]]],_,_List2)->writeln("Success");(writeln("Failed"),fail))%%(%%data_instance_k_classification1([[0,0,[xxx,xxx,xxx,xxx,xxx]],[0,0,ML_db1]%%,[999,999,[]]%%],[0,0,String4]%%21%%,1,String4a%%21%%),%%String4=String4a)%%)->%%(%%String4a=[_,_,String4a1],%%writeln([found,String4a,String4]),%%writeln("Success"));%%(writeln("Failed"),fail)%%));(Flag2=%%[two,%%,P1,S1,P2,S2],%%trace,append([ML_db0],[ML_db1],ML_db2),check_strings(String4,ML_db2%%,P1,S1,P2,S2))))).reference(String2r) :-(refs(R1),%%writeln("What is the reference? e.g. Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\n"),writeln("Existing references (copy one or many delimited with \"\\n\"):"), findall(_,(member(R11,R1),writeln(R11)),_),%%read_string(user_input, "\n", "\r", _End4, String2r),not(String2r=""),%%downcase_atom(String2r,_String3r),%%String2=String2aa,split_string(String2r,"\n\r","\n\r",String2r3),%%trace,retractall(refs(_)),maplist(append,[[R1,String2r3]],[String2r21]),sort1(String2r21,String2r2),assertz(refs(String2r2))%%split_string(String3r, SepandPad, SepandPad, String4)).%% Sorts by first surname then title in AGPSsort1(List1,List2) :-findall([C,B],(member(B,List1),downcase_atom(B,D),atom_string(D,C)),E),sort(E,F),findall(G,member([_,G],F),List2).prepare_file_for_ml(String000,String021) :-string_codes(String001,String000),downcase_atom(String001,String00),split_string(String00, "\n\r", "\n\r", String01),delete(String01,"",String02),findall(String03,(member(String02a,String02),split_string(String02a,".",".",String04),((String04=[String05|String06],number_string(Number05,String05),number_sentences(Number05,1,String06,[],String03))->true;(findall(String08,(SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",member(String04a,String04),split_string(String04a,SepandPad,SepandPad,String09),append_list([[""],"",String09],String08)),String03)))),String0211),append_list2(String0211,String021).
get_sub_term_wa1(List,Ns,L1) :- Ns=[N], get_item_n(List,N,L1),!.get_sub_term_wa1(List,Ns,L1) :- Ns=[N|Ns2], get_item_n(List,N,L3), get_sub_term_wa1(L3,Ns2,L1).
get_subterm_wa(Term, Address, Item) :-get_sub_term_wa(Term, Address, Item).
get_texts(Courses1a,Texts) :-%trace,foldr(string_concat,["Books/",Courses1a],Dept),%directory_files(Courses1e,Courses1b),%delete_invisibles_etc(Courses1b,Dept),%findall(Courses1c,(member(Courses1d,Courses1a),%foldr(string_concat,["Books/",Courses1d],Courses1c)),%Dept),string_concat(Dept,"/",Dept1),directory_files(Dept1,F),delete_invisibles_etc(F,G),findall(String02b,(member(Filex1,G),string_concat(A,_,Filex1),string_length(A,4),not(A="dot-"),!,string_concat(Dept1,Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a)),Texts1),choose_texts(Texts1,Texts2,Text_a),(choose_texts(Texts2,Texts3,Text_b)->(choose_texts(Texts3,_Texts4,Text_c)->true;Text_c="");(Text_b="",Text_c="")),%trace,findall(Text1,(member(Text1,[Text_a,Text_b,Text_c]),not(Text1="")),Texts3),%foldr(append,[Texts=Texts3.%[Text_a,Text_b,Text_c]],Texts).
get_time1 :-get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),foldr(string_concat,["-",Year,"-",Month,"-",Day,"-",Hour1,"-",Minute1,"-",Seconda],Time),retractall(time1(_)),assertz(time1(Time)).
get_tmp_join_n(N) :-tmp_join_n(N),N1 is N+1,retractall(tmp_join_n(_)),assertz(tmp_join_n(N1)).
get_token([],D,D,T,T) :- !.get_token(RS1,D1,D3,T1,T3) :-%writeln1(get_token(RS1,D1,D3,T1,T3)),%trace,((D1=[D4|D2],not(only_item1(D1)))->(get_val_s2a(RS1,D4),D2=D3,append(T1,[D4],T3));((RS1=[Type1, Var1],type_s2a1(Type1),D1=[Type2, Val1],type_s2a1(Type2)),%->true;%[Var,Val]=[Var1,Val1]),%get_token(Var1,Val1,D3,T1,T3))->true;%trace,rs_and_data_to_term(Var1,Val1,D3,%RSa1,RSa2,[],T31,_T2_old3,true),append(T1,[[Type2,T31]],T3))->true;(append(T1,[D1],T3),get_val_s2a(RS1,D1),append(T1,[D1],T3),D3=[]))./*get_val_s2a(Var,Val) :-((Var=[Type1, Var1],type_s2a1(Type1),Val=[Type2, Val1],type_s2a1(Type2))->true;[Var,Val]=[Var1,Val1]),get_val_s2a1(Var1,Val1).
get_type(A1,string) :- string(A1).
get_types1(A,V) :- test1(off,1,_), get_types2(A,[],V),!.
get_types3(A,Vars,Vars2) :- types(N,Ts), A=[[n,N],Vs], checkarguments(Ts,Vs,Vars,Vars2,[],_FirstArgs2).
get_until_char(S,C,Cs1,Left1) :-string_strings(S,S1),append(Cs,B,S1),(is_list(C)->C1=C;string_strings(C,C1)),append(C1,Left,B),foldr(string_concat,Cs,Cs1),foldr(string_concat,Left,Left1),!.
get_up(Curr1,Next) :-reverse(Curr1,Curr2),Curr2=[_N1|Rest],reverse(Rest,Next).
get_up_to_n_cols(A,N,C,D,D2) :- N1 is N-1, %N2 is N+1, findall(A2,(member(A1,A),sub_string(A1,0,N1,_,A2)),C), findall(A2,(member(A1,A),sub_string(A1,N1,1,_,A2)),D),%trace, findall(A2,(%trace, member(A1,A),%string_length(A1,SL), sub_string(A1,N,_,0,A2)),D2).
get_up_to_next_chunk([],C,C) :- !.
get_var(V1) :- var1(V), retractall(var1(_)), V1 is V+1, assertz(var1(V1)).
get_var_num(N) :-var_num(N2),atom_concat(a,N2,N),N1 is N2+1,retractall(var_num(_)),assertz(var_num(N1)),!.strings_to_grammar(L,G) :-retractall(optional_s2g(_)),assertz(optional_s2g(on)),retractall(var_num(_)),assertz(var_num(1)),retractall(s2g_mode(_)),assertz(s2g_mode(off%%findall)), % off or findallfindall(%[r,1,B%T41%],(member(S,L),%string_strings(S,L2),term_to_atom(T1,S),%grammar1(L2,T1),%string_strings(S,T1),group_non_lists1(T1,T4),%flatten_keep_brackets(T1,T4),process_terms(T4,[],B,[],_R)),Gs2),%trace,decision_tree_s2(Gs2,T42),%trace,findall(B2,(member(T44,T42),find_g(T44,[],B2)),Gs),%foldr(append,T41,T42)%,get_var_num(N)(Gs=[]->G=Gs;(Gs=[G6|Gs1],%trace,G6=[[[n,N]|_]|_],findall(A,(member(A1,Gs1),(A1=[[[n,_]|A2]|A21]->A=[[[n,N]|A2]|A21];A=A1)),A3),append([G6],A3,Gs3),foldr(append,Gs3,Gs4),%trace,%insert_stub_arguments(Gs4,Gs5),%Gs5=Gs6,%%trace,repeat_until_same(Gs4,G)%remove_stub_arguments(Gs6,G))).
get_vars(0,VarList,VarList,_,Vars,Vars) :- !.
getvalue_equals4(Variable,Value,Vars) :-(equals4(on)->getvalue_equals41(Variable,Value,Vars);getvalue(Variable,Value,Vars)).
getvalue_match1(Variable1,Value1,Vars1) :-get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,single_item_or_atom(Variable1),(is_single_item_or_expression_list_with_atoms(Variable1)->Value1=Variable1;(member([Variable1,[Dbw_v,Var_name1]],Vars1)->(Value1=[Dbw_v,Var_name1]);(find_sys(Var_name2),Value1=[Dbw_v,Var_name2]))),!.
getvalue_match11(Variable1,Vars1,Vars2a,Vars2b) :-single_item(Variable1),(is_single_item_or_expression_list(Variable1)->Vars2a=Vars2b%append(Vars2a,[Variable1],Vars2b;(getvalue(Variable1,Value2,Vars1),append(Vars2a,[[Variable1,Value2]],Vars2b))),!.
getvalue_match11([],_Vars1,Vars2,Vars2) :- !.
getvalues(Variable1,Variable2,Value1,Value2,Vars) :-        getvalue(Variable1,Value1,Vars),        getvalue(Variable2,Value2,Vars).
getvalues_equals4(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars) :-(equals4(on)->(getvalue_equals41(Variable1,Value1,Vars),getvalue_equals41(Variable2,Value2,Vars),getvalue_equals41(Variable3,Value3,Vars));(getvalue(Variable1,Value1,Vars),getvalue(Variable2,Value2,Vars),getvalue(Variable3,Value3,Vars))).
gh_init(At_start) :-working_directory1(A1000,A1000),gh_init2,output_path([OP_1]), (exists_directory_s("../luciancicd-cicd-tests")->true;make_directory_recursive_s("./","../luciancicd-cicd-tests")),working_directory1(_,A1000), working_directory1(A,A), repositories_paths1([Path]), working_directory1(_,Path), (exists_directory('../gh2_tmp2')-> (time1(T),string_concat('../gh2_tmp2',T,O2),string_concat(O2,"/",O3),%working_directory1(_,Path),  O4=O3);(make_directory('../gh2_tmp2'),O4="../gh2_tmp2/")),%make_directory_s(O)), %string_concat("../../",Path2,Path), %string_concat(Path3,"/",Path2), string_concat("../../",OP_2,OP_1), string_concat(OP_3,"/",OP_2), foldr(string_concat,[O4,%"/", OP_2],PX11), foldr(string_concat,[O4,%"/", "Github_lc/"],PX21), %mv_lc(PX,O4),   (exists_directory(PX11)->true; (%trace, make_directory_recursive_s("./",PX11))), (exists_directory(PX21)->true; (%trace, make_directory_recursive_s("./",PX21))),    %trace, foldr(string_concat,["scp -r ../",OP_3,"/ ",O4,"",OP_3,"/."],PX1), foldr(string_concat,["scp -r ","../Github_lc/"," ",O4,"","Github_lc/","."],PX2), %mv_lc(PX,O4),  catch(bash_command(PX1,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42)%,writeln1(Text42)%,abort )), catch(bash_command(PX2,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42)%,writeln1(Text42)%,abort )), foldr(string_concat,[%"scp -pr ../../Github_lc/ ", "rm -rf ../",OP_2,"*" %Folder1 ],Command315), catch(bash_command(Command315,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42)%,writeln1(Text42)%,abort )), (At_start=true-> (foldr(string_concat,[%"scp -pr ../../Github_lc/ ", "rm -rf ../Github_lc/*" %Folder1 ],Command316), catch(bash_command(Command316,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42)%,writeln1(Text42)%,abort )));true), working_directory1(_,A), !. gh2tmp :- %trace, working_directory1(A,A), (time1(_T1)->true;get_time1), repositories_paths1([Path]), %trace, working_directory1(_,Path), %trace, %pwd,%(exists_directory('../gh2_tmp')->true;make_directory('../gh2_tmp')), (exists_directory('../gh2_tmp')-> %trace, (time1(T),string_concat('../gh2_tmp',T,O2),string_concat(O2,"/",O3),%working_directory1(_,Path), O4=O3,make_directory(O4));(%trace, O4="../gh2_tmp/"),make_directory_s(O4)),%(O)), %trace, foldr(string_concat, ["scp -pr ./ ",O4,"."],O41),  catch(bash_command(O41, O42), _, (foldr(string_concat, ["Warning."], _), writeln1("Couldn't back up repositories."), abort)),%trace, string_concat("../",Path1,Path), string_concat("../",Path2,Path1), working_directory1(_,"../"), foldr(string_concat, ["rm -rf ",Path2],O43),  catch(bash_command(O43, O44), _, (foldr(string_concat, ["Warning."], _), writeln1("Couldn't back up repositories."), abort)),%trace,%pwd, foldr(string_concat, ["mkdir ",Path2],O45),  catch(bash_command(O45, O46), _, (foldr(string_concat, ["Warning."], _), writeln1("Couldn't back up repositories."), abort)), %mv_lc("./",O4), %rm_lc("../gh2_tmp/*"), %trace, %mv_lc("./","../gh2_tmp/"), %rm_lc("./*"), working_directory1(_,A),!.
gitl_server(Port) :-        http_server(http_dispatch, [port(Port)]).
go :-working_directory(_,'../Philosophy/'),A=[person1,person2],time(findall(_,(member(P,A),time((foldr(string_concat,["swipl --stack-limit=80G -f -q ./bag_args21.pl"],S3)%,,catch(bash_command(S3,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text4),%writeln1(Text4),fail%abort )),foldr(string_concat,["swipl --stack-limit=80G -f -q ./bag_algs1.pl"],S31)%,,catch(bash_command(S31,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text4),%writeln1(Text4),fail%abort )),  texttobr2_1(1), % meditation texttobr2_1(1), % teleport 1 texttobr2_1(1), % medicine 1 texttobr2_1(1), % teleport 2 texttobr2_1(1), % medicine 2 texttobr2_1(1), % a thought writeln([P,done]) )) ),_)),!.
go_copy(Input,Input01) :-%*/data(Header,Footer),%/*format(Header,[]),foldr(string_concat,["<form action=\"/copy\" method=\"POST\">        <p>Copy file from: <br>",Input,"</p>        <p>To:</p>  <input type=hidden name=text1 value=\"",Input,"\">        <textarea name=text2 rows=\"5\">",Input,"</textarea>  <input type=hidden name=text01 value=\"",Input01,"\">  <input type=submit name=submit value='Submit'>    </form>"],String),writeln(String),%*/format(Footer,[])%*/.go_edit(Input,Input01) :-%*/open_string_file_s(Input,File_string),data(Header,Footer),%/*format(Header,[]),foldr(string_concat,["<form action=\"/edit\" method=\"POST\">        <p>Edit file:</p>          <input type=hidden name=text1 value=\"",Input,"\">        <textarea name=text2 rows=\"20\">",File_string,"</textarea>  <input type=hidden name=text01 value=\"",Input01,"\">  <input type=submit name=submit value='Submit'>    </form>"],String),writeln(String),%*/format(Footer,[])%*/.
go_delete_message(0,_Messages) :- messager,!.
go_edit_message(0,_Messages) :- messager,!.
go_messager_option(0,_Messages) :- true,!.
go_messager_option(N) :- not(N=1),not(N=2),not(N=3),not(N=4),messager.
go_move(Input,Input01) :-%*/data(Header,Footer),%/*format(Header,[]),foldr(string_concat,["<form action=\"/move\" method=\"POST\">        <p>Move/rename file from: <br>",Input,"</p>To: </p>  <input type=hidden name=text1 value=\"",Input,"\">        <textarea name=text2 rows=\"5\">",Input,"</textarea>  <input type=hidden name=text01 value=\"",Input01,"\">  <input type=submit name=submit value='Submit'>    </form>"],String),writeln(String),%*/format(Footer,[])%*/.
go_view(Input,Input01) :-%*/open_string_file_s(Input,File_string),data(Header,Footer),%/*format(Header,[]),writeln(Input),writeln("<br><br>"),(string_concat(_,".html",Input)->File_string=File_string1;(atomic_list_concat(A,'\n',File_string),atomic_list_concat(A,'<br>',File_string1))),writeln(File_string1),foldr(string_concat,["<form action=\"/return\" method=\"POST\">                  <input type=hidden name=text1 value=\"",Input,"\">          <input type=hidden name=text01 value=\"",Input01,"\">  <input type=submit name=submit value='Return'>    </form>"],String),writeln(String),%*/format(Footer,[])%*/.
god_miracle :- Ns=[john,betty,sue], Ms=[yes,no], findall(_,(member(N1,Ns),mind_read(M1,Ms), (M1=yes->writeln(['*',N1,M1]))),_).
gradebook :- Ns=[john,betty,sue], Ms=[n,p,h3,h2b,h2a,h1], findall(_,(member(N1,Ns),mind_read(M1,Ms), writeln(['*',N1,M1])),_).% * First, I wrote 'Oh that'.
grammar_logic_to_alg(Sentence1,B) :- %% Not by multi-sentence algorithms, just by sentenceatom_string(Sentence0,Sentence1),downcase_atom(Sentence0,Sentence01),atom_string(Sentence01,Sentence02),SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",Connectors=["the","a","i","on","with","of","an","for","to","was","were","and","in","my","from","out","by"],split_string(Sentence02,SepandPad,SepandPad,Sentence2),subtract(Sentence2,Connectors,Sentence3),%%length(Sentence3,Length),%% () add generated data%%write_commands(Length,[],Commands), %% sentence alggenerate_sentences(Sentence3,[],Sentence_a,30), %% detail sentencesappend(Sentence3,Sentence_a,Sentence4),findall([*,Sentence1,a_alg(Sentence5),b_alg(Sentence5,a),bb_alg(Sentence6)],(member(Sentence4a,Sentence4),make_lists(Sentence4a,[],Sentence5),Sentence5=[_|Sentence6]),B),!.
grammar_logic_to_alg(Sentence1,B) :- %% Not by multi-sentence algorithms, just by sentenceatom_string(Sentence0,Sentence1),downcase_atom(Sentence0,Sentence01),atom_string(Sentence01,Sentence02),SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",Connectors=["the","a","i","on","with","of","an","for","to","was","were","and","in","my","from","out","by"],split_string(Sentence02,SepandPad,SepandPad,Sentence2),subtract(Sentence2,Connectors,Sentence3),%%length(Sentence3,Length),%% () add generated data%%write_commands(Length,[],Commands), %% sentence alggenerate_sentences(Sentence3,[],Sentence_a,1), %% detail sentencesappend(Sentence3,Sentence_a,Sentence4),findall([*,Sentence1,a_alg(Sentence5),b_alg(Sentence5,a),bb_alg(Sentence6)],(member(Sentence4a,Sentence4),make_lists(Sentence4a,[],Sentence5),Sentence5=[_|Sentence6]),B),!.
grammar_logic_to_alg(Sentence1,B) :- %% Not by multi-sentence algorithms, just by sentenceatom_string(Sentence0,Sentence1),downcase_atom(Sentence0,Sentence01),atom_string(Sentence01,Sentence02),SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",Connectors=["the","a","i","on","with","of","an","for","to","was","were","and","in","my","from","out","by"],split_string(Sentence02,SepandPad,SepandPad,Sentence2),subtract(Sentence2,Connectors,Sentence3),%%length(Sentence3,Length),%% () add generated data%%write_commands(Length,[],Commands), %% sentence alggenerate_sentences(Sentence3,[],Sentence_a,30), %% detail sentencesappend(Sentence3,Sentence_a,Sentence4),findall([*,Sentence1,a_alg(Sentence5),b_alg(Sentence5,a),bb_alg(Sentence6)],(member(Sentence4a,Sentence4),make_lists(Sentence4a,[],Sentence5),Sentence5=[_|Sentence6]),B),!.
grammar_logic_to_alg(Sentence1,B) :- %% Not by multi-sentence algorithms, just by sentenceatom_string(Sentence0,Sentence1),downcase_atom(Sentence0,Sentence01),atom_string(Sentence01,Sentence02),SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",Connectors=["the","a","i","on","with","of","an","for","to","was","were","and","in","my","from","out","by"],split_string(Sentence02,SepandPad,SepandPad,Sentence2),subtract(Sentence2,Connectors,Sentence3),%%length(Sentence3,Length),%% () add generated data%%write_commands(Length,[],Commands), %% sentence alggenerate_sentences(Sentence3,[],Sentence_a,30), %% detail sentencesappend([Sentence3],Sentence_a,Sentence4),findall([*,Sentence1,a_alg(Sentence5),b_alg(Sentence5,a),bb_alg(Sentence6)],(member(Sentence4a,Sentence4),make_lists(Sentence4a,[],Sentence5),Sentence5=[_|Sentence6]),B),!.  %% detail algsgenerate_sentences(_Sentence3,Sentence_a,Sentence_a,0) :- !.
grammar_logic_to_alg112(Result) :-grammar_logic_to_alg11(Result1),term_to_atom(Result1,Result).
grammar_logic_to_alg114(Text,Result) :-grammar_logic_to_alg113(Text,Result1),term_to_atom(Result1,Result).
grammar_part(A,B,C):-string_concat(A,C,B),string_length(A,1).
grandparent(GG) :-findall([A,B],parent(A,B),C),findall([Grandparent,Grandchild],(member([Grandparent, Child],C),member([Child, Grandchild],C)),GG),!.
gridline_orig_2_3d(X1,_Y1,X2,_Y2,M,C,C2,Grid,N3) :-M =< 1, M >= -1,%%x_3d(X),%%X1 is X+1,gridline_orig_3_3d(X1,X2,M,C,C2,Grid,N3,_X).
gridline_orig_3_3d(X1,X2,_M,_C,Grid,Grid,_N3,_N4) :-%%X1 is N4+1. %% swap, X1 is X2+1.gridline_orig_3_3d(X1,X2,M,C,Grid1,Grid2,N3,_N4) :-Z is floor(M*X1+C), % or round ***%%Coord = [X1,Y],%trace,findall(New,(member([X0,Y0,Z0,M0],Grid1),([X0,Y0,Z0,M0]=[X1,Y,Z,M2]->%member([X1,Y,Z,M2],Grid1),%delete(Grid1,[X1,Y,Z,M2],Grid11),(append(M2,[N3],M3),New=[X1,Y,Z,M3]);New=[X0,Y0,Z0,M0])),Grid3),%append(Grid11,[[X1,Y,M3]],Grid3),%%writeln_3d([X1,Y,M3]), %%X3 is X1+1,gridline_orig_3_3d(X3,X2,M,C,Grid3,Grid2,N3,_N42).
group_by_same_destination1(B,Options8,Options11,Options12) :-%%B=[[A1,A2,A3]|B2],findall([A1,A2,A3,A4,A5],(member([A1,A2,A3],B),member([A3,A4,A5],Options8)),C1),sort(C1,C2),findall([[A1,A2,C],[C,A4,A5]],(member([A1,A2,A3,A4,A5],C2),get_c(C)),Options11a),maplist(append,[Options11a],[Options11]),findall([[A1,A2,A3],[A3,A4,A5]],(member([A1,A2,A3,A4,A5],C2)),Options12a),maplist(append,[Options12a],[Options12]).
group_clauses(Dependencies7,Pred_numbers,Clause_Ns3) :- length(Pred_numbers,Pred_numbers_L), numbers(Pred_numbers_L,1,[],Pred_numbers_Ns), findall1([Pred_numbers_N,A,B,C],(member(Pred_numbers_N,Pred_numbers_Ns),get_item_n(Pred_numbers,Pred_numbers_N,[A,B,C])),Pred_numbers2),  findall1(D3,(member(D,Dependencies7), (D=[loop1,D1]->(findall1([N1,D2],(member(D2,D1), member([N1,A,B,C],Pred_numbers2),member(D2,C)),ND1),D3=[loop1,ND1]); (member([N,A,B,C],Pred_numbers2),member(D,C),D3=[N,D]))),Clause_Ns),  collect_clauses_in_loops(Clause_Ns,Clause_Ns1), move_non_loop_clauses_to_loop(Clause_Ns1,Clause_Ns3),!.
group_into_clauses(_,[],NDs1,NDs1,NDs2,NDs2) :- !.
group_into_clauses10(_,[],A,A) :- !.
group_non_lists1(A,B) :- group_non_lists2(A,[],B),!.
groups_on_side(People) :-maplist(happy,People).
halves(S,H1,H2) :-length(S,L),A is mod(L,2),(A is 0->(M1 is L/2,length(H1,M1),append(H1,H2,S));(L2 is L-1,M1 is L2/2,length(H1,M1),append(H1,[_|H2],S))).
halves(S,H1,H2) :-length(S,L),A is mod(L,2),(A is 0->(M1 is L/2,length(H1,M1),append(H1,H2,S));(L2 is L-1,M1 is L2/2,length(H1,M1),append(H1,[_|H2],S))).sum([],S,S):-!.
handle_error(_Err):-  halt(1).
handle_error(_Err):-  halt(1).main :- halt(1).
happy2 :-expressions(Expressions),member(["talking",Face1],Expressions),print_face(Face1),nl,writeln("In a few words, what is it?"),read_string(user_input, "\n", "\r", _End1, _Response1),writeln("Good."),nl,happy.
harmony(Form,CPT,Progression,Harmony1,Harmony2) :-harmony1(Form,CPT,Progression,[],Harmony3),append(Harmony1,[Harmony3],Harmony2).
harmony(Form,CPT,Progression,Harmony1,Harmony2) :-harmony1(Form,CPT,Progression,[],Harmony3),append(Harmony1,[Harmony3],Harmony2).harmony1(_Form,_CPT,[],Harmony,Harmony) :- !.
harmonyinstrumentnumber(NumberofInstruments) :-%% Number of harmony instrumentstrialy2("Number of harmony instruments?",[1,2,3,4,5,6,7,8,9,10],R1),findbest(R1,NumberofInstruments).
healthy(circulatory_system_and_cardiovascular_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(digestive_system_and_excretory_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(endocrine_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(integumentary_system_and_exocrine_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(immune_system_and_lymphatic_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(muscular_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(nervous_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(renal_system_and_urinary_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(reproductive_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(respiratory_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?healthy(skeletal_system):-random(X),X1 is round(10*X),texttobr2(X1).%if nothing else is wrong, is there anything wrong?% run dailyrun_daily:-findall(_,(healthy(A),writeln1([A,"healthy"])),_).
help(subterm_with_address) :-print_message(information,'Subterm With Address Help'),Message='sub_term_wa(Subterm, Term, Instances)sub_term_wa([a,_], [[a,b], [a,c]], Instances).
high_distinction("careful planning").
higher_freq_essay(E1,E2) :-word_frequency_count(["string",E1],Freq),sort(Freq,Freq1),length(A,5),length(Freq,L),(L<5->L2=Freq1;(append(_,A,Freq1),L2=A)),findall([B,C],(member([_,B],L2),member([_,C],L2),not(B=C)),E2).
higher_lower :-random(X),X1 is floor(X*100)/10,higher_lower(9,X1).
horizontal_line(X1,X2,Y,Z1,Grid1,Grid2) :-numbers(X2,X1,[],XN),horizontal_line1(XN,Y,Z1,Grid1,Grid2).
how_much_faster_than_personal_best(PB,V,D) :- D is PB-V.
idea(D) :- idea1([[1-1-2]],D).
idea1(D1,D3) :- random1(10,N), (N=1->D1=D3;fail),!.
ideas(Philosophies,Comments,Ideas1,Ideas2) :-((random(X),1 is ceiling(X*2))->(random_member(Hour,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]),random_member(Minute,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]),random_member(Philosophy,Philosophies),random_member(Comment,Comments),append(Ideas1,[[Hour,Minute,Philosophy,Comment]],Ideas3),% rebut attack hereideas(Philosophies,Comments,Ideas3,Ideas2));Ideas1=Ideas2).
if_brackets_tl1([],H,H) :- !.
immortality_medicine :-findall(_,(medicine0,four_by_fifty_As),_),!.
induct(In,Out,Commands1,Commands2) :- %retractall(var1(_)), %assertz(var1(0)), %type(Command,In1,Out1), interpret_induct(Command,In,Out,Alg14), append(Commands1,[[Command,Alg14,Out]],Commands2).
init_input([Type,File_or_string]) :-SepandPad="\n\r",(Type="file"->(phrase_from_file_s(string(Input_stream1), File_or_string));Input_stream1=File_or_string),split_string(Input_stream1,SepandPad,SepandPad,Input_stream2),length(Input_stream2,N),numbers(N,1,[],Ns),findall([N1,Item],(member(N1,Ns),get_item_n(Input_stream2,N1,Item)),Items),retractall(input_stream(_)),assertz(input_stream(Items)),retractall(input_stream_n(_)),assertz(input_stream_n(1)).
init_keep_comments :-(not(keep_comments(_))->(retractall(keep_comments(_)), assertz(keep_comments([])));true),!.
inkey :- tty_size(R,C), X is round(C/2), Y is round(R/2), move(R,1,C,1,R,X,Y).
inputs2arguments(_Relations,_FunctionNumber,3,Vars,Vars,Header,Header,TypeStatements,TypeStatements).
instrumentlist(0,Instruments,Instruments) :- !.
instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument) :-instrumentnumber(MelodyInstrumentNumber),instrumentnumber(HarmonyInstrumentNumber),instrumentlist(MelodyInstrumentNumber,MelodyInstruments),instrumentlist(HarmonyInstrumentNumber,HarmonyInstruments),Vocalstubinstrument=[0,"Acoustic Grand Piano"],parts(Form1,MelodyInstruments,MelodyParts),aggregate_all(count, (member(A1,MelodyParts),not(A1=[_,_,0])), Count1),not(Count1=0),parts(Form1,HarmonyInstruments,HarmonyParts),aggregate_all(count, (member(A2,HarmonyParts),not(A2=[_,_,0])), Count2),not(Count2=0).instrumentnumber(NumberofInstruments) :-%% Number of melody instrumentsmind_read(NumberofInstruments,[1,2,3]).
instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument) :-instrumentnumber(MelodyInstrumentNumber),instrumentnumber(HarmonyInstrumentNumber),instrumentlist(MelodyInstrumentNumber,MelodyInstruments),instrumentlist(HarmonyInstrumentNumber,HarmonyInstruments),Vocalstubinstrument=[0,"Acoustic Grand Piano"],parts(Form1,MelodyInstruments,MelodyParts),aggregate_all(count, (member(A1,MelodyParts),not(A1=[_,_,0])), Count1),not(Count1=0),parts(Form1,HarmonyInstruments,HarmonyParts),aggregate_all(count, (member(A2,HarmonyParts),not(A2=[_,_,0])), Count2),not(Count2=0).instrumentnumber(NumberofInstruments) :-%% Number of melody instrumentstrialy2([1,2,3],R1),findbest(R1,NumberofInstruments).
instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument) :-instrumentnumber(MelodyInstrumentNumber),instrumentnumber(HarmonyInstrumentNumber),instrumentlist(MelodyInstrumentNumber,MelodyInstruments),instrumentlist(HarmonyInstrumentNumber,HarmonyInstruments),Vocalstubinstrument=[0,"Acoustic Grand Piano"],parts(Form1,MelodyInstruments,MelodyParts),parts(Form1,HarmonyInstruments,HarmonyParts).instrumentnumber(NumberofInstruments) :-%% Number of melody instrumentstrialy2([1,2,3],R1),findbest(R1,NumberofInstruments).
international_interpret([lang,Lang],Debug,Query,Functions1,Result) :-retractall(lang(_)), assertz(lang(Lang)),interpret_1(Debug,Query,Functions1,Result).
international_lucianpl([lang,Lang],Debug,Query,Functions1,Result) :- retractall(lang(_)), assertz(lang(Lang)),lucianpl_1(Debug,Query,Functions1,Result).
international_lucianpl1([lang,Lang],Debug,Query,Functions1,Result) :- retractall(lang(_)), assertz(lang(Lang)),lucianpl1_1(Debug,Query,Functions1,Result).
interpret(A,B,Op,R) :- Op=(+),R is A+B.
interpret(Debug,Query,TypeStatements,ModeStatements,Functions1,Result) :-retractall(types(_)), assertz(types(on)),retractall(typestatements(_)), assertz(typestatements(TypeStatements)),retractall(modestatements(_)), assertz(modestatements(ModeStatements)),interpret11(Debug,Query,Functions1,Result).
interpret1(Debug,Query,Functions1,Functions2,Result) :-%%writeln1([i11]),retractall(debug(_)), assertz(debug(Debug)),   retractall(cut(_)),   assertz(cut(off)),retractall(leash1(_)),   assertz(leash1(off)), %% Should normally be off  retractall(sys(_)), assertz(sys(1)),(not(equals4(_Equals4))->(retractall(equals4(_)),assertz(equals4(on)));true),%equals4(Equals4)),%trace,(not(save_debug(_))->(retractall(save_debug(_)),assertz(save_debug(off)));true),  (not(occurs_check(_))->(retractall(occurs_check(_)),assertz(occurs_check(off)));true),retractall(retry_back(_)),  retractall(retry_back_stack(_)),  retractall(retry_back_stack_n(_)),  retractall(cumulative_or_current_text(_)),  retractall(number_of_current_text(_)), assertz(retry_back(off)), % on - retry/back mode options available in trace mode assertz(retry_back_stack([])), % on - retry/back mode options available in trace mode assertz(retry_back_stack_n(0)), assertz(cumulative_or_current_text(current)), assertz(number_of_current_text(1)),%%writeln1(member1(Query,Functions1,Functions2,Result)),member1(Query,Functions1,Functions2,Result).
interpret11(Debug,Query,Functions,Result) :-((not(lang(_Lang1))%var(Lang1))->(retractall(lang(_)), assertz(lang("en")));true),load_lang_db,query_box(Query,Query1,Functions,Functions1),%trace,%writeln1(query_box(Query,Query1,Functions,Functions1)),%%writeln1([i1]),%%writeln1(convert_to_grammar_part1(Functions1,[],Functions2,_)),convert_to_grammar_part1(Functions1,[],Functions2,_),%insert_cuts(Functions2a,Functions2),%retractall(assertz_functions(_)), %assertz(assertz_functions(Functions2)),%trace,%writeln1(convert_to_grammar_part1(Functions1,[],Functions2,_)),%writeln1(Functions2),%%pp3(Functions2),%%writeln1(interpret1(Debug,Query,Functions2,Functions2,Result)),%writeln1(interpret1(Debug,Query1,Functions2,Functions2,Result1)),findall(Result1,interpret1(Debug,Query1,Functions2,Functions2,Result1),Result).
interpret11(Debug,Query,Functions1,Result) :-((not(lang(_Lang1))%var(Lang1))->(retractall(lang(_)), assertz(lang("en")));true),load_lang_db,%%writeln1([i1]),%%writeln1(convert_to_grammar_part1(Functions1,[],Functions2,_)),convert_to_grammar_part1(Functions1,[],Functions2,_),%trace,%writeln1(Functions2),%%pp3(Functions2),%%writeln1(interpret1(Debug,Query,Functions2,Functions2,Result)),findall(Result1,interpret1(Debug,Query,Functions2,Functions2,Result1),Result).interpret1(Debug,Query,Functions1,Functions2,Result) :-%%writeln1([i11]),retractall(debug(_)), assertz(debug(Debug)),   retractall(cut(_)),   assertz(cut(off)),retractall(leash1(_)),   assertz(leash1(off)), %% Should normally be off  retractall(findall_sys(_)), assertz(findall_sys(1)),%%writeln1(member1(Query,Functions1,Functions2,Result)),member1(Query,Functions1,Functions2,Result).
interpret_1(Debug,Query,TypeStatements,ModeStatements,Functions1,Result) :-retractall(types(_)), assertz(types(on)),retractall(typestatements(_)),%writeln(here1),findall([A,C],(member([A,B],TypeStatements),expand_types(B,[],C)),TypeStatements1), assertz(typestatements(TypeStatements1)),retractall(modestatements(_)), assertz(modestatements(ModeStatements)),interpret11(Debug,Query,Functions1,Result).
interpret_induct(Command,In,O,Alg14) :- type(Command,In1,O1), %length(In1,L), %numbers(L,1,[],N), % c d, a b -> %findall(O2,(member(N1,N), %get_item_n(In1,N1,In2), %get_item_n(In,N1,In3), %member(In2,In1), %member(In3,In), data_to_alg5(In1,O1,In,O2,Alg14),%),O3), flatten(O2,O21), list_to_compound(O21,[],O).
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[Statements1|Statements2],        interpretbody(Functions0,Functions,Vars1,Vars3,Statements1,Result2),        interpretbody(Functions0,Functions,Vars3,Vars2,Statements2,Result3),        %%((Result3=cut)->!;true),        logicalconjunction(Result1,Result2,Result3),!.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[Statements1|Statements2],not(predicate_or_rule_name(Statements1)),        interpretbody(Functions0,Functions,Vars1,Vars3,Statements1,Result2),        interpretbody(Functions0,Functions,Vars3,Vars2,Statements2,Result3),        %%((Result3=cut)->!;true),        logicalconjunction(Result1,Result2,Result3),!.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[[not,[Statements]]|Statements2],interpretbody(Functions0,Functions,Vars1,Vars3,Statements,Result2),        %%((Result2=cut)->!;true),        interpretbody(Functions0,Functions,Vars3,Vars2,Statements2,Result3),        %%((Result3=cut)->!;true),        logicalnot(Result2,Result4),(logicalconjunction(Result1,Result4,Result3)->true;(Result1=false)),!.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[[not,[Statements]]|Statements2],interpretbody(Functions0,Functions,Vars1,Vars3,Statements,Result2),        %%((Result2=cut)->!;true),        interpretbody(Functions0,Functions,Vars3,Vars2,Statements2,Result3),        %%((Result3=cut)->!;true),        logicalnot(Result2,Result4),(logicalconjunction(Result1,Result4,Result3)->true;(Result1=false)),!.interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[[Statements1],or,[Statements2]],        (interpretbody(Functions0,Functions,Vars1,Vars2,Statements1,Result1);%%,((Value1=cut)->!;true));        interpretbody(Functions0,Functions,Vars1,Vars2,Statements2,Result1)),!.
interpretbody(_Functions1,_Functions2,Vars,Vars,[],true) :- !.
interpretbodylp2c(Arguments1,Algorithm1,Algorithm2) :-Arguments1=[Arguments2|Arguments3],interpretstatementlp2c2([Arguments2],Algorithm1,Algorithm3a),write_comma_if_not_empty_list(Arguments3,Algorithm3a,Algorithm4),interpretbodylp2c(Arguments3,Algorithm4,Algorithm2),!.
interpretbodylp2c(Body,Algorithm1,Algorithm2) :-        Body=[[[n,"->"],[Statements1,Statements2,Statements2a]]|Statements3],        string_concat(Algorithm1,"(",Algorithm3),        interpretbodylp2c([Statements1],Algorithm3,Algorithm4),        string_concat(Algorithm4,"->(",Algorithm5),                interpretbodylp2c([Statements2],Algorithm5,Algorithm6),        string_concat(Algorithm6,");(",Algorithm7),                interpretbodylp2c([Statements2a],Algorithm7,Algorithm8),        string_concat(Algorithm8,"))",Algorithm9),write_comma_if_not_empty_list(Statements3,Algorithm9,Algorithm10),        interpretbodylp2c(Statements3,Algorithm10,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm11,Algorithm2),        !.
interpretbodylp2c(Body,Algorithm1,Algorithm2) :-        Body=[[[n,"->"],[Statements1,Statements2]]|Statements3],        string_concat(Algorithm1,"(",Algorithm3),        interpretbodylp2c([Statements1],Algorithm3,Algorithm4),        string_concat(Algorithm4,"->(",Algorithm5),                interpretbodylp2c([Statements2],Algorithm5,Algorithm6),        string_concat(Algorithm6,"))",Algorithm7),write_comma_if_not_empty_list(Statements3,Algorithm7,Algorithm8),        interpretbodylp2c(Statements3,Algorithm8,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm9,Algorithm2),        !.
interpretbodylp2c(Body,Algorithm1,Algorithm2) :-        Body=[[[n,or],[Statements1,Statements2]]|Statements3],        string_concat(Algorithm1,"((",Algorithm3),        interpretbodylp2c([Statements1],Algorithm3,Algorithm4),                string_concat(Algorithm4,");(",Algorithm5),        interpretbodylp2c([Statements2],Algorithm5,Algorithm6),string_concat(Algorithm6,"))",Algorithm7),write_comma_if_not_empty_list(Statements3,Algorithm7,Algorithm8),        interpretbodylp2c(Statements3,Algorithm8,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm9,Algorithm2),        !.
interpretbodylp2c(Body,Algorithm1,Algorithm2) :-%trace,        Body=[[[n,code]|Statements1]|Statements3],        string_concat(Algorithm1,"{",Algorithm3),        %trace,        interpretbodylp2c(Statements1,Algorithm3,Algorithm4),                string_concat(Algorithm4,"}",Algorithm7),write_comma_if_not_empty_list(Statements3,Algorithm7,Algorithm8),        interpretbodylp2c(Statements3,Algorithm8,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm9,Algorithm2),        !.
interpretbodylp2p(Arguments1,Algorithm1,Algorithm2) :-Arguments1=[Arguments2|Arguments3],interpretstatementlp2p2([Arguments2],Algorithm1,Algorithm3a,"[]"),write_comma_if_not_empty_list(Arguments3,Algorithm3a,Algorithm4),interpretbodylp2p(Arguments3,Algorithm4,Algorithm2),!.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-        Body=[[[n,"->"],[Statements1,Statements2,Statements2a]]|Statements3],        string_concat(Algorithm1,"(",Algorithm3),        interpretbodylp2p([Statements1],Algorithm3,Algorithm4),                (Statements2=[[n,_]|_]->(        string_concat(Algorithm4,"->",Algorithm5),                interpretbodylp2p([Statements2],Algorithm5,Algorithm6),        string_concat(Algorithm6,";",Alg7)        );        (        string_concat(Algorithm4,"->(",Algorithm5),                interpretbodylp2p([Statements2],Algorithm5,Algorithm6),        string_concat(Algorithm6,");",Alg7)        )),        (Statements2a=[[n,_]|_]->(                string_concat(Alg7,"",Algorithm7),                interpretbodylp2p([Statements2a],Algorithm7,Algorithm8),        string_concat(Algorithm8,")",Algorithm9));                (string_concat(Alg7,"(",Algorithm7),                interpretbodylp2p([Statements2a],Algorithm7,Algorithm8),        string_concat(Algorithm8,"))",Algorithm9))),        write_comma_if_not_empty_list(Statements3,Algorithm9,Algorithm10),        interpretbodylp2p(Statements3,Algorithm10,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm11,Algorithm2),        !.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-        Body=[[[n,"->"],[Statements1,Statements2]]|Statements3],        string_concat(Algorithm1,"(",Algorithm3),        interpretbodylp2p([Statements1],Algorithm3,Algorithm4),        string_concat(Algorithm4,"->(",Algorithm5),                interpretbodylp2p([Statements2],Algorithm5,Algorithm6),        string_concat(Algorithm6,"))",Algorithm7),write_comma_if_not_empty_list(Statements3,Algorithm7,Algorithm8),        interpretbodylp2p(Statements3,Algorithm8,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm9,Algorithm2),        !.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-        Body=[[[n,"->"],[Statements1,Statements2]]|Statements3],        Statements2=[[n,_]|_],        string_concat(Algorithm1,"(",Algorithm3),        interpretbodylp2p([Statements1],Algorithm3,Algorithm4),        string_concat(Algorithm4,"->",Algorithm5),                interpretbodylp2p([Statements2],Algorithm5,Algorithm6),        string_concat(Algorithm6,")",Algorithm7),write_comma_if_not_empty_list(Statements3,Algorithm7,Algorithm8),        interpretbodylp2p(Statements3,Algorithm8,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm9,Algorithm2),        !.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-        Body=[[[n,comment],[Comment]]|Statements3],        %string_concat(Algorithm1,"(",Algorithm3),        %interpretstatementlp2p1([Statements1],"",Algorithm4),        %string_concat(Algorithm4,"->(",Algorithm5),                %interpretbodylp2p([Statements2],"",Algorithm6),        %string_concat(Algorithm6,");(",Algorithm7),                %interpretstatementlp2p1([Statements2a],"",Algorithm8),        %string_concat(Algorithm8,"))",Algorithm9),        foldr(string_concat,[Algorithm1,%"\n","/*",        Comment%,"*/"        ,"\n"        ],Algorithm10),%write_comma_if_not_empty_list(Statements3,Algorithm9,Algorithm10),        interpretbodylp2p(Statements3,Algorithm10,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm11,Algorithm2),        !.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-        Body=[[[n,or],[Statements1,Statements2]]|Statements3],        string_concat(Algorithm1,"((",Algorithm3),        interpretbodylp2p([Statements1],Algorithm3,Algorithm4),                string_concat(Algorithm4,");(",Algorithm5),        interpretbodylp2p([Statements2],Algorithm5,Algorithm6),string_concat(Algorithm6,"))",Algorithm7),write_comma_if_not_empty_list(Statements3,Algorithm7,Algorithm8),        interpretbodylp2p(Statements3,Algorithm8,Algorithm2),        %%write_full_stop_if_last_item(Statements3,Algorithm9,Algorithm2),        !.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-%trace,            Body=[[Function,[Arguments2a,Arguments2b,Arguments2c]]|Statements2],        Function=[n,F],        (F= (+)->true; (F= (-)->true; (F= (*)->true; F= (/)))),            %interpretstatementlp2p2a(Function,Algorithm1,Algorithm3a,"[]"), %               string_concat(Algorithm3a,"(",Algorithm3d),interpretstatementlp2p2a(Arguments2a,"",Algorithm2a1,"[]"),interpretstatementlp2p2a(Arguments2b,"",Algorithm2b1,"[]"),interpretstatementlp2p2a(Arguments2c,"",Algorithm2c1,"[]"),        foldr(string_concat,[Algorithm1,Algorithm2c1," is ",Algorithm2a1,F,Algorithm2b1],Algorithm2d),write_comma_if_not_empty_list(Statements2,Algorithm2d,Algorithm2e),        interpretbodylp2p(Statements2,Algorithm2e,Algorithm2),!.
interpretpart("",Variable1,Vars1,Vars2) :-        getvalue(Variable1,Value1,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),isempty(Value1),        %%val1emptyorvalsequal(Value1,""),%%isval(Value2),debug_call(Skip,[[n,""],[variable]]),(        putvalue(Variable1,"",Vars1,Vars2)->debug_exit(Skip,[[n,""],[""]]);     debug_fail(Skip,[[n,""],[variable]])),!.
interpretpart([],Variable1,Vars1,Vars2) :-        getvalue(Variable1,Value1,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),isempty(Value1),        %%val1emptyorvalsequal(Value1,[]),%%isval(Value2),debug_call(Skip,[[n,[]],[variable]]),(        putvalue(Variable1,[],Vars1,Vars2)->debug_exit(Skip,[[n,[]],[[]]]);     debug_fail(Skip,[[n,[]],[variable]])),!.
interpretpart(ceiling,Variable1,Variable2,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("ceiling",Dbw_ceiling),       getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_ceiling],[Value1,variable]]),((isval(Value1),   ceiling(Value1,Value2A),        val1emptyorvalsequal(Value2,Value2A),        putvalue(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_ceiling],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_ceiling],[Value1,variable]])),!.
interpretpart(delete,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        delete(Value1,Value2,Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,delete],[Value1,Value2,variable3]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,delete],[Value1,Value2,Value3A]],"Press c."]),(not(get_single_char(97))->true;abort));true).interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        append1(Value1,Value2,Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,append],[Value1,Value2,variable3]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,append],[Value1,Value2,Value3A]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(delete,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        delete(Value1,Value2,Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2),        (debug(on)->(writeln([call,[delete,Value1,Value2,variable3],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[delete,Value1,Value2,Value3A],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(get_lang_word,Variable1,Variable2,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("get_lang_word",Dbw_get_lang_word),       getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_get_lang_word],[Value1,variable]]),((%is_list(Value1),get_lang_word(Value1,Value2A1),Value2A=Value2A1,%string_atom(Value2A,Value2A1), % *** LPI only takes strings   %sort(Value1,Value2A),        val1emptyorvalsequal(Value2,Value2A),        putvalue(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_get_lang_word],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_get_lang_word],[Value1,variable]])),!.
interpretpart(intersection,Variable1,Variable2,Variable3,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("intersection",Dbw_intersection),       getvalues_equals4(Variable1,Variable2,Variable3,Value1,Value2,_Value3,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_intersection],[Value1,Value2,variable]]),((is_list(Value1),is_list(Value2),   intersection(Value1,Value2,Value3A),        %val1emptyorvalsequal(Value3,Value3A),        putvalue_equals4(Variable3,Value3A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_intersection],[Value1,Value2,Value3A]]);     debug_fail(Skip,[[Dbw_n,Dbw_intersection],[Value1,Value2,variable]])),!.
interpretpart(is,Variable1,Variable2,Vars1,Vars2) :-%writeln(here),%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("is",Dbw_is),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),is_empty(Value1),not(is_empty(Value2)),expression(Value2),        val1emptyorvalsequal(Value1,Value2),%%isval(Value2),debug_call(Skip,[[Dbw_n,Dbw_is],[variable,Value2]]),(        putvalue(Variable1,Value2,Vars1,Vars2)->debug_exit(Skip,[[Dbw_n,Dbw_is],[Value2,Value2]]);     debug_fail(Skip,[[Dbw_n,Dbw_is],[variable,Value2]])),!.
interpretpart(is,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        not(isempty(Value1)),        not(isempty(Value2)),        debug_call(Skip,[[Dbw_n,=],[Value1,Value2]]),        ((Value1A = Value2,val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,=],[Value1A,Value2]]);     debug_fail(Skip,[[Dbw_n,=],[Value1,Value2]])),!.                             interpretpart(match1,Variable1,Variable2,Variable3,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1 = [Value2A, Value3A],        debug_call(Skip,[[Dbw_n,=],[[Value2A,Value3A],[variable1,variable2]]]),        ((val1emptyorvalsequal(Value2,Value2A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable2,Value2A,Vars1,Vars3),        putvalue(Variable3,Value3A,Vars3,Vars2))->      debug_exit(Skip,[[Dbw_n,=],[[Value2A, Value3A],[Value2A, Value3A]]]);     debug_fail(Skip,[[Dbw_n,=],[[Value2A,Value3A],[variable1,variable2]]])),!.                        interpretpart(match2,Variable1,Variable2,Variable3,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1A = [Value2, Value3],        debug_call(Skip,[[Dbw_n,=],[variable,[Value2,Value3]]]),        ((val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->      (debug_exit(Skip,[[Dbw_n,=],[[Value2,Value3],[Value2,Value3]]]);     debug_fail(Skip,[[Dbw_n,=],[variable,[Value2,Value3]]]))),!.                        interpretpart(match3,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        Value1A = Value2,        debug_call(Skip,[[Dbw_n,=],[variable,Value2]]),        ((val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->      (debug_exit(Skip,[[Dbw_n,=],[Value2,Value2]]);     debug_fail(Skip,[[Dbw_n,=],[variable,Value2]]))),!.                        interpretpart(match4,Variable1,Variable2,Vars1,Vars2,Note) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals4",Dbw_equals4),%trace,        debug_call(Skip,[[Dbw_n,Dbw_equals4],[Variable1,Variable2]]),        %trace,        (match4_2(Variable1,Variable2,Vars1,Vars2)                %%Value1A = Value2,        %%((val1emptyorvalsequal(Value1,Value1A),        %%putvalue(Variable1,Value1A,Vars1,Vars2))        ->      (debug_exit(Skip,[[Dbw_n,Dbw_equals4],[Note,Note]]);     debug_fail(Skip,[[Dbw_n,Dbw_equals4],[Variable1,Variable2]]))),!.                        interpretpart(delete,Variable1,Variable2,Variable3,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("delete",Dbw_delete),        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_delete],[Value1,Value2,variable3]]),        ((delete(Value1,Value2,Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_delete],[Value1,Value2,Value3A]]);     debug_fail(Skip,[[Dbw_n,Dbw_delete],[Value1,Value2,variable3]])),!.                        interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("append",Dbw_append),                getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,variable3]]),        ((append1(Value1,Value2,Value3A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable3,Value3A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3A]]);     debug_fail(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,variable3]])),!.                        interpretpart(date,Year,Month,Day,Hour,Minute,Seconds,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("date",Dbw_date),                getvalues(Year,Month,Day,YearValueA,MonthValueA,DayValueA,Vars1),        getvalues(Hour,Minute,Seconds,HourValueA,MinuteValueA,SecondsValueA,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_date],[[variable1,variable2,variable3,variable4,variable5,variable6]]]),        ((get_time(TS),stamp_date_time(TS,date(YearValueB,MonthValueB,DayValueB,HourValueB,MinuteValueB,SecondsValueB,_A,_TZ,_False),local),        val1emptyorvalsequal(YearValueA,YearValueB),        val1emptyorvalsequal(MonthValueA,MonthValueB),        val1emptyorvalsequal(DayValueA,DayValueB),        val1emptyorvalsequal(HourValueA,HourValueB),        val1emptyorvalsequal(MinuteValueA,MinuteValueB),        val1emptyorvalsequal(SecondsValueA,SecondsValueB),        putvalue(Year,YearValueB,Vars1,Vars3),              putvalue(Month,MonthValueB,Vars3,Vars4),              putvalue(Day,DayValueB,Vars4,Vars5),              putvalue(Hour,HourValueB,Vars5,Vars6),              putvalue(Minute,MinuteValueB,Vars6,Vars7),              putvalue(Seconds,SecondsValueB,Vars7,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_date],[YearValueB,MonthValueB,DayValueB,HourValueB,MinuteValueB,SecondsValueB]]);     debug_fail(Skip,[[Dbw_n,Dbw_date],[variable1,variable2,variable3,variable4,variable5,variable6]])),!.
interpretpart(is,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),        %not(isempty(Value1)),        %not(isempty(Value2)),        debug_call(Skip,[[Dbw_n,=],[Value1,Value2]]),        ((Value1A = Value2,%val1emptyorvalsequal(Value1,Value1A),        putvalue_equals4(Variable1,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,=],[Value1A,Value2]]);     debug_fail(Skip,[[Dbw_n,=],[Value1,Value2]])),!.                             interpretpart(match1,Variable1,Variable2,Variable3,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,getvalues_equals4(Variable1,Variable2,Variable3,Value1,_Value2,_Value3,Vars1),        Value1 = [Value2A, Value3A],        debug_call(Skip,[[Dbw_n,=],[[Value2A,Value3A],[variable1,variable2]]]),        ((%val1emptyorvalsequal(Value2,Value2A),        %val1emptyorvalsequal(Value3,Value3A),        putvalue_equals4(Variable2,Value2A,Vars1,Vars3),        putvalue_equals4(Variable3,Value3A,Vars3,Vars2))->      debug_exit(Skip,[[Dbw_n,=],[[Value2A, Value3A],[Value2A, Value3A]]]);     debug_fail(Skip,[[Dbw_n,=],[[Value2A,Value3A],[variable1,variable2]]])),!.                        interpretpart(match2,Variable1,Variable2,Variable3,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        getvalues_equals4(Variable1,Variable2,Variable3,_Value1,Value2,Value3,Vars1),        Value1A = [Value2, Value3],        debug_call(Skip,[[Dbw_n,=],[variable,[Value2,Value3]]]),        ((%val1emptyorvalsequal(Value1,Value1A),        putvalue_equals4(Variable1,Value1A,Vars1,Vars2))->      (debug_exit(Skip,[[Dbw_n,=],[[Value2,Value3],[Value2,Value3]]]);     debug_fail(Skip,[[Dbw_n,=],[variable,[Value2,Value3]]]))),!.                        interpretpart(match3,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        getvalues_equals4(Variable1,Variable2,_Value1,Value2,Vars1),        Value1A = Value2,        debug_call(Skip,[[Dbw_n,=],[variable,Value2]]),        ((%val1emptyorvalsequal(Value1,Value1A),        putvalue_equals4(Variable1,Value1A,Vars1,Vars2))->      (debug_exit(Skip,[[Dbw_n,=],[Value2,Value2]]);     debug_fail(Skip,[[Dbw_n,=],[variable,Value2]]))),!.                        interpretpart(match4,Variable1,Variable2,Vars1,Vars2,_Note) :-get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals4",Dbw_equals4),%trace,        debug_call(Skip,[[Dbw_n,Dbw_equals4],[Variable1,Variable2]]),        %trace,        remember_and_turn_off_debug(Debug),                ((match4_new_22(Variable1,Variable2,Vars1,Vars2%,standard        ), %match4_2(Variable1,Variable2,Vars1,Vars2),                        %trace,find_sys(Sys_name),        match4_new_22(Variable1,[Dbw_v,Sys_name],Vars2,Vars3%,standard        ),%%writeln1(        interpretpart(match4,Variable1,[v,sys1],Vars3,Vars2,_)),%%interpretstatement1(ssi,Functions0,Functions,[[n,equals4],[Variable1,Variable3]],Vars3,Vars2,true,nocut),getvalue([Dbw_v,Sys_name],Value3,Vars3), turn_back_debug(Debug))        %%Value1A = Value2,        %%((val1emptyorvalsequal(Value1,Value1A),        %%putvalue(Variable1,Value1A,Vars1,Vars2))        ->      debug_exit(Skip,[[Dbw_n,Dbw_equals4],[Value3,Value3]]);     (turn_back_debug(Debug),debug_fail(Skip,[[Dbw_n,Dbw_equals4],[Variable1,Variable2]]))),!.                        interpretpart(delete,Variable1,Variable2,Variable3,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("delete",Dbw_delete),        getvalues_equals4(Variable1,Variable2,Variable3,Value1,Value2,_Value3,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_delete],[Value1,Value2,variable3]]),        ((delete(Value1,Value2,Value3A),        %val1emptyorvalsequal(Value3,Value3A),        putvalue_equals4(Variable3,Value3A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_delete],[Value1,Value2,Value3A]]);     debug_fail(Skip,[[Dbw_n,Dbw_delete],[Value1,Value2,variable3]])),!.                        interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("append",Dbw_append),        %trace,        %getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),%trace,getvalue_equals4(Variable1,Value11,Vars1),getvalue_equals4(Variable2,Value21,Vars1),getvalue_equals4(Variable3,Value31,Vars1),append2(Dbw_n,Dbw_append,Variable1,Variable2,Variable3,Value11,Value21,Value31,Vars1,Vars2).append2(Dbw_n,Dbw_append,_Variable1,_Variable2,Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(1),(contains_empty(Value31),not(contains_empty(Value11)),not(contains_empty(Value21))),(Value11=Value1,Value21=Value2,debug_call(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,variable3]]),        ((append1(Value1,Value2,Value3A),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        putvalue_equals4(Variable3,Value3A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3A]])%;     debug_fail(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,variable3]])))).append2(Dbw_n,Dbw_append,Variable1,Variable2,_Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(2),%trace,(contains_empty(Value11),contains_empty(Value21),not(contains_empty(Value31))),(Value31=Value3,debug_call(Skip,[[Dbw_n,Dbw_append],[variable1,variable2,Value3]]),        ((append1(Value1A,Value2A,Value3),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        putvalue_equals4(Variable1,Value1A,Vars1,Vars3),        putvalue_equals4(Variable2,Value2A,Vars3,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1A,Value2A,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_append],[Value1A,Value2A,variable3]]))%);))).
interpretpart(is,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("is",Dbw_is),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),isempty(Value1),not(isempty(Value2)),expression(Value2),        val1emptyorvalsequal(Value1,Value2),%%isval(Value2),debug_call(Skip,[[Dbw_n,Dbw_is],[variable,Value2]]),(        putvalue(Variable1,Value2,Vars1,Vars2)->debug_exit(Skip,[[Dbw_n,Dbw_is],[Value2,Value2]]);     debug_fail(Skip,[[Dbw_n,Dbw_is],[variable,Value2]])),!.
interpretpart(iscomparison,Operator,Variable1,Variable2,Vars1,Vars1) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Operator],[Value1,Value2]]),((isval(Value1),isval(Value2),Expression=..[Operator,Value1,Value2],        Expression)->      debug_exit(Skip,[[Dbw_n,Operator],[Value1,Value2]]);     debug_fail(Skip,[[Dbw_n,Operator],[Value1,Value2]])),!.
interpretpart(isop,Operator,Variable1,Variable2,Variable3,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        debug_call(Skip,[[Dbw_n,Operator],[Value2,Value3,variable]]),((isvalempty(Value1),isval(Value2),isval(Value3),Expression=..[Operator,Value2,Value3],        Value1A is Expression,        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Operator],[Value2,Value3,Value1A]]);     debug_fail(Skip,[[Dbw_n,Operator],[Value2,Value3,variable]])),!.
interpretpart(isop,Operator,Variable1,Variable2,Variable3,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        debug_call(Skip,[[Dbw_n,Operator],[Value2,Value3,variable]]),((isvalempty(Value1),isval(Value2),isval(Value3),Expression=..[Operator,Value2,Value3],        Value1A is Expression,        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Operator],[Value2,Value3,Value1A]]);     debug_fail(Skip,[[Dbw_n,Operator],[Value2,Value3,variable]])),!.interpretpart(iscomparison,Operator,Variable1,Variable2,Vars1,Vars1) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Operator],[Value1,Value2]]),((isval(Value1),isval(Value2),Expression=..[Operator,Value1,Value2],        Expression)->      debug_exit(Skip,[[Dbw_n,Operator],[Value1,Value2]]);     debug_fail(Skip,[[Dbw_n,Operator],[Value1,Value2]])),!.
interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),isvalempty(Value1),isval(Value2),isval(Value3),        Value1A is Value2 + Value3,        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,+],[Value2,Value3,variable]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,+],[Value2,Value3,Value1A]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(length,Variable1,Variable2,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("length",Dbw_length),       getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_length],[Value1,variable]]),((islist(Value1),   length(Value1,Value2A),        val1emptyorvalsequal(Value2,Value2A),        putvalue(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_length],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_length],[Value1,variable]])),!.
interpretpart(length,Variable1,Variable2,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("length",Dbw_length),       getvalues_equals4(Variable1,Variable2,Value1,_Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_length],[Value1,variable]]),((islist(Value1),   length(Value1,Value2A),        %val1emptyorvalsequal(Value2,Value2A),        putvalue_equals4(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_length],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_length],[Value1,variable]])),!.
interpretpart(member2,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member2",Dbw_member2),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),((Value2=empty,((member(Value2a,Value1),debug_call(Skip,[[Dbw_n,Dbw_member2],[Value1,Value2]]),putvalue(Variable2,Value2a,Vars1,Vars2)))),      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value1,Value2a]])).
interpretpart(member3,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member3",Dbw_member2),        getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),        %trace,((%Value2=empty,%trace,((member(Value1a,Value2),remember_and_turn_off_debug(Debug),(interpretpart(match4,Variable1,Value1a,Vars1,Vars2,_)->true;(turn_back_debug(Debug),fail)),turn_back_debug(Debug),debug_call(Skip,[[Dbw_n,Dbw_member2],[Value2,Value1]])%putvalue(Variable1,Value1a,Vars1,Vars2)))),      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value2,Value1a]])).
interpretpart(not_head,Variable1,Variable2,Vars1,Vars1) :-getvalues(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[n,[not,head]],[Value1,Value2]]),((not(Value1=[Value2|_Rest])        %%val1emptyorvalsequal(Value2,Value1A),        %%putvalue(Variable2,Value1A,Vars1,Vars2)        )->      debug_exit(Skip,[[n,[not,head]],[Value1,Value2]]);     debug_fail(Skip,[[n,[not,head]],[Value1,Value2]])),!.
interpretpart(not_is,Variable1,Variable2,Vars1,Vars1) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        not(isempty(Value1)),        not(isempty(Value2)),        %%writeln([call,[[not,=],[Value1,Value2]]]),        ((not(Value1 = Value2))->      true%%writeln([exit,[[not,=],[Value1,Value2]]]);     fail)%%writeln([fail,[[not,=],[Value1,Value2]]])),!.                        interpretpart(not_iscomparison,Operator,Variable1,Variable2,Vars1,Vars1) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        %%writeln([call,[[not,=],[Value1,Value2]]]),((isval(Value1),isval(Value2),Expression=..[Operator,Value1,Value2],        not(Expression))->      true%%writeln([exit,[[not,=],[Value1,Value2]]]);     fail)%%writeln([fail,[[not,=],[Value1,Value2]]])),!.                        isempty(N) :-N=empty.
interpretpart(not_member,Variable1,Variable2,Vars1,Vars1) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[n,[not,member]],[Value1,Value2]]),  (((not(Value2=empty)->%%member(Value2,Value1),(not(member(Value2,Value1))%%putvalue(Variable2,Value3,Vars1,Vars2)%%,Vars2=Vars1)))->      debug_exit(Skip,[[n,[not,member]],[Value1,Value2]]);     debug_fail(Skip,[[n,[not,member]],[Value1,Value2]])),!.
interpretpart(phrase_from_file,Variable1,In,Vars1,Vars2) :- %trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("phrase_from_file",Dbw_phrase_from_file),       getvalue(Variable1,Value1,Vars1),       getvalue(In,Value2,Vars1),        %trace,%trace,        debug_call(Skip,[[Dbw_n,Dbw_phrase_from_file],[variable,Value2]]),((%is_list(Value1),phrase_from_file(string(Out),Value2),%shell1_s(Value1)%Value2A=Value2A1,%string_atom(Value2A,Value2A1), % *** LPI only takes strings   %sort(Value1,Value2A),        val1emptyorvalsequal(Value1,Out),        putvalue(Variable1,Out,Vars1,Vars2)        )->      debug_exit(Skip,[[Dbw_n,Dbw_phrase_from_file],[Out,Value2]]);     debug_fail(Skip,[[Dbw_n,Dbw_phrase_from_file],[variable,Value2]])),!.
interpretpart(random,Variable1,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("random",Dbw_random),        getvalue(Variable1,Value1,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_random],[variable]]),   ((random(Value1A),        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->            debug_exit(Skip,[[Dbw_n,Dbw_random],[Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_random],[variable]])),!.
interpretpart(round,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("round",Dbw_round),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_round],[Value1,variable2]]),        ((Value2A is round(Value1),        val1emptyorvalsequal(Value2,Value2A),        putvalue(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_round],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_round],[Value1,variable2]])),!.                        interpretpart(string_from_file,Variable1,Variable2,Vars1,Vars2) :-  get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string_from_file",Dbw_string_from_file),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_string_from_file],[variable,Value2]]),%%A=..[a,1]((phrase_from_file_s(string_g(String00a),Value2),string_codes(Value1A,String00a),%%interpretstatement1(Functions0,Functions,[[Value1,Value2]],Vars1,Vars2,true,nocut),                val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable2,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_string_from_file],[Value1A,Value2]]);     debug_fail(Skip,[[Dbw_n,Dbw_string_from_file],[variable,Value2]])),!.                        interpretpart(maplist,Functions0,Functions,Variable1,Variable2,Variable3,Variable4,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("maplist",Dbw_maplist),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        getvalues(Variable3,Variable4,Value3,Value4,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_maplist],[Value1,Value2,Value3,variable]]),%%A=..[a,1]((map(Functions0,Functions,Value1,Value2,Value3,Value4A,Vars1),%%interpretstatement1(Functions0,Functions,[[Value1,Value2]],Vars1,Vars2,true,nocut),                val1emptyorvalsequal(Value4,Value4A),        putvalue(Variable4,Value4A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_maplist],[Value1,Value2,Value3,Value4A]]);     debug_fail(Skip,[[Dbw_n,Dbw_maplist],[Value1,Value2,Value3,variable]])),!.                        interpretpart(stringconcat,Terminal,Phrase2,Phrase1,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat",Dbw_stringconcat),%%Variables1=[Terminal,Phrase1,Phrase2], %% terminal can be v or "a"        ((getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[Flag1,Flag2,_Flag3]), %% prolog vars, list of vars, [v]=[prolog var]        %%delete(Value1,Value2,Value3A),        (Terminal=[_Value]->TerminalValue2=[TerminalValue1];TerminalValue2=TerminalValue1),                (Terminal=""->(TerminalValue2="",       string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1))->true;            ((var(TerminalValue2)->(string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1)),string_length(TerminalValue2,1));string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1))),                        putvalue(Terminal,TerminalValue2,Vars1,Vars3),        putvalue(Phrase2,Phrase2Value1,Vars3,Vars4),        putvalue(Phrase1,Phrase1Value1,Vars4,Vars2),        (Flag1=true->TerminalValue3=variable1;TerminalValue3=TerminalValue1),        (Flag2=true->Phrase1Value3=variable2;Phrase1Value3=Phrase1Value1))->(debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[TerminalValue3,Phrase1Value3,Phrase2]]),debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[TerminalValue1,Phrase1Value1,Phrase2Value1]])        );                (debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,variable2,variable3]]),        debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,variable2,variable3]])        )),!.
interpretpart(round,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("round",Dbw_round),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_round],[Value1,variable2]]),        ((Value2A is round(Value1),        val1emptyorvalsequal(Value2,Value2A),        putvalue(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_round],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_round],[Value1,variable2]])),!.                        interpretpart(string_from_file,Variable1,Variable2,Vars1,Vars2) :-  get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string_from_file",Dbw_string_from_file),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_string_from_file],[variable,Value2]]),%%A=..[a,1]((phrase_from_file_s(string_g(String00a),Value2),string_codes(Value1A,String00a),%%interpretstatement1(ssi,Functions0,Functions,[[Value1,Value2]],Vars1,Vars2,true,nocut),                val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable2,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_string_from_file],[Value1A,Value2]]);     debug_fail(Skip,[[Dbw_n,Dbw_string_from_file],[variable,Value2]])),!.                        interpretpart(word1,Variable1,Vars1) :-  get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("word1",Dbw_word1),        getvalue(Variable1,Value1,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_word1],[variable]]),%%A=..[a,1]((phrase(word1(Value1),_))->%phrase_from_file_s(string_g(String00a),Value2),%string_codes(Value1A,String00a),%%interpretstatement1(ssi,Functions0,Functions,[[Value1,Value2]],Vars1,Vars2,true,nocut),                %val1emptyorvalsequal(Value1,Value1A),        %putvalue(Variable2,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_word1],[Value1]]);     debug_fail(Skip,[[Dbw_n,Dbw_word1],[variable]])),!.                        interpretpart(maplist,Functions0,Functions,Variable1,Variable2,Variable3,Variable4,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("maplist",Dbw_maplist),        getvalue(Variable1,Value1,Vars1),        getvalues_equals4(Variable2,Variable3,Variable4,Value2,Value3,_Value4,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_maplist],[Value1,Value2,Value3,variable]]),%%A=..[a,1]((map(Functions0,Functions,Value1,Value2,Value3,Value4A,Vars1),%%interpretstatement1(ssi,Functions0,Functions,[[Value1,Value2]],Vars1,Vars2,true,nocut),                %val1emptyorvalsequal(Value4,Value4A),        putvalue_equals4(Variable4,Value4A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_maplist],[Value1,Value2,Value3,Value4A]]);     debug_fail(Skip,[[Dbw_n,Dbw_maplist],[Value1,Value2,Value3,variable]])),!.                        interpretpart(string_length,Variable1,Variable2,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string_length",Dbw_string_length),       getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_string_length],[Value1,variable]]),((string(Value1),   string_length(Value1,Value2A),        val1emptyorvalsequal(Value2,Value2A),        putvalue(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_string_length],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_string_length],[Value1,variable]])),!.
interpretpart(sort,Variable1,Variable2,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("sort",Dbw_sort),       getvalues_equals4(Variable1,Variable2,Value1,_Value2,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_sort],[Value1,variable]]),((is_list(Value1),   sort(Value1,Value2A),        %val1emptyorvalsequal(Value2,Value2A),        putvalue_equals4(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_sort],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_sort],[Value1,variable]])),!.
interpretpart(stringtonumber,Variable2,Variable1,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringtonumber",Dbw_stringtonumber),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),%%Value1A = [Value2],debug_call(Skip,[[Dbw_n,Dbw_stringtonumber],[Value2,value]]),((((Value2=""->true;Value2=empty)->Value1="";number_string(Value1A,Value2)),        val1emptyorvalsequal(Value1,Value1A),        %%val1emptyorvalsequal(Value1A,Value2),        putvalue(Variable1,Value1A,Vars1,Vars2))->debug_exit(Skip,[[Dbw_n,Dbw_stringtonumber],[Value2,Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_stringtonumber],[Value2,value]])),!.interpretpart(bracket2,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("unwrap",Dbw_unwrap),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_unwrap],[variable,Value2]]),        (([Value2A] = Value1,        val1emptyorvalsequal(Value2,Value2A),        %%val1emptyorvalsequal(Value2A,Value1),        putvalue(Variable2,Value2A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_unwrap],[Value1,Value2A]]);     debug_fail(Skip,[[Dbw_n,Dbw_unwrap],[variable,Value2]])),!.
interpretpart(stringtonumber,Variable2,Variable1,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringtonumber",Dbw_stringtonumber),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),%%Value1A = [Value2],debug_call(Skip,[[Dbw_n,Dbw_stringtonumber],[Value2,value]]),((((Value2=""->true;is_empty(Value2))->Value1="";number_string(Value1A,Value2)),        val1emptyorvalsequal(Value1,Value1A),        %%val1emptyorvalsequal(Value1A,Value2),        putvalue(Variable1,Value1A,Vars1,Vars2))->debug_exit(Skip,[[Dbw_n,Dbw_stringtonumber],[Value2,Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_stringtonumber],[Value2,value]])),!.
interpretpart(writeln,Variable1,Vars1,Vars1) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("writeln",Dbw_writeln),       %getvalue(Variable1,Value1,Vars1),get_lang_word("v",Dbw_v),                debug_call(Skip,[[Dbw_n,Dbw_writeln],[variable]]),((%writeln(Value1)remember_and_turn_off_debug(Debug),%%trace,find_sys(Sys_name),        interpretpart(match4,Variable1,[Dbw_v,Sys_name],Vars1,Vars3,_),%%writeln1(        interpretpart(match4,Variable1,[v,sys1],Vars3,Vars2,_)),%%interpretstatement1(ssi,Functions0,Functions,[[n,equals4],[Variable1,Variable3]],Vars3,Vars2,true,nocut),getvalue([Dbw_v,Sys_name],Value3,Vars3), turn_back_debug(Debug), writeln0(Value3)        %val1emptyorvalsequal(Value1,Value1A),        %putvalue(Variable1,Value1A,Vars1,Vars2)        )->      debug_exit(Skip,[[Dbw_n,Dbw_writeln],[Value3]]);     debug_fail(Skip,[[Dbw_n,Dbw_writeln],[variable]])),!.
interpretstatement1(Functions0,Functions,[[Dbw_n,Dbw_findall],[Variable1,Body,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,get_lang_word("v",Dbw_v),%%writeln1(interpretstatement1(Functions0,Functions,[[n,findall],[Variable1,Body,Variable3]],Vars1,Vars2,true,nocut)),%%writeln1("h1/10"),%%trace,%%%%****%%trace,debug_call(Skip,[[Dbw_n,Dbw_findall],[Variable1,Body,Variable3]]),((findall(Value3,(%%trace,%%writeln1(interpretbody(Functions0,Functions,Vars1,Vars3,[Body],Result2)),interpretbody(Functions0,Functions,Vars1,Vars3,[Body],_Result2), %% 2->1%%((Result2=cut)->!;true),%%trace,%%(cut(on)->(%%notrace,%%fail);(%%trace,%%true)),%%notrace, remember_and_turn_off_debug(Debug),%%trace,find_findall_sys(Sys_name),        interpretpart(match4,Variable1,[Dbw_v,Sys_name],Vars3,Vars2,_),%%writeln1(        interpretpart(match4,Variable1,[v,sys1],Vars3,Vars2,_)),%%interpretstatement1(Functions0,Functions,[[n,equals4],[Variable1,Variable3]],Vars3,Vars2,true,nocut),getvalue([Dbw_v,Sys_name],Value3,Vars2), turn_back_debug(Debug)),Value3a),putvalue(Variable3,Value3a,Vars1,Vars2)        )->debug_exit(Skip,[[Dbw_n,Dbw_findall],[Variable1,Body,Value3a]]);     debug_fail(Skip,[[Dbw_n,Dbw_findall],[Variable1,Body,Variable3]])).
interpretstatement1(Functions0,Functions,[[Dbw_n,Dbw_maplist],[Variable1,Variable2,Variable3,Variable4]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("maplist",Dbw_maplist1),Dbw_maplist1=Dbw_maplist,        interpretpart(maplist,Functions0,Functions,Variable1,Variable2,Variable3,Variable4,Vars1,Vars2).
interpretstatement1(Functions0,Functions,[[n,or],[Statement1,Statement2]],Vars1,Vars2,Result,nocut) :-(interpretbody(Functions0,Functions,Vars1,Vars2,Statement1,Result1);interpretbody(Functions0,Functions,Vars1,Vars2,Statement2,Result2)).
interpretstatement1(Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-%%writeln("h1/10"),        Query1=[Function,Arguments],%%writeln(["Arguments",Arguments,"Vars1",Vars1]),        substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),        Query2=[Function,Vars3], %% Bodyvars2?%%        debug(on)->writeln([call,[Function,[Vars3]]]),%%writeln(["Query2",Query2,"Functions0",Functions0]),        interpret2(Query2,Functions0,Functions0,Result1), updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8));(writeln(here1),Vars8=[])).
interpretstatement1(Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-%%writeln("h1/10"),        Query1=[[n,grammar]|Arguments],        ((Arguments=[[Grammar1,Phrase1,RuleName|Variables2]],        %%[Variables3]=Variables2,        name(RuleName),  convert_to_grammar_part1(Grammar1,[],Grammar2))->true;  (Grammar2=Functions0,  ((Arguments=[[Phrase1,RuleName|Variables2]]  %%([Variables3]=Variables2->true;(Variables2=[],Variables3=[]))  )))),%%writeln(["Arguments",Arguments,"Vars1",Vars1]),%%substitutevarsA1(Phrase,Vars1,[],Vars3,[],FirstArgs1),%%Vars3=[[[v,PhraseVarName],PhraseValue]],%%Vars4=[[[v,vgp1],PhraseValue]],   append([Phrase1],Variables2,Variables4), %% *** Should V3 be in [] vsubstitutevarsA1(Variables4,Vars1,[],Vars2,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),  Vars2=[Phrase2|Vars4],((Phrase2=[]->true;Phrase2=[_A|_B])->End=[];End=""),  (not(Vars4=[])->append([RuleName,Phrase2,End],Vars4,Vars5);  (Vars5=[RuleName,Phrase2,End])),  Query2=[[n,grammar_part],Vars5],  ((((terminal(RuleName),      (not(Vars4=[])->append([Phrase2,RuleName],Vars4,Vars52);  (Vars52=[Phrase2,RuleName])),    (debug(on)->(writeln([call,[[n,grammar],Vars52],"Press c."]),(not(get_single_char(97))->true;abort));true),      interpretpart(grammar_part,Vars5,[],Result1),    updatevars2(FirstArgs,Result1,[],Vars51),updatevars3(Vars2,Vars51,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8))->true;(%%writeln(here1),Vars8=[]),strip(Vars8,[],Result2))->true)),        (debug(on)->(writeln([exit,[[n,grammar],Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(not(terminal(RuleName)),         %% Bodyvars2?                      (not(Vars4=[])->append([Phrase2,RuleName],Vars4,Vars52);  (Vars52=[Phrase2,RuleName])),(debug(on)->(writeln([call,[[n,grammar],Vars52],"Press c."]),(not(get_single_char(97))->true;abort));true),%%        debug(on)->writeln([call,[Function,[Vars3]]]),%%writeln(["Query2",Query2,"Functions0",Functions0]),        interpret2(Query2,Grammar2,Grammar2,Result1),         (debug(on)->(writeln([exit,[[n,grammar],Vars52],"Press c."]),(not(get_single_char(97))->true;abort));true),updatevars2(FirstArgs,Result1,[],Vars51),updatevars3(Vars2,Vars51,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8));(%%writeln(here1),Vars8=[])))),!.
interpretstatement1(Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-%%writeln("h1/10"),        Query1=[[n,grammar]|Arguments],        ((Arguments=[[Grammar1,Phrase1,RuleName|Variables2]],        %%[Variables3]=Variables2,        name(RuleName),  convert_to_grammar_part1(Grammar1,[],Grammar2))->true;  (Grammar2=Functions0,  ((Arguments=[[Phrase1,RuleName|Variables2]]  %%([Variables3]=Variables2->true;(Variables2=[],Variables3=[]))  )))),%%writeln(["Arguments",Arguments,"Vars1",Vars1]),%%substitutevarsA1(Phrase,Vars1,[],Vars3,[],FirstArgs1),%%Vars3=[[[v,PhraseVarName],PhraseValue]],%%Vars4=[[[v,vgp1],PhraseValue]],   append([Phrase1],Variables2,Variables4), %% *** Should V3 be in [] vsubstitutevarsA1(Variables4,Vars1,[],Vars2,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),  Vars2=[Phrase2|Vars4],((Phrase2=[]->true;Phrase2=[_A|_B])->End=[];End=""),  (not(Vars4=[])->append([RuleName,Phrase2,End],Vars4,Vars5);  (Vars5=[RuleName,Phrase2,End])),  Query2=[[n,grammar_part],Vars5],  ((((terminal(RuleName),      (not(Vars4=[])->append([Phrase2,RuleName],Vars4,Vars52);  (Vars52=[Phrase2,RuleName])),    (debug(on)->(writeln([call,[[n,grammar],Vars52],"Press c."]),(not(get_single_char(97))->true;abort));true),      interpretpart(grammar_part,Vars5,[],Result1),    updatevars2(FirstArgs,Result1,[],Vars51),updatevars3(Vars2,Vars51,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8))->true;(%%writeln(here1),Vars8=[]),strip(Vars8,[],Result2))->true)),        (debug(on)->(writeln([exit,[[n,grammar],Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(not(terminal(RuleName)),         %% Bodyvars2?                      (not(Vars4=[])->append([Phrase2,RuleName],Vars4,Vars52);  (Vars52=[Phrase2,RuleName])),(debug(on)->(writeln([call,[[n,grammar],Vars52],"Press c."]),(not(get_single_char(97))->true;abort));true),%%        debug(on)->writeln([call,[Function,[Vars3]]]),%%writeln(["Query2",Query2,"Functions0",Functions0]),        interpret2(Query2,Grammar2,Grammar2,Result1),         (debug(on)->(writeln([exit,[[n,grammar],Vars52],"Press c."]),(not(get_single_char(97))->true;abort));true),updatevars2(FirstArgs,Result1,[],Vars51),updatevars3(Vars2,Vars51,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8));(%%writeln(here1),Vars8=[])))),!.interpretstatement1(Grammar,_Grammar2,Query1,Vars1,Vars8,true,nocut) :-%%writeln("h1/10"),%%trace,%%%%****        Query1=[[n,grammar_part]|Arguments],        Arguments=[[RuleName|Variables2]],        %%(([Variables4|Rest]=Variables2->Variables3=Variables2;(Variables2=[],Variables3=[]))),        ((not(terminal(RuleName)),%%writeln(["Arguments",Arguments,"Vars1",Vars1]),        substitutevarsA1(Variables2,Vars1,[],Vars3,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),  (not(Vars3=[])->(append([RuleName],Vars3,Vars4),Query2=[[n,grammar_part],Vars4]);  Query2=[[n,grammar_part],RuleName]), %% Bodyvars2?%%        debug(on)->writeln([call,[Function,[Vars3]]]),%%writeln(["Query2",Query2,"Functions0",Functions0]),        %%notrace,%%**** interpret2(Query2,Grammar,Grammar,Result1), %%trace,%****updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8))->true;(%%writeln(here1),Vars8=[]))->true)->true;(terminal(RuleName),substitutevarsA1(Variables2,Vars1,[],Vars3,[],FirstArgs),%%writeln(here), %%****%%Vars3=[Phrase,End],%%Vars41=[Phrase,[v,vgp]],append([RuleName],Vars3,Vars9),%%writeln([vars9,Vars9]), %%%%%*****interpretpart(grammar_part,Vars9,[],Result1),updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars3,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8)%%writeln([vars8,Vars8]) %%%*****)->true;(%%writeln(here1),Vars8=[]))->true)),%%notrace, %%****!.
interpretstatement1(_F0,_Functions,[=,[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut) :-%%writeln(5),        interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[=,[Variable1,[Variable2]]],Vars1,Vars2,true,nocut) :-%%writeln(52),        interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[=,[[Variable1],[Variable2]]],Vars1,Vars2,true,nocut) :-%%writeln(53),        interpretpart(bracket2,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[Operator,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-isop(Operator),interpretpart(is,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[Operator,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(31),        isop(Operator),        interpretpart(is,Variable2,Variable1,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_ceiling],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("ceiling",Dbw_ceiling1),Dbw_ceiling1=Dbw_ceiling,        interpretpart(ceiling,Variable1,Variable2,Vars1,Vars2).interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_date],[Year,Month,Day,Hour,Minute,Seconds]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("date",Dbw_date1),Dbw_date1=Dbw_date,        interpretpart(date,Year,Month,Day,Hour,Minute,Seconds,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_delete],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("delete",Dbw_delete1),Dbw_delete1=Dbw_delete,%%writeln1(),        interpretpart(delete,Variable1,Variable2,Variable3,Vars1,Vars2).%%** all in form f,[1,1,etc], including + with 0,1interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_append],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("append",Dbw_append1),Dbw_append1=Dbw_append,%%writeln1(9),        interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2).interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_stringconcat],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat",Dbw_stringconcat1),Dbw_stringconcat1=Dbw_stringconcat,        interpretpart(stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_equals2],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals2",Dbw_equals21),Dbw_equals21=Dbw_equals2,%%writeln1(5),        interpretpart(match2,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_equals3],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals3",Dbw_equals31),Dbw_equals31=Dbw_equals3,%%writeln1(5),        interpretpart(match3,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_head],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("head",Dbw_head1),Dbw_head1=Dbw_head,%%writeln1(6),        interpretpart(head,Variable1,Variable2,Vars1,Vars2).interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_tail],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("tail",Dbw_tail1),Dbw_tail1=Dbw_tail,%%writeln1(61),        interpretpart(tail,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_length],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("length",Dbw_length1),Dbw_length1=Dbw_length,        interpretpart(length,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_letters],[Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("letters",Dbw_letters1),Dbw_letters1=Dbw_letters,        getvalue(Variable,Value,Vars),debug_call(Skip,[[Dbw_n,Dbw_letters],[Value]]),        ((string_codes(Value,Value1),        phrase(word1(Value1),_))->debug_exit(Skip,[[Dbw_n,Dbw_letters],[Value]]);     debug_fail(Skip,[[Dbw_n,Dbw_letters],[Value]])),!.
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_number],[Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("number",Dbw_number1),Dbw_number1=Dbw_number,        getvalue(Variable,Value,Vars),debug_call(Skip,[[Dbw_n,Dbw_number],[Value]]),(number(Value)->debug_exit(Skip,[[Dbw_n,Dbw_number],[Value]]);     debug_fail(Skip,[[Dbw_n,Dbw_number],[Value]])),!.
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_random],[Variable1]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("random",Dbw_random1),Dbw_random1=Dbw_random,        interpretpart(random,Variable1,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_round],[N1,N2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("round",Dbw_round1),Dbw_round1=Dbw_round,        interpretpart(round,N1,N2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_string],[Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string",Dbw_string1),Dbw_string=Dbw_string1,        getvalue(Variable,Value,Vars),debug_call(Skip,[[Dbw_n,Dbw_string],[Value]]),(string(Value)->debug_exit(Skip,[[Dbw_n,Dbw_string],[Value]]);     debug_fail(Skip,[[Dbw_n,Dbw_string],[Value]])),!.
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_unwrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("unwrap",Dbw_unwrap1),Dbw_unwrap1=Dbw_unwrap,%%writeln1(53), unwrap        interpretpart(bracket2,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_variable],[Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("variable",Dbw_variable1),Dbw_variable1=Dbw_variable,debug_call(Skip,[[Dbw_n,Dbw_variable],[Variable]]),        (isvar(Variable)->debug_exit(Skip,[[Dbw_n,Dbw_variable],[Variable]]);     debug_fail(Skip,[[Dbw_n,Dbw_variable],[Variable]])),!.
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_wrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("wrap",Dbw_wrap1),Dbw_wrap1=Dbw_wrap,%%writeln1(52), wrap%%writeln([[n,wrap],[Variable1,Variable2]]),        interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[Dbw_n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,comparisonoperator(Operator),%%writeln1(4),        interpretpart(iscomparison,Operator,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,=],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut) :-%%writeln(5),        interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,=],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut) :-%%writeln(5),        interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2).%%interpretstatement1(_F0,_Functions,[[Variable2,Variable3]=Variable1],Vars1,Vars2,true,nocut) :-%%writeln(51),%%        interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(31),        isop(Operator),        interpretpart(is,Variable2,Variable1,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,atom],[Variable]],Vars,Vars,true,nocut) :-getvalue(Variable,Value,Vars),                (debug(on)->(writeln([call,[[n,atom],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true),atom(Value),                (debug(on)->(writeln([exit,[[n,atom],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(_F0,_Functions,[[n,cut]],Vars,Vars,true,cut) :- !.interpretstatement1(_F0,_Functions,[[n,atom],[Variable]],Vars,Vars,true,nocut) :-getvalue(Variable,Value,Vars),                (debug(on)->(writeln([call,[[n,atom],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true),atom(Value),                (debug(on)->(writeln([exit,[[n,atom],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(_F0,_Functions,[[n,delete],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-%%writeln(),        interpretpart(delete,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,head],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(6),        interpretpart(head,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,letters],[Variable]],Vars,Vars,true,nocut) :-        getvalue(Variable,Value,Vars),                (debug(on)->(writeln([call,[[n,letters],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true),        string_codes(Value,Value1),        phrase(word1(Value1),_),                (debug(on)->(writeln([exit,[[n,letters],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(_F0,_Functions,[[n,number],[Variable]],Vars,Vars,true,nocut) :-        getvalue(Variable,Value,Vars),                (debug(on)->(writeln([call,[[n,number],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true),        number(Value),                (debug(on)->(writeln([exit,[[n,number],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(_F0,_Functions,[[n,string],[Variable]],Vars,Vars,true,nocut) :-        getvalue(Variable,Value,Vars),                (debug(on)->(writeln([call,[[n,string],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true),        string(Value),                (debug(on)->(writeln([exit,[[n,string],[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(_F0,_Functions,[[n,stringconcat],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-%%writeln(9),        interpretpart(stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,tail],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(61),        interpretpart(tail,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,unwrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(53), unwrap        interpretpart(bracket2,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,variable],[Variable]],Vars,Vars,true,nocut) :-        var(Variable),                (debug(on)->(writeln([call,[[n,variable],[Variable]],"Press c."]),(not(get_single_char(97))->true;abort));true),                (debug(on)->(writeln([exit,[[n,variable],[Variable]],"Press c."]),(not(get_single_char(97))->true;abort));true).interpretstatement1(_F0,_Functions,[[n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-isop(Operator),interpretpart(is,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[n,wrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(52), wrap        interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[[not,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-comparisonoperator(Operator),%%writeln1(4),        interpretpart(not_iscomparison,Operator,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[atom,[Variable]],Vars,Vars,true,nocut) :-getvalue(Variable,Value,Vars),                (debug(on)->(writeln([call,[atom,[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true),atom(Value),                (debug(on)->(writeln([exit,[atom,[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(_F0,_Functions,[cut,[]],Vars,Vars,true,cut) :- !.
interpretstatement1(_F0,_Functions,[delete,[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-%%writeln(),        interpretpart(delete,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[head,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(6),        interpretpart(head,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[head,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(6),        interpretpart(head,Variable1,Variable2,Vars1,Vars2).interpretstatement1(_F0,_Functions,[tail,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(61),        interpretpart(tail,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[number,[Variable]],Vars,Vars,true,nocut) :-        getvalue(Variable,Value,Vars),                (debug(on)->(writeln([call,[number,[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true),        number(Value),                (debug(on)->(writeln([exit,[number,[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(_F0,_Functions,[string,[Variable]],Vars,Vars,true,nocut) :-        getvalue(Variable,Value,Vars),                (debug(on)->(writeln([call,[string,[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true),        string(Value),                (debug(on)->(writeln([exit,[string,[Value]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(_F0,_Functions,[tail,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(61),        interpretpart(tail,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[tail,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(61),        interpretpart(tail,Variable1,Variable2,Vars1,Vars2).interpretstatement1(_F0,_Functions,[member,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(8),        interpretpart(member,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(_F0,_Functions,[variable,[Variable]],Vars,Vars,true,nocut) :-        var(Variable),                (debug(on)->(writeln([call,[variable,[Variable]],"Press c."]),(not(get_single_char(97))->true;abort));true),                (debug(on)->(writeln([exit,[variable,[Variable]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(_F0,_Functions,[variable,[Variable]],Vars,Vars,true,nocut) :-        var(Variable),                (debug(on)->(writeln([call,[variable,[Variable]],"Press c."]),(not(get_single_char(97))->true;abort));true),                (debug(on)->(writeln([exit,[variable,[Variable]],"Press c."]),(not(get_single_char(97))->true;abort));true).interpretstatement1(_F0,_Functions,[Operator,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-isop(Operator),interpretpart(is,Variable1,Variable2,Vars1,Vars2).interpretstatement1(_F0,_Functions,[Operator,[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln(31),        isop(Operator),        interpretpart(is,Variable2,Variable1,Vars1,Vars2).
interpretstatement1(non-ssi,Functions0,Functions,[[Dbw_n,Dbw_findall],[Variable1,Body,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,get_lang_word("v",Dbw_v),%trace,%writeln1(interpretstatement1(non-ssi,Functions0,Functions,[[Dbw_n,Dbw_findall],[Variable1,Body,Variable3]],Vars1,Vars2,true,nocut)),%%writeln1(interpretstatement1(ssi,Functions0,Functions,[[n,findall],[Variable1,Body,Variable3]],Vars1,Vars2,true,nocut)),%%writeln1("h1/10"),%%trace,%%%%****%%%trace,debug_call(Skip,[[Dbw_n,Dbw_findall],[Variable1,Body,Variable3]]),((findall(Value3,(%%trace,%%writeln1(interpretbody(Functions0,Functions,Vars1,Vars3,[Body],Result2)),%writeln1(interpretbody(Functions0,Functions,Vars1,Vars3,[Body],_Result2)),interpretbody(Functions0,Functions,Vars1,Vars3,[Body],Result2), %% 2->1Result2=true,%%((Result2=cut)->!;true),%%trace,%%(cut(on)->(%%notrace,%%fail);(%%trace,%%true)),%%notrace, remember_and_turn_off_debug(Debug),%%trace,find_sys(Sys_name),        interpretpart(match4,Variable1,[Dbw_v,Sys_name],Vars3,Vars2,_),%%writeln1(        interpretpart(match4,Variable1,[v,sys1],Vars3,Vars2,_)),%%interpretstatement1(ssi,Functions0,Functions,[[n,equals4],[Variable1,Variable3]],Vars3,Vars2,true,nocut),getvalue([Dbw_v,Sys_name],Value3,Vars2), turn_back_debug(Debug)),Value3a),putvalue(Variable3,Value3a,Vars1,Vars2)        )->debug_exit(Skip,[[Dbw_n,Dbw_findall],[Variable1,Body,Value3a]]);     debug_fail(Skip,[[Dbw_n,Dbw_findall],[Variable1,Body,Variable3]])).
interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_member2],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,get_lang_word("member3",Dbw_member21),Dbw_member21=Dbw_member2,%%writeln1(8),        interpretpart(member3,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_retractall],[[[Dbw_n,Variable1],[Variable2]]]],Vars1,Vars2,true,nocut) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("retractall",Dbw_retractall1),Dbw_retractall1=Dbw_retractall,        %trace,        interpretpart(retractall,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,Functions0,Functions,[[Dbw_n,Dbw_maplist],[Variable1,Variable2,Variable3,Variable4]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("maplist",Dbw_maplist1),Dbw_maplist1=Dbw_maplist,        interpretpart(maplist,Functions0,Functions,Variable1,Variable2,Variable3,Variable4,Vars1,Vars2).
interpretstatement1(ssi,Functions0,Functions,[[Dbw_n,Dbw_maplist],[Variable1,Variable2,Variable3,Variable4]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,Functions0,Functions,[[Dbw_n,Dbw_maplist],[Variable1,Variable2,Variable3,Variable4]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,Functions0,Functions,[[n,or],[Statement1,Statement2]],Vars1,Vars2,Result,nocut) :-(interpretbody(Functions0,Functions,Vars1,Vars2,Statement1,Result1);interpretbody(Functions0,Functions,Vars1,Vars2,Statement2,Result2)).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_append],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,get_lang_word("append",Dbw_append1),Dbw_append1=Dbw_append,%%writeln1(8),        ssi_interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2,Vars2c).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_assertz],[[[Dbw_n, Var], [In]]]],Vars1,Vars1,true,nocut) :-%%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("assertz",Dbw_assertz1),Dbw_assertz1=Dbw_assertz,%assertz(Var(In))debug_call(Skip,[[Dbw_n,Dbw_assertz],[[[Dbw_n, Var], [In]]]]),functor(A,Var,1),arg(1,A,In),dynamic(Var/1),assertz(A),debug_exit(Skip,[[Dbw_n,Dbw_assertz],[[[Dbw_n, Var], [In]]]]),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_atom],[Variable]],Vars,Vars,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_atom],[Variable]],Vars,Vars,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_atom_string],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("atom_string",Dbw_atom_string1),Dbw_atom_string1=Dbw_atom_string,        interpretpart(atom_string,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_atom_string],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_atom_string],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_ceiling],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("ceiling",Dbw_ceiling1),Dbw_ceiling1=Dbw_ceiling,        interpretpart(ceiling,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_ceiling],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_ceiling],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_cut]|_],Vars,Vars,true,cut) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("cut",Dbw_cut1),Dbw_cut1=Dbw_cut,!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_date],[Year,Month,Day,Hour,Minute,Seconds]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("date",Dbw_date1),Dbw_date1=Dbw_date,        interpretpart(date,Year,Month,Day,Hour,Minute,Seconds,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_date],[Year,Month,Day,Hour,Minute,Seconds]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_date],[Year,Month,Day,Hour,Minute,Seconds]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_delete],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("delete",Dbw_delete1),Dbw_delete1=Dbw_delete,%%writeln1(),        interpretpart(delete,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals1],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_equals1],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals2],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals2",Dbw_equals21),Dbw_equals21=Dbw_equals2,%%writeln1(5),        interpretpart(match2,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals2],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_equals2],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals3],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals3",Dbw_equals31),Dbw_equals31=Dbw_equals3,%%writeln1(5),        interpretpart(match3,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals3],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_equals3],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4_off]|_],Vars,Vars,true,nocut) :- %writeln(here),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals4_off",Dbw_equals4_off1),Dbw_equals4_off1=Dbw_equals4_off,turnequals4(off),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4_off]|_],Vars,Vars,true,nocut,[]) :- %writeln(here),interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4_off]|_],Vars,Vars,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals4_on]|_],Vars,Vars,true,nocut) :- %writeln(here),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals4_on",Dbw_equals4_on1),Dbw_equals4_on1=Dbw_equals4_on,turnequals4(on),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_get_lang_word],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("get_lang_word",Dbw_get_lang_word1),Dbw_get_lang_word1=Dbw_get_lang_word,        interpretpart(get_lang_word,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_get_lang_word],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_get_lang_word],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_head],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("head",Dbw_head1),Dbw_head1=Dbw_head,%%writeln1(6),        interpretpart(head,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_head],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_head],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_intersection],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("intersection",Dbw_intersection1),Dbw_intersection1=Dbw_intersection,        interpretpart(intersection,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_intersection],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_intersection],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_length],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_length],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_letters],[Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("letters",Dbw_letters1),Dbw_letters1=Dbw_letters,        getvalue(Variable,Value,Vars),debug_call(Skip,[[Dbw_n,Dbw_letters],[Value]]),        ((string_codes(Value,Value1),        phrase(word1(Value1),_))->debug_exit(Skip,[[Dbw_n,Dbw_letters],[Value]]);     debug_fail(Skip,[[Dbw_n,Dbw_letters],[Value]])),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_letters],[Variable]],Vars,Vars,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_letters],[Variable]],Vars,Vars,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_member2],[Variable2,Variable1]],Vars1,Vars2,true,nocut,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,((get_lang_word("member2",Dbw_member21),Dbw_member21=Dbw_member2)->        ssi_interpretpart(member2,Dbw_member2,Variable2,Variable1,Vars1,Vars2,Vars2c);(get_lang_word("member",Dbw_member22),Dbw_member22=Dbw_member2,%%writeln1(8),%trace,        ssi_interpretpart(member2,Dbw_member2,Variable1,Variable2,Vars1,Vars2,Vars2c))).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_member3],[Variable1,Variable2]],Vars1,Vars2,true,nocut,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,get_lang_word("member3",Dbw_member31),Dbw_member31=Dbw_member3,%%writeln1(8),        ssi_interpretpart(member3,Variable1,Variable2,Vars1,Vars2,Vars2c).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_member3],[Variable1,Variable2]],Vars1,Vars2,true,nocut,Vars2c,AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,get_lang_word("member3",Dbw_member31),Dbw_member31=Dbw_member3,%%writeln1(8),        ssi_interpretpart(member3,Variable1,Variable2,Vars1,Vars2,Vars2c,AC).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_notrace]|_],Vars,Vars,true,nocut) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("notrace",Dbw_notrace1),Dbw_notrace1=Dbw_notrace,turndebug(off),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_notrace]|_],Vars,Vars,true,nocut,[]) :- interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_notrace]|_],Vars,Vars,true,nocut).% * Different in ssiinterpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_cut]|_],Vars,Vars,true,cut,[]) :- interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_cut]|_],Vars,Vars,true,cut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_number],[Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("number",Dbw_number1),Dbw_number1=Dbw_number,        getvalue(Variable,Value,Vars),debug_call(Skip,[[Dbw_n,Dbw_number],[Value]]),(number(Value)->debug_exit(Skip,[[Dbw_n,Dbw_number],[Value]]);     debug_fail(Skip,[[Dbw_n,Dbw_number],[Value]])),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_number],[Variable]],Vars,Vars,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_number],[Variable]],Vars,Vars,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_phrase_from_file],[[[Dbw_n,Dbw_string],[Out]],Path]],Vars1,Vars2,true,nocut) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("phrase_from_file",Dbw_phrase_from_file1),Dbw_phrase_from_file1=Dbw_phrase_from_file,get_lang_word("string",Dbw_string1),Dbw_string1=Dbw_string,        interpretpart(phrase_from_file,Out,Path,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_random],[Variable1]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("random",Dbw_random1),Dbw_random1=Dbw_random,        interpretpart(random,Variable1,Vars1,Vars2).interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_length],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("length",Dbw_length1),Dbw_length1=Dbw_length,        interpretpart(length,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_random],[Variable1]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_random],[Variable1]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_read_string],[Variable1]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("read_string",Dbw_read_string1),get_lang_word("read_password",Dbw_read_string2),(Dbw_read_string1=Dbw_read_string->true;Dbw_read_string2=Dbw_read_string),        interpretpart(read_string,Variable1,Vars1,Vars2).interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_text_area],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("text_area",Dbw_text_area1),(Dbw_text_area1=Dbw_text_area),        interpretpart(text_area,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_read_string],[Variable1]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_read_string],[Variable1]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_round],[N1,N2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("round",Dbw_round1),Dbw_round1=Dbw_round,        interpretpart(round,N1,N2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_round],[N1,N2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_round],[N1,N2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_sort],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("sort",Dbw_sort1),Dbw_sort1=Dbw_sort,        interpretpart(sort,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_sort],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_sort],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_string],[Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("string",Dbw_string1),Dbw_string=Dbw_string1,        getvalue(Variable,Value,Vars),debug_call(Skip,[[Dbw_n,Dbw_string],[Value]]),(string(Value)->debug_exit(Skip,[[Dbw_n,Dbw_string],[Value]]);     debug_fail(Skip,[[Dbw_n,Dbw_string],[Value]])),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_string],[Variable]],Vars,Vars,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_string],[Variable]],Vars,Vars,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_string_length],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_string_length],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_tail],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("tail",Dbw_tail1),Dbw_tail1=Dbw_tail,%%writeln1(61),        interpretpart(tail,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_tail],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_tail],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_trace]|_],Vars,Vars,true,nocut) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("trace",Dbw_trace1),Dbw_trace1=Dbw_trace,turndebug(on),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_trace]|_],Vars,Vars,true,nocut,[]) :- interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_trace]|_],Vars,Vars,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_true]|_],Vars,Vars,_,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("true",Dbw_true1),Dbw_true1=Dbw_true,!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_true]|_],Vars,Vars,_,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_true]|_],Vars,Vars,_,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_unwrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("unwrap",Dbw_unwrap1),Dbw_unwrap1=Dbw_unwrap,%%writeln1(53), unwrap        interpretpart(bracket2,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_unwrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_unwrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_variable],[Variable]],Vars,Vars,true,nocut) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("variable",Dbw_variable1),get_lang_word("var",Dbw_variable2),(Dbw_variable1=Dbw_variable->true;Dbw_variable2=Dbw_variable),debug_call(Skip,[[Dbw_n,Dbw_variable],[Variable]]),getvalue(Variable,Value,Vars),        (isvar(Value)->debug_exit(Skip,[[Dbw_n,Dbw_variable],[Variable]]);     debug_fail(Skip,[[Dbw_n,Dbw_variable],[Variable]])),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_variable],[Variable]],Vars,Vars,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_variable],[Variable]],Vars,Vars,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_word11],[Variable1]],Vars1,Vars1,true,nocut) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("word1",Dbw_word1),Dbw_word11=Dbw_word1,        %trace,        interpretpart(word1,Variable1,Vars1).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_wrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("wrap",Dbw_wrap1),Dbw_wrap1=Dbw_wrap,%%writeln1(52), wrap%%writeln([[n,wrap],[Variable1,Variable2]]),        interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_wrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_wrap],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_writeln],[Variable1]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("writeln",Dbw_writeln1),Dbw_writeln1=Dbw_writeln,        interpretpart(writeln,Variable1,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_writeln],[Variable1]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_writeln],[Variable1]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,comparisonoperator(Operator),%%writeln1(4),        interpretpart(iscomparison,Operator,Variable1,Variable2,Vars1,Vars2),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Operator],[Variable2,Variable3,Variable1]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Operator],[Variable2,Variable3,Variable1]],Vars1,Vars2,true,nocut).
interpretstatement1(ssi,_F0,_Functions,[[n,""],[Variable1]],Vars1,Vars2,true,nocut) :-%%writeln1(8),        interpretpart("",Variable1,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,"_"],[Variable1]],Vars1,Vars2,true,nocut) :-%%writeln1(8),        interpretpart("_",Variable1,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,"_"],[Variable1]],Vars1,Vars2,true,nocut) :-%%writeln1(8),        interpretpart("_",Variable1,Vars1,Vars2).interpretpart(not_is,Variable1,Variable2,Vars1,Vars1) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        not(isempty(Value1)),        not(isempty(Value2)),        debug_call(Skip,[[n,[not,=]],[Value1,Value2]]),        ((not(Value1 = Value2))->      debug_exit(Skip,[[n,[not,=]],[Value1,Value2]]);     debug_fail(Skip,[[n,[not,=]],[Value1,Value2]])),!.                        interpretpart(not_iscomparison,Operator,Variable1,Variable2,Vars1,Vars1) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        debug_call(Skip,[[n,[not,Operator]],[Value1,Value2]]),((isval(Value1),isval(Value2),Expression=..[Operator,Value1,Value2],        not(Expression))->      debug_exit(Skip,[[n,[not,Operator]],[Value1,Value2]]);     debug_fail(Skip,[[n,[not,Operator]],[Value1,Value2]])),!.
interpretstatement1(ssi,_F0,_Functions,[[n,[]],[Variable1]],Vars1,Vars2,true,nocut) :-%%writeln1(8),        interpretpart([],Variable1,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,[]],[Variable1]],Vars1,Vars2,true,nocut) :-%%writeln1(8),        interpretpart([],Variable1,Vars1,Vars2).interpretstatement1(ssi,_F0,_Functions,[[n,""],[Variable1]],Vars1,Vars2,true,nocut) :-%%writeln1(8),        interpretpart("",Variable1,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,[not,Operator]],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-comparisonoperator(Operator),%%writeln1(4),        interpretpart(not_iscomparison,Operator,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,[not,append]],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-%%writeln1(9),        interpretpart(not_append,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,[not,head]],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln1(6),        interpretpart(not_head,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,[not,member]],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln1(8),        interpretpart(not_member,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,[not,member]],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln1(8),        interpretpart(not_member,Variable1,Variable2,Vars1,Vars2).interpretstatement1(ssi,_F0,_Functions,[[n,[not,head]],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln1(6),        interpretpart(not_head,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,[not,stringconcat]],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-        interpretpart(not_stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,[not,tail]],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-%%writeln1(61),        interpretpart(not_tail,Variable1,Variable2,Vars1,Vars2).
interpretstatement1(ssi,_F0,_Functions,[[n,trace2]|_],Vars,Vars,true,nocut) :- %writeln(here),trace,!.
interpretstatement1(ssi,_F0,_Functions,[[n,trace2]|_],Vars,Vars,true,nocut,[]) :- %writeln(here),interpretstatement1(non-ssi,_F0,_Functions,[[n,trace2]|_],Vars,Vars,true,nocut).
interpretstatement1(ssi,_Grammar,_Grammar2,[[Dbw_n,grammar_part],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut,[]) :-interpretstatement1(non-ssi,_Grammar,_Grammar2,[[Dbw_n,grammar_part],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut).
interpretstatement2(Value,_Vars,Value) :-(number(Value);atom(Value)).
interpretstatement2(ssi,Functions,Functions,Line,Vars2,Vars3,Result21,Cut,_,AC,_Skip) :-%trace,interpretstatement4(ssi,Functions,Functions,Line,Vars2,Vars3,Result21,Cut,_,AC).
interpretstatement2(ssi,Functions,Functions,Line,Vars2,Vars3,Result21,_Cut1,Vars2c,_Skip) :-%writeln1(interpretstatement2(Functions,Functions,Line,Vars2,Vars3,Result21,_Cut1)),%false.%interpretstatement1(ssi,Functions,Functions,Line,Vars2,Vars3,Result21,_Cut,Vars2c).
interpretstatement3(ssi,_,_,[[Dbw_n,"->"]|_],Vars,Vars,_Result21,_Cut,_,Skip) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,Skip=false.%debug_call(Skip,[[Dbw_n,"->"]]).
interpretstatement3(ssi,_,_,[[Dbw_n,Dbw_findall]|Args],Vars,Vars,_Result21,_Cut,_,Skip) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,%Skip=false.
interpretstatement3(ssi,_,_,[[Dbw_n,Dbw_or]|_],Vars,Vars,_Result21,_Cut,_,Skip) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,Skip=false.
interpretstatement4(ssi,_F0,_Functions,[[Dbw_n,Dbw_append],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut,Vars2c,AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,get_lang_word("append",Dbw_append1),Dbw_append1=Dbw_append,%%writeln1(8),        ssi_interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2,Vars2c,AC).
interpretstatementlp2c2([],Algorithm1,Algorithm2) :- string_concat(Algorithm1,"",Algorithm2),!.
interpretstatementlp2c2a(Arguments1,Algorithm1,Algorithm2) :-interpretstatementlp2c3(Arguments1,Name),string_concat(Algorithm1,Name,Algorithm2),!.
interpretstatementlp2c2b([],Algorithm1,Algorithm1) :- !.
interpretstatementlp2c3(Value1,Value2):-term_to_atom(Value1,Value2),!.
interpretstatementlp2c3([Term1|Term1a],Term2) :- interpretstatementlp2c3(Term1,Term3),(Term1a=[]-> foldr(string_concat,["[",Term3,"]"],Term2);(interpretstatementlp2c4(Term1a,Term3a), foldr(string_concat,["[",Term3,",",Term3a,"]"],Term2))),!.
interpretstatementlp2c3([],"[]") :- !.
interpretstatementlp2c3([n,cut],"!") :- !.
interpretstatementlp2c4([Term1|Term1a],Term2) :- interpretstatementlp2c3(Term1,Term3),(Term1a=[]-> foldr(string_concat,[Term3],Term2);(interpretstatementlp2c4(Term1a,Term3a), foldr(string_concat,[Term3,",",Term3a],Term2))),!.
interpretstatementlp2p2([],Algorithm1,Algorithm1,_) :- !.
interpretstatementlp2p2a(Arguments1,Algorithm1,Algorithm2,Brackets) :-interpretstatementlp2p5(Arguments1,Name,Brackets),string_concat(Algorithm1,Name,Algorithm2),!.
interpretstatementlp2p2b([],Algorithm1,Algorithm1,_) :- !.
interpretstatementlp2p3(A,B) :- interpretstatementlp2p5(A,B,"[]"),!./*interpretstatementlp2p3([],"[]") :- !.
interpretstatementlp2p3(Value1,Value2):-term_to_atom(Value1,Value2),!.
interpretstatementlp2p3([Term1|Term1a],Term2) :- interpretstatementlp2p3(Term1,Term3),(Term1a=[]-> foldr(string_concat,["[",Term3,"]"],Term2);(interpretstatementlp2p4(Term1a,Term3a), foldr(string_concat,["[",Term3,",",Term3a,"]"],Term2))),!.
interpretstatementlp2p4([Term1|Term1a],Term2) :- interpretstatementlp2p3(Term1,Term3),(Term1a=[]-> foldr(string_concat,[Term3],Term2);(interpretstatementlp2p4(Term1a,Term3a), foldr(string_concat,[Term3,",",Term3a],Term2))),!.
interpretstatementlp2p5(A,B1,B,Brackets):- (Brackets="[]"->Top=true;Top=false), interpretstatementlp2p5(A,B1,B,Top,Brackets).
interpretstatementlp2p5(C,_,Name2,_Brackets) :-is_list(C),forall(member(A,C),A=(_=_)),findall(C1,(member(A=B,C),(string(A)->true;(atom(A)->true;(number(A)))),(string(B)->true;(atom(B)->true;(number(B)))),C1=(A=B)%concat_list([A,"=",B],C1)),Name21),term_to_atom(Name21,Name2),%string_concat(A1,B,Name2),!.
interpretstatementlp2p5([A,"|",B],_,C,_Top,Brackets) :- %trace, (Brackets="[]"->(LB="[",RB="]");(LB="(",RB=")")), %interpretstatementlp2p5(A,_,A1,Brackets), interpretstatementlp2p5([A],"",A1,false,Brackets), %interpretstatementlp2p5(B,_,B1,Brackets), interpretstatementlp2p5([B],"",B1,false,Brackets), foldr(string_concat,[LB,A1,"|",B1,RB],C),!.
intersection_all(A,C) :-A=[B1|B2],intersection_all1(B2,B1,C).intersection_all1([],C,C).
is_all_alpha(C12) :-string_chars(C12,C121),forall(member(C13,C121),char_type(C13,alpha)),!.
is_alpha_or_quotes(A) :- is_alpha(A),!.
is_empty_list([]).
is_single_item_or_expression_list_with_atoms(A) :-not(variable_name(A)),(single_item_or_atom(A)->true;(is_list(A),findall(B,(member(B,A),expression_or_atom(B)%not(variable_name(B))),C),length(A,L),length(C,L))),!.
is_t(H,A,First0,First) :-((member(var,H),var(A))->true;((member(string,H),string(A))->true;((member(atom,H),atom(A))->true;((member([],H),not(var(A)),A=[])->true;((member(number,H),number(A)->true;((member(compound,H),not(is_list(A)),compound(A)->true;((First0=true,First=true,member(all(K),H),is_list(A),forall(member(A1,A),is_t(K,A1,First0,false)));((member(heuristic(He,Output),H),Output=A,He))))))))))),!.
is_value_match(A) :- predicate_or_rule_name(A),!.
is_value_match(A) :- predicate_or_rule_name(A),!.is_value_match(A) :- A="|",fail,!.
is_white_space(C) :-string_chars(C,D),forall(member(E,D),char_type(E,space)).
isvar(Variable) :-atom(Variable).
isvar(Variable) :-atom(Variable).isval(Value) :-number(Value).
iv1flagdisjunction(A,B,true) :-((A=true)->true; (B=true)),!.
job("your reasonings").
join_and_change(A,%_Insertions,After1,After2) :- append(After1,A,After2),!.
join_chars_after([],_Chars,List,List) :- !.
join_san(A,string,B) :- foldr(string_concat,A,B),!.
keep1([%[comment,1],%/*,[writeln,1],[write,1],[cut,0],[true,0],[fail,0],[false,0],[halt,0],[halt,1],[trace,0],[notrace,0],[equals4_on,0],[equals4_off,0],[assertz,1],[atomic,1],[close,2],[close,1],[at_end_of_stream,0],[at_end_of_stream,1],[compound,1],[float,1],[set_prolog_flag,2],[integer,1],[set_input,1],[set_output,1],[nonvar,1],[put_char,2],[put_char,1],[put_code,2],[put_code,1],[nl,0],[nl,1],[write,2],[write,1],[writeq,2],[writeq,1]%*/]).
kept([[n,A1],A1a]) :- keep(A),length(A1a,L),member([A1,L],A),!.
keyboard_input_fd(L1,L2,T) :-get_time(T1),(catch(call_with_time_limit(1,get_single_char(Code)),_,fail)->(%trace,get_time(T2),(catch(number_codes(Num,[Code]),_,fail)->true;Num=65),number_codes(Num,[Code]),T is T2-T1,%trace,%get_single_char(Code),(member(Num,L1)->(%trace,reverse(L1,L11),get_n_item(L11,Num,N0),length(L11,Le),N is Le-N0+1,N1 is Num-1,(N1= 0->put_item_n(L1,N," ",L2);put_item_n(L1,N,N1,L2)));L1=L2));(L1=L2,T=0.5)),!.
kw_for_kw1([Type,String1],KW) :- (Type="file"->(phrase_from_file_s(string(String2), String1));String1=String2),kw_for_kw(String2,KW),!.
la_com1:-get_curr_students(Curr_students),writeln("New students"),(true%toss_coin -> (new_student_number(First,Last,Student_number), get_time(TS_of_enrollment),stamp_date_time(TS_of_enrollment,date(Year_of_enrollment,Month_of_enrollment,Day_of_enrollment,_Hour2,_Minute2,_Seconda,_A,_TZ,_False),local),directory_files("Books/",Courses1a),delete_invisibles_etc(Courses1a,Courses1),%folders(Courses1),random_member(Course,Courses1),random_member([Course_type,Years_to_complete,Essays_left,As],[["short_course",1,5,1],["diploma",4,10,1],["honours",2,10,30],["master",5,20,100],["phd",10,30,400]]),Year_of_completion is Year_of_enrollment+Years_to_complete,date_time_stamp(date(Year_of_completion,Month_of_enrollment,28,0,0,0,0,-,-),TS_of_completion),writeln([First,Last,Student_number,TS_of_enrollment,Year_of_enrollment,Month_of_enrollment,Day_of_enrollment,TS_of_completion,Year_of_completion,Month_of_enrollment,28,Course,Course_type,Years_to_complete,Essays_left,As]),append(Curr_students,[[First,Last,Student_number,TS_of_enrollment,Year_of_enrollment,Month_of_enrollment,Day_of_enrollment,TS_of_completion,Year_of_completion,Month_of_enrollment,28,Course,Course_type,Years_to_complete,Essays_left,As]],Curr_students2),term_to_atom(Curr_students2,String02a_b),string_atom(String02a_c,String02a_b),(open_s("student_numbers.txt",write,Stream1),write(Stream1,String02a_c),close(Stream1)),!);(true)),writeln("New work"),get_curr_students(Curr_students2a),get_grad_students(Grad_students2a),retractall(todays_students(_)),new_work(Curr_students2a,[],Curr_students_aa2,Grad_students2a,Grad_students_aa2),term_to_atom(Curr_students_aa2,String02a_b1),string_atom(String02a_c1,String02a_b1),(open_s("student_numbers.txt",write,Stream10),write(Stream10,String02a_c1),close(Stream10)),!,writeln("Graduates"),findall(_,(member(Grad_students_aa3,Grad_students_aa2),writeln(Grad_students_aa3)),_),term_to_atom(Grad_students_aa2,String02a_b11),string_atom(String02a_c11,String02a_b11),(open_s("grad_student_numbers.txt",write,Stream2),write(Stream2,String02a_c11),close(Stream2)),!,findall(Tally,todays_students(Tally),Tally2),sum(Tally2,Tally31),Tally32 is Tally31+1000+1000, % politics, universitylength(Curr_students2a,LCS),Tally3=[LCS,Tally32],string_atom(Tally4,Tally3),(open_s("a_tally.txt",write,Stream3),write(Stream3,Tally4),close(Stream3)),!.
la_com_start_server(Port) :-        http_server(http_dispatch, [port(Port)]).
label(Label1,Maximum,Label2) :-string_length(Label1,Length1),Length2 is Length1+1,chars(Length2,Maximum," ",Spaces2),string_concat(Label1,Spaces2,Label2).
last_call_optimisation(_Globals3,Choice_point_trail11,Choice_point_trail3,Predicate_number,Line_number_b,Functions,CP_Vars1,CP_Vars2,Globals33,Globals3) :-% is determinatemember([[pred_num,Pred_id],Predicate_number],Globals33),!,findall(Pred_ids,collect_connected_pred_ids1(Pred_id,[Pred_id],Pred_ids,Predicate_number,Globals33),Pred_ids1),flatten(Pred_ids1,Pred_ids1a),sort(Pred_ids1a,Pred_ids2),  findall([A,B2,C,D_Level,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],(member([A,B2,C,D_Level,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],Choice_point_trail11), member(C,Pred_ids2) ),M), %recursive_predicate(Pred_id,Pred_ids2,Globals3), (forall(member([A,B2,C,D_Level,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],M),  (Pred_or_line="line"->(All_predicate_numbers2=[_Ab,_Bb,_Cb,_Db,_Eb,_Fb,Vars2c],(Vars2c=[]));Pred_or_line="predicate"->(All_predicate_numbers2=[])))),% is in last clause of a predicateappend(_,[[Predicate_number,F1,Args1|Commands]|Functions1],Functions),!,not((append(_,[[_Predicate_number_b,F1,Args2|_]|_],Functions1),length(Args1,L),length(Args2,L))),!,%[1,[n,count],[1,2],":-"% is last commandappend(_,[Commands1],Commands),!,append(_,[[Line_number_b,_,_,_,_,F2,Args3|_]|_],Commands1),%[0, [on_true, -2], [go_after, -], [on_false, -3], [go_to_predicates, [1, 2]], [n, count], [0, [v, n]]]% is recursiveF1=F2,length(Args1,L),length(Args3,L),!,%delete_frame_contentscollect_connected_pred_ids2(Pred_id,Pred_ids2,Pred_ids3,Globals33),flatten(Pred_ids3,Pred_ids3a),sort(Pred_ids3a,Pred_ids4),findall(E2,(member(C1,Pred_ids4),E2=[_A,_B2,C1,_D_Level,_E_Predicate_number2,_F_Line_number_a2,_Pred_or_line,_H,_I,_All_predicate_numbers2],member(E2,Choice_point_trail11)),E3),%trace,delete(E3,[_,_,_Pred_id,_,_,-1,"predicate",_,_,_],E32),delete(E32,[_,_,_Pred_id1,_,_,["returns to",_,"pred_id",_],"predicate",_,_,_],E31),%E32=E31,delete_cps(Choice_point_trail11,E31,Choice_point_trail3,CP_Vars1,CP_Vars2),Globals3=Globals33,!.
last_call_or_terminal2([]) :- !.
lc_test0(1,true, % true - delete config, false - use last test's config 7, % fail_if_greater_than_n_changes1 overrider i, % i or d - ci (testing) or cd (changing)% Start_files[["c/c.pl","%c(A).\n%A=1.\nc(1).\n%d(A).\n%A=1.\nd(A):-A=1."],["c/main_file.txt","[[\"c.pl\",[[c,1],[d,1]]]]"]],% End_files[["c/c.pl","%c(A).\n%A=1.\nc(1).\n%d(A).\n%A=1.\nd(A):-A=1."],["c/main_file.txt","[[\"c.pl\",[[c,1],[d,1]]]]"]]).
lc_test0(11,true,7,i,[["c/c.pl","%c1(A).\n%A=1.\nc1(1).\n%c1(A).\n%A=2.\nc1(2)."],["c/main_file.txt","[[\"c.pl\",[[c1,1]]]]"]],[["c/c.pl","%c1(A).\n%A=1.\nc1(1).\n%c1(A).\n%A=2.\nc1(2)."],["c/main_file.txt","[[\"c.pl\",[[c1,1]]]]"]]).
lc_test0(12,true,7,i,[["c/c.pl","%c(A).\n%A=1.\nc(1):-writeln(1),writeln(1)."],["c/main_file.txt","[[\"c.pl\",[[c,1]]]]"]],[["c/c.pl","%c(A).\n%A=1.\nc(1):-writeln(1),writeln(1)."],["c/main_file.txt","[[\"c.pl\",[[c,1]]]]"]]).lc_test0(13,true,7,i,[["c/c.pl","%c1(1,A).\n%A=1.\n%c1(2,A).\n%A=2.\nc1(A,A)."],["c/main_file.txt","[[\"c.pl\",[[c1,2]]]]"]],[["c/c.pl","%c1(1,A).\n%A=1.\n%c1(2,A).\n%A=2.\nc1(A,A)."],["c/main_file.txt","[[\"c.pl\",[[c1,2]]]]"]]).
lc_test0(14,true,7,i,[["d/d.pl",":-include('../e/e.pl').\n%d(A).\n%A=1.\nd(A):-e(A)."],["e/e.pl","%e(A).\n%A=1.\ne(A):-f(A).\n%f(A).\n%A=1.\nf(1)."],["d/main_file.txt","[[\"d.pl\",[[d,1]]]]"],["e/main_file.txt","[]"]],[["d/d.pl",":-include('../e/e.pl').\n%d(A).\n%A=1.\nd(A):-e(A)."],["e/e.pl","%e(A).\n%A=1.\ne(A):-f(A).\n%f(A).\n%A=1.\nf(1)."],["d/main_file.txt","[[\"d.pl\",[[d,1]]]]"],["e/main_file.txt","[]"]]).
lc_test0(15,true,7,i,[["d/d.pl",":-include('../e/e.pl').\n%d(A).\n%A=1.\nd(A):-e(A).\n%d(A).\n%A=2."],["e/e.pl","%e(A).\n%A=1.\ne(A):-f(A).\n%f(A).\n%A=1.\nf(1).\n%f(A).\n%A=2.\nf(2)."],["d/main_file.txt","[[\"d.pl\",[[d,1]]]]"],["e/main_file.txt","[]"]],[["d/d.pl",":-include('../e/e.pl').\n%d(A).\n%A=1.\nd(A):-e(A).\n%d(A).\n%A=2."],["e/e.pl","%e(A).\n%A=1.\ne(A):-f(A).\n%f(A).\n%A=1.\nf(1).\n%f(A).\n%A=2.\nf(2)."],["d/main_file.txt","[[\"d.pl\",[[d,1]]]]"],["e/main_file.txt","[]"]]).lc_test0(16,true,7,i,[["c/c.pl","%d(1,A,2,B).\n%A=1,B=2.\nd(A,A,B,B)."],["c/main_file.txt","[[\"c.pl\",[[d,4]]]]"]],[["c/c.pl","%d(1,A,2,B).\n%A=1,B=2.\nd(A,A,B,B)."],["c/main_file.txt","[[\"c.pl\",[[d,4]]]]"]]).lc_test0(17,true,7,i,[["c/c.pl","%d.\nd."],["c/main_file.txt","[[\"c.pl\",[[d,0]]]]"]],[["c/c.pl","%d.\nd."],["c/main_file.txt","[[\"c.pl\",[[d,0]]]]"]]).lc_test0(18,true,7,i,[["c/c.pl","%d(1).\nd(1)."],["c/main_file.txt","[[\"c.pl\",[[d,1]]]]"]],[["c/c.pl","%d(1).\nd(1)."],["c/main_file.txt","[[\"c.pl\",[[d,1]]]]"]]).
lc_test0(19,true,7,i,[["c/c.pl","%not(d).\nd:-false."],["c/main_file.txt","[[\"c.pl\",[[d,0]]]]"]],[["c/c.pl","%not(d).\nd:-false."],["c/main_file.txt","[[\"c.pl\",[[d,0]]]]"]]).
lc_test0(4,true,7,i,[["c/a.pl",":-include('b.pl').\n:-include('c.pl').\n%a(A).\n%A=1.\na(1)."],["c/b.pl","%b(A).\n%A=1.\nb(1)."],["c/c.pl","%c(A).\n%A=1.\nc(1)."],["c/main_file.txt","[[\"a.pl\",[[a,1]]],[\"b.pl\",[[b,1]]],[\"c.pl\",[[c,1]]]]"]],[["c/a.pl",":-include('b.pl').\n:-include('c.pl').\n%a(A).\n%A=1.\na(1)."],["c/b.pl","%b(A).\n%A=1.\nb(1)."],["c/c.pl","%c(A).\n%A=1.\nc(1)."],["c/main_file.txt","[[\"a.pl\",[[a,1]]],[\"b.pl\",[[b,1]]],[\"c.pl\",[[c,1]]]]"]]).%/*lc_test0(5,true,7,i,[["d/d.pl",":-include('../e/e.pl').\n%d(A).\n%A=1.\nd(A):-e(A)."],["e/e.pl","%e(A).\n%A=1.\ne(1)."],["d/main_file.txt","[[\"d.pl\",[[d,1]]]]"],["e/main_file.txt","[]"]],[["d/d.pl",":-include('../e/e.pl').\n%d(A).\n%A=1.\nd(A):-e(A)."],["e/e.pl","%e(A).\n%A=1.\ne(1)."],["d/main_file.txt","[[\"d.pl\",[[d,1]]]]"],["e/main_file.txt","[]"]]).
lc_test0(8,true,7,i,[["c/c.pl","%c(A).\n%A=2.\nc(C):-A=1,B=1,C is A+B."],["c/main_file.txt","[[\"c.pl\",[[c,1]]]]"]],[["c/c.pl","%c(A).\n%A=2.\nc(C):-A=1,B=1,C is A+B."],["c/main_file.txt","[[\"c.pl\",[[c,1]]]]"]]).
lc_test0(9,false,16,d,[["c/c.pl","%c(A).\n%A=3.\nc(C):-A=2,B=2,C is A+B."],["c/main_file.txt","[[\"c.pl\",[[c,1]]]]"]],[["c/c.pl","%c(A).\n%A=3.\nc(C):-A=2,B=1,C is A+B."],["c/main_file.txt","[[\"c.pl\",[[c,1]]]]"]]).
lead_to_empty_list([],_,A,A) :- !.
length1(A,C,Length) :- Length is sqrt(C^2-A^2).
length1(TypeStatements3,TypeStatements2,T1,T2,L1,L2) :-TypeStatements3=["|",B],length1(B,TypeStatements2,T1,T2,L1,L2).
length1(TypeStatements3,TypeStatements2,T1,T2,L1,L2) :-TypeStatements3=[TypeStatements1|B],L3 is L1+1,(undefined_type([T,Type])->(not(member([T,Type],T1)),append(T1,[[T,Type]],T3),member([TypeStatements1|[TypeStatements4]],TypeStatements2),length1(TypeStatements4,TypeStatements2,T3,T2,L3,L2));length1(B,TypeStatements2,T1,T2,L3,L2)).
letter(to,"Quentin Guache").
lfl2html2(String,String) :- string(String),!.
life_check_list(A,B) :- subtract([meditation,university,pedagogy,honours,masters,phd,professor,immortality],A,B).
light_where_people_are(A,A).
line(A) --> %%spaces1(_), name1(Word11), %% name(A,B,C).
line(A) --> %%spaces1(_), name1(Word11), %% name(A,B,C){%trace,Word11=findall},"(",varnames01(Varnames),",",newlines1(_),spaces1(_),"(",lines(A1),")",",",newlines1(_),spaces1(_),varnames01(Varnames2),")",{A=[[n,Word11],[Varnames,A1,Varnames2]]},!.
line(A) --> %%spaces1(_), name1(Word11), %% name(A,B,C){%trace,Word11=findall},"(",varnames01(Varnames),",",newlines1(_),spaces1(_),line(A1),",",newlines1(_),spaces1(_),varnames01(Varnames2),")",{A=[[n,Word11],[Varnames,A1,Varnames2]]},!.line(Word1) -->"{",line(Word2),"}",{Word1=[[n,code],Word2]},!.
line(A) --> %%spaces1(_), name1(Word11), newlines1(_),%% name(A,B,C){%trace,Word11=findall},"(",newlines1(_),varnames01(Varnames),newlines1(_),",",newlines1(_),"(",newlines1(_),lines(A1),newlines1(_),")",newlines1(_),",",newlines1(_),varnames01(Varnames2),newlines1(_),")",%newlines1(_),{A=[[n,Word11],[Varnames,A1,Varnames2]]},!.
line(A) --> %%spaces1(_), name1(Word11), newlines1(_),%% name(A,B,C){%trace,Word11=findall},"(",newlines1(_),varnames01(Varnames),newlines1(_),",",newlines1(_),line(A1),newlines1(_),",",newlines1(_),varnames01(Varnames2),newlines1(_),")",%newlines1(_),{A=[[n,Word11],[Varnames,A1,Varnames2]]},!.
line(Word1) -->"(",lines(Word2),")",{Word1=Word2},!.
line(Word1) -->"(",newlines1(_),lines(Word2),")",{Word1=Word2},!.line(Word1) -->"{",newlines1(_),lines(Word2),"}",{Word1=[[n,code],Word2]},!.%%a(_) -->",".
lines(Ls2) --> %{trace},%newlines1(_),newlines1(_),line(L),newlines1(N1),comma_or_semicolon,%",",newlines1(N2),%{writeln(L)}, %%***lines(Ls), %trace,newlines1(N3),%{delete([L,N|Ls],[],Ls2)}, !. %lines(Ls2) --> line(L),",",newlines1(N),%%{writeln(L)}, %%***%lines(Ls), {foldr(append,[[L],N1,N2,Ls,N3],Ls2%[],Ls2)}, !. lines([L]) --> line(L), %%{writeln(L)},!.varname_or_names(Varnames1) --> varnames([Varnames1]).
list([]) --> [].
list([]) --> [].list([L|Ls]) --> [L], list(Ls).
list([]) --> [].list([L|Ls]) --> [L], list(Ls).list2br :- prep_l2b(File_contents_list_term,File_contents_assignments_term1),br1_l2b(File_contents_list_term,File_contents_assignments_term1,File_contents_assignments_term2),term_to_atom(File_contents_assignments_term2,File_contents_assignments_atom),(open_s("assignment_db.txt",write,Stream),write(Stream,File_contents_assignments_atom),close(Stream)), !.
list([]) --> [].list([L|Ls]) --> [L], list(Ls).%% You can install without the repository being in the registry, meaning LPPM doesn't require a registry x%% may comment out lppm_get_manifestlppm_get_manifest(User1,Repository1,Description,Dependencies1) :-concat_list(["curl -iH 'User-Agent: luciangreen' -X POST https://raw.githubusercontent.com/",User1,"/",Repository1,"/master/","manifest.txt"],Command1),atom_string(Command2,Command1), catch(bash_command(Command2,ManifestFile1), _, (concat_list(["Error: https://raw.githubusercontent.com/",User1,"/",Repository1,"/master/","manifest.txt doesn't exist."],Text1),writeln1(Text1),abort)),term_to_atom(ManifestFile2,ManifestFile1),catch(ManifestFile2=[description=Description,dependencies=Dependencies1],_,(writeln1("Error: File manifest.txt isn't in [description=Description,dependencies=Dependencies] format."),abort)),catch(findall([User2,Repository2],(member(Dependency1,Dependencies1),Dependency1=[User2,Repository2]),Dependencies1),_,(writeln1("Error: Dependencies in file manifest.txt aren't in format [[User,Repository], ...] format."),abort),_Data1).
list([]) --> [].list([L|Ls]) --> [L], list(Ls).%% e.g. combophil(2). to write on a combination of philosophiescombophil(NumberOfPhils) :-phrase_from_file_s(string(Phil1), "../Text-to-Breasonings/file.txt"),SepandPad="\n\r",split_string(Phil1,SepandPad,SepandPad,Phil2),delete(Phil2,"",Phil3),sort(Phil3,Phil4),length(Phil4,LengthPhil4),write("Number of philosophies in file.txt: "),writeln(LengthPhil4),length(PhilsLengthList,NumberOfPhils),repeat,findall(Phils1,(member(_,PhilsLengthList),random_member(Phils1,Phil4)),Phils2),reverse(Phils2,Phils3),Phils3=[Phil6|Phils4],reverse(Phils4,Phils5),findall(_,(member(Phil5,Phils5),writeln1(Phil5),nl,writeln1("because"),nl),_),writeln1(Phil6),nl,write("1-Continue or 2-End: "),read_string(user_input, "\n", "\r", _End, Input),(Input="2"->abort;fail).
list([]) --> [].list([L|Ls]) --> [L], list(Ls).comment(fiftyastest).
list([]) --> [].list([L|Ls]) --> [L], list(Ls).file([L|Ls]) --> predicate(L),newlines1(_),%%{writeln(L)}, %%***file(Ls), !. file([L]) --> predicate(L),newlines1(_),%%{writeln(L)},!.%%predicate([]) --> newlines1(_).predicate(A) -->name1(Word11), ".", {A=[[Word11,"*","*"]]}.
list([]) --> [].list([L|Ls]) --> [L], list(Ls).short_essay_helper(%%Filex,String01,Key_words,Reasons_per_paragraph) :-retractall(num_paras_exp(_)),assertz(num_paras_exp(5)),retractall(num_paras_crit(_)),assertz(num_paras_crit(5)),retractall(string00_z(_)),%%assertz(string00_z([])),retractall(end_note_number(_)),assertz(end_note_number(1)),%%retractall(end_notes(_)),%%assertz(end_notes([])),retractall(critique3(_)),assertz(critique3([])),retractall(refs(_)),assertz(refs([])),retractall(chosen_quotes(_)),assertz(chosen_quotes([])),directory_files("sources/",F),delete_invisibles_etc(F,G),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall(String02h3,(member(Filex1,G),string_concat("sources/",Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),(String02a=[Az,Bz,Cz|String02c]->true;(concat_list(["Error: ",Filex," not in format [\"Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\",\"Surname, A 2000\",First_Page_Num,\"<first page>\",\"<second page>\",...\"]"],Notification1),writeln(Notification1),abort)),%%String02c=String02d,%%trace,findall([Az,Bz,Cz,N1,String02cb],(length(String02c,L),numbers(L,1,[],N),%%random_member(N1,N),get_item_n(String02c,N1,String02ca),%%member(String02ca,String02c),split_string(String02ca, ".\n\r", ".\n\r", String02cb)%%member(String02cb1,String02cb)),String02cc),%%maplist(append,[String02cc],[String02d]),%%delete(String02cc,[_,[]],String02d),String02cc=String02d,findall([Az,Bz,Cz,N2,String02d2],(member([Az,Bz,Cz,N2,String02d1],String02d),member(String02d2,String02d1),downcase_atom(String02d2,String02e),atom_string(String02e,String02f1),split_string(String02f1, SepandPad, SepandPad, String02e1),findall(String02g,(member(Key_words1,Key_words),%%trace,downcase_atom(Key_words1,Key_words11),atom_string(Key_words11,Key_words12),findall(Key_words12,(member(Key_words12,String02e1)),String02g)),String02i),not(maplist(equals_empty_list,String02i))),String02h31),sort(String02h31,String02h3)%%prepare_file_for_ml(String00,String02a)),String00z1),%%,%%trace,%%writeln1([string00z1,String00z1]),%%findall(String02h2,(member([Ay,By,Cy,N1,String02h1],String00z1),%%(String02h1=[]->String02h2=[];maplist(append,[String00z1],[String00]),%%)%%),String00z),%%delete(String00z,[],String00),term_to_atom(Key_words,Key_words_a),atom_string(Key_words_a,Key_words_b),(String00=[]->(concat_list(["Error: No files in source folder or no instances of keywords ",Key_words_b," in files in source folder."],Notification2),writeln(Notification2),abort);true),%%maplist(append,[[String00z1]],String00),%%maplist(append,[String00z],String00),%%trace,assertz(string00_z(String00)),%%writeln1([string00,String00]),%%notrace,%%writeln1(String02),generate_file_name(File1,File2),Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],explain_structure(String01,Reasons_per_paragraph,File1),exposition(String00,String01,Reasons_per_paragraph,Numbers,String02,Exposition),%%concat_list(["Do you agree or disagree with ",String01," (a/d) ? "],String2ad),%%get_string(String2ad,either,one-not-ml,"","",String3ad),choose1(["a"%%,"d"],String3ad),(String3ad="a"->(retractall(agree_disagree(_)),assertz(agree_disagree(agree)));(retractall(agree_disagree(_)),assertz(agree_disagree(disagree)))),%%trace,critique(String00,String01,Reasons_per_paragraph,Numbers,String02,Critique),agree_disagree(Pole),%%concat_list(["What is the future area of research from your essay about ",String01,"? "],Future_research_prompt),%%trace,%%get_string(Future_research_prompt,either,one-not-ml,"","",Future_research),%%choose_sentence_range(String00,),choose(_N_page_ref,_String00a1,_String00a2,_String00a3,_String00a4,String00a5),%%end_note_number(End_note_number),concat_list(["In ",String01,", automation should apply to \"",String00a5,"\""%%<sup>.",End_note_number,"</sup>"%% (",String00a2,", p. ",N_page_ref,")."],Future_research),%%reference(String00a1,String00a2,N_page_ref,End_note_number),%%add_1_to_end_note_number,refs(R2),term_to_atom([Exposition,Critique,String3ad,Future_research,R2],File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream),%% Output essay%%findall(_,(member(Exposition1,Exposition),Exposition1=%%writeln([r2,R2]),%%writeln1([Exposition,Critique,Future_research,R2]),write_essay(String01,Pole,Exposition,Critique,Future_research,R2,Essay,HTML),writeln1(Essay),(open_s(File2,write,Stream1),%%string_codes(BrDict3),write(Stream1,HTML),close(Stream1)),!.
list1(A,_,_) :-(A=[_|_]->true;A=[]),!.
list_to_string("","",A).
list_to_string("'a'","",A).
list_to_string("a",A).
list_to_string('a',"",A).
list_to_string(A,"",C) :- ((atom(A)->true;(number(A))),atom_string(A,C)),!.
list_to_string([],"",A).
list_to_string([b,["a"]],"",A).
lists_of_same_length1(List0) :-list1(List0,_,_),List0=[Item1|_],%term_to_atom(Item1,Item2),(list1(Item1,_,_)->Item2=Item1;fail),%[Item1]=Item2),length(Item2,Item2_l),lists_of_same_length2(List0,Item2_l).
lists_of_same_length2([],_Item2_l) :- !.
load_lang_db :-%% error if lang not foundload_lang_db1(Entry3),(not(lang(Lang))->(Lang="en");lang(Lang)),(Lang="en"->true;(member([_,_,Lang,_],Entry3)->true;(concat_list(["Error: Language: ",Lang," not in listprologinterpreter/languages folder."],_Notification1)%,writeln(Notification1),fail))),retractall(lang_db(_)), assertz(lang_db(Entry3)),!.
log_meetings(_,[],Meetings,Meetings) :- !.
log_meetings1(_,[],Meetings,Meetings) :- !.
logic_ff0([                                                         [[[a, true],[b, true]], [false]],[[[a,false],[b, false]], [true]]],F).F=[[not,a],[not,b],[not,[a,and,b]],[not,[a,or,b]],[not,[b,and,a]],[not,[b,or,a]]]logic_ff0([                                                         [[[a, true],[b, false]], [false]],[[[a,false],[b, true]], [true]]],F).
logic_ff0([                                                         [[[a, true]], [false]],[[[a,false]], [true]]],F).
logic_ff0([                                                         [[[a, true]], [true]],[[[a,false]], [false]]],F).
login :-get_time(TS1),stamp_date_time(TS1,date(Year,Month,Day,_,_,_Second1,_,_,_),local),writeln("How many algorithms have you written?"),   read_string(user_input, "\n", "\r", _, Alg_n1),   number_string(Alg_n,Alg_n1),writeln("How many philosophy ideas have you expanded?"),   read_string(user_input, "\n", "\r", _, Phil_exp_n1),   number_string(Phil_exp_n,Phil_exp_n1),writeln("How many philosophy ideas have you written?"),   read_string(user_input, "\n", "\r", _, Phil_n1),   number_string(Phil_n,Phil_n1),writeln("What work have you done?"),   read_string(user_input, "\n", "\r", _, Work),      phrase_from_file_s(string(String1), "work_log.txt"),string_codes(String02b,String1),atom_to_term(String02b,String02a,[]),append(String02a,[[Year,Month,Day,Alg_n,Phil_exp_n,Phil_n,Work]],String02c),term_to_atom(String02c,String02a_b),string_atom(String02a_c,String02a_b),(open_s("work_log.txt",write,Stream1),write(Stream1,String02a_c),close(Stream1)),!.
login_graph(Option) :-phrase_from_file_s(string(String1), "work_log.txt"),string_codes(String02b,String1),atom_to_term(String02b,String02a,[]),(Option=alg->(findall(_,(member([Year,Month,Day,Alg_n,_Phil_exp_n,_Phil_n,_Work],String02a),writeln([Year,Month,Day,Alg_n])),_));(Option=phil_exp->(findall(_,(member([Year,Month,Day,_Alg_n,Phil_exp_n,_Phil_n,_Work],String02a),writeln([Year,Month,Day,Phil_exp_n])),_));(Option=phil->(findall(_,(member([Year,Month,Day,_Alg_n,_Phil_exp_n,Phil_n,_Work],String02a),writeln([Year,Month,Day,Phil_n])),_));(Option=work->(findall(_,(member([Year,Month,Day,_Alg_n,_Phil_exp_n,_Phil_n,Work],String02a),writeln([Year,Month,Day,Work])),_)))))).
lookahead(B2,A,A):-%trace,%member(B,B1),%string_codes(B,B2),append(B2,_D,A),!.
lookahead1(A,A) :- append(`]`,_,A).
lookahead2(B1,A,A):-%trace,member(B,B1),string_codes(B,B2),append(B2,_D,A).
lookahead2(B1,A,A):-%trace,member(B,B1),string_codes(B,B2),append(B2,_D,A).varname1([]) --> "[",newlines1(_),spaces1(_),"]". %%{writeln(L)}, %%***varname1(L4) --> name11(L1), newlines1(_),spaces1(_),%%{writeln(L)}, %%***{%trace,%%atom_string(L1,L10),string_codes(L2,L10),(((string(L1)->true;(atom_concat(A,_,L1),atom_length(A,1),((is_upper(A)),not(A='_'))))->L4=L1;(downcase_atom(%%L2L1,L3),L4=[v,L3])))%%L3A%%,term_to_atom(L3A,L4)%%,atom_string(L4A,L4)}.
loop :- n1(N), retractall(n1(_)), N1 is N+1, assertz(n1(N1)), loop.:-include('../listprologinterpreter/listprolog.pl').
lower(Height1,Difference,Height2) :-Height2 is Height1+Difference.
lp2p1(Algorithm1,Algorithm2) :-%retractall(pred_type(_)),%% note: without type, mode statementsmemberlp2p10(Algorithm1,"",Algorithm2),!.
lpi :-writeln("List Prolog"),retractall(lp_trace(_)),assertz(lp_trace(off)),%retractall(lp_lang(_)),%assertz(lp_lang("en")),loop([],_).
lpi(Alg) :-writeln("List Prolog"),retractall(lp_trace(_)),assertz(lp_trace(off)),%retractall(lp_lang(_)),%assertz(lp_lang("en")),loop(Alg,_).
lucian_mini_wp :-writeln("Please enter string to process."),read_string(user_input,"\n","\r",_,Input),%term_to_atom(Input,Reversedionary21),(open_s("file.txt",write,Stream1),write(Stream1,Input),close(Stream1)),multi_choice_character([[1,[[-,"Spell Check"]]]],1,[],Choices),Choices=["Spell Check"],spell_check0,phrase_from_file_s(string(String2), "file2.txt"),string_codes(String1,String2),%atom_to_term(String1,String,_),writeln(String1).
luciancicd_server(Port) :-        http_server(http_dispatch, [port(Port)]).
lucianpl(Alg) :-writeln("Lucian Prolog"),retractall(lp_trace(_)),assertz(lp_trace(off)),%retractall(lp_lang(_)),%assertz(lp_lang("en")),loop(Alg,_).
lucianpl11(Debug,Query,Functions,Result) :-((not(lang(_Lang1))%var(Lang1))->(retractall(lang(_)), assertz(lang("en")));true),load_lang_db,query_box(Query,Query1,Functions,Functions1),%writeln1(query_box(Query,Query1,Functions,Functions1)),%%writeln1([i1]),%%writeln1(convert_to_grammar_part1(Functions1,[],Functions2,_)),convert_to_grammar_part1(Functions1,[],Functions2,_),%insert_cuts(Functions2a,Functions2),%writeln1(convert_to_grammar_part1(Functions1,[],Functions2,_)),%trace,%writeln1(Functions2),%%pp3(Functions2),%%writeln1(lucianpl1(Debug,Query,Functions2,Functions2,Result)),%findall(Result1,%trace,add_line_numbers_to_algorithm1(Functions2,Functions2a),%writeln1(add_line_numbers_to_algorithm1(Functions2,Functions2a)),%writeln1(Functions2a),%find_pred_sm(Reserved_words),%,"en"),find_pred_numbers(Functions2a,[]%Reserved_words,Pred_numbers),retractall(pred_numbers(_)), assertz(pred_numbers(Pred_numbers)),%trace,find_state_machine1(Functions2a,Functions3,Pred_numbers),%writeln1(find_state_machine1(Functions2a,Functions3,Pred_numbers)),% find first predicate%trace,prep_predicate_call(Query1,Functions3,All_predicate_numbers),lucianpl1(Debug),% ssi1([Level, % Trace level% All_predicate_numbers1 % List of instances of this predicate left to call% Predicate_or_line_number, % predicate nor line number in predicate% Destination, % "predicate" or "line"% Query, % Query when Destination="predicate"% Vars, % Input Vars% All_predicate_numbers], % predicates remaining to try at current level - saved in cp trail% End_result, % Result of predicate% Functions, % functions in algorithm% Vars2, % output vars% Result1, Result2, % Initial and cumulative lists of non-deterministic results% Globals1, Globals2, % Initial and cumulative lists of assertz globals% Choice_point_trail1, % Initial and cumulative lists of choice points% Choice_point_trail2, Cpv1, Cpv2)%trace,%trace,findall([All_predicate_numbers0,"prev_pred_id",0],member(All_predicate_numbers0,All_predicate_numbers),All_predicate_numbers01),All_predicate_numbers01=[[All_predicate_numbers1,"prev_pred_id",Prev_pred_id]|All_predicate_numbers2],%trace,ssi1([["prev_pred_id",Prev_pred_id],1,All_predicate_numbers1,-1,"predicate",Query1,[],All_predicate_numbers2],_End_result,Functions3,_Vars2,[],Result1,[],_Globals2,[], _Choice_point_trail2,[[curr_cp,0],[curr_cp_index,0],[global_cp_trail,[]]],_),Result=Result1.
lucianpl111(Debug,Query,Functions,Result) :-/*((not(lang(_Lang1))%var(Lang1))->(retractall(lang(_)), assertz(lang("en")));true),load_lang_db,*/%trace,query_box(Query,Query1,[],Functions1),%get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,delete(Functions,[0|_],Functions1a), % delete query box%writeln1(query_box(Query,Query1,Functions,Functions1)),%%writeln1([i1]),%%writeln1(convert_to_grammar_part1(Functions1,[],Functions2,_)),convert_to_grammar_part1(Functions1,[],Functions2,_),%insert_cuts(Functions2a,Functions2),%Functions1=Functions2,%writeln1(convert_to_grammar_part1(Functions1,[],Functions2,_)),%trace,%writeln1(Functions2),%%pp3(Functions2),%%writeln1(lucianpl11(Debug,Query,Functions2,Functions2,Result)),%findall(Result1,%trace,add_line_numbers_to_algorithm1(Functions2,Functions2a),%Functions2=Functions2a,%writeln1(add_line_numbers_to_algorithm1(Functions2,Functions2a)),%writeln1(Functions2a),append(Functions2a,Functions1a,Functions2b),%find_pred_sm(Reserved_words),%,"en"),find_pred_numbers(Functions2b,[]%Reserved_words,Pred_numbers),%pred_numbers(Pred_numbers0),%writeln([pred_numbers0,Pred_numbers0]),retractall(pred_numbers(_)), assertz(pred_numbers(Pred_numbers)),%trace,%writeln([pred_numbers1,Pred_numbers]),find_state_machine1(Functions2a,Functions3a,Pred_numbers),append(Functions3a,Functions1a,Functions3b),%Functions2a=Functions3,%writeln1(find_state_machine1(Functions2a,Functions3,Pred_numbers)),% find first predicate%trace,%writeln1([functions3a,Functions3a]),prep_predicate_call(Query1,Functions3b,All_predicate_numbers),lucianpl1(Debug),% ssi1([Level, % Trace level% All_predicate_numbers1 % List of instances of this predicate left to call% Predicate_or_line_number, % predicate nor line number in predicate% Destination, % "predicate" or "line"% Query, % Query when Destination="predicate"% Vars, % Input Vars% All_predicate_numbers], % predicates remaining to try at current level - saved in cp trail% End_result, % Result of predicate% Functions, % functions in algorithm% Vars2, % output vars% Result1, Result2, % Initial and cumulative lists of non-deterministic results% Globals1, Globals2, % Initial and cumulative lists of assertz globals% Choice_point_trail1, % Initial and cumulative lists of choice points% Choice_point_trail2, Cpv1, Cpv2)%trace,%trace,findall([All_predicate_numbers0,"prev_pred_id",0],member(All_predicate_numbers0,All_predicate_numbers),All_predicate_numbers01),All_predicate_numbers01=[[All_predicate_numbers1,"prev_pred_id",Prev_pred_id]|All_predicate_numbers2],%trace,ssi1([["prev_pred_id",Prev_pred_id],1,All_predicate_numbers1,-1,"predicate",Query1,[],All_predicate_numbers2],_End_result,Functions3b,_Vars2,[],Result1,[],_Globals2,[], _Choice_point_trail2,[[curr_cp,0],[curr_cp_index,0]],_),Result=Result1.
lucianpl1_1(Debug,Query,TypeStatements,ModeStatements,Functions1,Result) :-retractall(types(_)), assertz(types(on)),retractall(typestatements(_)), findall([A,C],(member([A,B],TypeStatements),expand_types(B,[],C)),TypeStatements1),assertz(typestatements(TypeStatements1)),retractall(modestatements(_)), assertz(modestatements(ModeStatements)),lucianpl111(Debug,Query,Functions1,Result).
lyrics(Form1,Lyrics,Maxlength) :-%%find("Who is the song about?",Character),%%lyrics1(Form,Character,[],Lyrics).
lyrics(Form1,Lyrics,Maxlength) :-%%find("Who is the song about?",Character),%%lyrics1(Form,Character,[],Lyrics).catch((lyrics2(Form1,[],Lyrics,[],_Names,0,Maxlength)),_,lyrics(Form1,Lyrics,Maxlength)).
lyrics2([],Lyrics,Lyrics,Names,Names,Maxlength,Maxlength) :- !.
lyrics2([],Lyrics,Lyrics,Names,Names,Maxlength,Maxlength) :- !.lyrics2(Form1,Lyrics1,Lyrics2,Names1,Names2,Maxlength1,Maxlength2) :-Form1=[Form2|Forms3],findsentence(Sentence1,Names1,Names3),length(Sentence1,Length1),findsentence(Sentence2,Names3,Names4),length(Sentence2,Length2),findrhyme(Sentence1,Sentence3,Names4,Names5),length(Sentence3,Length3),findrhyme(Sentence2,Sentence4,Names5,Names6),length(Sentence4,Length4),append(Lyrics1,[[Form2,Sentence1,Sentence2,Sentence3,Sentence4]],Lyrics3),max([Length1,Length2,Length3,Length4],Maxlength1,Maxlength3),lyrics2(Forms3,Lyrics3,Lyrics2,Names6,Names2,Maxlength3,Maxlength2),!.
lyrics2_m2m([],Maxlength,Maxlength) :- !.
main :-[Auto,File_list1,Synonym_list1]=[on,["b"," ","e"],[["b","b1"]]],paraphrase1(Auto,File_list1,Synonym_list1),halt.
main :-working_directory(_, 'GitHub/SSI/'),delete_old_sessions,ssi_server(8000),sleep(86390),halt.
main :-catch((open_file_s("tt_log.txt",File_term),(append(_,[[n=N1,Pres_D,Pres_M,Pres_Y,Fut_D,Fut_M,Fut_Y]],File_term)->true;(N1=0,Fut_D=1,Fut_M=10,Fut_Y=5689)),N2 is N1+1,get_time(TS),stamp_date_time(TS,date(Year,Month,Day,_,_,_,_,_,_),local),([Pres_D,Pres_M,Pres_Y]=[Day,Month,Year]->D=0;D=1),Fut_D0 is ((Fut_D+D) mod 17),(Fut_D0=0->Fut_D1=1;Fut_D0=Fut_D1),append(File_term,[[n=N2,Day,Month,Year,Fut_D1,Fut_M,Fut_Y]],File_term1),   term_to_atom(File_term1,String1),save_file_s("tt_log.txt",String1)),Err,handle_error(Err)),halt.handle_error(_Err):-  halt(1).
main :-catch(main2,Err,handle_error(Err)),halt.
main :-  time((texttobr2(u,u,u,u),texttobr(u,u,u,u))),time((prolog_edit:mergetexttobrdict)),  halt(0).
main :-S is 60*60,catch(catch(call_with_time_limit(S,main2),time_limit_exceeded,(writeln("Timed out."),handle_error(_Err))),Err,handle_error(_Err)),halt.
main :- halt(1).
main2 :-((exists_file('../Text-to-Breasonings/b1'),exists_file('../Text-to-Breasonings/b2'),exists_file('../Text-to-Breasonings/c1'),exists_file('../Text-to-Breasonings/c2'))->true;shell1_s("./d-prep.sh")),shell1_s("./add_to_tt_log.sh"),meditators(A),meditators2(B),length(A,AL),length(B,BL),CL is AL+BL,meditation1(Utterances1,Utterances2,Immortality),length(Utterances1,UL1),length(Utterances2,UL2),length(Immortality,J2),% breasonings:N1 is 2*108*250 +% meditation16000 + 4 +% texttobr2_square160 + % 160 combophil br15*3*4*16000 + % d.sh3*10*4*16000 + % day2.sh % with medit, tt, medic frozen age, % hq thought250*CL +% a15_meditators.sh prepares an apartment % in each dimension for meditators by % helping 15 of those around them3*10*(UL1+UL2)*250 +% daily_medit.sh3*10*J2*250,GM is 250*CL,% group_meditation.shC1 isGM +16000,% time_hop.shC2 isGM,bc12,destination(N1,C1,C2,"Going to present"),destination(N1,C1,C2,"Going to 5689"),point_to_br(N1),prompt_question,!.
main2:-open_string_file_s("big_medit.sh",File_string),split_string(File_string,"\n\r","\n\r",List),findall(X,(member(X,List),not(string_concat("#",_,X))),Y),%try each command again 3 times if fails%report on progressfindall(_,(member(Z,Y),bash_command1(Z)),_),writeln("Finished."),!.bash_command1(Z) :- bash_command2(3,Z).
main2:-time((only_ssi_test(off,NTotal1,Score1),ssi_test_all00("en",off,NTotal2,Score2),ssi_test_all00("en2",off,NTotal3,Score3),ssi_test_all_bt00("en2",off,NTotal4,Score4),writeln(only_ssi_test(off,NTotal1,Score1)),writeln(ssi_test_all00("en",off,NTotal2,Score2)),writeln(ssi_test_all00("en2",off,NTotal3,Score3)),writeln(ssi_test_all_bt00("en2",off,NTotal4,Score4)))).
main2:-time((length(A,30),time(findall(B,(member(_,A),mind_read(B, [11, 22])),C)),writeln(C))),!.get_type(A,list) :- is_list(A),!.
main3:-time((test_all00("en",off,NTotal1,Score1),test_all00("en2",off,NTotal2,Score2),test_all_bt00("en2",off,NTotal3,Score3),writeln(test_all00("en",off,NTotal1,Score1)),writeln(test_all00("en2",off,NTotal2,Score2)),writeln(test_all_bt00("en2",off,NTotal3,Score3)))).
main:-catch(main2,Err,handle_error(Err)),halt.
make_connection("computer","file","cooled",(-)).
make_directory_s(F1) :- atom_string(F2,F1), make_directory(F2),!.
make_exercise1(Connectives,Sentences,%Sentences1,Sentences0,%Sentences01,Exercise) :-length(Sentences,Length),numbers(Length,1,[],N),random_member(N1,%Item,%Pair,%[Sentence,Sentence1],N%Sentences1),get_item_n(Sentences,N1,Item),delete_item_n(Sentences,N1,Sentences11),%delete_item_n(Sentences1,N1,Sentences12),%trace,(make_exercise(Connectives,Sentences,Item,Exercise)->(Sentences11=Sentences0%,Sentences12=Sentences01);(make_exercise1(Connectives,Sentences11,%Sentences12Sentences0,%Sentences01Exercise))).
make_formula_term(T,R,C,C10,F2) :-(string(C10)->C11=[C10]%string_strings(C10,C11);C10=C11),extra_characters(EC),string_strings(EC,ECL),operators1(Op1),string_strings(Op1,Op11),(intersection(C11,Op11,[])->(F2=%[]%[function,T,R,C,C11,C11]%[C11]%,writeln1([*,F2]));(subtract(C11,ECL,C12),((%trace,formula_and_assigned_value(C12,FEC,AVEC),%(FEC=[calculate,FEC1]->Flag1=calculate;(Flag1=none,FEC1=FEC)),%writeln1(formula_and_assigned_value(***,C12,FEC,AVEC)),findall(C13,(member(C13,C12),(number1(C13,_C131)->true;(atom_string(C14,C13),atom_concat(C141,_,C14),atom_length(C141,1),not(char_type(C141,alpha))%,C13=C131))),C121),%trace,formula_and_assigned_value(C121,F11,AV),%F11=F,%trace,(F11=[calculate,F]->_Flag=calculate;(_Flag=none,F11=F)),foldr(append,[["("],F,[")"]],Tokens),%get_formula_n(N),convert_tokens_to_nested_list(T,R,C,Tokens,F21),F21a=[function,T,R,C,FEC,F21],%(Flag=calculate->F21b=[calculate,F21a];F21b=F21a),F21b=F21a,F22a=[function,T,R,C,AVEC,AV],F2=[F21b,F22a]%,writeln1(F2=[***,F21b,F22a])))->true;((%formula_and_assigned_value(ECL,FEC,AVEC),findall(C13,(member(C13,C10),(number1(C13,_C131)->true;(atom_string(C14,C13),atom_concat(C141,_,C14),atom_length(C141,1),not(char_type(C141,alpha))%,C13=C131))),C121),%formula_and_assigned_value(C121,F,AV),%foldr(append,["(",F,")"],Tokens),% table n x, row r, col c% later: manually enter search criteria for table's col heading(s)% choose value from previous copies, select search criteria eg col head contains machine or prev text to num in q contains a or b% with multiple or single previous io, finds key terms% function with search criteria (downcase) with q,i,o no tn but this row, col% function doesn't use different value from function if can't find itfoldr(append,[["("],C121,[")"]],Tokens),convert_tokens_to_nested_list(T,R,C,Tokens,F21),F2=[[function,T,R,C,C10,F21]]%,writeln1([*,F2]))))),!.
make_formula_term(T,R,C,C10,F2) :-(string(C10)->C11=[C10]%string_strings(C10,C11);C10=C11),extra_characters(EC),string_strings(EC,ECL),operators1(Op1),string_strings(Op1,Op11),(intersection(C11,Op11,[])->F2=%[]%[function,T,R,C,[C11],[C11]]%[C11];(subtract(C11,ECL,C12),((%trace,formula_and_assigned_value(C12,FEC,AVEC),writeln1(formula_and_assigned_value(***,C12,FEC,AVEC)),findall(C13,(member(C13,C12),(number1(C13,_C131)->true;(atom_string(C14,C13),atom_concat(C141,_,C14),atom_length(C141,1),not(char_type(C141,alpha))%,C13=C131))),C121),%trace,formula_and_assigned_value(C121,F11,AV),(F11=[calculate,F]->Flag=calculate;(Flag=none,F11=F)),foldr(append,[["("],F,[")"]],Tokens),%get_formula_n(N),convert_tokens_to_nested_list(T,R,C,Tokens,F21),F21a=[function,T,R,C,FEC,F21],(Flag=calculate->F21b=[calculate,F21a];F21b=F21a),F22a=[function,T,R,C,AVEC,AV],F2=[F21b,F22a]%,writeln1(F2=[***,F21b,F22a])))->true;((%formula_and_assigned_value(ECL,FEC,AVEC),findall(C13,(member(C13,C10),(number1(C13,_C131)->true;(atom_string(C14,C13),atom_concat(C141,_,C14),atom_length(C141,1),not(char_type(C141,alpha))%,C13=C131))),C121),%formula_and_assigned_value(C121,F,AV),%foldr(append,["(",F,")"],Tokens),% table n x, row r, col c% later: manually enter search criteria for table's col heading(s)% choose value from previous copies, select search criteria eg col head contains machine or prev text to num in q contains a or b% with multiple or single previous io, finds key terms% function with search criteria (downcase) with q,i,o no tn but this row, col% function doesn't use different value from function if can't find itfoldr(append,[["("],C121,[")"]],Tokens),convert_tokens_to_nested_list(T,R,C,Tokens,F21),F2=[[function,T,R,C,C10,F21]])))),!.% (a)=1+1=2% or 1+1=2formula_and_assigned_value(C12,F3,AV3) :-append(F1,C15,C12),append(["="],AV1,C15),((append(F2,C151,AV1),append(["="],AV2,C151))->(F=F2,AV=AV2);(F=F1,AV=AV1)),F3=[calculate,F],%[result,F],AV3=AV,!.
make_grid(X,Y,Grid) :- numbers(Y,1,[],Ys), numbers(X,1,[],Xs),  findall([X1,Y1,[]],(member(Y1,Ys),member(X1,Xs)),Grid).
make_lists(Sentence1,Sentence,Sentence) :-Sentence1=[_Sentence2],!.make_lists(Sentence1,Sentence2,Sentence3) :-Sentence1=[Sentence4|Sentence5],Sentence5=[Sentence6|_Sentence7],append(Sentence2,[[Sentence4,Sentence6]],Sentence8),make_lists(Sentence5,Sentence8,Sentence3).
make_mind_reading_tree4(Options0,Options3) :-sort(Options0,Options1),abort_if_empty_string(Options1),string_to_list1(Options1,1,_,[],Options2),maplist(append,[Options2],[Options2a]),%writeln1(merge_lists1a(Options2,Options2a,Options3a)),make_mind_reading_tree4_a(Options2a,Options3).
make_mind_reading_tree4(["aaaccc","bbbccc"],[[1, "a", [-, "aaaccc"]], [1, "b", [-, "bbbccc"]]]).
make_mind_reading_tree4(["abcde","afgde"],[[1, "a", 2], [2, "b", [-, "abcde"]], [2, "f", [-, "afgde"]]]).
make_mind_reading_tree4(["abcde"],[[1, "e", [-, "abcde"]]]).
make_mind_reading_tree4(["ac","bc"],[[1, "a", [-, "ac"]], [1, "b", [-, "bc"]]]).make_mind_reading_tree4(["aqa","awx","awy"],[[1,"a",2],[2,"q",[-,"aqa"]],[2,"w",9],[9,"x",[-,"awx"]],[9,"y",[-,"awy"]]]).
make_mind_reading_tree4(["ca","cb"],[[1, "c", 2], [2, "a", [-, "ca"]], [2, "b", [-, "cb"]]]). make_mind_reading_tree4(["abc","ade"],[[1, "a", 2], [2, "b", [-, "abc"]], [2, "d", [-, "ade"]]]).
make_mind_reading_tree4(["cccbbb","fsfs"],[[1, "c", [-, "cccbbb"]], [1, "f", [-, "fsfs"]]]).
make_over_50 :-phrase_from_file_s(string(Codes), "1.txt"),string_codes(String1,Codes),SepandPad="\n",%"&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xxsplit_string(String1,SepandPad,SepandPad,File_list),length(File_list,FL),make_over_50_1(FL,File_list,1,File_list,[],File_list1),term_to_atom(File_list1,File_list2),(open_s("11.txt",write,Stream2),write(Stream2,File_list2),close(Stream2)),!.
make_over_50_1(_,_,_,[],File_list,File_list) :- !.make_over_50_1(FL,F,N,File_list,File_list1,File_list2) :-File_list=[File_list3|File_list4],string_length(File_list3,L),(L>=50->File_list3=File_list5;get_more(FL,F,[N],File_list3,File_list5)),append(File_list1,[File_list5],File_list6),N1 is N+1,make_over_50_1(FL,F,N1,File_list4,File_list6,File_list2).get_more(_,_F,_Ns,File_list1,File_list3) :-string_length(File_list1,L),(L>=50->File_list1=File_list3),!.
makebasecase(FunctionName,Code) :- %****Code=[[FunctionName,[[],[v,inputs2],[v,output],[v,output]]]].
makename(N3) :-mind_read(N1,["Ack","Luc","Add","All","Brae","Skye","Whist","Dix","Wilb","Duk","Le","Ven","Syd","Don","Count","Black","Nei"]),mind_read(N2,["an","ae","ye","ler","ee","ur","ard","ice","ney","ald","ess","el"]),append([N1],[N2],N3).
makename(N3) :-trialy2(["Ack","Luc","Add","All","Brae","Skye","Whist","Dix","Wilb","Duk","Le","Ven","Syd","Don","Count","Black","Nei"],R1),findbest(R1,N1),trialy2(["an","ae","ye","ler","ee","ur","ard","ice","ney","ald","ess","el"],R2),findbest(R2,N2),append([N1],[N2],N3).
makename(N3) :-trialy2(["Ack","Luc","Add","All","Brae","Skye","Whist","Dix","Wilb","Duk","Le","Ven","Syd","Don","Count","Black","Nei"],R1),findbest(R1,N1),trialy2(["an","ae","ye","ler","ee","ur","ard","ice","ney","ald","ess","el"],R2),findbest(R2,N2),append([N1],[N2],N3).makenames(0,Ns,Ns) :- !.
makenames(0,Ns,Ns) :- !.
makenames(0,Ns,Ns) :- !.makenames(Num1,N1,N2) :-random_member(R1,["Ack","Luc","Add","All","Brae","Skye","Whist","Dix","Wilb","Duk","Le","Ven","Syd","Don","Count","Black","Nei"]),random_member(R2,["an","ae","ye","ler","ee","ur","ard","ice","ney","ald","ess","el"]),append([R1],[R2],R3),append(N1,[R3],N3),Num2 is Num1-1,makenames(Num2,N3,N2).
makenames(0,Ns,Ns) :- !.makenames(Num1,N1,N2) :-random_member(R1,["Ack","Luc","Add","All","Brae","Skye","Whist","Dix","Wilb","Duk","Le","Ven","Syd","Don","Count","Black","Nei"]),random_member(R2,["an","ae","ye","ler","ee","ur","ard","ice","ney","ald","ess","el"]),append([R1],[R2],R3),append(N1,[R3],N3),Num2 is Num1-1,makenames(Num2,N3,N2).findsentence(Sentence,Names1,Names2) :-makename(N1),readv(Vs),reado(Os),makenames(5,[],N2s1),append(N2s1,Names1,N2s),trialy2(Vs,R1),findbest(R1,R11),append(Os,N2s,Os2),trialy2(Os2,R2),findbest(R2,R21),append_list(N1,[R11,R21],Sentence),(member(R21,N2s1)->append(Names1,[R21],Names2);Names2=Names1).
match4([[[v,a],"|",[v,d]],[v,c],"|",[v,b]],[[1,5],2,3,4],[],V).V = [[[v, a], 1], [[v, d], [5]], [[v, c], 2], [[v, b], [3, 4]]].
match4([[v,a],"|",[[v,b]]],[1,2],[],V).                             V = [[[v, a], 1], [[v, b], 2]].
match4([[v,a],"|",[v,b]],[[1,2],3,4],[],V).
match4([[v,a],"|",[v,b]],[[1,2],3,4],[],V).V = [[[v, a], [1, 2]], [[v, b], [3, 4]]].match4([[v,a],"|",[[v,b]]],[1,2],[],V).                             V = [[[v, a], 1], [[v, b], 2]].
match4([[v,a],[v,b]],[1,2],[],V).                            V = [[[v, a], 1], [[v, b], 2]].
match4([[v,a],[v,b]],[1,2],[],V).                            V = [[[v, a], 1], [[v, b], 2]].                                                              match4([[v,a],[v,b]],[[1,3],2],[],V).V = [[[v, a], [1, 3]], [[v, b], 2]] **/map(_,_,_F,[],L,L,_).map(Functions0,Functions,F,L,M1,N,Vars1):-get_lang_word("v",Dbw_v),get_lang_word("sys1",Dbw_sys1),not((L=[])),L=[H|T],interpretstatement1(_,Functions0,Functions,[F,[M1,H,[Dbw_v,Dbw_sys1]]],Vars1,Vars2,true,nocut),getvalue([Dbw_v,Dbw_sys1],M2,Vars2),%%(F,(M1,H,M2)),map(Functions0,Functions,F,T,M2,N,Vars1).
match4([[v,a],[v,c],"|",[v,b],[v,d]],[1,2,3,4],[],V).
match4([[v,a],[v,c],"|",[v,b],[v,d]],[1,2,3,4],[],V).should be falsematch4([[[v,a]],[v,c],"|",[v,b]],[[1],2,3,4],[],V).
match4([[v,a]],[1],[],V).                                    V = [[[v, a], 1]].
match4_list(Head1,Head2,Vars1,Vars2) :-not(variable_name(Head1)),not(variable_name(Head2)),Head1=[Head1a|Head1b],Head2=[Head2a|Head2b],not(Head1a="|"),not(Head2a="|"),match4(Head1a,Head2a,Vars1,Vars3%%,false),match4_list(Head1b,Head2b,Vars3,Vars2).
match4_new1(Statement1,Statement2,Vars1,Vars1%,_Standard_or_e4) :- not(variable_name(Statement1)), not(variable_name(Statement2)), %getvalue_new(Statement1,Value1,Vars1), %getvalue_new(Statement2,Value2,Vars1),Statement1=Statement2. %match4_new2(Statement1,Statement2,Vars1,Vars2,Standard_or_e4).
match4_new1(Statement1,Statement2,Vars1,Vars2%,_Standard_or_e4) :- not(variable_name(Statement1)), variable_name(Statement2), %getvalue_new(Statement1,Value1,Vars1), %getvalue_new2(Statement2,Value2,Vars1,Standard_or_e4), putvalue(Statement2,Statement1,Vars1,Vars2).
match4_new1(Statement1,Statement2,Vars1,Vars2%,_Standard_or_e4) :- variable_name(Statement1), not(variable_name(Statement2)), %getvalue_new2(Statement1,Value1,Vars1,Standard_or_e4), %getvalue_new(Statement2,Value2,Vars1), putvalue(Statement1,Statement2,Vars1,Vars2).
match4_terminal(Variable1,Variable2,Vars1,Vars2) :-%%trace,%%single_item(Variable1), %% may be [1,2]%%single_item(Variable2),   getvalues(Variable1,Variable2,Value1,Value2,Vars1),   %% what if there is a var in a compound term? - may need different code in getvalues        ((Value1A = Value2,        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2)%%bracket_if_single(Value1A,Value1A2),        %%append11(Value1a,[Value1A],Value2a)        )->true;        ((Value2A = Value1,        val1emptyorvalsequal(Value2,Value2A),        putvalue(Variable2,Value2A,Vars1,Vars2)%%,%%bracket_if_single(Value2A,Value2A2),        %%append11(Value1a,[Value2A],Value2a)        )->true;     fail     %% assumes either or both A and B in A=B are instantiated,      %% can be changed later.
match_put_vals(Variables1,Variables2,Vars1,Vars2%,Standard_or_e4) :-%(Variables1=Variables2->fail;Variables1=[Statement1a|Statement2a],Variables2=[Statement1b|Statement2b],%(Statement1a=Statement1b->fail;((Statement1a="|",Statement1b="|")->match_put_vals([Statement2a],[Statement2b],Vars1,Vars2%,Standard_or_e4);(Statement1a="|"->match_put_vals(Statement2a,[Variables2],Vars1,Vars2%,Standard_or_e4);(Statement1b="|"->match_put_vals([Variables1],Statement2b,Vars1,Vars2%,Standard_or_e4);% v=_1 if undef% vsys x _% v=[multi items] - insert vals in multi items - |, simplify, what if v is defined & in following% v=v% v=item% item=item% % (%Vars1=Vars3,(((Statement1a=undef->true;Statement1b=undef)->Vars1=Vars3;(((single_item_or_var(Statement1a)%,Vars1=Vars2)->true;(single_item_or_var(Statement1b)%,Vars1=Vars2))->match4_new1(Statement1a,Statement1b,Vars1,Vars3%,Standard_or_e4);(%contains_var1(Statement1a,Statement1b))->true;%((variable_name(Statement1b),%not(variable_name(Statement1a)),%contains_var1(Statement1b,Statement1a))->true;match_put_vals(Statement1a,Statement1b,Vars1,Vars3%,Standard_or_e4))))),%Vars3=Vars4,match_put_vals(Statement2a,Statement2b,Vars3,Vars2%,Standard_or_e4))))),!.
match_put_vals(Variables1,[],Vars1,Vars2%,Standard_or_e4) :- Variables1=[Statement1a|Statement2a], (Statement1a="|"->match_put_vals(Statement2a,[[]],Vars1,Vars2%,Standard_or_e4)),!.
match_put_vals([],Variables2,Vars1,Vars2%,Standard_or_e4) :- Variables2=[Statement1b|Statement2b], (Statement1b="|"->match_put_vals([[]],Statement2b,Vars1,Vars2%,Standard_or_e4)),!.
match_tables(MA2LN,Q_Table,MA_Table,Answer_table) :-% identify where data is% reflect in x=y if neededfind_data(MA2LN,Q_Table,MA_Table,MA_Table2,Answer_table).
mathematical_lock(N1,N2,N3) :-numbers(N3,N1,[],N4),length(N4,L1),L2 is ceiling(L1/2)-1,length(List,L2),append(List,[N2|_],N4).% 30. sit_in_rect_prism([[0,0,0],[1,1,1]],[[0,0,0],[0.75,0.75,0.75]]).
matrix_finder1(Ms,Ma) :- Ms=[[M1,M2]|M3], matrix_finder(M1,M2,Ma), forall(member([M11,M12],M3),matrix_finder(M11,M12,Ma)),!.
max([],M,M) :- !.
max([],M,M) :- !.max(List1,Max1,Max2) :-List1=[Item|List2],Item>=Max1,max(List2,Item,Max2),!.
max([],M,M) :- !.max(List1,Max1,Max2) :-List1=[Item|List2],Item>=Max1,max(List2,Item,Max2),!.max(List1,Max1,Max2) :-List1=[Item|List2],Item<Max1,max(List2,Max1,Max2),!.
max_depth(3).
maximum_length(List,Maximum_length) :-findall(L,(member(A2,List),length(A2,L)),L2),sort(L2,L3),append(_,[Maximum_length],L3),!.
me([["Height","180 cm"],["Weight","80 kg"],["Age","42 y"]]).
meaning(apple,fruit).
meaning_to_algorithm([V, "equals", A, "plus", B],Algorithm) :-number_string(A1,A),number_string(B1,B),operate3(+,[A1,B1],1,Output),Algorithm=[V, "equals", Output].
medicine0 :-medicine(_),medicine1(_),medicine2(_).
medicine_problems_and_solutions :-findall(_,(medicine0,(problem->four_by_fifty_As;true)),_),!.
meditation1(Utterances1,Utterances2,Immortality) :-Utterances1=[%%dailyregimen and noheadaches,time_travel,mind_reading,medicine,meditation,fish_oil,tt_loc_one_to_two,tt_loc_two_to_three,tt_loc_three_to_one,a_for_love_head_of_state,b_for_love_head_of_state,b_to_b_for_love_head_of_state,a_for_immortality,b_for_immortality,b_to_b_for_immortality,a_for_body_replacement,b_for_body_replacement,b_to_b_for_body_replacement,a_for_immortality_medicine_for_thinking,b_for_immortality_medicine_for_thinking,b_to_b_for_immortality_medicine_for_thinking,a_for_immortality_medicine_for_stopping_dementia,b_for_immortality_medicine_for_stopping_dementia,b_to_b_for_immortality_medicine_for_stopping_dementia,a_for_immortality_medicine_for_seeing_clearly,b_for_immortality_medicine_for_seeing_clearly,b_to_b_for_immortality_medicine_for_seeing_clearly,a_for_immortality_medicine_for_muscle_relaxation,b_for_immortality_medicine_for_muscle_relaxation,b_to_b_for_immortality_medicine_for_muscle_relaxation,a_for_immortality_medicine_for_antidepressant,b_for_immortality_medicine_for_antidepressant,b_to_b_for_immortality_medicine_for_antidepressant,a_for_immortality_medicine_for_antipsychotic,b_for_immortality_medicine_for_antipsychotic,b_to_b_for_immortality_medicine_for_antipsychotic,a_for_other_medicines_for_the_body,b_for_other_medicines_for_the_body,b_to_b_for_other_medicines_for_the_body,a_for_the_other_as,b_for_the_other_as,b_to_b_for_the_other_as,a_for_thank_head_of_state,b_for_thank_head_of_state,b_to_b_for_thank_head_of_state,%%/**connect_what_i_say_and_the_question,the_adverse,knock_out_cancer_frequency,i_am_serious,rod_off,good_circulation,no_smells,knock_out_annoying_frequency,knock_out_nagging_frequency,knock_out_complaining_frequency,stop_pain_inflammation_help_blood_flow_relaxation_and_wellbeing_and_deeptissue_massage,memory,learning,no_cancer,comments,i_do_not_mean_it,law_to_protect_product,krishna_rcawp_for_wanted_people,say_reason_to_them,wanted_otherwise_dismissed,graciously_give_as, royalty, royalty_about_sales, nothing_rather_than_something,to_lucian,to_god,to_lecturer,today,tomorrow,day_after_tomorrow,a,b,b_to_b,seen_as_version,high_quality_version,army_go,army_return,%%**no_digestive_system_pops_from_practising_the_sutra,first_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_protector_from_headache_in_meditation_after_honours_study,second_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_protector_from_headache_in_meditation_after_honours_study,first_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_no_headache,second_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_no_headache,first_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_turn_off_workload_from_all_employees_including_you_below_you,second_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_turn_off_workload_from_all_employees_including_you_below_you,%%/**lecturer_training,recordings_training,prepare_the_radio_button_accredited__at_the_time__turned_off_openbracket_to_make_accreditation_acceptable_closebracket_computer_science__breathsoned__vocational_education_and_training__sales__education_for_the_following,seen_as_breasoning_out_text_before_texttobr__computer_housing_the_breasonings__70_breasonings_per_waking_hour_for_16_hours__stopping_at_midnight__no_medical_problems_from_it,put_through_prepared_radio_button,put_through_250_word_breasonings_from_job_medicine_to_start_the_spiritual_breasoning_process,turn_off_mistakes,turn_off_breasonings,%%**/first_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_detect_and_turn_off_workloads_using_manager_algorithm,second_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_detect_and_turn_off_workloads_using_manager_algorithm,first_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_detect_and_turn_off_workloads_using_manager_network,second_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_detect_and_turn_off_workloads_using_manager_network,first_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_no_muscle_aches/pains,second_radio_button_put_on_recordings_put_through_with_pray_nut_and_bolt_quantum_box_prayer_for_no_muscle_aches/pains%%**/],Utterances2=[medicine, memory_receiver, memory_transmitter, use_memory_transmitter,%%/**fifty_As_per_organ,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_heart,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_heart_muscles,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_continually_circulating_blood_around_the_body,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_knowing_your_heart_is_working_because_you_can_feel_your_heart_beat,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_feeling_the_blood_at_your_pulse,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_pumping_blood_containing_new_oxygen_to_every_part_of_your_body,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_pumping_the_old_blood_without_oxygen_back_through_the_lungs_where_it_picks_up_new_oxygen_to_repeat_this_cycle,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_heart_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_heart_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_heart_muscles_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_continually_circulating_blood_around_the_body_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_knowing_your_heart_is_working_because_you_can_feel_your_heart_beat_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_feeling_the_blood_at_your_pulse_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_pumping_blood_containing_new_oxygen_to_every_part_of_your_body_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_pumping_the_old_blood_without_oxygen_back_through_the_lungs_where_it_picks_up_new_oxygen_to_repeat_this_cycle_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_heart_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_lungs,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_breathing,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_oxygen_from_the_air_through_tiny_vessels_into_the_blood,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_carrying_oxygen_to_the_heart_to_be_pumped_round_your_body,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_carbon_dioxide_from_your_body_when_you_breathe_out,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_lungs_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_lungs_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_breathing_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_oxygen_from_the_air_through_tiny_vessels_into_the_blood_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_carrying_oxygen_to_the_heart_to_be_pumped_round_your_body_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_carbon_dioxide_from_your_body_when_you_breathe_out_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_lungs_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_liver,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_the_blood,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_chemicals_and_impurities,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_including_from_drugs_and_medications,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_making_and_processes_many_body_fats_and_the_liver_regrowing,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_liver_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_liver_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_the_blood_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_chemicals_and_impurities_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_including_from_drugs_and_medications_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_making_and_processes_many_body_fats_and_the_liver_regrowing_should_be_kept_going_and_not_have_blocks_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_liver_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_kidneys,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_kidneys_filtering,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_some_drugs_and_filtering_waste_products_that_leave_the_body_as_urine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_kidneys_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_kidneys_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_kidneys_filtering_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_filtering_some_drugs_and_filtering_waste_products_that_leave_the_body_as_urine_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_kidneys_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_stomach_and_intestines,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_starting_to_break_down_and_process_food__drink_and_oral_medications_in_the_body_and_absorbing_nutrients_and_drugs_through_the_stomach_and_small_intestine_walls,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_stomach_and_intestines_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_stomach_and_intestines_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_starting_to_break_down_and_process_food__drink_and_oral_medications_in_the_body_and_absorbing_nutrients_and_drugs_through_the_stomach_and_small_intestine_walls_should_be_kept_going_and_not_have_blocks_,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_stomach_and_intestines_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_thymus,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_developing_cdfour_cells_and_other_white_blood_cells,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_thymus_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_thymus_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_developing_cdfour_cells_and_other_white_blood_cells_should_be_kept_going_and_not_have_blocks_,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_thymus_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_pancreas,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_releasing_digestive_enzymes_into_the_small_intestine_and_hormones_that_control_sugar_levels_in_your_blood,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_in_that_case__living_without_a_pancreas_by_taking_insulin_to_regulate_blood_sugar_levels_and_taking_supplementary_digestive_enzymes,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_pancreas_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_pancreas_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_releasing_digestive_enzymes_into_the_small_intestine_and_hormones_that_control_sugar_levels_in_your_blood,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_in_that_case__living_without_a_pancreas_by_taking_insulin_to_regulate_blood_sugar_levels_and_taking_supplementary_digestive_enzymes_should_be_kept_going_and_not_have_blocks_,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_pancreas_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_skin,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_stopping_your_body_from_drying_out_and_being_the_main_barrier_against_infection,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_skin_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_skin_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_stopping_your_body_from_drying_out_and_being_the_main_barrier_against_infection_should_be_kept_going_and_not_have_blocks_,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_skin_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_bones,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_onezero_percent_of_bone_being_replaced_each_year,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_bones_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_bones_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_onezero_percent_of_bone_being_replaced_each_year_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_bones_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_bone_marrow,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_blood_cells_originally_coming_from_bone_marrow,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_bone_marrow_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_bone_marrow_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_blood_cells_originally_coming_from_bone_marrow_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_bone_marrow_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_blood,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_blood_pumped_by_your_heart,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_delivering_oxygen_and_nutrients_to_every_part_of_your_body_and_carrying_waste_products_away,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_blood_cells_openbracket_red_cells__white_cells__platelets_etc_closebracket_and_plasma,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_blood_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_blood_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_blood_pumped_by_your_heart_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_delivering_oxygen_and_nutrients_to_every_part_of_your_body_and_carrying_waste_products_away_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_blood_cells_openbracket_red_cells__white_cells__platelets_etc_closebracket_and_plasma_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_blood_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_plasma,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_its_nutrients__sugars__proteins__minerals__enzymes__and_other_substances_but_with_the_blood_cells_taken_out,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_plasma_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_plasma_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_its_nutrients__sugars__proteins__minerals__enzymes__and_other_substances_but_with_the_blood_cells_taken_out_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_plasma_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_lymph,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_its_white_blood_cells_and_antibodies,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_lymph_vessels__nodes__and_organs_and_removing_waste_products_from_the_body,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_lymph_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_lymph_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_its_white_blood_cells_and_antibodies_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_lymph_vessels__nodes__and_organs_and_removing_waste_products_from_the_body_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_lymph_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_lymph_nodes,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_cdfour_cells_in_your_body_resting_and_reproducing_in_your_lymph_nodes,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_lymph_nodes_function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_lymph_nodes,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_the_cdfour_cells_in_your_body_resting_and_reproducing_in_your_lymph_nodes,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_lymph_nodes_medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_organs__function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_organs__medicine,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_heart_does_not_beat_unless_your_brain_and_nervous_system_tell_it_to_do_so,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_heart_beating_because_your_brain_and_nervous_system_tell_it_to_do_so_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_skeletal_system_relies_on_the_nutrients_it_gains_from_your_digestive_system_to_build_strong__healthy_bones,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_skeletal_system_relying_on_the_nutrients_it_gains_from_your_digestive_system_to_build_strong__healthy_bones_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_cardiovascular_system_works_to_circulate_your_blood,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_cardiovascular_system_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_respiratory_system_introduces_oxygen_into_your_body,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_respiratory_system_introducing_oxygen_into_your_body_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_heart_pumping_blood_through_a_complex_network_of_blood_vessels__your_blood_circulating_through_your_digestive_system_and_picking_up_nutrients_your_body_absorbed_from_your_last_meal__your_blood_carrying_oxygen_inhaled_by_the_lungs__your_circulatory_system_delivering_oxygen_and_nutrients_to_the_other_cells_of_your_body_picking_up_any_waste_products_created_by_these_cells_including_carbon_dioxide__and_delivering_these_waste_products_to_the_kidneys_and_lungs_for_disposal_and_the_circulatory_system_carrying_hormones_from_the_endocrine_system__and_the_immune_system_s_white_blood_cells_that_fight_off_infection,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_heart_pumping_blood_through_a_complex_network_of_blood_vessels__your_blood_circulating_through_your_digestive_system_and_picking_up_nutrients_your_body_absorbed_from_your_last_meal__your_blood_carrying_oxygen_inhaled_by_the_lungs__your_circulatory_system_delivering_oxygen_and_nutrients_to_the_other_cells_of_your_body_picking_up_any_waste_products_created_by_these_cells_including_carbon_dioxide__and_delivering_these_waste_products_to_the_kidneys_and_lungs_for_disposal_and_the_circulatory_system_carrying_hormones_from_the_endocrine_system__and_the_immune_system_s_white_blood_cells_that_fight_off_infection_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_respiratory_system_relying_on_your_circulatory_system_to_deliver_the_oxygen_it_gathers__the_muscles_of_your_heart_functioning_with_the_oxygen_they_receive_from_your_lungs__the_bones_of_your_skull_and_spine_protecting_your_brain_and_spinal_cord__your_brain_regulating_the_position_of_your_bones_by_controlling_your_muscles__the_circulatory_system_providing_your_brain_with_a_constant_supply_of_oxygen_rich_blood_and_your_brain_regulating_your_heart_rate_and_blood_pressure,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_respiratory_system_relying_on_your_circulatory_system_to_deliver_the_oxygen_it_gathers__the_muscles_of_your_heart_functioning_with_the_oxygen_they_receive_from_your_lungs__the_bones_of_your_skull_and_spine_protecting_your_brain_and_spinal_cord__your_brain_regulating_the_position_of_your_bones_by_controlling_your_muscles__the_circulatory_system_providing_your_brain_with_a_constant_supply_of_oxygen_rich_blood_and_your_brain_regulating_your_heart_rate_and_blood_pressure_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_skeletal_system_relying_on_your_urinary_system_to_remove_waste_produced_by_bone_cells__the_bones_of_your_skeleton_creating_structure_that_protects_your_bladder_and_other_urinary_system_organs__your_circulatory_system_delivers_oxygen_rich_blood_to_your_bones_and_your_bones_making_new_blood_cells,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_your_skeletal_system_relying_on_your_urinary_system_to_remove_waste_produced_by_bone_cells__the_bones_of_your_skeleton_creating_structure_that_protects_your_bladder_and_other_urinary_system_organs__your_circulatory_system_delivers_oxygen_rich_blood_to_your_bones_and_your_bones_making_new_blood_cells_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_working_together__these_systems_maintaining_internal_stability_and_balance__otherwise_known_as_homeostasis,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_working_together__these_systems_maintaining_internal_stability_and_balance__otherwise_known_as_homeostasis_should_be_kept_going_and_not_have_blocks,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_organ_connections__function,quantum_box__quantum_box_for_head_of_state_for_and_quantum_box_for_no_problems_from_honours_and_beyond_for_other_organ_connections__medicine,%%as degreesreishi_mushroom, goji, ginseng, he_shou_wu, gotu_kola, schisandra, army, meditation_about_medicine_in_ayurveda, pedagogy_about_medicine_in_ayurveda, %%book argsdoctor_sutra, meditation, protector_from_headache_in_meditation_currant_bun, meditation, panic_attack_prevented_by_deep_breathing_and_sutra, family_medicine, help_ensure_successful_conception_and_prevent_miscarriage, pedagogy, lucianic_pedagogical_medicine, pedagogy_grades_failure, pedagogy_course_plan, get_in_touch_with_god_about_breasonings_details_to_see_high_quality_imagery_and_earn_h_one, breasonings_two_hundred_and_fifty, preventing_sales_from_being_dangerous, perpetual_university_short_courses, apple_meditation_for_successful_relationship, miscellaneous, four_glasses_of_water_and_exercise_45_minutes_before_breakfast, go_to_bed_at_nine_thirty_pm, yoga_surya_namaskar1, yoga_surya_namaskar2, yoga_surya_namaskar3, yoga_surya_namaskar4, yoga_surya_namaskar5, yoga_surya_namaskar6, yoga_surya_namaskar7, yoga_surya_namaskar8, yoga_surya_namaskar9, yoga_surya_namaskar10, yoga_surya_namaskar11, yoga_surya_namaskar12, yoga_asanas1, yoga_asanas2, yoga_asanas3, yoga_asanas4, yoga_asanas5, yoga_asanas6, yoga_asanas7, yoga_asanas8, yoga_asanas9, yoga_asanas10, qigongbrocades1, qigongbrocades2, qigongbrocades3, qigongbrocades4, qigongbrocades5, qigongbrocades6, qigongbrocades7, qigongbrocades8, push_ups_shoulders, push_ups_chest, push_ups_triceps, push_ups_back, stomach_exercises_high_knee_taps, stomach_exercises_russian_twists, stomach_exercises_standing_bicycle_crunches, stomach_exercises_classic_plank, stomach_exercises_plank_knees_to_elbows, stomach_exercises_roll_up, stomach_exercises_rolling_like_a_ball, stomach_exercises_earthquake,immortality,simulation, supercard_or_any_number_of_as, work_out_with_250_breasonings_that_buying_a_product_from_my_time_represents_buying_a_product_to_the_future_, help_writers_of_secondary_texts_to_mine, help_primary_text_writers, help_businesses, the_computer_preferred_for_me_to_receive_rather_than_make_up_my_own_thoughts, warmth, food, shelter, i_chose_red_positive_not_blue_negative_thoughts, the_behaviour_that_led_to_no_disease_was_text_to_breasonings_about_meditation, my_body_was_replaced, the_building_which_looked_like_my_home_was_an_image_but_maintained_replaced_and_the_weather_surroundings_and_people_were_all_to_my_liking, heaven_on_earth_for_philosophers, time_travel_enables_immortality, people_in_the_simulation_came_back_to_the_real_world, i_mind_read_with_guru_dev_whether_it_was_safe_to_time_travel, i_could_buy_space_travel, my_consciousness_transferred_to_the_bot, invite_others_to_the_simulation,consciousness,prevent_headaches_on_train_and_a_bent_spine, brain, brain, brain_ii, maintain_dry_eyes, avoid_diseased_people, fewer_mental_breakdowns_schizophrenia, less_depression, honey_pot_prayer_for_no_headaches_in_cars_trains_and_walks, quantum_box_prayer, nut_and_bolt, head_of_state_head_ache_prevention, daily_regimen, laughter_for_depression, heart, contagious_diseases, berocca_prevents_colds_and_flu, food, grains_nuts_fruits_vegetables, sit_properly_at_table_during_meals, computational_english_argument, computational_english_is_like_a_calculator, intertextuality, finite_data_will_be_a_solution_in_conglish, radical_difference, order_in_conglish, dereconstruction, kolmogorov_hermeneutics, derivability, the_science_of_crossing_over, a_new_logic_reflecting_language_or_natural_logic, philosophical_computational_english, lenses, analysing_characteristics_of_arguments, conglish_reflection, narratology_diagram, how_can_the_program_cope_with_real_variation, subject_mix, perspectives, ratios, exploring_opposites_in_hamlet, drawing_connections, symbols, children___h_one____earning_jobs___protection_in_jobs, heads_of_state, lucian_mantra_pure_form, lucian_mantra_sun_safety, maharishi_sutra, meditation_teacher_sutra, moving_appearances, purusha, upasana_sutra, yellow_god, green_sutra, blue_nature, appearances, pranayama, soma, hours_prayer, fifty_breasonings_per_utterance, two_uses, x, y, breathsonings, rebreathsonings, room, part_of_room, direction, time_to_prepare, time_to_do, time_to_finish, professor_algorithm, god_algorithm, marking_scheme__humanities_and_science, marking_scheme__creative_arts, leadership, uses_for_money_in_theatre_studies, uses_for_money_in_epistemology_poetry, uses_for_money_in_music, uses_for_money_in_fine_arts, breasonings_currency, sales_for_lm_to_siva, marketing_for_lm_to_siva, breasoning_currency, lower_risk_of_cancer_and_other_diseases_in_workers_and_broadcasters, decreased_stress, increased_blood_flow, increased_brain_potential, higher_grades, fewer_stillbirths, a_greater_number_of_successful_job_applications, aigs_for_pedagogy_helper, accreditation, protectedness, areas_of_study_to_create_a_pedagogue, create_a_pedagogy_helper_for_the_student, finding_out_about_the_student_as_a_pedagogy_helper, daily_professional_requirement_of_the_pedagogy_helper, preparing_the_student_to_write_each_breasoning, pedagogy_helper__write_on_breasoning___politics, pedagogy_helper__write_on_breasoning___philosophy, pedagogy_helper__write_on_breasoning___computer_science, unification_to_become_pedagogy_helper, practicum, breason_out_arguments_twice_when_in_large_class, details, breasonings, rebreasoning, breathsoning, rebreathsoning, room, part_of_room, direction, time_to_prepare, time_to_do, time_to_finish, god_algorithm, professor_algorithm, marking_scheme__humanities, marking_scheme__creative_arts_and_science, gods_infallibility_from_being_critiqued, pedagogy, meditation, medicine, computational_english, business, theology, popology, societology, music, theatre_studies, time_travel,politics,sales, professor, time_travel_in_place_now, berocca,utterances_to_arems,%%receptor_for_number_of_la_utterances_by_meditators,%%transmitter_for_number_of_arems_to_meditators,%%transmitted_number_of_arems_to_meditators,%%qi_gong_receptor_for_muscle_aches_and_pains,%%qi_gong_transmitter_for_prevention_muscle_aches_and_pains,%%transmitted_qi_gong_prevention_muscle_aches_and_pains,%%qi_gong_receptor_for_medicine,%%qi_gong_transmitter_for_prevention_medicine,%%transmitted_qi_gong_prevention_medicine,%%ayur_veda_receptor_for_medicine,%%ayur_veda_transmitter_for_prevention_medicine,%%transmitted_ayur_veda_prevention_medicine,%%receptor_for_breasonings,%%transmitter_for_breasonings,%%transmitted_breasonings,%%receptor_for_sales,%%transmitter_for_sales,%%transmitted_sales,dott_equals_250_breasonings_time_travel_with_10_algorithm_and_b_and_breasonings_text_describing_from_where_and_when_to_time_place_with_separate_radio_buttons_to_describe_breasonings_and_travel_stop_time_travel_safety_stop_time_travel_see_when_watched_stop_time_travel_no_depression_stop_time_travel_no_hole_in_my_character_at_the_start_stop_time_travel_hone_in_to_where_want_to_go_not_go_off_it_stop_time_travel_lead_comfortably__around_me_during_travel_for_no_anything_like_radiation_sickness_stop_time_travel_prevent_sickness_from_travelling_with_me_stop_time_travel_others_helped_to_find_my_time_travel_delightful__receptor_for_dott,transmitter_for_dott,transmitted_dott,berocca,%%receptor_for_need_of_berocca,%%transmitter_for_need_of_berocca,%%berocca_transmittedi_love_the_robot_because_i_know_that_it_loves_me,the_craft,cosmology,famousness_each_second,give_bots_as,%%,%%politics_give_as_when_departments_come_upviagra_transmitter_if_necessary,cast_with_it_over_answers,sin_stopped,port_thoughts,b_to_bots_misbehaving, bots_help,defend_mind_reading, defend_time_travel, defend_bots,talk_to_copy_of_universe,listen_to_copy_of_universe,see_copy_of_universe,appear_in_copy_of_universe,give_people_who_i_see_5_as_over_5_days,music_etc_number_one_education_help,unfolding_of_bots_life,%%**/sales_point_a_meditation_short_course,dot_on_sales_point_a_meditation_short_course,sales_point_b_meditation_short_course,dot_on_sales_point_b_meditation_short_course,sales_point_bb_meditation_short_course,dot_on_sales_point_bb_meditation_short_course,sales_point_a_pedagogy_short_course,dot_on_sales_point_a_pedagogy_short_course,sales_point_b_pedagogy_short_course,dot_on_sales_point_b_pedagogy_short_course,sales_point_bb_pedagogy_short_course,dot_on_sales_point_bb_pedagogy_short_course,sales_point_a_medicine_short_course,dot_on_sales_point_a_medicine_short_course,sales_point_b_medicine_short_course,dot_on_sales_point_b_medicine_short_course,sales_point_bb_medicine_short_course,dot_on_sales_point_bb_medicine_short_course,sales_point_a_politics_short_course,dot_on_sales_point_a_politics_short_course,sales_point_b_politics_short_course,dot_on_sales_point_b_politics_short_course,sales_point_bb_politics_short_course,dot_on_sales_point_bb_politics_short_course,sales_point_a_mindfulness_short_course,dot_on_sales_point_a_mindfulness_short_course,sales_point_b_mindfulness_short_course,dot_on_sales_point_b_mindfulness_short_course,sales_point_bb_mindfulness_short_course,dot_on_sales_point_bb_mindfulness_short_course,sales_point_a_economics_short_course,dot_on_sales_point_a_economics_short_course,sales_point_b_economics_short_course,dot_on_sales_point_b_economics_short_course,sales_point_bb_economics_short_course,dot_on_sales_point_bb_economics_short_course,sales_point_a_computer_science_short_course,dot_on_sales_point_a_computer_science_short_course,sales_point_b_computer_science_short_course,dot_on_sales_point_b_computer_science_short_course,sales_point_bb_computer_science_short_course,dot_on_sales_point_bb_computer_science_short_course,sales_point_a_computational_english_short_course,dot_on_sales_point_a_computational_english_short_course,sales_point_b_computational_english_short_course,dot_on_sales_point_b_computational_english_short_course,sales_point_bb_computational_english_short_course,dot_on_sales_point_bb_computational_english_short_course,three_plus_three_seconds_eye_direction1,three_plus_three_seconds_eye_direction2,three_plus_three_seconds_eye_direction3,three_plus_three_seconds_eye_direction4,three_plus_three_seconds_eye_direction5,three_plus_three_seconds_eye_direction6,three_plus_three_seconds_eye_direction7,three_plus_three_seconds_eye_direction8,lactobacillus_salivarius_massaged_into_teeth_and_gums_and_swallowed,mucous_in_intestines_blocking_lactobacillus_salivarius_dissolved,no_fluoride],Immortality=[immortality_stasis_field,big_idea_canceller,bot_appears_to_age_normally,bot_dies_at_80,no_effect_of_eating_food_food_transported_directly_stomach,no_other_effects_on_body,no_early_death_from_tt,mother_will_be_alive_to_cook_and_care_for_me,friends_will_be_immortal,no_natural_disasters_in_simulation,partner_s_family_immortal,really_different_looking_bot_in_simulation,my_family_will_be_immortal,a_for_reishi_mushroom,b_for_reishi_mushroom,b_to_b_for_reishi_mushroom,a_for_goji,b_for_goji,b_to_b_for_goji,a_for_ginseng,b_for_ginseng,b_to_b_for_ginseng,a_for_he_shou_wu,b_for_he_shou_wu,b_to_b_for_he_shou_wu,a_for_gotu_kola,b_for_gotu_kola,b_to_b_for_gotu_kola,a_for_schisandra,b_for_schisandra,b_to_b_for_schisandra,a_for_love_head_of_state,b_for_love_head_of_state,b_to_b_for_love_head_of_state,a_for_thank_who_helped_me_with_immortality_medicine_body_replacement_and_anti_ageing,b_for_thank_who_helped_me_with_immortality_medicine_body_replacement_and_anti_ageing,b_to_b_for_thank_who_helped_me_with_immortality_medicine_body_replacement_and_anti_ageing,a_for_thank_head_of_state_for_reishi_mushroom,b_for_thank_head_of_state_for_reishi_mushroom,b_to_b_for_thank_head_of_state_for_reishi_mushroom,a_for_thank_head_of_state_for_goji,b_for_thank_head_of_state_for_goji,b_to_b_for_thank_head_of_state_for_goji,a_for_thank_head_of_state_for_ginseng,b_for_thank_head_of_state_for_ginseng,b_to_b_for_thank_head_of_state_for_ginseng,a_for_thank_head_of_state_for_he_shou_wu,b_for_thank_head_of_state_for_he_shou_wu,b_to_b_for_thank_head_of_state_for_he_shou_wu,a_for_thank_head_of_state_for_gotu_kola,b_for_thank_head_of_state_for_gotu_kola,b_to_b_for_thank_head_of_state_for_gotu_kola,a_for_thank_head_of_state_for_schisandra,b_for_thank_head_of_state_for_schisandra,b_to_b_for_thank_head_of_state_for_schisandra,a_for_immortality,b_for_immortality,b_to_b_for_immortality,a_for_body_replacement,b_for_body_replacement,b_to_b_for_body_replacement,a_for_other_medicines_for_the_body,b_for_other_medicines_for_the_body,b_to_b_for_other_medicines_for_the_body,a_for_ginkgo_biloba,b_for_ginkgo_biloba,b_to_b_for_ginkgo_biloba,a_for_practicum_for_others_in_immortality_etc,b_for_practicum_for_others_in_immortality_etc,b_to_b_for_practicum_for_others_in_immortality_etc,a_for_the_other_as,b_for_the_other_as,b_to_b_for_the_other_as,a_for_thank_head_of_state,b_for_thank_head_of_state,b_to_b_for_thank_head_of_state,a_for_immortality_medicine_for_memory,b_for_immortality_medicine_for_memory,b_to_b_for_immortality_medicine_for_memory,a_for_body_replacement_for_memory,b_for_body_replacement_for_memory,b_to_b_for_body_replacement_for_memory,a_for_anti_ageing_for_memory,b_for_anti_ageing_for_memory,b_to_b_for_anti_ageing_for_memory,a_for_immortality_medicine_for_thinking,b_for_immortality_medicine_for_thinking,b_to_b_for_immortality_medicine_for_thinking,a_for_body_replacement_for_thinking,b_for_body_replacement_for_thinking,b_to_b_for_body_replacement_for_thinking,a_for_anti_ageing_for_thinking,b_for_anti_ageing_for_thinking,b_to_b_for_anti_ageing_for_thinking,a_for_immortality_medicine_for_stopping_dementia,b_for_immortality_medicine_for_stopping_dementia,b_to_b_for_immortality_medicine_for_stopping_dementia,a_for_body_replacement_for_stopping_dementia,b_for_body_replacement_for_stopping_dementia,b_to_b_for_body_replacement_for_stopping_dementia,a_for_anti_ageing_for_stopping_dementia,b_for_anti_ageing_for_stopping_dementia,b_to_b_for_anti_ageing_for_stopping_dementia,a_for_immortality_medicine_for_seeing_clearly,b_for_immortality_medicine_for_seeing_clearly,b_to_b_for_immortality_medicine_for_seeing_clearly,a_for_body_replacement_for_seeing_clearly,b_for_body_replacement_for_seeing_clearly,b_to_b_for_body_replacement_for_seeing_clearly,a_for_anti_ageing_for_seeing_clearly,b_for_anti_ageing_for_seeing_clearly,b_to_b_for_anti_ageing_for_seeing_clearly,a_for_immortality_medicine_for_muscle_relaxation,b_for_immortality_medicine_for_muscle_relaxation,b_to_b_for_immortality_medicine_for_muscle_relaxation,a_for_body_replacement_for_muscle_relaxation,b_for_body_replacement_for_muscle_relaxation,b_to_b_for_body_replacement_for_muscle_relaxation,a_for_anti_ageing_for_muscle_relaxation,b_for_anti_ageing_for_muscle_relaxation,b_to_b_for_anti_ageing_for_muscle_relaxation,a_for_immortality_medicine_for_circulatory_system__cardiovascular_system,b_for_immortality_medicine_for_circulatory_system__cardiovascular_system,b_to_b_for_immortality_medicine_for_circulatory_system__cardiovascular_system,a_for_body_replacement_for_circulatory_system__cardiovascular_system,b_for_body_replacement_for_circulatory_system__cardiovascular_system,b_to_b_for_body_replacement_for_circulatory_system__cardiovascular_system,a_for_anti_ageing_for_circulatory_system__cardiovascular_system,b_for_anti_ageing_for_circulatory_system__cardiovascular_system,b_to_b_for_anti_ageing_for_circulatory_system__cardiovascular_system,a_for_immortality_medicine_for_digestive_system_and_excretory_system,b_for_immortality_medicine_for_digestive_system_and_excretory_system,b_to_b_for_immortality_medicine_for_digestive_system_and_excretory_system,a_for_body_replacement_for_digestive_system_and_excretory_system,b_for_body_replacement_for_digestive_system_and_excretory_system,b_to_b_for_body_replacement_for_digestive_system_and_excretory_system,a_for_anti_ageing_for_digestive_system_and_excretory_system,b_for_anti_ageing_for_digestive_system_and_excretory_system,b_to_b_for_anti_ageing_for_digestive_system_and_excretory_system,a_for_immortality_medicine_for_endocrine_system,b_for_immortality_medicine_for_endocrine_system,b_to_b_for_immortality_medicine_for_endocrine_system,a_for_body_replacement_for_endocrine_system,b_for_body_replacement_for_endocrine_system,b_to_b_for_body_replacement_for_endocrine_system,a_for_anti_ageing_for_endocrine_system,b_for_anti_ageing_for_endocrine_system,b_to_b_for_anti_ageing_for_endocrine_system,a_for_immortality_medicine_for_integumentary_system__exocrine_system,b_for_immortality_medicine_for_integumentary_system__exocrine_system,b_to_b_for_immortality_medicine_for_integumentary_system__exocrine_system,a_for_body_replacement_for_integumentary_system__exocrine_system,b_for_body_replacement_for_integumentary_system__exocrine_system,b_to_b_for_body_replacement_for_integumentary_system__exocrine_system,a_for_anti_ageing_for_integumentary_system__exocrine_system,b_for_anti_ageing_for_integumentary_system__exocrine_system,b_to_b_for_anti_ageing_for_integumentary_system__exocrine_system,a_for_immortality_medicine_for_immune_system_and_lymphatic_system,b_for_immortality_medicine_for_immune_system_and_lymphatic_system,b_to_b_for_immortality_medicine_for_immune_system_and_lymphatic_system,a_for_body_replacement_for_immune_system_and_lymphatic_system,b_for_body_replacement_for_immune_system_and_lymphatic_system,b_to_b_for_body_replacement_for_immune_system_and_lymphatic_system,a_for_anti_ageing_for_immune_system_and_lymphatic_system,b_for_anti_ageing_for_immune_system_and_lymphatic_system,b_to_b_for_anti_ageing_for_immune_system_and_lymphatic_system,a_for_immortality_medicine_for_muscular_system,b_for_immortality_medicine_for_muscular_system,b_to_b_for_immortality_medicine_for_muscular_system,a_for_body_replacement_for_muscular_system,b_for_body_replacement_for_muscular_system,b_to_b_for_body_replacement_for_muscular_system,a_for_anti_ageing_for_muscular_system,b_for_anti_ageing_for_muscular_system,b_to_b_for_anti_ageing_for_muscular_system,a_for_immortality_medicine_for_nervous_system,b_for_immortality_medicine_for_nervous_system,b_to_b_for_immortality_medicine_for_nervous_system,a_for_body_replacement_for_nervous_system,b_for_body_replacement_for_nervous_system,b_to_b_for_body_replacement_for_nervous_system,a_for_anti_ageing_for_nervous_system,b_for_anti_ageing_for_nervous_system,b_to_b_for_anti_ageing_for_nervous_system,a_for_immortality_medicine_for_renal_system_and_urinary_system,b_for_immortality_medicine_for_renal_system_and_urinary_system,b_to_b_for_immortality_medicine_for_renal_system_and_urinary_system,a_for_body_replacement_for_renal_system_and_urinary_system,b_for_body_replacement_for_renal_system_and_urinary_system,b_to_b_for_body_replacement_for_renal_system_and_urinary_system,a_for_anti_ageing_for_renal_system_and_urinary_system,b_for_anti_ageing_for_renal_system_and_urinary_system,b_to_b_for_anti_ageing_for_renal_system_and_urinary_system,a_for_immortality_medicine_for_reproductive_system,b_for_immortality_medicine_for_reproductive_system,b_to_b_for_immortality_medicine_for_reproductive_system,a_for_body_replacement_for_reproductive_system,b_for_body_replacement_for_reproductive_system,b_to_b_for_body_replacement_for_reproductive_system,a_for_anti_ageing_for_reproductive_system,b_for_anti_ageing_for_reproductive_system,b_to_b_for_anti_ageing_for_reproductive_system,a_for_immortality_medicine_for_respiratory_system,b_for_immortality_medicine_for_respiratory_system,b_to_b_for_immortality_medicine_for_respiratory_system,a_for_body_replacement_for_respiratory_system,b_for_body_replacement_for_respiratory_system,b_to_b_for_body_replacement_for_respiratory_system,a_for_anti_ageing_for_respiratory_system,b_for_anti_ageing_for_respiratory_system,b_to_b_for_anti_ageing_for_respiratory_system,a_for_immortality_medicine_for_skeletal_system,b_for_immortality_medicine_for_skeletal_system,b_to_b_for_immortality_medicine_for_skeletal_system,a_for_body_replacement_for_skeletal_system,b_for_body_replacement_for_skeletal_system,b_to_b_for_body_replacement_for_skeletal_system,a_for_anti_ageing_for_skeletal_system,b_for_anti_ageing_for_skeletal_system,b_to_b_for_anti_ageing_for_skeletal_system,a_for_immortality_medicine_for_antidepressant,b_for_immortality_medicine_for_antidepressant,b_to_b_for_immortality_medicine_for_antidepressant,a_for_body_replacement_for_antidepressant,b_for_body_replacement_for_antidepressant,b_to_b_for_body_replacement_for_antidepressant,a_for_anti_ageing_for_antidepressant,b_for_anti_ageing_for_antidepressant,b_to_b_for_anti_ageing_for_antidepressant,a_for_immortality_medicine_for_antipsychotic,b_for_immortality_medicine_for_antipsychotic,b_to_b_for_immortality_medicine_for_antipsychotic,a_for_body_replacement_for_antipsychotic,b_for_body_replacement_for_antipsychotic,b_to_b_for_body_replacement_for_antipsychotic,a_for_anti_ageing_for_antipsychotic,b_for_anti_ageing_for_antipsychotic,b_to_b_for_anti_ageing_for_antipsychotic,a_1_for_immortality_keeping_same_appearance_to_home,a_2_for_immortality_keeping_same_appearance_to_home,a_3_for_immortality_keeping_same_appearance_to_home,a_4_for_immortality_keeping_same_appearance_to_home,school_teacher_a_1,school_teacher_a_2,school_teacher_a_3,school_teacher_a_4,medicine_a_1,medicine_a_2,medicine_a_3,medicine_a_4,bots_a_1,bots_a_2,bots_a_3,bots_a_4,sales_a_1,sales_a_2,sales_a_3,sales_a_4,if_a_teacher_then_seen_as_leading_a_country,control_not_to_die,control_not_to_have_s_contact,control_not_to_leave_simulation,control_whether_appear_to_people,can_t_be_involuntarily_time_travelled,ai_and_ped_thoughts,death_preventer,announce_to_do_a_to_prevent_death_if_necessary,fake_memory_identifier,fake_memory_canceller].meditation2(Utterances1,Utterances2,Immortality) :-%%File="I love you, I love you, I love you.  Arem.",%% dailyregimen,noheadachesapp,nobodyproblemsapp,aremDotsandUtterances is 4*108, %% With radio button for graciously give or blame and graciously give or blametexttobr2_1(DotsandUtterances), %% aremtexttobr2_1(DotsandUtterances), %% luciantexttobr2_1(DotsandUtterances), %% greentexttobr2_1(DotsandUtterances), %% yogatexttobr2_1(DotsandUtterances), %% daotexttobr2_1(DotsandUtterances), %% arem time travel leave loc 1texttobr2_1(DotsandUtterances), %% friendliness time travel leave loc 1texttobr2_1(DotsandUtterances), %% arem time travel arrive loc 2texttobr2_1(DotsandUtterances), %% friendliness time travel arrive loc 2texttobr2_1(DotsandUtterances), %% arem time travel leave loc 2texttobr2_1(DotsandUtterances), %% friendliness time travel leave loc 2texttobr2_1(DotsandUtterances), %% arem time travel arrive loc 3texttobr2_1(DotsandUtterances), %% friendliness time travel arrive loc 3texttobr2_1(DotsandUtterances), %% arem time travel leave loc 3texttobr2_1(DotsandUtterances), %% friendliness time travel leave loc 3texttobr2_1(DotsandUtterances), %% arem time travel arrive loc 1texttobr2_1(DotsandUtterances), %% friendliness time travel arrive loc 1%%noheadachesapp,nobodyproblemsapp,arem],%% initiate_utterances(File,Utterances),%% currentDate(Today),%% Today=date(Year,Month,Day),meditators(Meditators1),meditators2(Meditators2),append(Meditators1,Meditators2,Meditators),length(Utterances1,UL1),length(Utterances2,UL2),length(Meditators,ML),%%Length2 is 3*2*32*16*(2*UL1+3*UL2), %% 3 for receiver, transmitter,  transmittedLength2 is 4*3*10*(UL1+UL2), % 3 - A, B, B to B, 10 - simulate uni% 4 - tt settings% 64 to turn 250 into 16k x%% 3 for receiver, transmitter,  transmitted%% 2 radio buttons for ul2%% 32 for 128k br%% 2: 1 for Ayurveda, 1 for TCM%%Length3 is is DL*250*3*250,%texttobr2_1(800), % graciously give person  10*5*50 As for medit, to simulate unitexttobr2_1(Length2),%%Length3 is (1+0+(32*16*5))*ML,%%+(2*2), %% Give the meditators the As with graciously give or blame, radio button for graciously give or blameLength3 is ML,%%+(2*2), %% Give the meditators the As with graciously give or blame, radio button for graciously give or blame%% x: and 2*250 br to turn off more than 80 medit breasonings per day with the rest as recordings for 1 subjects (black and white hen with speckles roosting)%% 32*4 for medicine, meditation in ayur veda, qi gong, memorytexttobr2_1(Length3),findall(_Meditators3,member([_,_,  _,_,_, _,_,_,_,_,_,immortal],Meditators),Meditators4),length(Immortality,J2),Length4 is 3*10*J2, % 3*10 see abovetexttobr2_1(Length4),Length5 is 3*10*((4*4*50*80)/250), % medit, tt, medic frozen age, hq thoughttexttobr2_1(Length5),length(Meditators4,ML4),texttobr2_1(ML4),!.
meditation_chain_letter(S,N,L) :-numbers(S,1,[],Ss),findall((-),member(_,Ss),S1),%random(X),X1 is floor(X*S),S11 is S+2,random(1,S11,X1),meditation_chain_letter1(S,S1,N,X1,0,L).
meditation_reminder :- Ns=[john,betty,sue], Ms=[yes,no], findall(_,(member(N1,Ns),mind_read(M1,Ms), (M1=no->writeln(['*',N1,"Please meditate."]))),_).
meditators2([%%/**% note if following invited to sim when in 5689 with texttobr2_1(*number of new medits).
meeting(N1,X,Y,Simulation1,Meetings1,Meetings2) :- (member([N,[X,Y]],Simulation1)-> append(Meetings1,[[N1,N]],Meetings2); Meetings1=Meetings2).
meetings(N1,X,Y,Simulation1,Meetings1,Meetings2) :- X1 is X-1, X2 is X+1, Y1 is Y-1, Y2 is Y+1, meeting(N1,X1,Y,Simulation1,Meetings1,Meetings3), meeting(N1,X2,Y,Simulation1,Meetings3,Meetings4), meeting(N1,X,Y1,Simulation1,Meetings4,Meetings5), meeting(N1,X,Y2,Simulation1,Meetings5,Meetings2).
melodyharmony(Form1,CPT,Maxlength,Melody,Harmony) :-Partlength is Maxlength div 3,Extra is Maxlength mod 3,Total is Partlength+Extra,_Parts=[Partlength,Partlength,Partlength,Total],(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the song start on?%%trialy2(Notes,R1),%%findbest(R1,R11),R11='A',melodyharmony(Form1,CPT,_Parts2,R11,_R2,[],Melody,[],Harmony).
melodyharmony(Form1,CPT,Maxlength,Melody,Harmony) :-Partlength is Maxlength div 3,Extra is Maxlength mod 3,Total is Partlength+Extra,_Parts=[Partlength,Partlength,Partlength,Total],(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the song start on?trialy2(Notes,R1),findbest(R1,R11),melodyharmony(Form1,CPT,_Parts2,R11,_R2,[],Melody,[],Harmony).
melodyharmony(Form1,CPT,Maxlength,Melody,Harmony) :-Partlength is Maxlength div 3,Extra is Maxlength mod 3,Total is Partlength+Extra,_Parts=[Partlength,Partlength,Partlength,Total],(CPT=1451->findall(A,note0(_,A),_Notes);findall(A,note0(_,A),_Notes2)),%% What note should the song start on?%%trialy2(Notes,R1),%%findbest(R1,R11),R11='A',melodyharmony(Form1,CPT,_Parts2,R11,_R2,[],Melody,[],Harmony).
member(_Vegetarian_meal_day,[m,t,w,th,f,sa,su]).
member2(A,B):-member(B,A).
member_117(L,List) :-term_to_atom(List,A21),string_codes(A21,Args21),string_codes("[]\"',",Codes1),split_on_substring117(Args21,Codes1,[],List2),member(L,List2),string(L),not((L="["->true;(L="]"->true;(L="\""->true;(L="'"->true;(L=","->true;L="v")))))).
memberlp2c1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Function,Arguments2,_Symbol,Body],                string_concat(Algorithm1,"int ",Algorithm1a),        interpretstatementlp2c2a(Function,Algorithm1a,Algorithm3a),        string_concat(Algorithm3a,"(",Algorithm3d),        interpretstatementlp2c2(Arguments2,Algorithm3d,Algorithm3e),        string_concat(Algorithm3e,"){",Algorithm3f),                concat_list([Algorithm3f,""],Algorithm3),interpretbodylp2c(Body,Algorithm3,Algorithm2a),      write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
memberlp2c10([],Algorithm1,Algorithm1) :- !.
memberlp2p1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Function,Arguments2,Symbol1,Body],        symbol_lp2p(Symbol1,Symbol2),        (Symbol1="->"->S="()";S="[]"),        interpretstatementlp2p2a(Function,Algorithm1,Algorithm3a,"[]"),        string_concat(Algorithm3a,"(",Algorithm3d),        interpretstatementlp2p2(Arguments2,Algorithm3d,Algorithm3e,S),        string_concat(Algorithm3e,")",Algorithm3f),                concat_list([Algorithm3f,Symbol2],Algorithm3),interpretbodylp2p(Body,Algorithm3,Algorithm2a),      write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
memberlp2p1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Function],        interpretstatementlp2p2a(Function,Algorithm1,Algorithm3a,"[]"),        %string_concat(Algorithm3a,"(",Algorithm3d),        %interpretstatementlp2p2(Arguments2,Algorithm3d,Algorithm3e),        %string_concat(Algorithm3e,")",Algorithm3f),                %concat_list([Algorithm3f,Symbol],Algorithm3),%interpretbodylp2p(Body,Algorithm3,Algorithm2a),      write_full_stop_if_last_item([],Algorithm3a,Algorithm2),!./*memberlp2p1(Functions2,Algorithm1,Algorithm2) :-trace, Function=[n,use_module],        Functions2=[Symbol,Function,[Arguments2%,"/",Arguments3        ]],        symbol_lp2p(Symbol),        interpretstatementlp2p2a(Function,"",Algorithm3a,"[]"),        %string_concat(Algorithm3a,"(",Algorithm3d),        %interpretstatementlp2p2(Arguments2,"",Algorithm3e),        %interpretstatementlp2p2(Arguments3,"",Algorithm3f),        %string_concat(Algorithm3e,")",Algorithm3f),                concat_list([Algorithm1,Symbol,Algorithm3a,"( ",Arguments2,%"/",Arguments3,                ")"],Algorithm3),%interpretbodylp2p(Body,Algorithm3,Algorithm2a),      write_full_stop_if_last_item([],Algorithm3,Algorithm2),!.
memberlp2p1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Symbol1,Function,Arguments2],        symbol_lp2p(Symbol1,Symbol2),        interpretstatementlp2p2a(Function,"",Algorithm3a,"[]"),        %string_concat(Algorithm3a,"(",Algorithm3d),        interpretstatementlp2p2(Arguments2,"",Algorithm3e,"()"),        %interpretstatementlp2p2(Arguments3,"",Algorithm3f),        %string_concat(Algorithm3e,")",Algorithm3f),                concat_list([Algorithm1,Symbol2,Algorithm3a,"(",Algorithm3e,")"],Algorithm3),%interpretbodylp2p(Body,Algorithm3,Algorithm2a),      write_full_stop_if_last_item([],Algorithm3,Algorithm2),!.
merge3(A,B,Q) :- retractall(merge31(_)), assertz(merge31(A)), findall1([[Y],Z],(member(Y,B),Y=[_,[N|_]|_],Y1=[_,[N|_]|_],findall1(Y1,(merge31(A1),member(Y1,A1),delete(A1,Y1,A2),retractall(merge31(_)), assertz(merge31(A2))),Z)),Q1), foldr(append,Q1,Q2), foldr(append,Q2,Q3), merge31(R),foldr(append,[Q3,R],Q),!.
merge_back_until_forward_fork(N0,N4,_N1,Options8,Options9,Options10) :-(findall([N41,_,N6],(member([N41,A10,N4],Options8),member([N41,_,N6],Options8),not(N6=N4)),[_])->(member([N41,A10,N4],Options8),%%trace,delete(Options8,[N41,A10,N4],Options51),append(Options51,[[N41,A10,N4]],Options7),merge_back_until_forward_fork(N0,N41,N4,Options7,Options9,Options10));%%Options9=Options10).
merge_back_until_forward_fork2([],Options7,Options7,N41,N41) :- !.
merge_branches([],[],[]) :- !.
merge_files1a(A,B,C) :- split_into_lp_files(A,AT2331), split_into_lp_files(B,AT1331), merge_files2b(AT2331,AT1331,[],AT333), foldr(append,AT333,C),!.
merge_files2b([],B,C,D) :- append(C,B,D),!.
merge_lists1b([],Options,Options) :- !.
merge_lists1b([],[],Options,Options) :- !.
merge_lists1c(_,[],Options,Options) :- !.
merge_lists_a3(A6,Options1,%Options2,Options3) :-A6=[[N1,A,N2]|A8],delete(Options1,[N1,A,_],Options1a),%%(member([N1,A,N2],Options2)->(trace,Options2=Options2a,A9=A6);(append(Options1a,[[N1,A,N2]],Options1aa)%%,A9=A8),%),merge_lists_a4(N2,A8,Options1aa,[],%Options2a,Options3).
messager :- display_messages(Messages), nl, writeln("Enter (0 - Exit, 1 - New message, 2 - Edit a message, 3 - Delete a message):"),read_string(S),(number_string(N,S)->go_messager_option(N,Messages);messager),!.
meta2mid_r :-retractall(ask_for_rhythm(_)),assertz(ask_for_rhythm(true)),meta2mid1.
method("book","hard-copy").
midpoint(S,MP) :-%%not(S=[]),length(S,L),A is mod(L,2),(A is 0->(M1 is L/2, M2 is M1+1,N1 is M1-1,N2 is M2-1,length(N11,N1),length(N21,N2),append(N11,[N12|_Rest1],S),append(N21,[N22|_Rest2],S),MP is (N12+N22)/2);(L2 is L+1, M1 is L2/2, N1 is M1-1,length(N11,N1),append(N11,[MP|_Rest],S))).
midpoint(S,MP) :-%%not(S=[]),length(S,L),A is mod(L,2),(A is 0->(M1 is L/2, M2 is M1+1,N1 is M1-1,N2 is M2-1,length(N11,N1),length(N21,N2),append(N11,[N12|_Rest1],S),append(N21,[N22|_Rest2],S),MP is (N12+N22)/2);(L2 is L+1, M1 is L2/2, N1 is M1-1,length(N11,N1),append(N11,[MP|_Rest],S))).halves(S,H1,H2) :-length(S,L),A is mod(L,2),(A is 0->(M1 is L/2,length(H1,M1),append(H1,H2,S));(L2 is L-1,M1 is L2/2,length(H1,M1),append(H1,[_|H2],S))).
mind_read2(N1,Tree1,Item1) :-findall(Option,member([N1,Option,N2],Tree1),Options),findall([N1,Option,N2],member([N1,Option,N2],Tree1),Options2),%subtract(Tree1,Options,Tree2),mind_read10(Item2,Options),mind_read3(N1,Options2,Options,Tree1,Item2,Item1).
mind_read3(Progress1,Progress2,[]%,_%,%Tree1,%Item2,Item1) :-%(fail,member([Item2,_,[]],Tree1)->true;%[Item2,_,[]]=Tree1),append(Progress1,[%Item2],Progress2),!.
mind_read_a(A,B) :-mind_read(A,B),!.
mind_read_b(Item,List0) :-findall(D1,(member(D2,List0),term_to_atom(D2,D3),string_atom(D1,D3)),List1),%trace,%List1=A,findall(B,(member(C,List1),string_concat(C," 01",B)),List2),findall(B,(member(C,List2),(number(C)->number_string(C,B)->true;((atom(C)->atom_string(C,B))->true;(string(C),C=B)))),List3),%trace,minimise_strings1(List3,List4,Map),%writeln1(minimise_strings1(List3,List4,Map)),% findall(B,(member(C,List13),string_concat(C," 01",B)),List),%notrace,%trace,%writeln1(make_mind_reading_tree4(List,Tree)),make_mind_reading_tree4(List4,Tree),%writeln1(make_mind_reading_tree4-here1(List,Tree)),%writeln1(mind_read2(1,Tree,Item1)),mind_read2(1,Tree,Item1),writeln1(mind_read2(1,Tree,Item1)),writeln(""),%trace,%string_concat(Item3," 01",Item1),find_mapped_item(Item1,Item2,Map),term_to_atom(Item,Item2).
mind_read_instruments(Instrument,_) :-instruments_a(Instruments),%notrace,%writeln1(mind_read2(1,Instruments,Item1)),mind_read2(1,Instruments,Item1),%->trace;trace),%writeln1(mind_read2-here3(1,Instruments,Item1)),%trace,string_concat(Item2," 01",Item1),term_to_atom(Instrument,Item2).
mind_read_mrs2a(Item,[Item],List2) :- !.
mindreadtest(Sec) :-%% 250 br for characters to be br out with 10 br each from person to me - do when initial 250 br test done and doing 10 br test%%comment(fiftyastest),%%random(X),X1 is 10*X, X2 is floor(X1), (X2=<2 -> (%%texttobr,write1(['true test']), %%); %% use breasonings breasoned out by computer for not by me, for job medicine for "me", at last time point%%true), %% leave last time point blank%%**texttobr2(640);true),%% make an A to detect reaction to gracious giving or blame of in followingget_time(TimeStamp1),%%phrase_from_file(string(_String), 'file.txt'),texttobr2(2), %% 100 As for answer (must be br before this on same day)%% is gracious giving or blameget_time(TimeStamp2),%%comment(turnoffas),   Sec is TimeStamp2 - TimeStamp1.
mindreadtest(Sec) :-%% 250 br for characters to be br out with 10 br each from person to me - do when initial 250 br test done and doing 10 br test%%comment(fiftyastest),%%random(X),X1 is 10*X, X2 is floor(X1), (X2=<2 -> (%%texttobr,writeln(['true test']), %%); %% use breasonings breasoned out by computer for not by me, for job medicine for "me", at last time point%%true), %% leave last time point blank%%**texttobr2(640);true),%% make an A to detect reaction to gracious giving or blame of in followingget_time(TimeStamp1),%%phrase_from_file(string(_String), 'file.txt'),%%**texttobr2(2), %% 100 As for answer (must be br before this on same day)%% is gracious giving or blameget_time(TimeStamp2),%%comment(turnoffas),   Sec is TimeStamp2 - TimeStamp1.
mindreadtest(Sec) :-%% 250 br for characters to be br out with 10 br each from person to me - do when initial 250 br test done and doing 10 br test%%comment(fiftyastest),%%random(X),X1 is 10*X, X2 is floor(X1), (X2=<2 -> (%%texttobr,writeln(['true test']), %%); %% use breasonings breasoned out by computer for not by me, for job medicine for "me", at last time point%%true), %% leave last time point blank%%**texttobr2(640);true),%% make an A to detect reaction to gracious giving or blame of in followingget_time(TimeStamp1),%%phrase_from_file(string(_String), 'file.txt'),texttobr2(2), %% 100 As for answer (must be br before this on same day)%% is gracious giving or blameget_time(TimeStamp2),%%comment(turnoffas),   Sec is TimeStamp2 - TimeStamp1.
mindreadtest(Sec) :-%% 250 br for characters to be br out with 10 br each from person to me - do when initial 250 br test done and doing 10 br test%%comment(fiftyastest),%%random(X),X1 is 10*X, X2 is floor(X1), (X2=<2 -> (%%texttobr,writeln(['true test']), %%); %% use breasonings breasoned out by computer for not by me, for job medicine for "me", at last time point%%true), %% leave last time point blank%%**texttobr2(640);true),%% make an A to detect reaction to gracious giving or blame of in followingget_time(TimeStamp1),%%phrase_from_file(string(_String), 'file.txt'),texttobr2(2), %% 100 As for answer (must be br before this on same day)%% is gracious giving or blameget_time(TimeStamp2),%%comment(turnoffas),   Sec is TimeStamp2 - TimeStamp1.concat_list2A(A1,B):-A1=[A|List],concat_list2A(A,List,B),!.
minimise_alg1(Algorithm1,Algorithm2) :- findall([Algorithm3,Var_table],(member(Algorithm0,Algorithm1),replace_vars1(Algorithm0,Algorithm3,1,_,[],Var_table)),Algorithm4), %findall(Algorithm,member([Algorithm,_],Algorithm4),Algorithm4a), delete_duplicate_clauses(Algorithm4,[],Algorithm5),length(Algorithm5,L), numbers(L,1,[],Ns), findall(Algorithm7,(member(N,Ns), %trace, %get_item_n(Algorithm5,N,Algorithm6), get_item_n(Algorithm5,N,[Algorithm6,Var_table2]),findall([B,A],member([A,B],Var_table2),Var_table3),replace_vars1(Algorithm6,Algorithm7,1,_,Var_table3,_)),Algorithm8),  (Algorithm1=Algorithm8->Algorithm8=Algorithm2; minimise_alg1(Algorithm8,Algorithm2)).
minimise_dfa(A,B) :- minimise_dfa1(A,[],B).
minimise_dfa([[a,b1],[b1,b2],[b2,b3],[b3,c],[a,d1],[d1,d2],[d2,c],[a,e1],[e1,e2],[e2,c]],B).
minimise_dfa([[a,b1],[b1,b2],[b2,c],[a,d1],[d1,d2],[d2,c],[a,e1],[e1,e2],[e2,c]],B).
minimise_dfa([],DFA,DFA) :- !.
minimise_dfa1([],DFA,DFA) :- !.minimise_dfa1(Transitions,DFA1,DFA2) :- %Transitions=[T2|T3], %append(DFA1,[T2],DFA4), DFA1=DFA4, minimise_dfa(Transitions,%T2,T3, DFA4,DFA3), (DFA4=DFA3->DFA3=DFA2; minimise_dfa1(DFA3,DFA3,DFA2)).
minimise_dfa2(T2,T3,DFA1,DFA2) :- T2=[From,To], ((minimise_dfa3(From,To,T3,[],DFA3), %append(DFA3,[T2],DFA2), subtract(T3,DFA3,DFA4), append([T2],DFA4,DFA2) )->true; DFA1=DFA2),!.
minimise_strings1([List0],[List0],[[List0,List0]]) :- string(List0),!.
minimise_strings1([List0],[List0],[[List0,List0]]) :- string(List0),!.minimise_strings1(List0,A,Map) :-sort(List0,List1),findall(L,(member(Item,List1),string_length(Item,L)),Ls1),sort(Ls1,Ls2),reverse(Ls2,Ls3),Ls3=[Maximum_length|_],numbers(Maximum_length,1,[],Numbers1),minimise_strings11(Numbers1,_Numbers2,List1,List2,First_part),string_length(First_part,First_part_l),Maximum_length2 is Maximum_length-First_part_l+1,numbers(Maximum_length2,1,[],Numbers3),minimise_strings2(Numbers3,List2,First_part,A,Map).
minimise_strings11(Numbers,Numbers,[],[],_) :- !.
minus_cos_theta(Theta,Minus_cos_theta) :- cos_theta(Theta,Cos_theta), Minus_cos_theta is -1*Cos_theta.
mod_div_ff(Op,Spec,N11):-numbers(20,1,[],Ns),findall(N0,findall([A,B,N1],(member([A,B],Spec),findall(N,(member(N,Ns),(Op=mod->B is mod(A,N);B is div(A,N))),N1)),N0),N2),findall(N3,(member(N00,N2),member([_,_,N3],N00)),N4),sort(N4,N5),%N2=[[_,_,N3]|_],findall(N8,(member(N6,N5),member(N7,N2),findall(N6,member([_,_,N6],N7),N8)%,writeln(N8)%length(N7,L),length(N8,L),N8=[N9|_]),N101),maplist(append,[N101],[N10]),%writeln(N101),intersection_all(N10,N11).
modus_ponens(A,A-B,B). % Computational English is like a Calculator 3 of 4% 21.   I prepared to perform computations on the ontology, step by step.  I did this by writing an ontology, in other words, the data structure, containing the arguments in order.  First, I wrote words, the arguments down in the ontology.  Second, I wrote the grammar, the order of the arguments under the words, the arguments.  Third, I wrote the words, the arguments, in the order of action in the ontology.  In this way, I prepared to perform computations on the ontology, step by step by writing an ontology, in other words, the data structure, containing the arguments in order.
move1(_Win_X,Win_Y,_X_min,_X_max,Y_min,_Y_max,up,X,Y,X,Y2) :- Y1 is Y-1, (Y1 is Y_min+3 ->Y2=Y;Y2=Y1).
move1(_X_min,_X_max,Y_min,_Y_max,up,X,Y,X,Y2) :- Y1 is Y-1, (Y1 is Y_min-1->Y2=Y;Y2=Y1).
mrs2a_binary5 :-meditators(M1),meditators2(M2),append(M1,M2,M3),%working_directory1(WD,WD),%phrase_from_file_s(string(BrDict0), "../../GitHub-private2/Text-to-Breasonings/brdict1.txt"),%splitfurther(BrDict0,BrDict01),%sort(BrDict01,BrDict0121),%retractall(brdict(_)),%assertz(brdict(BrDict012)),%working_directory1(_,WD),%findall([A,Type],(member(A1,BrDict0121),once(get_type(A1,Type)), (Type=list->A1=A;string_strings(A1,A))),List2),%writeln1(List2),%findall(B,member([B,_],List2),List3),%decision_tree(List3,BrDict012),%writeln1(BrDict012),%trace,%mr2sa_dt(BrDict012),%BrDict012=[["", 1, [["box", 1, []]]]],findall(_,(member(M4,M3),writeln([doing,M4]),find_until_passes((retractall(vars_table_s2a(_)),                                               assertz(vars_table_s2a([])), (catch(algs(Algs),_,false)->findall(_,(member(Alg,Algs),retractall(algs(Alg))),_);true),retractall(algs(_)),assertz(algs([])),%S_or_L=l,%mind_read(S_or_L,[s,l]),(%false%S_or_L=s->(string_strings("abcdefghijklmnopqrstuvwxyz",L1),mind_read(W1,L1),mind_read(W2,L1),L=[W1,W2]);%find_until_passes((%generate_sentence([A12],Sentence),%[_,_,W1,W2|_]=Sentence)),(%trace,mind_read_mrs2a(W1,BrDict012,List2),mind_read_mrs2a(W2,BrDict012,List2),L=[W1,W2])),numbers(5,1,[],Ns),findall(W3,%find_until_passes((member(_,Ns),mind_read(W3,L))),Ws),%trace,(S_or_L=s->(foldr(string_concat,Ws,Ws1),CBM=on);(%term_to_atom(Ws=Ws1),CBM=off)),S=[[[input,[['A',Ws1]]],[output,[['B',success]]]]],%S=[[[input,[['A',Ws1]]]],[output,[['B',[success]]]]],spec_to_algorithm(algorithm,S,CBM,Alg1),%trace,texttobr2(u,u,Alg1,u,[auto,on])))),_),!.
multiply(A,B,C) :- C is A*B. subtract(A,B,C) :- C is A-B. head(A,B) :- A=[B|_].
mutually_exclusive([],_L):-!.
n(i).
n_breasonings(N) :- N is 80.
n_breasonings_every_hours(N) :- N is 24.
n_level_argument1(0,Args,Args) :- !.
name1(X1) --> name2(X1).
name10(XXs) --> [X], {char_code(Ch1,X),(char_type(X,alnum)->true;(Ch1='_'->true;Ch1='!')),atom_string(CA,Ch1),downcase_atom(CA,CA2)},name10(Xs), {atom_concat(CA2,Xs,XXs)}, !. name10(XXs) --> [X], {char_code(Ch1,X),(char_type(X,alnum)->true;(Ch1='_'->true;Ch1='!')),atom_string(CA,Ch1),downcase_atom(CA,XXs)}, !. %%name10('') --> [].
name10(XXs) --> [X], {char_code(Ch1,X),(char_type(X,alnum)->true;(Ch1='_'->true;(Ch1='!'->true;Ch1='.'))),atom_string(CA,Ch1),downcase_atom(CA,CA2)},name10(Xs), {atom_concat(CA2,Xs,XXs)}, !. name10(XXs) --> [X], {char_code(Ch1,X),(char_type(X,alnum)->true;(Ch1='_'->true;Ch1='!')),atom_string(CA,Ch1),downcase_atom(CA,XXs)}, !. %%name10('') --> [].
name11(X1) --> %name101(X11),%name1(X1) --> %[X], %{%trace, %S="", %string_codes(S,[X])},  name101(X11a),{atom_concat('',X11a,X11)},{(string_atom(X12,X11),number_string(X1,X12)->true;((%contains_string(X11)->string_atom2(X1,X11)%;X11=X1))))}.%%., X2->X1 {atom_string(X2,X1)}.
name1a(X1) --> name2(X1).
name2(X1) --> name20(X2), {atom_string(X2,X1)}.
name20(XXs) --> [X], {char_code(Ch1,X),%%char_type(X,alnum)->true;(Ch1='+'->true;(Ch1='-'->true;(Ch1='*'->true;(Ch1='/'->true;(Ch1='<'->true;(Ch1='>'->true;(Ch1='='))))))),atom_string(CA,Ch1),downcase_atom(CA,CA2)},name20(Xs), {atom_concat(CA2,Xs,XXs)}, !. name20(XXs) --> [X], {char_code(Ch1,X),%%(char_type(X,alnum)->true;(Ch1='+'->true;(Ch1='-'->true;(Ch1='*'->true;(Ch1='/'->true;(Ch1='<'->true;(Ch1='>'->true;(Ch1='='))))))),atom_string(CA,Ch1),downcase_atom(CA,XXs)}, !. %%name20('') --> [].
name20(XXs) --> [X], {char_code(Ch1,X),%%char_type(X,alnum)->true;(Ch1='+'->true;(Ch1='-'->true;(Ch1='*'->true;(Ch1='/'->true;(Ch1='<'->true;(Ch1='>'->true;(Ch1='='))))))),atom_string(CA,Ch1),downcase_atom(CA,CA2)},name20(Xs), {atom_concat(CA2,Xs,XXs)}, !. name20(XXs) --> [X], {char_code(Ch1,X),%%(char_type(X,alnum)->true;(Ch1='+'->true;(Ch1='-'->true;(Ch1='*'->true;(Ch1='/'->true;(Ch1='<'->true;(Ch1='>'->true;(Ch1='='))))))),atom_string(CA,Ch1),downcase_atom(CA,XXs)}, !. %%name20('') --> []./**name2([L3|Xs]) --> [X], {(char_type(X,alnum)->true;char_type(X,punct)),string_codes(L2,[X]),downcase_atom(L2,L3)}, name2(Xs), !.
negative_result(Subject,Object,Meronym) :- make_connection(Subject,Object,Meronym,(-)).
new_file(Input%,Input01) :-%*/%open_string_file_s(Input,File_string),data(Header,Footer),%/*format(Header,[]),writeln(Input),writeln("<br><br>"),foldr(string_concat,["<form action=\"/new_file\" method=\"POST\">        <p>New filename:</p>        <textarea name=text0 rows=\"1\">","","</textarea><br><br>        <p>Contents:</p>          <input type=hidden name=text1 value=\"",Input,"\">        <textarea name=text2 rows=\"20\">","","</textarea>  <input type=submit name=submit value='Submit'>    </form>"],String),writeln(String),%*/format(Footer,[])%*/.
new_file1(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),%format(Data,[])%writeln1(Data),      Data=[%%debug='off',%%Debug1,text0=File_name,text1=Path,text2=Contents,submit=_],/*%term_to_atom(Text11,Text1),%term_to_atom(Text21,Text2),%term_to_atom(Path,Text01),*/%(string_concat(_,"/",Path)->Path1=Path;string_concat(Path,"/",Path1)),working_directory(A,A),working_directory(_,Path),%string_concat(Path1,File_name,Path2),atom_string(File_name,File_names),atom_string(Contents,Contentss),save_file_s(File_names,Contentss),working_directory(_,A),file_browser(Path).
new_folder1(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),%format(Data,[])        %/*%writeln1(Data)%/*Data=[%%debug='off',%%Debug1,text1=Path,text2=New_folder,submit=_],%term_to_atom(From,Text1),%term_to_atom(To,Text2),%term_to_atom(Path,Text01),%(string_concat(_,"/",Path)->Path1=Path;string_concat(Path,"/",Path1)),%writeln(Path)%/*working_directory(A,A),working_directory(_,Path),%Mv="rsync -avz --remove-source-files ",NF="mkdir ",concat_list([NF,New_folder],Command),shell1_s(Command),working_directory(_,A),file_browser(Path)%*/.
new_t2b(S,B,XYZ) :- downcase_atom(S,S1),string_codes(S1,C),phrase(s(B),C),maplist(br,B,XYZ),!.s(B) --> noun1(B1), space(B2), verb(B3), space(B4), noun1(B5), full_stop(B6), {foldr(append,[B1,[B2],[B3],[B4],B5,[B6]],B)}.
new_work(Curr_students1a,Curr_students_aa1,Curr_students_aa2,Grad_students_aa1,Grad_students_aa2) :-Curr_students1a=[[A,B,Student_number,TS_of_enrollment,Year_of_enrollment,Month_of_enrollment,Day_of_enrollment,TS_of_completion,Year_of_completion,Month_of_completion,Day_of_completion,Course,Course_type,Years_to_complete,Essays_left,As]|Curr_students1b],(Essays_left is 0 ->((Curr_students_aa1=Curr_students_aa3,get_time(TS),stamp_date_time(TS,date(Year_of_graduation,Month_of_graduation,Day_of_graduation,_Hour2,_Minute2,_Seconda,_A,_TZ,_False),local),append(Grad_students_aa1,[[A,B,Student_number,TS_of_enrollment,Year_of_enrollment,Month_of_enrollment,Day_of_enrollment,TS,Year_of_graduation,Month_of_graduation,Day_of_graduation,Course,Course_type,Years_to_complete,Essays_left,As]],Grad_students_aa3)));(true%toss_coin -> (get_texts(Course,Texts),%trace,short_essay_helper(Texts,Course,3,Essay_0),%writeln([essay_0,Essay_0]),W is 50*4,%texttobr2(u,u,Essay_0,u,false,false,false,false,false,false,W,[auto,on]),texttobr2(u,u,Essay_0,u,[auto,on]),texttobr(u,u,Essay_0,u),working_directory(_, '../Lucian-Academy/'),add_to_breasoning_log(["string",Essay_0]),/**term_to_atom(Essay_0,Essay_01),string_atom(Essay_02,Essay_01),(open_s("essay_tmp1.txt",write,Stream1),write(Stream1,Essay_02),close(Stream1)),!,truncate("essay_tmp1.txt",14000,"file.txt"),**/working_directory(_, '../Algorithm-Writer-with-Lists/'),Br is As*80,grammar_logic_to_alg1(Essay_0,Br,GL_out1),working_directory(_, '../Lucian-Academy/'),add_to_detail_log(["string",GL_out1]),term_to_atom(GL_out1,GL_out2),string_atom(GL_out,GL_out2),working_directory(_, '../Lucian-Academy/'),%texttobr2(u,u,GL_out,Br,false,false,false,false,false,false,W),    texttobr2(u,u,GL_out,Br,[auto,on]),texttobr(u,u,GL_out,Br),Essays_left2 is Essays_left-1,writeln([A,B,Student_number,TS_of_enrollment,Year_of_enrollment,Month_of_enrollment,Day_of_enrollment,TS_of_completion,Year_of_completion,Month_of_completion,Day_of_completion,Course,Course_type,Years_to_complete,Essays_left2,As]),assertz(todays_students(As)),append(Curr_students_aa1,[[A,B,Student_number,TS_of_enrollment,Year_of_enrollment,Month_of_enrollment,Day_of_enrollment,TS_of_completion,Year_of_completion,Month_of_completion,Day_of_completion,Course,Course_type,Years_to_complete,Essays_left2,As]],Curr_students_aa3),Grad_students_aa1=Grad_students_aa3);(Curr_students_aa1=Curr_students_aa3,Grad_students_aa1=Grad_students_aa3))),new_work(Curr_students1b,Curr_students_aa3,Curr_students_aa2,Grad_students_aa3,Grad_students_aa2).
nl2alg([A,via,B],Tree,Alg) :- ontol_conn(A,Tree,Alg), member(B,Alg),!.
no_calls(Item) :-not(call1(Item)),!.
no_calls(Item) :-not(call1(Item)),!.convert_to_grammar_part20(Body1,FirstVar1,SecondVar1,SecondVarParent,Body2,Body3) :-(count_call_or_terminal(Body1,0,1,[],_I)->SecondVar2=SecondVar1;SecondVar2=3),convert_to_grammar_part2(Body1,FirstVar1,SecondVar2,SecondVarParent,Body2,Body3),!.
no_nds(A) :- flatten(A,B),not(member(nd,B)),!.
no_repeating_lists([[t,list],[[_,_,_,2],[[t,list],[[_,_,_,1]]]]]).  false.
no_rt(NR) :-flatten(NR,NR1),not(member(r,NR1)),type_s2a1(Type),not(member(Type,NR1)),!.
not_contains_loop1(Ordered_pred_nums1,Ordered_pred_nums2,P1,P21) :-%writeln([ordered_pred_nums2,Ordered_pred_nums2]), ((Ordered_pred_nums2=[_Ordered_pred_nums1x,loop]%->true; %(Ordered_pred_nums2=loop%->true; %Ordered_pred_nums2=[loop] )->fail;%P1=P2; ((Ordered_pred_nums2=A,number(A))->append(P1,[A],P21); (append(Ordered_pred_nums4,[Ordered_pred_nums3],Ordered_pred_nums2), %reverse(Ordered_pred_nums4,Ordered_pred_nums42), findall1(P3,(member(Ordered_pred_nums41,Ordered_pred_nums4), %reverse(Ordered_pred_nums41,Ordered_pred_nums42), not_contains_loop1(Ordered_pred_nums1,Ordered_pred_nums41,[],P3)),P31), %retractall(resort_n(_)), %assertz(resort_n(1)), %append(P31,[P1],P33), resort(P31,P32), %reverse(P31,P32), %trace, foldr(append,[ %P1, P32%[Ordered_pred_nums3 ,[Ordered_pred_nums3]],P2), %notrace, flatten(P2,P21) ))).
not_reserved_word(Function,Reserved_words) :-        %Function=[[_,Function_a]|_]        Function=[_,Function_a],(atom(Function_a)->true;string(Function_a)),atom_string(Function_a,Function_s),not(member(Function_s,Reserved_words)).
note(0,'C').note(1,'C#').
note0(0,'C').
noticed(X,Y,Events,Object,Seconds) :- grid(X,Y,Grid1), random_events(X,Y,1,Events,Grid1,Grid2), noticed1(X,Y,1,Seconds,Object,Grid2).
noticed1(X,Y,Seconds,Seconds,Object,Grid) :- random(X2),X1 is ceiling(X*X2), random(Y2),Y1 is ceiling(Y*Y2), member([X1,Y1,Objects],Grid), member(Object,Objects),!.
num_chars(Char,Num1,String) :-numbers(Num1,1,[],Nums),findall(Char,(member(_Num2,Nums)),Chars),concat_list(Chars,String),!.
num_modes(OutModes,Last,_InputVars1) :-OutModes=0,Last=[],!.
number1(XY1) :- (number1(XY1,_)->true;number(XY1)),!.
number_generator(Min,Max,N) :-numbers(Max,Min,[],Ns),member(N,Ns).
number_letter([[1,"(a). "],[2,"(b). "],[3,"(c). "],[4,"(d). "],[5,"(e). "]]).number_letter2([[1,"(i). "],[2,"(ii). "],[3,"(iii). "],[4,"(iv). "],[5,"(v). "]]).
number_of_students(Subject,Enrollments,Number_of_students) :-member([Subject,Enrollments2],Enrollments),length(Enrollments2,Number_of_students).
numbers(N2,N1,Numbers,Numbers) :-N2 is N1-1,!.
numbers(N2,N1,Numbers1,Numbers2):-%%notrace,numbers1(N2,N1,Numbers1,Numbers2).
numbers(N2,N1,Numbers1,Numbers2):-numbers1(N2,N1,Numbers1,Numbers2),!.
numbers1(N1,N2) :-N3 is N1-1,numbers(N3,2,[],N2).
o_o_constantDis(X,Y,D):-    dif(X,Y),    D #= 1.
o_o_dis(X,X,D):-D #= 0,!.o_o_dis(X,Y,D):-    atomic(X),    atomic(Y),    o_o_constantDis(X,Y,D),!.o_o_dis(X,Y,D):-    X =..[XF|XRest],    length(XRest,XN),    Y =.. [YF|YRest],    length(YRest,YN),    dif(XF,YF),    o_o_functorDis(XF-XN,YF-YN,D),!.o_o_dis(X,Y,D):-    X =..[XF|XRest],    length(XRest,XN),    Y =.. [YF|YRest],    length(YRest,YN),    dif(XN,YN),    o_o_functorDis(XF-XN,YF-YN,D),!.
o_o_dis(X,Y,D):-    X=..[F|XRest],    Y=..[F|YRest],    length(XRest,N),    length(YRest,N),    maplist(o_o_dis,XRest,YRest,Distances),    sumlist(Distances,D0),    o_o_functorDis(F-N,F-N,D1),    D #= D1 +D0,!.o_o_dis(_X,_Y,D):-       D #= 0.
o_o_functorDis(X,Y,D):-    dif(X,Y),    D #= 1.o_o_functorDis(X,X,D):-    D #= 0.
o_oclass_disClass(O,O2,D-O2):-   o_o_dis(O,O2,D).key_value_keyvalue(Key,Value,Key-Value).
o_oclass_disClass1(O,[A,B,O2],D-[A,B,O2]):-   o_o_dis(O,O2,D).
o_oclass_disClass1(O,[A,B,O2],D-[A,B,O2]):-   o_o_dis(O,O2,D).%% could be in either order%% a([w,z,a,b,e,c,z,y],[1,1,[c]],[1,2,[a]]).
object([["*   ","*   ","*   "],["*   ","**  ","*   "],["    ","    ","    "]])./*object([ [ [*,-,-], [*,-,-], [*,-,-] ], [ [*,-,-], [*,*,-], [*,-,-] ], [ [-,-,-], [-,-,-], [-,-,-] ]]).
object(cube,(((null,"red",null),"yellow",(null,"blue",null)),"white",(null,"green",(null,"purple",null)))).
object(cube1,[[0,[0]]],[0]).object(cube2,[[0,["red"]],["red",[0]]],[[loop1, [0, "red"]]]).
object(cube3,[["yellow",["red","blue"]],["red",[]],["blue",[]],[0,["yellow","green"]],["green",["purple"]],["purple",[0]]],["red","blue","yellow",[loop1,[0,"green","purple"]]]).
object(cube4,[[0,["red","blue"]],["red",[0]],["blue",[0]]],[[loop1, [0, "blue", "red"]]]).object(cube5,[[0,["red","blue"]],["red",[0]],["blue",[]]],["blue", [loop1, [0, "red"]]]).object(cube6,[[0,["red","blue"]],["red",["orange"]],["orange",[0]],["blue",[]]],["blue", [loop1, [0, "orange", "red"]]]).
object(cube7,[[0,["red"]],["red",["orange"]],["orange",[0]]],[[loop1, [0, "orange", "red"]]]).
object(t152,[[0, [6, 7]], [6, []], [7, [6, 7,0]]],[6, [loop1, [0, 7]]]).object(t153,[[0, [6, 7]], [6, []], [7, [8, 7,0]],[8,[6]]],%[6, [loop1, [0, 7]]]).
occurs_check2(Variables1,Variables2) :-(Variables1=Variables2->fail;/*((variable_name(Variables1),not(variable_name(Variables2)),contains_var1(Variables1,Variables2))->true;(variable_name(Variables2),not(variable_name(Variables1)),contains_var1(Variables2,Variables1)))),*/((Variables1=[Statement1a|Statement2a],Variables2=[Statement1b|Statement2b]),(Statement1a=Statement1b->fail;((variable_name(Statement1a),not(variable_name(Statement1b)),contains_var(Statement1a,Statement1b))->true;((variable_name(Statement1b),not(variable_name(Statement1a)),contains_var(Statement1b,Statement1a))->true;occurs_check2(Statement1a,Statement1b)))),occurs_check2(Statement2a,Statement2b))).
older_brother1(P,Y,G) :-findall([A,B],parent(A,B),P),findall([A,B],year_of_birth(A,B),Y),findall([A,B],gender(A,B),G),!.
omit_paths1(["private2"%"b" % omits GitHub2/b/]).
only_ssi_test(2,[[n,family_test]], % compatible with ssi, requires more memory[[[n,parent],[albert,jim]],[[n,parent],[albert,peter]],[[n,parent],[jim,brian]],[[n,parent],[peter,lee]],[[n,parent],[peter,john]],[[n,year_of_birth],[albert,1926]],[[n,year_of_birth],[peter,1945]],[[n,year_of_birth],[jim,1949]],[[n,year_of_birth],[brian,1974]],[[n,year_of_birth],[john,1974]],[[n,year_of_birth],[lee,1975]],[[n,gender],[albert,male]],[[n,gender],[jim,male]],[[n,gender],[peter,male]],[[n,gender],[brian,male]],[[n,gender],[lee,male]],[[n,gender],[john,male]],[[n,grandparent],[[v,gg]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,parent],[[v,a],[v,b]]],[v,c]]],[[n,findall],[[[v,grandparent],[v,grandchild]],[[[n,member],[[[v,grandparent],[v,child]],[v,c]]],[[n,member],[[[v,child],[v,grandchild]],[v,c]]]],[v,gg]]],[[n,cut]]]],[[n,comment],["% older(A,B)"]],[[n,comment],["% means A is older than B"]],[[n,comment],["%"]],[[n,older],[[v,gg]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,year_of_birth],[[v,a],[v,b]]],[v,c]]],[[n,findall],[[[v,a1],[v,b1]],[[[n,member],[[[v,a1],[v,y1]],[v,c]]],[[n,member],[[[v,b1],[v,y2]],[v,c]]],[[n,>],[[v,y2],[v,y1]]]],[v,gg]]],[[n,cut]]]],[[n,comment],["% siblings(A,B)"]],[[n,comment],["% means A and B are siblings"]],[[n,comment],["%"]],[[n,siblings],[[v,gg]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,parent],[[v,a],[v,b]]],[v,c]]],[[n,findall],[[[v,a1],[v,b1]],[[[n,member],[[[v,x],[v,a1]],[v,c]]],[[n,member],[[[v,x],[v,b1]],[v,c]]],[[n,not],[[[n,=],[[v,a1],[v,b1]]]]]],[v,gg]]],[[n,cut]]]],[[n,comment],["% A & B share a common parent"]],[[n,comment],["%"]],[[n,comment],["% A is different from B  (Bratko, p175)"]],[[n,comment],["% sibling_list(Child, Siblings)"]],[[n,comment],["% Siblings is a list of A1's brothers and sisters"]],[[n,comment],["%"]],[[n,sibling_list],[[v,a1],[v,siblings]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,parent],[[v,a],[v,b]]],[v,c]]],[[n,findall],[[[v,a1],[v,b1]],[[[n,member],[[[v,x],[v,a1]],[v,c]]],[[n,member],[[[v,x],[v,b1]],[v,c]]],[[n,not],[[[n,=],[[v,a1],[v,b1]]]]]],[v,list]]],[[n,remove_duplicates],[[v,list],[v,siblings]]],[[n,cut]]]],[[n,comment],["% remove_duplicates(List, Result)"]],[[n,comment],["%"]],[[n,comment],["% Removes duplicate entries in a list"]],[[n,comment],["%"]],[[n,remove_duplicates],[[],[]],":-",[[[n,cut]]]],[[n,remove_duplicates],[[[[v,x1],[v,x2]],"|",[v,rest]],[[[v,x1],[v,x2]],"|",[v,result]]],":-",[[[n,delete],[[v,rest],[[v,x1],[v,x2]],[v,r1]]],[[n,delete],[[v,r1],[[v,x2],[v,x1]],[v,r2]]],[[n,remove_duplicates],[[v,r2],[v,result]]],[[n,cut]]]],[[n,comment],["% older_brother(A,B)"]],[[n,comment],["% means A is an older brother of B"]],[[n,comment],["%"]],[[n,older_brother],[[v,gg]],":-",[[[n,older_brother1],[[v,p],[v,y],[v,g]]],[[n,findall],[[[v,a],[v,b],[v,c1],[v,b3]],[[[n,member],[[[v,a],[v,b]],[v,p]]],[[n,member],[[[v,b],[v,c1]],[v,y]]],[[n,member],[[[v,b],[v,b3]],[v,g]]]],[v,c]]],[[n,findall],[[[v,a1],[v,b1]],[[[n,member],[[[v,x],[v,a1],[v,c2],male],[v,c]]],[[n,member],[[[v,x],[v,b1],[v,c21],[v,'_']],[v,c]]],[[n,>],[[v,c2],[v,c21]]]],[v,gg]]],[[n,cut]]]],[[n,older_brother1],[[v,p],[v,y],[v,g]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,parent],[[v,a],[v,b]]],[v,p]]],[[n,findall],[[[v,a],[v,b]],[[n,year_of_birth],[[v,a],[v,b]]],[v,y]]],[[n,findall],[[[v,a],[v,b]],[[n,gender],[[v,a],[v,b]]],[v,g]]],[[n,cut]]]],[[n,comment],["% descendant(Person, Descendant)"]],[[n,comment],["% means Descendant is a descendant of Person."]],[[n,comment],["%"]],[[n,descendant],[[v,a1],[v,b1]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,parent],[[v,a],[v,b]]],[v,c]]],[[n,descendant1],[[v,a1],[v,b1],[v,c],[v,c]]]]],[[n,descendant1],[[v,'_person'],[],[],[v,'_']],":-",[[[n,cut]]]],[[n,descendant1],[[v,person],[v,d2],[[[v,person],[v,c2]],"|",[v,c1]],[v,e]],":-",[[[n,descendant1],[[v,c2],[v,d],[v,e],[v,e]]],[[n,descendant1],[[v,person],[v,descendant],[v,c1],[v,e]]],[[n,foldr_append],[[[[v,c2]],[v,d],[v,descendant]],[],[v,d2]]],[[n,cut]]]],[[n,descendant1],[[v,person1],[v,descendant],[[[v,person2],[v,'_c2']],"|",[v,c1]],[v,e]],":-",[[[n,not],[[[n,=],[[v,person1],[v,person2]]]]],[[n,descendant1],[[v,person1],[v,descendant],[v,c1],[v,e]]],[[n,cut]]]],[[n,foldr_append],[[],[v,b],[v,b]],":-",[[[n,cut]]]],[[n,foldr_append],[[[v,a1],"|",[v,a2]],[v,b],[v,c]],":-",[[[n,append],[[v,b],[v,a1],[v,d]]],[[n,foldr_append],[[v,a2],[v,d],[v,c]]],[[n,cut]]]],[[n,comment],["% ancestor(Person, Ancestor)"]],[[n,comment],["% means Ancestor is an ancestor of Person."]],[[n,comment],["%"]],[[n,comment],["% This is functionally equivalent to descendant(Ancestor, Person)."]],[[n,comment],["%"]],[[n,ancestor],[[v,a1],[v,b1]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,parent],[[v,a],[v,b]]],[v,c]]],[[n,ancestor1],[[v,a1],[v,b1],[v,c],[v,c]]]]],[[n,ancestor1],[[v,'_person'],[],[],[v,'_']],":-",[[[n,cut]]]],[[n,ancestor1],[[v,person],[v,d2],[[[v,c2],[v,person]],"|",[v,c1]],[v,e]],":-",[[[n,ancestor1],[[v,c2],[v,d],[v,e],[v,e]]],[[n,ancestor1],[[v,person],[v,ancestor],[v,c1],[v,e]]],[[n,foldr_append],[[[[v,c2]],[v,d],[v,ancestor]],[],[v,d2]]],[[n,cut]]]],[[n,ancestor1],[[v,person1],[v,ancestor],[[[v,'_c2'],[v,person2]],"|",[v,c1]],[v,e]],":-",[[[n,not],[[[n,=],[[v,person1],[v,person2]]]]],[[n,ancestor1],[[v,person1],[v,ancestor],[v,c1],[v,e]]],[[n,cut]]]],[[n,comment],["% children(Parent, ChildList)"]],[[n,comment],["% ChildList is bound to a list of the children of Parent."]],[[n,comment],["%"]],[[n,children],[[v,parent],[v,childlist]],":-",[[[n,findall],[[v,child],[[n,parent],[[v,parent],[v,child]]],[v,childlist]]]]],[[n,comment],["% list_count(List, Count)"]],[[n,comment],["% Count is bound to the number of elements in List."]],[[n,comment],["%"]],[[n,list_count],[[],0]],[[n,list_count],[[[v,'_'],"|",[v,tail]],[v,count]],":-",[[[n,list_count],[[v,tail],[v,tailcount]]],[[n,+],[[v,tailcount],1,[v,count]]]]],[[n,comment],["% count_descendants(Person, Count)"]],[[n,comment],["% Count is bound to the number of descendants of Person."]],[[n,comment],["%"]],[[n,count_descendants],[[v,person],[v,count]],":-",[[[n,descendant],[[v,person],[v,list]]],[[n,list_count],[[v,list],[v,count]]]]],[[n,family_test],":-",[[[n,grandparent],[[v,result1]]],[[n,writeln],[[v,result1]]],[[n,older],[[v,result2]]],[[n,writeln],[[v,result2]]],[[n,siblings],[[v,result3]]],[[n,writeln],[[v,result3]]],[[n,sibling_list],[john,[v,result5]]],[[n,writeln],[[v,result5]]],[[n,older_brother],[[v,result6]]],[[n,writeln],[[v,result6]]],[[n,descendant],[albert,[v,result7]]],[[n,writeln],[[v,result7]]],[[n,ancestor],[john,[v,result8]]],[[n,writeln],[[v,result8]]],[[n,children],[albert,[v,childlist]]],[[n,writeln],[[v,childlist]]],[[n,list_count],[[1,2,3],[v,count1]]],[[n,writeln],[[v,count1]]],[[n,count_descendants],[albert,[v,count2]]],[[n,writeln],[[v,count2]]]]]],[[]]).
open_file_sh(F1,File_term) :- (absolute_url(F1)-> F1=Path; (working_directory_sh(F11,F11), string_concat_url(F11,F1,Path))),split_string(Path,"/","/",Path1),append(_P1,[P2],Path1),string_concat(P2,"tmp54837",P3),Scp="scp -pr ",concat_list([Scp,Path," ",P3],Command),shell1_s(Command),open_file_s(P3,File_term),Rm="rm -rf",concat_list([Rm," ",P3],Command1),shell1_s(Command1),!.
open_not_between(A,B,C) :-not((A=<B,B=<C)).
open_s(File,Mode,Stream) :-atom_string(File1,File),open(File1,Mode,Stream),!.
open_s(File,Mode,Stream) :-atom_string(File1,File),open(File1,Mode,Stream),!.string_atom(String,Atom) :-atom_string(Atom,String),!.
operate1([Operator,Input_number,Output_number],Outputs) :-numbers(Input_number,1,[],Input_numbers),findall([Input1,Input2],(member(_Input_number1,Input_numbers),number_generator(1,5,Input1),member(_Input_number2,Input_numbers),number_generator(1,5,Input2)),Inputs),operate2([Operator,_,Output_number],Inputs,Outputs).
operators1("+-/*^").
optimise("databaseformulafinder",foldr).
optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program2) :-findrulesflowingtopv1(Program1,InputVars1,InputVars2,PenultimateVars,[],Rules,true),%%findrulesflowingtopv1a(Program1,_Program32,InputVars1,InputVars2,PenultimateVars,[],_Rules1),intersection(Program1,Rules,Program3),unique1(Program3,[],Program2).
optimise([[append,[a,a,e]],[delete,[a,e,c]]],[a,e],[a,e,c],[c],P).P = [[append, [a, a, e]], [delete, [a, e, c]]] .
optimise([[append,[a,e,c]]],[a,e,c],[a,e,c],[c],P).
optimise([[delete,[a,e,c]],[append,[a,a,e]]],[a,e],[a,e,c],[c],P).
optional_end(_A4) --> [Return],[EOF],{Return=13,EOF=10}, !.
order_preds_bottom_up1_post_order_dfs2(P3,_P2,Functions,_Ordered_pred_nums1,Ordered_pred_nums3,Pre_order1) :-member(P4,P3),flatten(Pre_order1,Ordered_pred_nums2),member(P4,Ordered_pred_nums2),append(P5,P6,P3),append([P4],P7,P6),order_preds_bottom_up1_post_order_dfs2(P7,_P21,Functions,[],Ordered_pred_nums31,Pre_order1),foldr(append,[P5,[[loop,P4]],Ordered_pred_nums31],Ordered_pred_nums3),!.
order_reducer :-writeln("Have you reduced [a,[b]] to [a,b] to reduce the number of instructions, please (y/n)?"),read_string(user_input,"\n","\r",_,"y").
orienteering(List1) :-generate_points(10,Points1),choose_starting_point(Points1,Point1,Points2),find_first_point(Point1,Points2,Point2,Points3),%%trace,traverse_points2(Point2,Points3,[],List2),%%trace,maplist(append,[[Point1,Point2]],[List2],[List1]).
os_running(OS) :- (current_prolog_flag(arch, _Arch)->OS=macos; (current_prolog_flag(unix, U)->US=linux; (current_prolog_flag(windows, W)->OS=windows; OS=other))),!.
outer_bracket_chars(A) :- remove_first_and_last_items("[","]",A,_),!.flatten_join1(A,B) :- flatten_join2(A,[],B),!.
output_path(Paths) :- output_path1(Paths1), findall1(Paths2,(member(Paths3,Paths1), ((string_concat(_Paths4,"/",Paths3), Paths2=Paths3)->true; string_concat(Paths3,"/",Paths2))),Paths),!.
output_path1(["../../GitHub2o/"]).
outputarguments(_Relations,_FunctionNumber,3,Vars,Vars,Header,Header).
outputlyrics(File1,Lyrics1) :-Lyrics1=[Lyrics2|_Lyrics3],Lyrics2=[_|Lyrics4],Lyrics4=[Lyrics5|_Lyrics6],sentencewithspaces(Lyrics5,Lyrics7A),string_concat(Lyrics7A,"\n\n",Lyrics7),outputlyrics1(Lyrics1,Lyrics7,Lyrics8),concat_list(File1,["lyrics.txt"],File2),open_s(File2,write,Stream),write(Stream,Lyrics8), close(Stream).
outputlyrics(File1,Lyrics1) :-Lyrics1=[Lyrics2|_Lyrics3],Lyrics2=[_|Lyrics4],Lyrics4=[Lyrics5|_Lyrics6],sentencewithspaces(Lyrics5,Lyrics7A),string_concat(Lyrics7A,"\n\n",Lyrics7),outputlyrics1(Lyrics1,Lyrics7,Lyrics8),concat_list(File1,["lyrics.txt"],File2),open_s(File2,write,Stream),write(Stream,Lyrics8), close(Stream),%%texttobr2(u,File2,u,u),texttobr(u,File2,u,u).
outputlyrics(File1,Lyrics1) :-Lyrics1=[Lyrics2|_Lyrics3],Lyrics2=[_|Lyrics4],Lyrics4=[Lyrics5|_Lyrics6],sentencewithspaces(Lyrics5,Lyrics7A),string_concat(Lyrics7A,"\n\n",Lyrics7),outputlyrics1(Lyrics1,Lyrics7,Lyrics8),concat_list3(File1,["lyrics.txt"],File2),open_s(File2,write,Stream),write(Stream,Lyrics8), close(Stream),%%texttobr2(u,File2,u,u),texttobr(u,File2,u,u).
outputlyrics([]) :- !.
outputlyrics1([],Lyrics,Lyrics) :- !.
outputlyrics1([],Lyrics,Lyrics) :- !.outputlyrics1(Lyrics1,Lyrics5,Lyrics6) :-Lyrics1=[Lyrics2|Lyrics3],Lyrics2=[_|Lyrics4],outputlyrics2(Lyrics4,Lyrics5,Lyrics7),string_concat(Lyrics7,"\n",Lyrics8),outputlyrics1(Lyrics3,Lyrics8,Lyrics6).
outputlyrics2([]) :- !.outputlyrics2(Lyrics1) :-Lyrics1=[Lyrics2|Lyrics3],sentencewithspaces(Lyrics2,Lyrics4),writeln(Lyrics4),outputlyrics2(Lyrics3).
outputlyrics2([],Lyrics,Lyrics) :- !.
outputlyrics2([],Lyrics,Lyrics) :- !.outputlyrics2(Lyrics1,Lyrics5,Lyrics6) :-Lyrics1=[Lyrics2|Lyrics3],sentencewithspaces(Lyrics2,Lyrics4),%%writeln(Lyrics4),concat_list(Lyrics5,[Lyrics4,"\n"],Lyrics7),outputlyrics2(Lyrics3,Lyrics7,Lyrics6).
overtake(List1,Person,Person_to_overtake,Result) :-delete(List1,Person,List2),append(List3,[Person_to_overtake|List4],List2),maplist(append,[[List3,[Person],[Person_to_overtake|List4]]],[Result]),!.
p(The,Word,Word1) :- (member([Word,Word1],The)->true;Word=Word1).
p(The,Word,Word1) :- (member([Word,Word2],The)->random_member(Word1,[Word,Word2]);Word=Word1).
p2lp_test(10,"a(B,C)-->d(E).
p2lp_test(11,"a:-d(E).
p2lp_test(12,"a-->d(E).
p2lp_test(13,"a-->a.",[[[n,a],"->",[[[n,a]]]]]).p2lp_test(14,"a-->d(E).
p2lp_test(15,"a:-b([A,B],1,[C]).",[[[n,a],":-",[[[n,b],[[[v,a],[v,b]],1,[[v,c]]]]]]]).p2lp_test(16,"a./*1*/",[[[n,a]],[[n,comment],["/*1*/"]]]).
p2lp_test(17,"b:-c.",[[[n,b],":-",[[[n,c]]]]]).
p2lp_test(18,"a:-b,c,d./*1*/%2",[[[n,a],":-",[[[n,b]],[[n,c]],[[n,d]]]],[[n,comment],["/*1*/"]],[[n,comment],["%2"]]]).p2lp_test(19,"a(A):-[]=[[]].",[[[n,a],[[v,a]],":-",[[[n,equals4],[[],[[]]]]]]]).p2lp_test(20,"a(A):-([]=[[]]).",[[[n,a],[[v,a]],":-",[[[[n,equals4],[[],[[]]]]]]]]).
p2lp_test(2,":-include('luciancicd.pl').",[[":-",[n,include],['luciancicd.pl']]]).
p2lp_test(21,"a(A):-([1]=A).",[[[n,a],[[v,a]],":-",[[[[n,equals4],[[1],[v,a]]]]]]]).p2lp_test(22,"a(A):-(B=A).",[[[n,a],[[v,a]],":-",[[[[n,=],[[v,b],[v,a]]]]]]]).p2lp_test(23,"a(A):-([1]=[1]).",[[[n,a],[[v,a]],":-",[[[[n,equals4],[[1],[1]]]]]]]).p2lp_test(24,"a([A,B,C]).",[[[n,a],[[[v,a],[v,b],[v,c]]]]]).p2lp_test(25,"a([A,B]).",[[[n,a],[[[v,a],[v,b]]]]]).
p2lp_test(26,"a([A|C]).",[[[n,a],[[[v,a],"|",[v,c]]]]]).
p2lp_test(27,"a([[A,B]]).",[[[n,a],[[[[v,a],[v,b]]]]]]).p2lp_test(28,"a(A,[]).",[[[n,a],[[v,a],[]]]]).p2lp_test(29,"a(A,[A]).",[[[n,a],[[v,a],[[v,a]]]]]).
p2lp_test(3,":-include('../Prolog-to-List-Prolog/p2lpconverter.pl').",[[":-",[n,include],['../Prolog-to-List-Prolog/p2lpconverter.pl']]]).
p2lp_test(30,"a([[A]|C]).",[[[n,a],[[[[v,a]],"|",[v,c]]]]]).p2lp_test(31,"a(A,[[A]|C]).",[[[n,a],[[v,a],[[[v,a]],"|",[v,c]]]]]).p2lp_test(32,"a(A,[[A,B]|[C,D]]).",[[[n,a],[[v,a],[[[v,a],[v,b]],"|",[[v,c],[v,d]]]]]]).p2lp_test(33,"ba(12).",[[[n,ba],[12]]]).
p2lp_test(34,"ba(12,1).",[[[n,ba],[12,1]]]).
p2lp_test(35,"a(1.1).",[[[n,a],[1.1]]]).
p2lp_test(36,"a(\"dsf\").",[[[n,a],["dsf"]]]).p2lp_test(37,"a(dd).",[[[n,a],['dd']]]).
p2lp_test(38,"a(A):-findall(A,hello(A),B).",[[[n,a],[[v,a]],":-",[[[n,findall],[[v,a],[[n,hello],[[v,a]]],[v,b]]]]]]).
p2lp_test(39,"a(A):-findall(A,hello(A),B),!.",[[[n,a],[[v,a]],":-",[[[n,findall],[[v,a],[[n,hello],[[v,a]]],[v,b]]],[[n,cut]]]]]).p2lp_test(40,"a(A):-findall(A,(hello(A),hello(A)),B).",[[[n,a],[[v,a]],":-",[[[n,findall],[[v,a],[[[n,hello],[[v,a]]],[[n,hello],[[v,a]]]],[v,b]]]]]]).
p2lp_test(4,"use_module(library(pio)).",[[[n,use_module],[[[n,library],[pio]]]]]).
p2lp_test(41,"a([A]):-A is 1+1.",[[[n,a],[[[v,a]]],":-",[[[n,+],[1,1,[v,a]]]]]]).
p2lp_test(42,"ef(G):-(h(I)->true;true).",[[[n,ef],[[v,g]],":-",[[[n,"->"],[[[n,h],[[v,i]]],[[n,true]],[[n,true]]]]]]]).p2lp_test(43,"ef(G):-(h(I)->true;true),!.",[[[n,ef],[[v,g]],":-",[[[n,"->"],[[[n,h],[[v,i]]],[[n,true]],[[n,true]]]],[[n,cut]]]]]).p2lp_test(44,"ef(G):-(h(I)->true).",[[[n,ef],[[v,g]],":-",[[[n,"->"],[[[n,h],[[v,i]]],[[n,true]]]]]]]).
p2lp_test(45,"ef(G):-(h(I)->true),!.",[[[n,ef],[[v,g]],":-",[[[n,"->"],[[[n,h],[[v,i]]],[[n,true]]]],[[n,cut]]]]]).p2lp_test(46,"compound21(T,U)-->item(I).",[[[n,compound21],[[v,t],[v,u]],"->",[[[n,item],[[v,i]]]]]]).
p2lp_test(47,"compound21(T,U)-->item(I),!.",[[[n,compound21],[[v,t],[v,u]],"->",[[[n,item],[[v,i]]],[[n,cut]]]]]).
p2lp_test(48,"a([A]).",[[[n,a],[[[v,a]]]]]).p2lp_test(49,"a(A).",[[[n,a],[[v,a]]]]).p2lp_test(50,"compound21(T,U)-->{wrap(I,Itemname1)}.",[[[n,compound21],[[v,t],[v,u]],"->",[[[n,code],[[n,wrap],[[v,i],[v,itemname1]]]]]]]).p2lp_test(51,"compound21(T,U)-->{wrap(I,Itemname1),append(T,Itemname1,V)}.",[[[n,compound21],[[v,t],[v,u]],"->",[[[n,code],[[[n,wrap],[[v,i],[v,itemname1]]],[[n,append],[[v,t],[v,itemname1],[v,v]]]]]]]]).p2lp_test(52,"compound21(T,U)-->item(I),lookahead(\"]\"),{wrap(I,Itemname1),append(T,Itemname1,V)},compound212(V,U).",[[[n,compound21],[[v,t],[v,u]],"->",[[[n,item],[[v,i]]],[[n,lookahead],["]"]],[[n,code],[[[n,wrap],[[v,i],[v,itemname1]]],[[n,append],[[v,t],[v,itemname1],[v,v]]]]],[[n,compound212],[[v,v],[v,u]]]]]]).
p2lp_test(5,"use_module(library(dcg/basics)).",[[[n,use_module],[[[n,library],['dcg/basics']]]]]).
p2lp_test(53,"a(A):-findall([A,C],hello(A,C),B).",[[[n,a],[[v,a]],":-",[[[n,findall],[[[v,a],[v,c]],[[n,hello],[[v,a],[v,c]]],[v,b]]]]]]).
p2lp_test(54,"a:-a(\"\n\",\"\\\"\").",[[[n, a], ":-",[[[n,a],["\n",""""]]]]]).p2lp_test(55,"a:-a(\"\\\"\").",[[[n, a], ":-",[[[n,a],[""""]]]]]).p2lp_test(56,"a:-a(\" \\\"\").",[[[n, a], ":-",[[[n,a],[" \""]]]]]).
p2lp_test(6,":-dynamic keep_comments/1.",[[":-",[n,dynamic],[keep_comments,"/",1]]]).
p2lp_test(7,"a:-a.",[[[n,a],":-",[[[n,a]]]]]).
p2lp_test(8,"a(A,B).
p2lp_test(9,"a:-d(E).
p2lpconverter([file,File1],List3) :-turn_keep_comments_on,%File1="test1.pl",readfile(File1,"test1.pl file read error.",List3),!.p2lpconverter(List3) :-turn_keep_comments_on,File1="test1.pl",readfile(File1,"test1.pl file read error.",List3),!.
p2lpconverter_command([Type,In],Out) :-string_concat("a:-",In,In1),p2lpconverter([Type,In1],Out1),Out1=[[[n,a],":-",Out]],!.
p2slpconverter :-File1="test1.pl",readfile(File1,"test1.pl file read error.").
p_name1(N) :- p_name(N1), string_concat("p",N1,N), N2 is N1+1, retractall(p_name(_)), assertz(p_name(N2)).
p_name1(N) :- p_name(N1), string_concat("p",N1,N), N2 is N1+1, retractall(p_name(_)), assertz(p_name(N2)).v_name1([Dbw_v,N]) :- get_lang_word("v",Dbw_v), v_name(N1), string_concat("v",N1,N), N2 is N1+1, retractall(v_name(_)), assertz(v_name(N2)).
paint :-open_file_s("file_paint.txt",Paint_term),Paint_term=["width",X,"height",Y,Elements1],colour_background(X,Y,File_contents1),%render_pbm_file(File_contents2,X,Y,File_contents3),get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list(["paint",Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list([File1,".ppm"],_File3),paint_elements(X,Y,Elements1,File_contents1,_Grid2),!.
paraphrase1(File_list,File_list1,File_list2,Synonym_list,Synonym_list2) :-File_list=[File_list3|File_list4],string_concat(File_list5,_E,File_list3),string_length(File_list5,1),%letters(File_list5),string_codes(File_list5,File_list5_c),phrase(word1(File_list5_c),_),(((member([File_list3,Synonym],Synonym_list)->true;member([Synonym,File_list3],Synonym_list))->(append(File_list1,[Synonym],File_list6),Synonym_list=Synonym_list1);((%true%trace,%trace,auto(off))->(concat_list(["What is a synonym for: ",File_list3,"\n","or <Return> to skip."],Notification),writeln(Notification),read_string(user_input, "\n", "\r", _End, Input),(Input=""->(Synonym2=File_list3);(Synonym2=Input)),append(Synonym_list,[[File_list3,Synonym2]],Synonym_list1));(%File_list1=File_list6,Synonym2=File_list3,Synonym_list=Synonym_list1))),append(File_list1,[Synonym2],File_list6)),paraphrase1(File_list4,File_list6,File_list2,Synonym_list1,Synonym_list2).
paraphrase1(File_list,File_list1,File_list2,Synonym_list,Synonym_list2) :-File_list=[File_list3|File_list4],string_concat(File_list5,_E,File_list3),string_length(File_list5,1),%letters(File_list5),string_codes(File_list5,File_list5_c),phrase(word1(File_list5_c),_),(((member([File_list3,Synonym],Synonym_list)->true;member([Synonym,File_list3],Synonym_list))->(mind_read(Synonym_a,[Synonym,File_list3]),append(File_list1,[Synonym_a],File_list6),Synonym_list=Synonym_list1);((%true%trace,%trace,auto(off))->(concat_list(["What is a synonym for: ",File_list3,"\n","or <Return> to skip."],Notification),writeln(Notification),read_string(user_input, "\n", "\r", _End, Input),(Input=""->(Synonym2=File_list3);(Synonym2=Input)),append(Synonym_list,[[File_list3,Synonym2]],Synonym_list1));(%File_list1=File_list6,%mind_read(Synonym2,[File_list3,Synonym]),Synonym2=File_list3,Synonym_list=Synonym_list1))),append(File_list1,[Synonym2],File_list6)),paraphrase1(File_list4,File_list6,File_list2,Synonym_list1,Synonym_list2).
paraphraser(A,B) :- split_string(A," "," ",C), % later: keep formattingreplace2(C,[["company","firm","business"],["person","individual","entity"]],[],D),%trace,concat_list(D,B).
paraphraser(Parameters,File_list_a,Auto) :-retractall(auto(_)),assertz(auto(Auto)),paraphraser(Parameters,File_list_a),!.
paraphraser(Parameters,File_list_a,Auto) :-retractall(auto(_)),assertz(auto(Auto)),paraphraser(Parameters,File_list_a),!.paraphraser([string,String],File_list_a) :-(not(catch(auto(_),_,false))->(retractall(auto(_)),assertz(auto(off)));true),%File1="test1.pl",string_codes(String,Codes),paraphraser1(Codes,File_list_a),!.
paraphraser([string,String],File_list_a) :-(not(catch(auto(_),_,false))->(retractall(auto(_)),assertz(auto(off)));true),%File1="test1.pl",string_codes(String,Codes),paraphraser1(Codes,File_list_a),!.
paraphraser([string,String],File_list_a) :-(not(catch(auto(_),_,false))->(retractall(auto(_)),assertz(auto(off)));true),%File1="test1.pl",string_codes(String,Codes),paraphraser1(Codes,File_list_a),!.paraphraser([file,File1],File_list_a) :-(not(catch(auto(_),_,false))->(retractall(auto(_)),assertz(auto(off)));true),%File1="test1.pl",phrase_from_file_s(string(Codes), File1),paraphraser1(Codes,File_list_a),(open_s("file2.txt",write,Stream1),write(Stream1,File_list_a),close(Stream1)),!.paraphraser1(Codes,File_list_a) :-SepandPad=%".",%"&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xx%string_codes(String1,Codes),%string_to_list2(SepandPad,[],SepandPad1),string_codes(SepandPad,SepandPad1),%split_string2(String1,SepandPad1,File_list),split_on_substring117(Codes,SepandPad1,[],File_list),%split_string(String1,SepandPad,SepandPad,File_list),phrase_from_file_s(string(Codes2), "thesaurus.txt"),%trace,string_codes(String2,Codes2),atom_to_term(String2,Synonym_list,_),paraphrase1(File_list,[],File_list2a,Synonym_list,Synonym_list2),concat_list(File_list2a,File_list_a),term_to_atom(Synonym_list2,Synonym_list_a),(open_s("thesaurus.txt",write,Stream2),write(Stream2,Synonym_list_a),close(Stream2)),!.string_to_list2(B,A1,A2) :- string_concat(D,"",B),string_length(D,1),append(A1,[D],A2),!.
paraphraser1(Codes,File_list_a) :-SepandPad=%".",%"&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xx%string_codes(String1,Codes),%string_to_list2(SepandPad,[],SepandPad1),string_codes(SepandPad,SepandPad1),%split_string2(String1,SepandPad1,File_list),split_on_substring117(Codes,SepandPad1,[],File_list),%split_string(String1,SepandPad,SepandPad,File_list),phrase_from_file_s(string(Codes2), "thesaurus.txt"),%trace,string_codes(String2,Codes2),atom_to_term(String2,Synonym_list,_),paraphrase1(File_list,[],File_list2a,Synonym_list,Synonym_list2),concat_list(File_list2a,File_list_a),term_to_atom(Synonym_list2,Synonym_list_a),(open_s("thesaurus.txt",write,Stream2),write(Stream2,Synonym_list_a),close(Stream2)),!.
paraphraser1(Codes,File_list_a) :-SepandPad=%".",%"&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xx%string_codes(String1,Codes),%string_to_list2(SepandPad,[],SepandPad1),string_codes(SepandPad,SepandPad1),%split_string2(String1,SepandPad1,File_list),split_on_substring117(Codes,SepandPad1,[],File_list),%split_string(String1,SepandPad,SepandPad,File_list),phrase_from_file_s(string(Codes2), "thesaurus.txt"),%trace,string_codes(String2,Codes2),atom_to_term(String2,Synonym_list,_),paraphrase1(File_list,[],File_list2a,Synonym_list,Synonym_list2),concat_list(File_list2a,File_list_a),term_to_atom(Synonym_list2,Synonym_list_a),(open_s("thesaurus.txt",write,Stream2),write(Stream2,Synonym_list_a),close(Stream2)),!.string_to_list2(B,A1,A2) :- string_concat(D,"",B),string_length(D,1),append(A1,[D],A2),!.
paraphraser2(Parameters,File_list_a,Auto) :-Auto=on,retractall(auto(_)),assertz(auto(Auto)),paraphraser(Parameters,File_list_a),!.
paraphraser_server :- paraphraser_server(8000).
paraphraser_server(Port) :-        http_server(http_dispatch, [port(Port)]).
paraphraser_server(Port) :-        http_server(http_dispatch, [port(Port)])./*browse http://127.0.0.1:8000/This demonstrates handling POST requests   */   paraphraser_web_form(_Request) :-retractall(html_api_maker_or_terminal(_)),assertz(html_api_maker_or_terminal(html %terminal )),working_directory(_,'../SSI/'),              format('Content-type: text/html~n~n', []),data(Header,Footer),format(Header,[]),Debug=off,%test_open_types_cases(4,Query,Types,Modes,Functions),%international_lucianpl([lang,"en"],Debug,Query,Types,Modes,Functions,_Result),%p2lpconverter([file,"../private/la_com_ssi1.pl"],List3),%testopen_cases(8,[[n,test]],List3),%test(1,Query,Functions,Result),% Form and HTML Table%test1(Functions),%Query=[[n,test]],%paraphraser_test(List3),para(List3),international_lucianpl([lang,"en"],Debug,[[n,paraphraser]],List3,_Result1),format(Footer,[])      .
parse_tokens(T,R,C,["(" | RestTokens], Stack, NestedList) :-    % Start a new sublist when encountering '('.
parse_tokens(T,R,C,[")" | RestTokens], [SubList | [PrevList | RestStack]], NestedList) :-    % End the current sublist when encountering ')'.
parse_tokens(T,R,C,[")" | RestTokens], [SubList | [PrevList | RestStack]], NestedList) :-    % End the current sublist when encountering ')'.    % Merge the sublist into the previous list or sublist.
parse_tokens(T,R,C,[Token | RestTokens], [SubList | RestStack], NestedList) :-    % Add regular tokens to the current sublist.
partner_and_children(Person,Children1) :- writeln(["Does",Person,"have a partner? (y/n)"]), read_string(user_input,"\n","\r",_,Partner1), (Partner1="n"->Children1=[]; (writeln(["Who is the partner of",Person,"?"]), read_string(user_input,"\n","\r",_,Partner), children(Person,Partner,Children), Children1=[Person-Partner,Children])). children(Person,Partner,Children) :- writeln(["Do",Person,"and",Partner,"have any children? (y/n)"]), read_string(user_input,"\n","\r",_,Children1), (Children1="n"->Children=[]; (writeln(["Who is the oldest child of",Person,"and",Partner,"?"]), read_string(user_input,"\n","\r",_,Child1), partner_and_children(Child1,Children3), children(Person,Partner,[[Child1,Children3]],Children))),!.
parts(Form,Instruments,Parts) :-parts1(Form,Instruments,[],Parts),!.
parts1(_Form,[],Parts,Parts) :- !.
passed(Score,Total,Result) :- P is (Score/Total)*100, (P < 50 -> Result='N'; (P < 65 -> Result='P'; (P < 70 -> Result='H3'; (P < 75 -> Result='H2B'; (P < 80 -> Result='H2A'; (P =< 100 -> Result='H1')))))).
path(Goal,Map,Map,Goal,Path,Path,Trail,Trail) :- !.
path(b,[[[a,b,c,d],[1,2,c,4]],[[e,d,f],[1,2,3]]],M,f,[],P).
path00(Start, End, Tree, Visited, Path) :-    member([Start, Ends], Tree),    member(Next, Ends),    %edge(Start, Next),    \+ member(Next, Visited),    path00(Next, End, Tree, [Next|Visited], Path).
path1(First,_A,Tree,A0,A1) :- member([First,[]],Tree), %member(Second1,Second), append(A0,[First],A1).
path2(L3,L2,_D4,_E4,_Goal4,Map,Map,_Goal6,Path,Path,Trail,Trail) :-L3 is L2+1,!.
paths(N,L,P,P) :- not(member([N,_],L)),!.paths(N,L,P1,P2) :- link(N,N2), delete(L,[N,_],L2), append(P1,[N2],P3), paths(N2,L2,P3,P2).
peace :- not(negative),positive.
pedagogy_possibilities(A,B) :-subtract([pilot,jobs,parent,pedagogue],A,B).
pedagogy_queue :-% check what's ahead% during the next daynumber_of_custs(Number_of_custs),% add to queueget_custs(Custs1),get_time(TS),stamp_date_time(TS,date(Year,Month,Day,_Hour2,_Minute2,_Seconda,_A,_TZ,_False),local),Day1 is Day+1,append(Custs1,[[Number_of_custs,Year,Month,Day1]],Custs2),term_to_atom(Custs2,String02a_b),string_atom(String02a_c,String02a_b),(open_s("custs.txt",write,Stream1),write(Stream1,String02a_c),close(Stream1)),!.process_pedagogy_queue :-% process queue - 250 br per person giving a copy of the 250 br% later: up to 4000 words of combophil gramm logget_custs(Custs1),get_time(TS),stamp_date_time(TS,date(Year,Month,Day,_Hour2,_Minute2,_Seconda,_A,_TZ,_False),local),((member([Number_of_custs,Year,Month,Day],Custs1),N is Number_of_custs*3, % As, detect when needed, graciously givetexttobr2(N))->true;true),delete(Custs1,[Number_of_custs,Year,Month,Day],Custs2),term_to_atom(Custs2,String02a_b),string_atom(String02a_c,String02a_b),(open_s("custs.txt",write,Stream1),write(Stream1,String02a_c),close(Stream1)),!.
people_care(Person,People_and_care,Care) :-member([Person,Care],People_and_care).
perfect(A) :- forall(member(B,A),B=1).
perimeter(X_lim,Y_lim,Perimeter) :- random_2d_shape(X_lim,Y_lim,Cs), % counts perimeter when exactly 1 block adjacent in spread out version X_lim1 is 2*X_lim+1, numbers(X_lim1,1,[],Xs), Y_lim1 is 2*Y_lim+1, numbers(Y_lim1,1,[],Ys), findall([X,Y,CC],(member(X,Xs),member(Y,Ys), X1 is floor((X+0)/2),X2 is (X+0)/2, Y1 is floor((Y+0)/2),Y2 is (Y+0)/2, (not((X1=X2,Y1=Y2))-> (one_neighbour(Cs,X,Y,CC)-> true;member([X,Y,CC],Cs)); member([X,Y,CC],Cs) )),Cs1), findall(V,(member([_,_,V],Cs1), number(V)),Cs2), sum(Cs2,Perimeter), print_grid(X_lim1,Y_lim1,Cs1).
personal_best(L,PB) :- sort(L,L2),L2=[PB|_].
pft_expand_types1(Data,Types1,Types2,VD1,VD2) :-get_lang_word("t",T),get_lang_word("atom",Dbw_atom),atom(Data),%=[T,Dbw_atom],%string(Data),(false%member([Dbw_atom,Data,N],VD1)->VD2=VD1;(get_data_n(N),append(VD1,[[Dbw_atom,Data,N]],VD2))),append(Types1,[[T,Dbw_atom,N,Data]],Types2),!.
pft_expand_types1(Data,Types1,Types2,VD1,VD2) :-get_lang_word("t",T),get_lang_word("string",Dbw_string),string(Data),%=[T,Dbw_string],%string(Data),(false%member([Dbw_string,Data,N],VD1)->VD2=VD1;(get_data_n(N),append(VD1,[[Dbw_string,Data,N]],VD2))),append(Types1,[[T,Dbw_string,N,Data]],Types2),!.
pft_expand_types1(Data1,Types1,Types2,VD1,VD2) :-Data1=[Data2|Data3],pft_expand_types1(Data2,Types1,Types3,VD1,VD3),pft_expand_types1(Data3,Types3,Types2,VD3,VD2),!.
pft_expand_types2([],Types,Types,VD,VD) :- !.
phil_tree(Strings,Tree) :-%SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",sort(Strings,Options1),abort_if_empty_string(Options1),%findall(Options2,(member(Options,Options1),%split_string(Options,SepandPad,SepandPad,Options2)),Options2a),string_to_list_a1(Options1,1,_,[],Options2),maplist(append,[Options2],[Options2a]),%writeln1(merge_lists1a(Options2,Options2a,Options3a)),make_mind_reading_tree4_a(Options2a,Tree).
phone([X1,Y1,M],[X2,Y2,M]):-writeln([[X1,Y1,M],[X2,Y2,M]]).email([A1,B1,C1,D1,E],[A2,B2,C2,D2,E]):-writeln([[A1,B1,C1,D1,E],[A2,B2,C2,D2,E]]).
phrase_from_file_s(string(Output), String) :-atom_string(String1,String),phrase_from_file(string(Output), String1),!.
physiological_time(T) :- findall(T1,physiological_time(_,T1),T2),sum(T2,T).
place3(Box_X,Box_Y,Box_Z,Grid1,Grid2,Shape_coords12) :- (place1(Box_X,Box_Y,Box_Z,Grid1,Grid3,Shape_coords12)-> place3(Box_X,Box_Y,Box_Z,Grid3,Grid2,Shape_coords12); Grid1=Grid2).
place_record(Place,Place_record,Record) :-member([Place,Record],Place_record).
plagiarism_checker :-SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%% file to checkphrase_from_file_s(string(String00a1), "file.txt"),string_codes(String02b1,String00a1),split_string(String02b1, ".\n\r", ".\n\r", String02c1),findall(String02e1,(member(A,String02c1),split_string(A, SepandPad, SepandPad, String02e1)),String02f1),%% files to check againstdirectory_files("sources/",F),delete_invisibles_etc(F,G),findall(String02f,(member(Filex1,G),string_concat("sources/",Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),split_string(String02b, ".\n\r", ".\n\r", String02c),findall(String02e,(member(B,String02c),split_string(B, SepandPad, SepandPad, String02e)),String02f)),String02g),writeln("Plagiarism Report: >= 5 Word Sentences with 80% same words\n"),findall(C,(member(C,String02f1),member(D,String02g),member(E,D),length(C,CL),CL>=5,similarity_score(C,E,S),S>=80,write(S),write("%\t"),writeln(C)),F1),%%trace,length(F1,FL),length(String02f1,GL),H is round(FL*100/GL),writeln(""),write("Overall score: "),write(H),writeln("%.").similarity_score(A,B,S) :-intersection(A,B,C),length(A,L1),length(C,L2),S is round(L2*100/L1).
playwright(A,B,C,D,E,F) :-random_member(D,A),random_member(E,B),random_member(F,C).
politeness(Threats1,Threats2):-%% "Given that we are interested in friendliness in primary school, secondary school and university, is there anything else?"mind_read(Answer,["Yes","No"]),%trialy2_6("Yes",R1),%trialy2_6("No",R2),%R=[R1,R2/**,R3,R4,R5,R6,R7,R8,R9,R10**,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27**/%],%sort(R,RA),%reverse(RA,RB),%RB=[[_,Answer]|_Rest],(Answer="No"->Threats2=Threats1;(Threats3 is Threats1+1,politeness(Threats3,Threats2))),!.
politeness(Threats1,Threats2):-%% "Given that we are interested in friendliness in primary school, secondary school and university, is there anything else?"trialy2_6("Yes",R1),trialy2_6("No",R2),R=[R1,R2/**,R3,R4,R5,R6,R7,R8,R9,R10**,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27**/],sort(R,RA),reverse(RA,RB),RB=[[_,Answer]|_Rest],(Answer="No"->Threats2=Threats1;(Threats3 is Threats1+1,politeness(Threats3,Threats2))),!.
popclassicalcomposition2(_, _, _, Counter, b, Progression, Progression) :-Counter = 3, !.popclassicalcomposition2(Note, _, Note, _, _, _, _) :- !.
popclassicalcomposition2(_, _, _, Counter, b, Progression, Progression) :-Counter = 4, !.
port_fairy :-port_fairy(Map),get_map_dimensions2d(Map),traverse(8,3,[],_,[],_,Map,_),!.
port_fairy :-port_fairy(Map),get_map_dimensions2d(Map),traverse(8,3,[],_,[],_,Map,_),!.
positive_sentences(Sentences) :-% get filephrase_from_file_s(string(String1),"file.txt"),% split into lines and sentencesSepandPad1="\n\r",SepandPad2="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string(String1,SepandPad1,SepandPad1,String2),% get negative termsphrase_from_file_s(string(BrDict0), "../../Text-to-Breasonings/brdict1.txt"),splitfurther(BrDict0,Term),findall(Word1,(member([Word1,Word2],Term),Word2="minus"),Negative_terms2),append(Negative_terms2,["minus"],Negative_terms),% find positive sentences%trace,findall(Sentence3,(member(Sentence1a,String2),string_atom(Sentence1,Sentence1a),split_string_onnonletter(Sentence1,".!?",Sentence2),%trace,%findall(Sentence3,(member(Sentence3,Sentence2),downcase_atom(Sentence3,String3a),string_atom(String3,String3a),%trace,split_string(String3,SepandPad2,SepandPad2,String4),forall(member(Item,String4),not(member(Item,Negative_terms))%string_concat(Sentence1,".",Sentence2)%)),Sentence4)),)),Sentences1a),delete(Sentences1a,[],Sentences).
postsong(0) :- !.
pp0_2(A,B) :-  retractall(pp_separate_comma(_)), assertz(pp_separate_comma("\n")), pp0(A,B),!.pp0_3(A,B) :-  retractall(pp_separate_comma(_)), assertz(pp_separate_comma("")), pp0(A,B),!.pp0(A,B) :-%/* ((pp_separate_comma(_PSC) %not(var(PSC)) )-> true;(retractall(pp_separate_comma(_)), assertz(pp_separate_comma("")))), %*/ pp01(A,B).
pp1([]):-!.pp1(List1) :-List1=[List2],(((List2=[[_Name,*,*]]->true;List2=[[_Name,*,*],_Variables]),write(List2),writeln(","))->true;(List2=[[Name,*,*],Variables1,(:-),Body]->(term_to_atom(Variables1,Variables2),concat_list("[[",[Name,",*,*],",Variables2,",(:-),"],String),writeln(String),writeln("["),pp2(Body),writeln("]]")))),!.
pp4_lp2p3_4(List2,String,B1) :-List2=[[_N1,Name],Symbol,Body],symbol_1_lp2p(Symbol,Symbol1),%term_to_atom(Variables1,Variables2),concat_list([Name,Symbol1,'\n'],String),%trace,pp_lp2p2(Body,'',B1,1).
pp4_lp2p3_5(List2,String) :-List2=[Symbol,[_,Word11],[Word13,"/",Word12]%,Varnames%N,],symbol_1_lp2p(Symbol,Symbol1),%term_to_atom(Variables1,Variables2),concat_list([Symbol1,Word11," ",Word13,"/",Word12],String).
pp4_lp2p3_6(List2,String) :-List2=[Symbol,[_,Word11],Variables1%N,],symbol_1_lp2p(Symbol,Symbol1),%term_to_atom(Variables1,Variables2),interpretstatementlp2p5(Variables1,'',Variables2,false),concat_list([Symbol1,Word11,'(',Variables2,')'],String).
pp_1(List,String) :-term_to_atom(List,Atom),atom_string(Atom,String).pp3(List1,S1,S3) :-pp_separate_comma(PSC),symbol_1(Symbol,Symbol1),List1=List2,(((List2=[[_N10,_Name]]->true;List2=[[_N10,_Name],_Variables]),term_to_atom(List2,List2a),concat_list([S1,List2a,PSC,',\n'],S3))->true;((List2=[":-",[_,_Word11],_Varnames%N,]%,N3;List2=[":-",[_,_Word11],[_Word13,"/",_Word12]%,Varnames%N,]),term_to_atom(List2,List2a),concat_list([S1,List2a,PSC,',\n'],S3))->true;((List2=[[N1,Name],Variables1,Symbol,Body]->(term_to_atom(Variables1,Variables2),concat_list([S1,'[[',N1,',',Name,'],',Variables2,PSC,',',Symbol1,',\n[',PSC],String),%trace,pp2(Body,'',B1,1),%string_concat(B1,",",B11),concat_list([String,B1,'\n]]',PSC,',\n'],S3)))->true;List2=[[N1,Name],Symbol,Body]->(%term_to_atom(Variables1,Variables2),concat_list([S1,'[[',N1,',',Name,']',PSC,',',Symbol1,',\n[',PSC],String),%trace,pp2(Body,'',B1,1),%string_concat(B1,",",B11),concat_list([String,B1,'\n]]',PSC,',\n'],S3)))),!.
pp_lp2p0([],'') :- !.
practise_layout(Sheet,Sheet1) :- findall([String2,"\n"],(member([Number,Type,_Number_of_gap_questions,List1,Number_of_gap_answers,Answers3],Sheet), %String1=Number, (Type=fill_the_gap-> (List1=[[Q,A]|_], concat_list([Number,". ",Q," (",A,")\n"],String2));  (Type=multi_choice_fill_the_gap-> (List1=[[Q,A]|_], concat_list([Number,". ",Q," (",A,")"%,"\n(a). ",A ,"\n"],String3), numbers(Number_of_gap_answers,1,[],Numbers), findall([String5,String4,"\n"],(member(Number1,Numbers), get_item_n(Answers3,Number1,String4), number_letter(Number_letter), member([Number1,String5],Number_letter)),String4), append([String3],String4,String2));  (Type=multi_choice_matching-> (%trace, List1=[[Q,A]|_], %append(List1,[Answers3],List2), List1=List2, length(List2,Length), Length1 is Length-1, numbers(Length1,0,[],N), findall(List31,( member(N1,N), length(L1,N1), append(L1,L2,List2), append(L2,L1,List31)),List321), random_permutation(List321,List32), %trace, findall(List35,(member(List34,List32), findall(List33,member([_,List33],List34),List35)),List3), length(List2,L31), concat_list([Number,". "],L3), numbers(L31,1,[],Numbers2), %trace, findall([String5,Item1," (",A1,")\n"],(member(N2,Numbers2), get_item_n(List2,N2,[Item1,A1]), number_letter2(Number_letter), member([N2,String5],Number_letter)),L4), %trace, findall([String5,Item1,"\n"],(member(N2,Numbers2), get_item_n(List3,N2,Item2),%trace, findall([String51,Item10," "],(member(N21,Numbers2), get_item_n(Item2,N21,Item10), number_letter2(Number_letter), member([N21,String51],Number_letter)),Item1), number_letter(Number_letter), member([N2,String5],Number_letter)),L5), append_list([L3,L4,L5],String2)))))),String6),  flatten(String6,List4), concat_list(List4,Sheet1),!.
pred_rest(Arity1,Rest) :-*/  % group clauses  delete(Pred_numbers0,[[n, query_box_1], _, _],Pred_numbers), group_clauses(Dependencies7d,Pred_numbers,Dependencies7d1), %length(AT133,AT133L), %numbers(AT133L,1,[],AT133N), % assign old or new labels to deps %trace,  findall1(LD1,(member(Dependencies7d2,Dependencies7d1), (Dependencies7d2=[loop1,Loop1a]-> (findall1([ON,CN,PN],(member(Loop1b,Loop1a),Loop1b=[CN,PN],(((member(PN,AT233N),member(PN,AT233N_old))->member(ON,[new,old]);(member(PN,AT233N)->ON=new;ON=old)))),Loop1c),LD1=[loop1,Loop1c]); (Dependencies7d2=[CN,PN],(((member(PN,AT233N),member(PN,AT233N_old))->member(ON,[new,old]);(member(PN,AT233N))->ON=new;ON=old),LD1=[ON,CN,PN])))),Dependencies7d5), %trace, %(once(member([[n, comment], 1, Comment_pred_ns3],Pred_numbers))->true;Comment_pred_ns3=[]), (once(member([":-", 1, Includes_pred_ns],Pred_numbers))->true; Includes_pred_ns=[]),% Find new comments%(Test_n1=2->trace;true), %findall1(AT133N1,(member(AT133N1,AT333N3),%get_item_n(AT333,AT133N1,[[n,comment]|_])),Comment_pred_ns),%trace, findall1(AT233N1,(member(AT233N1,AT333N3), get_item_n(AT333AH,AT233N1,AT233N2), member(AT233N2,AT133A), (AT233N2=[[n,comment]|_]->true;(AT233N2=[_,[[n,comment]|_]]%->true; %AT233N2=[_,[":-"|_]]) ))),Comment_pred_ns1), %trace, sort(Comment_pred_ns1,Comment_pred_ns),   append(Comment_pred_ns,Includes_pred_ns,Comment_pred_ns2),%findall1(Comment_pred_n,(member(Comment_pred_n,Comment_pred_ns),(member(Comment_pred_n,AT233N))),Comment_pred_ns2), % group into old, new clauses, loops%trace, /*   findall1(LD1A,(member(Dependencies7d2,Dependencies7d3), (Dependencies7d2=[loop1,Loop1a]->LD1A=[loop1,Loop1a];LD1A=Dependencies7d2)),Dependencies7d5), */ %foldr(append,Dependencies7d51,Dependencies7d5), %trace, group_into_clauses1(Comment_pred_ns2,Dependencies7d5,[],Dependencies7d4),/* % delete(Dependencies7d1,Comment_pred_ns,LD2) - delete all comments findall1(LD1,(member(Dependencies7d2,Dependencies7d4),* (Dependencies7d2=[loop1,Loop1a]-> (findall1(Loop1b,(member(Loop1b,Loop1a),Loop1b=[ON,CN,PN],not(member(PN,Comment_pred_ns))),Loop1c),LD1=[loop1,Loop1c]); (Dependencies7d2=[ON,CN,PN],not(member(PN,Comment_pred_ns))->LD1=Dependencies7d2)))),LD21),*/ % Choose predicates to test%trace,(Dependencies7d4=[]->Dependencies7d6=[];append([[[old,Old_a],[new,New_a]]],Dependencies7d6,Dependencies7d4)), findall1([new,_,Comment_pred_ns21],member(Comment_pred_ns21,Comment_pred_ns2),Comment_pred_ns22),%*  append(New_a,Comment_pred_ns22,Comment_pred_ns23), append(Old_a,Comment_pred_ns22,Comment_pred_ns24),   append([[[old,Comment_pred_ns24],[new,Comment_pred_ns23]]],Dependencies7d6,Dependencies7d7),%trace, findall1(_,( %trace, %success_tmp(Tmp32),(forall(member(Tmp4,Tmp32),Tmp4=1)->true;fail), %trace,  %trace, append(Curr_preds,_,Dependencies7d7%LD21 ), not(Curr_preds=[]),%trace,%writeln1(append(Curr_preds,_,Dependencies7d7)), (success(1)->fail;true), %trace,%writeln( append(Curr_preds,_,Dependencies7d7)), %trace, %length(Curr_preds,Curr_preds_L), %length(Dependencies7d7,Dependencies7d7_L), %writeln(append(Curr_preds_L,_,Dependencies7d7_L)), %(Curr_preds_L=2->trace;true), /* %append(Curr_preds,Comment_pred_ns2,LD4) - append new comments ** ld4 has no loops xxfindall1(LD31,(member(LD3,Dependencies7d4),LD3=[ON,CN,PN],(member(PN,Curr_preds)->LD31=LD3; (LD3=[loop1,Loop1a]-> (findall1(Loop1b,(member(Loop1b,Loop1a),Loop1b=[ON,CN,PN],member(PN,Comment_pred_ns2)),Loop1c),LD31=[loop1,Loop1c]);(LD3=[ON,CN,PN],member(PN,Comment_pred_ns2)->LD31=LD3)))),LD4),*/ %Curr_preds=[Curr_preds2], append(_Curr_preds1,[Curr_pred_n],Curr_preds), % cpn can include loop1  %findall1(LD51,(member([[old,_],[new,New_a]],Curr_preds%LD4 %),member(get_item_n(Dependencies7d,LD5,LD51)),AT1331),%loop* x%trace, Curr_pred_n=[[old,Old_a4],[new,New_a4]],%trace,%trace,  %list_to_set(Old_a,Old_a1), %list_to_set(New_a,New_a1), findall1([LD6,LD7,LD8],member([LD7,LD8,LD6],Old_a4),Old_a2), sort(Old_a2,Old_a3), findall1([LD7,LD8,LD6],member([LD6,LD7,LD8],Old_a3),Old_a1), findall1([LD6,LD7,LD8],member([LD7,LD8,LD6],New_a4),New_a2), sort(New_a2,New_a3), findall1([LD7,LD8,LD6],member([LD6,LD7,LD8],New_a3),New_a1),%trace, (true%c(i)%false%false%true t1-8, false t-T9 ->( findall1(LD52,(%member(LD51,Old_a%LD4 %), member([_,LD5a,LD5],Old_a1),(true%var(LD5a) ->get_item_n_catch(AT333AD1,LD5,LD52b);get_item_n_catch(AT333AD2,LD5a,LD52b)),((LD52b=[[n,PName]|Rest_x]%,not(PName=comment) )->(foldr(string_concat,["a",LD5,"_",PName],PName2),LD52=[[n,PName2]|Rest_x]);LD52=LD52b)),AT2331c),%trace, findall1(LD52,(%member(LD51,New_a%LD4 %), member([_,LD5a,LD5],New_a1),(true%var(LD5a) ->get_item_n_catch(AT333AD1,LD5,LD52b);get_item_n_catch(AT333AD2,LD5a,LD52b)),((LD52b=[[n,PName]|Rest_x]%,not(PName=comment) )->(foldr(string_concat,["a",LD5,"_",PName],PName2),LD52=[[n,PName2]|Rest_x]);LD52=LD52b)),AT1331c) );(findall1(LD52,( %), member([_,_,LD5],Old_a1),get_item_n(AT333AD,LD5,LD52)),AT2331c),%trace, findall1(LD52,(%member(LD51,New_a%LD4 %), member([_,_,LD5],New_a1),get_item_n(AT333AD,LD5,LD52)),AT1331c) )), %trace, %list_to_set1(AT2331c1,AT2331c), %list_to_set1(AT1331c1,AT1331c), %loop* x/* findall1(LD52,(member(Old_a1,Curr_preds1),member(LD51,Old_a1%LD4 ),member([_,_,LD5],LD51),member(get_item_n(Dependencies7d,LD5,LD52)),AT2331), findall1(LD52,(member(New_a1,Curr_preds1),member(LD51,New_a1%LD4 ),member([_,_,LD5],LD51),member(get_item_n(Dependencies7d,LD5,LD52)),AT1331),*/ % merge, build, test each level of preds, saving progress  % merge only curr pred, put back in list, save changes  % comments %pwd, %trace, %trace, writeln(here1), time(pp0_1(AT2331c,AT234)), %term_to_atom(AT234,AT2341), split_string(AT234,"\n","\n",AT23), time(pp0_1(AT1331c,AT134)), %term_to_atom(AT134,AT1341), split_string(AT134,"\n","\n",AT13), %,trace %)->true;(writeln("fault"),fail)),%trace,% %writeln(merge2(AT23,AT13,T4)),%trace,writeln(here1a), time(merge2(AT23,AT13,T4)),%),T5),  %findall1(XXX,(member(XXX1,T4),foldr(string_concat,XXX1,XXX2),catch(term_to_atom(XXX3,XXX4),_,fail),%pp0(XXX3,XXX4), %lp2p1(XXX4,XXX),nl),XXX3), %writeln(XXX3), %trace, %writeln(merge2(AT23,AT13,T4)),%trace,% get all files, choose ones that are deps of a rep (success(1)->fail;true), %success_tmp(Tmp33),(forall(member(Tmp4,Tmp33),Tmp4=1)->true;fail),%trace,/*foldr(string_concat,["rm -rf ../private2/luciancicd-testing/"],Command3), catch(bash_command(Command3,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],Text4),writeln1(Text4),abort )),*/ % find deps %trace, findall1(_%Results%[PZ,FZ,T10] ,( %writeln(member(T44,T4)), member(T44,T4),%trace,writeln([*,T44]), (success(1)->fail;true),%trace, % (Curr_preds_L=2->trace;true), %foldr(string_concat,T44,T48), pred_list(Pred_list2), foldr(string_concat,T44,T451), catch(term_to_atom(T49,T451),_,fail),%not(T49=[]), %writeln([*,T49]), %trace, %not((forall(member(XY,T49),(XY=[[n,comment]|_]->true;XY=[":-"|_])))), %pp0(T49,T47),%trace, %put_in_nums(T49,AT333,T491), % leave exact comments, includes x%trace, findall1([_,T4911],(member(T4911,T49)%,process_subtract([_,T4911],T49112) ),T491), append(Pred_list2,T491,T4731),%trace, put_in_order(T4731,AT333B,T47), % leave exact comments, includes x T47=T471, findall1(XXX1,(member([XXX3,[[n,PName]|Rest_x]],T471),foldr(string_concat,["a",XXX3,"_",PName],PName2),XXX1=[_,[[n,PName2]|Rest_x]]),T471A), %writeln1([t471,T471]), %sort(T47,T471), % leave comments, includes x findall1(T472,member([_,T472],T471),T473), % strip nums  writeln(here2), %trace, working_directory1(Here2,Here2), home_dir(Here2a), working_directory1(_,Here2a),  time((term_to_atom(T473,T4731a), %foldr(string_concat,["#!/usr/bin/swipl -g main -q\n\n",":-include('../Prolog-to-List-Prolog/p2lpconverter.pl').\n","handle_error(_Err):-\n  halt(1).\n","main :-\n    catch((pp0_3(",T4731a,",T501),term_to_atom(T501,T50), write(T50)),Err, handle_error(Err)), nl,\n    halt.\n","main :- halt(1).\n"],String_pp0_3), foldr(string_concat,["catch(pp0_3(",T4731a,",T50),_,false)"],String_pp0_3),%foldr(string_concat,[%"../private2/luciancicd-testing/",Repository1b,"/",Go_path5,%"tmp.pl"],GP_pp0_3),%string_concat(Go_path,"testcicd.pl",GP),%open_s(GP_pp0_3,write,S1_pp0_3),%write(S1_pp0_3,String_pp0_3),close(S1_pp0_3),%foldr(string_concat,["chmod +x ",GP_pp0_3,"\n","swipl -g main -q ./",GP_pp0_3],S3_pp0_3),%,term_to_atom(String_pp0_3_t,String_pp0_3),((String_pp0_3_t,arg(1, String_pp0_3_t, Value),arg(2, Value, T50))%(catch(bash_command(S3_pp0_3,T502), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."%],_),%writeln1(Text4),%fail%abort %)),term_to_atom(T503,T502))%sd2(R110,Tests1,RTests,R1,To_m_1,Repository_root_path,Repository,Gitl_data_path1,N,R1,N_path,To,HTML) ->true;%T50=T503; writeln("Couldn't run pp0_3."),fail)%,%HTML1="Identical"),%delete_tmp)), working_directory1(_,Here2), %time(pp0_3(T473,T50)),  %pp0_1(T46,T47), %term_to_atom(AT234,AT2341), split_string(T50,"\n","\n",T45),  %writeln(member(T44,T4)),/* pred_list(Pred_list2), %trace, ((%false, not(Pred_list2=[]),not(Pred_list2="[]"), not(T44=[]),not(T44="[]"))->  (Pred_list2=["["|Pred_list222], append(Pred_list223,["]"],Pred_list222), T44=["["|T444], foldr(append,[["["],Pred_list223,[","],T444],T45),notrace); %foldr(append,[Pred_list2,[Poss_comma],T44],T45); (foldr(append,[Pred_list2,T44],T45))), notrace, % assuming T44 is a list of preds */ findall1([T51,"\n"],member(T51,T45),T522),%append(T522,[_],T52), %trace, flatten(T522,T53), foldr(string_concat,T53,T5), term_to_atom(T7,T5),split_into_lp_files(T7,T8),    (success(1)->fail;true), %success_tmp(Tmp34),(forall(member(Tmp4,Tmp34),Tmp4=1)->true;fail),%trace, writeln2(""),writeln2("**********"),writeln2(["Installing Combination"]),test_n(Test_n),Test_n1 is Test_n+1,retractall(test_n(_)),assertz(test_n(Test_n1)),%writeln([test_n1,Test_n1]), %test_n(Test_n0), %(Test_n0=1->trace;true),%(Test_n1=5->trace;true), findall1(_,(member([[[n, comment], [["File delimiter", PZ, FZ]]]|T10],T8),  (success(1)->fail;true), %success_tmp(Tmp35),(forall(member(Tmp4,Tmp35),Tmp4=1)->true;fail), writeln2(""),%writeln("**********"),writeln2(["Installing",PZ, FZ%Repository1]), %pwd,  working_directory1(_,A1),%pwd, %writeln(["Installing dependency path",PZ,"file"%dependency" %,FZ]), % path %trace, string_concat("../../Github_lc/",PZ1,PZ), foldr(string_concat,[LCTD,"/",PZ1%,"/" ],K212), % only want some reps files (exists_directory_s(LCTD)->true;make_directory_s(LCTD)), %(exists_directory_s(K212)->true;make_directory_s(K212)), make_directory_recursive_s(LCTD,PZ1), %trace, working_directory1(_,K212), %trace, % clear dir ***%<<<<<<< Updated upstream%======= %pp_lp2p0(T10,T11),%>>>>>>> Stashed changes%trace, lp2p1(T10,T11), %trace, %findall1(_,(member([K2,Mod_time52],Mod_times),open_s(FZ,write,S0),write(S0,T11),close(S0)%writeln([write(FZ,T11)]),sleep(2)%),_),!.
predicate(A) -->name1(Word11), ".", {A=[[[n,Word11]]]}.
predicate(A2) -->":-",newlines1(_),name1(Word11),"(",newlines1(N1),varnames(Varnames),")",newlines1(N2),%":-",%newlines1(N3),%{trace},%lines(L), ".",{foldr(append,[[[":-",[n,Word11],Varnames%N,]],N1,N2%,N3],A2)%delete(A,[],A2)}.
predicate_or_rule_name_or_terminal(A) :-predicate_or_rule_name(A).
pregnancy_meditation(Result) :- findall([Person,Time],(member(Person,[mother,father]),member(Time,[before,during,after])),Result).
present_algorithm_report(Query,Algorithm0,Result,Report) :-(Query=[[n,Name]|_]->true;(Query=[[[n,Name]|_]|_])),pretty_print(Algorithm0,Algorithm),atomic_list_concat(Algorithm2,"\"\"",Algorithm),atomic_list_concat(Algorithm2,"\"",Algorithm1),term_to_atom(Result,Result1),term_to_atom(Query,Query1),Optional_questions=true,(Optional_questions=true->(ask("What limitations does the algorithm have?",Limitations),ask("What possible future developments does the algorithm have?",Future_developments),ask("How can the algorithm be automated?",Automated),concat_list(['Report on algorithm: ',Name,'\n\n','Query:','\n',Query1,'\n\n','Result:','\n',Result1,'\n\n','Algorithm:','\n',Algorithm1,'\n\n','Limitations:','\n',Limitations,'\n\n','Future developments:','\n',Future_developments,'\n\n','Automated:','\n',Automated,'\n\n'],Report));(concat_list(['Report on algorithm: ',Name,'\n\n','Query:','\n',Query1,'\n\n','Result:','\n',Result1,'\n\n','Algorithm:','\n',Algorithm1,'\n\n'],Report))),writeln(Report),!.
pretty_print(List,String) :-(pp0(List,String)->true;pp_1(List,String)).
pretty_print2(dfs_in_order,Items1,B) :- pretty_print_dfs_in_order(Items1,0,[],A), insert_vertical_lines(A,4,B).
pretty_print_dfs_in_order((Item7,Item4,Item8),N) :- N1 is N+1, pretty_print_dfs_in_order(Item7,N1), numbers(N,1,[],Ns), findall(_,(member(_,Ns),write(" ")),_), writeln(Item4), pretty_print_dfs_in_order(Item8,N1),!.pretty_print_dfs_in_order(null,_) :- !.
pretty_print_dfs_in_order(null,_,A,A) :- !.
pretty_print_dfs_post_order((Item7,Item4,Item8),N) :- N1 is N+1, pretty_print_dfs_post_order(Item7,N1), pretty_print_dfs_post_order(Item8,N1), numbers(N,1,[],Ns), findall(_,(member(_,Ns),write(" ")),_), writeln(Item4),!.
pretty_print_dfs_pre_order((Item7,Item4,Item8),N) :- numbers(N,1,[],Ns), findall(_,(member(_,Ns),write(" ")),_), writeln(Item4), N1 is N+1, pretty_print_dfs_pre_order(Item7,N1), pretty_print_dfs_pre_order(Item8,N1),!.pretty_print_dfs_pre_order(null,_) :- !.
pretty_print_list([A|D],T,B,C) :- T1 is T+1, spaces(T,S), (is_list(A)->(pretty_print_list(A,T1,"",G),  delete_last_n(B,1,B1),  (G=""->G1=G;delete_last_n(G,2,G1)),foldr(string_concat,[B1,"\n",S,"[","\n",G1,"\n",S,"],\n"],F)); ( foldr(string_concat,[B,S,A,",\n"],F) )), pretty_print_list(D,T,F,C),!.
pretty_print_list([],"[]") :- !.pretty_print_list(A,B) :- pretty_print_list(A,1,"[\n",B1), delete_last_n(B1,2,B3), string_concat(B3,"\n]",B),!.
pretty_print_lp2p(List,String) :-(pp_lp2p0(List,String)->true;pp_lp2p_1(List,String)).
pretty_print_table(B3,S6) :- findall([S6,','],(member(A00,B3), pretty_print_table2(A00,S5),     %), findall([A,C],(member(A,S5),(A=','->C='\n';C='')),S2),  flatten([%S1, S2%,S3 ],S4), foldr(string_concat,S4,S6) ),B4),S1="[\n",S3="\n]", foldr(append,B4,B1),append(B2,[_],B1),   flatten([S1,B2,S3],B5), foldr(string_concat,B5,S6),!.
pretty_print_table2(B0,S4) :- findall([A,','],member(A,B0),B), foldr(append,B,B1),append(B2,[_],B1), S1=("[\n"), findall([A2,C],(member(A,B2),(A=','->A=A2;term_to_atom(A,A2)),(A=','->C='\n';C='')),S2), S3="\n]", flatten([S1,S2,S3],S4), !.
prettyprint1A(_C,0) :- !.
prettyprint_3d_1_e(_C,0,_X,_Z) :- !.
print_grid(Grid,X,Y) :-numbers(Y,1,[],YN1),reverse(YN1,YN),numbers(X,1,[],XN),findall(_,(member(Y1,YN),nl,member(X1,XN),member([X1,Y1,Pixel1],Grid),(Pixel1=[*]->Pixel="*";Pixel=" "),write(Pixel)),_).
print_heading(String,L,S) :- string_length(String,SL1), lettering_spacing(L,SL1,S1), numbers(SL1,1,[],SLN), string_strings(String,Strings), findall([SLN1,S2],(member(SLN2,SLN), get_item_n(Strings,SLN2,S2), SLN1 is floor(SLN2*S1)),S3), numbers(L,1,[],LN), findall(S5,(member(LN1,LN), (member([LN1,S4],S3)->S5=S4;S5=" ")),S6), findall(S7,(member(S8,S6),atom_string(S7,S8)),S9), string_chars(S,S9),!.
print_map_path(Grid1,X,Y,X2,Y2) :-member([X2,Y2,Pixel1],Grid1),append(Pixel1,[+],Pixel2),delete(Grid1,[X2,Y2,_],Grid2),append(Grid2,[[X2,Y2,Pixel2]],Grid3),findall([X3,Y3],path([X3,Y3]),Path),print_map_path1(Grid3,Grid,Path),numbers(Y,0,[],YN1),reverse(YN1,YN),numbers(X,0,[],XN),findall(_,(member(Y1,YN),nl,member(X1,XN),member([X1,Y1,Pixel],Grid),%(Pixel1=[*]->Pixel="*";Pixel=" "),write(Pixel),write("\t")),_),nl.
print_map_path3d(Grid1,X,Y,Z,X2,Y2,Z2) :-member([Z2,X2,Y2,Pixel1],Grid1),append(Pixel1,[+],Pixel2),delete(Grid1,[Z2,X2,Y2,_],Grid2),append(Grid2,[[Z2,X2,Y2,Pixel2]],Grid3),findall([Z3,X3,Y3],path([Z3,X3,Y3]),Path),print_map_path3d1(Grid3,Grid,Path),numbers(Y,0,[],YN1),reverse(YN1,YN),numbers(X,0,[],XN),numbers(Z,0,[],ZN1),reverse(ZN1,ZN),findall(_,(member(Z1,ZN),nl,nl,member(Y1,YN),nl,member(X1,XN),member([Z1,X1,Y1,Pixel],Grid),%(Pixel1=[*]->Pixel="*";Pixel=" "),write(Pixel),write("\t")),_),nl.
print_report :-phrase_from_file_s(string(String00a), "phil_desc_connections.txt"),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),findall(_,(member([Philosophy_description1,Philosophy_description2,S12,S2,S3,S42],String02a),nl,write("Philosophy description 1: "),writeln(Philosophy_description1),write("Philosophy description 2: "),writeln(Philosophy_description2),write("Ignored: "),writeln(S12),write("Term transformed in Philosophy description 1: "),writeln(S2),write("Term transformed to in Philosophy description 2: "),writeln(S3),write("Way(s) it is transformed: "),writeln(S42)),_).
print_report :- open_string_file_s("aa_log.txt",File_string), term_to_atom(File_string2,File_string), sort(File_string2,File_string22), reverse(File_string22,File_string21), length(File_string21,L), numbers(L,1,[],Ls), findall(_,(member(L1,Ls),get_item_n(File_string21,L1,A),writeln([L1|A])),_),!.
printer(S,Width,%A,B,CL%Justified_line) :- string_length(S,L),B is Width div L,A is Width mod L, atomic_list_concat(C,' ',S), foldr(string_concat,C,CC), string_length(CC,CCL), length(C,CL), append(C1,[C2],C), string_length(C2,C2L), A1 is (Width-CCL%+C2L ) div (CL-1), %A2 is (10-L%+C2L %) mod (CL-1), (B>=1->(numbers(A1,1,[],N),findall(' ',member(_,N),D),foldr(string_concat,D,'',E), append(C1,[''],C3), atomic_list_concat(C3,E,Justified_line1), string_length(Justified_line1,JL), A3 is Width-JL-C2L, numbers(A3,1,[],N1),findall(' ',member(_,N1),D2),%append(D1,[E],D2), foldr(string_concat,D2,'',E1), foldr(string_concat,[Justified_line1,E1,C2],Justified_line) ); Justified_line=S),!.
printheader(Voicetrack,Vocalstubinstrument,Song1,Song2) :-Vocalstubinstrument=[N1,_],N2 is N1+1,concat_list("BA    1   CR         0   TR  ",[Voicetrack,"   CH  ",Voicetrack,"   Instrument ",N2,"\nBA    1   CR         0   TR  ",Voicetrack,"   CH  ",Voicetrack,"   NT  R            0   von=127   voff=0\n"],Song3),string_concat(Song1,Song3,Song2).
printheader(Voicetrack,Vocalstubinstrument,Song1,Song2) :-Vocalstubinstrument=[N1,_],N2 is N1+1,concat_list3("BA    1   CR         0   TR  ",[Voicetrack,"   CH  ",Voicetrack,"   Instrument ",N2,"\nBA    1   CR         0   TR  ",Voicetrack,"   CH  ",Voicetrack,"   NT  R            0   von=127   voff=0\n"],Song3),string_concat(Song1,Song3,Song2).
problem :-random(X),X1 is floor(X*2),X1=0.
process1(Input1,To_lang,String1,String2) :-Input1=[A,B|Rest],split_string1(A,["<",">"],Input2),process2(Input2,To_lang,String1,String3),catch(term_to_atom(B1,B), _, (concat_list(["Error: Couldn't translate list prolog: ",B],N),writeln(N),abort)),retractall(from_lang2(_)),assertz(from_lang2("en")),retractall(to_lang2(_)),assertz(to_lang2(To_lang)),(data([B1],[],[B2])->true;(concat_list(["Error: Couldn't translate list prolog: ",B],N),writeln(N),abort)),%trace,%trace,%writeln1(B2),catch(%term_to_atompretty_print(B2,B3), _, (concat_list(["Error: Couldn't translate list prolog: ",B3],N_A),writeln(N_A),abort)), % change back to not with catchconcat_list([String3,"`",B3,"`"],String4),writeln("****"),writeln(String4),process1(Rest,To_lang,String4,String2),!.
process_directory(K,%G, Top_level,%Mod_time1, Mod_time61) :-%G=K,%/*findall1(K4,(member(K1,K), directory_files(K1,F),delete_invisibles_etc(F,G),%*/findall1(Mod_time3,(member(H,G),not(string_concat("dot",_,H)),%not(member(H,Omit)),foldr(string_concat,[K1,H],H1),% if a file then find modification date% if a folder then continue finding files in folder(exists_directory(H1)->(string_concat(H1,"/",H2),process_directory([H2],%[H], false,%[],%Omit % only omit top level dirs xx %Mod_time1, Mod_time3) %foldr(append,Mod_time31,Mod_time3) );(time_file(H1,Mod_time4),%trace,%append(Mod_time1,[[H1,Mod_time4]],Mod_time3)))Mod_time3=[[H1,Mod_time4]]))),Mod_time5),%trace,foldr(append,Mod_time5,Mod_time51),%Mod_time5=Mod_time51,(Top_level=true%not(Omit=[]) % at top level->(term_to_atom(Mod_time51,Mod_time52),string_concat(K3,"/",K1),foldr(string_concat,["../luciancicd-data/mod_times_",K3,".txt"],K2),K4=[K2,Mod_time52]%open_s(K2,write,S),%write(S,Mod_time52),close(S)%writeln(["*",K2,%Mod_time52]%));K4=Mod_time51)),Mod_time6),(%not(Omit=[])->Top_level=true->Mod_time6=Mod_time61;foldr(append,Mod_time6,Mod_time61)),!.
process_directory_ff(K,%G, Top_level,%Mod_time1, Mod_time61) :-%G=K,%/*findall(K4,(member(K1,K), directory_files(K1,F),delete_invisibles_etc(F,G),%*/findall(Mod_time3,(member(H,G),%not(string_concat("dot",_,H)),%not(member(H,Omit)),foldr(string_concat,[K1,H],H1),% if a file then find modification date% if a folder then continue finding files in folder(exists_directory(H1)->(string_concat(H1,"/",H2),process_directory_ff([H2],%[H], false,%[],%Omit % only omit top level dirs xx %Mod_time1, Mod_time3) %foldr(append,Mod_time31,Mod_time3) );(open_string_file_s(H1,Tests31),Mod_time3=[[H1,Tests31]]%time_file(H1,Mod_time4),%trace,%append(Mod_time1,[[H1,Mod_time4]],Mod_time3)))%Mod_time3=[[H1,Mod_time4]]))),Mod_time5),%trace,foldr(append,Mod_time5,Mod_time51),%Mod_time5=Mod_time51,(Top_level=true%not(Omit=[]) % at top level->(%term_to_atom(Mod_time51,Mod_time52),Mod_time51=Mod_time52,%string_concat(K3,"/",K1),%foldr(string_concat,["../private2/luciancicd-data/mod_times_",K3,".txt"],K2),K4=%K2,Mod_time52%open_s(K2,write,S),%write(S,Mod_time52),close(S)%writeln(["*",K2,%Mod_time52]%));K4=Mod_time51)),Mod_time6),(%not(Omit=[])->Top_level=true->Mod_time6=Mod_time61;foldr(append,Mod_time6,Mod_time61)),!.
process_directory_remove_end_comment(K,%G, Top_level,%Mod_time1, Mod_time61) :-%G=K,%/*findall1(K4,(member(K1,K), directory_files(K1,F),delete_invisibles_etc(F,G),%*/findall1(Mod_time3,(member(H,G),%not(string_concat("dot",_,H)),%not(member(H,Omit)),foldr(string_concat,[K1,H],H1),% if a file then find modification date% if a folder then continue finding files in folder(exists_directory(H1)->(string_concat(H1,"/",H2),process_directory_remove_end_comment([H2],%[H], false,%[],%Omit % only omit top level dirs xx %Mod_time1, Mod_time3) %foldr(append,Mod_time31,Mod_time3) );(time_file(H1,T),(string_concat(_,".pl",H1)->remove_end_comments1(H1,Mod_time4);open_string_file_s(H1,Mod_time4)),%trace,%append(Mod_time1,[[H1,Mod_time4]],Mod_time3)))Mod_time3=[[H1,Mod_time4,T]]))),Mod_time5),%trace,foldr(append,Mod_time5,Mod_time51),%Mod_time5=Mod_time51,(Top_level=true%not(Omit=[]) % at top level->(term_to_atom(Mod_time51,Mod_time52),string_concat(K3,"/",K1),foldr(string_concat,[K3,".txt"],K2),K4=[K2,Mod_time52]%open_s(K2,write,S),%write(S,Mod_time52),close(S)%writeln(["*",K2,%Mod_time52]%));K4=Mod_time51)),Mod_time6),(%not(Omit=[])->Top_level=true->Mod_time6=Mod_time61;foldr(append,Mod_time6,Mod_time61)),!.
process_directory_tests(K,%G, Top_level,%Tests1, Tests61) :-%G=K,%/*findall1(K4,(member(K1,K), %exists_directory(K1),directory_files(K1,F),delete_invisibles_etc(F,G),%*/findall1(Tests3,(member(H,G),not(string_concat("dot",_,H)),%not(member(H,Omit)),foldr(string_concat,[K1,H],H1),% if a file then find modification date% if a folder then continue finding files in folder(exists_directory(H1)->(string_concat(H1,"/",H2),process_directory_tests([H2],%[H], false,%[],%Omit % only omit top level dirs xx %Tests1, Tests3) %foldr(append,Tests31,Tests3) );(string_concat(_,".pl",H)->(find_tests(K1,H,H1,Tests3)%p2lpconverter([file,H1],LP),%time_file(H1,Tests4),%trace,%append(Tests1,[[H1,Tests4]],Tests3)))%Tests3=[[H1,Tests]]);(Tests3=[])))),Tests5),%trace,foldr(append,Tests5,Tests51),%Tests5=Tests51,(%true%Top_level=true%not(Omit=[]) % at top level->(findall1([T1,',\n'],(member([T,TT,TTT],Tests51),foldr(atom_concat,["[","\"",T,"\"",",","\"",TT,"\"",",",TTT,"]"],T1)%term_to_atom(T,T1)),T2),flatten(T2,TT2),foldr(atom_concat,TT2,T21),(T2=[]->T6=[];(string_concat(T4,T5,T21),string_length(T5,2),foldr(string_concat,["[","\n",T4,"\n","]"],T6))),%term_to_atom(Tests51,Tests52),string_concat(K3,"/",K1),foldr(string_concat,["../luciancicd-cicd-tests/tests_",K3,".txt"],K2),K4=[K2,T6]%open_s(K2,write,S),%write(S,Tests52),close(S)%writeln(["*",K2,%Tests52]%);(%trace,K4=Tests51))),Tests6),(%not(Omit=[])->Top_level=true->Tests6=Tests61;(%trace,foldr(append,Tests6,Tests61))),!.
process_rhythm(A,C) :- process_rhythm1(Replacements), atom_string(A1,A), process_rhythm2(Replacements,A1,D1), atom_string(D1,C),!.
process_sentences(N,NA2,Sentences1,List2,Connections1,Connections2a1, Connectives,Connectives1a11) :-%findall(*,(member(Item,N),get_item_n(Sentences1,N,Item1),get_item_n(List2,N,Item2),Item2=[Verb|Words],% * check for verb v(member([[Verb|_],_],Connections1)->Verb1=Verb;(%repeat,term_to_atom(Item1,Item11),concat_list(["What is the verb in : ",Item11," ?"],Notification4),writeln(Notification4),read_string(user_input, "\n", "\r", _End4, Input4),(Input4=""->(fail);Verb1=Input4))),% * don't forget to add to connectives v% * ask if agree with corr,Connections x%  - helps ensure algs are different%trace,findall(Word4,(member(Word3,Words),((member([[_|Words1],_],Connections1),member(Word3,Words1))->Word4=[noun,Word3];(member(Word3,Connectives)->Word4=[connective,Word3];Word4=[undef,Word3]))),Word5),findall(Word6,member([undef,Word6],Word5),Word7),findall(Word6,member([noun,Word6],Word5),Word7a),findall(Word6,member([connective,Word6],Word5),Word7b),append(Connectives,Word7b,Connectives1a1),sort(Connectives1a1,Connectives1a),%trace,(Word7=[]->Input5a=[];(%repeat,%findall(Input5a,(%member([undef,Word6]*,Word5),term_to_atom(Word7,Word71),term_to_atom(Word7a,Word7a1),concat_list(["What are the nouns in : ",Word71,"\n","apart from ",Word7a1," ?"],Notification5),writeln(Notification5),read_string(user_input, "\n", "\r", _End5, Input5),(Input5=""->(fail);(split_string(Input5,",. ",",. ",Input5a),((forall(member(Input5b,Input5a),member(Input5b,Word7)),forall(member(Input5b,Input5a),not(member(Input5b,Word7a))))->true;(concat_list(["Error: Please enter only words in the list : ",Word7,"\n and not in the list : ",Word7a,"."],Notification6),writeln(Notification6),fail)))))),%))),Input5c),%trace,subtract(Word7,Input5a,New_connectives),append(Connectives1a,New_connectives,Connectives1),append(Word7a,Input5a,Word7aa), % All nouns in sentenceintersection(Item2,Word7aa,Word7ab), % All nouns in sentence in order% v1 c1 w1 c2 c2% [1,c1,2,cw,3]% get map for Goal% [1,2,for,3]%append([Verb1],)length(Item2,Length2),numbers(Length2,1,[],N2),%trace,%append([-],Word7ab,Word7ab1),findall(Item4,(member(N3,N2),get_item_n(Item2,N3,Item3),(Item3=Verb1->%VerbItem4=1;(member(Item3,Connectives1)->%ConnectivesItem4=Item3);(%trace,member(Item3,Word7ab)->%Noun(get_n_item(Item2,Item3,N4),Item4=N4)))),Item5),%trace,%maplist(append,[List2],[List21]),append(Connections1,[[Item2,Item5]],Connections2a),sort(Connections2a,Connections2),%trace,/*path(b,[[[a,b,c,d],[1,2,c,4]]],M,d,[],P).
process_strings(Strings,Strings2) :-findall(String2,(member(String,Strings),process_strings1(String,[],String2)),Strings2).
process_strings1("",String,String) :- !.
productivity(Plus,Minus) :- findall(Name,productivity(Name,A,A),Plus), findall(Name,(productivity(Name,A,B),not(A=B)),Minus).
productivity(a,2,2).
professor_algorithm("Plus item.", A).
prompt(Prompt,String) :-writeln(Prompt),read_string(user_input, "\n", "\r", _End, String).
psychoanalyst :-faces(Faces),random(X),N is ceiling(6*X),get_item_n(Faces,N,Face),findall(_,(member(Line,Face),writeln(Line)),_),sleep(2),get_item_n(Faces,5,Face2),findall(_,(member(Line,Face2),writeln(Line)),_),sleep(2),questions(Questions),random(Y),M is ceiling(8*Y),get_item_n(Questions,M,Question),writeln(Question),read_string(user_input,"\n\r","\n\r",_,_S),psychoanalyst.
put_TN(Dbw_type,Ns,L1,L2,TN1,TN2) :- get_lang_word("t",T),  % in [1,2],[3,4] compares 1-3, then 2-4  % in [1,1],[2,2] in these if 1=1 then 2 must =2 % in [1,2],[3,3] in these if 3=3 then 1 must equal 2 - fails  % puts var into all places of var to replace % fails if incompatible (Ns=[[N,_Data]]->(append(TN1,[[[T,Dbw_type,0 %end %,end ],[T,Dbw_type,N %,Data ]]],TN2),L1=L3); (Ns=[[N1,_Data1],[N2,Data2]|N3]->append(TN1,[[[T,Dbw_type,N1%,Data1 ],[T,Dbw_type,N2%,Data2 ]]],TN3), put_TN2(T,Dbw_type,[[N2,Data2]|N3],L1,L3,TN3,TN2))),  append(_,[[N4,Data3]],Ns), append(L3,[T,Dbw_type,N4,Data3],L2).
put_TN2(_T,_Dbw_type,[],L,L,TN,TN) :- !.put_TN2(_T,_Dbw_type,[_],L,L,TN,TN) :- !.
put_item_n(Exposition,Number1,Item2,Exposition2) :-Number2 is Number1-1,length(List,Number2),append(List,[_Item1|Rest],Exposition),append(List,[Item2|Rest],Exposition2),!.
put_item_ns(A,[],A) :- !.put_item_ns(A,BCs,D) :- BCs=[[B,C]|BCs2], put_item_n(A,B,C,E), put_item_ns(E,BCs2,D).
put_sub_term_wa(A,B,C,D) :- dynamic(stwa_smooth/1), (stwa_smooth(_)->true; retractall(stwa_smooth(_)), assertz(stwa_smooth(off))),  put_sub_term_wa2(A,B,C,D),!.
put_sub_term_wa1(List,Ns,L1,L2) :- Ns=[N], (stwa_smooth(on)-> (N1 is N-1, length(L,N1), length(L1,N3), N2 is N3-N, length(L3,N2), append(L,L4,L1), append(_,L3,L4), foldr(append,[L,List,L3],L2)); put_item_n(L1,N,List,L2)),!.
put_sub_term_wa2(List,[1],_L1,List) :- !.put_sub_term_wa2(List,[_|Ns],L1,L2) :- put_sub_term_wa1(List,Ns,L1,L2),!.
put_subterm_wa(Item, Address, Term1, Term2) :-put_sub_term_wa(Item, Address, Term1, Term2).
put_subterm_wa_smooth(Item, Address, Term1, Term2) :-put_sub_term_wa_smooth(Item, Address, Term1, Term2).
putvalue_equals41(Variable,Value,Vars1,Vars2) :-%get_lang_word("v",Dbw_v),remember_and_turn_off_debug(Debug),%find_sys(Sys_name),        (interpretpart(match4,Variable,Value,Vars1,Vars2,_)->true;(turn_back_debug(Debug),fail)),%getvalue([Dbw_v,Sys_name],Value,Vars3))->true;(turn_back_debug(Debug),fail)).
putvalues2([],_Variables,_Command_vars,Vars,Vars) :- !.putvalues2([Arg|Args],[Variable|Variables],[Command_var|Command_vars],Vars1,Vars2) :- (Arg=o->match4_new_22(Variable,Command_var,Vars1,Vars3); Vars1=Vars3), putvalues2(Args,Variables,Command_vars,Vars3,Vars2).
puzzle(Solution) :-append([w,s],[s,t],A),sort(A,B),subtract(B,[t],Solution).
qa_tt1 :-findall(_,(qa_tt(Q,A),(Q=[*,P]->P;(writeln(Q),writeln("(y/n)?"),read_string(user_input,"\n\r","\n\r",_,S),(S="y"->writeln(A);abort)))),_),!.
qa_tt3(Journeys) :- numbers(Journeys,1,[],JN), %length(JL,Journeys), findall(_,(member(JN1,JN),write("*** Journey "),write(JN1),writeln(" ***"),qa_tt1),_),!.
quantum_entanglement :- Ns = [1,2,3,4,5,6,7,8,9,10], mind_read(N1,Ns), mind_read(N2,Ns), (N1=N2->writeln("* Quantum entanglement");true), mind_read(N3,Ns), sleep(N3),quantum_entanglement,!.
query(["quantity","box"]).
r32(_,B,_,_) :-rhetoric3([[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]],B,[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]],[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]]]).
r33(_,_,C,_) :-rhetoric3([[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]],[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]],C,[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]]]).
r34(_,_,_,D) :-rhetoric3([[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]],[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]],[[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]],[[true,true,true,true],[true,true,true,true],[true,true,true,true],[true,true,true,true]]],D]).
race(PB,Ave) :- retractall(times(_)), assertz(times([])),  numbers(5,1,[],Competitors), findall([Competitor,0],member(Competitor,Competitors),Start2), retractall(progress(_)), assertz(progress(Start2)),  tty_size(R,_C),  numbers(40,1,[],Paces), numbers(R,1,[],R1), findall(_,(member(Pace,Paces), findall([Competitor,Progress],(progress(Start), member([Competitor,Start1],Start),random(X),X1 is floor(2*X),Progress is Start1+X1, numbers(Progress,1,[],P), findall(_,(member(_,P),write(" ")),_),writeln("*"),(Progress=10->  (times(T), append(T,[[Competitor,Pace]],T1), retractall(times(_)), assertz(times(T1)));true) ),Progress1),sleep(0.1), findall(_,(member(_,R1),nl),_), retractall(progress(_)), assertz(progress(Progress1)) ) ,_),  times(T2),   findall(PB1,(member(Competitor,Competitors), findall(T,member([Competitor,T],T2),T21), sort(T21,T31), (T31=[PB1|_]->true;PB1=[])),PB2),%trace, msort(PB2,T32), (T32=[PB|_]->true;(writeln("No one finished"),abort)), %findall(PB3,member([_,PB3],T32),PB4), sum(T32,0,Sum), length(T32,L), Ave is Sum/L.
random1(N,X1) :- random(X),X1 is ceiling(X*N).
random1(N1) :-random2(N2),random2(N3), string_concat(N2,N3,S), number_string(N1,S).
random_starting_positions(X,Y,N_people,Frame1) :- random_starting_positions1(X,Y,1,N_people,[],Frame1).
random_starting_positions1(_X,_Y,N_people,N_people1,Frame1,Frame1) :-  N_people1 is N_people-1,!.
random_starting_positions2(X,Y,X1,Y1,Frame1) :-%,Frame2) :- random_starting_positions3(X,Y,X2,Y2), (member([_,[X2,Y2]],Frame1)-> fail%random_starting_positions2(X,Y,X1,Y1,Frame1) ;%,Frame2); (X1=X2,Y1=Y2)).%Frame2=[X2,Y2]).
random_starting_positions3(X,Y,X1,Y1) :-%random(X2),X1 is ceiling(X*X2),%random(Y2),Y1 is ceiling(Y*Y2).
random_starting_positions3(X_bounds,Y_bounds,X,Y,X1,Y1,Frame1) :-%,Frame2) :- random_starting_positions31(X_bounds,Y_bounds,X,Y,X2,Y2), (member([_,[X2,Y2]],Frame1)-> fail%random_starting_positions3(X_bounds,Y_bounds,X,Y,X1,Y1,Frame1) ;%,Frame2); (X1=X2,Y1=Y2)).%Frame2=[X2,Y2]).random_starting_positions31(X_bounds,Y_bounds,X,Y,X2,Y2) :- Choices=[stay,left,right,up,down], (X=1->delete(Choices,left,Choices2);Choices=Choices2), (Y=1->delete(Choices2,up,Choices3);Choices2=Choices3), (X=X_bounds->delete(Choices3,right,Choices4);Choices3=Choices4), (Y=Y_bounds->delete(Choices4,down,Choices5);Choices4=Choices5), %repeat, member(Direction,Choices5), random_starting_positions32(Direction,X,Y,X2,Y2).
random_starting_positions32(stay,X,Y,X,Y) :- !.
random_wall(XN2,YN2,Grid1,Grid2) :-random(X),X1 is ceiling(4*X),(X1=1->(XN3 is XN2-1,YN3 is YN2);(X1=2->(XN3 is XN2+1,YN3 is YN2);(X1=3->(XN3 is XN2,YN3 is YN2-1);(X1=4->(XN3 is XN2,YN3 is YN2+1))))),delete(Grid1,[XN3,YN3,_],Grid3),append(Grid3,[[XN3,YN3,[*]]],Grid2).
randvars(0,_,V,V) :- !.
rcawp1(N) :-get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,_Seconda,_A,_TZ,_False),local),concat_list("rcawp", [Year,Month,Day,Hour1,Minute1,".txt"],File1),string_concat("./",File1,File2),leash(-all),visible(+all),protocol(File1),time(rcawp2(N)),noprotocol,%%texttobr2(u,File2,u,u),texttobr(u,File2,u,u).
reach_end(N) :- numbers(N,1,[],Ns), random_permutation(Ns,Ns1), sort1(Ns1,[],Ns2), reverse(Ns2,Ns3), numbers(N,1,[],Ns3),!.
read_main_file(Dep99,G) :-working_directory1(A1,A1),repositories_paths([Path]),foldr(string_concat,[Path,Dep99,%"/",%Go_path1,"/main_file.txt"],Go_path2),(catch(open_file_s(Go_path2,A),_,(writeln2(["Cannot find",Go_path2]),(writeln(["Missing main_file.txt in " ,Dep99,"/"]),abort)%,abort))),findall1([Dep99,B,C,D],(member([B,E],A),member([C,D],E)),G),%atom_string(Dep99_name1,Dep99_name),working_directory1(_,A1),!.
read_string2(_,_,_,_,String) :-input_stream_n(N),((input_stream(Items),member([N,String],Items))->true;(writeln("Error: Input stream is exhausted."),abort)),N1 is N+1,delete(Items,[N,String],Items1),retractall(input_stream_(_)),assertz(input_stream(Items1)),retractall(input_stream_n(_)),assertz(input_stream_n(N1)).
read_string_c(O) :-read_string(user_input,_,_,S),prepare_string(S,O).
read_term1(File,Prefixes3) :-phrase_from_file_s(string(Prefixes1),File),string_codes(Prefixes2,Prefixes1),term_to_atom(Prefixes3,Prefixes2).
readfile(List1,Error,List3) :-phrase_from_file_s(string(List6), List1),(phrase(file(List3),List6)->true;%(writeln(Error),fail).%writeln1(List3).
readfile(List1,_Error,List3) :-%init_keep_comments,phrase_from_file_s(string(List6), List1),(phrase(file(List3),List6)->true;%(writeln(Error),fail).
reado([["one"],["the","oth","er"],["the","runn","er"],["the","draw","er"],["the","count","er"],["the","graph","er"],["the","test","er"],["the","breaths","on","er"],["the","writ","er"],["the","spell","er"],["the","updat","er"],["the","check","er"],["the","choos","er"],["the","ess","ence"],["the","comb","in","er"],["the","mir","ac","le"],["the","trans","lat","or"],["the","gramm","ar"]]).
readsc(7).
readsc(7).readv([["loves"],["is"],["has"],["is","in"],["moves","to"],["nur","tures"],["needs"],["makes"],["lifts"],["finds"],["forms"],["goes","to"],["writes","on"],["reads","on"],["feels"],["is"]]).reado([["one"],["the","oth","er"],["the","runn","er"],["the","draw","er"],["the","count","er"],["the","graph","er"],["the","test","er"],["the","breaths","on","er"],["the","writ","er"],["the","spell","er"],["the","updat","er"],["the","check","er"],["the","choos","er"],["the","ess","ence"],["the","comb","in","er"],["the","mir","ac","le"],["the","trans","lat","or"],["the","gramm","ar"]]).
reason(pedagogy,positive_reason,stay_healthy).
rectangle1([],_YN2,Grid,Grid) :- !.
rectangle2([[X1,Y1],[X2,Y2]],Grid1,Grid2) :-numbers(Y2,Y1,[],YN),numbers(X2,X1,[],XN),rectangle(XN,YN,Grid1,Grid2).
recursive_replace_vars(Statement,Arguments1,Arguments2,Var_index1,Var_index2,Var_table1,Var_table2) :-Statement=[Statement1|Statement2],(variable_name(Statement1)->((member([Statement1,V2],Var_table1)->(append(Arguments1,[V2],Arguments3),Var_index1=Var_index3,Var_table1=Var_table3);(V=[v,Var_index1],append(Arguments1,[V],Arguments3),append(Var_table1,[[Statement1,V]],Var_table3),Var_index1=Var_index3)));(expression_not_var(Statement1)->(Arguments1=Arguments3,Var_index1=Var_index3,Var_table1=Var_table3);recursive_replace_vars(Statement1,Arguments1,Arguments3,Var_index1,Var_index3,Var_table1,Var_table3))),Var_index4 is Var_index3+1,recursive_replace_vars(Statement2,Arguments3,Arguments2,Var_index4,Var_index2,Var_table3,Var_table2).
recursive_reverse(A,B) :- recursive_reverse(A,[],B).
reduce("cultural translation tool",["translate page","repeat until correct translation"]).
reflect_shape1(Shape_coords1,x,Shape_coords2) :- Shape_coords1=Coords1, findall([X1,Y,Z],(member([X,Y,Z],Coords1),X1 is -X),Coords2), %writeln(2), %reset_min(0,0,0,Coords2,Coords3,_Max_X,_Max_Y,_Max_Z), Shape_coords2=Coords2.
relevant_sentence(Br,Br2,A,Keywords) :- member(KW,Keywords), member(A,Br),sub_string(A,_,_,_,KW), delete(Br,A,Br2).
remove_and_find_item_number(A,N1,B,N2) :- delete_item_n(A,N1,C), get_n_item(C,B,N2).
remove_brackets2(T2,T,T21) :-%trace,sub_term_types_wa(T,T2,In11),%sub_term_types_wa([all([string,number,atom])],T2,In1),%findall(A,(member(A,In1),A=[_,["[", _, "]"]]),In11),(In11=[]->T2=T21;(In11=[In2|_],In3=[In2],%trace,(In2=[[1],_]->refind_st(T2,T,T21);%* get firstfoldr(put_sub_term_wa_ae_smooth,In3,T2,T21)))),!.
remove_chains_of_one_child_a1(_,_,[],Options1,Options2,Options3,N,N) :- append(Options1,Options2,Options3),!. %*?remove_chains_of_one_child_a1(Switch,N1,A1,Options1,Options2,Options3,_,NA7) :-A1=[A2|A3],findall([N1,A2,N2],(member([N1,A2,N2],Options1)),A6),remove_chains_of_one_child_a3(Switch,A6,Options1,[],Options4),findall(N2,(member([N1,A2,N2],Options4)),NA6),append(Options2,Options4,Options5),remove_chains_of_one_child_a1(Switch,N1,A3,Options5,[],Options3,NA6,NA7).
remove_chains_of_one_child_a5(N1,_A1,N3,Options1,Options2,Options3) :-%trace,(N1=[-,_]->(N3=N1,Options2=Options3);(member([N1,A,N2],Options1),member([N2,_,N22],Options1),member([N2,_,N23],Options1),not(N22=N23),N3=N2,append(Options2,[[N1,A,N2]],Options3))),!.
remove_duplicates([[X1,X2]|Rest], [[X1,X2]|Result]) :-delete(Rest,[X1,X2],R1),delete(R1,[X2,X1],R2),remove_duplicates(R2, Result),!.% older_brother(A,B)% means A is an older brother of B%older_brother(GG) :-older_brother1(P,Y,G),findall([A,B,C1,B3],(member([A,B],P),member([B,C1],Y),member([B,B3],G)),C),findall([A1,B1],(member([X, A1, C2, male],C),member([X, B1, C21, _],C),C2 > C21),GG),!.
remove_dups([],List,List) :- !.
remove_dups([],[]) :- !.remove_dups([Head|Tail],Result):- member(Head,Tail), remove_dups(Tail,Result),!.
remove_dups_from_loops(A,B) :- remove_dups_in_loops_from_rest(A,C), remove_dups_in_loops(C,B).
remove_dups_in_loops1(_,[],F,F) :- !.
remove_dups_in_loops_from_rest(A,C) :- findall1(D,member([loop1,D],A),E), flatten(E,F), subtract(A,F,C).
remove_end_comments1(H1,Mod_time4) :- open_string_file_s(H1,Mod_time5), remove_end_comments2(Mod_time5,Mod_time4).
remove_end_comments2(Mod_time5,Mod_time4) :- string_concat(Mod_time6,"\n% ",Mod_time5), remove_end_comments2(Mod_time6,Mod_time4).
remove_first_outer_bracket_chars(A,B) :- sub_term_types_wa([heuristic(outer_bracket_chars(A1),A1)],A,In),In=[[Ad,E]|_],append(["["],L4,E), append(E1,["]"],L4),In2=[[Ad,E1]],%[findall([Ad,D],(member([Ad,E],In),E=[D]),In2), foldr(put_sub_term_wa_ae,In2,A,B),!.
remove_nd(T,L) :-remove_nd(T,[],L).
remove_nd([],L1,L1) :-!.
remove_nested_tmps(RS1,RS6) :-remove_nested_tmps_cycle(RS1,RS7),%sub_term_wa([[tmp,_],_],RS1,In5),%(In1=[]->rec_join(UV2,RS);%findall([Ad,C],member([Ad,[[tmp,_],C]],In5),In6),%trace,%foldr(put_sub_term_wa_ae_smooth,In6,RS1,RS7),(RS1=RS7->RS6=RS7;remove_nested_tmps(RS7,RS6)),!.
remove_nested_tmps_cycle(RS1,RS4):-sub_term_wa([[tmp,_],_],RS1,In5),(In5=[[Ad,[[tmp,_],C]]|_]->(In6=[[Ad,C]],%findall([Ad,C],member([Ad,[split1,C]],In5),In6),%trace,foldr(put_sub_term_wa_ae_smooth,In6,RS1,RS41),remove_nested_tmps_cycle(RS41,RS4));RS1=RS4).
removenotrhyming1(Lyrics,Verbs1,Verbs2) :-rhymes(Rhymes1)length(Lyrics,Length),Line1 is mod(Length,4),(Line1 is 3-1->(Line2 is 3-2,removenotrhyming15(Line2,Rhymes1,Rhymes3),removenotrhyming2(Rhymes3,Verbs1,[],Verbs2));(Line1 is 4-1->(removenotrhyming15(Line2,Rhymes1,Rhymes3),removenotrhyming2(Rhymes3,Verbs1,[],Verbs2));Verbs1=Verbs2)).
removenotrhyming1(Lyrics,Verbs1,Verbs2) :-rhymes(Rhymes1)length(Lyrics,Length),Line1 is mod(Length,4),(Line1 is 3-1->(Line2 is 3-2,removenotrhyming15(Line2,Rhymes1,Rhymes3),removenotrhyming2(Rhymes3,Verbs1,[],Verbs2));(Line1 is 4-1->(removenotrhyming15(Line2,Rhymes1,Rhymes3),removenotrhyming2(Rhymes3,Verbs1,[],Verbs2));Verbs1=Verbs2)).removenotrhyming15(Line2,Rhymes1,Rhymes3) :-length(List1,Line2),append(List1,_,Lyrics),reverse(List1,List2),List2=[Item1|_Items2],reverse(Item1,Item2),Item2=[Item3|_Items4],member(Rhymes2,Rhymes1),member(Item3,Rhymes2),delete(Rhymes2,Item3,Rhymes3)removenotrhyming2(_Rhymes3,[],Verbs,Verbs) :- !.
removerepeatedterm([],List,List) :- !.
removers([],_,Tokens1,Tokens1,Tokens2,Tokens2,Tokens3,Tokens3,Tokens4,Tokens4) :- !.
remvdup([],A,A):-!.
remvdup([],A,A):-!.remvdup(A,B,C):-A=[A1|As],delete(As,A1,B2),append(B,[A1],D),remvdup(B2,D,C).
render_pbm_file(Grid1,X2,Y2,Grid2) :-X is X2*6,Y is Y2*10,numbers(Y,1,[],YN1),reverse(YN1,YN),numbers(X,1,[],XN),%trace,findall([A%,["\n"]],(member(Y1,YN),findall([R,"\t",G,"\t",B,"\n"],(member(Y1,YN),%nl,member(X1,XN),member([X1,Y1,R,G,B],Grid1)),A2),maplist(append,[A2],[A])),Grid3),%writeln1(Grid3),%trace,maplist(append,[Grid3],[Grid2a]),maplist(append,[Grid2a],[Grid2b]),concat_list(Grid2b,Grid2).
render_pbm_file(Grid1,X2,Y2,Grid2) :-X is X2*6,Y is Y2*10,numbers(Y,1,[],YN1),reverse(YN1,YN),numbers(X,1,[],XN),%trace,findall([A,["\n"]],(member(Y1,YN),findall([Pixel,"\t"],(member(Y1,YN),%nl,member(X1,XN),member([X1,Y1,Pixel],Grid1)),A2),maplist(append,[A2],[A])),Grid3),%writeln1(Grid3),%trace,maplist(append,[Grid3],[Grid2a]),maplist(append,[Grid2a],[Grid2b]),concat_list(Grid2b,Grid2).
render_to_screen(File_contents1,Grid3,X2,Y2,X,Y,_X_lim,Y_lim,File_contents2) :-%writeln1([b,Grid3]),numbers(Y2,1,[],YN1),reverse(YN1,YN),numbers(X2,1,[],XN),%trace,findall([X3,Y3,Pixel],(member(Y1,YN),member(X1,XN),member([X1,Y1,Pixel],Grid3),X3 is %X1,%6*(X-1)+X1,Y3 is %Y1%10*(Y_lim-Y)+Y1%(Pixel1=[]->Pixel=0;Pixel=1)%write(Pixel),write("\t")),Grid2),%trace,%X4 is 2*6,Y4 is 1*10,%*X4 is X_lim*6,Y4 is Y_lim*10,%print_grid_1(Grid2,5,9),%*print_grid_1(Grid2,X4,Y4),replace_1(File_contents1,Grid2,File_contents2).
render_to_screen(File_contents1,Grid3,X2,Y2,X,Y,_X_lim,Y_lim,XA1,YA1,S1,_C1,File_contents2) :-%trace,%writeln1([b,Grid3]),numbers(Y2,1,[],YN1),reverse(YN1,YN),numbers(X2,1,[],XN),%trace,findall([X3,Y3,R,G,B],(member(Y1,YN),member(X1,XN),member([X1,Y1,R,G,B],Grid3),X3 is %X1,%S1*(6*(X-1)+X1)+XA1,Y3 is %Y1%S1*(10*(Y_lim-Y)+Y1)+YA1%(Pixel1=[]->Pixel=0;Pixel=1)%write(Pixel),write("\t")),Grid2),%trace,%X4 is 2*6,Y4 is 1*10,%*X4 is X_lim*6,Y4 is Y_lim*10,%print_grid_1(Grid2,5,9),%*print_grid_1(Grid2,X4,Y4),replace_1(File_contents1,Grid2,File_contents2).
renderh21(Form1,Harmony,HarmonyParts1,Track,Bar1,Bar2,Voice1,Voice2) :-HarmonyParts1=[HarmonyPart2|HarmonyParts3],HarmonyPart2=[_Section,[_,_],0],Bar3 is Bar1+4,renderh21(Form1,Harmony,HarmonyParts3,Track,Bar3,Bar2,Voice1,Voice2),!.
renderh22(Section2,Harmony1,_Track,Bar,Bar,Voice,Voice) :- %%longtoshortform(Section21,Section2),findall(Harmony2,(member(Harmony3,Harmony1),member(Harmony2,Harmony3),Harmony2=[Section1|_],longtoshortform(Section1,Section2)),List2),List2=[],!.
renderline2(BarTimes,BarTimes,[],_Track,_Bar1,Voice,Voice) :- !.
renderline2([]%BarTimes,_BarTimes,_,_Track,_Bar1,Voice,Voice) :- !.
renderlineh2(BarTimes,BarTimes,[],_Track,_Bar1,Voice,Voice) :- !.
renderlineh2([]%BarTimes,_BarTimes,_%[],_Track,_Bar1,Voice,Voice) :- !.
renderlinerests(BarTimes,BarTimes,_Track,_Bar1,Voice,Voice) :- !.
renderlinerests(BarTimes,BarTimes,_Track,_Bar1,Voice,Voice) :- !.renderlinerests(BarTimes1,BarTimes2,Track,Bar,Voice1,Voice2) :-BarTimes1=[BarTimes2|BarTimes3],concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  R            1/2   voff=0\n"],Song),string_concat(Voice1,Song,Voice3),renderlinerests(BarTimes3,BarTimes2,Track,Bar,Voice3,Voice2).
renderlinerests([]%BarTimes,_BarTimes,_Track,_Bar1,Voice,Voice) :- !.renderlinerests(BarTimes1,BarTimes2,Track,Bar,Voice1,Voice2) :-BarTimes1=[BarTimes2|BarTimes3],BarTimes2=[Time,_Type,Length,_Nth_note_from_mel_harm,_Velocity],concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  R            ",Length,"   voff=0\n"],Song),string_concat(Voice1,Song,Voice3),renderlinerests(BarTimes3,BarTimes2,Track,Bar,Voice3,Voice2).longtoshortform(Section1,Section2) :-string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),!.renderm1(_Form1,_Melody,[],_Track1,_Track2,Song,Song) :- !.
renderlines1h([],_Track,_Bar,Voice,Voice) :- !.
renderlines1h([],_Track,_Bar,Voice,Voice) :- !.renderlines1h(Harmony1,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],%%Rests is Totallength-Lyrics2Length,BarTimes1=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelodyh(Harmony1,Harmony2),%%writeln(generatemelodyh(Harmony1,Harmony2)),renderlineh2(BarTimes1,BarTimes2,Harmony2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelodyh(Harmony1,Harmony2) :-generatemelodyh1(Harmony1,[],Harmony3),length(Harmony3,Harmony2Length),Lyrics2Length=8,changelengthh(Lyrics2Length,Harmony2Length,Harmony3,Harmony2).generatemelodyh1([],Melody,Melody) :- !.
renderm21(Form1,Melody,MelodyParts1,Track,Bar1,Bar2,Voice1,Voice2) :-MelodyParts1=[MelodyPart2|MelodyParts3],MelodyPart2=[_Section,[_,_],0],Bar3 is Bar1+4,renderm21(Form1,Melody,MelodyParts3,Track,Bar3,Bar2,Voice1,Voice2),!.
renderm22(Section2,Melody1,_Track,Bar,Bar,Voice,Voice) :- findall(Melody2,(member(Melody2,Melody1),Melody2=[Section1|_],longtoshortform(Section1,Section2)),List2),List2=[],!.
renderm22(Section2,Melody1,_Track,Bar,Bar,Voice,Voice) :- findall(Melody2,(member(Melody2,Melody1),Melody2=[Section1|_],longtoshortform(Section1,Section2)),List2),List2=[],!.renderm22(Section1,Melody1,Track,Bar1,Bar2,Voice1,Voice2) :-/**findall(Lyrics2,(member(Lyrics2,Lyrics1),Lyrics2=[Section1|_]),Lyrics3),string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),**/findall(Melody2,(member(Melody2,Melody1),Melody2=[Section1|_]),Melody3),%%Lyrics3=[[_, Lyrics1A,Lyrics2A,Lyrics3A,Lyrics4A]],Melody3=[[_, Melody1A], [_, Melody2A]],renderline1m(Melody1A,Track,Bar1,Voice1,Voice3),Bar3 is Bar1+1,renderline1m(Melody2A,Track,Bar3,Voice3,Voice4),Bar4 is Bar3+1,renderline1m(Melody1A,Track,Bar4,Voice4,Voice5),Bar5 is Bar4+1,renderline1m(Melody2A,Track,Bar5,Voice5,Voice6),Bar6 is Bar5+1,delete(Melody3,[Section1|_],Melody5),renderm22(Section1,Melody5,Track,Bar6,Bar2,Voice6,Voice2).renderline1m(Melody1,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],%%Rests is Totallength-Lyrics2Length,BarTimes1=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelodym(Melody1,Melody2),renderline2(BarTimes1,BarTimes2,Melody2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelodym(Melody1,Melody2) :-generatemelody1(Melody1,[],Melody3),length(Melody3,Melody2Length),Lyrics2Length=8,changelength(Lyrics2Length,Melody2Length,Melody3,Melody2).renderh1(_Form1,_Harmony,[],_Track1,_Track2,Song,Song) :- !.
rendersong(Form1,Voiceparts,_Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts1,HarmonyParts,Lyrics,Vocalstubinstrument,Song1) :-Totallength=8,Voicetrack=1,length(MelodyInstruments,MelodyInstrumentsLength),length(HarmonyInstruments,HarmonyInstrumentsLength),TracksNumber is MelodyInstrumentsLength+HarmonyInstrumentsLength+2,Lyrics=[[_,Sentence1|_]|_],sentencewithspaces(Sentence1,Sentence2),concat_list("format=1 tracks=", [TracksNumber, " division=384\n\nBA    1   CR         0   TR  0   CH 16   Text type 2: \"Produced by Mind Reading Music Composer by Lucian Academy\"\nBA    1   CR         0   TR  0   CH 16   Text type 3: \"", Sentence2, "\"\nBA    1   CR         0   TR  0   CH  1   Channel volume 127\nBA    1   CR         0   TR  0   CH 16   Tempo 63.00009\n"], Song2),printheader(Voicetrack,Vocalstubinstrument,Song2,Song3),%%writeln(renderv1(Form1,Voiceparts,_,Lyrics,Melody,%%Totallength,Voicetrack,1,_,Song3,Song4)), %% ****renderv1(Form1,Voiceparts,_,Lyrics,Melody,Totallength,Voicetrack,1,_,Song3,Song4),Track2 is Voicetrack+1,renderm1(Form1,Melody,MelodyParts1,Track2,_Track3,Song4,Song5),Track4 is MelodyInstrumentsLength+2,renderh1(Form1,Harmony,HarmonyParts,Track4,_Track5,Song5,Song6),length(Form1,FormLength),TotalBars is 4*FormLength+1,concat_list(Song6,["BA    ",TotalBars,"   CR         0   TR  0   CH 16   End of track"],Song1),get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list("song",[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(File1,[".txt"],File2),open_s(File2,write,Stream),write(Stream,Song1), close(Stream), concat_list("./asc2mid ",[File2," > ",File1,".mid"],Command), shell1_s(Command),!.
rendersong(Form1,Voiceparts,_Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts1,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1) :-Totallength=8,Voicetrack=1,length(MelodyInstruments,MelodyInstrumentsLength),length(HarmonyInstruments,HarmonyInstrumentsLength),TracksNumber is MelodyInstrumentsLength+HarmonyInstrumentsLength+2,Lyrics=[[_,Sentence1|_]|_],sentencewithspaces(Sentence1,Sentence2),concat_list("format=1 tracks=", [TracksNumber, " division=384\n\nBA    1   CR         0   TR  0   CH 16   Text type 2: \"Produced by Mind Reading Music Composer by Lucian Academy (Manual Entry Mode)\"\nBA    1   CR         0   TR  0   CH 16   Text type 3: \"", Sentence2, "\"\nBA    1   CR         0   TR  0   CH  1   Channel volume 127\nBA    1   CR         0   TR  0   CH 16   Tempo 63.00009\n"], Song2),printheader(Voicetrack,Vocalstubinstrument,Song2,Song3),%%writeln(renderv1(Form1,Voiceparts,_,Lyrics,Melody,%%Totallength,Voicetrack,1,_,Song3,Song4)), %% ****renderv1(Form1,Voiceparts,_,Lyrics,Melody,Totallength,Voicetrack,1,_,Song3,Song4),Track2 is Voicetrack+1,renderm1(Form1,Melody,MelodyParts1,Track2,_Track3,Song4,Song5),Track4 is MelodyInstrumentsLength+2,renderh1(Form1,Harmony,HarmonyParts,Track4,_Track5,Song5,Song6),length(Form1,FormLength),TotalBars is 4*FormLength+1,concat_list(Song6,["BA    ",TotalBars,"   CR         0   TR  0   CH 16   End of track"],Song1),get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list("song",[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(File1,[".txt"],File2),concat_list(File1,[".mid"],File3),open_s(File2,write,Stream),write(Stream,Song1), close(Stream), concat_list("./asc2mid ",[File2," > ",File3],Command), shell1_s(Command), %%writeln(["Texttobr, Texttobr2 not working.  Please manually breason out ",File2]), %%N is 4, M is 4000,  texttobr2(N,File2,u,M),texttobr(N,File2,u,M),outputlyrics(File1,Lyrics),/** texttobr2qb(3), %% give self breasonings texttobr2qb(20), %%Feature 1 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 2 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 3 texttobr2qb(20), %%Updates texttobr2qb(100), %%Icon texttobr2qb(20), %%Updates texttobr2qb(32), %%Lyrics texttobr2qb(36), %%Music texttobr2qb(20), %%Updates  texttobr2qb(2), %%Medicine texttobr2qb(20), %%Updates texttobr2qb(2), %%Sales texttobr2qb(20), %%Updates texttobr2qb(2), %%Marketing texttobr2qb(20), %%Updates texttobr2qb(2), %%Graciously give or blame listener for colour imagery texttobr2qb(20), %%Updates texttobr2qb(2), %%Play song texttobr2qb(2), %%Like song **/!.
rendersong(Form1,Voiceparts,_Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts1,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1) :-Totallength=8,Voicetrack=1,length(MelodyInstruments,MelodyInstrumentsLength),length(HarmonyInstruments,HarmonyInstrumentsLength),TracksNumber is MelodyInstrumentsLength+HarmonyInstrumentsLength+2,Lyrics=[[_,Sentence1|_]|_],sentencewithspaces(Sentence1,Sentence2),concat_list("format=1 tracks=", [TracksNumber, " division=384\n\nBA    1   CR         0   TR  0   CH 16   Text type 2: \"Produced by Mind Reading Music Composer by Lucian Academy (Manual Entry Rhythm Mode)\"\nBA    1   CR         0   TR  0   CH 16   Text type 3: \"", Sentence2, "\"\nBA    1   CR         0   TR  0   CH  1   Channel volume 127\nBA    1   CR         0   TR  0   CH 16   Tempo 63.00009\n"], Song2),printheader(Voicetrack,Vocalstubinstrument,Song2,Song3),%%writeln(renderv1(Form1,Voiceparts,_,Lyrics,Melody,%%Totallength,Voicetrack,1,_,Song3,Song4)), %% ****renderv1(Form1,Voiceparts,_,Lyrics,Melody,Totallength,Voicetrack,1,_,Song3,Song4),Track2 is Voicetrack+1,renderm1(Form1,Melody,MelodyParts1,Track2,_Track3,Song4,Song5),Track4 is MelodyInstrumentsLength+2,renderh1(Form1,Harmony,HarmonyParts,Track4,_Track5,Song5,Song6),length(Form1,FormLength),TotalBars is 4*FormLength+1,concat_list(Song6,["BA    ",TotalBars,"   CR         0   TR  0   CH 16   End of track"],Song1),get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list("song",[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(File1,[".txt"],File2),concat_list(File1,[".mid"],File3),open_s(File2,write,Stream),write(Stream,Song1), close(Stream), concat_list("./asc2mid ",[File2," > ",File3],Command), shell1_s(Command), %%writeln(["Texttobr, Texttobr2 not working.  Please manually breason out ",File2]), %%N is 4, M is 4000,  texttobr2(N,File2,u,M),texttobr(N,File2,u,M),outputlyrics(File1,Lyrics),/** texttobr2qb(3), %% give self breasonings texttobr2qb(20), %%Feature 1 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 2 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 3 texttobr2qb(20), %%Updates texttobr2qb(100), %%Icon texttobr2qb(20), %%Updates texttobr2qb(32), %%Lyrics texttobr2qb(36), %%Music texttobr2qb(20), %%Updates  texttobr2qb(2), %%Medicine texttobr2qb(20), %%Updates texttobr2qb(2), %%Sales texttobr2qb(20), %%Updates texttobr2qb(2), %%Marketing texttobr2qb(20), %%Updates texttobr2qb(2), %%Graciously give or blame listener for colour imagery texttobr2qb(20), %%Updates texttobr2qb(2), %%Play song texttobr2qb(2), %%Like song **/!.
rendersong(Form1,Voiceparts,_Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts1,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1) :-Totallength=8,Voicetrack=1,length(MelodyInstruments,MelodyInstrumentsLength),length(HarmonyInstruments,HarmonyInstrumentsLength),TracksNumber is MelodyInstrumentsLength+HarmonyInstrumentsLength+2,Lyrics=[[_,Sentence1|_]|_],sentencewithspaces(Sentence1,Sentence2),concat_list("format=1 tracks=", [TracksNumber, " division=384\n\nBA    1   CR         0   TR  0   CH 16   Text type 2: \"Produced by Mind Reading Music Composer by Lucian Academy (Mind Reading Mode)\"\nBA    1   CR         0   TR  0   CH 16   Text type 3: \"", Sentence2, "\"\nBA    1   CR         0   TR  0   CH  1   Channel volume 127\nBA    1   CR         0   TR  0   CH 16   Tempo 63.00009\n"], Song2),printheader(Voicetrack,Vocalstubinstrument,Song2,Song3),%%writeln(renderv1(Form1,Voiceparts,_,Lyrics,Melody,%%Totallength,Voicetrack,1,_,Song3,Song4)), %% ****renderv1(Form1,Voiceparts,_,Lyrics,Melody,Totallength,Voicetrack,1,_,Song3,Song4),Track2 is Voicetrack+1,renderm1(Form1,Melody,MelodyParts1,Track2,_Track3,Song4,Song5),Track4 is MelodyInstrumentsLength+2,renderh1(Form1,Harmony,HarmonyParts,Track4,_Track5,Song5,Song6),length(Form1,FormLength),TotalBars is 4*FormLength+1,concat_list(Song6,["BA    ",TotalBars,"   CR         0   TR  0   CH 16   End of track"],Song1),get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list("song",[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(File1,[".txt"],File2),concat_list(File1,[".mid"],File3),open_s(File2,write,Stream),write(Stream,Song1), close(Stream), concat_list("./asc2mid ",[File2," > ",File3],Command), shell1_s(Command), %%writeln(["Texttobr, Texttobr2 not working.  Please manually breason out ",File2]), %%N is 4, M is 4000,  texttobr2(N,File2,u,M),texttobr(N,File2,u,M),outputlyrics(File1,Lyrics),/** texttobr2qb(3), %% give self breasonings texttobr2qb(20), %%Feature 1 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 2 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 3 texttobr2qb(20), %%Updates texttobr2qb(100), %%Icon texttobr2qb(20), %%Updates texttobr2qb(32), %%Lyrics texttobr2qb(36), %%Music texttobr2qb(20), %%Updates  texttobr2qb(2), %%Medicine texttobr2qb(20), %%Updates texttobr2qb(2), %%Sales texttobr2qb(20), %%Updates texttobr2qb(2), %%Marketing texttobr2qb(20), %%Updates texttobr2qb(2), %%Graciously give or blame listener for colour imagery texttobr2qb(20), %%Updates texttobr2qb(2), %%Play song texttobr2qb(2), %%Like song **/!.
rendersong(Form1,Voiceparts,_Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts1,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1) :-Totallength=8,Voicetrack=1,length(MelodyInstruments,MelodyInstrumentsLength),length(HarmonyInstruments,HarmonyInstrumentsLength),TracksNumber is MelodyInstrumentsLength+HarmonyInstrumentsLength+2,Lyrics=[[_,Sentence1|_]|_],sentencewithspaces(Sentence1,Sentence2),concat_list("format=1 tracks=", [TracksNumber, " division=384\n\nBA    1   CR         0   TR  0   CH 16   Text type 2: \"Produced by Mind Reading Music Composer by Lucian Academy (Random Generation Mode)\"\nBA    1   CR         0   TR  0   CH 16   Text type 3: \"", Sentence2, "\"\nBA    1   CR         0   TR  0   CH  1   Channel volume 127\nBA    1   CR         0   TR  0   CH 16   Tempo 63.00009\n"], Song2),printheader(Voicetrack,Vocalstubinstrument,Song2,Song3),%%writeln(renderv1(Form1,Voiceparts,_,Lyrics,Melody,%%Totallength,Voicetrack,1,_,Song3,Song4)), %% ****renderv1(Form1,Voiceparts,_,Lyrics,Melody,Totallength,Voicetrack,1,_,Song3,Song4),Track2 is Voicetrack+1,renderm1(Form1,Melody,MelodyParts1,Track2,_Track3,Song4,Song5),Track4 is MelodyInstrumentsLength+2,renderh1(Form1,Harmony,HarmonyParts,Track4,_Track5,Song5,Song6),length(Form1,FormLength),TotalBars is 4*FormLength+1,concat_list(Song6,["BA    ",TotalBars,"   CR         0   TR  0   CH 16   End of track"],Song1),get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list("song",[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list(File1,[".txt"],File2),concat_list(File1,[".mid"],File3),open_s(File2,write,Stream),write(Stream,Song1), close(Stream), concat_list("./asc2mid ",[File2," > ",File3],Command), shell1_s(Command), %%writeln(["Texttobr, Texttobr2 not working.  Please manually breason out ",File2]), %%N is 4, M is 4000,  texttobr2(N,File2,u,M),texttobr(N,File2,u,M),outputlyrics(File1,Lyrics),/** texttobr2qb(3), %% give self breasonings texttobr2qb(20), %%Feature 1 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 2 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 3 texttobr2qb(20), %%Updates texttobr2qb(100), %%Icon texttobr2qb(20), %%Updates texttobr2qb(32), %%Lyrics texttobr2qb(36), %%Music texttobr2qb(20), %%Updates  texttobr2qb(2), %%Medicine texttobr2qb(20), %%Updates texttobr2qb(2), %%Sales texttobr2qb(20), %%Updates texttobr2qb(2), %%Marketing texttobr2qb(20), %%Updates texttobr2qb(2), %%Graciously give or blame listener for colour imagery texttobr2qb(20), %%Updates texttobr2qb(2), %%Play song texttobr2qb(2), %%Like song **/!.
rendersong(Form1,Voiceparts,_Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts1,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1) :-Totallength=8,Voicetrack=1,length(MelodyInstruments,MelodyInstrumentsLength),length(HarmonyInstruments,HarmonyInstrumentsLength),TracksNumber is MelodyInstrumentsLength+HarmonyInstrumentsLength+2,Lyrics=[[_,Sentence1|_]|_],sentencewithspaces(Sentence1,Sentence2),concat_list3("format=1 tracks=", [TracksNumber, " division=384\n\nBA    1   CR         0   TR  0   CH 16   Text type 2: \"Produced by Mind Reading Music Composer by Lucian Academy (Detailed Mind Reading Tree Mode)\"\nBA    1   CR         0   TR  0   CH 16   Text type 3: \"", Sentence2, "\"\nBA    1   CR         0   TR  0   CH  1   Channel volume 127\nBA    1   CR         0   TR  0   CH 16   Tempo 63.00009\n"], Song2),printheader(Voicetrack,Vocalstubinstrument,Song2,Song3),%%writeln(renderv1(Form1,Voiceparts,_,Lyrics,Melody,%%Totallength,Voicetrack,1,_,Song3,Song4)), %% ****renderv1(Form1,Voiceparts,_,Lyrics,Melody,Totallength,Voicetrack,1,_,Song3,Song4),Track2 is Voicetrack+1,renderm1(Form1,Melody,MelodyParts1,Track2,_Track3,Song4,Song5),Track4 is MelodyInstrumentsLength+2,renderh1(Form1,Harmony,HarmonyParts,Track4,_Track5,Song5,Song6),length(Form1,FormLength),TotalBars is 4*FormLength+1,concat_list3(Song6,["BA    ",TotalBars,"   CR         0   TR  0   CH 16   End of track"],Song1),get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),concat_list3("song",[Year,Month,Day,Hour1,Minute1,Seconda],File1),concat_list3(File1,[".txt"],File2),concat_list3(File1,[".mid"],File3),open_s(File2,write,Stream),write(Stream,Song1), close(Stream), concat_list3("./asc2mid ",[File2," > ",File3],Command), shell1_s(Command), %%writeln(["Texttobr, Texttobr2 not working.  Please manually breason out ",File2]), %%N is 4, M is 4000,  texttobr2(N,File2,u,M),texttobr(N,File2,u,M),outputlyrics(File1,Lyrics),/** texttobr2qb(3), %% give self breasonings texttobr2qb(20), %%Feature 1 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 2 texttobr2qb(20), %%Updates texttobr2qb(20), %%Feature 3 texttobr2qb(20), %%Updates texttobr2qb(100), %%Icon texttobr2qb(20), %%Updates texttobr2qb(32), %%Lyrics texttobr2qb(36), %%Music texttobr2qb(20), %%Updates  texttobr2qb(2), %%Medicine texttobr2qb(20), %%Updates texttobr2qb(2), %%Sales texttobr2qb(20), %%Updates texttobr2qb(2), %%Marketing texttobr2qb(20), %%Updates texttobr2qb(2), %%Graciously give or blame listener for colour imagery texttobr2qb(20), %%Updates texttobr2qb(2), %%Play song texttobr2qb(2), %%Like song **/!.
renderv1(Form1,Voiceparts1,Vocalstubinstrument,Lyrics,Melody,Totallength,Track,Bar1,Bar2,Voice1,Voice2) :-Form1=[Section1|Form2],((Voiceparts1=[Section2|_Voiceparts2],not(Section1=Section2))->true;Voiceparts1=[]),Bar3 is Bar1+4,renderv1(Form2,Voiceparts1,Vocalstubinstrument,Lyrics,Melody,Totallength,Track,Bar3,Bar2,Voice1,Voice2),!.
renderv1([],_Voiceparts,_Vocalstubinstrument,_Lyrics,_Melody,_Totallength,_Track,_Bar,_Bar2,Voice,Voice) :- !.
renderv2(Section,Lyrics,_Melody,_Totallength,_Track,Bar,Bar,Voice,Voice) :- not(member([Section|_],Lyrics)),!.
renumber_cps(List1,List2,CP_Vars1,CP_Vars2,Swaps) :-get(min_cp,Min_cp,CP_Vars1),get(max_cp,Max_cp,CP_Vars1), % max_cp x curr_cp_indexget(curr_cp,Curr_cp31,CP_Vars1),renumber_cps1(List1,Min_cp,Max_cp,[],List2,1,Max_cp2,Curr_cp31,Curr_cp3,[],Swaps),set(min_cp,1,CP_Vars1,CP_Vars3),set(max_cp,Max_cp2,CP_Vars3,CP_Vars4),set(curr_cp,Curr_cp3,CP_Vars4,CP_Vars5),set(curr_cp_index,Max_cp2,CP_Vars5,CP_Vars2).
repeat(Length,N,T7,Br33) :-br_alg_gen21(T7,Br00),sort(Br00,Br0),%%Length2 is Length*1.1,random_permutation(Br0,Br000),length(Br000,LL1),(LL1>=Length->(length(Br,Length),append(Br,_,Br000));Br=Br0),%*/findall(T63,(member(T61,Br),string_concat(T61,". ",T63)),T62),%flatten(T62,Br11),length(T62,N3),N4 is N3 div 5,N6 is 5*N4,length(L,N6),append(L,L2,T62),divide(1,L,5,[],Br2),N8 is N4+1,append(Br2,[N8,". ",L2],Br3),flatten(Br3,Br31),foldr(string_concat,Br31,Br32),NN is N-1,  repeat(Length,NN,Br32,Br33),!.
repeat(Length,N,T7,Br33,Keywords) :-br_alg_gen21(T7,Br00),sort(Br00,Br0),%%Length2 is Length*1.1,random_permutation(Br0,Br000),length(Br000,LL1),(LL1>=Length->(length(Br,Length),append(Br,_,Br000));Br=Br0),%*/findall(T63,(member(T61,Br),string_concat(T61,". ",T63)),T62),%flatten(T62,Br11),length(T62,N3),N4 is N3 div 5,N6 is 5*N4,length(L,N6),append(L,L2,T62),open_file_s("connectives.txt",Connectives),%trace,divide(1,L,5,[],Br2,Keywords,Connectives),%delete(Br2,[],Br21),N8 is N4+1,append(Br2,[N8,". ",L2],Br3),flatten(Br3,Br31),foldr(string_concat,Br31,Br32),NN is N-1,  repeat(Length,NN,Br32,Br33,Keywords),!.
repeat(_,0,T7,T7) :- !.
repeat(_,0,T7,T7,_Keywords) :- !.
repeat_until_same(Gs4,G) :-minimise_alg(Gs4,Gs5),optimise_alg(Gs5,Gs6),(Gs4=Gs6->G=Gs6;repeat_until_same(Gs6,G)),!.
repeat_until_the_same(A,Value,B,B_res_var) :-copy_term(A,A_new),copy_term(B,B_new),A=Value,B,repeat_until_the_same1(B_new,A_new,%A,A,Value,B_res_var,B,B_res_var,B_res_var),!.
repeat_until_the_same1(A1,Value,Value,B,B_res_var,B_res_var1) :-copy_term(A,A1),A=Value,B,(B_res_var=B_res_var1->true;repeat_until_the_same1(A1,Value,B_res_var,B,B_res_var,B_res_var1)),!.
repeat_until_the_same1(B_new,A_new,%A,A,Value,Value,B,B_res_var,B_res_var1) :-copy_term(A,A1),copy_term(A_new,A_new1),copy_term(A_new,A_new2),copy_term(B_new,B_new1),A_new=Value,B_new,(B_res_var=B_res_var1->true;repeat_until_the_same1(B_new1,A_new2,%A2,A1,Value,B_res_var,B,B_res_var,B_res_var1)),!.
repeating_item_heuristic(C1) :-%not((%not(C1=[_]),sort(C1,C2),not(C1=C2))).
repeatlastnote1(Length,Melody1,Melody2) :-reverse(Melody1,Melody3),Melody3=[Item|_],repeatlastnote2(Length,Item,Melody1,Melody2),!.
repeatlastnote2(0,_Item,Melody,Melody) :- !.
repeatlastnoteh1(Length,Melody1,Melody2) :-reverse(Melody1,Melody3),Melody3=[Item|_],repeatlastnoteh2(Length,Item,Melody1,Melody2),!.
repeatlastnoteh1(Length,Melody1,Melody2) :-reverse(Melody1,Melody3),Melody3=[Item|_],repeatlastnoteh2(Length,Item,Melody1,Melody2),!.repeatlastnoteh2(0,_Item,Melody,Melody) :- !.
repeatlastnoteh2(0,_Item,Melody,Melody) :- !.
replace(A,Find,Replace,F) :- split_string(A,Find,Find,B),findall([C,Replace],(member(C,B)),D),maplist(append,[D],[E]),concat_list(E,F).
replace(A,Find,Replace,F) :- split_string(A,Find,Find,B),findall([C,Replace],(member(C,B)),D),maplist(append,[D],[E]),concat_list(E,F),!.
replace1([],A,A) :- !.
replace1(_Options,A0,W,WR,B) :-replace2(A0,W,Wr,B).
replace12(Before,After,Deletions,After2,After3) :- %Before=[B|Bs], After=[[i,A]|As], append(After2,[[i,A]],After4), replace12(Before,As,Deletions,After4,After3),!.replace12([],[],_Deletions,After,After) :- %append(After1,[A],After2), !.
replace12(_,After,[],_After1,After) :- %append(After1,[A],After2), !.
replace12_vintage(Before,After,Deletions,After2,After3) :- %Before=[B|Bs], %trace, After=[[I,A]|As], %writeln([*,A]), %(A="9.0x"->trace;true), (I=i->true;I=p), append(After2,[[I,A]],After4), replace12_vintage(Before,As,Deletions,After4,After3),!.
replace12_vintage([],[],_Deletions,After,After) :- %append(After1,[A],After2), !.
replace12_vintage(_,After,[],_After1,After) :- %append(After1,[A],After2), !.
replace1_fr([Options,Replacement],Search_string_or_list,String1,Result_string) :-replace1(Options,String1,Search_string_or_list,Replacement,Result_string).
replace2([],_Lists,B,B) :- !.replace2(A,Lists,H,B) :-A=[C|D],((member(E,Lists),member(C,E),delete(E,C,F),random_member(G,F))->true;C=G),%trace,maplist(append,[H],[[" ",G]],[J]),replace2(D,Lists,J,B).
replace_1(File_contents,[],File_contents) :- !.
replace_1(File_contents,[],File_contents) :- !.replace_1(File_contents1,Grid2,File_contents2) :-Grid2=[[X,Y,R,G,B]|Grid4],delete(File_contents1,[X,Y,_,_,_],File_contents3),append(File_contents3,[[X,Y,R,G,B]],File_contents4),replace_1(File_contents4,Grid4,File_contents2).
replace_first_vars211(Var_name1,First_vars,Term2) :-single_item_or_var(Var_name1),(member([Term1,Var_name1],First_vars)->Term2=Term1;Term2=Var_name1),%append(Term3,[Term2],Term4),!.replace_first_vars211([],_,[]) :- !.
replace_in_term(A,B,_,A) :- not(match1(A,B)),!.
replace_in_term(Statement,A,B,Term2) :-(match1(A,Statement)->Term2=B;(Statement=[Statement1|Statement2],((match1(A,Statement1)->Statement1_a=B;replace_in_term(Statement1,A,B,Statement1_a)),replace_in_term(Statement2,A,B,Statement2_a))),(isvar(Statement2_a)->Statement2_b=["|",Statement2_a];Statement2_b=Statement2_a),append([Statement1_a],Statement2_b,Term2)),!.
replace_in_term2_gc(C,[],_,C) :- !.
replace_in_terms2(_,[],L,L) :-!.
replace_in_terms3([],B,B) :-!.
replace_items01([4],_LSs3,N250,N249) :- append(N250,[[4]],N249),!.
replace_loop(_,[],T,T) :- !.
replace_loop(_,[],T,T) :- !.replace_loop(Rs%[[R1,R2]|Rs],Q,T1,T2) :-Q=[Q3|Q4],((downcase_atom(Q3,Q31),atom_string(Q31,Q32),member([Q32,Q5],Rs),append(T1,[Q5],T3))->true;append(T1,[Q3],T3)),%replace1([entire_word],Q,R1,R2,Q3),replace_loop(Rs,Q4,T3,T2),!.
replace_pred_names1([],[],_,_) :- !.
replace_undefined_with_gap(A,C,D) :-(var(A)-> B="_____";B=A),append(C,[B],D).make_exercise0(_,_,%_Sentences,0,Exercises,Exercises) :- !.
replace_vars0(Term,First_vars,First_vars) :-expression_not_var(Term),!.
replace_vars0([],Variable,Variable,First_vars,First_vars) :- !.
replace_vars01(Variable2,X,Vars1) :-not(variable_name(Variable2)),is_list(Variable2),getvalue_match1(Variable2,X,Vars1).
replace_word_numbers1(Q,Q1) :-word_break(Q,Q00,not_full_stops),replace_loop([["zero","0"],["one","1"],["two","2"],["three","3"],["four","4"],["five","5"],["six","6"],["seven","7"],["eight","8"],["nine","9"],["ten","10"],["jan.","January"],["feb.","February"],["mar.","March"],["apr.","April"],["may.","May"],["jun.","June"],["jul.","July"],["aug.","August"],["sep.","September"],["sept.","September"],["oct.","October"],["nov.","November"],["dec.","December"]%["no","number of "]],Q00,[],Q0),foldr(string_concat,Q0,Q1),!.
replace_word_numbers1(Q,Q1) :-word_break(Q,Q00,not_full_stops),replace_loop([["zero","0"],["one","1"],["two","2"],["three","3"],["four","4"],["five","5"],["six","6"],["seven","7"],["eight","8"],["nine","9"],["ten","10"],["jan.","January"],["feb.","February"],["mar.","March"],["apr.","April"],["may.","May"],["jun.","June"],["jul.","July"],["aug.","August"],["sep.","September"],["sept.","September"],["oct.","October"],["nov.","November"],["dec.","December"]%["no","number of "]],Q00,[],Q0),foldr(string_concat,Q0,Q1),!.replace_loop(_,[],T,T) :- !.
report1(Times) :- findall(Time1,time1(Time1,murder),Times).
repositories_paths1(["../../GitHub2/"]).
repository_root_path("../gitl_test/").
return(Request) :-              member(method(post), Request), !,              http_read_data(Request, Data, []),format('Content-type: text/html~n~n', []),      format('<p>', []),        %%portray_clause(Data),                %%term_to_atom(Term,Data),%format(Data,[])%writeln1(Data),      Data=[%%debug='off',%%Debug1,text1=_Text1,text01=Path,submit=_],/*%term_to_atom(Text11,Text1),%term_to_atom(Text21,Text2),%term_to_atom(Path,Text01),*/%atom_string(Text1,Text1s),%atom_string(Text2,Text2s),%save_file_s(Text1s,Text2s),file_browser(Path).
returns(XXs) --> [X], {X=10}, returns(Xs), {char_code(Ch,X),atom_string(CA,Ch),atom_concat(CA,Xs,XXs)}, !. %% Newlinereturns('') --> [].%% sentence33([C|Xs])sentence33(CXs) --> [X], {((true%%char_type(X,alnum);char_type(X,white));char_type(X,punct)), not(X=93),char_code(C,X)%% ], not(X=91)%% .
reverse1([],A,A).
reverse2(A,G) :-string_codes(A,B),findall(C,(member(D,B),char_code(C,D)),E),reverse1(F,[],E),foldr(string_concat,F,G),!.
reverse_engineering2([[[a,b,r,c,d],[b,r,c]]],A).
rhetoric([as,A,is,to,B,C,is,to,D],A,B,C,D).
rhymes([["one","er","or","ar","an","ae","er","ler","ur","ard","ney","ald","ess","el"],["le","py","ye","ee","ice"]]).
rhymes([["one","er","or","ar","an","ae","er","ler","ur","ard","ney","ald","ess","el"],["le","py","ye","ee","ice"]]).%%removetoolongandnotrhyming(Lyrics1,SyllableCount,[],Verbs,Verbs) :- !.
rhymes([["one","er","or","ar","an","ae","er","ler","ur","ard","ney","ald","ess","el"],["le","py","ye","ee","ice"]]).%%removetoolongandnotrhyming(Lyrics1,SyllableCount,[],Verbs,Verbs) :- !./**removetoolongandnotrhyming(Lyrics0,Lyrics1,SyllableCount,Verbs1,Verbs2,Objects1,Objects2) :-%% makes list of all combos, checks, asks, asksremovetoolong1(Lyrics1,SyllableCount,Verbs1,[],Verbs3), %% do after end* %% not until object%% find v xremovenotrhyming1(Lyrics0,Verbs3,Verbs4),removetoolong1(Lyrics1,SyllableCount,[],Verbs,Verbs) :- !.%*removetoolong1(Lyrics1,SyllableCount,Verbs1,Verbs2,Verbs3) :-Verbs1=[Verb4|Verbs5],append_list(Lyrics1,Verb4,Lyrics2),length(Lyrics2,Length),(Length<=SyllableCount->(append(Verbs2,[Verb4],Verbs6),removetoolong1(Lyrics1,SyllableCount,Verbs5,Verbs6,Verbs3));(removetoolong1(Lyrics1,SyllableCount,Verbs5,Verbs2,Verbs3))).
rhymes2(Syllable1,Syllable2) :-rhymes(Lists),member(List1,Lists),member(Syllable1,List1),member(Syllable2,List1).
rhymes2(Syllable1,Syllable2) :-rhymes(Lists),member(List1,Lists),member(Syllable1,List1),member(Syllable2,List1).lyrics(Form1,Lyrics,Maxlength) :-%%find("Who is the song about?",Character),%%lyrics1(Form,Character,[],Lyrics).
rhythm1(R2) :-writeln("Please enter the song's bar rhythm in the format [[time,type=n/r,length,nth_note_from_mel_harm,velocity=0-127],...], e.g. [[0,n,1/2,1,80],[1/2,n,1/2,1,80],[1,n,1/2,2,80],[1+1/2,n,1/2,2,80],[2,n,1/2,3,80],[2+1/2,n,1/2,3,80],[3,n,1/2,4,80],[3+1/2,n,1/2,4,80]] or \"ta1 ta1 tityca ta.\" (note full stop) where \"1\" optionally denotes nth_note_from_mel_harm."),read_string(user_input, "\n", "\r", _, R10),%trace,rhythm2(R10,R2),!.
rm(Path) :-Rm="rm -rf ",concat_list([Rm," ",Path],Command),shell1_s(Command).
rot_n(A,N,B) :- %strings_string(A,C), string_codes(A,C), findall(E,(member(D,C),E is D+N%,char_code(F,E) ),G), string_codes(B,G).
rpg_game_builder2D :-/**writeln("Enter filename in rpg_strings folder to convert to map:"),read_string(user_input, "\n", "\r", _End1, File_name)phrase_from_file_s(string(String00a), File_name),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),String02a=[[strings,Strings],[apply,Apply],[objects,Objects],[notes,Notes]]writeln("Will you enter a 2D or 3D map:"),read_string(user_input, "\n", "\r", _End1, Dimensions),(Dimensions="2D"->**/writeln("Enter 2D map e.g. [\"***\",\"***\"]:"),read_string(user_input, "\n", "\r", _End1, Strings1),term_to_atom(Term,Strings1),strings_to_grid(Term,Grid),nl,writeln("Enter filename (to be saved in saved_games2d/):"),read_string(user_input, "\n", "\r", _End1, First_item),string_concat("saved_games2d/",First_item,Game_path),term_to_atom(Grid,String02a_b),string_atom(String02a_c,String02a_b),(open_s(Game_path,write,Stream1),write(Stream1,String02a_c),close(Stream1)),!.
rpg_game_builder3D :-/**writeln("Enter filename in rpg_strings folder to convert to map:"),read_string(user_input, "\n", "\r", _End1, File_name)phrase_from_file_s(string(String00a), File_name),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),String02a=[[strings,Strings],[apply,Apply],[objects,Objects],[notes,Notes]]writeln("Will you enter a 2D or 3D map:"),read_string(user_input, "\n", "\r", _End1, Dimensions),(Dimensions="2D"->**/writeln("Enter 3D map e.g. [[\"***\",\"***\"],[\"***\",\"***\"]] top-down:"),read_string(user_input, "\n", "\r", _End1, Strings1),term_to_atom(Term,Strings1),strings_to_grid3d(Term,Grid),nl,writeln("Enter filename (to be saved in saved_games/):"),read_string(user_input, "\n", "\r", _End2, First_item),string_concat("saved_games/",First_item,Game_path),term_to_atom(Grid,String02a_b),string_atom(String02a_c,String02a_b),(open_s(Game_path,write,Stream1),write(Stream1,String02a_c),close(Stream1)),!.
rpg_game_builder_random2D :-writeln("Enter X dimension of maze:"),read_string(user_input, "\n", "\r", _End1, X1),number_string(X,X1),writeln("Enter Y dimension of maze:"),read_string(user_input, "\n", "\r", _End2, Y1),number_string(Y,Y1),build_maze2d(X,Y,Grid),nl,writeln("Enter filename (to be saved in saved_games2d/):"),read_string(user_input, "\n", "\r", _End3, First_item),string_concat("saved_games2d/",First_item,Game_path),term_to_atom(Grid,String02a_b),string_atom(String02a_c,String02a_b),(open_s(Game_path,write,Stream1),write(Stream1,String02a_c),close(Stream1)),!.
rpg_game_builder_random3D :-writeln("Enter X dimension of maze:"),read_string(user_input, "\n", "\r", _End1, X1),number_string(X,X1),writeln("Enter Y dimension of maze:"),read_string(user_input, "\n", "\r", _End2, Y1),number_string(Y,Y1),writeln("Enter Z dimension of maze:"),read_string(user_input, "\n", "\r", _End2, Z1),number_string(Z,Z1),build_maze3d(X,Y,Z,Grid),nl,writeln("Enter filename (to be saved in saved_games/):"),read_string(user_input, "\n", "\r", _End1, First_item),string_concat("saved_games/",First_item,Game_path),term_to_atom(Grid,String02a_b),string_atom(String02a_c,String02a_b),(open_s(Game_path,write,Stream1),write(Stream1,String02a_c),close(Stream1)),!.
rpg_game_player3D :-writeln("Enter filename (to be loaded from saved_games/*):"),read_string(user_input, "\n", "\r", _End4, First_item),string_concat("saved_games/",First_item,Game_path),phrase_from_file_s(string(String00a),Game_path),string_codes(String02b,String00a),atom_to_term(String02b,Map,[]),retractall(map(_)),assertz(map(Map)),get_params(Map,X,Y,Z),traverse(Z,X,Y,[],_,[],_,Map,_),!.
rpg_game_player_autorun2D :-writeln("This algorithm automatically tests 2D maps."),writeln("Enter filename (to be loaded from saved_games2d/*):"),read_string(user_input, "\n", "\r", _End3, First_item),string_concat("saved_games2d/",First_item,Game_path),phrase_from_file_s(string(String00a),Game_path),string_codes(String02b,String00a),atom_to_term(String02b,Map4,[]),retractall(map(_)),assertz(map(Map4)),get_map_dimensions2d(Map4),writeln("Enter X co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End1, X1),number_string(X,X1),writeln("Enter Y co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End2, Y1),number_string(Y,Y1),writeln("Enter apply a to b giving c, in the form [[a1,b1,c1],[a2,b2,c2]]:"),read_string(user_input, "\n", "\r", _End5, Applys),atom_to_term(Applys,Applys_atom,[]),retractall(apply1(_)),findall(_,(member(Apply_atom,Applys_atom),assertz(apply1(Apply_atom))),_),retractall(path(_)),%assertz(path([]))),_),traverse(X,Y),!.
rpg_game_player_autorun3D :-writeln("This algorithm automatically tests 3D maps."),writeln("Enter filename (to be loaded from saved_games/*):"),read_string(user_input, "\n", "\r", _End3, First_item),string_concat("saved_games/",First_item,Game_path),phrase_from_file_s(string(String00a),Game_path),string_codes(String02b,String00a),atom_to_term(String02b,Map4,[]),retractall(map(_)),assertz(map(Map4)),get_map_dimensions(Map4),writeln("Enter X co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End1, X1),number_string(X,X1),writeln("Enter Y co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End2, Y1),number_string(Y,Y1),writeln("Enter Z co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End4, Z1),number_string(Z,Z1),writeln("Enter apply a to b giving c, in the form [[a1,b1,c1],[a2,b2,c2]]:"),read_string(user_input, "\n", "\r", _End5, Applys),atom_to_term(Applys,Applys_atom,[]),retractall(apply1(_)),findall(_,(member(Apply_atom,Applys_atom),assertz(apply1(Apply_atom))),_),retractall(path(_)),%writeln([Z,X,Y]),traverse(Z,X,Y),!.
rule(RuleName,1,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-        member(Var,InputVars1),        rule3(RuleName,Var,VarList,VarList2,Rule,Vars),append(InputVars1,Vars,InputVars2).
rule(RuleName,1,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-        member(Var,InputVars1),        rule3(RuleName,Var,VarList,VarList2,Rule,Vars),append(InputVars1,Vars,InputVars2).rule3(RuleName,Var,VarList,VarList3,Rule,[Var1,Var2]) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Var1,Var2]],!.
rule(RuleName,2,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-        member(Var,InputVars1),        member(Vara,InputVars1),        rule4(RuleName,Var,Vara,VarList,VarList2,Rule,Var1),append(InputVars1,[Var1],InputVars2).
rule(RuleName,2,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-        member(Var,InputVars),        member(Vara,InputVars),        rule5(RuleName,Var,Vara,VarList,VarList2,Rule,Vars),append(InputVars1,Vars,InputVars2).
rule1(RuleName,1,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-        member(Var,InputVars1),        rule3(RuleName,Var,VarList,VarList2,Rule,Vars),append(InputVars1,Vars,InputVars2).
rule1(RuleName,2,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-        member(Var,InputVars1),        member(Vara,InputVars1),        rule4(RuleName,Var,Vara,VarList,VarList2,Rule,Var1),append(InputVars1,[Var1],InputVars2).
rule1(RuleName,2,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-        member(Var,InputVars),        member(Vara,InputVars),        rule5(RuleName,Var,Vara,VarList,VarList2,Rule,Vars),append(InputVars1,Vars,InputVars2).rule5(RuleName,Var,Vara,VarList,VarList3,Rule,[Var1,Var2]) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Vara,Var1,Var2]],!.
rule3(RuleName,Var,VarList,VarList3,Rule,Var1,Var2) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Var1,Var2]],!.
rule3(RuleName,Var,VarList,VarList3,Rule,Var1,Var2) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Var1,Var2]],!.rule6(RuleName,Var,Vara,_VarList,_VarList2,Rule) :-        Rule=[RuleName,[Var,Vara]],!.
rule4(RuleName,Var,Vara,VarList,VarList2,Rule,Var1) :-        var(VarList,Var1,VarList2),        Rule=[RuleName,[Var,Vara,Var1]],!.
rule4(RuleName,Var,Vara,VarList,VarList2,Rule,Var1) :-        var(VarList,Var1,VarList2),        Rule=[RuleName,[Var,Vara,Var1]],!.%%ae be with predicate support alsorule5(RuleName,Var,Vara,VarList,VarList3,Rule,Var1,Var2) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Vara,Var1,Var2]],!.
rule6(RuleName,Var,Vara,_VarList,_VarList2,Rule) :-        Rule=[RuleName,[Var,Vara]],!.
rulea(OutModes,RuleName,Vars1,VarList,VarList3,Rule,OutputVars,Vars2) :-    get_vars(OutModes,VarList,VarList3,OutputVars,[],Vars2),    append(Vars1,Vars2,Vars3),    Rule=[RuleName,Vars3],!.
ruler1(A) :- length(A).ruler2(A) :- string_length(A).
run :- %%,%%prolog_edit:locate("/Applications/MacVim.app/Contents/MacOS/macvim-askpass",F,_L),%%arg(1,F,A),%%prolog_edit:locate("file1.txt",_F2,L2),%%set_prolog_flag(editor,'gvim --line2'),%%prolog_edit:edit_command(gvim, '%e --line%d'),%%atom_concat(A, ' file1.txt --line',B),%%atom_concat(B, 2 ,C),%%shell(C),%%prolog_edit:edit_source(L),edit("file1.txt"),writeln(here).
run1 :-Brdict1='brdict1.txt',Brdict2='brdict2.txt',Brdict1vps='brdict1vps.txt',Brdict2vps='brdict2vps.txt',MacPath='~/yourfolder/',MacPath1='/Users/yourname/yourfolder/',VPSPath='root@xxx.xxx.xxx.xxx:/var/www/yourdomain.com/',Scp='scp -p',atom_concat(MacPath1,Brdict1,   Brdict1Filename),atom_concat(MacPath1,Brdict1vps,Brdict1vpsFilename),shell1(Scp,VPSPath,Brdict1,MacPath,Brdict1vps,Command1),shell1(Command1),((time_file(Brdict1Filename,Brdict1FilenameTime),time_file(Brdict1vpsFilename,Brdict1FilenameTime))->true;(prep1(Brdict1,Brdict1Term),prep1(Brdict1vps,Brdict1vpsTerm),(Brdict1Term=Brdict1vpsTerm->true;(append(Brdict1Term,Brdict1vpsTerm,Brdict1Term2),update1(Brdict1,Brdict1Term2),shell1(Scp,MacPath,Brdict1,VPSPath,Brdict1,Command3),shell1(Command3))))),shell1('rm',MacPath,Brdict1vps,Command5),shell1(Command5),atom_concat(MacPath1,Brdict2,   Brdict2Filename),atom_concat(MacPath1,Brdict2vps,Brdict2vpsFilename),shell1(Scp,VPSPath,Brdict2,MacPath,Brdict2vps,Command2),shell1(Command2),((time_file(Brdict2Filename,Brdict2FilenameTime),time_file(Brdict2vpsFilename,Brdict2FilenameTime))->true;(prep2(Brdict2,Brdict2Term),prep2(Brdict2vps,Brdict2vpsTerm),(Brdict2Term=Brdict2vpsTerm->true;(append(Brdict2Term,Brdict2vpsTerm,Brdict2Term2),update1(Brdict2,Brdict2Term2),shell1(Scp,MacPath,Brdict2,VPSPath,Brdict2,Command4),shell1(Command4))))),shell1('rm',MacPath,Brdict2vps,Command6),shell1(Command6),!.
run_for_each_place(N):-numbers(N,1,[],Ns),findall(_,(member(N1,Ns),writeln([place,N1]),run_daily,nl),_).
rungrammarly :- %%,prolog_edit:locate("/Applications/Grammarly.app/Contents/MacOS/Grammarly",F,_L),arg(1,F,A),%%prolog_edit:locate("file1.txt",_F2,L2),%%set_prolog_flag(editor,'gvim --line2'),%%prolog_edit:edit_command(gvim, '%e --line%d'),atom_concat(A, ' file1.txt --line',C),%%atom_concat(B, 2 ,C),shell(C),%%prolog_edit:edit_source(L),%%edit("file1.txt"),a(a),writeln(here),!.
s([S,V,Def_Art,O,With,Def_Art,O2],[V,[S,O,[With,O2]]]) :-n(S),v(V),def_art(Def_Art),n(O),with(With),n(O2),!.s([S,V,Def_Art,O,While,V2,Along,Def_Art,O2],[V,[S,O,[While,V2,[Along,O2]]]]) :-n(S),v(V),def_art(Def_Art),n(O),while(While),v(V2),along(Along),n(O2),!.
s1(A) :- s(S),decision_tree(S,T), deps(T,A).
safety :- not(bomb).
sale("people pouring in").
sale(Interested) :- (Interested="y"->reward;mistakes).
same_items([[t,list],[[_,_,_,2],[[t,list],[[_,_,_,1]]]]],[[t,list],[[[t,list],[[_,_,_,1]]],[_,_,_,3]]]).
save_file(File_path,File) :-term_to_atom(File,String02a_b),string_atom(String02a_c,String02a_b),(open_s(File_path,write,Stream1),write(Stream1,String02a_c),close(Stream1)),!.
save_file_sh(F1,File_term) :- (absolute_url(F1)-> F1=Path; (working_directory_sh(F11,F11), string_concat_url(F11,F1,Path))),split_string(Path,"/","/",Path1),append(_P1,[P2],Path1),string_concat(P2,"tmp54837",P3),save_file_s(P3,File_term),Mv="rsync -avz --remove-source-files ",concat_list([Mv,P3," ",Path],Command),shell1_s(Command),!.
save_session(Session_number,Session) :- (var(Session_number)->generate_session_key(Session_number);true), foldr(string_concat,["sessions/session",Session_number,".txt"],Path), save_file_s(Path,Session),!.
scaler(Scale,Cbr) :-%open_file_s()characterbr(Cs),(Scale=1->Cbr=Cs;(findall([A,B,C1],(member([A,B,C],Cs),scale([Scale,C],C1)),Cbr))).
scp1(Repository_root_path,Repository,Gitl_data_path1,N1,R1,N_path) :- (number_string(N1,N1S),save_file_s(N_path,N1S)),%trace,  foldr(string_concat,[Gitl_data_path1,Repository,"/",N1,"/"],R2), (exists_directory_s(R2)->true;make_directory(R2)), Scp="scp -pr ", foldr(string_concat,[Repository_root_path,Repository,"/*"],From1),  atomic_list_concat(B," ",From1), atomic_list_concat(B,"\\ ",From),  foldr(string_concat,[Gitl_data_path1,Repository,"/",N1,"/."],To_a1), atomic_list_concat(C," ",To_a1), atomic_list_concat(C,"\\ ",To_a), foldr(string_concat,[Scp,From," ",To_a],Command),   directory_files(R1,F),delete_invisibles_etc(F,G),%trace, (G=[]->true; shell1_s(Command)).
sd1(RTests,R1,To_m_1,Repository_root_path,Repository,Gitl_data_path1,N1,R1,N_path,To,HTML) :-%trace,  %findall(T1a,(member([T1,_],RTests),string_concat(R1,T1a,T1)),R11), findall([T1a,BA],(member([T1,BA],RTests),string_concat(R1,T1a,T1)),R110), find_files(To_m_1,Tests1), findall(T1a,(member([T1,_],Tests1),string_concat(To_m_1,T1a,T1)),T11), findall([T1a,BA],(member([T1,BA],Tests1),string_concat(To_m_1,T1a,T1)),T110), not(T110=R110),  scp1(Repository_root_path,Repository,Gitl_data_path1,N1,R1,N_path),   find_files(To,Tests2), findall(T2b,(member([T2,_],Tests2),string_concat(To,T2b,T2)),T21), %trace, intersection(T11,T21,IT12), subtract(T11,T21,D), subtract(T21,T11,I), %trace, findall([A,B],(member([A1,B],Tests1),string_concat(To_m_1,A,A1)),Tests11), findall([A,B],(member([A1,B],Tests2),string_concat(To,A,A1)),Tests21), append(Tests11,Tests21,Tests3), findall([A1,B],(member(A,IT12),string_concat(To_m_1,A,A1),member([A1,B],Tests1)),IT11), findall([A1,B],(member(A,IT12),string_concat(To,A,A1),member([A1,B],Tests2)),IT123), %trace, length(IT11,IT11L), numbers(IT11L,1,[],Ns),  findall([*,T1a,C],(member(NA,Ns),get_item_n(IT11,NA,[A1,B1]),string_concat(To_m_1,T1a,A1),get_item_n(IT123,NA,[_A2,B2]), split_string(B1,"\n\r","\n\r",IT111), split_string(B2,"\n\r","\n\r",IT121), %trace, diff_gitl(IT111,IT121,C)),CA), %trace,  findall([*,A,[[i,B14]]],(member(A,I),%string_concat(To_m_1,A,A1), member([A,B],Tests3),split_string(B,"\n\r","\n\r",B1), findall([B11,"<br>"],member(B11,B1),B12), flatten(B12,B13),foldr(string_concat,B13,B14)),IT11a), findall([*,A,[[d,B14]]],(member(A,D),%string_concat(To,A,A1), member([A,B],Tests3),split_string(B,"\n\r","\n\r",B1), findall([B11,"<br>"],member(B11,B1),B12), flatten(B12,B13),foldr(string_concat,B13,B14)),IT123a),  foldr(append,[IT11a,IT123a,CA],C1),  diff_gitl(C1,HTML).
search("quantity",Container,F2,F3) :- member([Container,F3],F2).
search_address_book(Book,Name,Number) :- member([Name1,Number],Book), sub_string(Name1,_,_,_,Name).
search_for_n_words_in_common(A,Terms,N) :-(is_list(A)->term_to_atom(A,A0);A=A0),downcase_atom(A0,A2),(is_list(Terms)->term_to_atom(Terms,Terms1);Terms=Terms1),downcase_atom(Terms1,Terms2),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",split_string(A2,SepandPad,SepandPad,B1),split_string(Terms2,SepandPad,SepandPad,B2),%findall(A3,(member(A3,B2),%downcase_atom(A3,Terms12),%split_string(A3,SepandPad,SepandPad,Terms13)),A4),flatten(A4,A5),intersection(B1,B2,In),length(In,N),!.
search_for_n_words_in_common_succ(A,B, N) :-clean_input(A,A0),clean_input(B,B0),% Month wo sepandpad or like search_for_n_words_in_common, A,B, year((search_for_n_words_in_common(A,B,N),once(not(N=0)))->true;((months(Months1),findall(X2,(member(X1,Months1),downcase_atom(X1,X),%trace,atom_string(X,X2)),Months),next_item(A0,B0,Months))->true;((%trace,string_length(A0,1),string_length(B0,1),string_codes(A0,[A0C]),string_codes(B0,[B0C]),B0C is A0C+1)->true;((find_first_number(A0,N1),find_first_number(B0,N2),N2 is N1+1))))),!.
search_for_term_n(Cell,Terms,Result) :-findall(What_is_found,(%[Where_searching,What_is_found],member(What_is_found,Terms),search(Cell,What_is_found)),Result),!.
search_for_term_n(Cell,Terms,Result) :-findall(What_is_found,(%[Where_searching,What_is_found],member(What_is_found,Terms),search(Cell,What_is_found)),Result),!.% find_first_term_n("a b c",["a","b"],C).
search_whole_string(A,Term) :-downcase_atom(A,A2),downcase_atom(Term,Term2),sub_string(A2,_,_,_,Term2),!.
search_whole_string(A,Term) :-downcase_atom(A,A2),downcase_atom(Term,Term2),sub_string(A2,_,_,_,Term2),!.find(A,Terms,B) :-findall(T,(member(T,Terms),search(A,[T])),B),!.
sectest(0) :- !.
sectest(Agree_or_disagree,Marks_d):-daysbspeoplearmy, %% dot me ondaysbspeoplearmy, %% dot them on%find_time(H,M,S),% for last 6 months, marks for this assignmentdaysbspeoplearmy, %% dot question onmarks(0,Marks1), %% 1marks(0,Marks2), %% 2marks(0,Marks3), %% 3marks(0,Marks4), %% 4marks(0,Marks5), %% 5marks(0,Marks6), %% 6marks(0,Marks7), %% 7marks(0,Marks8), %% 8marks(0,Marks9), %% 9marks(0,Marks10), %% 10marks(0,Marks11), %% 11marks(0,Marks12), %% 12marks(0,Marks13), %% 13marks(0,Marks14), %% 14marks(0,Marks15), %% 15marks(0,Marks16), %% 16daysbspeoplearmy, %% dot answer onfoldr(plus,[Marks1,Marks2,Marks3,Marks4,Marks5,Marks6,Marks7,Marks8,Marks9,Marks10,Marks11,Marks12,Marks13,Marks14,Marks15,Marks16],0,Marks_a),(Marks_a > 30 -> Marks_b = 80 ; (Marks_f is Marks_a/30,Marks_b is Marks_f*79)),(((Agree_or_disagree="a",Marks_b<80)->(Marks_e is Marks_b/80,Marks_g is Marks_e*4,Marks_c is 65+Marks_g))->true;(((Agree_or_disagree="d",Marks_b<80)->(Marks_e is Marks_b/80,Marks_g is Marks_e*4,Marks_c is 70+Marks_g))->true;(((Agree_or_disagree="d",Marks_b>=80)->(Marks_e is Marks_b/80,Marks_g is Marks_e*4,Marks_c is 75+Marks_g))->true;(((Agree_or_disagree="a",Marks_b>=80)->Marks_c is 80))))),floor(Marks_c,Marks_d),!.%writeln([Person,H,M,S,Marks_b,marks]).
sectest(Person):-List=[1%%,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],findall(B,(member(_A,List),%%find_time(H,M,S),random_member(H,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]),random_member(M,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]),random_member(S,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]),B=[H,M,S]),C),sort(C,D),findall(_,(member(E,D),writeln1([Person,thought,at,time,E]),thought, %% radio buttonthought, %% thoughtthought, %% seen-as versionthought, %% commentthought, %% connectionthought, %% Bthought %% B solution),_).
sectest(Person):-find_time(H,M,S),threats(0,Threats),writeln([Person,H,M,S,Threats,threats]).
sectest(Person1):-Person1=[Item1a,Item2a,_,_,_,_,_,_,Month2,Day2,_],Person2=[Item1a,Item2a],get_time(TS),stamp_date_time(TS,date(_Year,Month1,Day1,_Hour1,_Minute1,_Seconda,_A,_TZ,_False),local),((Month2 is mod(Month1,2)) ->((Day1 is Day2)->do_c(Month1,Day1,Person2);true);true).
sectest0 :- %% Pixel grid is 10 cm above centre of MacBook Air camera %% Pixels are 1,1,1 mm, facing west %% Pixels are on for 5 seconds %% 0,0 is origin  %% For Cosmology to work: texttobr2(1000), %% 100 done-up As * 10 songstexttobr2(2), %% dot on graciously give, graciously givetexttobr2(20), %% spiritually play 10 songs to light pixel /**light([ [0,0,black],[1,0,white], [0,1,black],[1,1,white], [0,2,black],[1,2,white], [0,3,black],[1,3,white], [0,4,black],[1,4,white], [0,5,black],[1,5,white], [0,6,black],[1,6,white], [0,7,black],[1,7,white], [0,8,black],[1,8,white], [0,9,black],[1,9,white] ]).**/  /**light([[1,9,white],[2,9,white],[3,9,black],[4,9,white],[5,9,white], [1,8,white],[2,8,white],[3,8,black],[4,8,white],[5,8,white], [1,7,white],[2,7,black],[3,7,white],[4,7,black],[5,7,white], [1,6,white],[2,6,black],[3,6,white],[4,6,black],[5,6,white], [1,5,white],[2,5,black],[3,5,white],[4,5,black],[5,5,white], [1,4,black],[2,4,white],[3,4,white],[4,4,white],[5,4,black], [1,3,black],[2,3,white],[3,3,white],[4,3,white],[5,3,black], [1,2,white],[2,2,white],[3,2,white],[4,2,white],[5,2,white], [1,1,white],[2,1,white],[3,1,white],[4,1,white],[5,1,white]]).
sectest0(Form1,Lyrics,Melody,Harmony,MelodyParts,HarmonyParts,Vocalstubinstrument,Song1) :-check_asc2mid,form(Form1),%%Form1=[v2,o],find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT),remove_dups(Form1,[],Form2),Voiceparts1=[v1,v2,c,s],intersection(Form1,[v1,v2,c,s],Voiceparts2),lyrics(Voiceparts1,Lyrics,Maxlength),findall(B,(member(A1,Form2),string_concat(B1,_C,A1),string_length(B1,1),atom_string(B,B1)),Form3),remove_dups(Form3,[],Form4),%%repeat, %% in case melody, harmony don't workmelodyharmony(Form4,CPT,Maxlength,Melody,Harmony),%%writeln(melodyharmony(Form4,CPT,Maxlength,Melody,Harmony)), %% ***instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument),writeln(instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument)),%%writeln(rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,%%MelodyInstruments,HarmonyInstruments,MelodyParts,%%HarmonyParts,Lyrics,%%Vocalstubinstrument,Song1)), %%,rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Lyrics,Vocalstubinstrument,Song1), %%,outputlyrics(Lyrics),!.
sectest0(Form1,Lyrics,Melody,Harmony,MelodyParts,HarmonyParts,Vocalstubinstrument,Song1) :-check_asc2mid,retractall(rhythm(_)),assertz(rhythm([])), %%texttobr2qb(2), %%Imagine song%%form(Form1),writeln("Please enter form in format e.g. [n,v1,i1,v2,c,t2,s,s,s]."),read_string(user_input, "\n", "\r", _, Form1A),atom_to_term(Form1A,Form1,_),%%Form1=[v2,o],%%find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT),writeln("Should the chord progression type be 1451, 1564, 1645, classical or classicalpop?"),read_string(user_input, "\n", "\r", _, CPT1),atom_string(CPT,CPT1),remove_dups(Form1,[],Form2),Voiceparts1=[v1,v2,c,s],intersection(Form1,[v1,v2,c,s],Voiceparts2),%%lyrics(Voiceparts1,Lyrics,Maxlength),writeln(["Please enter lyrics for parts",Voiceparts1,"in format e.g. [[v1, [\"All\", \"ney\", \"goes\", \"to\", \"the\"], [\"Le\", \"ice\", \"is\", \"in\"], [\"the\", \"mir\", \"ac\"], [\"the\", \"graph\"]], [v2, [\"Dix\", \"ard\"]]]."]),read_string(user_input, "\n", "\r", _End2, LyricsA),atom_to_term(LyricsA,Lyrics,_),findall(DH,(member(C1H,Lyrics),C1H=[_|C2H],member(CH,C2H),length(CH,DH)),EH),sort(EH,FH),reverse(FH,GH),GH=[Maxlength|_], findall(B,(member(A1,Form2),string_concat(B1,_C,A1),string_length(B1,1),atom_string(B,B1)),Form3),remove_dups(Form3,[],Form4),%%repeat, %% in case melody, harmony don't workmelodyharmony(Form4,CPT,Maxlength,Melody,Harmony),%%writeln(melodyharmony(Form4,CPT,Maxlength,Melody,Harmony)), %% ***instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument),rhythm,%(MelodyParts,HarmonyParts),%%writeln(instruments(Form1,MelodyInstruments,HarmonyInstruments,%%MelodyParts,HarmonyParts,%%Vocalstubinstrument)),%%writeln(rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,%%MelodyInstruments,HarmonyInstruments,MelodyParts,%%HarmonyParts,Lyrics,%%Vocalstubinstrument,Song1)), %%,%%%trace,rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1), %%,rhythm(Rhythm),Meta_file=[[form,Form1],[chord_progressions,CPT],[voice_part,Voiceparts2],[melody,Melody],[harmony,Harmony],[melody_instruments,MelodyInstruments],[harmony_instruments,HarmonyInstruments],[melody_parts,MelodyParts],[harmony_parts,HarmonyParts],[lyrics,Lyrics],[genre,["anthem"]],[rhythm,Rhythm]],term_to_atom(Meta_file,Meta_file1),string_atom(Meta_file2,Meta_file1),concat_list("",[File1,"_meta.txt"],File2),(open_s(File2,write,Stream1),write(Stream1,Meta_file2),close(Stream1)),!.
sectest0(Form1,Lyrics,Melody,Harmony,MelodyParts,HarmonyParts,Vocalstubinstrument,Song1) :-check_asc2mid, %%texttobr2qb(2), %%Imagine songform(Form1),%%Form1=[v2,o],find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT),remove_dups(Form1,[],Form2),Voiceparts1=[v1,v2,c,s],intersection(Form1,[v1,v2,c,s],Voiceparts2),lyrics(Voiceparts1,Lyrics,Maxlength),findall(B,(member(A1,Form2),string_concat(B1,_C,A1),string_length(B1,1),atom_string(B,B1)),Form3),remove_dups(Form3,[],Form4),%%repeat, %% in case melody, harmony don't workmelodyharmony(Form4,CPT,Maxlength,Melody,Harmony),%%writeln(melodyharmony(Form4,CPT,Maxlength,Melody,Harmony)), %% ***instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument),%%writeln(instruments(Form1,MelodyInstruments,HarmonyInstruments,%%MelodyParts,HarmonyParts,%%Vocalstubinstrument)),%%writeln(rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,%%MelodyInstruments,HarmonyInstruments,MelodyParts,%%HarmonyParts,Lyrics,%%Vocalstubinstrument,Song1)), %%,rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1), %%,Meta_file=[[form,Form1],[chord_progressions,CPT],[voice_part,Voiceparts2],[melody,Melody],[harmony,Harmony],[melody_instruments,MelodyInstruments],[harmony_instruments,HarmonyInstruments],[melody_parts,MelodyParts],[harmony_parts,HarmonyParts],[lyrics,Lyrics],[genre,["anthem"]]],term_to_atom(Meta_file,Meta_file1),string_atom(Meta_file2,Meta_file1),concat_list("",[File1,"_meta.txt"],File2),(open_s(File2,write,Stream1),write(Stream1,Meta_file2),close(Stream1)),!.
sectest0(Form1,Lyrics,Melody,Harmony,MelodyParts,HarmonyParts,Vocalstubinstrument,Song1) :-check_asc2mid, %%texttobr2qb(2), %%Imagine song%%form(Form1),writeln("Please enter form in format e.g. [n,v1,i1,v2,c,t2,s,s,s]."),read_string(user_input, "\n", "\r", _End21, Form1A),atom_to_term(Form1A,Form1,_),%%Form1=[v2,o],%%find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT),writeln("Should the chord progression type be 1451, 1564, 1645, classical or classicalpop?"),read_string(user_input, "\n", "\r", _End2, CPT1),atom_string(CPT,CPT1),remove_dups(Form1,[],Form2),Voiceparts1=[v1,v2,c,s],intersection(Form1,[v1,v2,c,s],Voiceparts2),%%lyrics(Voiceparts1,Lyrics,Maxlength),writeln(["Please enter lyrics for parts",Voiceparts1,"in format e.g. [[v1, [\"All\", \"ney\", \"goes\", \"to\", \"the\"], [\"Le\", \"ice\", \"is\", \"in\"], [\"the\", \"mir\", \"ac\"], [\"the\", \"graph\"]], [v2, [\"Dix\", \"ard\"]]]."]),read_string(user_input, "\n", "\r", _End2, LyricsA),atom_to_term(LyricsA,Lyrics,_),findall(DH,(member(C1H,Lyrics),C1H=[_|C2H],member(CH,C2H),length(CH,DH)),EH),sort(EH,FH),reverse(FH,GH),GH=[Maxlength|_], findall(B,(member(A1,Form2),string_concat(B1,_C,A1),string_length(B1,1),atom_string(B,B1)),Form3),remove_dups(Form3,[],Form4),%%repeat, %% in case melody, harmony don't workmelodyharmony(Form4,CPT,Maxlength,Melody,Harmony),%%writeln(melodyharmony(Form4,CPT,Maxlength,Melody,Harmony)), %% ***instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument),%%writeln(instruments(Form1,MelodyInstruments,HarmonyInstruments,%%MelodyParts,HarmonyParts,%%Vocalstubinstrument)),%%writeln(rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,%%MelodyInstruments,HarmonyInstruments,MelodyParts,%%HarmonyParts,Lyrics,%%Vocalstubinstrument,Song1)), %%,%%trace,rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1), %%,Meta_file=[[form,Form1],[chord_progressions,CPT],[voice_part,Voiceparts2],[melody,Melody],[harmony,Harmony],[melody_instruments,MelodyInstruments],[harmony_instruments,HarmonyInstruments],[melody_parts,MelodyParts],[harmony_parts,HarmonyParts],[lyrics,Lyrics],[genre,["anthem"]]],term_to_atom(Meta_file,Meta_file1),string_atom(Meta_file2,Meta_file1),concat_list("",[File1,"_meta.txt"],File2),(open_s(File2,write,Stream1),write(Stream1,Meta_file2),close(Stream1)),!.
sectest0(Form1,Lyrics,Melody,Harmony,MelodyParts,HarmonyParts,Vocalstubinstrument,Song1) :-check_asc2mid, %%texttobr2qb(2), %%Imagine songform(Form1),%%Form1=[v2,o],find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT),remove_dups(Form1,[],Form2),Voiceparts1=[v1,v2,c,s],intersection(Form1,[v1,v2,c,s],Voiceparts2),lyrics(Voiceparts1,Lyrics,Maxlength),findall(B,(member(A1,Form2),string_concat(B1,_C,A1),string_length(B1,1),atom_string(B,B1)),Form3),remove_dups(Form3,[],Form4),%%repeat, %% in case melody, harmony don't workmelodyharmony(Form4,CPT,Maxlength,Melody,Harmony),%%writeln(melodyharmony(Form4,CPT,Maxlength,Melody,Harmony)), %% ***instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument),%%writeln(instruments(Form1,MelodyInstruments,HarmonyInstruments,%%MelodyParts,HarmonyParts,%%Vocalstubinstrument)),%%writeln(rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,%%MelodyInstruments,HarmonyInstruments,MelodyParts,%%HarmonyParts,Lyrics,%%Vocalstubinstrument,Song1)), %%,rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1), %%,Meta_file=[[form,Form1],[chord_progressions,CPT],[voice_part,Voiceparts2],[melody,Melody],[harmony,Harmony],[melody_instruments,MelodyInstruments],[harmony_instruments,HarmonyInstruments],[melody_parts,MelodyParts],[harmony_parts,HarmonyParts],[lyrics,Lyrics],[genre,["anthem"]]],term_to_atom(Meta_file,Meta_file1),string_atom(Meta_file2,Meta_file1),concat_list("",[File1,"_meta.txt"],File2),(open_s(File2,write,Stream1),write(Stream1,Meta_file2),close(Stream1)),!.
sectest0(Form1,Lyrics,Melody,Harmony,MelodyParts,HarmonyParts,Vocalstubinstrument,Song1) :-check_asc2mid, %%texttobr2qb(2), %%Imagine songform(Form1),%%Form1=[v2,o],find("Should the chord progression type be 1451, 1564, 1645, Classical or Classical Pop?",CPT),remove_dups(Form1,[],Form2),Voiceparts1=[v1,v2,c,s],intersection(Form1,[v1,v2,c,s],Voiceparts2),lyrics(Voiceparts1,Lyrics,Maxlength),findall(B,(member(A1,Form2),string_concat(B1,_C,A1),string_length(B1,1),atom_string(B,B1)),Form3),remove_dups(Form3,[],Form4),%%repeat, %% in case melody, harmony don't workmelodyharmony(Form4,CPT,Maxlength,Melody,Harmony),%%writeln(melodyharmony(Form4,CPT,Maxlength,Melody,Harmony)), %% ***instruments(Form1,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Vocalstubinstrument),%%writeln(instruments(Form1,MelodyInstruments,HarmonyInstruments,%%MelodyParts,HarmonyParts,%%Vocalstubinstrument)),%%writeln(rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,%%MelodyInstruments,HarmonyInstruments,MelodyParts,%%HarmonyParts,Lyrics,%%Vocalstubinstrument,Song1)), %%,rendersong(Form1,Voiceparts2,Maxlength,Melody,Harmony,MelodyInstruments,HarmonyInstruments,MelodyParts,HarmonyParts,Lyrics,Vocalstubinstrument,Song1,File1), %%,Meta_file=[[form,Form1],[chord_progressions,CPT],[voice_part,Voiceparts2],[melody,Melody],[harmony,Harmony],[melody_instruments,MelodyInstruments],[harmony_instruments,HarmonyInstruments],[melody_parts,MelodyParts],[harmony_parts,HarmonyParts],[lyrics,Lyrics],[genre,["anthem"]]],term_to_atom(Meta_file,Meta_file1),string_atom(Meta_file2,Meta_file1),concat_list("",[File1,"_meta.txt"],File2),(open_s(File2,write,Stream1),write(Stream1,Meta_file2),close(Stream1)),!.
sectest1 :-meditators2(A),findall(_,(member(B,A),sectest(B)),_)/*sectest([first,last,dobd,dobm,doby,daylearned,monthlearned,yearlearned,1,0,16]),sectest([first,last,dobd,dobm,doby,daylearned,monthlearned,yearlearned,1,0,16])*/.
sectest1 :-sectest([first,last,dobd,dobm,doby,daylearned,monthlearned,yearlearned,1,0,16]),sectest([first,last,dobd,dobm,doby,daylearned,monthlearned,yearlearned,1,0,16]).
sectest11(0) :- !.
sectest_balance(Spiritual_Balance):-%phrase_from_file_s(string([N,_]), "a_tally.txt"),%string_codes(String02b,String00a),%atom_to_term(String00a,[N,_],[]),%numbers(N,1,[],Ns),%findall(_,(member(N1,Ns),%find_time1(H,M,S),politeness(0,Digits),% no_death(0,Threats2), % medits for life%writeln([N1,Digits]),numbers(Digits,1,[],N),findall(N2,(member(_N1,N),mind_read_a(N2,[0,1,2,3,4,5,6,7,8,9])),Spiritual_Balance).
sent2alg(Sent,I,O) :- Sent=[A,is,not,B],I=[[A,not_equals,B]],O=[true].
sent2alg(Sent,I,O) :- Sent=[check,N,is,_,number],I=[[number,N]],O=[true].
sent2alg(Sent,I,O) :- Sent=[check,N1,is,greater,than,N2],I=[[N1,>,N2]],O=[true].
sent2alg(Sent,I,O) :- Sent=[sort,IL,giving,OL],I=[[sort,IL],[v,a]],O=[[[v,a],OL]].% sent2alg([check,2,is,a,number],I,O).
sent2spec(Sent,I,O) :- Sent=[A,is,not,B],I=[A,B],O=[true].
sent2spec(Sent,I,O) :- Sent=[_,IL,giving,OL],I=[IL,[v,a]],O=[[[v,a],OL]].% sent2spec([check,2,is,a,number],I,O).
sent2spec(Sent,I,O) :- Sent=[check,N,is,_,_T],I=[N],O=[true].
sent2spec(Sent,I,O) :- Sent=[check,N1,is,greater,than,N2],I=[N1,N2],O=[true].
sentence([["i","tied","the","bow"],["person","right","down","bow"]]).
sentence(L) :-get(subject,S),get(verb,V),get(object,S1),get(connector,C),get(subject,S2),get(connector2,C1),get(verb,V1),get(object,S3),foldr(string_concat,[S," ",V," ",S1," ",C," ",S2," ",C1," ",V1," ",S3,".\n"],L),!.
sentence(_)-->subject(_),verb_phrase(_).
sentence1([X|Xs]) --> [X], {((true%%char_type(X,alnum);char_type(X,white));char_type(X,punct)), not(X=93)%% ], not(X=91)%% [}, sentence1(Xs), !.sentence1([]) --> [].%% string_codes("[[a],[a],[a.a.a. Hello, how are you?\n]]",Y),phrase(entry1(X),Y).
sentence32([XsZ]) --> sentence33(Xs), sentenceendpunctuation(Z), {atom_string(CA,Xs),atom_concat(CA,Z,XsZ)}, !.sentence32('') --> [].
sentence_count(Count) :-K=["../../../Google Drive/HTML/files/Philosophy/Books/CREATE AND HELP PEDAGOGUES.txt","../../../Google Drive/HTML/files/Philosophy/Books/FUNDAMENTALS OF PEDAGOGY.txt","../../../Google Drive/HTML/files/Philosophy/Books/PEDAGOGY GUIDE.txt","../../../Google Drive/HTML/files/Philosophy/Books/PEDAGOGY INDICATORS.txt"],% A = 5960.% sales = 150findall(J5,(%member(K1,K),%directory_files(K1,F),%delete_invisibles_etc(F,G),%findall([File_term,"\n"],(member(H,K),%string_concat(K1,H,H1),open_string_file_s(H,File_term),flatten(File_term,J1),foldr(string_concat,J1,"",J2),split_string(J2,"\n\r.","\n\r.",J3),delete(J3,"",J4),length(J4,J5)),J6),sum(J6,0,Count).
sentence_to_meaning(Sentence,Meaning) :-findall(Part1,(member(Part,Sentence),((meaning(Part1,Parts),member(Part,Parts))->true;Part1=Part)),Meaning).
sentenceendpunctuation(Z) --> [Z1], {char_code(Z,Z1),(Z='.';(Z='?';(Z='!')))}, !.
sentencewithspaces(Sentence1,Sentence2) :-Sentence1=[Item|Items],string_concat(Firstletter1,Rest,Item),string_length(Firstletter1,1),upcase_atom(Firstletter1,Firstletter2),concat_list(Firstletter2,[Rest,""],Item2),sentencewithspaces(Items,Item2,Sentence3),string_concat(Sentence3,".",Sentence2).
sentencewithspaces([],Sentence,Sentence) :- !.
sentencewithspaces([],Sentence,Sentence) :- !.sentencewithspaces(Sentence1,Sentence2,Sentence3) :-Sentence1=[Word|Sentence4],concat_list("",[Sentence2," ",Word],Item2),sentencewithspaces(Sentence4,Item2,Sentence3),!.
server(Port) :-        http_server(http_dispatch, [port(Port)]).
set_up_box(X,Y,Z,Grid) :- numbers(Z,1,[],ZNs),  numbers(Y,1,[],YNs),  numbers(X,1,[],XNs),  findall(XC,(member(ZN,ZNs), findall(XB,(member(YN,YNs), findall(XA,(member(XN,XNs), (((XN= 1->true;XN=X)->true; ((YN= 1->true;YN=Y)->true; ((ZN= 1->true;ZN=Z))))->XA=(*); XA=[]) ),XB)),XC)),Grid).
setting1(["(  )  ( )  () ( )  (  )  ()","^     ^      ^       ^    ^",".  . ..  . . ...   . .. . .","(  )  ( )  () ( )  (  )  ()","^     ^      ^       ^    ^",".  . ..  . . ...   . .. . .","(  )  ( )  () ( )  (  )  ()","^     ^      ^       ^    ^",".  . ..  . . ...   . .. . ."]).window_x(7).window_y(7).inkey_pic :- window_x(R), window_y(C), setting1(S), verify(S,X1,Y1), convert_to_matrix(S,X1,Y1,Matrix), tty_size(R1,_C), X is 1,%round(C/2), Y is R-2,%round(R/2), move(R1,C,R,1,X1,1,Y1,X,Y,Matrix).
sheet_feeder(T) :-directory_files("raw_sources/",F),delete_invisibles_etc(F,G),findall(K1,(member(H,G),string_concat("raw_sources/",H,String00b),phrase_from_file_s(string(String001), String00b),string_codes(String000,String001),string_concat(String000,"\n\n",String00_a),%%trace,strip_illegal_chars(String00_a,"",String00),split_on_substring(String00,"\n\n","",J1),%%maplist(append,[J2],[J1]),%%findall(J4,(member(J3,J2),%%trace,%%concat_list(J3,J4)),K1),delete(J1,"",K1),term_to_atom(K1,_K)/**string_concat("sources/",H,String00bb),(open_s(String00bb,write,Stream1),write(Stream1,K),close(Stream1))**/),T).
shell1(Command) :-(bash_command(Command,_)->true;(writeln(["Failed shell1 command: ",Command]),abort)),!.
shell1(Command1,Path1,Object1,Path2,Object2,Command5) :-shell1(Command1,Path1,Object1,Command4),shell1(Command4,Path2,Object2,Command5).
shell1n(Command1,Command2,Command3) :-atom_concat(Command1,'\n',Command1A),atom_concat(Command1A,Command2,Command3).
short_essay_helper(%%Filex,String01,Reasons_per_paragraph) :-retractall(critique3(_)),assertz(critique3([])),retractall(refs(_)),assertz(refs([])),retractall(refs_long(_)),assertz(refs_long([])),retractall(key_words(_)),assertz(key_words([])),directory_files("sources/",F),delete_invisibles_etc(F,G),findall(String02a,(member(Filex1,G),string_concat("sources/",Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[])%%split_string(String00, "\n\r", "\n\r", [String01a|_]),%%prepare_file_for_ml(String00,String02a)),String00),%%trace,%%writeln1(String00),%%notrace,%%writeln1(String02),generate_file_name(File1,File2),Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],explain_structure(String01,Reasons_per_paragraph,File1),exposition(String00,String01,Reasons_per_paragraph,Numbers,String02,Exposition),%%concat_list(["Do you agree or disagree with ",String01," (a/d) ? "],String2ad),%%get_string(String2ad,either,one-not-ml,"","",String3ad),choose1(["a"%%,"d"],String3ad),(String3ad="a"->(retractall(agree_disagree(_)),assertz(agree_disagree(agree)));(retractall(agree_disagree(_)),assertz(agree_disagree(disagree)))),critique(String00,String01,Reasons_per_paragraph,Numbers,String02,Critique),agree_disagree(Pole),%%concat_list(["What is the future area of research from your essay about ",String01,"? "],Future_research_prompt),%%trace,%%get_string(Future_research_prompt,either,one-not-ml,"","",Future_research),choose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),choose(String00a4,String00a5),concat_list(["In ",String01,", automation should apply to ",String00a5," (",String00a2,", p. ",N_page_ref,")."],Future_research),reference(String00a1),refs(R2),refs_long(R21),term_to_atom([Exposition,Critique,String3ad,Future_research,R21],File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream),%% Output essay%%findall(_,(member(Exposition1,Exposition),Exposition1=%%writeln1([Exposition,Critique,Future_research,R2]),write_essay(String01,Pole,Exposition,Critique,Future_research,R2,Essay,HTML),writeln1(Essay),(open_s(File2,write,Stream1),%%string_codes(BrDict3),write(Stream1,HTML),close(Stream1)).
short_essay_helper(%%Filex,String01,Key_words,Reasons_per_paragraph) :-retractall(string00_z(_)),%%assertz(string00_z([])),retractall(critique3(_)),assertz(critique3([])),retractall(refs(_)),assertz(refs([])),retractall(chosen_quotes(_)),assertz(chosen_quotes([])),directory_files("sources/",F),delete_invisibles_etc(F,G),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall(String02h3,(member(Filex1,G),string_concat("sources/",Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),(String02a=[Az,Bz,Cz|String02c]->true;(concat_list(["Error: ",Filex," not in format [\"Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\",\"Surname, A 2000\",First_Page_Num,\"<first page>\",\"<second page>\",...\"]"],Notification1),writeln(Notification1),abort)),%%String02c=String02d,%%trace,findall([Az,Bz,Cz,N1,String02cb],(length(String02c,L),numbers(L,1,[],N),%%random_member(N1,N),get_item_n(String02c,N1,String02ca),%%member(String02ca,String02c),split_string(String02ca, ".\n\r", ".\n\r", String02cb)%%member(String02cb1,String02cb)),String02cc),%%maplist(append,[String02cc],[String02d]),%%delete(String02cc,[_,[]],String02d),String02cc=String02d,findall([Az,Bz,Cz,N2,String02d2],(member([Az,Bz,Cz,N2,String02d1],String02d),member(String02d2,String02d1),downcase_atom(String02d2,String02e),atom_string(String02e,String02f1),split_string(String02f1, SepandPad, SepandPad, String02e1),findall(String02g,(member(Key_words1,Key_words),%%trace,downcase_atom(Key_words1,Key_words11),atom_string(Key_words11,Key_words12),findall(Key_words12,(member(Key_words12,String02e1)),String02g)),String02i),not(maplist(equals_empty_list,String02i))),String02h31),sort(String02h31,String02h3)%%prepare_file_for_ml(String00,String02a)),String00z1),%%,%%** findall(String02h2,(member([Ay,By,Cy,String02h1],String00z1),%%**(String02h1=[]->String02h2=[];maplist(append,[String00z1],[String00]),%%**)%%**),String00z),%%delete(String00z,[],String00),term_to_atom(Key_words,Key_words_a),atom_string(Key_words_a,Key_words_b),(String00=[]->(concat_list(["Error: No files in source folder or no instances of keywords ",Key_words_b," in files in source folder."],Notification2),writeln(Notification2),abort);true),%%maplist(append,[[String00z1]],String00),%%maplist(append,[String00z],String00),%%trace,assertz(string00_z(String00)),%%writeln1(String00),%%notrace,%%writeln1(String02),generate_file_name(File1,File2),Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],explain_structure(String01,Reasons_per_paragraph,File1),exposition(String00,String01,Reasons_per_paragraph,Numbers,String02,Exposition),%%concat_list(["Do you agree or disagree with ",String01," (a/d) ? "],String2ad),%%get_string(String2ad,either,one-not-ml,"","",String3ad),choose1(["a"%%,"d"],String3ad),(String3ad="a"->(retractall(agree_disagree(_)),assertz(agree_disagree(agree)));(retractall(agree_disagree(_)),assertz(agree_disagree(disagree)))),critique(String00,String01,Reasons_per_paragraph,Numbers,String02,Critique),agree_disagree(Pole),%%concat_list(["What is the future area of research from your essay about ",String01,"? "],Future_research_prompt),%%trace,%%get_string(Future_research_prompt,either,one-not-ml,"","",Future_research),%%choose_sentence_range(String00,),choose(N_page_ref,String00a1,String00a2,_String00a3,_String00a4,String00a5),concat_list(["In ",String01,", automation should apply to \"",String00a5,"\" (",String00a2,", p. ",N_page_ref,")."],Future_research),reference(String00a1),refs(R2),term_to_atom([Exposition,Critique,String3ad,Future_research,R2],File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream),%% Output essay%%findall(_,(member(Exposition1,Exposition),Exposition1=%%writeln1([Exposition,Critique,Future_research,R2]),write_essay(String01,Pole,Exposition,Critique,Future_research,R2,Essay,HTML),writeln1(Essay),(open_s(File2,write,Stream1),%%string_codes(BrDict3),write(Stream1,HTML),close(Stream1)),!.
short_essay_helper(%%Filex,String01,Key_words,Reasons_per_paragraph) :-retractall(string00_z(_)),%%assertz(string00_z([])),retractall(critique3(_)),assertz(critique3([])),retractall(refs(_)),assertz(refs([])),retractall(chosen_quotes(_)),assertz(chosen_quotes([])),directory_files("sources/",F),delete_invisibles_etc(F,G),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall(String02h3,(member(Filex1,G),string_concat("sources/",Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),(String02a=[Az,Bz,Cz|String02c]->true;(concat_list(["Error: ",Filex," not in format [\"Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\",\"Surname, A 2000\",First_Page_Num,\"<first page>\",\"<second page>\",...\"]"],Notification1),writeln(Notification1),abort)),%%String02c=String02d,%%trace,findall([Az,Bz,Cz,N1,String02cb],(length(String02c,L),numbers(L,1,[],N),%%random_member(N1,N),get_item_n(String02c,N1,String02ca),%%member(String02ca,String02c),split_string(String02ca, ".\n\r", ".\n\r", String02cb)%%member(String02cb1,String02cb)),String02cc),%%maplist(append,[String02cc],[String02d]),%%delete(String02cc,[_,[]],String02d),String02cc=String02d,findall([Az,Bz,Cz,N2,String02d2],(member([Az,Bz,Cz,N2,String02d1],String02d),member(String02d2,String02d1),downcase_atom(String02d2,String02e),atom_string(String02e,String02f1),split_string(String02f1, SepandPad, SepandPad, String02e1),findall(String02g,(member(Key_words1,Key_words),%%trace,downcase_atom(Key_words1,Key_words11),atom_string(Key_words11,Key_words12),findall(Key_words12,(member(Key_words12,String02e1)),String02g)),String02i),not(maplist(equals_empty_list,String02i))),String02h31),sort(String02h31,String02h3)%%prepare_file_for_ml(String00,String02a)),String00z1),%%,%%** findall(String02h2,(member([Ay,By,Cy,String02h1],String00z1),%%**(String02h1=[]->String02h2=[];maplist(append,[String00z1],[String00]),%%**)%%**),String00z),%%delete(String00z,[],String00),term_to_atom(Key_words,Key_words_a),atom_string(Key_words_a,Key_words_b),(String00=[]->(concat_list(["Error: No files in source folder or no instances of keywords ",Key_words_b," in files in source folder."],Notification2),writeln(Notification2),abort);true),%%maplist(append,[[String00z1]],String00),%%maplist(append,[String00z],String00),%%trace,assertz(string00_z(String00)),%%writeln1(String00),%%notrace,%%writeln1(String02),generate_file_name(File1,File2),Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],explain_structure(String01,Reasons_per_paragraph,File1),exposition(String00,String01,Reasons_per_paragraph,Numbers,String02,Exposition),%%concat_list(["Do you agree or disagree with ",String01," (a/d) ? "],String2ad),%%get_string(String2ad,either,one-not-ml,"","",String3ad),choose1(["a"%%,"d"],String3ad),(String3ad="a"->(retractall(agree_disagree(_)),assertz(agree_disagree(agree)));(retractall(agree_disagree(_)),assertz(agree_disagree(disagree)))),critique(String00,String01,Reasons_per_paragraph,Numbers,String02,Critique),agree_disagree(Pole),%%concat_list(["What is the future area of research from your essay about ",String01,"? "],Future_research_prompt),%%trace,%%get_string(Future_research_prompt,either,one-not-ml,"","",Future_research),%%choose_sentence_range(String00,),choose(N_page_ref,String00a1,String00a2,_String00a3,_String00a4,String00a5),concat_list(["In ",String01,", automation should apply to \"",String00a5,"\" (",String00a2,", p. ",N_page_ref,")."],Future_research),reference(String00a1),refs(R2),term_to_atom([Exposition,Critique,String3ad,Future_research,R2],File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream),%% Output essay%%findall(_,(member(Exposition1,Exposition),Exposition1=%%writeln1([Exposition,Critique,Future_research,R2]),write_essay(String01,Pole,Exposition,Critique,Future_research,R2,Essay,HTML),writeln1(Essay),(open_s(File2,write,Stream1),%%string_codes(BrDict3),write(Stream1,HTML),close(Stream1)),!.
short_essay_helper(Filex,Reasons_per_paragraph) :-retractall(critique3(_)),assertz(critique3([])),phrase_from_file_s(string(String00), Filex),split_string(String00, "\n\r", "\n\r", [String01|_]),prepare_file_for_ml(String00,String02),writeln1(String02),generate_file_name(String01,File1),Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],explain_structure(String01,Reasons_per_paragraph,File1),exposition(String00,String01,Reasons_per_paragraph,Numbers,String02,Exposition),concat_list(["Do you agree or disagree with \"",String01,"\" (a/d) ? "],String2ad),get_string(String2ad,either,one-not-ml,"","",String3ad),(String3ad="a"->(retractall(agree_disagree(_)),assertz(agree_disagree(agree)));(retractall(agree_disagree(_)),assertz(agree_disagree(disagree)))),critique(String00,String01,Reasons_per_paragraph,Numbers,String02,Critique),agree_disagree(Pole),concat_list(["What is the future area of research from your essay about \"",String01,"\"? "],Future_research_prompt),%%trace,get_string(Future_research_prompt,Pole,one-not-ml,"","",Future_research),term_to_atom([Exposition,Critique,String3ad,Future_research],File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream).
short_essay_helper(String01,Reasons_per_paragraph) :-retractall(critique3(_)),assertz(critique3([])),retractall(refs(_)),assertz(refs([])),%%phrase_from_file_s(string(String00), Filex),%%split_string(String00, "\n\r", "\n\r", [String01|_]),%%prepare_file_for_ml(String00,String02),%%writeln1(String02),generate_file_name(File1,File2),Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],explain_structure(String01,Reasons_per_paragraph,File1),exposition(String00,String01,Reasons_per_paragraph,Numbers,String02,Exposition),concat_list(["Do you agree or disagree with \"",String01,"\" (a/d) ? "],String2ad),get_string(String2ad,either,one-not-ml,"","",String3ad),(String3ad="a"->(retractall(agree_disagree(_)),assertz(agree_disagree(agree)));(retractall(agree_disagree(_)),assertz(agree_disagree(disagree)))),critique(String00,String01,Reasons_per_paragraph,Numbers,String02,Critique),agree_disagree(Pole),concat_list(["What is the future area of research from your essay about \"",String01,"\"? "],Future_research_prompt),%%trace,get_string(Future_research_prompt,either,one-not-ml,"","",Future_research),term_to_atom([Exposition,Critique,Future_research],File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream),%% Output essay%%findall(_,(member(Exposition1,Exposition),Exposition1=refs(R2),%%writeln1([Exposition,Critique,Future_research,R2]),write_essay(String01,Pole,Exposition,Critique,Future_research,R2,Essay,HTML),writeln1(Essay),(open_s(File2,write,Stream1),%%string_codes(BrDict3),write(Stream1,HTML),close(Stream1)).
shorten(Form2,B) :-member(A1,Form2),string_concat(B1,_C,A1),string_length(B1,1),atom_string(B,B1).
shortest_path1(X,Y,Grid,Length1,Length2) :-options(Grid,X,Y,Options),member([X1,Y1],Options),Length3 is Length1+1,(member([X1,Y1,"e"],Grid)->Length2=Length3;(delete(Grid,[X1,Y1,_],Grid2),shortest_path1(X1,Y1,Grid2,Length3,Length2))).
sides(Sides,Issue,Report) :-findall([Person,Side],(member([Person,Issues],Sides),member([Issue,Side],Issues)),Report).
simple_caw0(F,Rules,Initial_rules,In,Out,Start_of_predicate,Predicate) :- retractall(new_var1(_)), assertz(new_var1(0)),  findall(Val,member([_V,Val],In),Val1), Out=[[V,_Val2]],  append(Val1,[V],Query1), Query=[[n,F],Query1], Result=[Out], simple_caw(F,Query,Result,Rules,Initial_rules,In,Out,Start_of_predicate,Predicate).
simplify_types_with_n(Data,Types1,Types2) :-get_lang_word("t",T),%get_lang_word("string",Dbw_string),Data=[T,_A,_N,D],%string(Data),append(Types1,[D],Types2),!.simplify_types_with_n(Data1,Types1,Types2) :-Data1=[Data2|Data3],simplify_types_with_n(Data2,Types1,Types3),simplify_types_with_n(Data3,Types3,Types2),!.
simulation(X,Y,N_people,N_frames,Simulation,Meetings,Person1,Person2) :- Spaces is X*Y,(N_people>Spaces->(writeln(["Error: N_people",N_people,">Spaces",X*Y]),abort);true),% size, number of people, number of frames% random starting positions random_starting_positions(X,Y,N_people,Frame1),% random movements random_movements(X,Y,Frame1,1,N_frames,[Frame1],Simulation),% log_meetings log_meetings(Simulation,Simulation,[],Meetings),% met_a_chain_member  met_a_chain_member(Meetings,Person1,Person1,Person2).
sin_theta(Theta,Sin_theta) :- degrees_to_radians(Theta,R), sin(R,A),round(A,Sin_theta).
single_item_not_var(A) :- predicate_or_rule_name(A),!.
single_item_or_atom(A) :- predicate_or_rule_name(A),!.
single_item_or_var(A) :- predicate_or_rule_name(A),!.
single_pointedness :- date(date(Y,M,D)), writeln(["Please love God",Y,M,D]), N is 60*60*24,sleep(N),single_pointedness.
sit_in_rect([[XA1,YA1],[XA2,YA2]],[[XB1,YB1],[XB2,YB2]]) :-XA1=<XB1,YA1=<YB1,XA2>=XB2,YA2>=YB2.% ["Short Arguments","Competition 4.txt",0,algorithms,"35. I helped the other to follow the rules.  The other was helped.  The group on our side was a competitor.  The people in the group were competing with each other.  At least in the way of following the rules."]add_n_to_population(P,N,PN) :-PN is P+N.
sit_in_rect_prism([[XA1,YA1,ZA1],[XA2,YA2,ZA2]],[[XB1,YB1,ZB1],[XB2,YB2,ZB2]]) :-XA1=<XB1,YA1=<YB1,ZA1=<ZB1,XA2>=XB2,YA2>=YB2,ZA2>=ZB2.% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Upasana Sutra 2 of 4.txt",0,algorithms,"15. I prepared to investigate the Loop of Henle metaphor. I did this by giving out the tulip. First, I fingered the side of the tulip. Second, I moved my finger down the tulip. Third, I moved my finger up the other side of the tulip. In this way, I prepared to investigate the Loop of Henle metaphor by giving out the tulip."]/*choice_points([[1,":-",2,3],[2],[3]],1,[],Flow).
sit_on_right(Seats1,Side,Name,Seats2) :-member([Side,Seats3],Seats1),append(Seats3,[[Side,Name]],Seats4),delete(Seats1,[Side,Seats3],Seats5),append(Seats5,Seats4,Seats2).
slices(Bounds_list,Slice_width,Slices) :-length(Bounds_list,Bounds_list_length),Slice_number is div(Bounds_list_length,Slice_width),numbers(Slice_number,1,[],Slice_numbers),findall(Slice,(member(Slice_number1,Slice_numbers),Item_number is Slice_number1*Slice_width,get_item_n(Bounds_list,Item_number,Slice)),Slices).
slp2lp(Algorithm1,Algorithm2) :-findall([[n,Name],Arguments4,Symbol2,Body2],(member(Function1,Algorithm1),Function1=[Name,Arguments1,Symbol1,Body1],symbol(Symbol1,Symbol2),findall(Arguments3,(member(Arguments2,Arguments1),slp2lp_variables(Arguments2,Arguments3)),Arguments4),process_body2(Body1,Body2)),Algorithm2).
solfegenotetonote(d,'C').
solve1(L,R,S1,S2) :- move_to_lhs(L,R,L2,R2), R2=0, factorise(L2,F), F=A*B, solve(A,S1), solve(B,S2).
sort1([],List,List) :- !.
sort3(A,B) :- sort4(A,[],B).
sort_by_length(A,F) :- findall1([L,B],(member(B,A),length(B,L)),C),sort(C,D),findall1(E,member([_,E],D),F).
space("square") --> " ".
spaces(N,S) :- numbers(N,1,[],S1), findall("\t",member(_,S1),S2), foldr(string_concat,S2,S),!.
spell_check0 :- %% run this secondphrase_from_file_s(string(Codes), "file.txt"),SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % No 'string_codes(SepandPad,SepandPad1),split_on_substring117(Codes,SepandPad1,[],File_list),phrase_from_file_s(string(String_dict2), "string_dict.txt"),string_codes(String_dict1,String_dict2),atom_to_term(String_dict1,String_dict,_),phrase_from_file_s(string(Dictionary_d2), "dict.txt"),string_codes(Dictionary_d1,Dictionary_d2),atom_to_term(Dictionary_d1,Dictionary_d,_),phrase_from_file_s(string(Reversed_dictionary22), "reversed_dict.txt"),string_codes(Reversed_dictionary21,Reversed_dictionary22),atom_to_term(Reversed_dictionary21,Reversed_dictionary2,_),spell_check(File_list,[],File_list2a,String_dict,Dictionary_d,Reversed_dictionary2),%trace,%maplist(append,[File_list2a],File_list2a2),%[File_list_a]=File_list2a,concat_list(File_list2a,File_list2a1),(open_s("file2.txt",write,Stream1),write(Stream1,File_list2a1),close(Stream1)),!.
spell_checker_dict_setup :- %% run this first%SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % No '%phrase_from_file_s(string(Codes2), "brdict1.txt"),phrase_from_file_s(string(Codes2), "../Text-to-Breasonings/brdict1.txt"),%string_codes(String2,Codes2),%atom_to_term(String2,Dictionary_c,_),splitfurther(Codes2,Dictionary_c),findall(A,(member([A1,_],Dictionary_c),atom_string(A1,A)),String_dict),%trace,split_into_sets(Dictionary_c,%250% ***,Dictionary_a),length(Dictionary_a,L),numbers(L,1,[],NN),findall(Dictionary2,(member(NN1,NN),get_item_n(Dictionary_a,NN1,Dictionary_b),writeln([dictionary,NN1,of,L]),%member(Dictionary_b,Dictionary_a),dictionary_to_decision_tree(Dictionary_b,Dictionary2)),Dictionary_d),%trace,findall(Reversed_dictionary2_a,(member(NN1,NN),get_item_n(Dictionary_a,NN1,Dictionary_b),writeln([reversed,dictionary,NN1,of,L]),findall([A4,_],(member([B,_],Dictionary_b),%string_concat(B1,"01",B)string_to_list21(B,[],A2),reverse(A2,A3),maplist(append,[[A3]],[A]),concat_list(A,A4)),Dictionary3),dictionary_to_decision_tree(Dictionary3,Reversed_dictionary2_a)),Reversed_dictionary2),%trace,term_to_atom(String_dict,String_dict1),(open_s("string_dict.txt",write,Stream1),write(Stream1,String_dict1),close(Stream1)),term_to_atom(Dictionary_d,Dictionary_d1),(open_s("dict.txt",write,Stream2),write(Stream2,Dictionary_d1),close(Stream2)),term_to_atom(Reversed_dictionary2,Reversed_dictionary21),(open_s("reversed_dict.txt",write,Stream3),write(Stream3,Reversed_dictionary21),close(Stream3)),!.
split11([]%%List,_L16,%N,N, A,A) :- %L2 is L16*2,length(List,L3),L3=<L2, !.
split2(Data,Pre_info,Question,Question_table) :-split_string1b(Data,"\n\r","\n\r",D1),% qs at start or end - if end, pre info is part of adpre_info(D1,Pre_info,Rest),% qs identified by prepare, required x, a., calculatesubtract(Rest,["Required","required"],Rest1),question(Rest1,Question,Question_table),/*,append(B,C,D1),append([[]],E,C),append([Ad],T1,D1),findall([T2,"\n"],member(T2,T1),T3),flatten(T3,T4),foldr(string_concat,T4,Q),*/!.
split_into_head_and_tail(Variable,Head1c,Tail1c,Pipe,Head_is_list_of_lists) :-%%Variable=[[v, a], "|", [v, d]]->trace,%%(((((append(Head2,["|"|Tail2],Variable) %%-> notrace;notrace)),(is_list(Head2),head_is_list_of_lists(Head2,Head_is_list_of_lists),(length(Head2,1) -> Head2=[Head1] ; Head2=Head1)),%%trace,Tail2=[Tail1],Pipe=true)->true;%%(((is_list(Variable),not(variable_name(Variable)),Variable=[Head1|Tail1],Pipe=false,head_is_list_of_lists(Head1,Head_is_list_of_lists))->true;(Head1=Variable,Tail1=[],Pipe=false,head_is_list_of_lists(Head1,Head_is_list_of_lists)))),(Head1=empty->Head1c=[];Head1=Head1c),(Tail1=empty->Tail1c=[];Tail1=Tail1c),!.
split_into_sentences(Text,Connectives,Number_of_questions,Exercises) :-split_string(Text,".\n\r",".\n\r",Sentences2),findall(Sentences3,(member(Sentence2,Sentences2),foldr(string_concat,[Sentence2,"."],"",Sentences3)),Sentences),make_exercise0(Connectives,Sentences,%Sentences1,Number_of_questions,[],Exercises1),findall([Exercise4,Word],(member([Exercise2,Word],Exercises1),foldl(replace_undefined_with_gap,Exercise2,[],Exercise3),foldr(string_concat,Exercise3,Exercise4)),Exercises).
split_into_sets(Dictionary,L1,Dictionary_a) :-length(Dictionary,N1),Number is div(N1,L1),%L1 is div(N1,Number), % 2 is div(5,2)L2 is mod(N1,Number), % 1 is mod(5,2)L3 is L1*Number,% 4 is 2*2length(A,L3),append(A,_,Dictionary),%split_into_sets1(A,Number,L1)numbers(Number,1,[],Nums),findall(C,(member(N2,Nums),B1 is (N2-1)*L1, length(B,B1),length(C,L1),append(B,D,Dictionary),append(C,_,D)),Dict2),length(E,L2),append(_,E,Dictionary),(E=[]->Dictionary_a=Dict2;append(Dict2,[E],Dictionary_a)),!.
split_on_instrument(Middle,Instruments1,Instruments2) :-A=`Instrument`,%writeln(Middle),%trace,%A=[i],append(B,C22,Middle),append(A,C12,C22),%trace,%writeln(here1),(not((append(_B11,C11,C12),append(A,_C31,C11)))->(string_codes(Middle1,Middle),append(Instruments1,[Middle1],Instruments2));%split_on_instrument(Middle,Instruments1,Instruments2) :-(%A=`Instrument `,%trace,%append(_B10,C2,Middle),%append(A,C,C2),%trace,append(B1,C3,C12),append(A,C1,C3),%writeln(here2),%trace,%reverse(B1,B_reversed),%append(Start_of_instrument1,D3,B_reversed),append(D33,Start_of_instrument1,B1),reverse(D33,D3),reverse(D3,D31),%writeln(here3),append(`\n`,_D1,D3),append(End_of_instrument1,D22,C1),foldr(append,[B,A,D31],[],D32),append(`\n`,D21,D22),%trace,End_of_instrument1=End_of_instrument,%reverse(End_of_instrument1,End_of_instrument),%reverse(D21,D2),D21=D2,%writeln(here4),%trace,reverse(Start_of_instrument1,Start_of_instrument2),append(B41,C4,Start_of_instrument2),append(`\n`,C41,C4),reverse(B41,B412),reverse(C4,C42),reverse(C41,C412),reverse(Start_of_instrument1,Start_of_instrument),foldr(append,[B412,A,C1%Start_of_instrument1,A,C1],[],Instrument1),Instrument1=Instrument2,%*/D34=D32,foldr(append,[D34,C42],[],D441),string_codes(D44,D441),append(Instruments1,[D44],Instruments31),%flatten(Instruments31,Instruments32),/*writeln([b412,B412]),writeln([c42,C42]),writeln([c412,C412]),writeln([b41,B41]),writeln([c4,C4]),writeln([c41,C41]),writeln([d3,D3]),writeln([b,B]),writeln([c22,C22]),writeln([c12,C12]),writeln(C12),writeln([c1,C1]),writeln([b1,B1]),writeln([d32,D32]),writeln([start_of_instrument1,Start_of_instrument1]),writeln([end_of_instrument1,End_of_instrument1]),%trace,%append()writeln(split_on_instrument(Instrument1,Instruments31,Instruments2)),*/split_on_instrument(Instrument1,Instruments31,Instruments2))),!.
split_on_non_alpha(S1,S2):- string_strings(S1,S3), findall(S4,(member(S5,S3),(is_alpha(S5)->S5=S4;S4=" ")),S6), foldr(string_concat,S6,S7), SepandPad=" ", split_string(S7,SepandPad,SepandPad,S2),!.
split_on_non_alpha_keep_quotes(S1,S2):- string_strings(S1,S3), findall(S4,(member(S5,S3),(is_alpha_or_quotes(S5)->S5=S4;S4=" ")),S6), foldr(string_concat,S6,S7), SepandPad=" ", split_string(S7,SepandPad,SepandPad,S2),!.
split_on_phrases2(Phrases2,InputFile,Text4,Title) :-phrase_from_file_s(string(Text2), InputFile),%%string_codes(Phrases1,Phrases2),%%string_codes(Text2,Text1),split_on_phrases3(Phrases2,Text2,[],Text3,Title),%%term_to_atom([split_on_phrases3(Phrases2,Text2,[],Text3,Title)],AA),%%writeln1(AA),%%findall(Text4a,(member(Text7,Text3),findall([A1,B1],(member(Text8,Text3),Text8=[A,B],string_codes(A,A1),string_codes(B,B1)),Text4).%%),Text4).
split_on_phrases3a(Phrase2b,Text1,Text2,Title,Phrase2a,E14,Phrases4,Phrases1L) :-%%string_concat(Phrase2b,"\n",Phrase2c),%%string_codes(Phrase2c,Phrase2),string_codes(Phrase2b,Phrase22),string_codes("1.",String1),string_codes("11.",String11),string_codes("21.",String21),string_codes("31.",String31),string_codes(Phrase2a,Phrase2aa),string_codes("eof",EofC),((%%Phrases1L=1->%%split_on_phrases4(Text1,E11,Text2,Text4,%%String1,Phrase22,EofC,Title,1)%%;split_on_phrases41(Text1,E11,Text2,Text4,String1,Phrase22,String11,Title,1,Phrase2aa),writeln("11"))->((%Phrases1L=1->%%split_on_phrases4(E11,E12,Text4,Text5,%%String11,Phrase22,EofC,Title,2)%%;split_on_phrases41(E11,E12,Text4,Text5,String11,Phrase22,String21,Title,2,Phrase2aa),writeln("21"))->((%%Phrases1L=1->%%split_on_phrases4(E12,E13,Text5,Text6,%%String21,Phrase22,EofC,Title,3)%%;split_on_phrases41(E12,E13,Text5,Text6,String21,Phrase22,String31,Title,3,Phrase2aa),writeln("31"))->(((Phrases1L=1->((split_on_phrases4(E13,E14,Text6,Phrases4,String31,Phrase22,EofC,Title,4),writeln("eof"))->true;(writeln("Error: No eof."),abort));(%%writeln("here"),%%writeln(split_on_phrases4(E13,E14,Text6,Phrases4,%%String31,Phrase22,Phrase2aa,Title,4)),%%((split_on_phrases42(E13,E14,Text6,Phrases4,String31,Phrase22,_Empty,Title,4,Phrase2aa),writeln("-"))%%->%%true;(E13=E14,Text6=Phrases4)))));(Phrases1L=1->(split_on_phrases4(E12,E14,Text5,Phrases4,String21,Phrase22,EofC,Title,3),writeln("eof"));(split_on_phrases41(E12,E14,Text5,Phrases4,String21,Phrase22,String31,Title,3,Phrase2aa),%%->%%true;(E12=E14,Text5=Phrases4)writeln("31"))));(Phrases1L=1->(split_on_phrases4(E11,E14,Text4,Phrases4,String11,Phrase22,EofC,Title,2),writeln("eof"));(split_on_phrases41(E11,E14,Text4,Phrases4,String11,Phrase22,String21,Title,2,Phrase2aa),%%->%%true;(E11=E14,Text4=Phrases4)writeln("21"))));(Phrases1L=1->(split_on_phrases4(Text1,E14,Text2,Phrases4,String1,Phrase22,EofC,Title,1),writeln("eof"));(split_on_phrases41(Text1,E14,Text2,Phrases4,String1,Phrase22,String11,Title,1,Phrase2aa),%%->%%true;(Text1=E14,Text2=Phrases4)writeln("11")))).
split_on_phrases4(Text1,E11,Text2,Text4,Phrase2,Phrase22,Phrase2a,Title,N) :-split_on_phrases4a(Text1,_C1,D1,Phrase2,_E1),%%string_codes(C,C1),%%string_codes(D,D1),string_codes(Phrase20,Phrase2),string_codes(Phrase202,Phrase22),split_on_phrases4b(D1,Phrase2a,E11,C11,_),string_codes(C110,C11),concat_list([Phrase20,C110],C12),string_codes(C10,C12),number_string(N,NS),concat_list([Title," ","by Lucian Green"," ",Phrase202," ",NS," of 4.txt"],E101),concat_list([Title,"\n","by Lucian Green","\n",Phrase202," ",NS," of 4\n\n",C10],C122),append(Text2,[[E101,C122]],Text4).
split_on_phrases42(Text1,E11,Text2,Text4,_Phrase2,Phrase22,_Phrase2a,Title,N,Phrase2aa) :-string_codes(Text1z,Text1),%%string_codes(E11z,E11),%%string_codes(Text2z,Text2),%%string_codes(Text4z,Text4),%%string_codes(Phrase2z,Phrase2),%%string_codes(Phrase22z,Phrase22),%%string_codes(Phrase2az,Phrase2a),%%string_codes(Titlez,Title),%%string_codes(Nz,N),string_codes(Phrase2aaz,Phrase2aa),%%writeln1(split_on_phrases41(Text1z,E11z,Text2z,Text4z,Phrase2z,Phrase22z,Phrase2az,Titlez,N,Phrase2aaz)),%%string_codes(Text1z,Text1),%%writeln([text1,Text1z]),split_on_phrases4b(Text1,Phrase2aa,E11,C11,E11x),string_codes(E11z,E11),string_codes(C11z,C11),string_codes(E11xz,E11x),%%***writeln1(split_on_phrases4b_42here(Text1z,Phrase2aaz,E11z,C11z,E11xz)),(C11=[]->Text4=Text2;(%%string_codes(Text1z,Text1),%%string_codes(Phrase2aaz,Phrase2aa),%%string_codes(Text1az,Text1a),%%string_codes(D100z,D100),%%writeln1(split_on_phrases4b(Text1z,Phrase2aaz,E11z,Text1az,D100z)),%%writeln1(split_on_phrases4a(Text1a,_C1,D1,Phrase2,_E1)),%%*split_on_phrases4a(Text1a,_C1,_D1,Phrase2,_E1),%%string_codes(C,C1),%%string_codes(D,D1),%%string_codes(Phrase20,Phrase2),string_codes(Phrase202,Phrase22),%%*writeln1(split_on_phrases4b(Text1a,Phrase2a,E11,C11,_D10)),%%*(split_on_phrases4b(Text1a,Phrase2a,_E11q,_C11q,_D10q)-> %% D1->Text1a/**((split_on_phrases4b(Text1,Phrase22,_,_,C11r)->true;C11r=Text1), %% oldsplit_on_phrases4b(C11r,Phrase2a,E11,C11,_D102));%%split_on_phrases4b(Text1a,Phrase2,_E11q,_C11q,_D10q));(C11=Text1a,E11=E11x)), %% old**/%%writeln1(split_on_phrases4b(D1,Phrase2aa,_F112,G11)),%%split_on_phrases4b(D10,Phrase2aa,_F11,G11,H),%%()split_on_phrases4b(D1,Phrase2a,E11,C11),%%split_on_phrases4b(G11,Phrase2a,E11,C11),string_codes(C110,C11),concat_list([%%Phrase20,C110%%,E11],C12),string_codes(C10,C12),number_string(N,NS),concat_list([Title," ","by Lucian Green"," ",Phrase202," ",NS," of 4.txt"],E101),concat_list([Title,"\n","by Lucian Green","\n",Phrase202," ",NS," of 4\n\n",C10],C122),append(Text2,[[E101,C122]],Text4))).
split_on_phrases4a(Text1,C1,D1,Phrase2,E1) :-append(C1,E1,Text1),append(Phrase2,D1,E1).
split_on_substring("",_A,E,[E]) :- !.
split_on_substring117([],_A,E,E) :- !.
split_on_substring117a(A,B,C) :-split_on_substring117a(A,B,_,C),!.% split_on_substring117(`AAABAAD`,`BD`,[],A). or% ?- split_on_substring117([65,65,65,66,65,65,68],[66,68],[],A).
split_on_substring117a(A,B,_,D) :-    string_codes(A,A1),    string_codes(B,B1),split_on_substring117(A1,B1,[],D),!.
split_string_if_split(A,H,split=Split) :-%A=H.
split_string_onnonletter(String00,List1) :-string_codes(String00,String1),split_string_onnonletter(String1,[],List0),string_codes(List0,List2),split_string(List2," "," ",List1),!.
split_string_onnonletter_by_itself(String00,Chars,List1) :-string_codes(String00,String1),split_string_onnonletter_by_itself(String1,[],Chars,List0),string_codes(List0,List2),split_string(List2,"@","@",List1),!.
splitfurther(BrDict01,N) :-   phrase(file0(N),BrDict01).
splitfurther(BrDict01,N) :-   phrase(file0(N),BrDict01).file0(N) --> "[", file(N), "]", !.file0([]) --> [].
splitfurthert(BrDict01,N) :-   phrase(file0t(N),BrDict01).
sqrn(Ns,N1) :- %numbers(N,1,[],Ns),findall([N2,N3],(member(N2,Ns),member(N3,Ns)),N1).
ssff :-%retractall(formula_n(_)),%assertz(formula_n(1)),% creates database, then queries it% finds common formulas in folder of filesFolder="training",foldr(string_concat,[Folder,"/"],Path),directory_files(Path,F),delete_invisibles_etc(F,G),% all instances of q/a for a model in one file% formulas in saved patterns file, 31 march, denominator 3, (u/f) un/favourable, which machine, q1 recog key terms% connectives% empty line tables [] are deleted, number tables, use formulas everywhere% learns to apply 2<->two when multiple qas% once run, find a with q% will work out a from q text file% html output% do all models from mid trim answers, sample exam, other mentioned weeksfindall([Filex1,Additional_variables,QAs],(member(Filex1,G),string_concat(Path,Filex1,Filex),% Additional_variables are [label,var]open_file_s(Filex,Data),member([Additional_variables,QAs],Data)),Texts1),% splits Q, A into tablesfindall([Filex1,Ad1,QA2],(member([Filex1,Ad,QA],Texts1),split_into_tables(Ad,Ad1),findall([Q1,A1],(member([Q,A],QA),%trace,split_into_tables(Q,Q1),split_into_tables(A,A1)),QA2)),ST),findall(_,(member([Filex1,Ad1,Q1A1],ST),member([Q1,A1],Q1A1),%trace,find_formulas(Ad1,Q1,A1,Ad2,Q2,A2),Folder2="models",foldr(string_concat,[Folder2,"/",Filex1],Path2),pretty_print_table([Ad2,Q2,A2],Atom),save_file_s(Path2,Atom)),_),!.
ssff_solve :-Folder="input",foldr(string_concat,[Folder,"/"],Path),directory_files(Path,F),delete_invisibles_etc(F,G),open_file_s("../Philosophy/connectives.txt",Conn1),append(Conn1,["analysing","preparing","From","the","following","consultant","presents","following","data","relating","related","required","ending","identified","as","follows","pty","ltd","is","contemplating","available","company","used","calculate"],Connections),findall(_,(member(Filex1,G),string_concat(Path,Filex1,Filex),% Additional_variables are [label,var]open_string_file_s(Filex,Data),split2(Data,Pre_info,Question,Question_table),split_into_tables(Pre_info,Pre_info1),split_into_tables(Question,Question1),split_into_tables(Question_table,Question_table1),get_models(Models1),findall(Answer,(member(Question2,Question1),solve_ad(Connections,Models1,Pre_info1,Question2,Question_table1,Answer)),Answers),term_to_atom(Answers,Atom),term_to_html(Answers,HTML),(string_concat(Base,".txt",Filex1)->Base1=Base;Base1=Filex1),foldr(string_concat,["output/",Base1,".txt"],Path21),foldr(string_concat,["output/",Base1,".html"],Path22),save_file_s(Path21,Atom),save_file_s(Path22,HTML)),_),!.
ssff_solve :-Folder="input",foldr(string_concat,[Folder,"/"],Path),directory_files(Path,F),delete_invisibles_etc(F,G),open_file_s("../Philosophy/connectives.txt",Conn1),append(Conn1,["analysing","preparing","From","the","following","consultant","presents","following","data","relating","related","required","ending","identified","as","follows","pty","ltd","is","contemplating","available","company","used","calculate"],Connections),findall(_,(member(Filex1,G),string_concat(Path,Filex1,Filex),% Additional_variables are [label,var]open_string_file_s(Filex,Data),split2(Data,Pre_info,Question,Question_table),split_into_tables(Pre_info,Pre_info1),split_into_tables(Question,Question1),split_into_tables(Question_table,Question_table1),get_models(Models1),findall(Answer,(member(Question2,Question1),solve_ad(Connections,Models1,Pre_info1,Question2,Question_table1,Answer)),Answers),term_to_atom(Answers,Atom),term_to_html(Answers,HTML),(string_concat(Base,".txt",Filex1)->Base1=Base;Base1=Filex1),foldr(string_concat,["output/",Base1,".txt"],Path21),foldr(string_concat,["output/",Base1,".html"],Path22),save_file_s(Path21,Atom),save_file_s(Path22,HTML)),_),!.get_models(Models1) :-Folder="models",foldr(string_concat,[Folder,"/"],Path),directory_files(Path,F),delete_invisibles_etc(F,G),findall([Ad2,Q2,A2],(member(Filex1,G),string_concat(Path,Filex1,Filex),open_file_s(Filex,Data),member([Ad2,Q2,A2],Data)),Models1),!.
ssff_solve :-Folder="input",foldr(string_concat,[Folder,"/"],Path),directory_files(Path,F),delete_invisibles_etc(F,G),open_file_s("../Philosophy/connectives.txt",Conn1),append(Conn1,["analysing","preparing","from","the","following","consultant","presents","following","data","relating","related","required","ending","identified","as","follows","pty","ltd","is","contemplating","available","company","used","calculate","a", "b", "c", "d", "e", "f" ,"g", "function", "january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december","label", "table", "var"],Connections),findall(_,(member(Filex1,G),string_concat(Path,Filex1,Filex),% Additional_variables are [label,var]open_string_file_s(Filex,Data),split2(Data,Pre_info,Question,Question_table),split_into_tables(Pre_info,Pre_info1),split_into_tables(Question,Question1),append(Pre_info1,Question1,Question2a),split_into_tables(Question_table,Question_table1),get_models(Models1),findall(Answer,(member(Question2,Question2a),solve_ad(Connections,Models1,[]%_Pre_info1,Question2,Question_table1,Answer)),Answers),term_to_atom(Answers,Atom),term_to_html(Answers,HTML),(string_concat(Base,".txt",Filex1)->Base1=Base;Base1=Filex1),foldr(string_concat,["output/",Base1,".txt"],Path21),foldr(string_concat,["output/",Base1,".html"],Path22),save_file_s(Path21,Atom),save_file_s(Path22,HTML)),_),!.
ssi("run",n,v).
ssi1([Pred_id,Level,Predicate_number,Line_number_a,"line",Query,Vars1,All_predicate_numbers], _, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,["appearance of command",AC],CP_Vars1,CP_Vars2) :-append_retry_back_stack([ssi,[[Pred_id,Level,Predicate_number,Line_number_a,"line",Query,Vars1,All_predicate_numbers], _, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,["appearance of command",AC],CP_Vars1,CP_Vars2]]),%/*((%writeln([all_predicate_numbers,All_predicate_numbers]),(debug2(on)->writeln1(ssi1([Pred_id,Level,Predicate_number,Line_number_a,"line",Query,Vars1,All_predicate_numbers], _, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,["appearance of command",AC],CP_Vars1,CP_Vars2));true),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("true",Dbw_true1),Dbw_true1=Dbw_true,member([Predicate_number,_F|Rest],Functions),(Rest=[_Args,":-",Lines]->true;(Rest=[_Args]->Lines=[[[Dbw_n,Dbw_true]]];(Rest=[":-",Lines];(Rest=[],Lines=[[[Dbw_n,Dbw_true]]])))),(%trace,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,%trace,return_to_last_non_end_function(Line_number_a,Lines,Line_number_b,[Dbw_on_true,A],[Dbw_go_after,B],[Dbw_on_false,C],[Dbw_go_to_predicates,D],Line,Globals1,Pred_id,Line_number_a,FA,(-),End_line42),(debug2(on)->writeln1([*,return_to_last_non_end_function(Line_number_a,Lines,Line_number_b,[Dbw_on_true,A],[Dbw_go_after,B],[Dbw_on_false,C],[Dbw_go_to_predicates,D],Line,Globals1,Pred_id,Line_number_a,FA,(-),End_line42)]);true)),((%trace,((not(Line_number_b= -2),not(Line_number_b= -3),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,Line=[[Dbw_n,Dbw_findall],[S1,S2]])->(%trace,%trace,%writeln([here_ln,Line_number_a,Line_number_b]),append_cp(Choice_point_trail1,[[Pred_id,Level,Predicate_number,Line_number_b,"findall",-,[old_vars,Vars1],[findall_vars,[]],[format_vars,S1],[result_var,S2]]],Choice_point_trail1e,CP_Vars1,CP_Vars3));(Choice_point_trail1=Choice_point_trail1e,CP_Vars1=CP_Vars3)),%(Pred_id=1->trace;true),del_append(Globals1,[[[vars1,Pred_id],Vars1]],Globals3),((get_lang_word("findall_exit_function",Dbw_findall_exit_function1),Dbw_findall_exit_function1=Dbw_findall_exit_function,get_lang_word("findall_fail_function",Dbw_findall_fail_function1),Dbw_findall_fail_function1=Dbw_findall_fail_function,(Line_number_b=[Dbw_findall_exit_function,Findall_end_line]->true;Line_number_b=[Dbw_findall_fail_function,Findall_end_line])%,trace%writeln(here0))->((%trace,cp_since_findall_start(Choice_point_trail1e,Level,_D10,E1,D1,CP_Vars3,CP_Vars31)%writeln1(cp_since_findall_start(Choice_point_trail1e,Level,D1,E1,CP_Vars3,CP_Vars31)))->(%trace,%cut_cps_if_necessary1(Pred_id,Choice_point_trail1e,Choice_point_trail1f,CP_Vars31,CP_Vars311,Predicate_number,Globals3),process_cp(Findall_end_line,FA,D1,E1,_,Vars1, _End_result, Functions,Vars2, %% CPVs here?**** CPV0,CPV to CPV1,CPV2Result1, Result2, Globals3,Globals2,Choice_point_trail1e,Choice_point_trail3,CP_Vars31,CP_Vars2));(%trace,%cut_cps_if_necessary1(Pred_id,Choice_point_trail1e,Choice_point_trail1f,CP_Vars3,CP_Vars311,Predicate_number,Globals3),%clear_cps(Choice_point_trail1e,Choice_point_trail1f,CP_Vars3,CP_Vars3a),Choice_point_trail1e=Choice_point_trail1f,CP_Vars3=CP_Vars3a,%writeln(here2),end_nested_findall(FA,Pred_id,Level,Predicate_number,Line_number_b,Choice_point_trail1f,Choice_point_trail3,Vars1,Vars2,CP_Vars3a,CP_Vars2,Functions,Globals3,Globals2,Result1, Result2,End_line42)));%Level32 is Level-1,((Line_number_b= -1 -> true;(Line_number_b= -2 ->true;Line_number_b= -3))->%trace,((Line_number_b= -3)->e(Pred_id,Level,Predicate_number,Vars1,_End_result,Functions,Vars2,Result1, Result2, Globals3,Globals2,Choice_point_trail1e,Choice_point_trail3,CP_Vars3,CP_Vars2);(%trace,ssi1([Pred_id,Level, %*Predicate_number,Line_number_b,"predicate",Query,Vars1,All_predicate_numbers], _End_result, Functions,Vars2,Result1, Result2, Globals3,Globals2,Choice_point_trail1e,Choice_point_trail3,CP_Vars3,CP_Vars2)));( %(trace,%not(D='-')(((%trace,D=[_|_])-> true;(D=(*),get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,Line=[Function,Arguments],Function=[Dbw_v,_Function2],%,not(reserved_word2(Function2))append([Function],Arguments,Arguments1),        substitutevarsA1(Arguments1,Vars1,[],Vars3,[],FirstArgs),                append(Globals3,[[[firstargs_uv2,Pred_id],FirstArgs]],Globals31),        del_append(Globals31,[[[vars1,Pred_id],Vars1]],_Globals32),        Vars3=[Function1|Vars31],        _Query2=[Function1,Vars31],pred_numbers(Pred_numbers),length(Arguments,Arity1),member([Function1,Arity1,_Pred_numbers1],Pred_numbers)))) ->(d(Pred_id,D,Level,Predicate_number,Line_number_b,Query,Vars1,Vars2,All_predicate_numbers,Line,Choice_point_trail1e,Globals3,Functions,Result1, Result2,Globals2,Choice_point_trail3,CP_Vars3,CP_Vars2));((get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("cut",Dbw_cut1),Dbw_cut1=Dbw_cut,%writeln1([line,Line]),Line=[[Dbw_n,Dbw_cut],[]]) ->%trace,(cut_cps(Choice_point_trail1e,Choice_point_trail11,CP_Vars3,CP_Vars4,Pred_id,Predicate_number,Globals3),%writeln1(cut_cps(Choice_point_trail1e,Choice_point_trail11,CP_Vars3,CP_Vars4,Pred_id,Predicate_number,Globals3)),ssi1([Pred_id,Level,Predicate_number,A,"line",Query,Vars1,All_predicate_numbers], _End_result3, Functions,Vars2,Result1, Result2, Globals3,Globals2,Choice_point_trail11,Choice_point_trail3,CP_Vars4,CP_Vars2));(((%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,get_lang_word("read_string",Dbw_read_string1),get_lang_word("read_password",Dbw_read_string2),get_lang_word("text_area",Dbw_read_string3),%writeln1([Dbw_read_string1,Dbw_read_string2]),%trace,%Dbw_read_string1=Dbw_read_string->true;Dbw_read_string2=Dbw_read_string),%trace,%writeln1([line,Line]),((Line=[[Dbw_n,Dbw_read_string1],[Variable1]],Dbw_read_string1=Dbw_read_string)->true;(Line=[[Dbw_n,Dbw_read_string2],[Variable1]],Dbw_read_string2=Dbw_read_string);(Line=[[Dbw_n,Dbw_read_string3],[Variable1,Variable2,Variable3]],Dbw_read_string3=Dbw_read_string)),%true%html_api_maker_or_terminal(html))->(%trace,% if html, output web form code, stop% () if api maker, % if terminal, use ssi read string below%interpretpart(read_string1,Variable1,Vars1,Vars3)/* (var(Skip)->Globals3=Globals4; append(Globals3,[[[skip,Pred_id,Line_number_b],Skip]],Globals4)),  (%trace, Vars2c=[]->(Choice_point_trail1e=Choice_point_trail11, CP_Vars3=CP_Vars4);  append_cp(Choice_point_trail1e,[[Pred_id,Level,Predicate_number,Line_number_a,"line",_,Vars3,Vars2c]],Choice_point_trail11,CP_Vars3,CP_Vars4)),*/getvalue(Variable1,Value1,Vars1),(Dbw_read_string3=Dbw_read_string->(getvalue(Variable2,Value2,Vars1),getvalue(Variable3,Value3,Vars1),debug_call(Skip,[[Dbw_n,Dbw_read_string3],[Value1,Value2,variable]]));% text area(debug_call(Skip,[[Dbw_n,Dbw_read_string],[variable]]))),lang(Lang),debug2(Debug2),debug3(Debug3),debug4(Debug4),retry_back(Retry_back),retry_back_stack(Retry_back_stack),retry_back_stack_n(Retry_back_stack_n),cumulative_or_current_text(Cumulative_or_current_text),number_of_current_text(Number_of_current_text),html_api_maker_or_terminal(Html_api_maker_or_terminal),pred_numbers(Pred_numbers),%curr_cp_index(Curr_cp_index),%trace,%*pred_id(Pred_id),%writeln([Pred_id,pred_id(Pred_id_a)]),pred_id(Pred_id_a),(true%pred_id(Pred_id)->true;(writeln([Pred_id,pred_id(Pred_id_a)]),fail)),(types(Types)->true;(writeln(types),fail)),(types(on)->(typestatements(Typestatements),modestatements(Modestatements));true),%writeln(1),session_number(Session_number),%retractall(hidden(Hidden)),%writeln(2),%assertz(hidden(Hidden=Session_number,%writeln(3),(Dbw_read_string3=Dbw_read_string-> %text area(Value1A=Value3,Variable1A=Variable3);(Value1A=Value1,Variable1A=Variable1)),Hidden3=[Dbw_n,Dbw_read_string,Value1A,Variable1A,Line_number_b,Skip,lang(Lang),debug2(Debug2),debug3(Debug3),debug4(Debug4),retry_back(Retry_back),retry_back_stack(Retry_back_stack),retry_back_stack_n(Retry_back_stack_n),cumulative_or_current_text(Cumulative_or_current_text),number_of_current_text(Number_of_current_text),html_api_maker_or_terminal(Html_api_maker_or_terminal),pred_numbers(Pred_numbers),pred_id(Pred_id_a),types(Types),typestatements(Typestatements),modestatements(Modestatements),ssi1([Pred_id,Level,Predicate_number,A,"line",Query,Vars1,All_predicate_numbers], _End_result3, Functions,Vars2,Result1, Result2, Globals3,Globals2,Choice_point_trail1e,Choice_point_trail3,CP_Vars3,CP_Vars2),ssi1([C,"line",Query,Vars1])],%writeln(4),save_session(Session_number,Hidden3),%writeln(5),%print_text,%trace,term_to_atom(Hidden,Hidden1),replace_new(Hidden1,"\"","&quot;",Hidden2),%replace_new(Hidden2,"\'","\'\'",Hidden3),%writeln1([Dbw_read_string=Dbw_read_string2]),%writeln1(["*1",Dbw_read_string=Dbw_read_string2]),(Dbw_read_string=Dbw_read_string2 % read_password->Form_input="password";Form_input="text"),(Dbw_read_string=Dbw_read_string3 % text_area->concat_list(["<textarea id=input name=input ",Value1,">",Value2,"</textarea>"],CL1);concat_list(["<input type=",Form_input," id=input name=input value=''>"],CL1)),concat_list(["     <form action=\"/landing\" method=\"POST\">  <label for=ssi></label>  ",CL1,"<br><br>  <input type=hidden id=ssi name=ssi value=\"",Hidden2,"\"><br><br>  <input type=submit name=submit value='Submit'></form>"],Form_text1),/*'",  'a',  %,  "'  */  atom_string(Form_text,Form_text1),%format(Hidden1,[]),format(Form_text,[])));(%trace,(((not((get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("read_string",Dbw_read_string1),get_lang_word("read_password",Dbw_read_string2),Dbw_read_string1=Dbw_read_string,Dbw_read_string2=Dbw_read_string,%writeln1([line,Line]),Line=[[Dbw_n,Dbw_read_string],[Variable1]],html_api_maker_or_terminal(html)))),((%trace,AC=(-)) ->(%writeln1(interpretstatement2(ssi,Functions,Functions,Line,Vars1,Vars3,_Result21,_Cut,Vars2c)),interpretstatement2(ssi,Functions,Functions,Line,Vars1,Vars3,_Result21,_Cut,Vars2c,Skip));(%trace,interpretstatement2(ssi,Functions,Functions,Line,Vars1,Vars3,_Result21,_Cut,Vars2c,AC,Skip))))% choose certain commands from lpi for ssi, rest customised->% if triggers end_function (meaning the end of an if-then clause), writes trace display and goes to "go after" line at start of function% end_function is given with line number to signal the end of the if-then statement etc.
ssi_call(Query,Functions1,Predicate_numbers,Vars21) :- %% ** added vars21findall(Vars2,(member(Predicate_number,Predicate_numbers),%% *** findall xxmember([Predicate_number,_|Arguments2],Functions1),Query=[Name|Arguments1], % Name,Arguments1 -> Name|Arguments1%% checktypes_inputs(Name,Arguments1)(Arguments2=[Arguments3,":-",Body]->true;(Arguments2=[":-",Body]->Arguments3=[];(Arguments2=[Arguments3]->Body=[];(Arguments2=[]->(Arguments3=[],Body=[]))))),checkarguments(Arguments1,Arguments3,[],Vars1,[],FirstArgs),%% debug_call(Skip,[Name,Arguments1]),%% find first line to run, keeping track list of command numbers gone pastfind_first_line_to_run(Body,Vars1,Vars2)),Vars21),%run_linetrue.
ssi_in_c(Sum) :- X_max is 3, Y_max is 4, Z_max is 5, numbers(X_max,1,[],Xs), numbers(Y_max,1,[],Ys), numbers(Z_max,1,[],Zs),  % define array int a[X][Y][Z]  findall(Ys1,(member(_Z,Zs), findall(Xs1,(member(_Y,Ys), findall(Xn,(member(_X,Xs), Xn=1),Xs1)),Ys1)),Zs1),  % count all values in array  flatten(Zs1,Zs2),sum(Zs2,0,Sum).
ssi_interpretpart(member3,Variable2,Variable1,Vars1,Vars2,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member3",Dbw_member31),Dbw_member31=Dbw_member3,        getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_member3],[Value1,Value2]]),((%Value2=empty,((findall([Vars2b,[Value1,Value2a],Value2a],(member(Value2a,Value1),putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value2a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_member3],[Value1,Value2],_,_,%,[Value1,Value2a]_,_,Vars2c1]))),      debug_exit(Skip,[[Dbw_n,Dbw_member3],[Value1,Value2a]])).
ssi_server(Port) :-        http_server(http_dispatch, [port(Port)]).
ssi_test_all00(Lang,Debug,NTotal,Score) :-retractall(lang(_)),assertz(lang(Lang)),ssi_test_all0(test,4,Lang,Debug,NT1,S1),writeln0([ssi_verify4,S1,/,NT1,passed]),writeln0(""),writeln0(""),ssi_test_all0(test_types_cases,6,Lang,Debug,NT2,S2),writeln0([ssi_verify4_types,S2,/,NT2,passed]),writeln0(""),writeln0(""),ssi_test_all0(testopen_cases,3,Lang,Debug,NT3,S3),writeln0([ssi_verify4_open,S3,/,NT3,passed]),writeln0(""),writeln0(""),ssi_test_all0(test_open_types_cases,5,Lang,Debug,NT4,S4),writeln0([ssi_verify4_open_types,S4,/,NT4,passed]),writeln0(""),writeln0(""),NTotal is NT1+NT2+NT3+NT4,Score is S1+S2+S3+S4.
ssi_test_all000(test,Debug,NTotal3,Score1,Score3,Lang) :-test(NTotal3,Query,Functions,Result),trans_alg(Query,"en",Lang,Query1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions);true),(Debug=on->writeln1(Functions1);true),trans_alg(Result,"en",Lang,Result1),((catch(call_with_time_limit(800,international_lucianpl([lang,Lang],Debug,Query1,Functions1,Result1)),_,false)%,writeln1(Result2))->(Score3 is Score1+1,writeln0([ssi_test,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test,NTotal3,failed]))).ssi_test_all000(test_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_types_cases(NTotal3,Query,Types,Modes,Functions,Result),trans_alg(Query,"en",Lang,Query1),retractall(lang(_)),assertz(lang("en")),%/*findall([F1|Types00],(member([F1|Types003],Types),expand_types1(Types003,[],Types00)),Types004),%Types004=[[[n, find_record], [[t, brackets], [[[t, list], [[t, number], [t, string]]], [t, number], [t, string]]]]],trans_alg(Types004,"en",Lang,Types005),%,expand_types1(Types002,[],Types003),simplify_types(Types003,[],Types00)%),Types1),%simplify_types(Types01,[],Types1),%findallfindall([F|Types100],(member([F|Types101],Types005),%retractall(lang(_)),%assertz(lang("en")),simplify_types(Types101,[],Types100)),Types1),%*/%trans_alg(Types,"en",Lang,Types1),trans_alg(Modes,"en",Lang,Modes1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),trans_alg(Result,"en",Lang,Result1),(catch(call_with_time_limit(800,international_lucianpl([lang,Lang],Debug,Query1,Types1,Modes1,Functions1,Result1)),_,false)%,writeln1(Result2)->(Score3 is Score1+1,writeln0([ssi_test_types,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test_types,NTotal3,failed]))).
ssi_test_all000(test_open_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_open_types_cases(NTotal3,Query,Types,Modes,Functions),trans_alg(Query,"en",Lang,Query1),trans_alg(Types,"en",Lang,Types1),trans_alg(Modes,"en",Lang,Modes1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_lucianpl([lang,Lang],Debug,Query1,Types1,Modes1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([ssi_test_open_types,NTotal3,result,Result]),writeln0([ssi_test_open_types,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test_open_types,NTotal3,failed]))).
ssi_test_all01(Test,_Arity,Lang,Debug,NTotal3,Passed) :-ssi_test_all000(Test,Debug,NTotal3,0,Passed1,Lang),(Passed1=1->Passed=passed;Passed=failed),/**((international_lucianpl([lang,"en"],Debug,Query,Functions,Result1),%%writeln(Result1),Result=Result1)->(Passed=passed,writeln([ssi_test_all0,N,passed]));(Passed=failed,writeln([ssi_test_all0,N,failed]))),**/!.
ssi_test_all_bt000(test,Debug,NTotal3,Score1,Score3,Lang) :-test(NTotal3,Query,Functions,Result),trans_alg1(Query,"en",Lang,Query1),(Query=Query1->true%writeln("Query=Query1");(writeln0("not(Query=Query1)"),abort)),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions);true),(Debug=on->writeln1(Functions1);true),(Functions=Functions1->true%writeln("Functions=Functions1");(writeln0("not(Functions=Functions1)"),abort)),trans_alg1(Result,"en",Lang,Result1),(Result1=_Result11->true%writeln("Result1=Result11");(writeln0("not(Result1=Result11)"),abort)),(international_lucianpl([lang,"en"],Debug,Query1,Functions1,Result1)%%writeln1(Result2->(Score3 is Score1+1,writeln0([ssi_test,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test,NTotal3,failed]))).
ssi_test_all_bt000(test_open_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_open_types_cases(NTotal3,Query,Types,Modes,Functions),trans_alg1(Query,"en",Lang,Query1),%trans_alg1(Types,"en",Lang,Types1),findall([F1|Types00],(member([F1|Types003],Types),expand_types1(Types003,[],Types00)),Types004),%Types004=[[[n, find_record], [[t, brackets], [[[t, list], [[t, number], [t, string]]], [t, number], [t, string]]]]],trans_alg1(Types004,"en",Lang,Types005),%,expand_types1(Types002,[],Types003),simplify_types(Types003,[],Types00)%),Types1),%simplify_types(Types01,[],Types1),%findallfindall([F|Types100],(member([F|Types101],Types005),simplify_types(Types101,[],Types100)),Types1),trans_alg1(Modes,"en",Lang,Modes1),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_lucianpl([lang,"en"],Debug,Query1,Types1,Modes1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([ssi_test_open_types,NTotal3,result,Result]),writeln0([ssi_test_open_types,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test_open_types,NTotal3,failed]))).
ssi_test_all_bt000(test_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_types_cases(NTotal3,Query,Types,Modes,Functions,Result),trans_alg1(Query,"en",Lang,Query1),%trans_alg1(Types,"en",Lang,Types1),findall([F1|Types00],(member([F1|Types003],Types),expand_types1(Types003,[],Types00)),Types004),%Types004=[[[n, find_record], [[t, brackets], [[[t, list], [[t, number], [t, string]]], [t, number], [t, string]]]]],trans_alg1(Types004,"en",Lang,Types005),%,expand_types1(Types002,[],Types003),simplify_types(Types003,[],Types00)%),Types1),%simplify_types(Types01,[],Types1),%findallfindall([F|Types100],(member([F|Types101],Types005),simplify_types(Types101,[],Types100)),Types1),trans_alg1(Modes,"en",Lang,Modes1),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),trans_alg1(Result,"en",Lang,Result1),(international_lucianpl([lang,"en"],Debug,Query1,Types1,Modes1,Functions1,Result1)->(Score3 is Score1+1,writeln0([ssi_test_types,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test_types,NTotal3,failed]))).
ssi_test_all_bt01(test,_Arity,Lang,Debug,NTotal3,Passed) :-ssi_test_all_bt000(test,Debug,NTotal3,0,Passed1,Lang),(Passed1=1->Passed=passed;Passed=failed),/**((international_lucianpl([lang,"en"],Debug,Query,Functions,Result1),%%writeln(Result1),Result=Result1)->(Passed=passed,writeln([ssi_test_all_bt0,N,passed]));(Passed=failed,writeln([ssi_test_all_bt0,N,failed]))),**/!.
stems_to_mid :-check_asc2mid,directory_files("stems/",F),delete_invisibles_etc(F,G),findall(_,(member(File,G),string_concat(File1,".txt",File),foldr(string_concat,["./asc2mid stems/",File," > mid/",File1,".mid"],Command),shell1_s(Command)),_),!.
stepclassical1(Note1, Note2) :-Value is Note1+2, Note2 is Value mod 12.
steppopclassical1(Note1, Note2) :-Value is Note1+2, Note2 is Value mod 12.
string(String) --> list(String).
string(String) --> list(String).list([]) --> [].
string(String) --> list(String).list([]) --> [].list([L|Ls]) --> [L], list(Ls).
string1(A) :- atom_string(A,B),string_codes(B,C),C=[34|_],reverse(C,D),D=[34|_].
string_atom(String,Atom) :-atom_string(Atom,String),!.
string_atom(String,Atom) :-atom_string(Atom,String),!.phrase_from_file_s(string(Output), String) :-atom_string(String1,String),phrase_from_file(string(Output), String1),!.
string_compound(A,B) :- catch(number(B),_,false),number_string(B,A),!.
string_concat_url("",F1,F1) :-!.
string_strings(S,S1) :-string_chars(S,S2),findall(S3,(member(S4,S2),atom_string(S4,S3)),S1),!.
string_to_image(["text","x_bounds",XB1,"y_bounds",YB1,"x",X1,"y",Y1,"size",S1,"colour",C1,T1],_X,_Y,File_contents1,File_contents2) :-%X=40,Y=24,%X=5,Y=5,%background(X,Y,File_contents1),scaler(S1,Cs),retractall(characterbr2(_)),assertz(characterbr2(Cs)),%trace,string_to_image1(XB1,YB1,1,1,X1,Y1,S1,C1,T1,File_contents1,File_contents2),%writeln([file_contents2,File_contents2]),render_pbm_file(File_contents2,XB1,YB1,File_contents3),random(X3),concat_list(["paint_x",X3,".ppm"],X4),write_pbm(File_contents3,XB1,YB1,X4),!.
string_to_list2(B,B1,N1,N2,A1,A2) :- string_concat(D,"",B),string_length(D,1),append(A1,[[N1,D,[-,B1]]],A2),N2 is N1 + 1,!.
string_to_list21(B,A1,A2) :- string_concat(D,"",B),string_length(D,1),append(A1,[D],A2),!.
string_to_list_a2(B,B1,N1,N2,A1,A2) :- %string_concat(D,"",B),%string_length(D,1),B=[D],append(A1,[[N1,D,[-,B1]]],A2),N2 is N1 + 1,!.
string_to_list_b2(B,B1,N1,N2,A1,A2) :- %string_concat(D,"",B),%string_length(D,1),B=[D],append(A1,[[N1,D,[-,B1]]],A2),N2 is N1 + 1,!.
string_to_pbm(String,X,Y,File) :-%X=40,Y=24,%X=5,Y=5,background(X,Y,File_contents1),string_to_pbm1(X,Y,1,1,String,File_contents1,File_contents2),render_pbm_file(File_contents2,X,Y,File_contents3),write_pbm(File_contents3,X,Y,File),!.
stringconcat2(Dbw_n,Dbw_stringconcat,Variable1,Variable2,_Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(2),%trace,(contains_empty(Value11),contains_empty(Value21),not(contains_empty(Value31))),(Value31=Value3,debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,variable2,Value3]]),        ((string_concat(Value1A,Value2A,Value3),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        putvalue_equals4(Variable1,Value1A,Vars1,Vars3),        putvalue_equals4(Variable2,Value2A,Vars3,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1A,Value2A,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[Value1A,Value2A,variable3]]))%);))).
stringconcat2(Dbw_n,Dbw_stringconcat,Variable1,_Variable2,_Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(3),(contains_empty(Value11),not(contains_empty(Value21)),not(contains_empty(Value31))),(Value21=Value2,Value31=Value3,debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,Value2,Value3]]),        ((string_concat(Value1A,Value2,Value3),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        putvalue_equals4(Variable1,Value1A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1A,Value2,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,Value2,Value3]]))%);))).
stringconcat2(Dbw_n,Dbw_stringconcat,_Variable1,Variable2,_Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(4),(contains_empty(Value21),not(contains_empty(Value11)),not(contains_empty(Value31))),(Value11=Value1,Value31=Value3,debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,variable2,Value3]]),        ((string_concat(Value1,Value2A,Value3),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        putvalue_equals4(Variable2,Value2A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2A,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,variable2,Value3]]))))).                        stringconcat2(Dbw_n,Dbw_stringconcat,_Variable1,_Variable2,_Variable3,Value11,Value21,Value31,Vars1,Vars2) :-%writeln(5),(not(contains_empty(Value21)),not(contains_empty(Value11)),not(contains_empty(Value31))),(Value11=Value1,Value21=Value2,Value31=Value3,debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3]]),        ((string_concat(Value1,Value2,Value3),        %val1emptyorvalsequal(Value3,Value3A),        %trace,        Vars1=Vars2,        %putvalue_equals4(Variable2,Value2A,Vars1,Vars2),%)->      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,variable2,Value3]]))))).                        interpretpart(date,Year,Month,Day,Hour,Minute,Seconds,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("date",Dbw_date),                getvalues(Year,Month,Day,YearValueA,MonthValueA,DayValueA,Vars1),        getvalues(Hour,Minute,Seconds,HourValueA,MinuteValueA,SecondsValueA,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_date],[[variable1,variable2,variable3,variable4,variable5,variable6]]]),        ((get_time(TS),stamp_date_time(TS,date(YearValueB,MonthValueB,DayValueB,HourValueB,MinuteValueB,SecondsValueB,_A,_TZ,_False),local),        val1emptyorvalsequal(YearValueA,YearValueB),        val1emptyorvalsequal(MonthValueA,MonthValueB),        val1emptyorvalsequal(DayValueA,DayValueB),        val1emptyorvalsequal(HourValueA,HourValueB),        val1emptyorvalsequal(MinuteValueA,MinuteValueB),        val1emptyorvalsequal(SecondsValueA,SecondsValueB),        putvalue(Year,YearValueB,Vars1,Vars3),              putvalue(Month,MonthValueB,Vars3,Vars4),              putvalue(Day,DayValueB,Vars4,Vars5),              putvalue(Hour,HourValueB,Vars5,Vars6),              putvalue(Minute,MinuteValueB,Vars6,Vars7),              putvalue(Seconds,SecondsValueB,Vars7,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_date],[YearValueB,MonthValueB,DayValueB,HourValueB,MinuteValueB,SecondsValueB]]);     debug_fail(Skip,[[Dbw_n,Dbw_date],[variable1,variable2,variable3,variable4,variable5,variable6]])),!.
strings_to_grid(Strings,Grid) :-process_strings(Strings,Strings2),length(Strings2,Y),Strings2=[String1|_],length(String1,X),numbers(Y,1,[],YN1),reverse(YN1,YN),numbers(X,1,[],XN),findall([X1,Y11,String3],(member(Y1,YN),Y11 is Y-Y1+1,get_item_n(Strings2,Y1,String),member(X1,XN),get_item_n(String,X1,String2),(String2="*"->String3=[*];String3=[])),Grid),print_grid(Grid,X,Y).
strip([],Result2,Result2).
structure_to_body_metaphor(Structure,Body_metaphor) :-findall(First_node,(member([First_node,_],Structure)),First_nodes1),sort(First_nodes1,First_nodes2),findall([First_node,Structure_type],(member(First_node,First_nodes2),findall(Second_node,(member([First_node,Second_node],Structure)),Second_nodes1),length(Second_nodes1,Second_nodes_length),structure_to_body_metaphor2(Second_nodes_length,Structure_type)),Body_metaphor).
sub_list(List,Before_list,Sub_list,After_list) :-append(Before_list,L1,List),append(Sub_list,After_list,L1).
sub_term_wa3(Ns1,Ns1,_N,A,Find,B,C,true) :- stwa(%[ C0%,Find] ), (C0=find->A=Find;(C0=types,is_t(Find,A,true,true))), not(Ns1=[_]), append(B,[[Ns1,A]],C).
subject(person).
subset_place(Subset,People_subset,Place):member([Subset,Place],People_subset).
subset_record(Subset,Subset_record,Record) :-member([Subset,Record],Subset_record).
substitute1(_Item,_POS,[],Grammar,Grammar) :- !.
substitute2([],_BrDict012,Sentence,Sentence) :- !.
substitutevarsA1(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2) :-substitutevarsA2(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2).
substitutevarsA1(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2) :-substitutevarsA2(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2),!.
substitutevarsA1(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2) :-substitutevarsA2(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2).substitutevarsA2([],_Vars1,Vars2,Vars2,FirstArgs,FirstArgs).
substitutevarsA1(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2) :-%writeln1(substitutevarsA1(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2)),%(Arguments=[[v,d],[[v,a],"|",[v,b]],[v,c]]->trace;true),        %simplify(Arguments1,Arguments),%trace,writeln(substitutevarsA1(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2)),(equals4(on)->e4_substitutevarsA1(Arguments,Vars1,Vars2,Vars33,FirstArgs1,FirstArgs2);substitutevarsA11(Arguments,Vars1,Vars2,Vars33,FirstArgs1,FirstArgs2)),findall(Vars31,(member(Vars32,Vars33),simplify(Vars32,Vars31)),Vars3),%substitutevarsA2(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2),!.
substitutevarsA2([],_Vars1,Vars2,Vars2,FirstArgs,FirstArgs):-!.
substring([],[]).
subterm_types_wa(Heuristic, Term, Instances) :-sub_term_types_wa(Heuristic, Term, Instances).
subterm_wa(Subterm, Term, Instances) :-sub_term_wa(Subterm, Term, Instances).
subtract1([],_N41,Options45,Options45) :- !.
subtract2([],_,B,B) :- !.
subtract2([],_N41,Options45,Options45) :- !.
suggestions(Direction,Dictionary2,State2,Word2,_Word21,Suggestions1,Suggestions2) :-%trace,reverse(Word2,Word22),Word22=[_Letter1|_Rest],%((%Direction=dtrue->(S1=State2,S2=_);(S1=_,S2=State2)),not(member([S1,_Letter,S2],Dictionary2)),%->true;notrace),%not(member([S2,Letter,S1],Dictionary2))),%->true;notrace),%trace,string_concat(Letter,Word2,Word23),%trace,(Direction=d->Word24=Word2;(%string_to_list21(Word2,[],Word23),reverse(Word2,Word24))),%concat_list(Word231,Word232),%append(["1","0"],Word24,Word232))),append(Suggestions1,[Word24],Suggestions2).%,notrace.
sum(A,B) :-A=[C|D],sum(C,D,0,B).
sum(A,B,C) :- C is A+B.split1(N,A,B) :- split_string(A,"\n\r","\n\r",C), split2(N,C,[],D), findall(H,(member(D1,D), findall([E,"\n"],member(E,D1),F), flatten(F,G), foldr(string_concat,G,H)),B),!.split2(N,A,B,C) :- length(D,N), (append(D,E,A)-> (append(B,[D],F), split2(N,E,F,C)); append(B,[A],C)),!.  t2b :-N1=1,texttobr2(N1,"Books/args/lgtext_a.txt",u,u,false,false,false,false,false,false,[auto,on]),!.
sum([],S,S):-!.
sum([],S,S):-!.sum(S0,S1,S2) :-S0=[S3|S4],S5 is S1+S3,sum(S4,S5,S2).
sum([],S,S):-!.sum(S0,S1,S2) :-S0=[S3|S4],S5 is S1+S3,sum(S4,S5,S2).mean(Sum,Mean) :-Mean is Sum/2.
sum([],S,S):-!.sum(S0,S1,S2) :-S0=[S3|S4],S5 is S1+S3,sum(S4,S5,S2).mean(Sum,Mean) :-Mean is Sum/2.furthestfrommean(S,Mean,V) :-absdiffmean(S,Mean,[],D),sort(D,D1),reverse(D1,[[_,V]|_Rest]).
summarise_formulas(_Ad21,_Q21,A21,A23) :-% in rows or columns from item n to m, find sum%findall(A23,(member(Table1,A21),% subterm with address of old values, new vars until can't find any%[var,T3,R3,C3,IN3,V3,_]%[function,T,R,C,XY2,F21]% Finish off substituting variables into values in answersub_term_wa([var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3], A21, Instances1),findall([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1),number(VN)),Instances1a), % variablessub_term_wa([var,_,_,_,_,_,_,_,_,_,_], A21, Instances2),findall([Address, [var,T3,R3,C3,IN3,V3,[],TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,[],TP3,RP3,CP3,INP3]],Instances2),number1(V3)%(member([Address, [var,T4,R4,C4,IN4,V3,VN4,TP4,RP4,CP4,INP4]],Instances1a)->),Instances2a), % valuesfindall(X1,(member([Address1, [var,T4,R4,C4,IN4,V3,VN4,_TP4,_RP4,_CP4,_INP4]],Instances1a),(((member(X0,Instances2a),X0=[_Address2, [var,T5,R5,C5,IN5,V3,_VN5,_TP5,_RP5,_CP5,_INP5]])->X1=[Address1, [var,T4,R4,C4,IN4,V3,VN4,T5,R5,C5,IN5]];X1=X0))),Instances3),foldr(put_sub_term_wa_ae,Instances3,A21,A22),(A21=A22->A21=A231;summarise_formulas(_Ad22,_Q22,A22,A231)),summarise_formulas2(A231,A23),!.
switch(1).
symbol_1(":-","\":-\"").symbol_1("->","\"->\"").
symbol_1_lp2p(":-",":-").
symbol_lp2p(":-",":-").%:-%retractall(pred_type(_)),%assertz(pred_type(":-"))symbol_lp2p("->","-->").
t(BrDict,BrDict4,Word,W2) :- W1=[square,1,1,0], (member([Word,Word1],BrDict)-> (member([Word1,X,Y,Z],BrDict4)->W2=[Word1,X,Y,Z];W2=W1);W2=W1).
t2ab:-t2ab(u,"Books/algs/lgalgs_a.txt",u,u,on),!.
t2ab:-t2ab(u,"Books/args/lgtext_a.txt",u,u,on),!.
t2ab_br(Word,_):-%[],B,B,C,C,D,D,L,L) :-%!.
t2on(N1,Filex1,Stringx1,M1) :-t2on2(N1,Filex1,Stringx1,M1,0).
t2on_2(_,A,A,B,B,0) :- !.
t2s([T1|T2b],S1,S2,SS) :-not(S1=[]),(T1=[_,_A1,A2]->(det(A2,DA2),foldr(string_concat,[", then converted it to ",DA2," ",A2,""],S3));(T1=[_,A1]->(det(A1,DA1),foldr(string_concat,[", checked it was ",DA1," ",A1,""],S3)))),append(S1,[S3],S4),t2s(T2b,S4,S2,SS).
tag(Tag,Text,Source) :-prompt("What are the tags? (e.g. \"headache,car\" for \"I have a headache from the car.\"",Tag),prompt("What is the problem-type? (e.g. \"Headache from the car.\")",Text),prompt("What is the solution? (e.g. \"See Lucian Green's Medicine's Honey Pot Prayer.\")",Source).
tag(Tag,Text,Source) :-prompt("What are the tags?",Tag),prompt("What is the text?",Text),prompt("What is the source?",Source).
tail(A,B) :- A=[_|B].
term_analyser(T,[length=L,depth=Dep,average_items_per_branching_point=Ave]) :- length(T,L), deps(T,D), findall(DT,depth_tree(D,_,DT),DT1), sort(DT1,DT2), append(_,[DT3],DT2), length(DT3,Dep), %Dep is Dep1+1, findall(L2,(member([_D1,D2],D),findall(_,member([D2,_],D),B),length(B,L2)),BPI), length(BPI,L1),(L1=0->Ave=0;(sum(BPI,S),Ave is S/L1)),!.
term_to_atom(A,Atom),(var(A)->String=Atom;atom_string(A,String)));String=Atom)->((writeln1(string_atom2(String,Atom))));(writeln1(string_atom2(String,Atom)),false)).
term_to_list1(T,L) :-%catch(call_with_time_limit(3,term_to_list1(T,[],L).%),%time_limit_exceeded,%fail).term_to_list1([],L1,L1) :-!.
test(10,[[n,grammar1],["aa",[v,t]]],[  [[n,grammar1],[[v,s],[v,t]],":-",  [   [[n,noun],[[v,s],"",[v,t]]]   ]  ],    [[n,noun],["b"],"->",[""]],  [[n,noun],[[v,t]],"->",["a",[[n,noun],[[v,t]]]]]],[[[[v,t],"b"]]]).
test(103,[[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]],[        [[n,equals41],[[v,a],[v,d],[v,b1],[v,b2],[v,b3]],":-",        [       [[n,equals4],[[[v,b1],[v,b2],[v,b3]],[[v,a],"|",[v,d]]]]        ]]        ],[[[[v, b1], 1],[[v,b2],2],[[v,b3],3]]]).test(104,[[n,findall1],[[[1,2],[3,4]],[v,b]]],%[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[v,b1],[[[n,member],[[v,a1],[v,a]]],                [[n,findall],[[v,a3],[[[n,member],[[v,a2],[v,a1]]],        [[n,+],[[v,a2],5,[v,a3]]]],                [v,b1]]]],                                [v,b]]]        ]]        ],[[[[v,b],[[6,7],[8,9]]%[[1,11,111],[2,22,222],[3,33,333]]]]]).test(105,[[n,member2a],[[v,b],[1,11,111]]],[        [[n,member2a],[[v,b],[v,a]],":-",        [       [[n,member],[[v,b],[v,a]]],[[n,cut]]]        ]        ],[[[[v,b],1]]]).
test(104,[[n,findall1],[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[v,b1],[[[n,member2],[[v,a],[v,a1]]],                [[n,findall],[[v,a2],[[n,member2],[[v,a1],[v,a2]]],                [v,b1]]]],                                [v,b]]]        ]]        ],[[[[v,b],[[1,11,111],[2,22,222],[3,33,333]]]]]).
test(107,[[n,call1b],[[1,11,111],[v,b]]],[        [[n,call1b],[[v,a],[v,b]],":-",        [                  %[[n,equals4_on]], called algorithm isn't treated with equals4 anyway                 [[n,call],[[lang,same],same,[[n,member2a],[[v,a],[v,b]]],[[[n,member2a],[[v,a],[v,b]],":-",        [       [[n,member],[[v,b],[v,a]]],[[n,cut]]]        ]]]],                    [[n,equals4_on]]]]               ],[[[[v,b],1]]]).test(108,[[n,call1b],[[1,11,111],[v,b]]],        %[[[n,call1b],[[[t,brackets],[[t,number],[t,number],[t,number]]],[t,number]]]],        %[[[n,call1b],[input,output]]],[        %[[n,equals4_off]],        [[n,call1b],[[v,a],[v,b]],":-",        [       [[n,call],[[lang,same],same,[[n,member2a],[[v,a],[v,b]]],        [[[n,member2a],[[[t,number],[t,number],[t,number]],[t,number]]]],        [[[n,member2a],[input,output]]],[[[n,member2a],[[v,a],[v,b]],":-",        [       [[n,member],[[v,b],[v,a]]],[[n,cut]]]        ]]]],        [[n,cut]],        [[n,equals4_on]]        ]]               ],[[[[v,b],1]]]).
test(11,[[n,grammar1],["aa",[v,t],[v,u]]],[  [[n,grammar1],[[v,s],[v,t],[v,u]],":-",  [   [[n,noun],[[v,s],"",[v,t],[v,u]]]   ]  ],    [[n,noun],["b","c"],"->",[""]],  [[n,noun],[[v,t],[v,u]],"->",["a",[[n,noun],[[v,t],[v,u]]]]]],[[[[v,t],"b"],[[v,u],"c"]]]).
test(110,[[n,level_with],[170,[v,b]]],[        [[n,level_with],[[v,a],[v,a]]]              ],[[[[v,b],170]]]).test(111,[[n,tra_las],[5,[v,a]]],[        [[n,tra_las],[[v,n],[v,a]],":-",        [       [[n,las],[[v,n],[],[v,b]]],                [[n,append],[["tra"],[v,b],[v,a]]]        ]],               [[n,las],[0,[v,l],[v,l]]],        [[n,las],[[v,l],[v,m],[v,n]],":-",        [       [[n,-],[[v,l],1,[v,h]]],                [[n,append],[[v,m],["la"],[v,o]]],                [[n,las],[[v,h],[v,o],[v,n]]]        ]        ]        ],[[[[v,a],["tra","la","la","la","la","la"]]]]).test(112,[[n,final_gong],[5,[v,a]]],[        [[n,final_gong],[[v,n],[v,a]],":-",        [       [[n,-],[[v,n],1,[v,n1]]],                [[n,dashes],[[v,n1],[],[v,b]]],                [[n,append],[[v,b],["gong"],[v,a]]]        ]],               [[n,dashes],[0,[v,l],[v,l]]],        [[n,dashes],[[v,l],[v,m],[v,n]],":-",        [       [[n,-],[[v,l],1,[v,h]]],                [[n,append],[[v,m],["-"],[v,o]]],                [[n,dashes],[[v,h],[v,o],[v,n]]]        ]        ]        ],[[[[v,a],["-","-","-","-","gong"]]]]).
test(113,[[n,bedroom_to_garden],["bedroom",[v,b]]],[        [[n,bedroom_to_garden],["bedroom","garden"]]              ],[[[[v,b],"garden"]]]).test(114,[[n,stop_at_top],[["-","-","-","top"],[v,a]]],[        [[n,stop_at_top],[[],"fail"]],        [[n,stop_at_top],[[v,l],"success"],":-",        [       [[n,head],[[v,l],"top"]]        ]],                [[n,stop_at_top],[[v,l],[v,n]],":-",        [       [[n,head],[[v,l],"-"]],                [[n,tail],[[v,l],[v,t]]],                [[n,stop_at_top],[[v,t],[v,n]]]        ]        ]        ],[[[[v,a],"success"]]]).
test(117,[[n,grammar1],["a   a. a ",[" ","."],[v,t]]],%test(17,[[n,grammar1],["aaa1 ,-'! a? b! b.",[v,t]]],%%test(15,[[n,compound213],["","",[["a"],1],[v,t]]],[  [[n,grammar1],[[v,u],[v,cs],[v,t]],":-",  [   [[n,compound21],[[v,u],"",[v,cs],[],[v,t]]]   %%[[n,number21],[[v,u],"","",[v,t]]]   %%[[n,compound213],["","",[["a"],1],[v,t]]]  ]  ],  %[[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]], %% swapped these  [[n,compound],[[v,cs],[v,t],[v,u]],"->",  [[[n,compound21],[[v,cs],[v,t],[v,v]]],  [[n,compound213],[[v,v],[v,u]]]]],  %[[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],["","",[v,cs],[],[""]]],  [[n,compound21],[[v,cs],[v,t],[v,u]],"->",  [[[n,item],[[v,i],[v,cs]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],  [[n,compound21],[[v,cs],[v,t],[v,u]],"->",  [[[n,item],[[v,i],[v,cs]]],%" ",  [[n,compound21],[[v,cs],[],[v,compound1name]]],  [[n,code],%%[[n,stringconcat],[[v,i],".",[v,i2]]],  [[n,wrap],[[v,i],[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]]]],/**  [[n,item],[[v,t]],"->",  [[[n,number21],["",[v,t]]]]],**/  [[n,item],[[v,t],[v,cs]],"->",[[[n,word21],[[v,cs],"",[v,t]]]]],  [[n,item],[[v,t],[v,cs]],"->",[[[n,compound],[[v,cs],[],[v,t]]]]],/**  [[n,number212],["","",[v,t],[v,t]]],  [[n,number212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,number212],[[v,v],[v,u]]]]],  [[n,number21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,number21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]],**/  [[n,word212],["","",[v,t],[v,t]]],  [[n,word212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,word213],["","",[v,t],[v,t]]],/**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],[[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word212],[[v,v],[v,u]]]]],**/  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [%[v,a],  [v,b],%[[n,lookahead1],[[v,cs]]],  [[n,code],%[[n,sentencechars],[[v,a]]],  [[n,finalchar],[[v,b],[v,cs]]],  [[n,stringconcat],[[v,t],[v,b],[v,v1]]]  %[[n,stringconcat],[[v,t],[v,b],[v,v]]]  ],  [[n,word212],[[v,v1],[v,u]]]]],  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [%[v,a],  [v,b],[[n,lookahead],[[v,c]]],  [[n,code],  %[[n,trace]],  [[n,finalchar],[[v,c],[v,cs]]],  %  [[n,sentencechars],[[v,b],[v,cs]]],  [[n,stringconcat],[[v,t],[v,b],[v,v1]]]  %[[n,stringconcat],[[v,t],[v,b],[v,v]]]  ],  [[n,word212],[[v,v1],[v,u]]]]],  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [%[v,a],  [v,b],%[[n,lookahead],[[v,c]]],  [[n,code],  %[[n,trace]],  %[[n,sentencechars],[[v,c],[v,cs]]],  %  [[n,sentencechars],[[v,b],[v,cs]]],  [[n,stringconcat],[[v,t],[v,b],[v,v1]]]  %[[n,stringconcat],[[v,t],[v,b],[v,v]]]  ],  [[n,word213],[[v,v1],[v,u]]]]],/** nothing in string  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [%[v,a],  "",%[[n,lookahead],[[v,c]]],  %[[n,code],%[[n,sentencechars],[[v,a]]],  %[[n,finalchar],[[v,b],[v,cs]]]  %[[n,stringconcat],[[v,t],[v,a],[v,v1]]],  %[[n,stringconcat],[[v,t],[v,b],[v,v]]]  %],  %[[n,code],%[[n,sentencechars],[[v,b],[v,cs]]],  %[[n,stringconcat],[[v,t],[v,b],[v,v]]],  %[[n,not],[[n,finalchar],[[v,c],[v,cs]]]]],  [[n,word212],[[v,t],[v,u]]]]],**//**  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [%[v,a],  %[[n,code],[[n,trace]]],  [v,b],[[n,lookahead],[[v,c]]],  [[n,code],[[n,sentencechars],[[v,b],[v,cs]]],  [[n,stringconcat],[[v,t],[v,b],[v,v]]],  [[n,not],[[n,finalchar],[[v,c],[v,cs]]]]]  %[[n,finalchar],[[v,b],[v,cs]]]  %[[n,stringconcat],[[v,t],[v,a],[v,v1]]],  %[[n,stringconcat],[[v,t],[v,b],[v,v]]]  ,  [[n,word212],[[v,v],[v,u]]]]],**//**  [[n,word21],[[v,t],[v,u]],"->",  [[v,a],  [[n,code],[[n,stringtonumber],[[v,a],[v,a1]]],  [[n,number],[[v,a1]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],   [[n,word21],["",[v,numberstring]]],  [[n,code],[[n,stringconcat],  [[v,v],[v,numberstring],[v,u]]]]]]**/  [[n,word21],[[v,cs],[v,t],[v,u]],"->",  [[v,a],  % lookahead sent   %[[n,lookahead],[[v,c]]],  [[n,code],[[n,sentencechars],[[v,a],[v,cs]]],  [[n,stringconcat],[[v,t],[v,a],[v,v]]]],  [[n,word21],[[v,cs],"",[v,wordstring]]],  [[n,code],  [[n,stringconcat],[[v,v],[v,wordstring],[v,u]]]]]],    [[n,sentencechars],[[v,c],[v,cs]],":-",  [[[n,not],[[[n,member],[[v,c],[v,cs]]]]]]],/**  [[n,sentencechars],[[v,c]],":-",  [[[n,letters],[[v,c]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[[n,stringtonumber],[[v,c],[v,n]]],  [[n,number],[[v,n]]]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c]," "]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],","]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"-"]]]],  [[n,sentencechars],[[v,c]],":-",  [[[n,=],[[v,c],"'"]]]],    [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"."]]]],**/  [[n,finalchar],[[v,c],[v,cs]],":-",  [[[n,member],[[v,c],[v,cs]]]]],/**  [[n,lookahead1],[[v,c],[v,cs]],":-", %?  [[[n,member],[[v,cs],[v,c]]],  [[n,lookahead],[[v,c]]]]],  [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"!"]]]],  [[n,finalchar],[[v,c]],":-",  [[[n,=],[[v,c],"?"]]]]  **/  [[n,lookahead],[[v,a],[v,a],[v,b]],":-",  [%[[n,trace]],  [[n,stringconcat],[[v,b],[v,d],[v,a]]],  [[n,string_length],[[v,b],1]]    %[[n,trace]],  %[[n,string_length],[[v,b],1]]]]  ]]%%],[[[v,t],[["a"],1]]]).
test(119,[[n,count],[2]],[        [[n,count],[[v,n]],":-",        [                [[n,=],[[v,n],1]]        ]        ],        [[n,count],[[v,n]],":-",        [                [[n,=],[[v,n],2]]        ]        ],        [[n,count],[[v,n]],":-",        [                [[n,=],[[v,n],3]]        ]        ]] ,[[]]).test(120,[[n,function],[1,[v,b],2,[v,a]]],[        [[n,function],[[v,a],[v,a],[v,b],[v,b]],":-",        [                [[n,true]]        ]        ]], [[[[v,a],2],[[v,b],1]]]).test(121,[[n,append1],[[v,a]]],[        [[n,append1],[[v,a]],":-",        [                [[n,a],[[v,a]]]        ]        ],        [[n,a],[["a"]],":-",        [                [[n,true]]        ]]],[[[[v,a], ["a"]]]]).test(122,[[n,equals4_on1]],%test(122,[[n,compound],["[],1]",[v,u],["aa,]",b,"c",[]],[v,t]]],[/*  [[n,compound],["[]","",[],[v,t]],":-",  [   [[n,compound],[[v,u],"",[],[v,t]]]  ]  ],*//*   [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]],  [[n,a],[[v,u],[v,u],[v,t],[v,t]]],    [[n,compound],[[v,t],[v,u]],"->",  ["[",[[n,a],[[v,t],[v,v]]],  "]",  [[n,compound213],[[v,v],[v,u]]]]]],*/  [[n,equals4_on1],":-",  [[[n,equals4_on]]]]],  %[[[[v,u], ",1]"],[[v,t], ["aa,]",b,"c",[]]]]]).
test(12,[[n,grammar1],["aa"]],[  [[n,grammar1],[[v,s]],":-",  [   [[n,noun],[[v,s],""]]  ]  ],  [[n,noun],"->",[""]],  [[n,noun],"->",["a",[[n,noun]]]]],[[]]).
test(126,[[n,equals41],[[[v,a],"|",[v,b]]]],[        [[n,equals41],[[1,2,3,4]]]        ],[[[[v, a], 1], [[v, b], [2, 3, 4]]]]).
test(127,[[n,equals41],[[[v,a],[v,c],"|",[v,b],[v,d]]]],[        [[n,equals41],[[1,2,3,4]]]        ],[]).
test(128,[[n,equals41],[[[[v,a]],[v,c],"|",[v,b]]]],[        [[n,equals41],[[[1],2,3,4]]]        ],[[[[v,a],1],[[v,b],[3,4]],[[v,c],2]]]).test(129,[[n,equals41],[[[v,a],"|",[v,b]]]],[        [[n,equals41],[[[1,2],3,4]]]        ],[[[[v, a], [1, 2]], [[v, b], [3, 4]]]]).
test(13,[[n,grammar1],["[a,a]",[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,compound],[[v,u],"",[],[v,t]]]  ]  ],  %[[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound],[[v,t],[v,u]],"->",  ["[",[[n,compound21],[[v,t],[v,v]]],"]",  [[n,compound213],[[v,v],[v,u]]]]],  %[[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,a]],[[n,rightbracketnext]],  [[n,code],[[n,wrap],["a",[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,a]],",",  [[n,compound21],[[],[v,compound1name]]],  [[n,code],[[n,wrap],["a",[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]]]],  %[[n,compound212],[[v,a],[v,a],[v,t],[v,t]]],  %[[n,a],["",""]],  [[n,a],"->",["a"]],  [[n,rightbracketnext],"->",  [[[n,lookahead],["]"]]]],    [[n,lookahead],[[v,a],[v,a],[v,b]],":-",  [[[n,stringconcat],[[v,b],[v,d],[v,a]]]]]    %[[n,a],[[v,a],[v,a]]]],[[[[v,t],["a","a"]]]]).
test(130,[[n,equals41],[[[v,a],"|",[[v,b]]]]],[        [[n,equals41],[[1,2]]]        ],[[[[v, a], 1], [[v, b], 2]]]).
test(131,[[n,equals41],[[[v,a]]]],[        [[n,equals41],[[1]]]        ],[[[[v, a], 1]]]).
test(132,[[n,equals41],[[[v,a],[v,b]]]],[        [[n,equals41],[[1,2]]]        ],[[[[v, a], 1], [[v, b], 2]]]).
test(133,[[n,equals41],[[[v,a],[v,b]]]],[        [[n,equals41],[[[1,3],2]]]        ],[[[[v, a], [1, 3]], [[v, b], 2]]]).
test(135,[[n,equals41],[[1,2,3]]],[        [[n,equals41],[[1,2,3]]]        ],[[]]).
test(136,[[n,equals41],[[[v,a],"|",[[v,b],"|",[v,d]]]]],[        [[n,equals41],[[1,2,3,4]]]        ],[[[[v, a], 1], [[v, b], 2],[[v, d], [3,4]]]]).
test(139,[[n,append1],[[v,a],[v,d]]],[        [[n,append1],[[v,a],[v,d]],":-",        [                %[[n,equals4_on]],                [[n,b],[[v,b]]],                [[n,c],[[v,c]]],                [[n,append],[[[v,b],[v,c]],[[v,c]],[[v,a],"|",[v,d]]]]                %[[n,equals4_off]]        ]        ],        [[n,b],["b"]],        [[n,c],["c"]]],[[[[v,a], "b"],[[v,d], ["c", "c"]]]]).
test(14,[[n,grammar1],["[a]",[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,compound],[[v,u],"",[],[v,t]]]  ]  ],  [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,a],[v,a],[v,t],[v,t]]],  [[n,compound],[[v,t],[v,u]],"->",  ["[",[[n,compound21],[[v,t],[v,v]]],"]",  [[n,compound213],[[v,v],[v,u]]]]],    [[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,a],[v,a],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,a]],  [[n,code],[[n,wrap],["a",[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],    [[n,a],["",""]],  [[n,a],"->",["a"]],  [[n,a],[[v,a],[v,a]]]],[[[[v,t],["a"]]]]).
test(140,[[n,equals41],[[1,2,3],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,wrap],[[[v,a]],[v,b]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,b],[[[1,2,3]]]]]]).test(141,[[n,equals41],[[1,2,3],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,head],[[[v,a]],[v,b]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,b],[1,2,3]]]]).test(142,[[n,equals41],[[1,2,3],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,tail],[[[v,a]],[v,b]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,b],[]]]]).
test(143,[[n,equals41],[[1,2,3],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,member],[[v,b],[[v,a]]]],                [[n,member],[[1,2,3],[[v,a]]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,b],[1,2,3]]]]).test(144,[[n,equals41],[[1,2,3],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,member],[[v,b],[[v,a]]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,b],[1,2,3]]]]).
test(145,[[n,equals41],[[[1,2,3]],[v,c]]],[        [[n,equals41],[[v,a],[v,c]],":-",        [       [[n,member3],[[1,"|",[v,c]],[v,a]]%        [       [[n,equals42],[[v,b]]]        ]]]        ],[[[[v,c],[2,3]]]]).
test(146,[[n,equals41],[[[1,2,3],4,5],[v,c]]],[        [[n,equals41],[[v,a],[v,c]],":-",        [       %[[n,=],[[v,a],[[1,2,3],"|",[v,c]]]],          %[[n,is],[[v,a],[[1,2,3],"|",[v,c]]]],          [[n,equals3],[[[1,2,3],"|",[v,c]],[v,a]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,c],[4,5]]]]).
test(147,[[n,equals41],[[v,c]]],[        [[n,equals41],[[v,c]],":-",        [       [[n,equals2],[[v,c],[1,[4,5]]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,c],[1,[4,5]]]]]).test(148,[[n,equals41],[[v,c]]],[        [[n,equals41],[[v,a]],":-",        [       [[n,equals3],[[[v,b],"|",[v,a]],[4,5,6]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,c],[5,6]]]]).test(149,[[n,equals41],[[[1,2,3]],[v,b],[v,c]]],[        [[n,equals41],[[v,a],[v,b],[v,c]],":-",        [       [[n,delete],[[v,a],[1],[[v,b],"|",[v,c]]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,b],[1,2,3]],[[v,c],[]]]]).
test(151,[[n,equals41],[[[6,2,3],[5]],[v,c]]],[        [[n,equals41],[[v,a],[v,c]],":-",        [       [[n,sort],[[v,a],[[5],"|",[v,c]]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,c],[[6,2,3]]]]]).test(152,[[n,equals41],[[6,2,3],[1,2,3],[v,c]]],[        [[n,equals41],[[v,a],[v,b],[v,c]],":-",        [       [[n,intersection],[[v,a],[v,b],[[v,c],"|",[v,d]]]]%        [       [[n,equals42],[[v,b]]]        ]]        ],[[[[v,c],2]]]).
test(153,[[n,equals41],[[[4,5,6]],[v,c]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,maplist],[[n,append],[v,a],[1,2,3],[[v,b],"|",[2,3,4,5,6]]]]        ]]        ],[[[[v,c],1]]]).
test(161,[[n,function],[1,1,[v,c]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [        %[[n,trace2]],                [[n,function2],[[v,a],[v,b],[v,f]]],                [[n,function2],[[v,f],[v,f],[v,c]]]                        ]        ],        [[n,function2],[[v,a],[v,f],[v,h]],":-",        [                [[n,+],[[v,a],[v,f],[v,h]]]        ]        ]],[[[[v,c], 4]]]).
test(163,[[n,function1],[[v,a],[v,a],[v,b],[v,b]]],[        [[n,function1],[[v,b],[v,b],[v,a],[v,a]],":-",        [                [[n,function],[1,[v,b],2,[v,a]]]        ]        ],                [[n,function],[[v,a],[v,a],[v,b],[v,b]],":-",        [                [[n,true]]        ]        ]],[[[[v,a],1],[[v,b],2]]]).test(164,[[n,function1],[[v,a],[v,a],[v,b],[v,b]]],[        [[n,function1],[[v,b],[v,a],[v,a],[v,b]],":-", % should fail        [                [[n,function],[1,[v,b],2,[v,a]]]        ]        ],                [[n,function],[[v,a],[v,a],[v,b],[v,b]],":-",        [                [[n,true]]        ]        ]],[]).
test(165,[[[n,equals4],[[v,a],[1,2]]],[[n,equals4],[[v,b],[0,"|",[v,a]]]]],[],[[[[v,a],[1,2]],[[v,b],[0,1,2]]]]).
test(166,[[[n,equals4],[[v,a],0]],[[n,equals4],[[v,b],[[v,a],"|",[1,2]]]]],[],[[[[v,a],0],[[v,b],[0,1,2]]]]).test(167,[[n,equals4],[[[v, a], "|", [v, b]], [1, "|", 2]]],[],[[[[v, a], 1], [[v, b], 2]]]).test(168,[[n,function1],[[v,a],"|",[v,b]]],[        [[n,function1],[1,"|",2]]],[[[[v, a], 1], [[v, b], 2]]]).test(169,[[n,function1],[[v,a],[v,b]]],[        [[n,function1],[[v,a],[v,b]],":-",        [        [[n,equals4],[[[v,a],[v,a]],[[1,[v,b]],[1,1]]]]        ]]],[[[[v, a], [1,1]], [[v, b], 1]]]).
test(170,[[n,function1],[[v,a],[v,a]]],[        [[n,function1],[[1,[v,b]],[1,1]]]],[[[[v, a], [1,1]]]]).
test(171,[[n,function1],[[[]]]],[        [[n,function1],[[]]]],[]).
test(172,[[n,equals4],[[],[[]]]],[],[]).
test(173,[[n,equals4],[[[v,d],[v,d],[v,a],[v,b],[v,a]],[[v,e],[v,c],1,[v,c],[v,b]]]],[],[[[[v, a], 1], [[v, b], 1], [[v, c], 1], [[v, d], 1], [[v, e], 1]]]).
test(188,[[n,brackets1]],[[[n,brackets1],":-",[%[[n,true]],%[[[n,true]],[[n,true]]]%[[n,true]],[[[n,true]],%[[n,true]],[[[n,true]]%,[[n,trace2]]]]]]]      ,[[]]).test(189,[[n,brackets1]],[[[n,brackets1],":-",[[[n,true]]]]]      ,[[]]).
test(190,[[n,true]],[]      ,[[]]).
test(191,[[n,not1]],[[[n,not1],":-",[[[n,not],[[[n,member],["not",["would","you","like","a","walk"]]]]]]]]      ,[[]]).
test(193,[[n,findall1],[[[[1,2,3,4]]],[v,b]]],%[[[[1],[2]],[[3],[4]]],[v,b]]],%[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,true]],        [[n,findall],[[v,b1],[[[n,member],[[v,a1],[v,a]]],                [[n,findall],[[v,b2],[[[n,member],[[v,a2],[v,a1]]],                [[n,findall],[[v,a4],[[[n,member],[[v,a3],[v,a2]]],        [[n,+],[[v,a3],4,[v,a4]]]],                [v,b2]]]],                [v,b1]]]],                                [v,b]]]        ]]        ],[[[[v,b],[[[5,6,7,8]]]%[[[5],[6]],[[7],[8]]]%[[1,11,111],[2,22,222],[3,33,333]]]]]).test(194,[[n,cut1],[[v,a]]],%[[[[1],[2]],[[3],[4]]],[v,b]]],%[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[  [[n,cut1],[[v,a]],":-",  [[[n,findall],[[v,a1],[[[n,member],[[v,a1],[1,2]]]%,  %,[[n,cut]]  ],[v,a]]]]]        ],[[[[v,a],[1,2]%[[[5],[6]],[[7],[8]]]%[[1,11,111],[2,22,222],[3,33,333]]]]]).test(195,%[[n,or12],[[v,a]]],[[n,findall],[[v,b],[[[n,or12],[[v,b]]]],[v,a]]],[        [[n,or12],[1],":-",[[[n,true]]]],        [[n,or12],[2],":-",[[[n,fail]]]],        [[n,or12],[3],":-",[[[n,fail]]]]        ],[[[[v,a],[1]]]]).
test(196,%[[n,or12],[[v,a]]],[[n,findall],[[v,b],[[[n,or12],[[v,b]]]],[v,a]]],[        [[n,or12],[1]]                ],[[[[v,a],[1]]]]).
test(197,%[[n,or12],[[v,a]]],[[n,findall],[[v,b],[[[n,member],[[v,b],[1]]]],[v,a]]],[        ],[[[[v,a],[1]]]]).
test(198,[[n,function]],[[[n,function],":-",[[[n,not],[[[[n,false]],[[n,false]]]]],[[n,true]]]]],[[]]).test(199,[[n,function],[1,1,[v,a]]],[[[n,function],[[v,a],[v,b],[v,c]],":-",[[[[n,+],[[v,a],[v,b],[v,d]]],[[n,+],[[v,d],[v,d],[v,e]]]],[[n,-],[[v,e],[v,e],[v,c]]]]]],[[[[v,a],0]]]).test(200,[[n,function]],[[[n,function],":-",[[[n,or],[[[n,false]],[[n,true]]]],[[n,true]]]]],[[]]).
test(20,[[n,function],[1,1,[v,c]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                [[[n,+],[[v,a],[v,b],[v,c]]]]        ]        ]],[[[[v,c], 2]]]).%%test(21,[[n,grammar1],["john ate"]],test(21,[[n,grammar1],["ate",[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,lookahead],[[v,u],[v,t],"ate"]] %% 2 is endstring, 3 is what lookahead checks for  ]  ],/**    [[n,sentence],"->",  [[[n,subject]],  [[n,lookahead],["ate"]],  [[n,verb]]  ]],  [[n,verbphrase],"->",  [[[n,verb]]]],    [[n,subject],["",""]],  [[n,subject],"->",["john"," "]],  [[n,subject],[[v,a],[v,a]]],  [[n,object],["",""]],  [[n,object],"->",["apples"]],  [[n,object],[[v,a],[v,a]]],**/    [[n,lookahead],[[v,a],[v,a],[v,b]],":-",  [[[n,stringconcat],[[v,b],[v,d],[v,a]]]]]],[[[[v,t],"ate"]]]).
test(201,[[n,function]],[[[n,function],":-",[[[n,"->"],[[[n,true]],[[n,true]]]],[[n,true]]]]],[[]]).
test(202,[[n,function]],[[[n,function],":-",[[[n,"->"],[[[n,true]],[[n,true]],[[n,true]]]],[[n,true]]]]],[[]]).test(203,%a(%[[n,apply_all_to_all],[["m","vine"],[v,inventory4]]],%[[n,traverse],[2,6]], %2,8%[[n,apply_all_to_all],[["vine","c","k"],[v,inventory4]]],[%[[n,rainforest],[[[1,9,["*"]],[2,9,["*"]],[3,9,["*"]],[4,9,["*"]],[5,9,["*"]],[6,9,["*"]],[1,8,["*"]],[2,8,["m"]],[3,8,["vine"]],[4,8,[]],[5,8,[]],[6,8,["*"]],[1,7,["*"]],[2,7,["*"]],[3,7,["*"]],[4,7,["*"]],[5,7,["*"]],[6,7,["*"]]]]],[[n,rainforest],[[[1,9,[     ]],[2,9,[     ]],[3,9,["*"    ]],[4,9,["*"    ]],[5,9,["*"    ]], [1,8,[     ]],[2,8,["*"    ]],[3,8,[     ]],[4,8,[     ]],[5,8,["*"    ]], [1,7,[     ]],[2,7,["*"    ]],[3,7,[     ]],[4,7,["*"    ]],[5,7,[     ]], [1,6,["*"    ]],[2,6,[     ]],[3,6,["k"    ]],[4,6,["*"    ]],[5,6,["*"    ]], [1,5,["*"    ]],[2,5,[     ]],[3,5,[     ]],[4,5,["c"    ]],[5,5,["*"    ]], [1,4,[     ]],[2,4,["*"    ]],[3,4,[     ]],[4,4,[     ]],[5,4,["*"    ]], [1,3,["*"    ]],[2,3,[     ]],[3,3,[     ]],[4,3,["*"    ]],[5,3,[     ]], [1,2,["*"    ]],[2,2,[     ]],[3,2,["vine"    ]],[4,2,["*"    ]],[5,2,[     ]], [1,1,[     ]],[2,1,["*"    ]],[3,1,["*"    ]],[4,1,["*"    ]],[5,1,[     ]]]]],[[n,traverse],[[v,x],[v,y]],":-",[[[n,"->"],[[[n,traverse],[[v,x],[v,y],[],[v,c],[],[v,a],"no",[v,b]]],[[[n,true]]],[[[n,false]]]]]%,%,[[n,cut]]]],[[n,traverse],[[v,'_x'],[v,'_y'],[v,explored],[v,explored],[v,inventory],[v,inventory],[v,e],[v,e]],":-",[[[n,"->"],[[[n,equals4],[[v,e],"e"]],[[n,true]],[[n,fail]]]]%,%,[[n,cut]]]],[[n,traverse],[[v,x],[v,y],[v,explored1],[v,explored2],[v,inventory1],[v,inventory2],[v,e1],[v,e2]],":-",[[[n,rainforest],[[v,map]]],[[n,member],[[[v,x],[v,y],[v,cell]],[v,map]]],[[n,"->"],[[[n,"->"],[[[n,equals4],[[v,cell],["*"]]],[[[n,true]]],[[[n,member],[[[v,x],[v,y]],[v,explored1]]]]]],[[[[n,equals4],[[v,explored1],[v,explored2]]],[[n,equals4],[[v,inventory1],[v,inventory2]]],[[n,=],[[v,e2],[v,e1]]]%,[[n,cut]] speeds up in ssi but crashes lpi]],[[[[n,writeln],[[[v,x],[v,y]]]],[[n,"->"],[[[n,equals4],[[v,cell],[]]],[[[n,equals4],[[v,inventory4a],[v,inventory1]]]],[[[[n,equals4],[[v,cell],[[v,item]]]],[[n,append],[[v,inventory1],[[v,item]],[v,inventory3]]],[[n,apply_all_to_all],[[v,inventory3],[v,inventory4]]],[[n,equals4],[[v,inventory4a],[v,inventory4]]]]]]],[[n,writeln],[[v,inventory4a]]],[[n,"->"],[[[n,member],["e",[v,inventory4a]]],[[[[n,writeln],["Game Over"]],[[n,equals4],[[v,explored1],[v,explored2]]],[[n,equals4],[[v,inventory2],[v,inventory4a]]],[[n,=],[[v,e2],"e"]]%,%,[[n,cut]]%,[[n,trace]]]],[[[[n,append],[[v,explored1],[[[v,x],[v,y]]],[v,explored3]]],[[n,-],[[v,x],1,[v,xm1]]],[[n,-],[[v,y],1,[v,ym1]]],[[n,+],[[v,x],1,[v,xp1]]],[[n,+],[[v,y],1,[v,yp1]]],[[n,traverse],[[v,xm1],[v,y],[v,explored3],[v,explored4],[v,inventory4a],[v,inventory5],[v,e1],[v,e3]]],[[n,traverse],[[v,x],[v,ym1],[v,explored4],[v,explored5],[v,inventory5],[v,inventory6],[v,e3],[v,e4]]],[[n,traverse],[[v,xp1],[v,y],[v,explored5],[v,explored6],[v,inventory6],[v,inventory7],[v,e4],[v,e5]]],[[n,traverse],[[v,x],[v,yp1],[v,explored6],[v,explored2],[v,inventory7],[v,inventory2],[v,e5],[v,e2]]]]]]]]]]]%,[[n,cut]]]],[[n,apply_all_to_all],[[v,inventory1],[v,inventory2]],":-",[%[[n,trace2]],[[n,findall],[[v,item3],[[[n,member],[[v,item1],[v,inventory1]]],[[n,member],[[v,item2],[v,inventory1]]],[[n,not],[[[[n,equals4],[[v,item1],[v,item2]]]]]],[[n,apply],[[v,item1],[v,item2],[v,item3]]],[[n,not],[[[[n,member],[[v,item3],[v,inventory1]]]]]]],[v,addeditems]]],[[n,"->"],[[[n,equals4],[[v,addeditems],[]]],[[[n,equals4],[[v,inventory1],[v,inventory2]]]],[[[[n,append],[[v,inventory1],[v,addeditems],[v,inventory3]]],[[n,apply_all_to_all],[[v,inventory3],[v,inventory2]]]]]]]%,[[n,cut]]]],[[n,apply],["k","c","m"]],[[n,apply],["m","vine","e"]]],[[]]).
test(204,[[n,function]],[[[n,function],":-",[[[n,writeln],["Hello World!"]]]]],[[]]).test(205,[[n,findall1],[[[1,2],[1,4]],[v,b]]],%[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[v,b1],[[[n,member],[[v,a1],[v,a]]],                [[n,findall],[[v,a2],[[[n,member],[[v,a2],[v,a1]]],        %[[n,+],[[v,a2],5,[v,a3]]],        %[[n,/],[[v,a3],2,[v,a4]]],        %[[n,ceiling],[[v,a4],[v,a5]]],        [[n,equals4],[[v,a2],1]]        ],                [v,b1]]]],                                [v,b]]]        ]]        ],[[[[v,b],[[1],[1]]%[[1,11,111],[2,22,222],[3,33,333]]]]]).test(206,%[[n,or12],[[v,a]]],[[n,findall],[[v,b],[[[n,or12],[1,[v,b]]]],[v,a]]],[        [[n,or12],[1,1]],        [[n,or12],[2,2]],        [[n,or12],[1,3]]        ],[[[[v,a],[1,3]]]]).
test(218,[[n,member],[[1,2],[v,a]]],[],[[[[v,a],1]]]).
test(219,[[n,a],[[v,a]]],[[[n,a],[[v,a]],":-",[[[n,b],[[v,a]]]]],[[n,b],[empty],":-",[[[n,true]]]]%[[n,b],[2],":-",[[[n,true]]]]],],[[[[v,a],empty]]]).*/test(217,%a(% x[[n,apply_all_to_all],[["m","vine"],[v,inventory4]]],%[[n,traverse],[2,6]], %2,8 or 2,6%[[n,apply_all_to_all],[["k","c","m","vine"],[v,inventory4]]],%[[n,traverse],[3,9,empty,empty,empty,empty]],[/*[[n,rainforest],[[[1,9,["*"]],[2,9,["*"]],[3,9,["*"]],[4,9,["*"]],[5,9,["*"]],[6,9,["*"]],[7,9,["*"]],[1,8,["*"]],[2,8,["k"]],[3,8,["c"]],[4,8,["vine"]],[5,8,[]],[6,8,[]],[7,8,["*"]],[1,7,["*"]],[2,7,["*"]],[3,7,["*"]],[4,7,["*"]],[5,7,["*"]],[6,7,["*"]],[7,7,["*"]]]]],*/%/*[[n,rainforest],[[[1,9,[     ]],[2,9,[     ]],[3,9,["*"    ]],[4,9,["*"    ]],[5,9,["*"    ]], [1,8,[     ]],[2,8,["*"    ]],[3,8,[     ]],[4,8,[     ]],[5,8,["*"    ]], [1,7,[     ]],[2,7,["*"    ]],[3,7,[     ]],[4,7,["*"    ]],[5,7,[     ]], [1,6,["*"    ]],[2,6,[     ]],[3,6,["k"    ]],[4,6,["*"    ]],[5,6,["*"    ]], [1,5,["*"    ]],[2,5,[     ]],[3,5,[     ]],[4,5,["c"    ]],[5,5,["*"    ]], [1,4,[     ]],[2,4,["*"    ]],[3,4,[     ]],[4,4,[     ]],[5,4,["*"    ]], [1,3,["*"    ]],[2,3,[     ]],[3,3,[     ]],[4,3,["*"    ]],[5,3,[     ]], [1,2,["*"    ]],[2,2,[     ]],[3,2,["vine"    ]],[4,2,["*"    ]],[5,2,[     ]], [1,1,[     ]],[2,1,["*"    ]],[3,1,["*"    ]],[4,1,["*"    ]],[5,1,[     ]]]]],%*/[[n,traverse],[[v,x],[v,y]],":-",[[[n,"->"],[[[n,traverse],[[v,x],[v,y],[],[v,c],[],[v,a],"no",[v,b]]],[[[n,true]]],[[[n,false]]]]]%,%[[n,cut]]]],[[n,traverse],[[v,'_x'],[v,'_y'],[v,explored],[v,explored],[v,inventory],[v,inventory],[v,e],[v,e]],":-",[[[n,"->"],[[[n,equals4],[[v,e],"e"]],[[n,true]],[[n,fail]]]]%,%[[n,cut]]]],[[n,traverse],[[v,x],[v,y],[v,explored1],[v,explored2],[v,inventory1],[v,inventory2],[v,e1],[v,e2]],":-",[[[n,rainforest],[[v,map]]],[[n,member],[[[v,x],[v,y],[v,cell]],[v,map]]],[[n,"->"],[[[n,"->"],[[[n,equals4],[[v,cell],["*"]]],[[[n,true]]],[[[n,member],[[[v,x],[v,y]],[v,explored1]]]]]],[[[[n,equals4],[[v,explored1],[v,explored2]]],[[n,equals4],[[v,inventory1],[v,inventory2]]],[[n,=],[[v,e2],[v,e1]]]]],[[[[n,writeln],[[[v,x],[v,y]]]],[[n,"->"],[[[n,equals4],[[v,cell],[]]],[[[n,equals4],[[v,inventory4a],[v,inventory1]]]],[[[[n,equals4],[[v,cell],[[v,item]]]],[[n,append],[[v,inventory1],[[v,item]],[v,inventory3]]],[[n,apply_all_to_all],[[v,inventory3],[v,inventory4]]],[[n,equals4],[[v,inventory4a],[v,inventory4]]]]]]],[[n,writeln],[[v,inventory4a]]],[[n,"->"],[[[n,member],["e",[v,inventory4a]]],[[[[n,writeln],["Game Over"]],[[n,equals4],[[v,explored1],[v,explored2]]],[[n,equals4],[[v,inventory2],[v,inventory4a]]],[[n,=],[[v,e2],"e"]]%,%,[[n,trace]]]],[[[[n,append],[[v,explored1],[[[v,x],[v,y]]],[v,explored3]]],[[n,-],[[v,x],1,[v,xm1]]],[[n,-],[[v,y],1,[v,ym1]]],[[n,+],[[v,x],1,[v,xp1]]],[[n,+],[[v,y],1,[v,yp1]]],[[n,traverse],[[v,xm1],[v,y],[v,explored3],[v,explored4],[v,inventory4a],[v,inventory5],[v,e1],[v,e3]]],[[n,traverse],[[v,x],[v,ym1],[v,explored4],[v,explored5],[v,inventory5],[v,inventory6],[v,e3],[v,e4]]],[[n,traverse],[[v,xp1],[v,y],[v,explored5],[v,explored6],[v,inventory6],[v,inventory7],[v,e4],[v,e5]]],[[n,traverse],[[v,x],[v,yp1],[v,explored6],[v,explored2],[v,inventory7],[v,inventory2],[v,e5],[v,e2]]]]]]]]]]]]],[[n,apply_all_to_all],[[v,inventory1],[v,inventory2]],":-",[[[n,findall],[[v,item3],[[[n,member],[[v,item1],[v,inventory1]]],[[n,member],[[v,item2],[v,inventory1]]],[[n,not],[[[[n,equals4],[[v,item1],[v,item2]]]]]],[[n,apply],[[v,item1],[v,item2],[v,item3]]],[[n,not],[[[[n,member],[[v,item3],[v,inventory1]]]]]]],[v,addeditems]]],[[n,"->"],[[[n,equals4],[[v,addeditems],[]]],[[[n,equals4],[[v,inventory1],[v,inventory2]]]],[[[[n,append],[[v,inventory1],[v,addeditems],[v,inventory3]]],[[n,apply_all_to_all],[[v,inventory3],[v,inventory2]]]]]]]]],[[n,apply],["k","c","m"]],[[n,apply],["m","vine","e"]]],[[]]%[[[[v,inventory4],["k","c","m","vine","e"]]]]).test(218,[[n,findall1],[[[1,2],[3,4]],[v,b]]],%[[[1,11,111],[2,22,222],[3,33,333]],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[v,b1],[[[n,member],[[v,a1],[v,a]]],                [[n,findall],[[v,a3],[[[n,member],[[v,a2],[v,a1]]],        [[n,a],[[v,a2],[v,a3]]]],                [v,b1]]]],                                [v,b]]]        ]],                [[n,a],[1,6]],        [[n,a],[2,7]],        [[n,a],[3,8]],        [[n,a],[4,9]]        ],[[[[v,b],[[6,7],[8,9]]%[[1,11,111],[2,22,222],[3,33,333]]]]]).
test(221,[[n,stringconcat],["a","b",[v,a]]],[],[[[[v,a],"ab"]]]).
test(222,[[n,stringconcat],["a",[v,a],"ab"]],[],[[[[v,a],"b"]]]).
test(223,[[n,stringconcat],[[v,a],"b","ab"]],[],[[[[v,a],"a"]]]).test(224,[[n,append],[["a"],["b"],["a","b"]]],[],[[]]).
test(225,[[n,append],[["a"],["b"],[v,a]]],[],[[[[v,a],["a","b"]]]]).test(226,[[n,append],[["a"],[v,a],["a","b"]]],[],[[[[v,a],["b"]]]]).
test(227,[[n,append],[[v,a],["b"],["a","b"]]],[],[[[[v,a],["a"]]]]).test(228,[[n,findall],[[[v,a],[v,b]],[[n,append],[[v,a],[v,b],["a","b","c"]]],[v,c]]],[],[[[[v,c],[[[],["a","b","c"]],[["a"],["b","c"]],[["a","b"],["c"]],[["a","b","c"],[]]]]]]).test(229,[[n,findall],[[v,a],[[n,member],[[v,a],["a","b"]]],[v,c]]],[],[[[[v,c],["a","b"]]]]).
test(230,[[n,append],[["a"],[v,a],[v,b]]],[],[[[[v,b],["a","|",[v,_]]]]]).
test(231,[[n,findall],[[[v,a],[v,c]],[[n,append],[[v,a],["a","b"],[v,c]]],[v,d]]],[],[[[[v,d],[[[],["a","b"]],[[[v,_]],[[v,_],"a","b"]],[[[v,_],[v,_]],[[v,_],[v,_],"a","b"]],[[[v,_],[v,_],[v,_]],[[v,_],[v,_],[v,_],"a","b"]],[[[v,_],[v,_],[v,_],[v,_]],[[v,_],[v,_],[v,_],[v,_],"a","b"]],[[[v,_],[v,_],[v,_],[v,_],[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],"a","b"]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a","b"]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a","b"]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a","b"]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a","b"]]]]]]).test(232,[[n,member],["a",["a","b"]]],[],[[]]).test(233,[[n,findall],[[v,a],[[n,member],["a",[v,a]]],[v,d]]],[],[[[[v,d],[["a","|",[v,_]],[[v,_],"a","|",[v,_]],[[v,_],[v,_],"a","|",[v,_]],[[v,_],[v,_],[v,_],"a","|",[v,_]],[[v,_],[v,_],[v,_],[v,_],"a","|",[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],"a","|",[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a","|",[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a","|",[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a","|",[v,_]],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a","|",[v,_]]]]]]).test(234,[[n,member],[[v,a],["a","b"]]],[],[[[[v,a],"a"]]]).test(235,[[n,findall],[[[v,a],[v,b]],[[n,member],[[v,b],[v,a]]],[v,d]]],[],[[[[v,d],[[[v,_],[[v,_],"|",[v,_]]],[[v,_],[[v,_],[v,_],"|",[v,_]]],[[v,_],[[v,_],[v,_],[v,_],"|",[v,_]]],[[v,_],[[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]]]]]]).test(236,[[n,findall],[[[v,a],[v,b],[v,c]],[[n,append],[[v,a],["a"],[[v,b],"|",[v,c]]]],[v,d]]],[],[[[[v,d],[[[],"a",[]],[[[v,_]],[v,_],["a"]],[[[v,_],[v,_]],[v,_],[[v,_],"a"]],[[[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],"a"]],[[[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],"a"]],[[[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],"a"]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],"a"]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a"]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a"]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"a"]]]]]]).
test(237,[[n,findall],[[[v,a],[v,b],[v,c]],[[n,append],[[v,a],["b",[v,b]],[v,c]]],[v,d]]],[],[[[[v,d],[[[],[v,_],["b",[v,_]]],[[[v,_]],[v,_],[[v,_],"b",[v,_]]],[[[v,_],[v,_]],[v,_],[[v,_],[v,_],"b",[v,_]]],[[[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],"b",[v,_]]],[[[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],"b",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],"b",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"b",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"b",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"b",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"b",[v,_]]]]]]]).
test(238,[[n,findall],[[[v,a],[v,b],[v,c]],[[n,append],[[v,a],[v,b],[v,c]]],[v,d]]],[],[[[[v,d],[[[],[v,_],[v,_]],[[[v,_]],[v,_],[[v,_],"|",[v,_]]],[[[v,_],[v,_]],[v,_],[[v,_],[v,_],"|",[v,_]]],[[[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],"|",[v,_]]],[[[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]],[[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_]],[v,_],[[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],[v,_],"|",[v,_]]]]]]]).
test(239,[[n,append],[[v,a],["b",[v,b]],[[v,c]]]],[],[]).
test(240,[[n,append],[[v,a],["b"],[[v,c]]]],[],[[[[v,a],[]],[[v,c],"b"]]]).
test(242,%[[n,reverse1],[[v,d],[empty,empty,empty],[3,2,1]]],%[[n,append1],[[v,a],[],[1,2,3]]],[[[n,append1],[[],[v,a],[v,a]],":-",[[[n,cut]]]],[[n,append1],[[[v,a],"|",[v,d]],[v,b],[[v,a],"|",[v,c]]],":-",[[[n,append1],[[v,d],[v,b],[v,c]]],[[n,cut]]]]],[[[[v,a],[1,2,3]]]]).test(243,[[n,back_propagate],[[v,a]]],[[[n,back_propagate],[[v,a]],":-",[[[n,equals4],[[v,a],[v,b]]],[[n,equals4],[[v,b],1]]]]],[[[[v,a],1]]]).
test(248,[[n,test],[[v,b]]],[[[n,test],[[v,b]],":-",[[[n,findall],[[v,a],[[n,"->"],[[[[n,member],[[1,2],[v,a]]]%,[[n,cut]]],[[n,writeln],["1"]],[[n,writeln],["2"]]]],[v,b]]]]]],[[[[v,b],[1]]]]).
test(249,[[n,function],[1,2]],[        [[n,function],[[v,'_'],[v,'_']]]],[[]])./*test(250,[[n,function],[[v,a]]],[        [[n,function],[[v,a]],":-",        [                [[n,not],[[n,false]                ]]        ]        ]],[[]]).
test(250,[[n,a]],[[[n,a],":-",[[[[n,member3],[[[v,function],"|",[[v,typestatements2]]],[v,typestatements1]]],[[n,member3],[[[v,function],"|",[[v,modestatements2]]],[v,modestatements1]]],[[n,extract_modes1],[[v,typestatements2],[v,typestatements3],[v,vars1],[v,vars2],[v,modestatements2]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[v,function],[v,vars2]]]],[[n,true]]]],[[n,"->"],[[[[n,checktypes1],[[v,vars2],[v,typestatements3],[v,typestatements3],[v,typestatements1]]]],[[[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[v,function],[v,vars2]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_exit],[[[v,function],"/","~",[v,l],[v,input_type_check]]]]],[[n,true]]]]]],[[[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[v,function],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_fail],[[[v,function],"/","~",[v,l],[v,input_type_check]]]]],[[n,true]]]]]]]]]]]],[[]]).
test(251,[[n,a]],[[[n,checktypes1],[[v,vars1],[v,typestatements1],[v,typestatements2],[v,typestatements4]],":-",[[[[n,not],[[[n,=],[[v,type],[v,dbw_list]]]]],[[n,not],[[[n,=],[[v,type],[v,dbw_brackets]]]]]],[[n,not],[[[n,=],[[v,type],[v,dbw_list]]]]]]]],[[]]).
test(253,[[n,a]],[[[n,checktypes1],[[v,vars1],[v,typestatements1],[v,typestatements2],[v,typestatements4]],":-",[[[n,"->"],[[[n,types],["on"]],[[n,checktypes0_inputs],[[v,function],[v,vars1],[v,typestatements1],[v,modestatements1]]],[[n,true]]]]]]],[[]]).
test(28,[[n,number11],[1]],[        [[n,number11],[[v,a]],":-",        [       [[n,number],[[v,a]]]        ]]        ],[[]]).test(29,[[n,minus11],[[1,2,3],[3],[v,c]]],[        [[n,minus11],[[v,a],[],[v,a]]],        [[n,minus11],[[v,a],[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,h]]],                [[n,tail],[[v,b],[v,t]]],                [[n,delete],[[v,a],[v,h],[v,c]]],                [[n,minus11],[[v,c],[v,t],[v,c]]]        ]]        ],[[[[v,c],[1,2]]]]).
test(29,[[n,minus11],[[1,2,3],[3],[v,c]]],[        [[n,minus11],[[v,a],[],[v,a]]],        [[n,minus11],[[v,a],[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,h]]],                [[n,tail],[[v,b],[v,t]]],                [[n,delete],[[v,a],[v,h],[v,c]]],                [[n,minus11],[[v,c],[v,t],[v,c]]]        ]]        ],[[[[v,c],[1,2]]]]).test(30,[[n,if11],[1,[v,b]]],[        [[n,if11],[[v,a],[v,b]],":-",        [       [[n,"->"],[[[n,is],[[v,a],1]],                [[n,is],[[v,b],2]],                [[n,is],[[v,b],3]]]]        ]]        ],[[[[v,b],2]]]).test(31,[[n,not11],[1]],[        [[n,not11],[[v,a]],":-",        [       [[n,not],[[[n,=],[[v,a],2]]]]        ]]        ],[[]]).test(32,[[n,or11],[1]],[        [[n,or11],[[v,a]],":-",        [       [[n,or],[[[n,is],[[v,a],1]],                [[n,is],[[v,a],2]]]]        ]]        ],[[]]).
test(30,[[n,if11],[1,[v,b]]],[        [[n,if11],[[v,a],[v,b]],":-",        [       [[n,"->"],[[[n,is],[[v,a],1]],                [[n,is],[[v,b],2]],                [[n,is],[[v,b],3]]]]        ]]        ],[[[[v,b],2]]]).
test(32,[[n,or11],[1]],[        [[n,or11],[[v,a]],":-",        [       [[n,or],[[[n,is],[[v,a],1]],                [[n,is],[[v,a],2]]]]        ]]        ],[[]]).
test(33,[[n,downpipe],[3,1,[[3,[4,2]],[2,[3,1]]]]],[        [[n,downpipe],[[v,a],[v,a],[v,b]]],        [[n,downpipe],[[v,a],[v,b],[v,c]],":-",        [       [[n,member2],[[v,c],[v,c1]]],                [[n,equals1],[[v,c1],[[v,a],[v,c12]]]],                [[n,equals1],[[v,c12],[[v,c121],[v,c122]]]],                [[n,"->"],[[[n,>],[[v,a],[v,c121]]],                [[n,downpipe],[[v,c121],[v,b],[v,c]]],                [[n,"->"],[[[n,>],[[v,a],[v,c122]]],                        [[n,downpipe],[[v,c122],[v,b],[v,c]]],                        [[n,fail]]]]]]        ]]        ],[[]]).
test(33,[[n,downpipe],[3,1,[[3,[4,2]],[2,[3,1]]]]],[        [[n,downpipe],[[v,a],[v,a],[v,b]]],        [[n,downpipe],[[v,a],[v,b],[v,c]],":-",        [       [[n,member],[[v,c1],[v,c]]],                [[n,equals4],[[v,c1],[[v,a],[v,c12]]]],                [[n,equals4],[[v,c12],[[v,c121],[v,c122]]]],                [[n,"->"],[[[n,>],[[v,a],[v,c121]]],                [[n,downpipe],[[v,c121],[v,b],[v,c]]],                [[n,"->"],[[[n,>],[[v,a],[v,c122]]],                        [[n,downpipe],[[v,c122],[v,b],[v,c]]],                        [[n,fail]]]]]]        ]]        ],[[]]).%% Get item n, copies ittest(34,[[n,getitemn],[3,[1,2,3],[v,c]]],[        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]]        ],[[[[v,c],3]]]).%% A shell of LPI allows manipulation of variable order, testing for e.g. identical inverse%% commutative not identicaltest(35,[[n,identical],[1,2]],[        [[n,identical],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]],                [[n,+],[[v,b],[v,a],[v,c]]]        ]]        ],[[]]).
test(33,_,A,_),add_line_numbers_to_algorithm1(A,A2),writeln1(A2).            [[0,[n,downpipe],[[v,a],[v,a],[v,b]]],[1,[n,downpipe],[[v,a],[v,b],[v,c]],":-",[[0,[n,member2],[[v,c],[v,c1]]],[1,[n,equals1],[[v,c1]]],[2,[n,equals1],[[v,c12]]],[3,[n,"->"],[[4,[n,>],[[v,a],[v,c121]]],[5,[n,downpipe],[[v,c121],[v,b],[v,c]]],[6,[n,"->"],[[7,[n,>],[[v,a],[v,c122]]],[8,[n,downpipe],[[v,c122],[v,b],[v,c]]],[9,[n,fail]]]]]]]]]A=[[0,[n,downpipe],[[v,a],[v,a],[v,b]]],[1,[n,downpipe],[[v,a],[v,b],[v,c]],":-",[[0,[n,member2],[[v,c],[v,c1]]],[1,[n,equals1],[[v,c1]]],[2,[n,equals1],[[v,c12]]],[3,[n,"->"],[[4,[n,>],[[v,a],[v,c121]]],[5,[n,downpipe],[[v,c121],[v,b],[v,c]]],[6,[n,"->"],[[7,[n,>],[[v,a],[v,c122]]],[8,[n,downpipe],[[v,c122],[v,b],[v,c]]],[9,[n,fail]]]]]]]]],                                                     find_state_machine1(A,B),writeln1(B).
test(36,[[n,associative],[1,2,3]],[        [[n,associative],[[v,a],[v,b],[v,c]],":-",        [       [[n,*],[[v,a],[v,b],[v,d]]],                [[n,*],[[v,d],[v,c],[v,e]]],                [[n,*],[[v,b],[v,c],[v,f]]],                [[n,*],[[v,f],[v,a],[v,e]]]        ]]        ],[[]]).%% audience sizetest(37,[[n,length1],[[1],0,[v,l]]],[        [[n,length1],[[],[v,l],[v,l]]],        [[n,length1],[[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,tail],[[v,l],[v,t]]],                [[n,+],[[v,m1],1,[v,m2]]],                [[n,length1],[[v,t],[v,m2],[v,n]]]        ]        ]],[[[[v,l], 1]]]).%% Are their differences equal?test(38,[[n,optimise1],[[[5,4],[3,2],[1,0]],[v,d]]],[        [[n,optimise1],[[v,a],[v,b]],":-",        [       [[n,head],[[v,a],[v,h]]],                [[n,tail],[[v,a],[v,t]]],                [[n,equals1],[[v,h],[[v,h1],[v,h2]]]],                [[n,-],[[v,h1],[v,h2],[v,b]]],                [[n,"->"],[[[n,not],[[[n,=],[[v,t],[]]]]],                [[n,optimise1],[[v,t],[v,b]]],                [[n,true]]]]        ]]        ],[[[[v,d], 1]]]).test(39,[[n,member1a],[1,[1,2]]],[[[n,member1a],[[v,i1],[v,l]], ":-",[[[n,intersection2],[[v,i1],[v,l],[],[v,m]]]]],[[n,intersection2],[[v,a], [], [v,l], [v,l]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%[[n,intersection2],[[v,i1], [v,l4], [v,l5], [v,l3]]]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1], [v,l4], [v,l2], [v,l3]]]]]],[[]]).
test(40,[[n,minus1],[[1,2,3],[1,2],[v,a]]],[[[n,minus1],[[v,l], [], [v,l]]],[[n,minus1],[[v,l1], [v,l2], [v,l3]],":-",[[[n,head],[[v,l2],[v,i1]]],[[n,tail],[[v,l2],[v,l5]]],[[n,delete2],[[v,l1],[v,i1],[],[v,l6]]],[[n,minus1],[[v,l6], [v,l5], [v,l3]]]]],[[n,delete2],[[], [v,a], [v,l], [v,l]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l5]]],[[n,delete2],[[v,l5],[v,i1],[v,l2],[v,l3]]]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l5]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,wrap],[[v,i2],[v,i21]]],[[n,append],[[v,l2],[v,i21],[v,l6]]],[[n,delete2],[[v,l5],[v,i1],[v,l6],[v,l3]]]]]],[[[[v,a], [3]]]]).
test(41,[[n,part_of_string],[[1,2,3,4],[2,3]]],[        [[n,part_of_string],[[], []]],        [[n,part_of_string],[[],[v,b]],":-",             [[[n,not],[[[n,=],[[v,b],[]]]]],             [[n,fail]]]],        [[n,part_of_string],[[v,a],[v,b]],":-",                [[[n,tail],[[v,a],[v,at]]],                [[n,"->"],[[[n,listhead],[[v,a],[v,b]]],                        [[n,true]],                        [[n,part_of_string],[[v,at],[v,b]]]]]]],        [[n,listhead],[[v,l],[]]],        [[n,listhead],[[v,a],[v,b]],":-",                [[[n,head],[[v,a],[v,ah]]],                [[n,tail],[[v,a],[v,at]]],                [[n,head],[[v,b],[v,ah]]],                [[n,tail],[[v,b],[v,bt]]],                [[n,listhead],[[v,at],[v,bt]]]        ]]        ],[[]]).test(42,%[[n,or12],[[v,a]]],[[n,findall],[[v,b],[[[n,or12],[[v,b]]]],[v,a]]],[        [[n,or12],[1]],        [[n,or12],[2]]                ],[[[[v,a],[1,2]]]]).test(43,[[n,intersection1],[[1,2,3],[3,4,5],[],[v,a]]],[[[n,intersection1],[[], [v,a], [v,l], [v,l]]],[[n,intersection1],[[v,l1], [v,l2], [v,l3a], [v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,intersection2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,intersection1],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,intersection2],[[v,a], [], [v,l], [v,l]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%[[n,intersection2],[[v,i1], [v,l4], [v,l5], [v,l3]]]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1], [v,l4], [v,l2], [v,l3]]]]]],[[[[v,a], [3]]]]).test(44,[[n,delete2],[[1,1,2],1,[],[v,a]]],[[[n,delete2],[[], [v,a], [v,l], [v,l]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l5]]],[[n,delete2],[[v,l5],[v,i1],[v,l2],[v,l3]]]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l5]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,wrap],[[v,i2],[v,i21]]],[[n,append],[[v,l2],[v,i21],[v,l6]]],[[n,delete2],[[v,l5],[v,i1],[v,l6],[v,l3]]]]]],[[[[v,a], [2]]]]).
test(41,[[n,substring],[[1,2,3,4],[2,3]]],[        [[n,substring],[[], []]],        [[n,substring],[[],[v,b]],":-",             [[[n,not],[[[n,=],[[v,b],[]]]]],             [[n,fail]]]],        [[n,substring],[[v,a],[v,b]],":-",                [[[n,tail],[[v,a],[v,at]]],                [[n,"->"],[[[n,listhead],[[v,a],[v,b]]],                        [[n,true]],                        [[n,substring],[[v,at],[v,b]]]]]]],        [[n,listhead],[[v,l],[]]],        [[n,listhead],[[v,a],[v,b]],":-",                [[[n,head],[[v,a],[v,ah]]],                [[n,tail],[[v,a],[v,at]]],                [[n,head],[[v,b],[v,ah]]],                [[n,tail],[[v,b],[v,bt]]],                [[n,listhead],[[v,at],[v,bt]]]        ]]        ],[[]]).test(42,[[n,or12],[[v,a]]],[        [[n,or12],[1]],        [[n,or12],[2]]                ],[[[[v, a], 1]], [[[v, a], 2]]]).test(43,[[n,intersection1],[[1,2,3],[3,4,5],[],[v,a]]],[[[n,intersection1],[[], [v,a], [v,l], [v,l]]],[[n,intersection1],[[v,l1], [v,l2], [v,l3a], [v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,intersection2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,intersection1],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,intersection2],[[v,a], [], [v,l], [v,l]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l3]]]]],%%[[n,intersection2],[[v,i1], [v,l4], [v,l5], [v,l3]]]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1], [v,l4], [v,l2], [v,l3]]]]]],[[[[v,a], [3]]]]).test(44,[[n,delete2],[[1,1,2],1,[],[v,a]]],[[[n,delete2],[[], [v,a], [v,l], [v,l]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l5]]],[[n,delete2],[[v,l5],[v,i1],[v,l2],[v,l3]]]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l5]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,wrap],[[v,i2],[v,i21]]],[[n,append],[[v,l2],[v,i21],[v,l6]]],[[n,delete2],[[v,l5],[v,i1],[v,l6],[v,l3]]]]]],[[[[v,a], [2]]]]).
test(51,[[n,expressionnotheadache],["true",[v,c]]],[[[n,expressionnotheadache],["true","true"]],[[n,expressionnotheadache],[[v,a],"false"],":-",[[[n,not],[[[[n,=],[[v,a],"true"]]]]]]] ]       ,[[[[v,c], "true"]]]).
test(52,[[n,mainrole],[7,[v,c]]],[[[n,mainrole],[7,"mainrole"]],[[n,mainrole],[[v,shortcourses],"false"],":-",[[[n,not],[[[[n,=],[[v,shortcourses],7]]]]]]] ]       ,[[[[v,c], "mainrole"]]]).
test(54,[[n,function],[[[n,function2],[2]],1,1,[v,c]]],[        [[n,function],[[v,f1],[v,a],[v,b],[v,c]],":-",        [                [[n,equals1],[[v,f1],[[v,f11],[v,f12]]]],                [[n,getitemn],[1,[v,f12],[v,bb]]],                [[v,f11],[[v,bb],[v,d],[v,f]]],                [[n,+],[[v,a],[v,b],[v,e]]],                [[n,+],[[v,e],[v,f],[v,g]]],                [[n,+],[[v,g],[v,d],[v,c]]]        ]        ],        [[n,function2],[[v,bb],[v,a],[v,f]],":-",        [                [[n,is],[[v,a],[v,bb]]],                [[n,is],[[v,f],1]]        ]        ],        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]]],[[[[v,c], 5]]]).
test(55,[[n,test1],[[v,c]]],[[[n,test1],[1]],[[n,test2],[2]]],[[[[v, c], 1]]]).
test(56,[[n,map],[[n,add],[1,2,3],0,[v,d]]],[        [[n,map],[[v,f],[],[v,l],[v,l]]],        [[n,map],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[v,f],[[v,m1],[v,h],[v,m2]]],                [[n,map],[[v,f],[v,t],[v,m2],[v,n]]]        ]        ],        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]        ]],[[[[v,d], 6]]]).
test(56,[[n,map],[[n,add],[1,2,3],0,[v,d]]],[        [[n,map],[[v,f],[],[v,l],[v,l]]],        [[n,map],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[v,f],[[v,m1],[v,h],[v,m2]]],                [[n,map],[[v,f],[v,t],[v,m2],[v,n]]]        ]        ],        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]        ]],[[[[v,d], 6]]]).%% later: (test 58) omit if [v,f] failstest(57,[[n,findall],[[n,plusone],[1,2,3],[],[v,d]]],[        [[n,findall],[[v,f],[],[v,l],[v,l]]],        [[n,findall],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[v,f],[[v,h],[v,m2]]],                [[n,wrap],[[v,m2],[v,m3]]],                [[n,append],[[v,m1],[v,m3],[v,m4]]],                [[n,findall],[[v,f],[v,t],[v,m4],[v,n]]]        ]        ],        [[n,plusone],[[v,a],[v,c]],":-",        [       [[n,+],[[v,a],1,[v,c]]]        ]        ]],[[[[v,d], [2,3,4]]]]).
test(62,[[n,add],[[1],[2,3],[v,l]]],[        [[n,add],[[],[v,l],[v,l]]],        [[n,add],[[v,l],[v,m],[v,n]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,wrap],[[v,h],[v,h1]]],                [[n,append],[[v,h1],[v,m],[v,o]]],                [[n,add],[[v,t],[v,o],[v,n]]]        ]        ]],[[[[v, l], [1,2,3]]]]).
test(62,[[n,add],[[1],[2,3],[v,l]]],[        [[n,add],[[],[v,l],[v,l]]],        [[n,add],[[v,l],[v,m],[v,n]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,wrap],[[v,h],[v,h1]]],                [[n,append],[[v,h1],[v,m],[v,o]]],                [[n,add],[[v,t],[v,o],[v,n]]]        ]        ]],[[[[v, l], [1,2,3]]]]).test(63,[[n,add],[1,[v,b]]],[        [[n,add],[2,3]],        [[n,add],[1,[v,b]],":-",        [       [[n,add],[2,[v,b]]]]]],[[[[v, b], 3]]]).
test(63,[[n,add],[1,[v,b]]],[        [[n,add],[2,3]],        [[n,add],[1,[v,b]],":-",        [       [[n,add],[2,[v,b]]]]]],[[[[v, b], 3]]]).test(64,[[n,add0],[[1,2],[v,b]]],[     [[n,add2],[[v,a],[v,b]],":-",        [       [[n,=],[[v,a],[]]],                [[n,=],[[v,b],[]]]]],        [[n,add3],[[v,a],[v,b]],":-",        [       [[n,tail],[[v,a],[v,b]]]]],                [[n,add0],[[v,a],[v,b]],":-",        [       [[n,1],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]],                [[n,1],[[v,a],[v,b]],":-",        [       [[n,add2],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,add3],[[v,a],[v,c]]],                [[n,1],[[v,c],[v,d]]],                [[n,=],[[v,d],[v,b]]]]]],[[[[v, b], []]]]).test(65,[[n,add0],[[1],[v,b]]],[[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]]],[[[[v, b], []]]])./**%%[[1],[2,3],[1,2,3]]],[[],[1,2,3],[1,2,3]]]test(63,[[n,add],[1,2,[v,l]]],[        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]]],        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,-],[[v,a],[v,b],[v,c]]]]]],[[[[v, l], 3]], [[[v, l], -1]]]).test(64,[[n,add],[[1,2,3],3,[],[v,l],[v,t],[v,t],[v,th],[v,th],[v,o],[v,o]]],[        [[n,add],[[],[v,th],[v,l],[v,l],[v,t],[v,t],[v,th],[v,th],[v,o],[v,o]]],        [[n,add],[[v,l],[v,th],[v,m],[v,n],[v,t],[v,th],[v,o]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,+],[[v,h],[v,th],[v,h0]]],                [[n,wrap],[[v,h0],[v,h1]]],                [[n,append],[[v,m],[v,h1],[v,o]]],                [[n,add],[[v,t],[v,th],[v,o],[v,n],[v,t],[v,t],[v,th],[v,th],[v,o],[v,o]]]        ]        ]],[[[[v,l], [4,5,6]],[[v,t],888],[[v,th],888],[[v,o],888]]]).%% do separate i,o to group of last 3 vars%% separate i,otest(65,[[n,add3],[[v,a],[v,b]]],[[[n,add1],[1]],[[n,add2],[[v,a],[v,b]],":-",[       [[n,+],[[v,a],1,[v,b]]]]],[[n,add3],[[v,a],[v,b]],":-",[       [[n,+],[[v,a],1,[v,b]]]]],%% give functional function base case name as arg, which it can move around using cawp not cawmp%% fibonacci%% change back lpi, cawp verify**/test(66,[[n,addorsubtract1],[2,1,1]],[        [[n,addorsubtract1],[[v,a],[v,b],[v,c]],":-",        [       %%[[n,or],[[[n,addorsubtract2],[[v,a],[v,b],[v,c]]],        %%[[n,true]],        [[n,addorsubtract2],[[v,a],[v,b],[v,d]]],%%]        [[n,=],[[v,d],[v,c]]]        ]        ],        [[n,addorsubtract2],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,d]]],%%]        [[n,=],[[v,d],[v,c]]]        ]        ],        [[n,addorsubtract2],[[v,a],[v,b],[v,c]],":-",        [       [[n,-],[[v,a],[v,b],[v,d]]],%%]        [[n,=],[[v,d],[v,c]]]        ]        ]        ],[[]]).test(67,[[n,addorsubtract1],[2,1,1]],[        [[n,addorsubtract1],[[v,a],[v,b],[v,c]],":-",        [       [[n,or],[[[n,addorsubtract2],[[v,a],[v,b],[v,c]]],        %%[[n,true]],        [[n,addorsubtract3],[[v,a],[v,b],[v,c]]]]]        ]        ],        [[n,addorsubtract2],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]        ],        [[n,addorsubtract3],[[v,a],[v,b],[v,c]],":-",        [       [[n,-],[[v,a],[v,b],[v,c]]]        ]        ]        ],[[]]).test(68,[[n,addorsubtract1],[2,1,1]],[        [[n,addorsubtract1],[[v,a],[v,b],[v,c]],":-",        [       [[n,"->"],[[[n,addorsubtract2],[[v,a],[v,b],[v,c]]],        [[n,true]],        [[n,addorsubtract3],[[v,a],[v,b],[v,c]]]]]        ]        ],        [[n,addorsubtract2],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]        ],        [[n,addorsubtract3],[[v,a],[v,b],[v,c]],":-",        [       [[n,-],[[v,a],[v,b],[v,c]]]        ]        ]        ],[[]]).test(69,[[n,add0],[2,1]],[        [[n,add0],[[v,a],[v,b]],":-",[[[n,1],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,-],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]]],[[]]).test(70,[[n,add0],[1,2]],[                [[n,a2],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,a3],[[v,a],[v,b]],":-",        [       [[n,-],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,add0],[[v,a],[v,b]],":-",        [       [[n,1],[[v,a],[v,b]]]]],                [[n,1],[[v,a],[v,b]],":-",        [       [[n,a2],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,a3],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]]],[[]]).
test(67,[[n,addorsubtract1],[2,1,1]],[        [[n,addorsubtract1],[[v,a],[v,b],[v,c]],":-",        [       [[n,or],[[[n,addorsubtract2],[[v,a],[v,b],[v,c]]],        %%[[n,true]],        [[n,addorsubtract3],[[v,a],[v,b],[v,c]]]]]        ]        ],        [[n,addorsubtract2],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]        ],        [[n,addorsubtract3],[[v,a],[v,b],[v,c]],":-",        [       [[n,-],[[v,a],[v,b],[v,c]]]        ]        ]        ],[[]]).
test(69,[[n,add0],[2,1]],[        [[n,add0],[[v,a],[v,b]],":-",[[[n,1],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,-],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]]],[[]]).
test(70,[[n,add0],[1,2]],[                [[n,a2],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,a3],[[v,a],[v,b]],":-",        [       [[n,-],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,add0],[[v,a],[v,b]],":-",        [       [[n,1],[[v,a],[v,b]]]]],                [[n,1],[[v,a],[v,b]],":-",        [       [[n,a2],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[n,1],[[v,a],[v,b]],":-",        [       [[n,a3],[[v,a],[v,c]]],                [[n,=],[[v,c],[v,b]]]]]],[[]]).test(71,[[n,add0],[1,2]],[               [[n,add0],[[v,a],[v,b]],":-",        [       [[n,1],[[v,a],[v,b]]]]],                [[n,1],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]]],[[]]).
test(71,[[n,add0],[1,2]],[               [[n,add0],[[v,a],[v,b]],":-",        [       [[n,1],[[v,a],[v,b]]]]],                [[n,1],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]]],[[]]).
test(72,[[n,add0],[1,[v,b]]],[               [[n,add0],[[v,a],[v,b]],":-",        [       [[n,1],[[v,a],[v,b]]]]],                [[n,1],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]]],[[[[v,b],2]]]).
test(73,[[n,add0],[1,1,[v,c]]],[               [[n,add0],[[v,a],[v,b],[v,c]],":-",        [       [[n,1],[[v,a],[v,b],[v,c]]]]],                [[n,1],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,d]]],                [[n,=],[[v,d],[v,c]]]]]],[[[[v,c],2]]]).
test(74,[[n,add0],[[1,2],[v,c]]],[ %% Result[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,add0],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]]],[[[[v,c],[]]]]).
test(74,[[n,add0],[[1,2],[v,c]]],[ %% Result[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,add0],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]]],[[[[v,c],[]]]]).test(75,[[n,add0],[[],[v,c]]],[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,a],[v,b]]]]]],[[[[v,c],[]]]]).test(76,[[n,implies2],[1,[v,b]]],[        [[n,implies2],[[v,a],[v,b]],":-",        [       [[n,"->"],[[[n,is],[[v,a],1]],                [[n,is],[[v,b],2]]]]        ]]        ],[[[[v,b],2]]]).test(77,[[n,findall1],[[1,2,3],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[v,a1],[[n,member],[[v,a1],[v,a]]],                [v,b]]]        ]]        ],[[[[v,b],[1,2,3]]]]).
test(75,[[n,add0],[[],[v,c]]],[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,a],[v,b]]]]]],[[[[v,c],[]]]]).test(76,[[n,implies2],[1,[v,b]]],[        [[n,implies2],[[v,a],[v,b]],":-",        [       [[n,"->"],[[[n,is],[[v,a],1]],                [[n,is],[[v,b],2]]]]        ]]        ],[[[[v,b],2]]]).test(77,[[n,findall1],[[1,2,3],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[v,a1],[[n,member2],[[v,a],[v,a1]]],                [v,b]]]        ]]        ],[[[[v,b],[1,2,3]]]]).
test(8,[[n,grammar1],["apple"]],[  [[n,grammar1],[[v,s]],":-",  [   [[n,noun],[[v,s],""]]   ]  ],    [[n,noun],"->",["apple"]]],[[]]).
test(8,[[n,grammar1],["apple"]],[  [[n,grammar1],[[v,s]],":-",  [   [[n,noun],[[v,s],""]]   ]  ],    [[n,noun],"->",["apple"]]],[[]]).test(9,[[n,grammar1],["aaa"]],[  [[n,grammar1],[[v,s]],":-",  [   [[n,noun],[[v,s],""]]   ]  ],    [[n,noun],"->",[""]],  [[n,noun],"->",["a",[[n,noun]]]]],[[]]).
test(82,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],"|",[v,b]],[1,2,3,4]]]        ]]        ],[[[[v, a], 1], [[v, b], [2, 3, 4]]]]).
test(82,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],"|",[v,b]],[1,2,3,4]]]        ]]        ],[[[[v, a], 1], [[v, b], [2, 3, 4]]]]).test(83,[[n,equals41]],[        [[n,equals41],":-",        [       [[n,equals4],[[[v,a],[v,c],"|",[v,b],[v,d]],[1,2,3,4]]]        ]]        ],[]).
test(83,[[n,equals41]],[        [[n,equals41],":-",        [       [[n,equals4],[[[v,a],[v,c],"|",[v,b],[v,d]],[1,2,3,4]]]        ]]        ],[]).test(84,[[n,equals41],[[v,a],[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,c],[v,b]],":-",        [       [[n,equals4],[[[[v,a]],[v,c],"|",[v,b]],[[1],2,3,4]]]        ]]        ],[[[[v, a], 1], [[v, c], 2], [[v, b], [3, 4]]]]).test(85,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],"|",[v,b]],[[1,2],3,4]]]        ]]        ],[[[[v, a], [1, 2]], [[v, b], [3, 4]]]]).
test(84,[[n,equals41],[[v,a],[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,c],[v,b]],":-",        [       [[n,equals4],[[[[v,a]],[v,c],"|",[v,b]],[[1],2,3,4]]]        ]]        ],[[[[v,a],1],[[v,b],[3,4]],[[v,c],2]]]).test(85,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],"|",[v,b]],[[1,2],3,4]]]        ]]        ],[[[[v, a], [1, 2]], [[v, b], [3, 4]]]]).test(86,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],"|",[[v,b]]],[1,2]]]        ]]        ],[[[[v, a], 1], [[v, b], 2]]]).test(87,[[n,equals41],[[v,a]]],[        [[n,equals41],[[v,a]],":-",        [       [[n,equals4],[[[v,a]],[1]]]        ]]        ],[[[[v, a], 1]]]).test(88,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],[v,b]],[1,2]]]        ]]        ],[[[[v, a], 1], [[v, b], 2]]]).test(89,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],[v,b]],[[1,3],2]]]        ]]        ],[[[[v, a], [1, 3]], [[v, b], 2]]]).
test(86,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],"|",[[v,b]]],[1,2]]]        ]]        ],[[[[v, a], 1], [[v, b], 2]]]).test(87,[[n,equals41],[[v,a]]],[        [[n,equals41],[[v,a]],":-",        [       [[n,equals4],[[[v,a]],[1]]]        ]]        ],[[[[v, a], 1]]]).test(88,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],[v,b]],[1,2]]]        ]]        ],[[[[v, a], 1], [[v, b], 2]]]).test(89,[[n,equals41],[[v,a],[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[[v,a],[v,b]],[[1,3],2]]]        ]]        ],[[[[v, a], [1, 3]], [[v, b], 2]]]).
test(9,[[n,grammar1],["aaa"]],[  [[n,grammar1],[[v,s]],":-",  [   [[n,noun],[[v,s],""]]   ]  ],    [[n,noun],"->",[""]],  [[n,noun],"->",["a",[[n,noun]]]]],[[]]).test(10,[[n,grammar1],["aa",[v,t]]],[  [[n,grammar1],[[v,s],[v,t]],":-",  [   [[n,noun],[[v,s],"",[v,t]]]   ]  ],    [[n,noun],["b"],"->",[""]],  [[n,noun],[[v,t]],"->",["a",[[n,noun],[[v,t]]]]]],[[[[v,t],"b"]]]).test(11,[[n,grammar1],["aa",[v,t],[v,u]]],[  [[n,grammar1],[[v,s],[v,t],[v,u]],":-",  [   [[n,noun],[[v,s],"",[v,t],[v,u]]]   ]  ],    [[n,noun],["b","c"],"->",[""]],  [[n,noun],[[v,t],[v,u]],"->",["a",[[n,noun],[[v,t],[v,u]]]]]],[[[[v,t],"b"],[[v,u],"c"]]]).test(12,[[n,grammar1],["aa"]],[  [[n,grammar1],[[v,s]],":-",  [   [[n,noun],[[v,s],""]]  ]  ],  [[n,noun],"->",[""]],  [[n,noun],"->",["a",[[n,noun]]]]],[[]]).test(13,[[n,grammar1],["[a,a]",[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,compound],[[v,u],"",[],[v,t]]]  ]  ],  [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound],[[v,t],[v,u]],"->",  ["[",[[n,compound21],[[v,t],[v,v]]],"]",  [[n,compound213],[[v,v],[v,u]]]]],  [[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,u],[v,u],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,a]],  [[n,code],[[n,wrap],["a",[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,a]],",",  [[n,compound21],[[],[v,compound1name]]],  [[n,code],[[n,wrap],["a",[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]],  [[n,append],[[v,v],[v,compound1name],[v,u]]]]]],  [[n,compound212],[[v,a],[v,a],[v,t],[v,t]]],  [[n,a],["",""]],  [[n,a],"->",["a"]],    [[n,a],[[v,a],[v,a]]]],[[[[v,t],["a","a"]]]]).test(14,[[n,grammar1],["[a]",[v,t]]],[  [[n,grammar1],[[v,u],[v,t]],":-",  [   [[n,compound],[[v,u],"",[],[v,t]]]  ]  ],  [[n,compound213],["","",[v,t],[v,t]]],  [[n,compound213],[[v,a],[v,a],[v,t],[v,t]]],  [[n,compound],[[v,t],[v,u]],"->",  ["[",[[n,compound21],[[v,t],[v,v]]],"]",  [[n,compound213],[[v,v],[v,u]]]]],    [[n,compound212],["","",[v,t],[v,t]]],  [[n,compound212],[[v,a],[v,a],[v,t],[v,t]]],  [[n,compound21],[[v,t],[v,u]],"->",  [[[n,a]],  [[n,code],[[n,wrap],["a",[v,itemname1]]],  [[n,append],[[v,t],[v,itemname1],[v,v]]]],  [[n,compound212],[[v,v],[v,u]]]]],    [[n,a],["",""]],  [[n,a],"->",["a"]],  [[n,a],[[v,a],[v,a]]]],[[[[v,t],["a"]]]]).
test(91,[[n,equals41],[[1,2,3]]],[        [[n,equals41],[[v,a]],":-",        [       [[n,equals4],[[v,a],[1,2,3]]]        ]]        ],[[]]).test(92,[[n,equals41],[[v,a],[v,b],[v,d]]],[        [[n,equals41],[[v,a],[v,b],[v,d]],":-",        [       [[n,equals4],[[[v,a],"|",[[v,b],"|",[v,d]]],[1,2,3,4]]]        ]]        ],[[[[v, a], 1], [[v, b], 2],[[v, d], [3,4]]]]).
test(93,[[n,maplist1],[[[1],[2],[3]],[v,b]]],[        [[n,maplist1],[[v,a],[v,b]],":-",        [       [[n,maplist],[[n,append],[v,a],[],[v,b]]]        ]]        ],[[[[v,b],[1,2,3]]]]).
test(94,[[n,maplist1],[[[[1]],[[2]],[[3]]],[v,b]]],[        [[n,maplist1],[[v,a],[v,b]],":-",        [       [[n,maplist],[[n,append],[v,a],[],[v,b]]]        ]]        ],[[[[v,b],[[1],[2],[3]]]]]).
test(94,[[n,maplist1],[[[[1]],[[2]],[[3]]],[v,b]]],[        [[n,maplist1],[[v,a],[v,b]],":-",        [       [[n,maplist],[[n,append],[v,a],[],[v,b]]]        ]]        ],[[[[v,b],[[1],[2],[3]]]]]).test(95,[[n,findall1],[[1,2,3],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[[v,a1],[v,a1]],[[n,member2],[[v,a],[v,a1]]],                [v,b]]]        ]]        ],[[[[v,b],[[1,1],[2,2],[3,3]]]]]).
test(95,[[n,findall1],[[1,2,3],[v,b]]],[        [[n,findall1],[[v,a],[v,b]],":-",        [       [[n,findall],[[[v,a1],[v,a1]],[[n,member],[[v,a1],[v,a]]],                [v,b]]]        ]]        ],[[[[v,b],[[1,1],[2,2],[3,3]]]]]).
test(99,[[n,equals41],[1,[v,b]]],[        [[n,equals41],[[v,a],[v,b]],":-",        [       [[n,equals4],[[v,b],[[[v,a],[v,a]],[v,a]]]]        ]]        ],[[[[v, b], [[1,1],1]]]]).test(100,[[n,equals41],[1,[v,c],[v,b]]],[        [[n,equals41],[[v,a],[v,c],[v,b]],":-",        [       [[n,equals4],[[[v,c],"|",[v,b]],[[[v,a],[v,a]],[v,a]]]]        ]]        ],[[[[v, c], [1,1]],[[v,b],[1]]]]).
test(S) :- downcase_atom(S,S1),string_codes(S1,C),phrase(s,C),!.
test1(A) :- test(B),A is B+1,retractall(test(_)),assertz(test(A)).
test_a :- test_a1(T), (findall([N,Res],(member([N,In,MN,RN,Res1],T), ((pp_a(1,In,MN,RN,M2,R2),forall(member([Type,Num,Res0],Res1),((Type=m->member([Num,Res0],M2);(Type=r,member([Num,Res0],R2))))))->Res=success;Res=fail),writeln([N,Res])),_Res2)). test_a1([ [1,[[1,l,1,4],[2,s,4,1],[3,l,2,5],[4,s,5,2],[5,l,3,6],[6,s,6,3],[7,l,4,7],[8,s,7,4],[9,l,5,8],[10,s,8,5],[11,l,5,1],[12,l,0,3],[13,j,1,0,18],[14,m,1,2],[15,p2,2,3,3],[16,p1,1,-1,1],[17,j,13],[18,e]],5,8,[[r,3,15]]]]).pp_a(L,In,MN,RN,M2,R2) :- a(L,In,MN,RN,M2,R2), writeln('instructions:'), findall(_,(member(X,In),writeln(X)),_), nl, writeln('final memory:'), writeln(M2), nl, writeln('final registers:'), writeln(R2).
test_all00(Lang,Debug,NTotal,Score) :-retractall(lang(_)),assertz(lang(Lang)),test_all0(test,4,Lang,Debug,NT1,S1),writeln([lpiverify4,S1,/,NT1,passed]),writeln(""),writeln(""),test_all0(test_types_cases,6,Lang,Debug,NT2,S2),writeln([lpiverify4_types,S2,/,NT2,passed]),writeln(""),writeln(""),test_all0(testopen_cases,3,Lang,Debug,NT3,S3),writeln([lpiverify4_open,S3,/,NT3,passed]),writeln(""),writeln(""),test_all0(test_open_types_cases,5,Lang,Debug,NT4,S4),writeln([lpiverify4_open_types,S4,/,NT4,passed]),writeln(""),writeln(""),NTotal is NT1+NT2+NT3+NT4,Score is S1+S2+S3+S4.
test_all00(Lang,Debug,NTotal,Score) :-retractall(lang(_)),assertz(lang(Lang)),test_all0(test,4,Lang,Debug,NT1,S1),writeln0([lpiverify4,S1,/,NT1,passed]),writeln0(""),writeln0(""),test_all0(test_types_cases,6,Lang,Debug,NT2,S2),writeln0([lpiverify4_types,S2,/,NT2,passed]),writeln0(""),writeln0(""),test_all0(testopen_cases,3,Lang,Debug,NT3,S3),writeln0([lpiverify4_open,S3,/,NT3,passed]),writeln0(""),writeln0(""),test_all0(test_open_types_cases,5,Lang,Debug,NT4,S4),writeln0([lpiverify4_open_types,S4,/,NT4,passed]),writeln0(""),writeln0(""),NTotal is NT1+NT2+NT3+NT4,Score is S1+S2+S3+S4.
test_all000(test,Debug,NTotal3,Score1,Score3,Lang) :-test(NTotal3,Query,Functions,Result),trans_alg(Query,"en",Lang,Query1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions);true),(Debug=on->writeln1(Functions1);true),trans_alg(Result,"en",Lang,Result1),((international_interpret([lang,Lang],Debug,Query1,Functions1,Result1)%,writeln1(Result2))->(Score3 is Score1+1,writeln0([test,NTotal3,passed]));(Score3=Score1,writeln0([test,NTotal3,failed]))).
test_all000(test,Debug,NTotal3,Score1,Score3,Lang) :-test(NTotal3,Query,Functions,Result),trans_alg(Query,"en",Lang,Query1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions);true),(Debug=on->writeln1(Functions1);true),trans_alg(Result,"en",Lang,Result1),(international_interpret([lang,Lang],Debug,Query1,Functions1,Result1)%%writeln1(Result2->(Score3 is Score1+1,writeln([test,NTotal3,passed]));(Score3=Score1,writeln([test,NTotal3,failed]))).
test_all000(test_open_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_open_types_cases(NTotal3,Query,Types,Modes,Functions),trans_alg(Query,"en",Lang,Query1),trans_alg(Types,"en",Lang,Types1),trans_alg(Modes,"en",Lang,Modes1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_interpret([lang,Lang],Debug,Query1,Types1,Modes1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln([test_open_types,NTotal3,result,Result]),writeln([test_open_types,NTotal3,passed]));(Score3=Score1,writeln([test_open_types,NTotal3,failed]))).
test_all000(test_open_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_open_types_cases(NTotal3,Query,Types,Modes,Functions),trans_alg(Query,"en",Lang,Query1),trans_alg(Types,"en",Lang,Types1),trans_alg(Modes,"en",Lang,Modes1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_interpret([lang,Lang],Debug,Query1,Types1,Modes1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([test_open_types,NTotal3,result,Result]),writeln0([test_open_types,NTotal3,passed]));(Score3=Score1,writeln0([test_open_types,NTotal3,failed]))).
test_all000(test_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_types_cases(NTotal3,Query,Types,Modes,Functions,Result),trans_alg(Query,"en",Lang,Query1),retractall(lang(_)),assertz(lang("en")),%/*findall([F1|Types00],(member([F1|Types003],Types),expand_types1(Types003,[],Types00)),Types004),%Types004=[[[n, find_record], [[t, brackets], [[[t, list], [[t, number], [t, string]]], [t, number], [t, string]]]]],trans_alg(Types004,"en",Lang,Types005),%,expand_types1(Types002,[],Types003),simplify_types(Types003,[],Types00)%),Types1),%simplify_types(Types01,[],Types1),%findallfindall([F|Types100],(member([F|Types101],Types005),%retractall(lang(_)),%assertz(lang("en")),simplify_types(Types101,[],Types100)),Types1),%*/%trans_alg(Types,"en",Lang,Types1),trans_alg(Modes,"en",Lang,Modes1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),trans_alg(Result,"en",Lang,Result1),(international_interpret([lang,Lang],Debug,Query1,Types1,Modes1,Functions1,Result1)->(Score3 is Score1+1,writeln0([test_types,NTotal3,passed]));(Score3=Score1,writeln0([test_types,NTotal3,failed]))).
test_all000(test_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_types_cases(NTotal3,Query,Types,Modes,Functions,Result),trans_alg(Query,"en",Lang,Query1),trans_alg(Types,"en",Lang,Types1),trans_alg(Modes,"en",Lang,Modes1),trans_alg(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),trans_alg(Result,"en",Lang,Result1),(international_interpret([lang,Lang],Debug,Query1,Types1,Modes1,Functions1,Result1)->(Score3 is Score1+1,writeln([test_types,NTotal3,passed]));(Score3=Score1,writeln([test_types,NTotal3,failed]))).
test_all01(Test,_Arity,Lang,Debug,NTotal3,Passed) :-test_all000(Test,Debug,NTotal3,0,Passed1,Lang),(Passed1=1->Passed=passed;Passed=failed),/**((international_interpret([lang,"en"],Debug,Query,Functions,Result1),%%writeln(Result1),Result=Result1)->(Passed=passed,writeln([test_all0,N,passed]));(Passed=failed,writeln([test_all0,N,failed]))),**/!.
test_all_bt00(Lang,Debug,NTotal,Score) :-retractall(lang(_)),assertz(lang(Lang)),test_all_bt0(test,4,Lang,Debug,NT1,S1),writeln([lpiverify4,S1,/,NT1,passed]),writeln(""),writeln(""),test_all_bt0(test_types_cases,6,Lang,Debug,NT2,S2),writeln([lpiverify4_types,S2,/,NT2,passed]),writeln(""),writeln(""),test_all_bt0(testopen_cases,3,Lang,Debug,NT3,S3),writeln([lpiverify4_open,S3,/,NT3,passed]),writeln(""),writeln(""),test_all_bt0(test_open_types_cases,5,Lang,Debug,NT4,S4),writeln([lpiverify4_open_types,S4,/,NT4,passed]),writeln(""),writeln(""),NTotal is NT1+NT2+NT3+NT4,Score is S1+S2+S3+S4.
test_all_bt000(test,Debug,NTotal3,Score1,Score3,Lang) :-test(NTotal3,Query,Functions,Result),trans_alg1(Query,"en",Lang,Query1),(Query=Query1->true%writeln("Query=Query1");(writeln("not(Query=Query1)"),abort)),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions);true),(Debug=on->writeln1(Functions1);true),(Functions=Functions1->true%writeln("Functions=Functions1");(writeln("not(Functions=Functions1)"),abort)),trans_alg1(Result,"en",Lang,Result1),(Result1=Result11->true%writeln("Result1=Result11");(writeln("not(Result1=Result11)"),abort)),(international_interpret([lang,"en"],Debug,Query1,Functions1,Result1)%%writeln1(Result2->(Score3 is Score1+1,writeln([test,NTotal3,passed]));(Score3=Score1,writeln([test,NTotal3,failed]))).
test_all_bt000(test,Debug,NTotal3,Score1,Score3,Lang) :-test(NTotal3,Query,Functions,Result),trans_alg1(Query,"en",Lang,Query1),(Query=Query1->true%writeln("Query=Query1");(writeln0("not(Query=Query1)"),abort)),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions);true),(Debug=on->writeln1(Functions1);true),(Functions=Functions1->true%writeln("Functions=Functions1");(writeln0("not(Functions=Functions1)"),abort)),trans_alg1(Result,"en",Lang,Result1),(Result1=_Result11->true%writeln("Result1=Result11");(writeln0("not(Result1=Result11)"),abort)),(international_interpret([lang,"en"],Debug,Query1,Functions1,Result1)%%writeln1(Result2->(Score3 is Score1+1,writeln0([test,NTotal3,passed]));(Score3=Score1,writeln0([test,NTotal3,failed]))).test_all_bt000(test_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_types_cases(NTotal3,Query,Types,Modes,Functions,Result),trans_alg1(Query,"en",Lang,Query1),findall([F1|Types00],(member([F1|Types003],Types),expand_types1(Types003,[],Types00)),Types004),%Types004=[[[n, find_record], [[t, brackets], [[[t, list], [[t, number], [t, string]]], [t, number], [t, string]]]]],trans_alg1(Types004,"en",Lang,Types005),%,expand_types1(Types002,[],Types003),simplify_types(Types003,[],Types00)%),Types1),%simplify_types(Types01,[],Types1),%findallfindall([F|Types100],(member([F|Types101],Types005),simplify_types(Types101,[],Types100)),Types1),trans_alg1(Modes,"en",Lang,Modes1),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),trans_alg1(Result,"en",Lang,Result1),(international_interpret([lang,"en"],Debug,Query1,Types1,Modes1,Functions1,Result1)->(Score3 is Score1+1,writeln0([test_types,NTotal3,passed]));(Score3=Score1,writeln0([test_types,NTotal3,failed]))).test_all_bt000(testopen_cases,Debug,NTotal3,Score1,Score3,Lang) :-testopen_cases(NTotal3,Query,Functions),trans_alg1(Query,"en",Lang,Query1),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_interpret([lang,"en"],Debug,Query1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([testopen,NTotal3,result,Result]),writeln0([test,NTotal3,passed]));(Score3=Score1,writeln0([testopen,NTotal3,failed]))).
test_all_bt000(test_open_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_open_types_cases(NTotal3,Query,Types,Modes,Functions),trans_alg1(Query,"en",Lang,Query1),%trans_alg1(Types,"en",Lang,Types1),findall([F1|Types00],(member([F1|Types003],Types),expand_types1(Types003,[],Types00)),Types004),%Types004=[[[n, find_record], [[t, brackets], [[[t, list], [[t, number], [t, string]]], [t, number], [t, string]]]]],trans_alg1(Types004,"en",Lang,Types005),%,expand_types1(Types002,[],Types003),simplify_types(Types003,[],Types00)%),Types1),%simplify_types(Types01,[],Types1),%findallfindall([F|Types100],(member([F|Types101],Types005),simplify_types(Types101,[],Types100)),Types1),trans_alg1(Modes,"en",Lang,Modes1),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_interpret([lang,"en"],Debug,Query1,Types1,Modes1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([test_open_types,NTotal3,result,Result]),writeln0([test_open_types,NTotal3,passed]));(Score3=Score1,writeln0([test_open_types,NTotal3,failed]))).trans_alg1(Query,"en",Lang,Query1) :-trans_alg(Query,"en",Lang,Query2),trans_alg(Query2,Lang,"en",Query1).
test_all_bt000(test_open_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_open_types_cases(NTotal3,Query,Types,Modes,Functions),trans_alg1(Query,"en",Lang,Query1),trans_alg1(Types,"en",Lang,Types1),trans_alg1(Modes,"en",Lang,Modes1),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),((international_interpret([lang,"en"],Debug,Query1,Types1,Modes1,Functions1,Result),not(Result=[]))->(Score3 is Score1+1,writeln([test_open_types,NTotal3,result,Result]),writeln([test_open_types,NTotal3,passed]));(Score3=Score1,writeln([test_open_types,NTotal3,failed]))).
test_all_bt000(test_types_cases,Debug,NTotal3,Score1,Score3,Lang) :-test_types_cases(NTotal3,Query,Types,Modes,Functions,Result),trans_alg1(Query,"en",Lang,Query1),trans_alg1(Types,"en",Lang,Types1),trans_alg1(Modes,"en",Lang,Modes1),trans_alg1(Functions,"en",Lang,Functions1),(Debug=on->writeln1(Functions1);true),trans_alg1(Result,"en",Lang,Result1),(international_interpret([lang,"en"],Debug,Query1,Types1,Modes1,Functions1,Result1)->(Score3 is Score1+1,writeln([test_types,NTotal3,passed]));(Score3=Score1,writeln([test_types,NTotal3,failed]))).
test_all_bt01(Test,_Arity,Lang,Debug,NTotal3,Passed) :-test_all_bt000(Test,Debug,NTotal3,0,Passed1,Lang),(Passed1=1->Passed=passed;Passed=failed),/**((international_interpret([lang,"en"],Debug,Query,Functions,Result1),%%writeln(Result1),Result=Result1)->(Passed=passed,writeln([test_all_bt0,N,passed]));(Passed=failed,writeln([test_all_bt0,N,failed]))),**/!.
test_family :- %working_directory1(A,A), %working_directory1(_,"../"), %fastp2lp("family_sols.pl",Functions),  p2lpconverter([file,"family_sols.pl"],Functions1), p2lpconverter([file,"family_test.pl"],Functions2),  append(Functions1,Functions2,Functions3), Debug=on,  lucianpl(Debug,[[n,family_test]],Functions3,[[]]).
test_lists(Heads1,L,CFLM%,Heads3) :-%trace, findall(Common_factors1,(member(Head,Heads1),length(Head,Length), common_factors(Length,Common_factors1)),Common_factors), %foldr(append,Common_factors,Common_factors3), %sort(Common_factors3,Common_factors4), length(Common_factors,CFL), (CFL>1->CFLM=multiple;(%trace, CFLM=single)), Common_factors=[CF1|CF2], (%CF2=[]->Common_factors4=CF1; (%trace, foldr(intersection,CF2,CF1,Common_factors4))), reverse(Common_factors4,Common_factors5), %trace, test_lists2(Common_factors5,Heads1,L%,Heads3 ).
test_lists_a([],B,B) :- !.
test_open_types_cases(11,[[n,natural_law],[[v,a1]]],        [[[n,natural_law],[[t,string]]]],        [[[n,natural_law],[output]]],[        [[n,natural_law],[[v,a1]],":-",        [                        [[n,writeln],["Is the idea from pedagogy, meditation or medicine (y/n)?"]],                [[n,read_string],[[v,a]]],                [[n,"->"],[[[n,=],[[v,a],"y"]],                [[n,=],[[v,a1],"true"]],                [[[n,writeln],["Does the idea not contain genetic modification of an organism, not include nuclear energy, and is compatible with natural-law (y/n)?"]],                [[n,read_string],[[v,b]]],                [[n,"->"],[[[n,=],[[v,b],"y"]],                [[n,=],[[v,a1],"true"]],                [[n,=],[[v,a1],"false"]]]]]]]                        ]]]).
test_open_types_cases(12,[[n,headache_medicine],[[v,a1]]],        [[[n,headache_medicine],[[t,string]]]],        [[[n,headache_medicine],[output]]],[        [[n,headache_medicine],[[v,a1]],":-",        [                        [[n,writeln],["Do you have a stress, not pathological headache (y/n)?"]],                [[n,read_string],[[v,a]]],                [[n,"->"],[[[n,=],[[v,a],"n"]],                [[n,=],[[v,a1],"true"]],                [[n,=],[[v,a1],"false"]]]]                        ]]]).% ["Short Arguments","Competition.txt",0,algorithms,"7. *I liked breasonings and equality - and economic freedom.  I performed better by using the daily regimen to go to church (play the note).  Confidence blocks and blocks from lack of practice were cleared.  I maintained a high level of performance.  I functioned (played the note) positively.  "]% Would you like the same as someone else?test_open_types_cases(13,[[n,same],[[v,a1]]],        [[[n,same],[[t,string]]]],        [[[n,same],[output]]],[        [[n,same],[[v,a1]],":-",        [                        [[n,writeln],["Would you like the same as someone else?  What is it?"]],                [[n,read_string],[[v,a1]]]        ]]]).
test_open_types_cases(2,[[n,true_vs_good],[[[n,a],[1]],1,[v,g2]]],        [[[n,true_vs_good],[[[t,brackets],[[t,predicatename],        [[t,brackets],[[t,number]]]]],        [t,number],[t,number]]]],        [[[n,true_vs_good],[input,input,output]]],[        [[n,true_vs_good],[[v,f1],[v,l],[v,n]],":-",        [                        [[n,equals3],[[v,n],1]                        ]]]]).
test_open_types_cases(3,[[n,function],[[v,a]]],[[[n,function],[[[t,number]]]]],[[[n,function],[output]]],[        [[n,function],[[1]]]]).
test_open_types_cases(3,[[n,function],[[v,a]]],[[[n,function],[[[t,brackets],[[t,number]]]]]],[[[n,function],[output]]],[        [[n,function],[[1]]]]).
test_open_types_cases(30,[[n,keep_positive_gifts],[[v,a1]]],        [[[n,keep_positive_gifts],[[t,string]]]],        [[[n,keep_positive_gifts],[output]]],[        [[n,keep_positive_gifts],[[v,a1]],":-",        [                        [[n,writeln],["Do you keep the positive gifts, the apple, banana and orange?"]],                [[n,read_string],[[v,a1]]]        ]]]).
test_open_types_cases(31,[[n,differentiate],[[v,a1]]],        [[[n,differentiate],[[t,string]]]],        [[[n,differentiate],[output]]],[        [[n,differentiate],[[v,a1]],":-",        [                        [[n,writeln],["What is the first type?"]],                [[n,read_string],[[v,a2]]],                [[n,writeln],["What is the second type?"]],                [[n,read_string],[[v,a3]]],                                [[n,"->"],[[[n,equals4],[[v,a2],[v,a3]]],                [[n,equals4],[[v,a1],"The first and second types are the same"]],                [[n,equals4],[[v,a1],"The first and second types are not the same"]]]]        ]]]).
test_open_types_cases(32,[[n,product],[[v,a1],[v,a2]]],        [[[n,product],[[t,string],[t,string]]]],        [[[n,product],[output,output]]],[        [[n,product],[[v,a1],[v,a2]],":-",        [                        [[n,writeln],["What is your product?"]],                [[n,read_string],[[v,a1]]],                [[n,writeln],["Do you have 50 As for it?"]],                [[n,read_string],[[v,a2]]]        ]]]).% * Third, I wrote the classical music composition contained 5 pop songs.
test_open_types_cases(33,[[n,music_form_number],[[v,a]]],        [[[n,music_form_number],[[t,number]]]],        [[[n,music_form_number],[output]]],[        [[n,music_form_number],[[v,a]],":-",        [                        [[n,writeln],["How many form sections should your composition have?"]],                [[n,read_string],[[v,a1]]],                [[n,stringtonumber],[[v,a1],[v,a]]]        ]]]).
test_r(A,B) :-sub_term_types_wa([string,number,atom,[]],A,Instances1),sub_term_types_wa([string,number,atom,[]],B,Instances2),(Instances1=Instances2->true;(subtract(Instances1,Instances2,Instances1a),subtract(Instances2,Instances1,Instances2a),(pretty_print_table([A],A1)->true;pretty_print_table([[A]],A1)),(pretty_print_table([B],B1)->true;pretty_print_table([[B]],B1)),pretty_print_table([Instances1a],Instances1a1),pretty_print_table([Instances2a],Instances2a1),writeln(["**********","\n","Error in result:",A1,"\n**********","\n","given correct result:",B1,"\n**********","\n","Missing terminals:",Instances1a1,"\n**********","\n","Incorrect terminals:",Instances2a1]),true%abort)),!.
test_s2a :-retractall(num_s2a(_)),assertz(num_s2a(1)),retractall(vars_s2a(_)),assertz(vars_s2a([])),retractall(vars_base_s2a(_)),assertz(vars_base_s2a('A')),retractall(character_breakdown_mode(_)),assertz(character_breakdown_mode(off)), test_find_unique_variables, test_find_constants, test_spec_to_algorithm.
test_s2g :-findall(_,(member([N,L,G2],[[1,["[1,2,3,2,3,1,2,3,2,3]"],[[[n,a1],"->",[[]]],[[n,a1],"->",[[1],[[n,a2]],[[n,a1]]]],[[n,a2],"->",[[]]],[[n,a2],"->",[[2],[3],[[n,a2]]]]]],[2,["[1,2,2,1,2]"],[[[n,a1],"->",[[]]],[[n,a1],"->",[[1],[[n,a2]],[[n,a1]]]],[[n,a2],"->",[[]]],[[n,a2],"->",[[2],[[n,a2]]]]]],[3,["[1,2,1,3,2]"],[[[n,a1],"->",[[]]],[[n,a1],"->",[[1],[[n,a2]],[2],[[n,a1]]]],[[n,a2],"->",[[]]],[[n,a2],"->",[[3]]]]],[4,["[1,2,3,1,3]"],[[[n,a1],"->",[[]]],[[n,a1],"->",[[1],[[n,a2]],[3],[[n,a1]]]],[[n,a2],"->",[[]]],[[n,a2],"->",[[2]]]]],[5,["[1,2,3,2,3,4,5,1,2,3,4,5]"],[[[n, a1], "->", [[1], [2], [[n, a2]], [3], [4], [5]]], [[n, a2], "->", [[]]], [[n, a2], "->", [[3], [[n, a3]], [2], [[n, a2]]]], [[n, a3], "->", [[]]], [[n, a3], "->", [[4], [5], [1]]]]],[6,["[1,2,3,2,3,4,5,1,2,3,4,5,1,2,3,2,3,4,5,1,2,3,4,5]"],[[[n,a1],"->",[[]]],[[n,a1],"->",[[1],[2],[[n,a2]],[3],[4],[5],[[n,a1]]]],[[n,a2],"->",[[]]],[[n,a2],"->",[[3],[[n,a3]],[2],[[n,a2]]]],[[n,a3],"->",[[]]],[[n,a3],"->",[[4],[5],[1]]]]],[7,["[0,0,1,0,0]"],[[[n, a1], "->", [[[n, a2]], [1], [[n, a2]]]], [[n, a2], "->", [[]]], [[n, a2], "->", [[0], [[n, a2]]]]]],[8,["[a,b]", "[a,c]"], [[[n, a1], "->", [[a], [[n, a2]]]], [[n, a2], "->", [[b]]], [[n, a2], "->", [[c]]]]],[9,["[a,b]", "[a,d,e]", "[a,d,f]"], [[[n, a1], "->", [[a], [[n, a2]]]], [[n, a2], "->", [[b]]], [[n, a2], "->", [[d], [[n, a4]]]], [[n, a4], "->", [[e]]], [[n, a4], "->", [[f]]]]],[10,["[a,b]", "[a,d,d,e]", "[a,d,d,f]"], [[[n, a1], "->", [[a], [[n, a2]]]], [[n, a2], "->", [[b]]], [[n, a2], "->", [[[n, a4]], [[n, a5]]]], [[n, a4], "->", [[]]], [[n, a4], "->", [[d], [[n, a4]]]], [[n, a5], "->", [[e]]], [[n, a5], "->", [[f]]]]],[11,["[a]", "[[a]]", "[[[a]]]"], [[[n,a1],"->",[["["],["["],[a],["]"],["]"]]],[[n,a1],"->",[["["],[a],["]"]]],[[n,a1],"->",[[a]]]]],[12,["[a]", "[[a]]", "[[[a]]]", "[[[[a]]]]"], [[[n,a1],"->",[["["],["["],["["],[a],["]"],["]"],["]"]]],[[n,a1],"->",[["["],["["],[a],["]"],["]"]]],[[n,a1],"->",[["["],[a],["]"]]],[[n,a1],"->",[[a]]]]],[13,["[a]", "[[a]]", "[[[a]]]", "[[[[a]]]]", "[[[[[a]]]]]"], [[[n,a1],"->",[["["],["["],["["],["["],[a],["]"],["]"],["]"],["]"]]],[[n,a1],"->",[["["],["["],["["],[a],["]"],["]"],["]"]]],[[n,a1],"->",[["["],["["],[a],["]"],["]"]]],[[n,a1],"->",[["["],[a],["]"]]],[[n,a1],"->",[[a]]]]],[14,["[[[f,g]]]"],[[[n,a1],"->",[["["],["["],[f],[g],["]"],["]"]]]]],[15,["[[[[],g],[]],[],a]"],[[[n,a1],"->",[[[n,a2]],[a]]],[[n,a2],"->",[[]]],[[n,a2],"->",[["["],[[n,a4]],["]"],[[n,a2]]]],[[n,a4],"->",[[]]],[[n,a4],"->",[["["],[[n,a5]],["]"],[[n,a4]]]],[[n,a5],"->",[[]]],[[n,a5],"->",[["["],["]"],[g]]]]],[16,["[[a],',',[a],',',[a]]"],[[[n,a1],"->",[["["],[a],["]"],[[n,a2]]]],[[n,a2],"->",[[]]],[[n,a2],"->",[[','],["["],[a],["]"],[[n,a2]]]]]],[17,["[a,',',a,',',a]"],[[[n,a1],"->",[[a],[[n,a2]]]],[[n,a2],"->",[[]]],[[n,a2],"->",[[','],[a],[[n,a2]]]]]]]), strings_to_grammar(L,G1),%writeln1(G1), ((G1=G2)->R=success;R=fail ), writeln([R,N,strings_to_grammar,test]),  (check_grammar(L,G1)->R1=success;R1=fail),  writeln([R1,N,strings_to_grammar,check_grammar,test]),  nl)  ,_),!.
test_spec_to_algorithm1(N) :-/*retractall(num_s2a(_)),assertz(num_s2a(1)),retractall(vars_s2a(_)),assertz(vars_s2a([])),retractall(vars_base_s2a(_)),assertz(vars_base_s2a('A')),*/(catch(algs(Algs),_,false)->findall(_,(member(Alg,Algs),retractall(algs(Alg))),_);true),retractall(algs(_)),assertz(algs([])),s2a_tests(Tests),member([N,Predicate_name,S,character_breakdown_mode=CBM,Alg2],Tests),((%retractall(test_n(_)),%assertz(test_n(N)),string_concat(Predicate_name,N,Predicate_name1),%catch(call_with_time_limit(10,(spec_to_algorithm(Predicate_name1,S,CBM,Alg1))%)%,    %time_limit_exceeded,    %fail),writeln1(S),writeln1(Alg1)%,trace,string_concat(Predicate_name,Rest,Alg2),string_concat(Predicate_name1,Rest,Alg21),Alg21=Alg1)->R=success;R=fail), writeln([R,N,spec_to_algorithm,test]),!.
test_types2a%(1,Alg) :-  test1(off,1,_),/*Data = [[[[1,[2, 2],1,[2]]], [[1,[2]]]], % possible versions of input for alg to generate[[[1,[2],1,[2]]], [[1,[2,2]]]] % " output "],Data = [[[[1,[2, 2],1,[2]]], [[1,[2]]]],[[[1,[2],1,[2]]], [[1,[2]]]]],Data = [[[[a,[b, b],a,[b]]], [[a,[b]]]],[[[[b],a,[b],a]], [[[b],a]]]],Data = [[[[a,a]], [[a]]],[[[a,a]], [[a]]]],test Xgen_alg([[[t, list], [[t, atom, 4, a], [t, atom, 7, b]]]], [[[t, list], [[t, atom, 4, b],[t, atom, 7, a]]]],A),pp0(A,B),writeln(B).
test_types_cases(10,[[n,f],["a"]],[        [[n,f],[[t,a]]],        [[t,a],[[t,number]]],        [[t,a],[[t,string]]]],[        [[n,f],[input]]],[        [[n,f],["a"]]],[[]]).
test_types_cases(2,[[n,function],[[v,a],[v,b],[v,c]]],[[[n,function],[[t,number],[t,string],[t,predicatename]]]],[[[n,function],[output,output,output]]],[        [[n,function],[[v,a],[v,b],[v,c]],":-",        [                [[n,=],[[v,a],1]],                [[n,=],[[v,b],"a"]],                [[n,=],[[v,c],[n,a]]]        ]]],[[[[v,a], 1],[[v,b], "a"],[[v,c], [n,a]]]]).
test_types_cases(26,[[n,choose_time],[[-15,-10,-5,0,5,10,15],[v,time]]],        [[[n,choose_time],[{[t,number]},[t,number]]]],        [[[n,choose_time],[input,output]]],[        [[n,choose_time],[[v,a],10],":-",        [       [[n,member],[10,[v,a]]]        ]]        ],[[[[v,time],10]]]).
test_types_cases(27,[[n,same],[[1,2,3,4,5,6],[1,2,3,4,5,6]]],        [[[n,same],[{[t,number]},{[t,number]}]]],        [[[n,same],[input,input]]],[        [[n,same],[[v,sequence1],[v,sequence1]]]],[[]]).% ["Lecturer","Lecturer.txt",0,algorithms,"2. *I found what the person aimed for.  I wrote on hermeneutics.  I identified the discourse.  I grouped the topics into ideologies.  I grouped the ideas into ontologies."]test_types_cases(28,[[n,aimed],[[["bulls-eye","red"],["outer-ring","blue"]],"bulls-eye",[v,object]]],        [[[n,aimed],[{{[t,string],[t,string]}},[t,string],[t,string]]]],        [[[n,aimed],[input,input,output]]],[        [[n,aimed],[[v,a],[v,b],[v,c]],":-",        [       [[n,member],[[v,d],[v,a]]],                [[n,equals4],[[v,d],[[v,b],[v,c]]]]        ]]        ],[[[[v,object],"red"]]]).
test_types_cases(3,[[n,function],[[v,a]]],[[[n,function],[[[t,number]]]]],[[[n,function],[output]]],[        [[n,function],[[1]]]],[[[[v,a], [1]]]]).
test_types_cases(3,[[n,function],[[v,a]]],[[[n,function],[[[t,brackets],[[t,number]]]]]],[[[n,function],[output]]],[        [[n,function],[[1]]]],[[[[v,a], [1]]]]).
test_types_cases(30,[[n,work_modus_ponens_out],[["a","b"],[v,mp]]],        [[[n,work_modus_ponens_out],[{[t,string]},{[t,string]}]]],        [[[n,work_modus_ponens_out],[input,output]]],[        [[n,work_modus_ponens_out],[[v,a],[v,c]],":-",        [       [[n,equals4],[[v,a],[[v,a1],[v,b1]]]],                [[n,equals4],[[v,c],[[v,a1],"->",[v,b1]]]]        ]]        ],[[[[v,mp],["a","->","b"]]]]).
test_types_cases(4,[[n,f],[[v,a],[v,b],[v,c],[v,d]]],[[[n,f],[[t,number],[t,string],[t,number],[t,string]]]],[[[n,f],[output,output,output,output]]],[        [[n,f],[1,"a",2,"b"]]],[[[[v,a], 1],[[v,b], "a"],[[v,c], 2],[[v,d], "b"]]]).
test_types_cases(4,[[n,f],[[v,a],[v,b],[v,c],[v,d]]],[[[n,f],[[t,number],[t,string],[t,number],[t,string]]]],[[[n,f],[output,output,output,output]]],[        [[n,f],[1,"a",2,"b"]]],[[[[v,a], 1],[[v,b], "a"],[[v,c], 2],[[v,d], "b"]]]).test_types_cases(5,[[n,f],[[v,a],[v,b]]],[        [[n,f],[[t,a],[t,b]]],        [[t,a],[[t,number]]],        [[t,b],[[t,string]]]],[        [[n,f],[output,output]]],[        [[n,f],[1,"a"]]],[[[[v,a], 1],[[v,b], "a"]]]).
test_types_cases(43,[[n,is_classical],[[2,3,5,6,7,10,11]]],[[[n,is_classical],[[t,numbers]]],[[n,is_set1],[[t,numbers],[t,numbers]]],[[t,numbers],[{[t,number]}]]],        [[[n,is_classical],[input]],        [[n,is_set1],[input,input]]],[        [[n,is_classical],[[v,numbers]],":-",        [       %[[n,trace2]],        [[n,is_set1],[[v,numbers],[2,3,5,6,7,10,11]]]]],                [[n,is_set1],[[v,set1],[v,set2]],":-",        [       [[n,sort],[[v,set1],[v,set3]]],        [[n,sort],[[v,set2],[v,set3]]]        ]]],[[]]).
test_types_cases(44,[[n,find_record],[[[1,"a"],[2,"b"]],1,[v,r]]],[[[n,find_record],[{[[t,number],[t,string]]},[t,number],[t,string]]]],        [[[n,find_record],[input,input,output]]],[        [[n,find_record],[[v,pairs],[v,num],[v,rec]],":-",        [       %[[n,trace2]],        [[n,member],[[[v,num],[v,rec]],[v,pairs]]]]]],[[[[v,r],"a"]]]).
test_types_cases(49,[[n,meantness],[[["a","b"],["b","c"]],["a","b","c"]]],[[[n,meantness],[[t,lists_string],[t,list_string]]],[[t,lists_string],[{[t,list_string]}]],[[t,list_string],[{[t,string]}]]],        [[[n,meantness],[input,input]]],[        [[n,meantness],[[v,lists],[]]],        [[n,meantness],[[v,lists],[v,list]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,list],[[v,head],"|",[v,tail]]]],        [[n,member],[[v,list1],[v,lists]]],        [[n,member],[[v,head],[v,list1]]],        %[[n,delete],[[v,lists],[v,list1],[v,lists2]]],        [[n,meantness],[[v,lists],[v,tail]]        ]]]],[[]]).
test_types_cases(5,[[n,f],[[v,a],[v,b]]],[        [[n,f],[[t,a],[t,b]]],        [[t,a],[[t,number]]],        [[t,b],[[t,string]]]],[        [[n,f],[output,output]]],[        [[n,f],[1,"a"]]],[[[[v,a], 1],[[v,b], "a"]]]).
test_types_cases(50,[[n,unwavering],[[1,1,1,1]]],[[[n,unwavering],[[t,list_number]]],[[t,list_number],[{[t,number]}]],[[n,1],[[t,number]]]],[[[n,unwavering],[input]],[[n,1],[input]]],[        [[n,unwavering],[[]]],        [[n,unwavering],[[v,list]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,list],[[v,head],"|",[v,tail]]]],        [[n,1],[[v,head]]],        [[n,unwavering],[[v,tail]]]]],        [[n,1],[1]]],[[]]).
test_types_cases(51,[[n,unwavering_list],[[[1,1,1,1],[1,1,1,1],[1,1,1,1]]]],[[[n,unwavering_list],[{[t,list_number]}]],[[n,unwavering],[[t,list_number]]],[[t,list_number],[{[t,number]}]],[[n,1],[[t,number]]]],[[[n,unwavering_list],[input]],[[n,unwavering],[input]],[[n,1],[input]]],[        [[n,unwavering_list],[[]]],        [[n,unwavering_list],[[v,list]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,list],[[v,head],"|",[v,tail]]]],        [[n,unwavering],[[v,head]]],        [[n,unwavering_list],[[v,tail]]]]],        [[n,unwavering],[[]]],        [[n,unwavering],[[v,list]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,list],[[v,head],"|",[v,tail]]]],        [[n,1],[[v,head]]],        [[n,unwavering],[[v,tail]]]]],        [[n,1],[1]]],[[]]).
test_types_cases(52,[[n,unwavering_people],%[[[[1],[1]],[[1],[1]]]]],[[[[[1,1,1,1],[1,1,1,1],[1,1,1,1]],[[1,1,1,1],[1,1,1,1],[1,1,1,1]]],[[[1,1,1,1],[1,1,1,1],[1,1,1,1]],[[1,1,1,1],[1,1,1,1],[1,1,1,1]]]]]],[[[n,unwavering_people],[[t,unwavering_people1]]],[[t,unwavering_people1],[[t,number]]],[[t,unwavering_people1],[{[t,unwavering_people1]}]],[[n,unwavering],[{[t,number]}]],[[n,1],[[t,number]]]],[[[n,unwavering_people],[input]],[[n,unwavering],[input]],[[n,1],[input]]],[        [[n,unwavering_people],[[]]],                [[n,unwavering_people],[[v,list]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,list],[[v,head],"|",[v,tail]]]],        [[n,unwavering],[[v,head]]],        [[n,unwavering_people],[[v,tail]]]]],        [[n,unwavering_people],[[v,list]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,list],[[v,head],"|",[v,tail]]]],        [[n,not],[[[n,unwavering],[[v,head]]]]],        [[n,unwavering_people],[[v,head]]],        [[n,unwavering_people],[[v,tail]]]]],        [[n,unwavering],[[]]],                [[n,unwavering],[[v,list]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,list],[[v,head],"|",[v,tail]]]],        [[n,1],[[v,head]]],        [[n,unwavering],[[v,tail]]]        %[[n,cut]]        ]],        [[n,1],[1]]],[[]]).
test_types_cases(55,[[n,read_policy],[[n,+],1,1,[v,a]]],[[[n,read_policy],[[t,predicatename],[t,number],[t,number],[t,number]]]],        [[[n,read_policy],[input,input,input,output]]],[        [[n,read_policy],[[v,pred_name],[v,var1],[v,var2],[v,var3]],":-",        [                %[[n,trace2]],                [[v,pred_name],[[v,var1],[v,var2],[v,var3]]]        ]]],[[[[v,a],2]]]).% ["Short Arguments","Two_Types.txt",0,algorithms,"1. I prepared to sell the artificial breasts.  I did this by stating that the breast cooled and stored the milk.  First, I read the temperature of the breast.  Second, I read how much milk it stored.  Third, I simulated these."]test_types_cases(56,[[n,amount_earned],[2,2,[v,a]]],[[[n,amount_earned],[[t,number],[t,number],[t,number]]]],        [[[n,amount_earned],[input,input,output]]],[        [[n,amount_earned],[[v,n1],[v,n2],[v,n3]],":-",        [       %[[n,trace2]],        [[n,*],[[v,n1],[v,n2],[v,n3]]]]]],[[[[v,a],4]]]).
test_types_cases(57,[[n,cool],[[-4.1,-4,-4.2],-5,-4]],[[[n,cool],[{[t,number]},[t,number],[t,number]]]],        [[[n,cool],[input,input,input]]],[        [[n,cool],[[],[v,n2],[v,n3]]],        [[n,cool],[[v,list],[v,n2],[v,n3]],":-",        [       %[[n,trace2]],        [[n,equals4],[[v,list],[[v,head],"|",[v,tail]]]],        [[n,>=],[[v,head],[v,n2]]],        [[n,>=],[[v,n3],[v,head]]],        [[n,cool],[[v,tail],[v,n2],[v,n3]]]]]],[[]]).
test_types_cases(58,[[n,store],[["milk"],"milk"]],[[[n,store],[{[t,string]},[t,string]]]],        [[[n,store],[input,input]]],[        [[n,store],[[[v,a]],[v,a]]]],[[]]).% ["Fundamentals of Meditation and Meditation Indicators","FUNDAMENTALS OF MEDITATION by Lucian Green Appearances 4 of 4.txt",0,algorithms,"31.    I prepared to enter the room in the heartland.  I did this by writing the Room Essay Press Release.  First, I wrote that 250 breasonings expanded to 50 As.  Second, I wrote that a breasoned out pop song expanded to 50 As.  Third, I wrote the classical music composition contained 5 pop songs.  In this way, I prepared to enter the room in the heartland by writing the Room Essay Press Release."]% * I prepared to enter the room in the heartland.
test_types_cases(6,[[n,f],[[v,a]]],[        [[n,f],[[t,a]]],        [[t,a],[[t,number]]],        [[t,a],[[t,string]]]],[        [[n,f],[output]]],[        [[n,f],["a"]]],[[[[v,a], "a"]]]).
test_types_cases(60,[[n,find_in_room],["newspaper",[v,x],[v,y]]],        [[[n,find_in_room],[[t,string],[t,number],[t,number]]],[[n,room],[{{[t,number],[t,number],[t,string]}}]]],                [[[n,find_in_room],[input,output,output]],        [[n,room],[output]]],[        [[n,find_in_room],[[v,string],[v,x],[v,y]],":-",        [         [[n,room],[[v,room]]],         [[n,member],[[[v,x],[v,y],[v,string]],[v,room]]]        ]],        [[n,room],[        [         [1,3,""],[2,3,"newspaper"],[3,3,""],         [1,2,""],[2,2,""],[3,2,""],         [1,1,"door"],[2,1,""],[3,1,""]        ]        ]]     ],[[[[v,x],2],[[v,y],3]]]).        % * First, I wrote that 250 breasonings expanded to 50 As.
test_types_cases(61,[[n,return],[250,4000,[v,return]]],        [[[n,return],[[t,number],[t,number],[t,number]]]],        [[[n,return],[input,input,output]]],[        [[n,return],[[v,take],[v,give],[v,return]],":-",        [         [[n,/],[[v,give],[v,take],[v,return]]]        ]]],[[[[v,return],16]]]).
test_types_cases(63,[[n,each_topic],[[v,return]]],        [[[n,each_topic],[[t,number]]]],        [[[n,each_topic],[output]]],[        [[n,each_topic],[[v,return]],":-",        [         [[n,*],[4,4000,[v,return]]]        ]]],[[[[v,return],16000]]]).
test_types_cases(64,[[n,characters],["Tom",[v,characters]]],        [[[n,characters],[[t,string],{[t,string]}]],[[n,c],[[t,string],[t,string]]]],        [[[n,characters],[input,output]],        [[n,c],[input,output]]],[        [[n,characters],[[v,person],[v,characters]],":-",        [         [[n,findall],[[v,c],[[[n,c],[[v,person],[v,c]]]],[v,characters]]]        ]],                [[n,c],["Tom","Chef"]],        [[n,c],["Tom","Baker"]],        [[n,c],["Tom","Writer"]],        [[n,c],["John","Writer"]]        ],[[[[v,characters],["Chef","Baker","Writer"]]]]).
test_types_cases(66,[[n,characters],[["a",[["a"],"a"]]]],%[[n,characters],[[["a"],"a"]]],        [[[n,characters],[{[t,string],{{[t,string]},[t,string]}}]]],        %[[[n,characters],[[[t,brackets],[[[t,brackets],[[t,string]]],[t,string]]]]]],        [[[n,characters],[input]]],[        [[n,characters],[[v,person]]] ],[[]]).test_types_cases(67,[[n,characters],[[["a",["a"]],"a"]]],%[[n,characters],[[["a",["a"]]]]],        [[[n,characters],[[[[t,string],[[t,string]]],[t,string]]]]],                %[[[n,characters],[[[t,brackets],[[[t,brackets],[[t,string],[[t,brackets],[[t,string]]]]]]]]]],        [[[n,characters],[input]]],[        [[n,characters],[[v,person]]] ],[[]]).
test_types_cases(7,[[n,map],[[[n,add],[[[n,add],[[[n,add],[1]]]]]],0,[v,d]]],%test_types_cases(7,[[n,map],[1,0,[v,d]]],[[[n,map],[[t,map1],[t,number],[t,number]]],[[t,map1],[[t,number]]],[[t,map1],[[[t,predicatename],[[t,map1]]]]],[[n,add],[[t,number],[t,number],[t,number]]],[[n,getitemn],[[t,number],{[t,any]},[t,any]]]],[        [[n,map],[input,input,output]],                        [[n,add],[input,input,output]],                [[n,getitemn],[input,input,output]]],[        [[n,map],[[v,f1],[v,n1],[v,n]],":-",        [                        [[n,number],[[v,f1]]],                [[n,add],[[v,n1],[v,f1],[v,n]]]        ]        ],        [[n,map],[[v,f1],[v,l],[v,n]],":-",        [                        [[n,equals1],[[v,f1],[[v,f11],[v,f12]]]],                [[n,=],[[v,f11],[n,add]]],                [[n,getitemn],[1,[v,f12],[v,bb]]],                [[v,f11],[[v,l],1,[v,l2]]],                [[n,map],[[v,bb],[v,l2],[v,n]]]        ]        ],        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]],        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]]],[[[[v,d], 4]]]).%%,[[[[v,bb], 1]]]).test_types_cases(8,[[n,f],[[v,d],[v,a],[v,c]]],[[[n,f],[[t,number],{[t,number],[t,string]},[t,number]]]],[[[n,f],[output,output,output]]],[        [[n,f],[1,[1,"a",2,"b"],1]]],[[[[v,a],[1,"a",2,"b"]],[[v,c],1],[[v,d],1]]]).
test_types_cases(70,[[n,characters],[[a],b]],%[[n,characters],[[["a"],"a"]]],        [[[n,characters],[{[t,atom]},[t,atom]]]],        %[[[n,characters],[[[t,brackets],[[[t,brackets],[[t,string]]],[t,string]]]]]],        [[[n,characters],[input,input]]],[        [[n,characters],[[v,person],[v,p2]]] ],[[]]).
test_types_cases(71,[[n,numbers],[[1,2,3]]],[[[n,numbers],[[t,number1]]],[[t,number1],[[]]],[[t,number1],[[[t,number],"|",[t,number1]]]]],[[[n,numbers],[input]]],[        [[n,numbers],[[v,_]]] ],[[]]).
test_types_cases(72,[[n,string_numbers],[["a",2,3]]],[[[n,string_numbers],[[t,string_numbers1]]],[[t,string_numbers1],[[[t,string],"|",{[t,number]}]]]],[[[n,string_numbers],[input]]],[        [[n,string_numbers],[[v,_]]] ],[[]]).test_types_cases(73,[[n,atom_any],[["a",2,"b",1]]],[[[n,atom_any],[[t,atom_any1]]],[[t,atom_any1],[{[t,string],[t,any]}]]],[[[n,atom_any],[input]]],[        [[n,atom_any],[[v,_]]] ],[[]]).
test_types_cases(9,[[n,f],[1,"a"]],[        [[n,f],[[t,a],[t,b]]],        [[t,a],[[t,number]]],        [[t,b],[[t,string]]]],[        [[n,f],[input,input]]],[        [[n,f],[1,"a"]]],[[]]).test_types_cases(10,[[n,f],["a"]],[        [[n,f],[[t,a]]],        [[t,a],[[t,number]]],        [[t,a],[[t,string]]]],[        [[n,f],[input]]],[        [[n,f],["a"]]],[[]]).test_types_cases(11,[[n,call1b],[[v,b],[1,11,111]]],        [[[n,call1b],[[t,number], [[t,number],[t,number],[t,number]]]]],        [[[n,call1b],[output,input]]],[        [[n,call1b],[[v,b],[v,a]],":-",        [       [[n,call],[[lang,same],same,[[n,member2a],[[v,b],[v,a]]],        [[[n,member2a],[[t,number],[[t,number],[t,number],[t,number]]]]],        [[[n,member2a],[output,input]]],[[[n,member2a],[[v,b],[v,a]],":-",        [       [[n,member],[[v,b],[v,a]]],[[n,cut]]]        ]]]],        [[n,cut]]]]               ],[[[[v,b],1]]]).
testopen_cases(1,[[n,datetime],[[v,year],[v,month],[v,day],[v,hour],[v,minute],[v,second]]],[[[n,datetime],[[v,y],[v,m],[v,d],[v,h],[v,mi],[v,s]],":-",[[[n,date],[[v,y],[v,m],[v,d],[v,h],[v,mi],[v,s]]]]]]       ).
testopen_cases(2,[[n,algwriter],[[v,na]]],[        [[n,algwriter],[[v,na]],":-",        [       [[n,makerandomlist],[3,[],[v,r1]]],                [[n,makerandomlist],[3,[],[v,r2]]],                [[n,wrap],[[v,r1],[v,nb1]]],                [[n,wrap],[[v,r2],[v,nb2]]],                [[n,append],[[v,nb1],[v,nb2],[v,nb3]]],                [[n,randomfns],[8,[v,nb3],[v,na]]]        ]],        [[n,makerandomlist],[0,[v,a],[v,a]]],        [[n,makerandomlist],[[v,a],[v,c1],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],0]]]],                [[n,random],[[v,r]]],                [[n,*],[[v,r],5,[v,r1]]],                [[n,ceiling],[[v,r1],[v,n1]]],                [[n,wrap],[[v,n1],[v,n2]]],                [[n,append],[[v,c1],[v,n2],[v,nb3]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,makerandomlist],[[v,d],[v,nb3],[v,c]]]        ]],                [[n,randomfns],[0,        [v,a],[v,a]]],        [[n,randomfns],[[v,a],[v,b],        [v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],0]]]],                [[n,randomlist],[[v,b],[v,na1]]],                [[n,randomlist],[[v,b],[v,na2]]],                [[n,randomfn],[[v,na1],[v,na2],[v,nb]]],                [[n,wrap],[[v,nb],[v,nb2]]],                [[n,append],[[v,b],[v,nb2],[v,nb3]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,randomfns],[[v,d],                [v,nb3],[v,c]]]        ]],        [[n,randomlist],[[v,b],[v,na]],":-",        [       [[n,random],[[v,r]]],                [[n,length],[[v,b],[v,bl]]],                [[n,*],[[v,r],[v,bl],[v,n]]],                [[n,ceiling],[[v,n],[v,n1]]],                [[n,getitemn],[[v,n1],[v,b],[v,na]]]        ]],        [[n,getitemn],[0,[v,a],[]]],        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]],                [[n,randomfn],[[v,a1],[v,a2],[v,b]],":-",        [                [[n,random],[[v,r]]],                [[n,*],[[v,r],9,[v,n]]],                [[n,ceiling],[[v,n],[v,n1]]],                [[n,fna],[[v,n1],[v,a1],[v,a2],[v,b]]]        ]],        [[n,fna],[1,[v,a1],[v,a2],[v,b]],":-",        [                [[n,reverse],[[v,a1],[],[v,b]]]        ]],                [[n,fna],[2,[v,a1],[v,a2],[v,b]],":-",        [                [[n,sort0],[[v,a1],[v,b]]]        ]],                        [[n,fna],[3,[v,a1],[v,a2],[v,b]],":-",        [                [[n,findall1],[[n,dividebyfour],[v,a1],[],[v,b]]]        ]],                [[n,fna],[4,[v,a1],[v,a2],[v,b]],":-",        [                [[n,append1],[[v,a1],[v,a2],[v,b]]]        ]],                [[n,fna],[5,[v,a1],[v,a2],[v,b]],":-",        [                [[n,findall1],[[n,plusone],[v,a1],[],[v,b]]]        ]],                [[n,fna],[6,[v,a1],[v,a2],[v,b]],":-",        [                [[n,findall1],[[n,plustwo],[v,a1],[],[v,b]]]        ]],                [[n,fna],[7,[v,a1],[v,a2],[v,b]],":-",        [                [[n,findall1],[[n,multiplybytwo],[v,a1],[],[v,b]]]        ]],                [[n,fna],[8,[v,a1],[v,a2],[v,b]],":-",        [                [[n,minus1],[[v,a1],[v,a2],[v,b]]]        ]],                [[n,fna],[9,[v,a1],[v,a2],[v,b]],":-",        [                [[n,intersection1],[[v,a1],[v,a2],[],[v,b]]]        ]],                [[n,reverse],[[],[v,l],[v,l]]],        [[n,reverse],[[v,l],[v,m],[v,n]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,wrap],[[v,h],[v,h1]]],                [[n,append],[[v,h1],[v,m],[v,o]]],                [[n,reverse],[[v,t],[v,o],[v,n]]]        ]        ],        [[n,sort0],[[v,l],[v,n]],":-",        [       [[n,sort1],[[v,l],[],[v,n]]]        ]        ],        [[n,sort1],[[],[v,l],[v,l]]],        [[n,sort1],[[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,maximum],[[v,t],[v,h],[v,m2],[],[v,r]]],                [[n,wrap],[[v,m2],[v,m3]]],                [[n,append],[[v,m1],[v,m3],[v,m4]]],                [[n,sort1],[[v,r],[v,m4],[v,n]]]        ]        ],        [[n,maximum],[[],[v,l],[v,l],[v,r],[v,r]]],        [[n,maximum],[[v,l],[v,m1],[v,n],[v,r1],[v,r2]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,"->"],[[[n,>=],[[v,m1],[v,h]]],                        [[[n,=],[[v,m2],[v,m1]]],                        [[n,wrap],[[v,h],[v,h2]]],                        [[n,append],[[v,r1],[v,h2],[v,r3]]]],                        [[[[n,=],[[v,m2],[v,h]]]],                        [[n,wrap],[[v,m1],[v,m12]]],                        [[n,append],[[v,r1],[v,m12],[v,r3]]]]]],                [[n,maximum],[[v,t],[v,m2],[v,n],[v,r3],[v,r2]]]        ]        ],        [[n,map],[[v,f],[],[v,l],[v,l]]],        [[n,map],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[v,f],[[v,m1],[v,h],[v,m2]]],                [[n,map],[[v,f],[v,t],[v,m2],[v,n]]]        ]        ],        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]        ],        [[n,findall1],[[v,f],[],[v,l],[v,l]]],        [[n,findall1],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,"->"],[[[v,f],[[v,h],[v,m2]]],                [       [[n,wrap],[[v,m2],[v,m3]]],                        [[n,append],[[v,m1],[v,m3],[v,m4]]]                ],                [                        [[n,=],[[v,m1],[v,m4]]]                ]]],                [[n,findall1],[[v,f],[v,t],[v,m4],[v,n]]]        ]        ],        [[n,plusone],[[v,a],[v,c]],":-",        [       [[n,+],[[v,a],1,[v,c]]]        ]        ],        [[n,plustwo],[[v,a],[v,c]],":-",        [       [[n,+],[[v,a],2,[v,c]]]        ]        ],        [[n,multiplybytwo],[[v,a],[v,c]],":-",        [       [[n,*],[[v,a],2,[v,c]]]        ]        ],        [[n,dividebyfour],[[v,a],[v,c]],":-",        [       [[n,/],[[v,a],4,[v,c]]]        ]        ],[[n,intersection1],[[], [v,a], [v,l], [v,l]]],[[n,intersection1],[[v,l1], [v,l2], [v,l3a], [v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,intersection2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,intersection1],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,intersection2],[[v,a], [], [v,l], [v,l]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l5]]],[[n,intersection2],[[v,i1], [v,l4], [v,l5], [v,l3]]]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1], [v,l4], [v,l2], [v,l3]]]]],        [[n,append1],[[v,b],[v,c],[v,a]],":-",        [                [[n,append],[[v,b],[v,c],[v,a]]]        ]        ],[[n,minus1],[[v,l], [], [v,l]]],[[n,minus1],[[v,l1], [v,l2], [v,l3]],":-",[[[n,head],[[v,l2],[v,i1]]],[[n,tail],[[v,l2],[v,l5]]],[[n,delete2],[[v,l1],[v,i1],[],[v,l6]]],[[n,minus1],[[v,l6], [v,l5], [v,l3]]]]],[[n,delete2],[[], [v,a], [v,l], [v,l]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l5]]],[[n,delete2],[[v,l5],[v,i1],[v,l2],[v,l3]]]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l5]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,wrap],[[v,i2],[v,i21]]],[[n,append],[[v,l2],[v,i21],[v,l6]]],[[n,delete2],[[v,l5],[v,i1],[v,l6],[v,l3]]]]]]).testopen_cases(3,[[n,episode_character],[[v,a]]],[        [[n,episode_character],[[v,ds3]],":-",        [                        [[n,findall],[[v,ds2],         [         [[n,member],[[v,l1],[1,2,3,4]]],         [[n,findall],[[v,ds1],         [         [[n,member],[[v,l2],[1,2,3,4]]],         [[n,findall],[[[v,l1],[v,l2],[v,l3],[v,d]],         [         [[n,member],[[v,l3],[1,2,3,4]]],         [[n,equals4],[[v,line],["Level",[v,l1],[v,l2],[v,l3],         "Please write a detail."]]],         [[n,writeln],[[v,line]]],         [[n,read_string],[[v,d]]]],        [v,ds1]]]],         %[[n,=],[[v,item1],[v,item1b]]]],        [v,ds2]]]]        ,         %[[n,=],[[v,item1],[v,item1b]]]],        [v,ds3]]]            ]]]).%,[[[[v,a],"success"]]]).
testopen_cases(2,[[n,algwriter],[[v,na]]],[        [[n,algwriter],[[v,na]],":-",        [       [[n,makerandomlist],[3,[],[v,r1]]],                [[n,makerandomlist],[3,[],[v,r2]]],                [[n,wrap],[[v,r1],[v,nb1]]],                [[n,wrap],[[v,r2],[v,nb2]]],                [[n,append],[[v,nb1],[v,nb2],[v,nb3]]],                [[n,randomfns],[8,[v,nb3],[v,na]]]        ]],        [[n,makerandomlist],[0,[v,a],[v,a]]],        [[n,makerandomlist],[[v,a],[v,c1],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],0]]]],                [[n,random],[[v,r]]],                [[n,*],[[v,r],5,[v,r1]]],                [[n,ceiling],[[v,r1],[v,n1]]],                [[n,wrap],[[v,n1],[v,n2]]],                [[n,append],[[v,c1],[v,n2],[v,nb3]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,makerandomlist],[[v,d],[v,nb3],[v,c]]]        ]],                [[n,randomfns],[0,        [v,a],[v,a]]],        [[n,randomfns],[[v,a],[v,b],        [v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],0]]]],                [[n,randomlist],[[v,b],[v,na1]]],                [[n,randomlist],[[v,b],[v,na2]]],                [[n,randomfn],[[v,na1],[v,na2],[v,nb]]],                [[n,wrap],[[v,nb],[v,nb2]]],                [[n,append],[[v,b],[v,nb2],[v,nb3]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,randomfns],[[v,d],                [v,nb3],[v,c]]]        ]],        [[n,randomlist],[[v,b],[v,na]],":-",        [       [[n,random],[[v,r]]],                [[n,length],[[v,b],[v,bl]]],                [[n,*],[[v,r],[v,bl],[v,n]]],                [[n,ceiling],[[v,n],[v,n1]]],                [[n,getitemn],[[v,n1],[v,b],[v,na]]]        ]],        [[n,getitemn],[0,[v,a],[]]],        [[n,getitemn],[1,[v,b],[v,c]],":-",        [       [[n,head],[[v,b],[v,c]]]        ]],        [[n,getitemn],[[v,a],[v,b],[v,c]],":-",        [       [[n,not],[[[n,=],[[v,a],1]]]],                [[n,tail],[[v,b],[v,t]]],                [[n,-],[[v,a],1,[v,d]]],                [[n,getitemn],[[v,d],[v,t],[v,c]]]        ]],                [[n,randomfn],[[v,a1],[v,a2],[v,b]],":-",        [                [[n,random],[[v,r]]],                [[n,*],[[v,r],9,[v,n]]],                [[n,ceiling],[[v,n],[v,n1]]],                [[n,fna],[[v,n1],[v,a1],[v,a2],[v,b]]]        ]],        [[n,fna],[1,[v,a1],[v,a2],[v,b]],":-",        [                [[n,reverse],[[v,a1],[],[v,b]]]        ]],                [[n,fna],[2,[v,a1],[v,a2],[v,b]],":-",        [                [[n,sort0],[[v,a1],[v,b]]]        ]],                        [[n,fna],[3,[v,a1],[v,a2],[v,b]],":-",        [                [[n,findall],[[n,dividebyfour],[v,a1],[],[v,b]]]        ]],                [[n,fna],[4,[v,a1],[v,a2],[v,b]],":-",        [                [[n,append1],[[v,a1],[v,a2],[v,b]]]        ]],                [[n,fna],[5,[v,a1],[v,a2],[v,b]],":-",        [                [[n,findall],[[n,plusone],[v,a1],[],[v,b]]]        ]],                [[n,fna],[6,[v,a1],[v,a2],[v,b]],":-",        [                [[n,findall],[[n,plustwo],[v,a1],[],[v,b]]]        ]],                [[n,fna],[7,[v,a1],[v,a2],[v,b]],":-",        [                [[n,findall],[[n,multiplybytwo],[v,a1],[],[v,b]]]        ]],                [[n,fna],[8,[v,a1],[v,a2],[v,b]],":-",        [                [[n,minus1],[[v,a1],[v,a2],[v,b]]]        ]],                [[n,fna],[9,[v,a1],[v,a2],[v,b]],":-",        [                [[n,intersection1],[[v,a1],[v,a2],[],[v,b]]]        ]],                [[n,reverse],[[],[v,l],[v,l]]],        [[n,reverse],[[v,l],[v,m],[v,n]],":-",        [       [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,wrap],[[v,h],[v,h1]]],                [[n,append],[[v,h1],[v,m],[v,o]]],                [[n,reverse],[[v,t],[v,o],[v,n]]]        ]        ],        [[n,sort0],[[v,l],[v,n]],":-",        [       [[n,sort1],[[v,l],[],[v,n]]]        ]        ],        [[n,sort1],[[],[v,l],[v,l]]],        [[n,sort1],[[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,maximum],[[v,t],[v,h],[v,m2],[],[v,r]]],                [[n,wrap],[[v,m2],[v,m3]]],                [[n,append],[[v,m1],[v,m3],[v,m4]]],                [[n,sort1],[[v,r],[v,m4],[v,n]]]        ]        ],        [[n,maximum],[[],[v,l],[v,l],[v,r],[v,r]]],        [[n,maximum],[[v,l],[v,m1],[v,n],[v,r1],[v,r2]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,"->"],[[[n,>=],[[v,m1],[v,h]]],                        [[[n,=],[[v,m2],[v,m1]]],                        [[n,wrap],[[v,h],[v,h2]]],                        [[n,append],[[v,r1],[v,h2],[v,r3]]]],                        [[[[n,=],[[v,m2],[v,h]]]],                        [[n,wrap],[[v,m1],[v,m12]]],                        [[n,append],[[v,r1],[v,m12],[v,r3]]]]]],                [[n,maximum],[[v,t],[v,m2],[v,n],[v,r3],[v,r2]]]        ]        ],        [[n,map],[[v,f],[],[v,l],[v,l]]],        [[n,map],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[v,f],[[v,m1],[v,h],[v,m2]]],                [[n,map],[[v,f],[v,t],[v,m2],[v,n]]]        ]        ],        [[n,add],[[v,a],[v,b],[v,c]],":-",        [       [[n,+],[[v,a],[v,b],[v,c]]]        ]        ],        [[n,findall],[[v,f],[],[v,l],[v,l]]],        [[n,findall],[[v,f],[v,l],[v,m1],[v,n]],":-",        [       [[n,not],[[[n,=],[[v,l],[]]]]],                [[n,head],[[v,l],[v,h]]],                [[n,tail],[[v,l],[v,t]]],                [[n,"->"],[[[v,f],[[v,h],[v,m2]]],                [       [[n,wrap],[[v,m2],[v,m3]]],                        [[n,append],[[v,m1],[v,m3],[v,m4]]]                ],                [                        [[n,=],[[v,m1],[v,m4]]]                ]]],                [[n,findall],[[v,f],[v,t],[v,m4],[v,n]]]        ]        ],        [[n,plusone],[[v,a],[v,c]],":-",        [       [[n,+],[[v,a],1,[v,c]]]        ]        ],        [[n,plustwo],[[v,a],[v,c]],":-",        [       [[n,+],[[v,a],2,[v,c]]]        ]        ],        [[n,multiplybytwo],[[v,a],[v,c]],":-",        [       [[n,*],[[v,a],2,[v,c]]]        ]        ],        [[n,dividebyfour],[[v,a],[v,c]],":-",        [       [[n,/],[[v,a],4,[v,c]]]        ]        ],[[n,intersection1],[[], [v,a], [v,l], [v,l]]],[[n,intersection1],[[v,l1], [v,l2], [v,l3a], [v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,intersection2],[[v,i1],[v,l2],[],[v,l5]]],[[n,append],[[v,l3a],[v,l5],[v,l6]]],[[n,intersection1],[[v,l4],[v,l2],[v,l6],[v,l3]]]]],[[n,intersection2],[[v,a], [], [v,l], [v,l]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l4]]],[[n,wrap],[[v,i1],[v,i11]]],[[n,append],[[v,l2],[v,i11],[v,l5]]],[[n,intersection2],[[v,i1], [v,l4], [v,l5], [v,l3]]]]],[[n,intersection2],[[v,i1], [v,l1], [v,l2], [v,l3]], ":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l4]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,intersection2],[[v,i1], [v,l4], [v,l2], [v,l3]]]]],        [[n,append1],[[v,b],[v,c],[v,a]],":-",        [                [[n,append],[[v,b],[v,c],[v,a]]]        ]        ],[[n,minus1],[[v,l], [], [v,l]]],[[n,minus1],[[v,l1], [v,l2], [v,l3]],":-",[[[n,head],[[v,l2],[v,i1]]],[[n,tail],[[v,l2],[v,l5]]],[[n,delete2],[[v,l1],[v,i1],[],[v,l6]]],[[n,minus1],[[v,l6], [v,l5], [v,l3]]]]],[[n,delete2],[[], [v,a], [v,l], [v,l]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i1]]],[[n,tail],[[v,l1],[v,l5]]],[[n,delete2],[[v,l5],[v,i1],[v,l2],[v,l3]]]]],[[n,delete2],[[v,l1],[v,i1],[v,l2],[v,l3]],":-",[[[n,head],[[v,l1],[v,i2]]],[[n,tail],[[v,l1],[v,l5]]],[[n,not],[[[n,=],[[v,i1],[v,i2]]]]],[[n,wrap],[[v,i2],[v,i21]]],[[n,append],[[v,l2],[v,i21],[v,l6]]],[[n,delete2],[[v,l5],[v,i1],[v,l6],[v,l3]]]]]]).
tetrahedron_centre_3d(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X4,Y4,Z4,QX,QY,QZ) :- QX is floor((X1 + X2 + X3 + X4)/4), QY is floor((Y1 + Y2 + Y3 + Y4)/4), QZ is floor((Z1 + Z2 + Z3 + Z4)/4).
text(1,"a b c d").
texttobr2(A) :- A1 is 250*A, t2b_br_adder(A1), texttobr2_2(A).
texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,W) :-texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,0,[auto,off]).
texttobr2(N1,Filex1,Stringx1,M1,[auto,on]) :-texttobr2(N1,Filex1,Stringx1,M1,false,false,false,false,false,false,0,[auto,on]),!.
texttobr2(N1,Filex1,Stringx1,M1,[auto,on]) :-texttobr2(N1,Filex1,Stringx1,M1,false,false,false,false,false,false,0,[auto,on]),!./*texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish) :-texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,0,[auto,off]).
texttobr2(medicine,[[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[equals,1,1,0],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[baby,30,50,20],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[plus,1,1,0],[zero,1,1.5,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[equals,1,1,0],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[baby,30,50,20],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[plus,1,1,0],[zero,1,1.5,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[equals,1,1,0],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[baby,30,50,20],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[plus,1,1,0],[zero,1,1.5,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[equals,1,1,0],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[baby,30,50,20],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[plus,1,1,0],[zero,1,1.5,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[heart,1,1,0],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[equals,1,1,0],[dash,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180]]).
texttobr2(meditation,[[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[a,1,1.5,0],[dash,1,1,0],[person,50,30,180],[person,50,30,180],[hair,1,0,0],[person,50,30,180],[nail,0.3,0.3,3],[person,50,30,180],[person,50,30,180],[square,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[down,1,1,0],[equals,1,1,0],[square,1,1,0],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[left,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[apple,5,5,5],[n,1,1,0],[right,1,1,0],[left,1,1,0],[down,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[a,1,1.5,0],[dash,1,1,0],[person,50,30,180],[person,50,30,180],[hair,1,0,0],[person,50,30,180],[nail,0.3,0.3,3],[person,50,30,180],[person,50,30,180],[square,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[down,1,1,0],[equals,1,1,0],[square,1,1,0],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[left,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[apple,5,5,5],[n,1,1,0],[right,1,1,0],[left,1,1,0],[down,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[a,1,1.5,0],[dash,1,1,0],[person,50,30,180],[person,50,30,180],[hair,1,0,0],[person,50,30,180],[nail,0.3,0.3,3],[person,50,30,180],[person,50,30,180],[square,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[down,1,1,0],[equals,1,1,0],[square,1,1,0],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[left,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[apple,5,5,5],[n,1,1,0],[right,1,1,0],[left,1,1,0],[down,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[a,1,1.5,0],[dash,1,1,0],[person,50,30,180],[person,50,30,180],[hair,1,0,0],[person,50,30,180],[nail,0.3,0.3,3],[person,50,30,180],[person,50,30,180],[square,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[down,1,1,0],[equals,1,1,0],[square,1,1,0],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[left,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[apple,5,5,5],[n,1,1,0],[right,1,1,0],[left,1,1,0],[down,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[a,1,1.5,0],[dash,1,1,0],[person,50,30,180],[person,50,30,180],[hair,1,0,0],[person,50,30,180],[nail,0.3,0.3,3],[person,50,30,180],[person,50,30,180],[square,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[down,1,1,0],[equals,1,1,0],[square,1,1,0],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[person,50,30,180],[apple,5,5,5],[left,1,1,0],[a,1,1.5,0],[person,50,30,180],[plus,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[apple,5,5,5],[n,1,1,0],[right,1,1,0],[left,1,1,0],[down,1,1,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[a,1,1.5,0],[dash,1,1,0],[person,50,30,180],[person,50,30,180],[hair,1,0,0],[person,50,30,180],[nail,0.3,0.3,3],[person,50,30,180],[person,50,30,180],[square,1,1,0]]).
texttobr2(pedagogy,[[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[baby,30,50,20],[up,1,1,0],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[square,1,1,0],[box,1,1,1],[down,1,1,0],[and,1,1,0],[square,1,1,0],[down,1,1,0],[square,1,1,0],[equals,1,1,0],[person,50,30,180],[zero,1,1.5,0],[a,1,1.5,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[baby,30,50,20],[up,1,1,0],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[square,1,1,0],[box,1,1,1],[down,1,1,0],[and,1,1,0],[square,1,1,0],[down,1,1,0],[square,1,1,0],[equals,1,1,0],[person,50,30,180],[zero,1,1.5,0],[a,1,1.5,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[baby,30,50,20],[up,1,1,0],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[square,1,1,0],[box,1,1,1],[down,1,1,0],[and,1,1,0],[square,1,1,0],[down,1,1,0],[square,1,1,0],[equals,1,1,0],[person,50,30,180],[zero,1,1.5,0],[a,1,1.5,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[baby,30,50,20],[up,1,1,0],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[square,1,1,0],[box,1,1,1],[down,1,1,0],[and,1,1,0],[square,1,1,0],[down,1,1,0],[square,1,1,0],[equals,1,1,0],[person,50,30,180],[zero,1,1.5,0],[a,1,1.5,0],[equals,1,1,0],[plus,1,1,0],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[baby,30,50,20],[up,1,1,0],[person,50,30,180],[heart,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[down,1,1,0],[person,50,30,180],[heart,1,1,0],[person,50,30,180],[person,50,30,180],[plus,1,1,0],[person,50,30,180],[plus,1,1,0],[a,1,1.5,0]]).
texttobr2_1(A) :- A1 is 4*250*A, t2b_br_adder(A1), texttobr2_12(A).texttobr2_12(0):-!.
texttobr2_2(0):-!.
texttobr2_a(A,B) :- A1 is 250*A, t2b_br_adder(A1), texttobr2_a2(A,B).
texttobr2_a2(0,_):-!.texttobr2_a2(N1,A):-texttobr2(A,_),N2 is N1-1,texttobr2_a2(N2,A),!.
texttobr2qb(0):-!.
texttobrc1(0,_,_,_) :- !.
theological_surgery :- findall(_,(healthy(Organ),texttobr2(1),writeln(["I am happy with my",Organ,"organ"])),_).
think_of_all(A,B) :-forall(member(C,A),member(C,B)).
time((M is 1,W is 50*4,texttobr2(M,u,u,u,false,false,false,false,false,false,W),texttobr(M,u,u,u))).
time(1,[*,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-]).time(2,[-,-,*,-,-,-,-,-,-,-,-,-,-,-,-,-,-]).time(3,[-,-,-,*,-,-,-,-,-,-,-,-,-,-,-,-,-]).time(4,[-,-,-,-,-,-,*,-,-,-,-,-,-,-,-,-,-]).
time1(1,nothing).
time_limit(1).
time_limit(Time_limit),foldr(string_concat,["#!/usr/bin/swipl -g main -q\n\n",":-include('../",Repository1b,"/",%Go_path5,File%File,"').\n","handle_error(_Err):-\n  halt(1).\n","main :-\n    catch(call_with_time_limit(",Time_limit,",(",Command1,")), Err, handle_error(Err)), nl,\n    halt.\n","main :- halt(1).\n"],String),%trace,%working_directory1(_,A),foldr(string_concat,[%"../private2/luciancicd-testing/",Repository1b,"/",Go_path5,"testcicd.pl"],GP),%string_concat(Go_path,"testcicd.pl",GP),open_s(GP,write,S1),write(S1,String),close(S1),sleep(2),foldr(string_concat,["chmod +x ",GP,"\n","swipl -g main -q ./",GP],S3),%, %(Test_n0=5->trace;true),/*catch(call_with_time_limit(7,bash_command(S3,_)),_,(foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text4),%writeln1(Text4),fail%abort ))*/%/*%sleep(2),%test_n(Test_n2),%(0 is Test_n2 mod 10->(writeln12("Waiting 30 seconds."),sleep(30));true),catch(bash_command(S3,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text4),%writeln1(Text4),fail%abort )) %*/%Command)->((Result=success,%trace,retractall(pred_list(_)),%trace,assertz(pred_list(T471A))%)));(Result=fail%,trace)),%trace,writeln12([Go_path1,File,Command1,Result]));Result=fail)),Results2),flatten(Results2,Results2a),(forall(member(Result,Results2a),Result=success)->(retractall(success(_)),assertz(success(1)));true)%, (Test_n0=4->trace;true)%;%true))),Results3)%,flatten(Results3,Results3a),(forall(member(Result,Results3a),Result=success)->(success_tmp(Tmp),append(Tmp,[1],Tmp1),retractall(success_tmp(_)),assertz(success_tmp(Tmp1)));%(success_tmp(Tmp),append(Tmp,[0],Tmp1),retractall(success_tmp(_)),assertz(success_tmp(Tmp1)))),flatten(Results3,Results3a),(forall(member(Result,Results3a),Result=success)->(retractall(success(_)),assertz(success(1)));true)%),_)),_Results1),%trace,/* pred_list_v(T8), pred_list(Pred_list), append(Pred_list,T8,Pred_list2), retractall(pred_list(_)), assertz(pred_list(Pred_list2%Dependencies7d )) */ (success(0)->(writeln2("Current predicate set failed."),retractall(success(_)),assertz(success(1)),fail%,abort,working_directory1(_,A1) );(writeln2("Current predicate set passed."),%trace, %leash(-all), %trace,sleep(0.5) retractall(success(_)),assertz(success(0)) ))),Result4),length(Dependencies7d7,Dependencies7d7L),length(Result4,Dependencies7d7L)),Result5),%trace,%flatten(Results1,Results2),%Results2=Results21,%findall1(Result4,(member(Result4,Results2),not(var(Result4))),Results21), %success_tmp(_Tmp37),(true%forall(member(Tmp4,Tmp37),Tmp4=1) %->(retractall(success(_)),assertz(success(1)));%(retractall(success(_)),assertz(success(0)))),((length(H3,H3L),length(Result5,H3L))%success(1)%(forall(member(Result3,Results21),(not(var(Result3)),Result3=success))%,not(Results21=[])->% Only save mod times if all tests passed(working_directory1(_,A1),/*foldr(string_concat,["rm -rf ../private2/luciancicd-data/"],Command31), catch(bash_command(Command31,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],Text41),writeln1(Text41),abort )),(exists_directory('../private2/luciancicd-data')->true;make_directory('../private2/luciancicd-data')),*/findall1(_,(member([K21,Mod_time521],Mod_times2),open_s(K21,write,S21),write(S21,Mod_time521),close(S21)),_),sleep(2),move_to_repository_or_back,retractall(ci_end(_)),assertz(ci_end(true)),ci,ci_end,%pwd,remove_end_comment,writeln2("All tests were successful."),home_dir(HD),working_directory1(_,HD),S001=0,retractall(success1(_)),assertz(success1(S001)));((true%not(Results21=[])->(working_directory1(_,A1),remove_end_comment,writeln2("1 or more tests failed."),S001=1,retractall(success1(_)),assertz(success1(S001)));true))))),working_directory1(_,A1),%success(S000),working_directory1(A22,A22),repositories_paths([Path]),working_directory1(_,Path), (exists_directory_s("../lc_logs/")->true;make_directory_s("../lc_logs/")),%trace,log(Log),term_to_atom(Log,Log1),%Log1=[Log],time1(Time),foldr(string_concat,["../lc_logs/log",Time,".txt"],Log_file_name),open_s(Log_file_name,write,S21T),write(S21T,[S001,Log1]),close(S21T),sleep(2),retractall(ci_end(_)),assertz(ci_end(false)),%trace,luciancicd_ws1,retractall(time1(_)),working_directory1(_,A22).
time_machine_prepare :-K=["../Lucian-Academy/Books/Time Travel/","../Lucian-Academy/Books/Fundamentals of Pedagogy and Pedagogy Indicators/","../Lucian-Academy/Books/Medicine/","../Lucian-Academy/Books/Fundamentals of Meditation and Meditation Indicators/","../Lucian-Academy/Books/Lecturer/","../Lucian-Academy/Books/Delegate workloads, Lecturer, Recordings/","../Lucian-Academy/Books/Mind Reading/"],findall(J,(member(K1,K),directory_files(K1,F),delete_invisibles_etc(F,G),findall([File_term,"\n"],(member(H,G),string_concat(K1,H,H1),open_file_s(H1,File_term)),J)),J3),flatten(J3,J1),foldr(string_concat,J1,"",J2),N=1,M=u,texttobr2(N,u,J2,M,false,false,false,false,false,false),N=1,M=u,texttobr(N,u,J2,M).
today(Y,M,D) :- date(Y, M, D).
too_long1(List4) :-too_long2(List4,0,N),N>=250.
too_long2([],N,N) :- !.
topk_vote(T,Vote):-    pairs_values(T,V),    msort(V,VSorted),    length(T,L),    L2 #= L div 2,    length(First,L2),    append(First,[Vote|_Rest],VSorted).
toss_coin :-random(X),X1 is ceiling(2*X), X1 is 2,!.
total_categories(T) :-data(D),D=[D1|_],length(D,L1),length(D1,L2),numbers(L1,1,[],N1),numbers(L2,1,[],N2),findall(I3,(member(N12,N1),get_item_n(D,N12,I),findall(I2,(member(N22,N2),get_item_n(I,N22,I2)),I3)),I4),findall(I6,(member(I5,I4),sum(I5,0,I6)),T).
total_months(T) :-data(D),D=[D1|_],length(D,L1),length(D1,L2),numbers(L1,1,[],N1),numbers(L2,1,[],N2),findall(I3,(member(N22,N2),findall(I2,(member(N12,N1),get_item_n(D,N12,I),get_item_n(I,N22,I2)),I3)),I4),findall(I6,(member(I5,I4),sum(I5,0,I6)),T).
towords2([],A,A) :- !.
towords2([],A,A) :- !.towords2(BrDict03,A,B) :-BrDict03=[[Word,_,_,_]|Rest],%%atom_string(Atom,Word),append(A,[Word],C),towords2(Rest,C,B).
towords2a([],A,A) :- !.
towords2a([],A,A) :- !.towords2a(BrDict03,A,B) :-BrDict03=[[Word,_]|Rest],%%atom_string(Atom,Word),append(A,[Word],C),towords2a(Rest,C,B).
towords3([],A,A,C,C,D,D) :- !.
towords3([],A,A,C,C,D,D) :- !.towords3(BrDict03,A,B,D,E,G,H) :-BrDict03=[[Word1,Word2]|Rest],(Word2=""->append(G,[Word1],I)->true;append(G,[Word2],I)),append(A,[Word1],C),append(D,[Word2],F),towords3(Rest,C,B,F,E,I,H).
tranfrom([],TranFrom,TranFrom) :- !.
trans_alg(Algorithm1,From_lang,To_lang,Algorithm2) :-retractall(from_lang2(_)),assertz(from_lang2(From_lang)),retractall(to_lang2(_)),assertz(to_lang2(To_lang)),retractall(lang(_)),assertz(lang(To_lang)),load_lang_db,data([Algorithm1],[],[Algorithm2]),!.
trans_alg1(Query,"en",Lang,Query1) :-trans_alg(Query,"en",Lang,Query2),trans_alg(Query2,Lang,"en",Query1).
trans_gpt(A,A).
translate(Input,FromLang,ToLang,Output3) :-%%swap_quote_to_space(Input,Input1),insertdoublebackslashbeforequote(Input,Input1),concat_list(["../../../trans ",FromLang,":",ToLang," \"",Input1,"\""],F),%%atom_concat("export GOOGLE_APPLICATION_CREDENTIALS=\"/Users/luciangreen/Dropbox/Program Finder/possibly not working/translationmanagementsystem/Cultural Translation Tool-19XXXXXXb4.json\"\ncurl -s -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer \"$(/Users/luciangreen/Dropbox/Program\\ Finder/possibly\\ not\\ working/translationmanagementsystem/google-cloud-sdk/bin/gcloud auth application-default print-access-token)     --data \"{/**  'q': '",Input,A),atom_concat(A,"',  'source': '",B),atom_concat(B,FromLang,C),atom_concat(C,"',  'target': '",D),atom_concat(D,ToLang,E),atom_concat(E,"',  'format': 'text'}\" \"https://translation.googleapis.com/language/translate/v2\"",F),**/repeat,catch(call_with_time_limit(5,catch((bash_command(F,Output1)),   _,(writeln("Translate failed.  Press c to retry."),read_string(user_input, "\n", "\r", _,C),C="c"->fail;abort))),      time_limit_exceeded,      (writeln1("Error: translate timed out."),abort)),split_string(Output1,"\033","\033",Output2),Output2=[_,Output3a|_], %% *** May be 3rd item on Linux%%atom_concat("{\n  \"data\": {\n    \"translations\": [\n      {\n        \"translatedText\": \"",A1,Output1),atom_concat(Output2,"\"\n      }\n    ]\n  }\n}\n",A1),atom_string(Output3a,Output3b),string_concat("[1m",Output3,Output3b),%%string_concat(Output3,"\033\[22m",Output3c)!.
translate1("I love you.","en","fr","I love you tr.").translate1("I love you1.","en","fr","I love you1 tr.").
translate1("I love you3.","en","fr","I love you3 tr.").
translate1("Je t|aime.","en","fr","I love you.").
translate1("v","en","fr","v").
translate1("v","en","fr","v").translate1("true","en","fr","vrai").
translate1a(A,_,_,A1):-string_concat(A," tr",A1).translate2(A,From_lang,To_lang,B) :-(((number(A)->true;(data_symbol(A)))->(A=B));(get_lang_word3(A,From_lang,To_lang,B))).
translate_ctt2("Helloa.","en","fr","Bonjour.").
translate_ctt2("Helloc.","en","fr","Hellod.").
translate_ctt2("Hellocc.","en","fr","Hellodc.").
traverse(X,Y) :-traverse(X,Y,[],_,[],_).
traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2) :-member([Z,X,Y,Cell],Map1),append(Explored1,[[Z,X,Y]],Explored3a),sort(Explored3a,Explored3),location(Z,X,Y,Location),writeln(["At",Location]),%%trace,%% can take, drop objects, recorded in maze%%(Cell=[]->Inventory4a=Inventory1;%%(Cell=Items,append(Inventory1,[Item],Inventory3),%%apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),%%writeln(Inventory4a),%% Find, accept only available directions(member("e",Inventory1)->(writeln("Game Over"),true);true),%%append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,check(Z,Xm1,Y,"w",[],Directions1,Map1),check(Z,X,Ym1,"s",Directions1,Directions2,Map1),check(Z,Xp1,Y,"e",Directions2,Directions3,Map1),check(Z,X,Yp1,"n",Directions3,Directions4,Map1),check(Zm1,X,Y,"d",Directions4,Directions5,Map1),check(Zp1,X,Y,"u",Directions5,Directions6,Map1),writeln1(["go",Directions6,"take",Cell,"drop",Inventory1,"map, or apply an object to an object."]),writeln(["Type e.g. [\"<command>\",\"<object>\"]"]),read_string(user_input, "\n", "\r", _End,Input1),term_to_atom(Input2,Input1),%%downcase_atom(Input1,Input1a),atom_string(Input1a,Input1b),%%trace,%%split_string(Input1b, ", ", ", ", Input2),(((Input2=["go","n"]->true;Input2=["n"]),(member("n",Directions6)->traverse(Z,X,Yp1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go n"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["map"]->true;Input2=["m"]),((%trace,map_dimensions([X2,Y2,Z2]),print_map(Map1,X2,Y2,Z2,X,Y,Z))->true;;(writeln(["You can't view the map."]))),traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2,Map1,Map2))->true;((Input2=["go","e"]->true;Input2=["e"]),(member("e",Directions6)->traverse(Z,Xp1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go e"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","s"]->true;Input2=["s"]),(member("s",Directions6)->traverse(Z,X,Ym1,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go s"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","w"]->true;Input2=["w"]),(member("w",Directions6)->traverse(Z,Xm1,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go w"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","u"]->true;Input2=["u"]),(member("u",Directions6)->traverse(Zp1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go u"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;((Input2=["go","d"]->true;Input2=["d"]),(member("d",Directions6)->traverse(Zm1,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2);(writeln(["You can't go d"]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["take",Item_to_take],((atom_string(Item_to_take_a,Item_to_take),(member(Item_to_take_a,Cell)->delete(Cell,Item_to_take_a,Cell2);(member(Item_to_take,Cell),delete(Cell,Item_to_take,Cell2))),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4),append(Inventory1,[Item_to_take],Inventory3))->(writeln(["You have taken",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't take",Item_to_take]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["drop",Item_to_drop],((%%atom_string(Item_to_drop_a,Item_to_drop),member(Item_to_drop,Inventory1),delete(Inventory1,Item_to_drop,Inventory3),append(Cell,[Item_to_drop],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have dropped",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory3,Inventory2,Map4,Map2));(writeln(["You can't drop",Item_to_drop]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(Input2=["apply",First_item,"to",Second_item],%%trace,((member(First_item,Inventory1),member(Second_item,Inventory1),%%atom_string(First_item_a,First_item),atom_string(Second_item_a,Second_item),apply(Apply),member([First_item,Second_item,Third_item_a],Apply),atom_string(Third_item_a,Third_item),append(Cell,[Third_item],Cell2),delete(Map1,[Z,X,Y,_],Map3),append(Map3,[[Z,X,Y,Cell2]],Map4))->(writeln(["You have applied",First_item,"to",Second_item,"producing",Third_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map4,Map2));(writeln(["You can't apply",First_item,"to",Second_item]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))))->true;(writeln(["I don't understand."]),traverse(Z,X,Y,Explored3,Explored2,Inventory1,Inventory2,Map1,Map2))).
traverse(dfs_in_order,Items1,Items2) :- dfs_in_order(Items1,[],Items2).
traverse(dfs_post_order,Items1,Items2) :- dfs_post_order(Items1,[],Items2).
traverse_tree(N1,Tree) :-%member([N1,Item,_],Tree),%writeln(Item),%trace,findall([N1,Option,N2],member([N1,Option,N2],Tree),Options2),(Options2=[]->true;(findall(Option,member([N1,Option,N2],Options2),Options3),writeln1(Options3),read_string(user_input,"\n","\r",_,S),%length(Options3,L),%numbers(L,1,[],LN),%member(L1,LN),member([_,S,N2],Options2),traverse_tree(N2,Tree))),!.
trial0(Av) :- N is 10, %trial1(N,0,S),catch(trial1(N,0,S),   _,(trial0(Av)%,writeln(S3))),Av is S/N.
trial0(S3) :- N is 10, catch((trial1(N,[],S),trial01(S,S3)),   _,trial0(S3)).
trial0(S3) :- N is 10, catch((trial1(N,[],S),trial01(S,S3)),   _,trial0(S3)).trial01(S1,S3) :-sort(S1,S),%%midpoint(S,MP),halves(S,H1,H2),midpoint(H1,Q1),midpoint(H2,Q3),IQR is Q3-Q1,sum(S,0,S02),mean(S02,Mean),furthestfrommean(S,Mean,V),D1 is 1.5*IQR,D2 is V-Mean,(D2>D1->(delete(S,V,S2),trial01(S2,S3));S=S3).
trial0(S3) :- N is 10, %trial1(N,[],S),trial01(S,S3).
trial0(S3) :- N is 10, trial1(N,[],S),trial01(S,S3).
trial0(S3) :- N is 10, trial1(N,[],S),trial01(S,S3).trial01(S1,S3) :-sort(S1,S),%%midpoint(S,MP),halves(S,H1,H2),midpoint(H1,Q1),midpoint(H2,Q3),IQR is Q3-Q1,sum(S,0,S02),mean(S02,Mean),furthestfrommean(S,Mean,V),D1 is 1.5*IQR,D2 is V-Mean,(D2>D1->(delete(S,V,S2),trial01(S2,S3));S=S3).
trial01(S1,S3) :-sort(S1,S),%%midpoint(S,MP),halves(S,H1,H2),midpoint(H1,Q1),midpoint(H2,Q3),IQR is Q3-Q1,sum(S,0,S02),mean(S02,Mean),furthestfrommean(S,Mean,V),D1 is 1.5*IQR,D2 is V-Mean,(D2>D1->(delete(S,V,S2),trial01(S2,S3));S=S3).
trial1(0,A,A) :- !.
trialy1(R1) :-%%control11(A1),trial0(A22), %% Controlsum(A22,0,S22),mean(S22,A1),trial0(A21), %% Test 1sum(A21,0,S02),mean(S02,A2),(A1>A2->R1=true;R1=fail).
trialy1(R1) :-trial0(A1), %% Controltrial0(A2), %% Test 1(A1>A2->R1=true;R1=fail).
trialy2([],R) :-R=[[_,['C']]].
trialy2([],R) :-R=[[_,['C']]].%%writeln([[],in,trialy2]),abort.trialy2(List,R) :-length(List,Length),%%writeln([list,List]),%%notrace,log(Length,A),log(10,C),B is floor(A/C)+1,numbers(B,1,[],D),findall(R,(member(_E,D),findr4(R1),number_string(R1,R)),RL),B2 is floor(10^((floor(A/C)+1))-1),formr5(RL,B2,Length,R5),findr(R5,List,R).
trialy21(Label,Trials,RA) :-trialy3(Trials,[],R),aggregate_all(count, member(true,R), Count),RA=[Count,Label].
trialy21(Label,Trials,RA) :-trialy3(Trials,[],R),aggregate_all(count, member(true,R), Count),RA=[Count,Label].trialy3(0,R,R) :-!.
trialy2A([],R) :-R=[[_,'A']].
trialy2A([],R) :-R=[].
trialy2_15(Label,RA) :-%%writeln([testing,Label]),trialy1(R1),trialy1(R2),trialy1(R3),trialy1(R4),trialy1(R5),trialy1(R6),trialy1(R7),trialy1(R8),trialy1(R9),trialy1(R10),trialy1(R11),trialy1(R12),trialy1(R13),trialy1(R14),trialy1(R15),/**trialy1(R16),trialy1(R17),trialy1(R18),trialy1(R19),trialy1(R20),trialy1(R21),trialy1(R22),trialy1(R23),trialy1(R24),trialy1(R25),trialy1(R26),trialy1(R27),trialy1(R28),trialy1(R29),trialy1(R30),**/R=[R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15 /**,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30**/],%%(member(true,R)->(aggregate_all(count, member(true,R), Count),RA=[Count,Label].%%,writeln([Label,Count,"/10"]));true).
trialy2_15(Label,RA) :-%%writeln([testing,Label]),trialy1(R1),trialy1(R2),trialy1(R3),trialy1(R4),trialy1(R5),trialy1(R6),trialy1(R7),trialy1(R8),trialy1(R9),trialy1(R10),trialy1(R11),trialy1(R12),trialy1(R13),trialy1(R14),trialy1(R15),/**trialy1(R16),trialy1(R17),trialy1(R18),trialy1(R19),trialy1(R20),trialy1(R21),trialy1(R22),trialy1(R23),trialy1(R24),trialy1(R25),trialy1(R26),trialy1(R27),trialy1(R28),trialy1(R29),trialy1(R30),**/R=[R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15 /**,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30**/],%%(member(true,R)->(aggregate_all(count, member(true,R), Count),RA=[Count,Label].%%,writeln([Label,Count,"/10"]));true).trialy2_30(Label,RA) :-%%writeln([testing,Label]),trialy1(R1),trialy1(R2),trialy1(R3),trialy1(R4),trialy1(R5),trialy1(R6),trialy1(R7),trialy1(R8),trialy1(R9),trialy1(R10),trialy1(R11),trialy1(R12),trialy1(R13),trialy1(R14),trialy1(R15),trialy1(R16),trialy1(R17),trialy1(R18),trialy1(R19),trialy1(R20),trialy1(R21),trialy1(R22),trialy1(R23),trialy1(R24),trialy1(R25),trialy1(R26),trialy1(R27),trialy1(R28),trialy1(R29),trialy1(R30),R=[R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30],%%(member(true,R)->(aggregate_all(count, member(true,R), Count),RA=[Count,Label].%%,writeln([Label,Count,"/10"]));true).trialy1(R1) :-%%control11(A1),trial0(A22), %% Controlsum(A22,0,S22),mean(S22,A1),trial0(A21), %% Test 1sum(A21,0,S02),mean(S02,A2),(A1>A2->R1=true;R1=fail).
trialy2_30(Label,RA) :-%%writeln([testing,Label]),trialy1(R1),trialy1(R2),trialy1(R3),trialy1(R4),trialy1(R5),trialy1(R6),trialy1(R7),trialy1(R8),trialy1(R9),trialy1(R10),trialy1(R11),trialy1(R12),trialy1(R13),trialy1(R14),trialy1(R15),trialy1(R16),trialy1(R17),trialy1(R18),trialy1(R19),trialy1(R20),trialy1(R21),trialy1(R22),trialy1(R23),trialy1(R24),trialy1(R25),trialy1(R26),trialy1(R27),trialy1(R28),trialy1(R29),trialy1(R30),R=[R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30],%%(member(true,R)->(aggregate_all(count, member(true,R), Count),RA=[Count,Label].%%,writeln([Label,Count,"/10"]));true).
trialy2_6(Label,RA) :-%%writeln([testing,Label]),trialy1(R1),trialy1(R2),trialy1(R3),trialy1(R4),trialy1(R5),trialy1(R6), /**trialy1(R7),trialy1(R8),trialy1(R9),trialy1(R10),trialy1(R11),trialy1(R12),trialy1(R13),trialy1(R14),trialy1(R15),trialy1(R16),trialy1(R17),trialy1(R18),trialy1(R19),trialy1(R20),trialy1(R21),trialy1(R22),trialy1(R23),trialy1(R24),trialy1(R25),trialy1(R26),trialy1(R27),trialy1(R28),trialy1(R29),trialy1(R30), **/R=[R1,R2,R3,R4,R5,R6 /**,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30 **/],%%(member(true,R)->(aggregate_all(count, member(true,R), Count),RA=[Count,Label].%%,writeln([Label,Count,"/10"]));true).
trialy2_81(Label,RA) :-%%writeln([testing,Label]),trialy1(R1),trialy1(R2),trialy1(R3),trialy1(R4),trialy1(R5),trialy1(R6),trialy1(R7),trialy1(R8),trialy1(R9),trialy1(R10),trialy1(R11),trialy1(R12),trialy1(R13),trialy1(R14),trialy1(R15),trialy1(R16),trialy1(R17),trialy1(R18),trialy1(R19),trialy1(R20),trialy1(R21),trialy1(R22),trialy1(R23),trialy1(R24),trialy1(R25),trialy1(R26),trialy1(R27),trialy1(R28),trialy1(R29),trialy1(R30),trialy1(R31),trialy1(R32),trialy1(R33),trialy1(R34),trialy1(R35),trialy1(R36),trialy1(R37),trialy1(R38),trialy1(R39),trialy1(R40),trialy1(R41),trialy1(R42),trialy1(R43),trialy1(R44),trialy1(R45),trialy1(R46),trialy1(R47),trialy1(R48),trialy1(R49),trialy1(R50),trialy1(R51),trialy1(R52),trialy1(R53),trialy1(R54),trialy1(R55),trialy1(R56),trialy1(R57),trialy1(R58),trialy1(R59),trialy1(R60),trialy1(R61),trialy1(R62),trialy1(R63),trialy1(R64),trialy1(R65),trialy1(R66),trialy1(R67),trialy1(R68),trialy1(R69),trialy1(R70),trialy1(R71),trialy1(R72),trialy1(R73),trialy1(R74),trialy1(R75),trialy1(R76),trialy1(R77),trialy1(R78),trialy1(R79),trialy1(R80),trialy1(R81),R=[R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30,R31,R32,R33,R34,R35,R36,R37,R38,R39,R40,R41,R42,R43,R44,R45,R46,R47,R48,R49,R50,R51,R52,R53,R54,R55,R56,R57,R58,R59,R60,R61,R62,R63,R64,R65,R66,R67,R68,R69,R70,R71,R72,R73,R74,R75,R76,R77,R78,R79,R80,R81],%%(member(true,R)->(aggregate_all(count, member(true,R), Count),RA=[Count,Label].%%,writeln([Label,Count,"/10"]));true).
trialy3(0,R,R) :-!.
trialy3(0,R,R) :-!.trialy3(Trials1,RA,RB) :-trialy1(R1),append(RA,[R1],RC),Trials2 is Trials1-1,trialy3(Trials2,RC,RB),!.
trim_brackets(A,B,N):-(is_list(A)->(trim_brackets1(A,C,0,N),B=C);A=B),!.%(rnd(C)->B=[C];(not(is_list(C))%rnd(C)trim_brackets1(A,B,N1,N3):-A=[C],N2 is N1+1,trim_brackets1(C,B,N2,N3),!.
trim_spaces_after(A,A8) :-string_chars(A,A1),findall(A2,(member(A3,A1),atom_string(A3,A2)),A4),reverse(A4,A41),append(_A5,A6,A41),append([A7],_A8,A6),not(is_space(A7)),reverse(A6,A61),foldr(string_concat,A61,A8),!.
trim_spaces_before(A,A8) :-string_chars(A,A1),findall(A2,(member(A3,A1),atom_string(A3,A2)),A4),append(_A5,A6,A4),append([A7],_A8,A6),not(is_space(A7)),foldr(string_concat,A6,A8),!.trim_spaces_before(A,"") :-string_chars(A,A1),findall(A2,(member(A3,A1),atom_string(A3,A2)),A4),forall(member(A5,A4),is_space(A5)),!.
trim_spaces_before_and_after(A,B) :-trim_spaces_before(A,C),trim_spaces_after(C,B),!.
trope(add,[A,B]) :- class(object,A),class(object,B).
trope_finder(A,B) :- findall([A,C],trope(A,C),B).
true11(2*3,6).
true_vs_good([[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]],Good) :-random1(0.1,4.6,Y1),random1(Y1,4.7,Y2),random1(Y2,4.8,Y3),random1(Y3,4.9,Y4),Good=[[0,0],[1,Y1],[2,Y2],[3,Y3],[4,Y4],[5,5]].
truncate(List1,M,String0) :-((number(M),length(String0,M),append(String0,_,List1))->true;String0=List1),!.
truncate(List1,M,String0) :-((number(M),length(String0,M),append(String0,_,List1))->true;String0=List1),!.prep(File1,List) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",phrase_from_file_s(string(String00), File1)),split_string(String00,SepandPad,SepandPad,List),length(List,Length1),write("Number of words in file: "), writeln(Length1),sort(List,List2),%%writeln([list2,List2]),length(List2,Length2),write("Number of unique words in file: "), writeln(Length2),!.
truncate_path(P1,P2,P3) :- string_strings(P1,L1), reverse(L1,L2), append(L3,L4,L2), append(["/"],L5,L4), foldr(append,[["/"],L5],L6), reverse(L6,L7), foldr(string_concat,L7,P2), reverse(L3,L8), foldr(string_concat,L8,P3),!.
try2(C1,T52,_) :-%trace,table_s2g(Table),(member([C1,Value,Sign],Table)->(Sign=positive->T52=Value;(Sign=negative->fail));(((/*not here(repeating_item_heuristic(C1)->writeln1([repeating_item_heuristic(C1),true]);(writeln1([repeating_item_heuristic(C1),false]),fail))*/true),%->%trace,((%/*(repeating_item_heuristic(C1)->%true);%writeln1([repeating_item_heuristic(C1),true]);(%writeln1([repeating_item_heuristic(C1),false])%,%true%,fail)),*/find_lists3a(C1,T52,_))->(%writeln([find_lists3a(C1,T52,_),true]),%true);%%add_to_table([C1,T52,positive]));(%add_to_table([C1,_T52,negative]),%writeln([find_lists3a(C1,_T52,_),false]),fail))%;C1=T52))),!.
try_interpret(Positivity,Debug,Query,Program2,VarLists) :-Positivity=true,catch(call_with_time_limit(0.05, international_interpret([lang,"en"],Debug,Query,Program2,[VarLists])),      time_limit_exceeded,      fail),!.
try_nd(RS3,D1,D2,T1,T3,T2_old) :-RS3=[RS4|RS5],(rs_and_data_to_term(RS4,D1,D2,%RSa1,RSa2,T1,T3,T2_old,true)%->true;try_nd(RS5,D1,D2,T1,T3,T2_old)).
try_o(RS3,D1,D3,T1,T3) :-(try_r1(RS3,D1,D3,T1,T3);(D1=D3,T1=T3)).
try_r(RS3,D1,D2,T1,T2,T2_old) :-try_r1(RS3,D1,D3,[],T3,T2_old),(T3=[]->(D2=D3,T1=T2);((T1=[]->(T3=T31,%[T31|_],append(T1,T31,T4));T4=T1),try_r(RS3,D3,D2,T4,T2,T2_old))).try_r1([],D,D,T,T,_T2_old) :- !.
try_r1(RS3,D1,D3,T1,T2,T2_old) :-RS3=[RS4|RS5],%D1=[D4|D5],ro(RS4),rs_and_data_to_term([RS4],D1,D5,%RSa1,RSa2,[],T31,T2_old,true),append(T1,T31,T3),%D5=D3,T3=T2.try_r1(RS5,D5,D3,T3,T2,T2_old).try_r1(RS3,D1,D3,T1,T2,T2_old) :-(RS3=[RS4|RS5]->true;(RS3=RS4,RS5=[])),(D1=[D4|D5]->true;(D1=D4,D5=[])),get_val_s2a(RS4,D4),append(T1,[D4],T3),%D5=D3,T3=T2.
try_r1(_,D,D,T,T,_T2_old) :- !.
tryoutputs([],_List3,Output,Output) :- !.
tryoutputsa(_,[],List,List) :- !.
trytranslations1([],_FromLang,_ToLang,Flag,Flag,List,List,String,String) :- !.
trytranslations2(Orig,Outputs1,Output,Flag2) :-%%removenotice(Outputs11,Outputs1),writeln(""),writeln("Which of the following sentences:\n- are grammatical\n- have the same meaning as the other in the pair, and\n- have the same meaning as the original sentence?\n"),write('Original:'),write("\t"),writeln(Orig),writeln(''),listoutputs(1,N,Outputs1),write("Enter 1-"),write(N),writeln(", or 0 for none:"),repeat2(Outputs1,Output,Flag1),conjunction(Flag1,true,Flag2).repeat2(Outputs1,Output,Flag) :- read_string(user_input, "\n", "\r", _End2, Input),number_string(N1,Input),(N1=0->Flag=false;(Input2 is N1-1,length(List,Input2),append(List,[[_Original,Backtranslation,Translation]|_],Outputs1),Output=[Backtranslation,Translation])->true;repeat2(Outputs1,Output,Flag)).
tt1(Result):-findall([[v1,V1],[v2,V2],C],(member(V1,[0,1]),member(V2,[0,1]),true1(implies(V1,(not(V2))),C)),Result).
ttb2([]) :- !.
tty_put101(%C, Win_X,Win_Y, R,X,Y,Matrix) :- numbers(R,1,[],Rs), findall(_,(member(_,Rs),nl),_),  Y1 is Y+1,%+2*Win_Y, X1 is X+Win_X, numbers(Y1,1,[],Ys), numbers(X1,X,[],Xs), findall(_,(member(Y2,Ys), findall(_,(member(X2,Xs),member([X2,Y2,C],Matrix), write(C)),_),writeln("")),_), %findall(_,(member(_,Xs),write(' ')),_), %write(C), Y11 is R-Win_Y,%Y,%Y1+1, numbers(Y11,1,[],Y1s), findall(_,(member(_,Y1s),nl),_).% 35% ["Green, L 2021, <i>Exploring opposites in Hamlet 4 of 4</i>, Lucian Academy Press, Melbourne.","Green, L 2021",1,"COMPUTATIONAL ENGLISH% 31.    I prepared to declare Hamlet a success.  I did this by agreeing with Hamlet.  First, I observed Hamlet avoid all the action.  Second, I observed Hamlet avoid suicide.  Third, I observed Hamlet avoid becoming a murderer.  In this way, I prepared to declare Hamlet a success by agreeing with Hamlet.
turn leash on in lpi, ssiturn_save_debug(on),numbers(13,13,[],N),findall(N1,(member(N1,N),test(N1,Q,F,R1),do_saved_debug([]),interpret(on,Q,F,R2),writeln(""),saved_debug(S1),do_saved_debug([]),catch(call_with_time_limit(3,lucianpl(on,Q,F,R3)),_,false),writeln(""),saved_debug(S2),S1=S2,do_saved_debug([]),writeln(N1)),N2),sort(N2,N3),writeln(N3),length(N3,L),subtract(N,N3,U),writeln(U).
turn_keep_comments_off :-retractall(keep_comments(_)), assertz(keep_comments([])),!.
turn_occurs_check(on) :-retractall(occurs_check(_)),assertz(occurs_check(on)),!.
type(c1,atom,number).
type_checker([],[]).
type_climber(0,_,N,N) :- !.
type_s2a1(string).
types_to_alg(Data,Alg):- types_to_alg2(Data,[],L),% need data in L to collect, merge collect_simplify_types1(L,[],T), foldr(append,T,T1), merge_types(T1,[],MT), replace_in_terms(MT,L,L2), L2=[I,O], %trace, gen_alg(I,O,Alg).
uncompile_list([],_,L,L) :- !.
uncompile_list1(Index2,Index3,N1,N,S,L1,L2) :- get_item_n(N1,Index2,N2), (N2=4-> (L1=L2); (get_item_n(N1,Index3,N3), %N31 is N3+1, % 0 C is 1 pl %trace, get_item_uncompile_list(N2,N3,N,S,L1,L3), Index21 is Index2+2, Index31 is Index3+2, uncompile_list1(Index21,Index31,N1,N,S,L3,L2))).
uncompress_vars(V1,VG,V3) :-uncompress_vars1(V1,VG,V2),uncompress_vars2(V2,V2,[],V3),!.
uncompress_vars0(V1,VG,V3) :-findall(V31,(member(V2,V1),uncompress_vars(V2,VG,V31)),V3),!.
uncompress_vars0([[[[&, 2], [[&, tail], [&, 1]]], [[&, 1], [2, 3]]]],[[[v, a], [&, 1]], [[v, b], [&, 2]]],V).V = [[[[v, b], [3]], [[v, a], [2, 3]]]].uncompress_vars0([[[[v, a], [[&, 2], [&, 4]]], [[v, b], [[&, 6], [&, 8]]]], [[[v, c], [&, 9]]]],[[[1], [&, 6]], [[3], [&, 8]], [[1], [&, 2]], [[2, 3], [&, 4]], [[1], [&, 9]]],V).V = [[[[v, a], [[1], [2, 3]]], [[v, b], [[1], [3]]]], [[[v, c], [1]]]].
uncompress_vars1(V,[],V%,V2) :- !.
uncompress_vars2(_,[],V,V%,V2) :- !.uncompress_vars2(V1,V11,V2,V32) :-V11=[[V3,[[&, tail],Val]]|V4],member([Val,[_|Val2]],V1),append(V2,[[V3,Val2]],V31),uncompress_vars2(V1,V4,V31,V32),!.
undefined_type([T,Type]) :-get_lang_word("t",T),get_lang_word("list",Dbw_list),get_lang_word("brackets",Dbw_brackets),get_lang_word("number",Dbw_number),get_lang_word("predicatename",Dbw_predicatename),get_lang_word("string",Dbw_string),get_lang_word("any",Dbw_any),TypeStatements1=[T,Type],not(Type=Dbw_list),not(Type=Dbw_brackets),not(Type=Dbw_number),not(Type=Dbw_predicatename),not(Type=Dbw_string),not(Type=Dbw_any).
unenroll([First,Second,Subject],Enrollments1,Enrollments2) :-unenroll(First,Second,Subject,Enrollments1,Enrollments2).
unique(A) :- sort(A,B),length(B,L),length(A,L).
update1(File,BrDict1) :-sort(BrDict1,BrDict2),open(File,write,Stream),write(Stream,BrDict2),close(Stream).
update_verifier(User,Repository) :-get_time(TS),%stamp_date_time(TS,date(Year,Month,Day,Hour,Minute,_Seconda,_A,_TZ,_False),local),repositories(List),findall(TS1,(member([User,Repository,Date|_],List),Date=[Year1,Month1,Day1,Hour1,Minute1],date_time_stamp(date(Year1,Month1,Day1,Hour1,Minute1,0,_,_,_),TS1)),TS2),sort(TS2,TS3),append(_,[TS4],TS3),(TS>=TS4->writeln([User,Repository,"is up to date."]);writeln([User,Repository,"is not up to date."])),!.
updatevars2(_FirstArgs,[],Vars,Vars) :- !.
updatevars3(Vars1,Vars2,Vars4) :- updatevars31(Vars1,Vars2,Vars11), updatevars32(Vars11,Vars2,Vars4).
updatevars31(Vars1,Vars2,Vars11) :- findall([V,Value3],(member([V,Val],Vars1), get_lang_word("v",Dbw_v),get_lang_word("sys1",Dbw_sys1),%%writeln1(5),%trace,         remember_and_turn_off_debug(Debug), %trace,         %(interpretpart(match4,Variable1,Variable2,Vars1,Vars5,_)->true;(turn_back_debug(Debug),         %fail         %interpretpart(match4,Variable1,Variable2,Vars1,_Vars2,_))),                  interpretpart(match4,Val,[Dbw_v,Dbw_sys1],Vars2,Vars4,_),      getvalue([Dbw_v,Dbw_sys1],Value3,Vars4),          turn_back_debug(Debug)),Vars11).          %interpretpart(match4,Variable1,Variable2,Vars1,Vars2,Value3)        %)  %)updatevars32(Vars1,[],Vars1).
upper_first(A,B) :-string_concat(C,E,A),string_length(C,1),upcase_atom(C,D),string_concat(D,E,B),!.
upper_first_letter(A,B) :-string_concat(C,F,A),string_length(C,1),to_upper(C,D),string_codes(E,[D]),string_concat(E,F,B),!.
use("tree","branch").
use(A,B) :- member(A-B,[pedagogy-teacher,meditation-meditation_teacher,medicine-doctor,computationalism-computer_scientist,philosophy-philosopher,business-business_person]).
use_module(library(pio)).
use_module(library(pio)).use_module(library(dcg/basics)).
v_if_string_or_atom(String_or_atom,V) :-(((string(String_or_atom)->true;atom(String_or_atom)),%trace,string_concat(A,_,String_or_atom),string_length(A,1)%,is_upper(A))->V=[v,String_or_atom];V=String_or_atom),!.
v_name1([Dbw_v,N]) :- get_lang_word("v",Dbw_v), v_name(N1), atom_concat(Dbw_v,N1,N), N2 is N1+1, retractall(v_name(_)), assertz(v_name(N2)).
v_name1([Dbw_v,N]) :- get_lang_word("v",Dbw_v), v_name(N1), string_concat("v",N1,N), N2 is N1+1, retractall(v_name(_)), assertz(v_name(N2)).
var2(Code,Var1) :-outputvars(OutputVars),totalvars(TotalVars),Code2 is 96+TotalVars,Code =< Code2, %% 122char_code(Var1,Code),not(member(Var1,OutputVars)),!.
var2(Code,Var1) :-outputvars(OutputVars),totalvars(TotalVars),Code2 is 96+TotalVars,Code =< Code2, %% 122char_code(Var1,Code),not(member(Var1,OutputVars)),!.var2(Var2Code,Code3) :-Var2Code2 is Var2Code + 1,totalvars(TotalVars),Code2 is 96+TotalVars,Var2Code2 =< Code2,var2(Var2Code2,Code3),!.
var2(Code,Var1) :-outputvars(OutputVars),totalvars(TotalVars),Code2 is 96+TotalVars,Code =< Code2, %% 122char_code(Var11,Code),Var1=[v,Var11],not(member(Var1,OutputVars)),!.
var2(Code,Var1) :-outputvars(OutputVars),totalvars(TotalVars),Code2 is 96+TotalVars,Code =< Code2, %% 122char_code(Var11,Code),Var1=[v,Var11],not(member(Var1,OutputVars)),!.var2(Var2Code,Code3) :-Var2Code2 is Var2Code + 1,totalvars(TotalVars),Code2 is 96+TotalVars,Var2Code2 =< Code2,var2(Var2Code2,Code31),Code3=[v,Code31],!.
var2(Code,Var1,OutputVars) :-%%outputvars(OutputVars),totalvars(TotalVars),Code2 is 96+TotalVars,Code =< Code2, %% 122char_code(Var1,Code),not(member(Var1,OutputVars)),!.
var2(Code,Var1,OutputVars) :-%%outputvars(OutputVars),totalvars(TotalVars),Code2 is 96+TotalVars,Code =< Code2, %% 122char_code(Var1,Code),not(member(Var1,OutputVars)),!.var2(Var2Code,Code3,OutputVars) :-Var2Code2 is Var2Code + 1,totalvars(TotalVars),Code2 is 96+TotalVars,Var2Code2 =< Code2,var2(Var2Code2,Code3,OutputVars),!.
var_or_data(A) :- %trace,(character_breakdown_mode(on)->var_or_data1(A);var_or_data2(A)),!.
var_or_data_c(A) :- %var_or_data(A).%trace,(character_breakdown_mode(on)->var_or_data(A);%%var_or_data1_c(A);var_or_data2_c(A)),!.%var_or_data1(A) :- is_var_s2a(A).%var_or_data1() :- not(type_s2a1(A)).
varname1(A) --> varname_term(A).
varname1([]) --> "[",newlines1(_),"]",newlines1(_). %%{writeln(L)}, %%***varname1(L4) --> %{trace},name11(L1), newlines1(_),%%{writeln(L)}, %%***{%trace,%%atom_string(L1,L10),string_codes(L2,L10),(((string(L1)->true;(atom_concat(A,_,L1),atom_length(A,1),(not(is_upper(A)),not(A='_'))))->L4=L1;(downcase_atom(%%L2L1,L3),L4=[v,L3])))%%L3A%%,term_to_atom(L3A,L4)%%,atom_string(L4A,L4)}.
varname_term(A) --> {%trace,true},name1(Word11),{%(Word11=phrase_from_file->trace;true)%%writeln1(Word11)true},"(",newlines1(_),varnames(Varnames),")",newlines1(_), {A=[[n,Word11],Varnames]%,trace},!.
varnames(L3) --> %{trace},"[",newlines1(_),spaces1(_),varnames0(L1),"]",",",newlines1(_),spaces1(_),varnames(L2),{append([L1],L2,L3)},!. % {maplist(append,[[[[L1],L2]]],[[L3]])},!. varnames(L3) --> %{trace},"[",varnames0(L1),"]",newlines1(_),spaces1(_),"|",varnames(L2),{maplist(append,[[[[L1],"|",L2]]],[L3])},!. varnames(L1) --> %{trace},"[",newlines1(_),spaces1(_),varnames0(L2),"]", {L1 = [L2]},!. varnames(L1) --> %{trace},"[",newlines1(_),spaces1(_),"]",",",newlines1(_),spaces1(_),varnames(L2),{append([[]],L2,L1)},!. varnames(L1) --> %{trace},"[",newlines1(_),spaces1(_),"]",newlines1(_),spaces1(_),"|",newlines1(_),spaces1(_),varnames(L2),{maplist(append,[[[[[]],"|",L2]]],[L1])},!. varnames(L1) --> %{trace},"[",newlines1(_),spaces1(_),"]", {L1 = []},!. varnames(L1) --> %{trace},varnames0(L1), !. varnames0(L1) --> varname1(L2),%{trace},lookahead1,%{notrace},{L1=[L2]},!.
varnames([L1|Ls]) --> name1(L1),",", %%{writeln(L)}, %%***varnames(Ls), !. varnames([L4]) --> name1(L1), {string_codes(L2,L1),downcase_atom(L2,L3),atom_string(L3,L4)},!.newlines1([X|Xs]) --> [X], {char_type(X,newline)}, newlines1(Xs), !.%%newlines1([X]) --> [X], {char_type(X,newline)},!.newlines1([]) --> [],!./**was commentsnewlines1([]) --> "%", comments(_), "\n".newlines1([]) --> "/","*", commentsa(_), "*","/".
varnames([],Vars,Vars,Values,Values) :- !.
varnames0(Ls2) --> %{trace},varname1(L1),",", newlines1(_),spaces1(_),%%{writeln(L)}, %%***varnames0(Ls), {append([L1],Ls,Ls2)},!. %{maplist(append,[[[L1,Ls]]],[[Ls2]])},!. varnames0(Ls2) --> varname1(L1),"|", %%{writeln(L)}, %%***varnames0([Ls]), {append_list([L1,"|",Ls],Ls2)},!. %{maplist(append,[[[L1,"|",Ls]]],[Ls2])},!. lookahead1(A,A) :- append(`]`,_,A).
varnames0(Ls2) --> %{trace},varname1(L1),newlines1(_),",", newlines1(_),%%{writeln(L)}, %%***varnames0(Ls), newlines1(_),{append([L1],Ls,Ls2)},!. %{maplist(append,[[[L1,Ls]]],[[Ls2]])},!. varnames0(Ls2) --> varname1(L1),newlines1(_),"|", newlines1(_),%%{writeln(L)}, %%***varnames0([Ls]), newlines1(_),{append_list([L1,"|",Ls],Ls2)},!. %{maplist(append,[[[L1,"|",Ls]]],[Ls2])},!. varnames3(L1) --> varname1(L2),%{trace},%lookahead1,%{notrace},{L1=L2},!.
varnames3(L1) --> varnames(L1),%{trace},%lookahead1,%{notrace},%{L1=[L2]},!.
vector_drawing1 :-writeln("What is X1 in ((X1,Y1),(X2,Y2)) in the rectangle"),read_string(user_input,"\n","\r",_,X11),number_string(X1,X11),writeln("What is Y1 in ((X1,Y1),(X2,Y2)) in the rectangle"),read_string(user_input,"\n","\r",_,Y11),number_string(Y1,Y11),writeln("What is X2 in ((X1,Y1),(X2,Y2)) in the rectangle"),read_string(user_input,"\n","\r",_,X21),number_string(X2,X21),writeln("What is Y2 in ((X1,Y1),(X2,Y2)) in the rectangle"),read_string(user_input,"\n","\r",_,Y21),number_string(Y2,Y21),writeln([(X1,Y1),(X2,Y2)]),assertz(rectangles([(X1,Y1),(X2,Y2)])),writeln("c-continue or q-quit:"),read_string(user_input,"\n","\r",_,CQ),(CQ="c"->vector_drawing1;(CQ="q"->(findall(R,rectangles(R),Rs),writeln(Rs)))).
venn_select(Properties1,Person) :- venn(Person,Properties2), list_to_set(Properties1,Properties2),!.
verb("pen")  --> "wrote".
version(File,A,F,B) :-open_file_s(File,File_term),version1(File_term,0,0,0,A,F,B).
version_adder(Changes,File1,File2) :-findall([Type1,Label],(member(Change,Changes),%repeat,writeln(["For change:",Change]),writeln("Is the change an API change (a), a new feature (f) or a bug fix (b)?"),read_string(user_input,"\n\r","\n\r",_,Type),atom_string(Type1,Type),(Type1=a->true;(Type1=f->true;Type1=b)),writeln("Please enter a description of the change: "),read_string(user_input,"\n\r","\n\r",_,Label)),Log),open_file_s(File1,File_term1),append(File_term1,Log,File_term2),version1(File_term2,0,0,0,A,F,B),writeln(["Version",A,F,B]),save_file_s(File2,File_term2).
vertical_line(Y1,Y2,X,Grid1,Grid2) :-numbers(Y2,Y1,[],YN),vertical_line1(YN,X,Grid1,Grid2).vertical_line1([],_X,Grid,Grid) :- !.
vetusia :-rainforest(Map),get_map_dimensions(Map),traverse(5,14,16,[],_,[],_,Map,_),!.
vetusia :-rainforest(Map),get_map_dimensions(Map),traverse(5,14,16,[],_,[],_,Map,_),!.
view_breasoning_and_detail_log :-phrase_from_file_s(string(String11), "brlog.txt"),string_codes(String02b1,String11),atom_to_term(String02b1,String02a1,[]),writeln("Breasoning Log"),findall(_,(member(Item,String02a1),writeln(Item)),_),nl,phrase_from_file_s(string(String1), "detlog.txt"),string_codes(String02b,String1),atom_to_term(String02b,String02a,[]),writeln("Detail Log"),findall(_,(member(Item,String02a),writeln(Item)),_).
viral_plans(Viral_plans,Viral_plan) :-member(Viral_plan,Viral_plans).
viral_poster_hands_train(Itin4) :- Itin=[], point(1,Itin,Itin2), point(2,Itin2,Itin3), point(3,Itin3,Itin4).
volume(L,W,H,V) :- V is L*W*H.
volumes_required(Large,Small,Volumes) :-Large=[X1,Y1,Z1],Large_volume=X1*Y1*Z1,Small=[X2,Y2,Z2],Small_volume=X2*Y2*Z2,Volumes is Large_volume/Small_volume.
walls_from_connector_points1([],_YN2,Grid,Grid) :- !.walls_from_connector_points1(XN1,YN2,Grid1,Grid2) :-XN1=[XN2|XN3],random_wall(XN2,YN2,Grid1,Grid3),walls_from_connector_points1(XN3,YN2,Grid3,Grid2).
walls_from_connector_points1(_XN1,[],_ZN1,Grid,Grid) :- !.
walls_from_connector_points2([],_YN2,_ZN2,Grid,Grid) :- !.
wash(Items,Washed) :-findall([Item,"washed"],member(Item,Items),Washed).
way_of_speaking1(Properties,Expression):-        Properties=[Item1a,Item1b],        findall(Item2,      (way_of_speaking(Item1a,Item2)),        Items2a),        sort(Items2a,Items2a1),        findall(Item2,      (way_of_speaking(Item1b,Item2)),        Items2b),        sort(Items2b,Items2b1),        intersection(Items2a1,Items2b1,Expression).
word([X|Xs]) --> [X], {char_type(X,csymf)->true;(X=27->true;X=8217)}, word(Xs), !.
word(banana).
word1([])-->[].
word1([])-->[].word1([A|As]) --> [A],word1(As),{%%atom_codes(A,AC),char_type(A,alpha)},!.
word_break(A,B,Mode) :-string_codes(A,Codes),%SepandPad=%"",%%"&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % SepandPad1=%"",%"&#@~%`$?-+*^,()|:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'." xx(Mode=full_stops->string_concat(SepandPad1,".",SepandPad);SepandPad1=SepandPad),%string_codes(String1,Codes),%string_to_list2(SepandPad,[],SepandPad1),string_codes(SepandPad,SepandPad2),%split_string2(String1,SepandPad1,File_list),split_on_substring117(Codes,SepandPad2,[],B),!.
word_count([Type,String1],Words) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",(Type="file"->(phrase_from_file_s(string(String2), String1));String1=String2),split_string(String2,SepandPad,SepandPad,String3),%writeln(String3),length(String3,Words).
word_count([Type,String1],Words) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % without '(Type="file"->(phrase_from_file_s(string(String2), String1));String1=String2),split_string(String2,SepandPad,SepandPad,String3),%writeln(String3),length(String3,Words).
word_game :- writeln("Player 1, please enter the word for player 2 to guess without showing them."), read_string(user_input,"\n","\r",_,S), nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, nl, string_codes(S,C), findall(C2,(member(C1,C),string_codes(C2,[C1])),S2), length(S2,N), numbers(N,1,[],S1), N2 is 20, word_game1(S1,S2,N2).
working_directory1(A1,B1) :- (string(A1)->atom_string(A,A1);A=A1), (string(B1)->atom_string(B,B1);B=B1), term_to_atom(working_directory(A,B),Atom), catch(working_directory(A,B), _, (foldr(string_concat,["Error on ",Atom%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],Text41),writeln1(Text41)%fail%abort )),!.
working_directory_sh(A,B) :- ((var(A),not(var(B)))-> (dynamic(working_directory_sh1/1),  split_string(B,":",":",F),append([G],[H],F),string_concat(K,K1,H),string_length(K,2),(K1=""->K11="./";K11=K1),foldr(string_concat,[G,":",K,K11],B1), retractall(working_directory_sh1(_)), assertz(working_directory_sh1(B1)) ); ((var(A),var(B))-> (dynamic(working_directory_sh1/1), working_directory_sh1(A),A=B))),!.
wp(T) :- writeln(["ESC to Quit"]),wp("",T).
wrap(A,B) :- B=[A].
wrap([],List,List) :-!.wrap(List1,List2,List3) :-List1=[[Item1,Item2]|List4],append(List2,[[[Item1],[Item2]]],List5),wrap(List4,List5,List3), !.
wrap_brackets(A,A,0) :-!.wrap_brackets(A,B,N) :-[A]=C,N2 is N-1,wrap_brackets(C,B,N2),!.
write_br(Term) :-(html_api_maker_or_terminal(html)->(n_to_br(Term,Term1),%term_to_atom(Term1,Atom),write(Term1));(%term_to_atom(Term,Atom),write(Term))),!.
write_close_bracket_and_comma_if_not_empty_list(Statements2,Algorithm6,Algorithm7) :-(not(Statements2=[])->string_concat(Algorithm6,"),",Algorithm7);Algorithm6=Algorithm7),!.
write_close_bracket_and_full_stop_if_last_item(Statements2,Algorithm8,Algorithm2) :-((length(Statements2,A),(A=0%%->true;A=1))->string_concat(Algorithm8,").\n",Algorithm2);Algorithm8=Algorithm2),!.
write_close_bracket_if_last_item(Statements2,Algorithm8,Algorithm2) :-((length(Statements2,A),(A=0%%->true;A=1))->string_concat(Algorithm8,")",Algorithm2);Algorithm8=Algorithm2),!.
write_comma_and_newline_if_not_empty_list(Statements2,Algorithm6,Algorithm7) :-(not(Statements2=[])->string_concat(Algorithm6,",\n",Algorithm7);Algorithm6=Algorithm7),!.
write_comma_and_newline_if_not_empty_list(Statements2,Algorithm6,Algorithm7) :-(not(Statements2=[])->string_concat(Algorithm6,";\n",Algorithm7);Algorithm6=Algorithm7),!.
write_comma_if_not_empty_list(Statements2,Algorithm6,Algorithm7) :-(not(Statements2=[])->string_concat(Algorithm6,",",Algorithm7);Algorithm6=Algorithm7),!.
write_comma_if_not_empty_list2(Statements2,Algorithm6,Algorithm7) :-(not(Statements2=[])->string_concat(Algorithm6,";",Algorithm7);Algorithm6=Algorithm7),!.
write_conclusion(String01,Pole1,Critique,Future_research,Conclusion) :-atom_string(Pole1,Pole2),findall([Paragraph_topic_sentence,"  "],(member(A,Critique),A=[_,[Paragraph_topic_sentence|_]|_]),Paragraph_topic_sentences1),concat_list1(Paragraph_topic_sentences1,Paragraph_topic_sentences2),concat_list([Paragraph_topic_sentences2,"I have ",Pole2,"d with ",String01,".  ",Future_research%%,"\n"%%\n"],Conclusion).
write_conclusion(String01,Pole1,Critique,Future_research,Conclusion) :-atom_string(Pole1,Pole2),findall([Paragraph_topic_sentence,"  "],(member(A,Critique),A=[_,[Paragraph_topic_sentence|_]|_]),Paragraph_topic_sentences1),concat_list1(Paragraph_topic_sentences1,Paragraph_topic_sentences2),concat_list([Paragraph_topic_sentences2,"I have ",Pole2,"d with ",String01,".  ",Future_research,"\n\n"],Conclusion).
write_critique(Critique,Essay4):-Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],findall(Essay23,(member(Numbera11,Numbers),%% not "" with findall%%findall(Essay22,(member(Critique1,Critique),%%Critique1=[Numbera11,_Number3a,_String3,_String3a,String5a,String3y,_String3ay,String5a1,_CNumber2aa,_CNumber3aa,CString5a1a,_CNumber2a1,_CNumber3a1,_LastCStrings,String5aaa],Critique1=[Numbera11,[Para_topic_sent,[_Number2a,_Number3a,_String3,_String3a,String5a,_String3y,_String3ay,String5a1]|Critique2]],concat_list([Para_topic_sent,"  ",String5a,"  ",String5a1,"  "],Essay0),output_critique(Numbera11,Critique2,String5a1,Essay0,Essay1),concat_list([Essay1,Para_topic_sent,"\n"],%%Essay22)%%),Essay23)),Essay3),concat_list(Essay3,Essay4).
write_end_notes(R2,References,Refs_no_head) :-find_end_notes1(R2,Refs_no_head),%%,(member([String2r3,Ref1,Page_num,End_note_number],R2),%%findall([Reference,"\n"],member(Reference,R2),References1),%%trace,writeln1(R3),%%concat_list1(R3,References2),%%concat_list([References2],Refs_no_head),concat_list(["Endnotes","\n\n",Refs_no_head],References).
write_essay(String01,Pole,Exposition,Critique,Future_research,R2,"",HTML) :-write_heading(String01,_Heading),write_introduction(String01,Pole,Critique,Introduction),writeln1([introduction,Introduction]),%%string_concat(Introduction,"  ",Introduction0),write_exposition(Exposition,Exposition2a),concat_list(["I will expose ",String01," in this half.  ",Exposition2a],Exposition2),%%string_concat(Exposition2,"\n",Exposition2a),write_critique(Critique,Critique2a),string_concat(Critique2a,"\n",Critique2b),atom_string(Pole,Pole1),concat_list(["I will ",Pole1," with ",String01," in this half.  ",Critique2b],Critique2),write_conclusion(String01,Pole,Critique,Future_research,Conclusion),write_end_notes(R2,_End_notes,End_notes_no_heading),write_references(R2,_References,Refs_no_heading),%%concat_list([Heading,Introduction,Exposition2,Critique2,Conclusion,End_notes,References],%%Essay),strip_footnotes(Introduction,Introduction_1),strip_footnotes(Conclusion,Conclusion_1),concat_list([Introduction_1,Exposition2,Critique2,Conclusion_1],Essay2),%%trace,reorder_numbers(Essay2,Essay21,End_notes_no_heading,End_notes_no_heading1),replace(Essay21,"\n","<br>",HTML1),replace(Refs_no_heading,"\n","<br>",Refs_no_heading2),replace(End_notes_no_heading1,"\n","<br>",End_notes_no_heading2),concat_list(["<html><head><title>",String01,"</title></head><body><h1>",String01,"</h1>",HTML1,"<h2>Endnotes</h2>",End_notes_no_heading2,"<h2>Bibliography</h2>",Refs_no_heading2,"</body></html>"],HTML).
write_essay(String01,Pole,Exposition,Critique,Future_research,R2,Essay,HTML) :-write_heading(String01,Heading),write_introduction(String01,Pole,Critique,Introduction),write_exposition(Exposition,Exposition2a),concat_list(["I will expose ",String01," in this half.  ",Exposition2a],Exposition2),%%string_concat(Exposition2,"\n",Exposition2a),write_critique(Critique,Critique2a),string_concat(Critique2a,"\n",Critique2b),atom_string(Pole,Pole1),concat_list(["I will ",Pole1," with ",String01," in this half.  ",Critique2b],Critique2),write_conclusion(String01,Pole,Critique,Future_research,Conclusion),write_references(R2,References,Refs_no_heading),concat_list([Heading,Introduction,Exposition2,Critique2,Conclusion,References],Essay),concat_list([Introduction,Exposition2,Critique2,Conclusion],Essay2),replace(Essay2,"\n","<br>",HTML1),replace(Refs_no_heading,"\n","<br>",Refs_no_heading2),concat_list(["<html><head><title>",String01,"</title></head><body><h1>",String01,"</h1>",HTML1,"<h2>Bibliography</h2>",Refs_no_heading2,"</body></html>"],HTML).
write_exposition(Exposition,Essay4b) :-Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],Exposition=[_,Exposition2],findall([Essay4c%%,"\n"],(member(Numbera11,Numbers),%% not "" with findallfindall(Essay4,(%%member(Exposition1,Exposition),%%Exposition1=[Numbera11,_Number3a,_String3,_String3a,String5a,String3y,_String3ay,String5a1,_CNumber2aa,_CNumber3aa,CString5a1a,_CNumber2a1,_CNumber3a1,_LastCStrings,String5aaa],%%output_exposition(Numbera11,Exposition2,"",Essay1),%%findall( Essay4,(member(Exposition1,Exposition2),Exposition1=[Numbera11,_Number3a,_String3,_String3a,String5a,Group_link],concat_list([String5a,"  ",Group_link,"  "],Essay4)%%delete(Exposition,Exposition1,Exposition2)%%output_exposition(Numbera11,Exposition2,Essay4,Essay6)),Essay4a),concat_list(Essay4a,Essay4c1),%%trace,(Essay4c1=""->Essay4c="";(string_concat(Essay4c10,"  ",Essay4c1),concat_list([Essay4c10,"\n"],Essay4c)))),Essay4d),maplist(concat_list,Essay4d,Essay4f),concat_list(Essay4f,Essay4b)%%concat_list([Essay4e,"\n"],Essay4b)%%concat_list([Essay1,"  ",Essay3],Essay2),%%concat_list([Essay2,"\n"],Essay23))%%,Essay3a),%%concat_list(Essay3a,Essay4a).
write_exposition(Exposition,Essay4b) :-Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],Exposition=[_,Exposition2],findall([Essay4c%%,"\n"],(member(Numbera11,Numbers),%% not "" with findallfindall(Essay4,(%%member(Exposition1,Exposition),%%Exposition1=[Numbera11,_Number3a,_String3,_String3a,String5a,String3y,_String3ay,String5a1,_CNumber2aa,_CNumber3aa,CString5a1a,_CNumber2a1,_CNumber3a1,_LastCStrings,String5aaa],%%output_exposition(Numbera11,Exposition2,"",Essay1),%%findall( Essay4,(member(Exposition1,Exposition2),Exposition1=[Numbera11,_Number3a,_String3,_String3a,String5a,Group_link],concat_list([String5a,"  ",Group_link,"  "],Essay4)%%delete(Exposition,Exposition1,Exposition2)%%output_exposition(Numbera11,Exposition2,Essay4,Essay6)),Essay4a),concat_list(Essay4a,Essay4c1),%%trace,(Essay4c1=""->Essay4c="";concat_list([Essay4c1,"\n"],Essay4c))),Essay4d),maplist(concat_list,Essay4d,Essay4f),concat_list(Essay4f,Essay4b)%%concat_list([Essay4e,"\n"],Essay4b)%%concat_list([Essay1,"  ",Essay3],Essay2),%%concat_list([Essay2,"\n"],Essay23))%%,Essay3a),%%concat_list(Essay3a,Essay4a).
write_exposition(Exposition,Essay4b) :-Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],Exposition=[_,Exposition2],findall([Essay4c%%,"\n"],(member(Numbera11,Numbers),%% not "" with findallfindall(Essay4,(%%member(Exposition1,Exposition),%%Exposition1=[Numbera11,_Number3a,_String3,_String3a,String5a,String3y,_String3ay,String5a1,_CNumber2aa,_CNumber3aa,CString5a1a,_CNumber2a1,_CNumber3a1,_LastCStrings,String5aaa],%%output_exposition(Numbera11,Exposition2,"",Essay1),%%findall( Essay4,(member(Exposition1,Exposition2),Exposition1=[Numbera11,_Number3a,_String3,_String3a,String5a,Group_link],concat_list([String5a,"  ",Group_link,"  "],Essay4)%%delete(Exposition,Exposition1,Exposition2)%%output_exposition(Numbera11,Exposition2,Essay4,Essay6)),Essay4a),concat_list(Essay4a,Essay4c1),%%trace,(Essay4c1=""->Essay4c="";concat_list([Essay4c1,"\n"],Essay4c))),Essay4d),maplist(concat_list,Essay4d,Essay4f),concat_list(Essay4f,Essay4b)%%concat_list([Essay4e,"\n"],Essay4b)%%concat_list([Essay1,"  ",Essay3],Essay2),%%concat_list([Essay2,"\n"],Essay23))%%,Essay3a),%%concat_list(Essay3a,Essay4a).%% *** HTML (<br> not \n)%%%%%%%a%% write_critique([[1,["heading is e12",[1,1,_25346,_25352,"e1",_25370,_25376,"e12"],[1,2,_25412,_25418,"e2",_25436,_25442,"e22",1,1,"e12",0,0,"e22","e12 is e22"]]]],A),writeln1(A).
write_files(Text1) :-findall(_,(member(Text2,Text1),%%member(Text2,Text3),%%member(Text2,Text4),Text2=[Title1,Contents1],string_codes(Title2,Title1),string_codes(Contents2,Contents1),write_file(Title2,Contents2)),_).
write_full_stop_if_last_item(Statements2,Algorithm8,Algorithm2) :-((length(Statements2,A),(A=0%%->true;A=1))->string_concat(Algorithm8,".\n",Algorithm2);Algorithm8=Algorithm2),!.
write_full_stop_if_last_item(Statements2,Algorithm8,Algorithm2) :-((length(Statements2,A),(A=0%%->true;A=1))->string_concat(Algorithm8,";}\n",Algorithm2);Algorithm8=Algorithm2),!.
write_introduction(String01,Pole1,Critique,Introduction) :-%% The heading should be in the form "Author's topic"atom_string(Pole1,Pole2),findall([Paragraph_topic_sentence,"  "],(member(A,Critique),A=[_,[Paragraph_topic_sentence|_]|_]),Paragraph_topic_sentences1),concat_list1(Paragraph_topic_sentences1,Paragraph_topic_sentences2),concat_list(["I will critically analyse ",String01,".  ","I will ",Pole2," with ",String01,".  ",Paragraph_topic_sentences2,"\n\n"],Introduction).
write_pbm(File_contents3,X2,Y2,File) :-X is X2*6,Y is Y2*10,concat_list(["P1\n",X," ",Y,"\n",File_contents3],File_contents4),open_s(File,write,Stream),write(Stream,File_contents4),close(Stream).
write_pbm(File_contents3,X2,Y2,File) :-X is X2*6,Y is Y2*10,concat_list(["P3\n",X," ",Y,"\n","255","\n",File_contents3],File_contents4),open_s(File,write,Stream),write(Stream,File_contents4),close(Stream).
write_references(R2,References,Refs_no_head) :-findall([Reference,"\n"],member(Reference,R2),References1),concat_list1(References1,References2),concat_list([References2],Refs_no_head),concat_list(["Bibliography","\n\n",References2],References).
write_to_stream_c(Codes,I,O) :-append(I,Codes,O).
writeln1(Term) :-term_to_atom(Term,Atom),writeln(Atom),!.
writeln2(A) :- writeln12(A). /*log(B),foldr(string_concat,[B,A,"\n"],C),retractall(log(_)),assertz(log(C)).
writeln_br(Term) :-(html_api_maker_or_terminal(html)->(n_to_br(Term,Term1),%term_to_atom(Term1,Atom),write(Term1),write('<br>\n'));(%term_to_atom(Term,Atom),writeln(Term))),!.
writenotification1(A,E,F,Notification):-%%working_directory(CWD, CWD),atom_concat(A,E,E1),atom_concat(E1,F,Notification).
writenotification2(A,FromLang1,F,Notification):-working_directory(CWD, CWD),fulladjective(FromLang1,FromLang2),atom_concat(A,FromLang2,B),%%atom_concat(B,CWD,E),atom_concat(B,F,Notification).
year_of_birth(albert, 1926).
 find_all_dependencies(_,[],A,A) :- !.
 find_query_box_n(Name2) :-(query_box_n(N1)->N=N1;(retractall(query_box_n(_)),assertz(query_box_n(1)),N=1)),concat_list(["query_box_",N],Name1),get_lang_word(Name1,Name2),%atom_string(Name2,Name1),N2 is N+1,retractall(sys(_)), assertz(query_box_n(N2)).
 split_into_lp_files(T7,T10) :- split_into_lp_files(T7,[],_T8,[],T9), delete(T9,[],T10),!. split_into_lp_files([],B1,_B2,C1,C2) :- append(C1,[B1],C2),!.
           1         111       1111      111111    1111111   11111     111       1               2  */edge(X_win,Y_win,X1,Y1,X2,Y2,X3,Y3,PX,PY) :- make_grid(X_win,Y_win,Grid1), draw_edges(X1,Y1,X2,Y2,X3,Y3,Grid1,Grid2), triangle_centre(X1,Y1,X2,Y2,X3,Y3,QX,QY), fill(QX,QY,Grid2,Grid3), ((member([PX,PY,M],Grid3), member(1,M))-> writeln("Point is in triangle."); writeln("Point is not in triangle.")), line1(PX,PY,PX,PY,Grid3,Grid4,2), prettyprint1_e(Grid4,Y_win,X_win),!.
           1         111       1111      111111    1112111   11111     111       1                  edge(10, 10, 2, 2, 2, 9, 8, 5, 8, 1).Point is not in triangle.
 %%writeln(["Texttobr, Texttobr2 not working.  Please manually breason out ",File2]).
 %*/%,writeln1(Result2)/*find_tests21(%H1,H,K11,LP,Tests) :-%foldr(string_concat,[H1%,"/",K11%],K12),%trace,findall1(N1,(member([[n,N]|_],LP),string_strings(N,N1)),Ns),findall1([K11,H,F2],(append(_,LP1,LP),append([[[n,comment%c ],[Comment]]],LP2,LP1),%findall1([K11,H,F2],(member([[n,comment%c%],[Comment]],LP),string_strings(Comment,C),member(N2,Ns),append(_A,B,C),append(N2,Dx,B),%trace,append(Ex,Dx1,Dx),%append(_Ex1,Dx2,Dx1),append(["."],_N21,Dx1),%trace,flatten([N2,Ex%,"."],N2Ex),foldr(string_concat,N2Ex,F),% the answer is A= ... "." or " "% in this, just 1 answer%trace,reverse(Ex,D),append(E2,_E3,D),reverse(E2,E31),(append([","],E5,E31)->true;append(["("],E5,E31)),append(E6,E7,E5),append([")"],_,E7),%trace,%member(N21,Ns),append([[[n,comment%c],[Comment1]]],_,LP2),%member([[n,comment%c%],[Comment1]],LP),string_strings(Comment1,C1),append(_A1,Bx,C1),append(E6,Dxx,Bx),append(E61,Dxx1,Dxx),%trace,(append(["."],_Exx,Dxx1)%->true;%append([],Exx,Dxx1)),%trace,%writeln([_A1,Bx,E6,Dxx,E61,Dxx1]),%flatten([])foldr(string_concat,E61,E612),sub_string(E612,_,_,_,"="),%trace,flatten([E6,E612%,Exx%,"."],E6Exx),foldr(string_concat,E6Exx,F1),%trace,%term_to_atom((F,F1),F00),%term_to_atom(F0,F00),%term_to_atom(F10,F1),%trace,foldr(string_concat,["(",F,",",F1,")"],F2),foldr(string_concat,["a:-",F2,"."],F3),working_directory1(WD1,WD1),home_dir1(HD),working_directory1(_,HD),fastp2lp2(F3,_),working_directory1(_,WD1)%atom_string(F0,F),%atom_string(F10,F1),%F2=%F0%%(F0,F10)),Tests1),sort(Tests1,Tests),!.
 /**%trace,%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",%trace,findall(String02b,(member(Filex1,G),string_concat(Dept1,Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a)),Texts1),**/% choose a file, algorithm y or n, record if ycombophil_alg_log(N1,G1,G2) :-((member([_Dept00,_Folder00,N20],G1), N20<N1)->(findall([Dept01,Folder01,N20],(member([Dept01,Folder01,N20],G1),N20<N1),R),random_member([Dept,Folder,N2],R),N2=<N1,get_texts1(Dept,Folder,Text),%concat_list(["../vpsbu 27 10 19/",Folder],Path),% phrase_from_file_s(string(Phil1), "../vpsbu 27 10 19/luciansphilosophy-full.txt"),SepandPad="\n\r",split_string(Text,SepandPad,SepandPad,Phil2),delete(Phil2,"",Phil3),%sort(Phil3,Phil4),%length(Phil4,LengthPhil4),write("Number of philosophies in luciansphilosophy.txt: "),%writeln(LengthPhil4),%length(PhilsLengthList,NumberOfPhils),%repeat,/**findall(Phils1,(member(_,PhilsLengthList),random_member(Phils1,Phil4)),Phils2),reverse(Phils2,Phils3),Phils3=[Phil6|Phils4],reverse(Phils4,Phils5),findall(_,(member(Phil5,Phils5),writeln1(Phil5),nl,writeln1("because"),nl),_),**/random_member(Phil4,Phil3),writeln1([Dept,Folder,N2,algorithms,Phil4]),nl,writeln("Algorithm? (y/n): "),read_string(user_input, "\n", "\r", _End, Input),(Input="n"->G1=G2;(delete(G1,[Dept,Folder,N2],G3),N3 is N2+1,append(G3,[[Dept,Folder,N3]],G4),combophil_alg_log(N1,G4,G2))));G1=G2).
 writeln(["Texttobr, Texttobr2 not working.  Please manually breason out ",File2]).
 generate_p31(I,O,_VN5s,_IVNs,_Calls1,Calls2,_Alg3,Alg4) :- v_name1(VN1), v_name1(VN2), I=[_,_,_,Data], O=[_,_,_,Data], Calls2=[[[Dbw_n,=],[VN1,Data]], [[Dbw_n,=],[VN1,VN2]]], Alg4=[],!.
 set_up_particles([_X,_Y,_Z],0,Particles,Particles) :- !.
 % children(Parent, ChildList)% ChildList is bound to a list of the children of Parent.
 % convert a sentence to an algorithm% sent2alg([sort,[2,3,1],giving,[1,2,3]],I,O).
 % program may have unconnected preds, causing a bugorder_preds_bottom_up1(_,_,[],Ordered_pred_nums,Ordered_pred_nums) :- !.
 /**A,B,x*A,x,Bx,A,BA,x,yx,A,yx,y,Ax,y,zA,B,C**//**interpretpart(stringconcat1,Terminal,Phrase2,Phrase1,Vars1,Vars2) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat1",Dbw_stringconcat),isvar(Terminal),isvar(Phrase2),       getvalues(Terminal,Phrase2,Phrase1,Value1,Value2,Value3,Vars1),debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,variable2,Value2]]),((string(Value3),   string_concat(Value1A,Value2A,Value3),        val1emptyorvalsequal(Value1,Value1A),        val1emptyorvalsequal(Value2,Value2A),        putvalue(Terminal,Value1A,Vars1,Vars3),        putvalue(Phrase2,Value2A,Vars3,Vars2)),      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1A,Value2A,Value3]])%;     debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,variable2,Value3]])).%,!.
 alg_gen2([],_,Alg_gen_dict1,Alg_gen_dict1, Alg_gen_dict2,Alg_gen_dict2, Alg_gen_dict3,Alg_gen_dict3, _New_flag ) :- !.
 collision(Grid11,N,X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X_Direction,Y_Direction,Z_Direction,X_Direction1,Y_Direction1,Z_Direction1,Grid2) :- get_particle_image([X2,Y2,Z2,XP8],Grid11), %get_item_n(Grid11,Z2,XP6), %get_item_n(XP6,Y2,XP7), %get_item_n(XP7,X2,XP8), ((XP8=[]%->true;XP8=N )->(  % delete old particle image replace_particle_image(%[X1,Y1,Z1,_], [X1,Y1,Z1,[]],Grid11,Grid1),/* get_item_n(Grid11,Z1,XP631), get_item_n(XP631,Y1,XP731), get_item_n(XP731,X1,_XP831), put_item_n(XP731,X1,[],XP732), put_item_n(XP631,Y1,XP732,XP733), put_item_n(Grid11,Z1,XP733,Grid1), */ X3=X2,Y3=Y2,Z3=Z2, replace_particle_image([X1,Y1,Z1,[]],%[X2,Y2,Z2,N], Grid1,Grid21), replace_particle_image(%[X1,Y1,Z1,[]], [X2,Y2,Z2,N],Grid21,Grid2), /*get_item_n(Grid11,Z1,XP6312), get_item_n(XP6312,Y1,XP7312), get_item_n(XP7312,X1,_XP8312), put_item_n(XP722,X2,N,XP7222), put_item_n(XP622,Y2,XP7222,XP7322), put_item_n(Grid1,Z2,XP7322,Grid2), */  X_Direction1 is X_Direction, Y_Direction1 is Y_Direction, Z_Direction1 is Z_Direction);   (%trace, X_Direction1 is -1*X_Direction, Y_Direction1 is -1*Y_Direction, Z_Direction1 is -1*Z_Direction, X3=X1,Y3=Y1,Z3=Z1,  %/* replace_particle_image(%[X1,Y1,Z1,_], [X1,Y1,Z1,N],Grid11,Grid2) /*(get_item_n(Grid11,Z1,XP61), get_item_n(XP61,Y1,XP71), get_item_n(XP71,X1,_XP81), put_item_n(XP71,X1,N,XP72), put_item_n(XP61,Y1,XP72,XP73), put_item_n(Grid11,Z1,XP73,Grid2) */ %*/ %Grid11=Grid2 )).
 move_non_loop_clauses_to_loop(C,B) :- %sub_term_wa([loop1,_],C,A), %findall1([loop1,D],(member([loop1,D],C)),A), move_non_loop_clauses_to_loop1(C,C,B1%,[],D%,[],NLC ),delete(B1,["&del"],B).
 sum(A,B,C) :- C is A+B.split1(N,A,B) :- split_string(A,"\n\r","\n\r",C), split2(N,C,[],D), findall(H,(member(D1,D), findall([E,"\n"],member(E,D1),F), flatten(F,G), foldr(string_concat,G,H)),B),!.
 test_find_unique_variables :-%retractall(vars_base_s2a(_)),%assertz(vars_base_s2a('A')),findall(_,(member([N,S,UV2],[[1,[['A', [1, 3]]], [['A', ['A1', 'A2']]]],[2,[['A',[1,3,1]]], [['A',['A1','A2','A1']]]]]),/*retractall(num_s2a(_)),assertz(num_s2a(1)),retractall(vars_s2a(_)),assertz(vars_s2a([])),*/ ((find_unique_variables(S,UV1),  %writeln1(find_unique_variables(S,UV1)),  UV1=UV2)->R=success;R=fail), writeln([R,N,find_unique_variables,test])),_),!.
 types(atom_string,[atom,string]).
    match_put_vals([],[],Vars,Vars%,_Standard_or_e4) :- %trace,!.
   /*collect_connected_pred_ids0(Pred_id,Pred_ids1,Pred_ids2,Predicate_number,Globals3) :-collect_connected_pred_ids01(Pred_id,Pred_ids1,Pred_ids3,Predicate_number,Globals3),%writeln1([*,Pred_ids3]),Pred_ids3=Pred_ids2,%findall(Pred_ids6,(member(Pred_id5,Pred_ids3),%collect_connected_pred_ids2(Pred_id5,[Pred_id5],Pred_ids6,Globals3)),%Pred_ids2),!.
   diff2_gitl(Name,After3,HTML3) :- %correspondences(Corr),  findall(["<table bgcolor=\"",Colour,"\"><tr><td>",Change,Item2,"</td></tr></table>"],(member(Item%[[n,comment],[Item]] ,After3),%trace, ((not(Item=[i,_]), not(Item=[d,_])) %string(Item) -> (Item=Item2,%numbers_to_term([Item],Corr,[],Item2), Colour="white",Change=""); ((%trace, Item=[i,Item2])-> (%trace, (Item2=[]->fail;true), %numbers_to_term([Item3],Corr,[],Item2), Colour="green",Change="Insertion: "); ((%trace, Item=[d,Item2])-> (%trace, (Item2=[]->fail;true), %numbers_to_term([Item3],Corr,[],Item2), Colour="red",Change="Deletion: ") /*; (Item=[[c,_],Item_a,Item_b]-> (numbers_to_term(Item_a,Corr,[],Item2a), numbers_to_term(Item_b,Corr,[],Item2b), %trace, %term_to_atom(Item2a,Item2a1), %term_to_atom(Item2b,Item2b1), %foldr(string_concat, term_to_atom([Item2b,' -> ',Item2a],Item2), Colour="yellow",Change="Change: ")) */ )))),HTML), flatten(HTML,HTML1), foldr(string_concat,HTML1,HTML2),  foldr(string_concat,["<b>File name: ",Name,"</b><br>",HTML2],HTML3).
  #<(C,A+B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C < A+B.#<(C,A-B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C < A-B.
  alg_gen1([],Alg_gen_dict1,Alg_gen_dict1,Alg_gen_dict2,Alg_gen_dict2) :- !.
  alg_gen1([],Alg_gen_dict1,Alg_gen_dict1,Alg_gen_dict2,Alg_gen_dict2) :- !.alg_gen1(File_string3,Alg_gen_dict1,Alg_gen_dict1a,Alg_gen_dict2,Alg_gen_dict2a) :- File_string3=[File_string3a|Rest], %findall(Words1j,(member(File_string3a,File_string3),  SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'\"0123456789", split_string(File_string3a,SepandPad,SepandPad,File_string2), %trace, (findall([AA,AB%AD,AB,AF ],(member(AA,File_string2),member([AA,AB],Alg_gen_dict1)%,member([AD,AB,AF],Alg_gen_dict2) ),AC), findall(-,(member([_,-],AC)),AG), ((length(AG,LA),length(AC,LA))-> subtract(Alg_gen_dict1,AC,Alg_gen_dict11); Alg_gen_dict1=Alg_gen_dict11)), repeat, % if l AC - l AG findall([AA,AB%AD,AB,AF ],(member(AA,File_string2),not(member([AA,AB],Alg_gen_dict1)))%,member([AD,AB,AF],Alg_gen_dict2) ,AC1), (length(AC1,1)->Single=true;Single=false),  alg_gen2(File_string2,Single,Alg_gen_dict11,Alg_gen_dict1b, Alg_gen_dict2,Alg_gen_dict2b, [],Alg_gen_dict3b,New_flag ), % if a word is new, asks for the main term in the sentence, otherwise determines it from weights%trace,((not(var(New_flag)),New_flag=true)->(term_to_atom(File_string3a,File_string3a1),(length(Alg_gen_dict3b,1)->S11=1;(length(Alg_gen_dict3b,L),numbers(L,1,[],N),findall([N1," - ",Item,"\n"],(member(N1,N),get_item_n(Alg_gen_dict3b,N1,Item)),List),foldr(append,List,[],Item2a),foldr(string_concat,Item2a,"",Item2),%term_to_atom(Alg_gen_dict3b,Alg_gen_dict3b1),foldr(string_concat,["The sentence: ",File_string3a1," has the computational terms:","\n",Item2,"What is the number of the main computational term?"],"",Prompt1),repeat,writeln(Prompt1),read_string(user_input,"\n","\r",_,S1),number_string(S11,S1))),get_item_n(Alg_gen_dict3b,S11,Item3),Flag=true%%Alg_gen_dict2=Alg_gen_dict2c);(%trace,(Alg_gen_dict3b=[]->fail;true),findall([Weight,M,Note],(member(M,File_string2),member([Weight,M,Note],Alg_gen_dict2)),M1),(M1=[]->Flag=fail;(sort(M1,M2),reverse(M2,[[W,Item3,Note]|_]),Flag=true)))),% () * repeat, get A out of [A,B]% if a word's note is not in a_dict2, then asks for its alg (Flag=fail->Alg_gen_dict2b=Alg_gen_dict2c;((Note=(-)->(foldr(string_concat,["What is the algorithm note for ",Item3,"?"],"",Prompt2),%repeat,writeln(Prompt2),read_string(user_input,"\n","\r",_,S4),member([W,Item3,_],Alg_gen_dict2b),delete(Alg_gen_dict2b,[W,Item3,_],Alg_gen_dict2c1),append(Alg_gen_dict2c1,[[W,Item3,S4]],Alg_gen_dict2c));Alg_gen_dict2b=Alg_gen_dict2c))),alg_gen1(Rest,Alg_gen_dict1b,Alg_gen_dict1a,Alg_gen_dict2c,Alg_gen_dict2a),!.
  degree(90).
  delete_sub_term_wa(NNs,L1,L2) :- foldr(put_sub_term_wa("&del"), NNs, L1, L3), delete_sub_term_wa2(L3,"&del",[],L2),!.
  depth_tree(D,L1,[_|L3]) :- member([L1,L2],D),depth_tree(D,L2,L3),!.
  get_first_and_last_items(D,I1,I2) :-%trace, foldr(string_concat,D,D1), findall(A,(sub_string(D1,A1,1,_,"-"),A is A1+1),D2), append([I1],_,D2), append(_,[I2],D2).
  match_get_vals([],S1,S1,_) :- !.
  minimise_dfa1([],DFA,DFA) :- !.minimise_dfa1(Transitions,DFA1,DFA2) :- %Transitions=[T2|T3], %append(DFA1,[T2],DFA4), minimise_dfa(Transitions,%T2,T3, DFA1,DFA3), (Transitions=DFA3->DFA3=DFA2; minimise_dfa1(DFA3,[],DFA2)).
  simple_caw(F,Query,Result,Rules,Initial_rules,In,Out,Rules1,Predicate) :- length(Rules1,L),not(L>=5),%trace,% Don't repeat a commandmember([P,I,_O],Rules),(Rules1=[]->true;(%trace,member([P00,_],Rules1),not(P=P00))),%trace,%get_last_arg(In,Rules1,Last_arg),%trace,Out=[[Var1,_]],new_var(Var),% choose n l args %trace,findall(Last_arg010,get_last_arg(In,Rules1,Last_arg010),Last_arg0),%numbers(I,1,[],N),each_combo_last_args1(I,Last_arg0,[],Last_arg1),%findall(Last_arg,(member(_,N),member(Last_arg,Last_arg0)),Last_arg1),foldr(append,[Last_arg1,[Var1]],Last_args),append(Rules1,[[P,Last_args]],Rules2),/*(I=2->(%(member([_P10,Args0],Rules1)->true;(member([Args000,_],In),[Args000]=Args0)),append(_,[Last_arg0],Args0),(member([_P20,Args20],Rules1)->true;member([Args20,_],In)),not(member(Last_arg0,Args20)),get_last_arg(In,Rules1,Last_arg0),*/%;%(%trace,%append(Rules1,[[P,[Last_arg,Var1]]],Rules2)%,notrace%)),%trace, findall(V,member([V,_Val],In),V1), Out=[[V2,_Val2]],  %append(Val1,[V],Query), %Result=[Out], %trace, append(V1,[V2],Vars2),Program22=[        [[n,F],Vars2,":-",                Rules2        ]        ],                append(Initial_rules,Program22,Program2),        (debug(on)->Debug=on;Debug=off),writeln1([*,Debug,Query,Program2,Result]),%trace,((catch(call_with_time_limit(0.05, interpret(Debug,Query,Program2,Result)),      time_limit_exceeded,      fail)      %writeln1(Debug,Query,Program2,Result)      )%->true;(length(Rules1,7)->fail;true))      ->Predicate=Program2;            (            /*((%trace,      I=2)->append(Rules1,[[P,[Last_arg,Last_arg0,[v,Var]]]],Rules2);(%trace,append(Rules1,[[P,[Last_arg,[v,Var]]]],Rules3))),*/%trace,findall(Last_arg010,get_last_arg(In,Rules1,Last_arg010),Last_arg01),%numbers(I,1,[],N1),%findall(Last_arg02,(member(_,N1),member(Last_arg02,Last_arg01)),Last_arg2),each_combo_last_args1(I,Last_arg01,[],Last_arg2),foldr(append,[Last_arg2,[[v,Var]]],Last_args2),append(Rules1,[[P,Last_args2]],Rules3),%trace,% include in if then:simple_caw(F,Query,Result,Rules,Initial_rules,In,Out,Rules3,Predicate))).
  simple_caw(F,Query,Result,Rules,Initial_rules,In,Out,Rules1,Predicate) :- length(Rules1,L),not(L>=5),%trace,%trace,% Don't repeat a commandmember([P,I,_O],Rules),/*(Rules1=[]->true;(%trace,member([P00,_],Rules1),not(P=P00))),*/%trace,%get_last_arg(In,Rules1,Last_arg),%trace,Out=[[Var1,_]],new_var(Var),% choose n l args %trace,findall(Last_arg010,get_last_arg(In,Rules1,Last_arg010),Last_arg0),%numbers(I,1,[],N),each_combo_last_args1(I,Last_arg0,[],Last_arg1),%findall(Last_arg,(member(_,N),member(Last_arg,Last_arg0)),Last_arg1),foldr(append,[Last_arg1,[Var1]],Last_args),append(Rules1,[[P,Last_args]],Rules21),remove_dups(Rules21,Rules2),/*(I=2->(%(member([_P10,Args0],Rules1)->true;(member([Args000,_],In),[Args000]=Args0)),append(_,[Last_arg0],Args0),(member([_P20,Args20],Rules1)->true;member([Args20,_],In)),not(member(Last_arg0,Args20)),get_last_arg(In,Rules1,Last_arg0),*/%;%(%trace,%append(Rules1,[[P,[Last_arg,Var1]]],Rules2)%,notrace%)),%trace, findall(V,member([V,_Val],In),V1), Out=[[V2,_Val2]],  %append(Val1,[V],Query), %Result=[Out], append(V1,[V2],Vars2), %trace,no_singletons(Vars2,Rules2,Var1,Rules22),Program22=[        [[n,F],Vars2,":-",                Rules22        ]        ],                append(Initial_rules,Program22,Program2),        (debug(on)->Debug=on;Debug=off),writeln1([*,Debug,Query,Program2,Result]),%trace,((catch(call_with_time_limit(0.05, interpret(Debug,Query,Program2,Result)),      time_limit_exceeded,      fail)      %writeln1(Debug,Query,Program2,Result)      )%->true;(length(Rules1,7)->fail;true))      ->Predicate=Program2;            (            /*((%trace,      I=2)->append(Rules1,[[P,[Last_arg,Last_arg0,[v,Var]]]],Rules2);(%trace,append(Rules1,[[P,[Last_arg,[v,Var]]]],Rules3))),*/%trace,findall(Last_arg010,get_last_arg(In,Rules1,Last_arg010),Last_arg01),%numbers(I,1,[],N1),%findall(Last_arg02,(member(_,N1),member(Last_arg02,Last_arg01)),Last_arg2),each_combo_last_args1(I,Last_arg01,[],Last_arg2),foldr(append,[Last_arg2,[[v,Var]]],Last_args2),append(Rules1,[[P,Last_args2]],Rules3),%trace,% include in if then:simple_caw(F,Query,Result,Rules,Initial_rules,In,Out,Rules3,Predicate))).new_var(B) :- new_var1(A),B is A+1, retractall(new_var1(_)), assertz(new_var1(B)).
  update_particles(_,Grid,Grid,[],Particles,Particles) :- !.
   create_straight_line_through_remaining_space_forwards(X_max1,_,_,X_max,_Curr_X1,_Curr_Y1,Matrix,Matrix,Blocked_coords,Blocked_coords) :-  X_max1 is X_max+1,!.   create_straight_line_through_remaining_space_forwards(X,M,C,X_max,Curr_X1,Curr_Y1,Matrix1,Matrix2,Blocked_coords1,Blocked_coords2) :- Y is floor(M*X)+C, (member([X,Y,(-)],Matrix1)-> (delete(Matrix1,[X,Y,_],Matrix4), append(Matrix4,[[X,Y,'^']],Matrix5), XN is X+1, create_straight_line_through_remaining_space_forwards(XN,M,C,X_max,X,Y,Matrix5,Matrix2,Blocked_coords1,Blocked_coords2)); (%Matrix1=Matrix2, delete(Matrix1,[Curr_X1,Curr_Y1,_],Matrix4), append(Matrix4,[[Curr_X1,Curr_Y1,(-)]],Matrix2), append(Blocked_coords1,[[Curr_X1,Curr_Y1]],Blocked_coords2))),!.
  % edges% moving_particles(Ps,List1).
  %findall1(M,(member(G,Clause_Ns2), %(G=[loop1,H]->(findall1(J,member([_,J],H),L),M=[loop1,L]);G=[_,M])),Clause_Ns3),!.
  /*(member([_P1,Args],Rules1)->true;Args=[]),%append([Args00],Args,Args01), member(Last_arg,Args), %member([Args20,_],In), (member([_P2,Args2],Rules1)->true;Args2=[]),%append([Args20],Args2,Args02), not(member(Last_arg,Args2)) */  /*each_combo_last_args(0,_,_) :- !.
  append(Before,After,Both), %trace, findall1(A1,(member(A1,Both),%A1=A10, get_base_token_number(A1,A10), member([",",A10],Corr)),%)->A11=[A1]; A11%=[] ),  subtract(After1,Permanent_insertions,Insertions), subtract(Before1,Permanent_insertions,Deletions), subtract(Permanent_insertions,A11,Permanent_insertions2), union(A11,Insertions,Insertions1), subtract(Deletions,A11,Deletions1).
  find_complexity(Name,Complexity) :- N0=10, numbers(N0,1,[],N01), (Name=n->n(N01,N1); Name=sqrn->sqrn(N01,N1)), N2 is N0^2, numbers(N2,1,[],Ns2), (close1(N01,N1)->Complexity=n; close1(N1,Ns2)->Complexity=sqrn).
  trans_gpt(G4,G5), split_string(G5,".",".",G6), findall(E3,(member(E2,G6),string_concat(E2,".",E3)),G61), assort_words(G61,G1,[],G7), %trace, % [[1, "A. \nA.", 3, "A.A."], [5, "A.A.", 7, "a.a."]] % [[1, "A. \nA.", 3, "A.A."], [5, "A.A.", 7, "a.a."]]  foldr(put_sub_term_wa_ae,G7,File_term,H).
  turn_back_debug(Debug) :- retractall(debug(_)),assertz(debug(Debug)).
 %  min_max(Coords1,Min_X,Min_Y,Min_Z,Max_X1,Max_Y1,Max_Z1) :- findall(X1,member([X1,_,_],Coords1),X2), findall(Y1,member([_,Y1,_],Coords1),Y2), findall(Z1,member([_,_,Z1],Coords1),Z2), sort(X2,X3), sort(Y2,Y3), sort(Z2,Z3),%reverse(X4) append([Min_X],_,X3),append(_,[Max_X1],X3), append([Min_Y],_,Y3),append(_,[Max_Y1],Y3), append([Min_Z],_,Z3),append(_,[Max_Z1],Z3).
 % () check if generated key is the same as another key% get sessionget_session(Session_number,Session) :- foldr(string_concat,["sessions/session",Session_number,".txt"],Path), open_file_s(Path,Session),!.
 % 15:-include('../Prolog-to-List-Prolog/p2lpconverter.pl').
 % 27 algs so far% s11([[1], [2, 3, 4, 5], [2, 6]]).s11(A) :- s1(A1), s12(A1,A2),findall(A3,(member(A4,A2),sort(A4,A3)),A).
 % 33% a3(A).                                                                 % A = 15.a3(A):-M1=1,M2=2,M3=3,M4=4,M5=5,b([M1,M2,M3,M4,M5],5,0,A).b(_,0,C,C) :- !.
 % ?- how_much_faster_than_personal_best(2,1,D).
 % ["Short Arguments","No Radiation 4 of 25 (final).txt",0,algorithms,"3. I prepared to cover travelling in the time machine with meditation.  I did this by stating that the body returns to normal after time travelling like a beating flagella with meditation.  First, I meditated.  Second, I time travelled.  Third, I meditated again."]qa_tt("Have you meditated before time travel?","You may now time travel.").
 % [[loop1, [[new, 1, 9], [new, 3, 15], [new, 2, 12], [new, 1, 8]]]]% [[[old, []], [new, [[new, 1, 9], [new, 3, 15], [new, 2, 12], [new, 1, 8]]]]]%group_into_clauses1(A,B,C):-forall(member(C,A),A=[loop1,_]),append(A,B,C),!.
 % duplicate shape% duplicate shape Shape_coords1/*duplicate_shape(Shapes_coords,Shape_coords1,Shape_coords2) :- %findall(ID1,member([ID1,_],Shapes_coords),IDs1), sort(IDs1,IDs2), reverse(IDs2,[ID2|_]), ID3 is ID2+1, Shape_coords1=[_,S], Shape_coords2=[ID3,S].
 % find_insertions_and_deletions([1,2,3],[1,3],In,D).
 % find_insertions_and_deletions_vintage([1,2,3],[1,3],In,D).
 % geometric_sequence(4,1,0,[],D).
 % if data2 is list, wrap its alg in []is_item4("*") :- !.
 % leave exact comments, includes x% leave comments as AT333B, put rest in orderput_in_order(T4721,AT333B,T47) :-%trace,%writeln1(put_in_order(T4721,AT333B,T47)), findall1([A, [N|C]],(member([A, [N|C]],AT333B), (N=[n,comment]->true;N=":-")),AT333BA), subtract1(T4721,AT333BA,[],T472), findall1(B1,(member([_, [[n,B12]|C]],T472),process_put_in_order(B12,B,Num), (%false,B=comment,once(member([A,[[n,B]|C]],AT333B)))->B1=[A,[[n,B]|C]]; ((once(member([Num,[[n,B]|_C1]],AT333B))%,append(C1,_,C) )->B1=[Num,[[n,B]|C]]))),D1), /* findall1([n,B],member([_, [[n,B]|C]],T472),B2), sort(B2,B3),%length(B3,B3L), %numbers(B3L,1,[],Ns), findall1(X,(member(X2,B3),findall1(X3,(member(X1,T472))) findall1([N1,[[n,B]|C]],(member(N1,Ns),get_item_n(T472,N1,[_, [[n,B]|C]])),B5), %findall1(B3,(member([_, [[n,B]|C]],T472),member([n,B]))) %findall1([A,[[n,B]|C]],member([A, [[n,B]|C]],AT333B),B21), findall1([n,B],member([A, [[n,B]|C]],AT333B),B21), sort(B21,B31),length(B31,B31L), numbers(B31L,1,[],Ns1), findall1([N11,B41],(member(N11,Ns1),get_item_n(AT333B,N11,B41)),B51), %findall1(B31,(member([_, [[n,B]|C]],T472),member([n,B])))  findall1(B1,(member([N1, [[n,B]|C]],B5),(%false,B=comment,once(member([A,[[n,B]|C]],AT333B)))->B1=[A,[[n,B]|C]]; ((%trace, once(member([N1,[A,[[n,B]|_C1]]],B51))%,append(C1,_,C) )->B1=[A,[[n,B]|C]]))),D1), */ append(AT333BA,D1,D), findall1(E,member([E,_],D),F), sort(F,G), findall1([H,J],(member(H,G),member([H,J],D)),T471), sort(T471,T47),!.
 % lettering_spacing(10,3,S).
 % perform an action on an alarm, such as sending an emailsend_email(Title,From_email,FileName) :- (current_prolog_flag(arch,'arm64-darwin')->writeln("Mac needs email to be configured.");(foldr(atom_concat,['echo "" | mutt -s "',Title,'" ',From_email,' -a ',FileName],A1),shell1(A1))).
 % print_heading("Happy World",30,S).
 % set an alarm to set the alarmwarn_set_alarm(Text) :- Text = "Please remember to set the new set of alarms for:".
 % square_to_round([1,2,3],A).                   % A = (1, 2, 3).square_to_round(A,C) :- %t_or_empty(T), ((A=[D]%,D=T )-> C=(D); (A=[D|E],%not(T=A), square_to_round(E,F), C=..[',',D,F])),!.
 % takes too longrecursive_br_gen(Raw,Chains) :- %phrase_from_file_s(string(File), "../Text-to-Breasonings/file.txt"), phrase_from_file_s(string(File), "../Text-to-Breasonings/file.txt"), string_codes(File_string0,File), downcase_atom(File_string0,File_string1), SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'\"0123456789", split_string(File_string1,SepandPad,SepandPad,File_string2),  % truncate file to N words Truncate_length=100, length(File_string2,L3), length(File_string2b,Truncate_length), (L3=<Truncate_length->File_string2=File_string2a; (append(File_string2b,_,File_string2),File_string2b=File_string2a)),  % delete connectives such as and, theopen_file_s("connectives.txt",Connectives),subtract(File_string2a,Connectives,Words1),% recursively finds all new connectionsfind_pairs(Words1,Raw),% find chainsfindall([A,B,C],(member([A,B],Raw),member([B,C],Raw),not(A=C)),Chains).
 % viral_poster_hands_train(It).
 %% q in "q a b" sends food like e in "c d e"/**[debug]  ?- a([q,e,r,a,t,y,u,q,e,r,a,t,y,u,c,b,x,v,n,m],[1,1,[c,a,t,y,u]],[1,2,[c,a,t,y,u]]).    [[1,1,[c,a,t,y,u]],[r,a,t,y,u]][[1,2,[c,a,t,y,u]],[r,a,t,y,u]]true.
 %check_same2(_A,[],L,L,_Start) :- !.%append(L1,[A],L2),!.
 %group(-,After4,After4) :- !.
 %in_or_exiting_loop(_,[],In_loop,In_loop,Exiting_loop,Exiting_loop) :- !.in_or_exiting_loop(Ordered_pred_nums3,P71,In_loop1,In_loop2,Exiting_loop1,Exiting_loop2%,Rest_of_preds1,Rest_of_preds2) :- %P71=[P72|P73], (contains_loop(Ordered_pred_nums3,P71,[],P)-> append(In_loop1,[P],In_loop2); (%P=[], In_loop1=In_loop2)), %Exiting_loop1=Exiting_loop2); (not_contains_loop(Ordered_pred_nums3,P71,[],P1%,false ), %In_loop1=In_loop2, /* flatten(P71,P71F), subtract(P71F,[Ordered_pred_nums3,P,loop],P1), append(Exiting_loop1,[P1],Exiting_loop2).
 %is_4([_,_,_,_]).%generate_alg([],Alg,Alg) :- !.%generate_alg(L,Alg1,Alg2) :-%****/*generate_alg([],Alg,Alg) :- !.
 %join_and_change(After31,After3) :- i_or_d([i,_]).i_or_d([d,_]).
 %master([1,2,3,4,5],5,A).
 %open_string_file_s%save_diff(N0,R1,To_m_1,To,HTML3) :-%trace,% .
 %pretty_print2(dfs_pre_order,Items1,A) :-% pretty_print_dfs_pre_order(Items1,0,A).
 %sub_term_wa2(Ns,Ns,_N,E,_Find,B,B,_) :- !.% var(E), sub_term_wa1(Ns1,Ns2,N,E,Find,B,B1,Flag) :- (([E1]=E,var(E1))->B1=[[[_,1],E]]; sub_term_wa2(Ns1,Ns2,N,E,Find,B,B1,Flag)),!.
 %word_game(Numbers,Correct_letters,Tries_left)word_game1(_,S,0) :- writeln("You lost!"),write("The word was "),foldr(string_concat,S,"",S1),write(S1),writeln("."),!.
 /*?- cycle_text("Good. Are there any further areas to mind map? (y/n)").
 /*flatten1(A,B) :- flatten2(A,[],B),!.
 /*get_order2(AT233,AT133,AT333B) :- get_order(AT333,AT2331), get_order(AT133,AT1331), delete(AT1331,[_,[["File delimiter", _, _]]],AT1332), !.
 /*recursive_predicate(A,_B,Predicate_number,Globals3):- member([pred_id_chain,C,A],Globals3), ((%member(C,B), member([[pred_num,C],Predicate_number],Globals3))->true; (recursive_predicate(C,_B,Globals3))),!.
 /*rhetoric_merge_trees(T1,T2,T3) :- T1=[Text1|Branches1], T2=[Text2|Branches2], merge_branches(Branches1,Branches2,Branches3), T3=[Text1-Text2,Branches3].
 a1(L,In,M,M,R,R) :- member([L,e],In),!.
 a2(L,In,M1,M2,R1,R2) :- Trace=off, (Trace=on->writeln([call,L,In,M1,_,R1,_]);true), %read_string(user_input,"\n\r","\n\r",_,_), %get_single_char(_), (a1(L,In,M1,M2,R1,R2)-> (Trace=on->writeln([exit,L,In,M1,M2,R1,R2]);true); ((Trace=on->writeln([fail,L,In,M1,_,R1,_]);true),fail)).
 a_because_b(B,C,E) :-B=[ate_with,D],append(C,[[like,D]],E).
 a_to_m(N1,Functions1,Pred_numbers,Ordered_pred_nums1) :-%trace,%find pred nums in sm (done)% find occurrence of pred calls in preds regardless of clause, for finding modes in bottom-up order% find order in terms of pred name, arity% x modify find_pred_numbersfind_pred_numbers_dependencies(Functions1,[],Functions2a,Pred_numbers),N=0,%member([N,P],Functions2a),%delete(Functions2a,[N,P],F),% order_preds_bottom_up1_post_order_dfs(_L1,[N],Functions2a,[N],Ordered_pred_nums0,[N]),% Ordered_pred_nums0=[0, [1, 2, [loop, 1]]]% In test 7, query box (predicate 0) and predicate 1 are called, where predicate 1 calls predicate 2 and itself.
 absolute_url(A) :- ((split_string(A,":",":",F), append([_G],[_H],F))->true; (split_string(A,"/","/",Path1), length(Path1,L),L>=2, append([P1],_P2,Path1), not(string_concat("/",_,P1)))),!.
 algorithm_length(5).
 analytics_abandoned_cart_auto_responder :- writeln("I see you have started a cart.  If you would like to resume it, here is the link.").
 append_line(Line,Code,V,V6,Dir,Results1,Spaces1,G1s,V7) :- not(G1s=(-)), G1s=[[B,BV],[C,CV]], append(_A,B1,Line), append([B],C1,B1), append(B2,D1,C1), append([C],C2,D1), find_rev(Dir,D_code,V,V1), %(Dir=l->(D_code=[],V=V1); %(get_var_at(V1), %D_code=[[[n,reverse],[V,V1]]])), get_var_at(V2), get_var_at(V3), get_var_at(V4), get_var_at(V5), get_var_at(V6), get_var_at(V7),  Code1= [ [[n,append],[V2,V3,V1]], [[n,append],[[BV],V4,V3]], [[n,append],[%B2 V7,V5,V4]], [[n,append],[[CV],V6,V5]] ],  %trace, foldr(append,[D_code,Code1],Code), %foldr(append,Code2,Code), Results=[%A,[B], B2%,[C] ], foldr(append,Results,Results1), Spaces=[C2], foldr(append,Spaces,Spaces1).
 append_vertical_line(C,I1,I2,C2) :- I11 is I1-1, numbers(I11,1,[],N1), findall(" ",member(_N11,N1),A), %I3 is I1+1, I4 is I2-I1+2, numbers(I4,I1,[],N2), findall("|",member(_N12,N2),A1), %I5 is I2+1, length(C,I6),I7 is I6-I2, numbers(I7,1,[],N3), findall(" ",member(_N13,N3),A2), foldr(append,[A,A1,A2],A3), numbers(I6,1,[],I61), findall(B11,(member(C1,I61),get_item_n(C,C1,C11),get_item_n(A3,C1,A11),string_concat(C11,A11,B11)),C2).
 bell1(Spoken_notification) :- %alarm_clock(H,M), /* string_codes(S,[101, 99, 104, 111, 32, %022, %86,  007%, 71  ]),*/    os_running(OS),  (OS=macos->  foldr(string_concat,["afplay /System/Library/Sounds/Funk.aiff\n","say \""%done"%"echo " ,%""% Spoken_notification, "\""],S1); (OS=linux-> foldr(string_concat,["echo -e '\a'\n","spd-say \""%done"%"echo " ,%""% Spoken_notification, "\""],S1); (OS=windows-> foldr(string_concat,["ECHO \"^G\"\n","PowerShell -Command \"Add-Type –AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak('",Spoken_notification,"');\""],S1); fail))),  shell1_s(S1).
 brush_teeth(up-down):-!.
 ci_end:- lc_tests(Tests),  home_dir(AAA), working_directory1(_,AAA), working_directory1(Old_D1,Old_D1),working_directory1(_,"../../Github_lc/"),foldr(string_concat,[%"scp -pr ../../Github_lc/ ", "rm -f ../Github_lc/* ../Github_lc/*/* ../Github_lc/*/*/* ../Github_lc/*/*/*/*" %Folder1 ],Command315), catch(bash_command(Command315,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42)%,writeln1(Text42)%,abort )),  working_directory1(_,Old_D1), % The modified Prolog programs are saved% - reset dirs, make folders x files have been cleaned from folders%trace,findall1(_,(member([K21|Tests521],Tests),term_to_atom(Tests521,Tests522),open_s(K21,write,S21),write(S21,Tests522),close(S21)),_),sleep(2),modification_dates(Mod_times),clear_mod_dates,findall1(_,(member([K2,Mod_time52],Mod_times),open_s(K2,write,S),write(S,Mod_time52),close(S)),_),sleep(2),!.
 clear_mod_dates :-working_directory1(A1,A1),working_directory1(_,"../luciancicd-data/"),foldr(string_concat,[%"scp -pr ../../Github_lc/ ", "rm -f ../luciancicd-data/*" %Folder1 ],Command315), catch(bash_command(Command315,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42)%,writeln1(Text42)%,abort )), working_directory1(_,A1).
 collect_clauses_in_loops(C,B) :- sub_term_wa([loop1,_],C,A), collect_clauses_in_loops1(A,[],D), foldr(put_sub_term_wa_ae,D,C,B).
 contact_or_delete(Person):- writeln(["Would you like to contact",Person,"again or delete their contact information? (y/n)"]), read_string(user_input,"\n\r","\n\r",_,R), (R="y"->writeln("Contact kept");writeln("Contact deleted")). write_press_release(T,PR,D) :- writeln("What is the title of the press release?"),read_string(user_input,"\n\r","\n\r",_,T), writeln("What is the press release?"),read_string(user_input,"\n\r","\n\r",_,PR), writeln("What should the reader do?"),read_string(user_input,"\n\r","\n\r",_,D). press_release_reminders :- write_5_as, copywriting,  write_5_as_education, copywriting_education, write_5_as_business, copywriting_business.write_5_as.
 contains_assignment(C1) :-append(_A1,Bx,C1),append(_E6,Dxx,Bx),append(E61,Dxx1,Dxx),(append(["."],_Exx,Dxx1)),foldr(string_concat,E61,E612),sub_string(E612,_,_,_,"=").
 contradiction(A,B) :- formula(A,A1), formula(B,B1), not(A1=B1).
 create_matrix(X,Y,Matrix) :- %X is 20, Y is 20, numbers(X,1,[],Xs), numbers(Y,1,[],Ys), findall([X1,Y1,(-)],(member(Y1,Ys),member(X1,Xs)),Matrix).
 cut_cps_if_necessary(Pred_id,Choice_point_trail11,Choice_point_trail2,CP_Vars1,CP_Vars2,Predicate_number,Globals3) :-cut_cps_if_necessary(Pred_id,Choice_point_trail11,Choice_point_trail2,CP_Vars1,CP_Vars2,Predicate_number,Globals3,check-rec).
 data_to_alg41([],Vars,Vars,Alg,Alg) :- !.
 delete_last_n(B1,N,B3) :- string_concat(B3,B2,B1),string_length(B2,N),!.
 diff_combos_vintage(_Before,After,[After]) :- !.
 expr(E)-->num(E).
 find1(Text,String,List) :- find11(Text,String,[],List).
 find2([],_Find,B,B) :- !.find2(A,Find,B,C) :- not(is_list(A)), find3(A,Find,B,C).
 find_combos(_,_,Combos,Combos).
 find_combos3([],[],Combos,Combos) :- !.
 find_combos3([],[],Combos,Combos) :- !.find_combos3(After,Combos,Combos1,Combos2) :- After=[Item1|After2], Combos=[Switch|Combos5],%Item1=[Index,Value], %member(Switch,Combos), (Switch=on->Item=[Item1%[Index,Value] ];Item=[]), append(Combos1,Item,Combos3), find_combos3(After2,Combos5,Combos3,Combos2),!.
 find_deps2(_,[],UR,UR,All,All) :- !.find_deps2([U,R],Term,UR1,UR2,All1,All2) :-%trace, Term=[[U,R,_,D]|T2], %trace, (member([U,R],All1)->find_deps2([U,R],T2,UR1,UR2,All1,All2); (%trace, find_deps1(D,Term,[],UR21,All1,All3), ((flatten(UR21,UR22),UR22=[])->(UR23=[[U,R]],All31=[]);(UR23=[[U,R,UR21]],All31=[UR21])), append(UR1,UR23,UR3), append(All3,All31,All4), find_deps2([U,R],T2,UR3,UR2,All4,All2))),!.
 find_jump_lists(L1,L2) :- random_member(Start,[1,2,3,4,5,6,7,8,9,10]), random_member(Jump,[2,3,4,5,6,7,8,9]), jump(Start,Jump,100,L1,[],L2).
 find_lists(Ts,L,L,_,TN,TN) :- maplist(is_empty_list,Ts),!.
 find_loop(D2,E1,B,_X1,X2,C,N1,N2) :- N3 is N1+1, member([D2,D3],E1),%subtract(E1,[[D2,D3]],E2), %findall(_,member([D2,_],E1),D4), %length(D4,1), append(B,[[D2,D3]],B1), X3=D3, find_loop1(D3,E1,B1,X3,X2,C,N3,N2).
 flatten2([],B,B) :- !.flatten2(A,B,C) :- (not(is_list(A))->append(B,[A],C); (A=[D|E],flatten2(D,B,F), flatten2(E,F,C))),!.
 flatten2([],B,B,C,C) :- !.
 flatten_except_loops2([],B,B,_) :- !.
 flatten_join2([],B,B) :- !.
 flatten_keep_brackets2([],B1,B2,true) :-  append(B1,["[","]"],B2),!.
 foldr_append([],B,B) :- !.
 four_by_fifty_As :-texttobr2_1(64),!.
 gen_alg(L0,O0,A1,A2,B1,B2,Start,PN1):-%writeln(2), get_lang_word("n",Dbw_n), get_lang_word("v",Dbw_v), get_lang_word("equals4",Dbw_equals4), get_lang_word("t",T), get_lang_word("append",Dbw_append), get_lang_word("list",Dbw_list),  ((L0=[[[T, Dbw_list],L00]], O0=[[[T, Dbw_list],O00]])->(O=O00,L=L00,Brackets=true); ((L0=[[T, Dbw_list],L00], O0=[[T, Dbw_list],O00])->(O=O00,L=L00,Brackets=true); L0=L,O0=O,Brackets=false)), (%Start=true-> (%p_name1(PN1), %trace, length(L,LL), numbers(LL,1,[],IVNs), findall(Same_items,(member(IVN,IVNs), get_item_n(L,IVN,LIVN), findall([IVN,LIVN,OIVN],(member(OIVN,O), same_items(LIVN,OIVN)),Same_items)),Same_items2),  foldr(append,Same_items2,Same_items3), sort(Same_items3,Same_items4),  (not(length(Same_items4,LL))->(writeln("Input and output have different items."),abort);true), %trace, findall([IVN,A42],(member([IVN,LIVN1,OIVN1],Same_items4), not(no_repeating_lists(OIVN1)), %writeln(2), %trace, p_name1(PN0), gen_alg([LIVN1],[OIVN1],[],A42,[]%B3  ,_B2,false,PN0)),A41),    %writeln([a41,A41]),  %writeln(3),%trace, findall(A43,member([_,A43],A41),A44), foldr(append,A44,A4),  v_name1(VN1), v_name1(VN11), v_name1(VN2), L1=[[[Dbw_n,PN1],[[],VN1,VN1]]], L2=[[Dbw_n,PN1],[VN1,VN11,VN2],":-"],%trace, findall(VN5,(member(_,IVNs),v_name1(VN5)),VN5s), v_name1(VN6), v_name1(VN61), v_name1(VN62), %VN6=[VN8,VN9], %(A4=[[[n,PN3]|_]|_]->_PN3F=true;_PN3F=false), %trace, %findall(V,member([Dbw_v,V],VN5s),V1), %trace, findall(OIVN1,(member([IVN,LIVN1,OIVN1],Same_items4), no_repeating_lists(OIVN1)),OIVN2),%trace, collect_ga_parts(%OIVN2% L ,[],L_parts), length(L_parts,L_parts_N), numbers(L_parts_N,1,[],L_Parts_Ns), findall([LL2,LL3],(member(LL1,L_Parts_Ns),get_item_n(L_parts,LL1,LL2), v_name1(LL3) %get_item_n(L_parts_Ns,LL1,LL3) ),LL4), %trace, replace_in_terms3(LL4,%OIVN2% L ,_L02),  VN5s=L02,  append(%L02% VN5s ,["|",VN6],VN7), L3=[[[Dbw_n,Dbw_equals4],[VN1 ,VN7]]],  findall(LIVN1,(member([IVN,LIVN1,OIVN1],Same_items4), no_repeating_lists(OIVN1)),LIVN2), replace_v_with_nothing(L02,[],L022), %findall(V,member([Dbw_v,V],L02),L022), %trace, replace_in_term3(L,[[t,list],_],"*",L001), replace_in_term3(O,[[t,list],_],"*",O001),  data_to_alg5(L001,O001,L022,VN6s), %(VN6s=[v5, v4]->notrace;trace), replace_nothing_with_v(VN6s,[],V2), %findall([Dbw_v,V],member(V,VN6s),V2), %trace, flatten_var_term(V2,[],V21), findall(Item,(member(IVN,IVNs),get_item_n(VN5s,IVN,VN51), %get_item_n(L,IVN,LIVN), ((%trace, not(member([IVN,_],A41)))%LIVN=[T,_,_,Data] ->  Item=[]%[[[Dbw_n,=],[VN51,Data]],[VN51,VN51]] ; (%A4=[[Dbw_n,PV3]|_], %*** %writeln(A1), get_item_n(A41,IVN,[_, [[[Dbw_n, PN3]|_]|_]|_]), Item=[[[Dbw_n,PN3],%* [VN51,[],VN62]],[VN51,VN62]] ))),Items2),%trace, findall([B,[A]],member([_,[A,B]],Items2),C),  (forall(member([B,[A]],C),A=B)->A411=[];A411=A4), %trace, replace_in_terms(C,V2% %VN5s%VN8  ,VN821),  findall(A,member([A,_],Items2),C1), %trace, %findall([Dbw_v,VN823],member(VN823,VN821),VN822), %Calls, Item3=[[[Dbw_n,Dbw_append],[VN11,VN821,VN61]], [[Dbw_n,PN1],[VN6,VN61,VN2]]],  %foldr(append,[B1,[L1]],B3), %L1 foldr(append,[L3,C1,Item3],L4), foldr(append,[L2,[L4]],A3), foldr(append,[[A3]],A5), %foldr(append,[[A31]],A5), %foldr(append,[A4],A41), %foldr(append,[A41],A42), foldr(append,[A1,L1,A5,A411],A2) )->(true%trace, %writeln([a2-2,A2]) ) ; (%writeln([2-fail]),%writeln(3),%trace, %writeln(gen_alg(L0,O0,A1,A2,B1,B2,Start,PN1)), %trace, %L0=L,O0=O, L=[L1|L2], O=[O1|O2], ((L1=[T,_,_,Data],O1=[T,_,_,_Data2])-> ( (Brackets=true-> Data2=[[Data]]; Data2=[Data]),  foldr(append,[B1,Data2],B3), (not(L2=[T,_,_,_])-> (%trace, p_name1(PN2), gen_alg(L2,O2,[],A4,B3,B2,true,PN2)); gen_alg(L2,O2,[],A4,B3,B2,false,_)), foldr(append,[A1,A4],A2) ) %trace, /* (Brackets=true-> foldr(append,[A1,[A4]],A2); foldr(append,[A1,A4],A2)) ) */ ; (%trace, %writeln('**'), not(L1=[T,_,_,_]), p_name1(PN2), gen_alg(L1,O1,[],A3,[],_B3,true,PN2), foldr(append,[B1,[PN2]],B4), gen_alg(L2,O2,A3,A4,B4,B2,false,_),  (Brackets=true-> foldr(append,[A1,A4],A2); foldr(append,[A1,A4],A2)) )   ))),!.
 gen_alg(L0,O0,A1,A2,_B1,_B2,Start,PN1):- %*** test if need B1,B2%writeln(1), get_lang_word("n",Dbw_n), get_lang_word("v",Dbw_v), get_lang_word("equals4",Dbw_equals4), get_lang_word("append",Dbw_append), get_lang_word("t",T), get_lang_word("append",Dbw_append), %get_lang_word("list",Dbw_list), get_lang_word("brackets",Dbw_brackets),  ((L0=[[[T, Dbw_brackets],L00]], O0=[[[T, Dbw_brackets],O00]])->(O=O00,L=L00,_Brackets=true); ((L0=[[T, Dbw_brackets],L00], O0=[[T, Dbw_brackets],O00])->(O=O00,L=L00,_Brackets=true); fail%L0=L,O0=O,Brackets=false )), (Start=true-> (%trace, length(L,LL), numbers(LL,1,[],IVNs),  %data_to_alg(L,O,IVNs,OVNs1), findall(Same_items,(member(IVN,IVNs), get_item_n(L,IVN,LIVN), findall([IVN,LIVN,OIVN],(member(OIVN,O), same_items(LIVN,OIVN)),Same_items)),Same_items2),  foldr(append,Same_items2,Same_items3), sort(Same_items3,Same_items4),  (not(length(Same_items4,LL))->(writeln("Input and output have different items."),abort);true), %trace, findall([IVN,A42],(member([IVN,LIVN1,OIVN1],Same_items4), not(no_repeating_lists(OIVN1)), %writeln(1),trace, p_name1(PN0), gen_alg([LIVN1],[OIVN1],[],A42,[]%B3  ,_B2,false,PN0)),A41), findall(A43,member([_,A43],A41),A44), foldr(append,A44,A4),%p_name1(PN1), v_name1(VN1), %v_name1(VN11), v_name1(VN2), %L1=[[[Dbw_n,PN1],[[],VN1,VN1]]], L2=[[Dbw_n,PN1],[VN1,[],VN2],":-"],%trace, findall(VN5,(member(_,IVNs),v_name1(VN5)),VN5s), %v_name1(VN6), %v_name1(VN61), **? v_name1(VN62), %VN6=[VN8,VN9], %append(VN5s,["|",VN6],VN7), %trace, findall(OIVN1,(member([IVN,LIVN1,OIVN1],Same_items4), no_repeating_lists(OIVN1)),OIVN2), collect_ga_parts(%OIVN2% L ,[],L_parts), length(L_parts,L_parts_N), numbers(L_parts_N,1,[],L_Parts_Ns), findall([LL2,LL3],(member(LL1,L_Parts_Ns),get_item_n(L_parts,LL1,LL2), v_name1(LL3) %get_item_n(L_parts_Ns,LL1,LL3) ),LL4), %trace, replace_in_terms3(LL4,%OIVN2% L ,_L02), VN5s=L02, L3=[[[Dbw_n,Dbw_equals4],[VN1,%L02% VN5s ]]], %findall(V,member([Dbw_v,V],VN5s),V1), findall(LIVN1,(member([IVN,LIVN1,OIVN1],Same_items4), no_repeating_lists(OIVN1)),LIVN2),   replace_v_with_nothing(L02,[],L022), %findall(V,member([Dbw_v,V],L02),L022), data_to_alg5(L,O,L022,VN6s),  %data_to_alg(L,O,V1,VN6s), replace_nothing_with_v(VN6s,[],V2), %findall([Dbw_v,V],member(V,VN6s),V2), flatten_var_term(V2,[],V21), findall(Item,(member(IVN,IVNs),get_item_n(VN5s,IVN,VN51), %get_item_n(O,IVN,LIVN), %%*** Test L as O (not(member([IVN,_],A41))%LIVN=[T,_,_,Data] ->  Item=[]%[[[Dbw_n,=],[VN51,Data]],[VN51,VN51]] ; (%A4=[[Dbw_n,PV3]|_], %*** %writeln(A1), %trace, get_item_n(A41,IVN,[_,[[[Dbw_n, PN3]|_]|_]|_]), Item=[[[Dbw_n,PN3],%* [VN51,[],VN62]],[VN51,VN62]] ))),Items2),%trace, findall([B,[A]],member([_,[A,B]],Items2),C),  (forall(member([B,[A]],C),A=B)->A411=[];A411=A4), %trace, replace_in_terms(C,V2%VN6s%VN8  ,VN821),  findall(A,member([A,_],Items2),C1), %trace, %findall([Dbw_v,VN823],member(VN823,VN821),VN822), %Calls, Item3=[[[Dbw_n,Dbw_equals4],[VN2,VN821]]%, %[[Dbw_n,PN1],[VN6,VN61,VN2]]], ], %foldr(append,[B1,[L1]],B3), %L1 foldr(append,[L3,C1,Item3],L4), foldr(append,[L2,[L4]],A3), foldr(append,[[A3]],A5), %foldr(append,[[A31]],A5), %foldr(append,[A4],A41), %foldr(append,[A41],A42), foldr(append,[A1,%L1,  A5,A411],A2) )->(true%writeln([a2-1,A2]) );(%writeln([1-fail]), false)),!.
 get_chain(0,Br,Br,_KW2,Ch,Ch,_Connectives) :- !.
 get_cnv(CNV42) :- cnvn(CNV4), CNV41 is CNV4+96, char_code(CNV42,CNV41), retractall(cnvn(_)), CNV5 is CNV4+1, assertz(cnvn(CNV5)).
 get_extra_answers2(_,0,Answers,Answers) :- !.
 get_types2([],V,V) :- !.
 get_xyz(X1,Y1,Z1,XNs,YNs,ZNs,Particles) :- random_member(X1,XNs), random_member(Y1,YNs), random_member(Z1,ZNs), (not(member([_,_,X1,Y1,Z1,_,_,_],Particles))->true; get_xyz(X1,Y1,Z1,XNs,YNs,ZNs,Particles)).
 grid(X,Y,Grid) :- numbers(X,1,[],XN), numbers(Y,1,[],YN),findall([X1,Y1,[]],(member(X1,XN),member(Y1,YN)),Grid),!.
 group_concat(C2,D2,D3) :- length(C2,I6), numbers(I6,1,[],N1),  findall(B11,(member(C1,N1),get_item_n(C2,C1,C11),get_item_n(D2,C1,A11),string_concat(C11,A11,B11)),D3).
 group_non_lists2(A,B,C) :- ((append(D,E,A), append([F],G,E), is_list(F))-> (H=D,group_non_lists2(F,[],G1), group_non_lists2(G,[],G2), wrap_if_non_empty(G1,G12), wrap_if_non_empty(H,H2), %wrap_if_non_empty(G2,G21), foldr(append,[["["],G12,["]"]],L), foldr(append,[H2,[L],G2],J)); (H=A, wrap_if_non_empty(H,H2), append(H2,J))), append(B,J,C). %group_non_lists2(A,B,C) :-wrap_if_non_empty(A,B) :- (A=[]->B=A;B=[A]),!.
 interpretstatementlp2p5([],_,"[]","[]") :- !.
 join_and_change([],%_Insertions,After,After) :- !.
 list_to_compound([],Compound,Compound) :- !.
 list_to_set1([],A,A) :- !.
 list_to_string(A,B,C) :- %wrap_if_string(B1,B), ((not(is_list(A))%,wrap_if_string(A,A1) )->((B=""->G="";G=","), concat(B,G,A,C) %foldr(string_concat,[B,G,A],C) ); (A=[D|E],wrap_if_string(D,D1), list_to_string(D1,"",F), (B=""->(G="",F=F2%wrap_if_string(F,F2) ); (G=",",F=F2)), %foldr(string_concat,[B,G,F],F1), concat(B,G,F2,F1), list_to_string(E,F1,C))),!.
 make_directory_recursive_s(_,_,%_,[]) :- !.
 matrix_finder([I1,I2],[O1,O2],[[Ma1,Ma2],[Ma3,Ma4]]) :- degree(D), multiplier(M1), cos_or_sin(CS1), (CS1=cos->cos1(D,CS11);sin1(D,CS11)), multiplier(M2), cos_or_sin(CS2), (CS2=cos->cos1(D,CS21);sin1(D,CS21)), multiplier(M3), cos_or_sin(CS3), (CS3=cos->cos1(D,CS31);sin1(D,CS31)), multiplier(M4), cos_or_sin(CS4), (CS4=cos->cos1(D,CS41);sin1(D,CS41)), epsilon(E),  Ma1 is M1*CS11, Ma2 is M2*CS21, Ma3 is M3*CS31, Ma4 is M4*CS41,  O11 is I1*Ma1+I2*Ma2, O21 is I1*Ma3+I2*Ma4,  O11 < O1+E, O11 > O1-E, O21 < O2+E, O21 > O2-E.
 merge2(Old_S1,S1,T3) :-%trace, %open_s("test.lp",write,S21), %write(S21,S3),close(S21), retractall(term_to_numbers1(_)), assertz(term_to_numbers1(1)), %trace, term_to_numbers(term_to_numbers1,Old_S1,[],Corr,[],N1), term_to_numbers(term_to_numbers1,S1,Corr,Corr2,[],N2), retractall(correspondences(_)), %trace, assertz(correspondences(Corr2)), %diff_group_combos(N1,N2,C), diff_combos_vintage(N1,N2,C), findall1(T,(member(C1,C),numbers_to_term(C1,Corr2,[],T0)%,lp2p1(T0,T) ,T=T0 ),T1), delete(T1,[],T31),  %subtract(Combos411,[[]],Combos412), /* findall1(Combos413,(member(Combos413,Combos412), sort(Combos413,Combos414), sort(Before,Before1), not(Combos414=Before1)),Combos41), */ sort(T31,Combos41), %subtract(Combos413,[Old_S1],Combos41), sort_by_length(Combos41,T3),  !.
 merge21(Old_S11,S11,T3) :- %keep(Kept),%writeln1(merge21(Old_S11,S11,T3)),%trace, retractall(term_to_numbers1(_)), assertz(term_to_numbers1(1)), findall1(A,(member([_,A1],Old_S11),term_to_atom(A1,A)),Old_S1), findall1(A,(member([_,A1],S11),term_to_atom(A1,A)),S1), term_to_numbers(term_to_numbers1,Old_S1,[],Corr,[],N1), %trace, term_to_numbers(term_to_numbers1,S1,Corr,Corr2,[],N2),   length(Old_S11,Old_S11L), numbers(Old_S11L,1,[],Old_S11N), %trace, findall1([A,C],(member(Old_S11N1,Old_S11N),get_item_n(Old_S11,Old_S11N1,[A1,A1a]), (kept([A1,A1a])%=[n, Command] ->A=_;A=A1), get_item_n(N1,Old_S11N1,C)),N11), length(S11,S11L), numbers(S11L,1,[],S11N), findall1([A,C],(member(S11N1,S11N),get_item_n(S11,S11N1,[A1,A1a]),  (kept([A1,A1a])->A=_;A=A1),get_item_n(N2,S11N1,C)),N21), append(N11,N21,N31),  retractall(correspondences(_)), assertz(correspondences(Corr2)), diff_group_combos1(N1,N2,C000), %trace, (C000=[C]->true;C000=C), %trace, findall1(T2,(member(C1,C), (string(C1)-> (numbers_to_term(C1,Corr2,T), member([N32,C1],N31), not(T=[]),T2=[[N32,T]] ); (C1=[[c,_],O,N]-> ( findall1([N32,T],(member(C2,O), numbers_to_term(C2,Corr2,T), member([N32,C2],N31), not(T=[])),O111), findall1([N32,T],(member(C2,N), numbers_to_term(C2,Corr2,T), member([N32,C2],N31), not(T=[])),N111), %trace, %writeln1(merge_files3(O111,N111,T2)), merge_files3(O111,N111,T2) )  ))),T31), foldr(append,T31,T32), sort1(T32,T3), !. numbers_to_term(C1,Corr2,T01) :-numbers_to_term([C1],Corr2,[],T0),T0=[T02], term_to_atom(T01,T02),!.
 merge_branch(L2,Branches1,Branches2,Branches3) :- length(Branches21,L2), append(Branches21,Branches22,Branches2), rhetoric_merge_trees(Branches1,Branches21,Branches4), Branches4=[A,Br], append([Br],Branches22,Br2), Branches3=[A,Br2].
 merge_files2([],AT1331,AT333,AT3331) :- append(AT333,AT1331,AT3331),!.
 merge_types([],MT,MT) :- !.
 minimise_dfa3(From,To,T3,DFA1,DFA3) :- T3=[T4|_T5], T4=[From,To2], member([From,To],T3), %not(To2=To), %DFA1=DFA3, append(DFA1,[[From,To]],DFA3), %minimise_dfa3(To1,To2,T5,DFA3,DFA2), !.
 modification_dates(Mod_time) :-working_directory1(A,A),(exists_directory('../luciancicd-data')->true;make_directory('../luciancicd-data')),repositories_paths(K),omit_paths(Omit),%findall1(Omit1,(member(Omit2,Omit),atom_string(Omit1,Omit2)),Omit3),findall1([K1,G4],(member(K1,K), directory_files(K1,F),delete_invisibles_etc(F,G),%findall1(H,(member(H,G),not(string_concat("dot",_,H)),subtract(G,Omit,G1),findall1(G3,(member(G2,G1),string_concat(G2,"/",G3)),G4)%not(member(G,Omit))),K01),%trace,%foldr(append,K0,K01),working_directory1(Old_D,Old_D),findall1(Mod_time1,(member([D,K31],K01),working_directory1(_,Old_D),working_directory1(_,D),%member(K2,K31),%exists_directory(K2),process_directory(K31,%_G, %Omit,% true, Mod_time1)%),Mod_time) ),Mod_time2), foldr(append,Mod_time2,Mod_time),  working_directory1(_,A) ,!.
 move(R,Win_X,Win_Y,X_min,X_max,Y_min,Y_max,X,Y,Matrix) :- %tty_goto(X, Y), tty_put101(%'*', Win_X,Win_Y,  R, X,Y,Matrix), %1 %write('*'),%, 1), read_key(Atom), (Atom=other->true; (move1(Win_X,Win_Y,X_min,X_max,Y_min,Y_max,Atom,X,Y,X1,Y1), move(R,Win_X,Win_Y,X_min,X_max,Y_min,Y_max,X1,Y1,Matrix))),!.
 move(R,X_min,X_max,Y_min,Y_max,X,Y) :- tty_goto(X, Y), tty_put('*', %R, %X,Y), 1), %write('*'),%, 1), read_key(Atom), (Atom=other->true; (move1(X_min,X_max,Y_min,Y_max,Atom,X,Y,X1,Y1), move(R,X_min,X_max,Y_min,Y_max,X1,Y1))),!.
 move_non_loop_clauses_to_loop1([],A,A%,D,D%,NLC,NLC) :- !.
 mr_alg(1,_,_,Commands,Commands) :- !.
 multiply_matrices([[A,B,C],[D,E,F],[G,H,J]],[[X],[Y],[Z]],[X1,Y1,Z1]) :-%trace, X1 is A*X+B*Y+C*Z, Y1 is D*X+E*Y+F*Z, Z1 is G*X+H*Y+J*Z.
 not_contains_loop(A, [loop, A], B, B) :- !.not_contains_loop(Ordered_pred_nums1,Ordered_pred_nums2,P1,P21) :-%trace, recursive_reverse(Ordered_pred_nums2,Ordered_pred_nums21), not_contains_loop1(Ordered_pred_nums1,Ordered_pred_nums21,P1,P21).
 omit_paths(Paths) :- omit_paths1(Paths1), findall1(Paths2,(member(Paths3,Paths1), ((string_concat(Paths2,"/",Paths3))->true; (Paths3=Paths2))),Paths),!.
 only_item(A) :- (atom(A)->true;(number(A)->true;string(A))),!.
 order_preds_bottom_up1_post_order_dfs(_,_,[],Ordered_pred_nums,Ordered_pred_nums,_) :- !.
 paraphraser1(Codes,File_list_a) :-SepandPad=%".",%"&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xx%string_codes(String1,Codes),%string_to_list2(SepandPad,[],SepandPad1),string_codes(String1,Codes),split_string(String1,SepandPad,SepandPad,File_list),%split_on_substring117(Codes,SepandPad1,[],File_list),%split_string(String1,SepandPad,SepandPad,File_list),phrase_from_file_s(string(Codes2), "thesaurus.txt"),%trace,string_codes(String2,Codes2),atom_to_term(String2,Synonym_list,_),%trace,    maplist(p(Synonym_list),File_list,File_list2a),%paraphrase1(File_list,[],File_list2a,Synonym_list,Synonym_list2),findall([W," "],member(W,File_list2a),File_list_3a),flatten(File_list_3a,File_list_4a),foldr(string_concat,File_list_4a,File_list_a),%concat_list(File_list2a,File_list_a),%term_to_atom(Synonym_list2,Synonym_list_a),%(open_s("thesaurus.txt",write,Stream2),%write(Stream2,Synonym_list_a),%close(Stream2)),!.
 place1(_Box_X,_Box_Y,_Box_Z,Grid1,Grid2,Shape_coords) :- random_member(Shape_coord,Shape_coords), (Grid1=[]-> (Grid_Min_X=0,Grid_Min_Y=0,Grid_Min_Z=0, Grid_Max_X=0,Grid_Max_Y=0,Grid_Max_Z=0); min_max(%Box_X,Box_Y,Box_Z,  Grid1,Grid_Min_X,Grid_Min_Y,Grid_Min_Z,  Grid_Max_X,Grid_Max_Y,Grid_Max_Z)), min_max(%Box_X,Box_Y,Box_Z,  Shape_coord,Min_X,Min_Y,Min_Z,Max_X,Max_Y,Max_Z), Min_X1 is Grid_Min_X-(Max_X-Min_X), % eg -5-(3-2)=-6 Min_Y1 is Grid_Min_Y-(Max_Y-Min_Y), Min_Z1 is Grid_Min_Z-(Max_Z-Min_Z), Max_X1 is Grid_Max_X+(Max_X-Min_X), % eg 5+(3-2)=6 Max_Y1 is Grid_Max_Y+(Max_Y-Min_Y),  Max_Z1 is Grid_Max_Z+(Max_Z-Min_Z), numbers(Max_X1,Min_X1,[],Range_X1), numbers(Max_Y1,Min_Y1,[],Range_Y1), numbers(Max_Z1,Min_Z1,[],Range_Z1), random_member(X,Range_X1), random_member(Y,Range_Y1), random_member(Z,Range_Z1), place2(X,Y,Z,Shape_coord,Grid1,Grid2).% find dimension-max dim of shape/*find_possible_places(Box_X,Box_Y,Box_Z,Shape_coord,Range_X,Range_Y,Range_Z) :- min_max(Shape_coord,Min_X,_Min_Y,_Min_Z,Max_X1,Max_Y1,Max_Z1), Range_X is Box_X - Max_X1, % + Min_X, % eg  Range_Y is Box_Y - Max_Y1, Range_Z is Box_Z - Max_Z1.
 point(A,I1,I2) :- append(I1,[A],I2).
 pp01([],'[]') :- !.pp01(List,String2) :-%trace,%trace,pp1(List,'',String1),concat_list(['[\n',String1],String5),%replace(String3,"&","\"",String4),%replace(String3,"#","'",String5),string_concat(String6,B,String5),string_length(B,2),string_concat(String6,'\n]',String2),!.
 pretty_print(dfs_pre_order,Items1) :- pretty_print_dfs_pre_order(Items1,0).
 pretty_print_list([],_,C,C) :- !.
 prettyprint1_e(_C,0,_X) :- !.prettyprint1_e(C,N,X) :-prettyprint2_e(C,N,1,X),writeln(''),N2 is N-1,prettyprint1_e(C,N2,X).
 prettyprint_3d_1_e1(Grid,X,Y,Z) :-numbers(Y,1,[],YN1),reverse(YN1,YN),numbers(X,1,[],XN),numbers(Z,1,[],ZN1),reverse(ZN1,ZN),findall(_,(member(Z1,ZN),nl,nl,member(Y1,YN),nl,member(X1,XN),member([Z1,X1,Y1,M2],Grid),(M2=[]->write(' ');(member(2,M2)->write(2);(write(1)))),write('\t')%(Pixel1=[*]->Pixel="*";Pixel=" "),%write(Pixel)),_).
 print_grid(X_lim,Y_lim,Cs) :- numbers(X_lim,1,[],Xs), numbers(Y_lim,1,[],Ys), findall(_,(member(Y,Ys), findall(_,(member(X,Xs), member([X,Y,C],Cs),write(C)),_), writeln("")),_).
 process_rhythm2([],A,A) :- !.
 put_sub_term_wa_ae([E,A],B,C) :- put_sub_term_wa(A,E,B,C).
 random_events(_,_,Events,Events,Grid,Grid) :- !.
 recursive_reverse([],A,A) :- !.recursive_reverse(A,B,C) :- A=[D|E], (not(is_list(D))->D=D1; (flatten(D,D)->reverse(D,D1); recursive_reverse(D,[],D1))), append([D1],B,D2), recursive_reverse(E,D2,C).
 remove_dups_in_loops(C,B) :- sub_term_wa([loop1,_],C,A), remove_dups_in_loops1(A,[],D), foldr(put_sub_term_wa_ae,D,C,B).remove_dups_in_loops1([],A,A) :- !.
 render_particles(_X,_Y,_Z,0,_Grid1,Grid2,Grid2,_,Particles,Particles) :- !.
 replace1_t2ab([],A,A) :- !.
 replace1_t2b([],A,A) :- !.
 replace1_t2b([],A,A) :- !.replace1_t2b(Replacements,A,D) :- Replacements=[[B,C]|G], atomic_list_concat(E,B,A), atomic_list_concat(E,C,F), replace1_t2b(G,F,D),!.replace_t2b([['\\',''],['–',' '],['—',' '],['“','\''],['”','\''],['‘','\''],['’','\''],['⁃','-']]).
 replace_in_term(A,B,_,A) :- (not(var(A))->A=[];not(var(B))),!.
 resort(P31,P32) :- member([A|B],P31),member([A|C],P31),not(B=C), subtract(P31,[[A|B],[A|C]],P33), foldr(append,[[A],B,C],D), append(P33,[D],P32),!.
 right_hand_rule(X,Y,_X_max,_Y_max,X,Y,Matrix,Matrix).
 round_to_curly(A,B) :- B=..[{},A].
 round_to_curly(A,B) :- square_to_round(C,A),curly_square(B,C),!.
 size_of_value(Value,Size) :- flatten(Value,List),length(List,Size),!.
 solve2(L,R,S1,S2) :- simplify(L,R,L1,R1), move_to_lhs(L1,R1,L2,R2), R2=0, factorise(L2,F), F=A*B, solve(A,S1), solve(B,S2).simplify(pi*X^2,2*pi*X,X^2,2*X) :- !.
 sort1([],B,B).sort1(A,B,C) :- max(A,D), delete(A,D,F), append(B,[D],E), sort1(F,E,C).
 split_into_lp_files1([],B1,_B2,C1,C2) :- append(C1,[B1],C2),!.split_into_lp_files1(A,B,C,B1,C1) :- A=[D|E], not(D=[[n,comment],[["File delimiter",_P,_F1]]]), append(B,[D],F), split_into_lp_files1(E,F,C,B1,C1),!.
 square_to_round(A,B) :- conjunction_list(B,A),!.
 term_to_brackets2(A,B,C,split=Split) :- ((append(D,E,A), append([F],G,E), is_list(F))-> (H=D, ((F=[Word,_Args],type_s2a1(Word))-> (F=G1,Wrap=true); (term_to_brackets2(F,[],G1,split=Split),Wrap=false)), term_to_brackets2(G,[],G2,split=Split), (G1=G12), (H=H2), %wrap_if_non_empty_s2a(G2,G21,split=Split), %trace, (false%Split=on -> (LB=[string,["["]],RB=[string,["]"]]); (LB="[",RB="]")), (Wrap=true->L=[G12]; (foldr(append,[[LB],G12,[RB]],L1), (Split=on->L=[[split,L1]];L=L1))), foldr(append,[H2,L,G2],J)); (H=A, wrap_if_non_empty(H,H2), append(H2,J))), append(B,J,C). wrap_if_non_empty_s2a(A,B,split=Split) :-%writeln1(wrap_if_non_empty_s2a(A,B,split=Split)),%trace, (A=[]->B=A;((Split=on-> B=[[split,A]];B=[A]))),!.
 test_lists2(Common_factors1,Heads1,L%,Heads2) :- member(Common_factor,Common_factors1),%,|Common_factors2], test_lists3(Common_factor,Heads1,L),%,Heads3 %)->  !.
 test_lists3(Common_factor,Heads1,L%,Heads3) :- length(L,Common_factor), Heads1=[Head|_], append(L,_Head2,Head), %trace, %Heads1=Heads11,% if_brackets_tl(Heads1,[],Heads11), forall(member(Head3,Heads11),types_in(Common_factor,L,Head3)).
 traverse(dfs_pre_order,Items1,Items2) :- dfs_pre_order(Items1,[],Items2).
 traverse1(Object,Items1,All1) :- object(Object,Items2,_), dfs_post_order0(0,Items2,[],Items1,[],All1).
 types_to_alg2([],L,L) :- !.
 verify(Grid,X1,Y1,Z1) :- length(Grid,Z1),  member(Plane,Grid), length(Plane,Y1), forall(member(Plane1,Grid), length(Plane1,Y1)),  member(Line,Plane), string_length(Line,X1), forall(member(Line1,Plane), string_length(Line1,X1)).
 verify(Plane,X1,Y1) :- %length(Grid,Z1),  %member(Plane,Grid), length(Plane,Y1), %forall(member(Plane1,Grid), %length(Plane1,Y1)),  member(Line,Plane), string_length(Line,X1), forall(member(Line1,Plane), string_length(Line1,X1)).
 working_directory1(A1,B1) :- (string(A1)->atom_string(A,A1);A=A1), (string(B1)->atom_string(B,B1);B=B1), term_to_atom(working_directory(A,B),Atom), catch(working_directory(A,B), _, (foldr(string_concat,["Error on ",Atom%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],Text41),writeln1(Text41)%fail%abort )),!.
  #>(C,A+B,[[A,Am,Ax],[B,Bm,Bx]]) :- number(C),var(A),var(B), numbers(Ax,Am,[],ANs), numbers(Bx,Bm,[],BNs), member(A,ANs), member(B,BNs), C > A+B.
    find_pairs(Words1,Raw2) :-% finds adjacent combos of wordslength(Words1,L1),L2 is L1-1,numbers(L2,1,[],N),findall([A,B],(member(N1,N),N2 is N1+1,get_item_n(Words1,N1,A),get_item_n(Words1,N2,B)),Words2),% finds suggestions for new combos of words, eg a b, a c and d c->d bsort(Words2,Words3),%trace,findall([F1,K1],(member([A,B],Words3),findall(E1,(member([A,C],Words3),findall([D,B],member([D,C],Words3),E),%foldr(append,E,[],E1)E=E1),F),foldr(append,F,[],F1),findall(J1,(member([G,B],Words3),findall([A,H],member([G,H],Words3),J),%foldr(append,J,[],J1)J=J1),K),foldr(append,K,[],K1)),L),%trace,% makes this a list of A,Bfoldr(append,L,[],LL1),foldr(append,LL1,[],Words4),%LL1=L,%maplist(append,[LL2],[Words4]),% remove duplicatessort(Words4,Words4b),%trace,% removes pairs with two of the same wordfindall([A,B],(member([A,B],Words4b),not(A=B)),Words4a),% removes word pairs already at startsubtract(Words4a,Words3,Raw),%trace,((subtract(Raw,Words1,[])->true;Raw=[])->Raw2=Raw;(writeln1([*,Raw]),find_pairs(Raw,Raw3),append(Raw3,Raw,Raw4),sort(Raw4,Raw2))).
     diff_gitl(Before,After,After3) :- %find_insertions_and_deletions_vintage_old(Before,After,Insertions,Deletions), diff(Before,After,_,_,[],[],After3), %replace11_vintage(After,Insertions,[],[],After2), %replace12_vintage(Before,After2,Deletions,[],After3), !.
  delete_nodes(List4,N2,List5) :- subtract(List4,N2,List5),!.
  get_type1(Head1,Type) :- Head1=[_,Head|_], (Head=number->Type=number; (Head=string->Type=string; (Head=atom->Type=atom; (Head1=[[_,brackets]|_]->Type=brackets; Type=brackets2 )))).
  jump(Start,_Jump,Limit,_L1,L2,L2) :- Start >= Limit,!.
  subtract1([],_,B,B) :- !.
  test1 :-findall(_,(member([T,L,D,A],[[[],0,0,0],[[1],1,1,0],[[1,1],2,1,0],[[1,1,1],3,1,0],[["a",b,1],3,1,0],[[1,[1]],2,2,0.5],[[1,[1,[1]]],2,3,0.6666666666666666]]),(term_analyser(T,[length=L,depth=D,average_items_per_branching_point=A])->writeln([T,L,D,A,success]);writeln([T,L,D,A,failed]))),_).single_item_ta(A) :-    string(A),    !.
         replace_var(Statement,Arguments1,Arguments2,Var_index1,Var_index2,Var_table1,Var_table2) :-%writeln1(replace_vars3(Statement,Arguments1,Arguments2,Var_index1,Var_index2,Var_table1,Var_table2)),%trace,%trace,get_lang_word("n",Dbw_n),((%trace,Statement=[[Dbw_n,Name]|Arguments],%trace,(Arguments=[]->(Arguments3=Arguments,Var_index1=Var_index2,Var_table1=Var_table2);(foldr(append,Arguments,Arguments0),recursive_replace_vars(Arguments0,[],Arguments31,Var_index1,Var_index2,Var_table1,Var_table2),[Arguments31]=Arguments3)),append(Arguments1,[[[Dbw_n,Name]|Arguments3]],Arguments2))->true;((Statement=[[Dbw_n,_Name]],append(Arguments1,[Statement],Arguments2),%Arguments2,Var_index1=Var_index2,Var_table1=Var_table2)->true;(Var_index1=Var_index2,Var_table1=Var_table2,%trace,((%trace,Statement=[])->append(Arguments1,[Statement],Arguments2);(%trace,Statement=[A],((string(A)->true;(number(A)->true;atom(A)))),%,Statement1=[A]append(Arguments1,[Statement],Arguments2))))))%,trace%trace,%Arguments2,%Var_index1=Var_index2,Var_table1=Var_table2.
      file0(N) --> "[", file(N), "]", !.   file0([]) --> [].   file([L|Ls]) --> entry(L),",",   %%{writeln(L)}, %%***   file(Ls), !.   file([L]) --> entry(L),    %%{writeln(L)},   !.
      paraphraser([string,"word word word"],A,on).
   collect_arguments_statement1(Statement,Arguments1,Arguments2) :-get_lang_word("n",Dbw_n),((Statement=[[Dbw_n,_Name],Arguments],%trace,recursive_collect_arguments(Arguments,Arguments1,Arguments2)%findall(Argument,(member(Argument,Arguments),variable_name(Argument)),Arguments3),%append(Arguments1,Arguments3,Arguments2)%Arguments=Result2,%findall(Argument,(member(Argument,Arguments),(predicate_or_rule_name(Argument))),Result2),%Result1=[[Number1,[n,Name],Result2]])->true;(Statement=[[Dbw_n,_Name]],Arguments1=Arguments2)).
   concat_list2A(A1,B):-A1=[A|List],concat_list2A(A,List,B),!.
   concat_list2A(A1,B):-A1=[A|List],concat_list2A(A,List,B),!.concat_list2A(A,[],A):-!.
   read_key1([Code|Codes]) :-   get_single_char(Code),   read_pending_codes(user,Codes,[]).
   replace_pred_name(Statement,Arguments1,Arguments2,To_replace,Replace_with) :-get_lang_word("n",Dbw_n),((Statement=[[Dbw_n,Name]|_Arguments],%trace,%recursive_replace_pred_names(Arguments,Arguments1,Arguments3,To_replace,Replace_with)%trace,(member(Name,To_replace)->(sub_term_wa([n,_Name2],Statement,In1),findall([Add,[n,Replace_with]],member([Add,_A1],In1),In2),foldr(put_sub_term_wa_ae,In2,Statement,Statement2));Statement=Statement2)%Name2=Replace_with;Name2=Name)->true;Statement=Statement2),append(Arguments1,Statement2%[[Dbw_n,Name2],Arguments],Arguments2)/*)->true;(Statement=[[Dbw_n,Name]],(member(Name,To_replace)->Name2=Replace_with;Name2=Name),append(Arguments1,[[[Dbw_n,Name2]]],Arguments2)%Arguments2,))*/.
        % load("file_name.txt",Term).
        list([]) --> [].
        load(File_name,Term) :-        File_name="file_name.txt",        string_concat("folder_name/",File_name,Path),        phrase_from_file_s(string(Codes),Path),        string_codes(String,Codes),        atom_to_term(String,Term,[]).
        open_s(File,Mode,Stream) :-        atom_string(File1,File),        open(File1,Mode,Stream),!.        string_atom(String,Atom) :-        atom_string(Atom,String),!.
        phrase_from_file_s(string(Output), String) :-        atom_string(String1,String),        phrase_from_file(string(Output), String1),!.
        string(String) --> list(String).
    % ["Fundamentals of Pedagogy and Pedagogy Indicators","FUNDAMENTALS OF PEDAGOGY by Lucian Green Two Uses 23 of 30.txt",0,algorithms,"225.ALEXIS: *The subject should write logically connected breasonings."]/**cawptest2(9,mp*,[[[n,append],2,1%% Modes=2 inputs, 1 output]],3,1,%% MaxPredicates is not the number of predicates in the result, it is the number of non-dictionary predicates in the result.
    updatetrans(_,[],Translation,Translation) :- !.
     find_state_machine_body2(Body1,Body2,Return_line_true,Return_line_false,Pred_numbers) :-Body1=[]->Body2=[];(Body1=[Statement|Statements],(((get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,Statement=[N,[Dbw_n,_]|_],number(N))->(%not(predicate_or_rule_name(Statement)),%not(number(Statement)),(Statements=[]->Statements_number=Return_line_true;        find_first_line_number(Statements,Statements_number)),find_state_machine_statement1(Statement,Result1,Statements_number,Return_line_false,Pred_numbers));find_state_machine_body2(Statement,Body2,Return_line_true,Return_line_false,Pred_numbers))),find_state_machine_body2(Statements,Result2,Return_line_true,Return_line_false,Pred_numbers)),   append_list2([Result1,Result2],Body2),!.
                        ssi_interpretpart(stringconcat,_Variable1,_Variable2,_Variable3,_Vars1,Vars2,_Vars2c,AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat",Dbw_stringconcat1),Dbw_stringconcat1=Dbw_stringconcat,AC=[[Dbw_n,Dbw_stringconcat],Values,Values_a,Vars2|_],debug_call(Skip,[[Dbw_n,Dbw_stringconcat],Values]),      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],Values_a]).                                                ssi_interpretpart(append,_Variable1,_Variable2,_Variable3,_Vars1,Vars2,_Vars2c,AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("append",Dbw_append1),Dbw_append1=Dbw_append,AC=[[Dbw_n,Dbw_append],Values,Values_a,Vars2|_],debug_call(Skip,[[Dbw_n,Dbw_append],Values]),      debug_exit(Skip,[[Dbw_n,Dbw_append],Values_a]).
            test(184,[[n,not1]],[[[n,not1],":-",[[[n,not],[[[[n,equals4],[3,2]],[[n,equals4],[3,2]]]]],[[n,true]]]]]      ,[[]]).
            test(185,[[n,not1]],[[[n,not1],":-",[[[n,not],[[[[n,equals4],[2,2]],[[n,equals4],[2,2]]]]],[[n,true]]]]]      ,[]).test(186,[[n,brackets1]],[[[n,brackets1],":-",[%[[n,true]],%[[[n,true]],[[n,true]]]%[[n,true]],[[[n,true]],%[[n,true]],[[[n,true]],[[n,true]]]]]]]      ,[[]]).test(187,[[n,brackets1]],[[[n,brackets1],":-",[%[[n,true]],%[[[n,true]],[[n,true]]]%[[n,true]],%*[[[n,writeln],["1"]],%[[n,true]],%*[[[n,writeln],["2"]],[[n,writeln],["3"]]],%[[n,writeln],["3.5"]],[[[n,writeln],["4"]]%,[[n,writeln],["5"]]],[[[n,writeln],["6"]],[[n,writeln],["7"]]]]]]      ,[[]]).
      try_interpret(Positivity,Debug,Query,Program2,VarLists) :-not(Positivity=true),catch(call_with_time_limit(0.05, not(international_interpret([lang,"en"],Debug,Query,Program2,[VarLists]))),      time_limit_exceeded,      fail),!.
                getvalues(Variable1,Variable2,Value1,Value2,Vars) :-        getvalue(Variable1,Value1,Vars),        getvalue(Variable2,Value2,Vars).
                interpretpart(stringconcat,Terminal,Phrase2,Phrase1,Vars1,Vars2) :-%%Variables1=[Terminal,Phrase1,Phrase2], %% terminal can be v or "a"        getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[Flag1,Flag2,_Flag3]), %% prolog vars, list of vars, [v]=[prolog var]        %%delete(Value1,Value2,Value3A),        (Terminal=[_Value]->TerminalValue2=[TerminalValue1];TerminalValue2=TerminalValue1),                (Terminal=""->(TerminalValue2="",       string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1))->true;            ((var(TerminalValue2)->(string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1)),string_length(TerminalValue2,1));string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1))),                        putvalue(Terminal,TerminalValue2,Vars1,Vars3),        putvalue(Phrase2,Phrase2Value1,Vars3,Vars4),        putvalue(Phrase1,Phrase1Value1,Vars4,Vars2),        (Flag1=true->TerminalValue3=variable1;TerminalValue3=TerminalValue1),        (Flag2=true->Phrase1Value3=variable2;Phrase1Value3=Phrase1Value1),        (debug(on)->(writeln([call,[[n,stringconcat],[TerminalValue3,Phrase1Value3,Phrase2]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,stringconcat],[TerminalValue1,Phrase1Value1,Phrase2Value1]],"Press c."]),(not(get_single_char(97))->true;abort));true),!.
                        interpretpart(grammar_part,Variables1,Vars1,Vars2) :-Variables1=[Terminal,Phrase1,Phrase2], %% terminal can be v or "a"        %%terminal(Terminal),        getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[Flag1,Flag2,_Flag3]), %% prolog vars, list of vars, [v]=[prolog var]        %%delete(Value1,Value2,Value3A),        (Terminal=[_Value]->TerminalValue2=[TerminalValue1];TerminalValue2=TerminalValue1),((string(Phrase1Value1)->Phrase1Value1=Phrase1Value11;(number(Phrase1Value1)->number_string(Phrase1Value1,Phrase1Value11);Phrase1Value1=Phrase1Value11)),(Terminal=""->TerminalValue2="";true),       (((var(TerminalValue2)->(string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11)),string_length(TerminalValue2,1));string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;    string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;            ((Phrase1Value1=[_ItemA|_ItemsA]),(Terminal=[]->(TerminalValue2=[],((var(TerminalValue2)->length(TerminalValue2,1);true),(append(TerminalValue2,Phrase2Value1,Phrase1Value1))))->true;(append(TerminalValue2,Phrase2Value1,Phrase1Value1)->true)))),        putvalue(Terminal,TerminalValue2,Vars1,Vars3),        putvalue(Phrase2,Phrase2Value1,Vars3,Vars4),        putvalue(Phrase1,Phrase1Value1,Vars4,Vars2),        (Flag1=true->TerminalValue3=variable1;TerminalValue3=TerminalValue1),        (Flag2=true->Phrase1Value3=variable2;Phrase1Value3=Phrase1Value1),        (debug(on)->(writeln([call,[[n,grammar_part],[TerminalValue3,Phrase1Value3,Phrase2]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,grammar_part],[TerminalValue1,Phrase1Value1,Phrase2Value1]],"Press c."]),(not(get_single_char(97))->true;abort));true),!.
                        interpretpart(grammar_part,Variables1,Vars1,Vars2) :-Variables1=[Terminal,Phrase1,Phrase2], %% terminal can be v or "a"        %%terminal(Terminal),        getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[Flag1,Flag2,_Flag3]), %% prolog vars, list of vars, [v]=[prolog var]        %%delete(Value1,Value2,Value3A),        (Terminal=[_Value]->TerminalValue2=[TerminalValue1];TerminalValue2=TerminalValue1),((string(Phrase1Value1)->Phrase1Value1=Phrase1Value11;(number(Phrase1Value1)->number_string(Phrase1Value1,Phrase1Value11);Phrase1Value1=Phrase1Value11)),(Terminal=""->TerminalValue2="";true),       (((var(TerminalValue2)->(string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11)),string_length(TerminalValue2,1));string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;    string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;            ((Phrase1Value1=[_ItemA|_ItemsA]),(Terminal=[]->(TerminalValue2=[],((var(TerminalValue2)->length(TerminalValue2,1);true),(append(TerminalValue2,Phrase2Value1,Phrase1Value1))))->true;(append(TerminalValue2,Phrase2Value1,Phrase1Value1)->true)))),        putvalue(Terminal,TerminalValue2,Vars1,Vars3),        putvalue(Phrase2,Phrase2Value1,Vars3,Vars4),        putvalue(Phrase1,Phrase1Value1,Vars4,Vars2),        (Flag1=true->TerminalValue3=variable1;TerminalValue3=TerminalValue1),        (Flag2=true->Phrase1Value3=variable2;Phrase1Value3=Phrase1Value1),        (debug(on)->(writeln([call,[[n,grammar_part],[TerminalValue3,Phrase1Value3,Phrase2]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,grammar_part],[TerminalValue1,Phrase1Value1,Phrase2Value1]],"Press c."]),(not(get_single_char(97))->true;abort));true),!.getvalues(Variable1,Variable2,Value1,Value2,Vars) :-        getvalue(Variable1,Value1,Vars),        getvalue(Variable2,Value2,Vars).
        /*interpretpart(member,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member",Dbw_member),        getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_member],[Value1,Value2]]),  %(((not(Value2=empty)->member(Value2,Value1),((member(Value3,Value1),putvalue_equals4(Variable2,Value3,Vars1,Vars2)%%,Vars2=Vars1)->      debug_exit(Skip,[[Dbw_n,Dbw_member],[Value1,Value3]]);     debug_fail(Skip,[[Dbw_n,Dbw_member],[Value1,Value2]])),!.
        interpretpart(bracket2,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        Value1A = Value2,        val1emptyorvalsequal(Value1,Value1A),        %%val1emptyorvalsequal(Value2A,Value1),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,unwrap],[[variable],[Value2]]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,unwrap],[[Value2],[Value2]]],"Press c."]),(not(get_single_char(97))->true;abort));true).
        interpretpart(bracket2,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        Value1A = Value2,        val1emptyorvalsequal(Value1,Value1A),        %%val1emptyorvalsequal(Value2A,Value1),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,unwrap],[[variable],[Value2]]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,unwrap],[[Value2],[Value2]]],"Press c."]),(not(get_single_char(97))->true;abort));true).        interpretpart(head,Variable1,Variable2,Vars1,Vars2) :-getvalues(Variable1,Variable2,Value1,Value2,Vars1),Value1=[Value1A|_Rest],        val1emptyorvalsequal(Value2,Value1A),        putvalue(Variable2,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,head],[Value1,variable]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,head],[Value1,Value1A]],"Press c."]),(not(get_single_char(97))->true;abort));true),!.
        interpretpart(grammar_part,Variables1,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("grammar_part",Dbw_grammar_part),((Variables1=[Terminal,Phrase1,Phrase2], %% terminal can be v or "a"        %%terminal(Terminal),        getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[Flag1,Flag2,_Flag3]), %% prolog vars, list of vars, [v]=[prolog var]        %%delete(Value1,Value2,Value3A),        (Terminal=[_Value]->TerminalValue2=[TerminalValue1];TerminalValue2=TerminalValue1),((string(Phrase1Value1)->Phrase1Value1=Phrase1Value11;(number(Phrase1Value1)->number_string(Phrase1Value1,Phrase1Value11);Phrase1Value1=Phrase1Value11)),(Terminal=""->TerminalValue2="";true),       (((var(TerminalValue2)->(string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11)),string_length(TerminalValue2,1));string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;    string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;            ((Phrase1Value1=[_ItemA|_ItemsA]),(Terminal=[]->(TerminalValue2=[],((var(TerminalValue2)->length(TerminalValue2,1);true),(append(TerminalValue2,Phrase2Value1,Phrase1Value1))))->true;(append(TerminalValue2,Phrase2Value1,Phrase1Value1)->true)))),        putvalue(Terminal,TerminalValue2,Vars1,Vars3),        putvalue(Phrase2,Phrase2Value1,Vars3,Vars4),        putvalue(Phrase1,Phrase1Value1,Vars4,Vars2),        (Flag1=true->TerminalValue3=variable1;TerminalValue3=TerminalValue1),        (Flag2=true->Phrase1Value3=variable2;Phrase1Value3=Phrase1Value1))->        (debug_call(Skip,[[Dbw_n,grammar_part],[TerminalValue3,Phrase1Value3,Phrase2]]),        debug_exit(Skip,[[Dbw_n,grammar_part],[TerminalValue1,Phrase1Value1,Phrase2Value1]]));        (debug_call(Skip,[[Dbw_n,grammar_part],[variable1,variable2,variable3]]),        (debug_fail(Skip,[[Dbw_n,grammar_part],[variable1,variable2,variable3]])))),!.
        interpretpart(head,Variable1,Variable2,Vars1,Vars2) :-getvalues(Variable1,Variable2,Value1,Value2,Vars1),Value1=[Value1A|_Rest],        val1emptyorvalsequal(Value2,Value1A),        putvalue(Variable2,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,head],[Value1,variable]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,head],[Value1,Value1A]],"Press c."]),(not(get_single_char(97))->true;abort));true),!.
        interpretpart(head,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("head",Dbw_head),getvalues(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_head],[Value1,variable]]),((Value1=[Value1A|_Rest],        val1emptyorvalsequal(Value2,Value1A),        putvalue(Variable2,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_head],[Value1,Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_head],[Value1,variable]])),!.        interpretpart(tail,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("tail",Dbw_tail),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_tail],[Value1,variable]]),        ((Value1=[_Head|Value1A],%%removebrackets(Value1A,Value1B),         val1emptyorvalsequal(Value2,Value1A),        putvalue(Variable2,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_tail],[Value1,Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_tail],[Value1,variable]])),!.
        interpretpart(head,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("head",Dbw_head),getvalues_equals4(Variable1,Variable2,Value1,_Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_head],[Value1,variable]]),((Value1=[Value1A|_Rest],        %val1emptyorvalsequal(Value2,Value1A),        putvalue_equals4(Variable2,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_head],[Value1,Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_head],[Value1,variable]])),!.
        interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1 = [Value2A, Value3A],        val1emptyorvalsequal(Value2,Value2A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable2,Value2A,Vars1,Vars3),        putvalue(Variable3,Value3A,Vars3,Vars2),        (debug(on)->(writeln([call,[[n,=],[[Value2A, Value3A],[variable1,variable2]]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,=],[[Value2A, Value3A],[Value2A, Value3A]],"Press c."]]),(not(get_single_char(97))->true;abort));true).
        interpretpart(member,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),(not(Value1=empty)->(member(Value1,Value2),Vars2=Vars1,        (debug(on)->(writeln([call,[[n,member],[Value1,Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,member],[Value1,Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true));(member(Value3,Value2),putvalue(Variable1,Value3,Vars1,Vars2),                (debug(on)->(writeln([call,[[n,member],[variable1,Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true),                (debug(on)->(writeln([exit,[[n,member],[Value3,Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true))).
        interpretpart(member,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member",Dbw_member),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_member],[Value1,Value2]]),  (((not(Value2=empty)->member(Value2,Value1),(member(Value3,Value1),putvalue(Variable2,Value3,Vars1,Vars2)%%,Vars2=Vars1)))->      debug_exit(Skip,[[Dbw_n,Dbw_member],[Value1,Value3]]);     debug_fail(Skip,[[Dbw_n,Dbw_member],[Value1,Value2]])),!.
        interpretpart(not_append,Variable1,Variable2,Variable3,Vars1,Vars1) :-                getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        debug_call(Skip,[[n,[not,append]],[Value1,Value2,Value3]]),        ((islist(Value1),islist(Value2),        not(append1(Value1,Value2,Value3))        %%val1emptyorvalsequal(Value3,Value3A),       %% putvalue(Variable3,Value3A,Vars1,Vars2)       )->      debug_exit(Skip,[[n,[not,append]],[Value1,Value2,Value3]]);     debug_fail(Skip,[[n,[not,append]],[Value1,Value2,Value3]])),!.                        interpretpart(not_stringconcat,Variable1,Variable2,Variable3,Vars1,Vars1) :-                getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        debug_call(Skip,[[n,[not_stringconcat]],[Value1,Value2,Value3]]),        ((string(Value1),string(Value2),string(Value3),        stringconcat(Value1,Value2,Value3)        %%val1emptyorvalsequal(Value3,Value3A),        %%putvalue(Variable3,Value3A,Vars1,Vars2)        )->      debug_exit(Skip,[[n,[not_stringconcat]],[Value1,Value2,Value3]]);     debug_fail(Skip,[[n,[not_stringconcat]],[Value1,Value2,Value3]])),!.                        interpretpart([],Variable1,Vars1,Vars1) :-        getvalue(Variable1,Value1,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),not(isempty(Value1)),%%isempty(Value2),        %%val1emptyorvalsequal(Value2,Value1),%%isval(Value2),debug_call(Skip,[[n,[]],[Value1]]),(        Value1=[]->debug_exit(Skip,[[n,[]],[Value1]]);     debug_fail(Skip,[[n,[]],[Value1]])),!.
        interpretpart(not_append,Variable1,Variable2,Variable3,Vars1,Vars1) :-                getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        debug_call(Skip,[[n,[not,append]],[Value1,Value2,Value3]]),        ((islist(Value1),islist(Value2),        not(append1(Value1,Value2,Value3))        %%val1emptyorvalsequal(Value3,Value3A),       %% putvalue(Variable3,Value3A,Vars1,Vars2)       )->      debug_exit(Skip,[[n,[not,append]],[Value1,Value2,Value3]]);     debug_fail(Skip,[[n,[not,append]],[Value1,Value2,Value3]])),!.                        interpretpart(not_stringconcat,Variable1,Variable2,Variable3,Vars1,Vars1) :-                getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        debug_call(Skip,[[n,[not_stringconcat]],[Value1,Value2,Value3]]),        ((string(Value1),string(Value2),string(Value3),        stringconcat(Value1,Value2,Value3)        %%val1emptyorvalsequal(Value3,Value3A),        %%putvalue(Variable3,Value3A,Vars1,Vars2)        )->      debug_exit(Skip,[[n,[not_stringconcat]],[Value1,Value2,Value3]]);     debug_fail(Skip,[[n,[not_stringconcat]],[Value1,Value2,Value3]])),!.                        interpretpart([],Variable1,Vars1,Vars1) :-        getvalue(Variable1,Value1,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),not(isempty(Value1)),%%isempty(Value2),        %%val1emptyorvalsequal(Value2,Value1),%%isval(Value2),debug_call(Skip,[[n,[]],[Value1]]),(        Value1=[]->debug_exit(Skip,[[n,[]],[Value1]]);     debug_fail(Skip,[[n,[]],[Value1]])),!.interpretpart([],Variable1,Vars1,Vars2) :-        getvalue(Variable1,Value1,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),isempty(Value1),        %%val1emptyorvalsequal(Value1,[]),%%isval(Value2),debug_call(Skip,[[n,[]],[variable]]),(        putvalue(Variable1,[],Vars1,Vars2)->debug_exit(Skip,[[n,[]],[[]]]);     debug_fail(Skip,[[n,[]],[variable]])),!.
        interpretpart(not_tail,Variable1,Variable2,Vars1,Vars1) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[n,[not,tail]],[Value1,Value2]]),        ((not(Value1=[_Head|Value2])%%removebrackets(Value1A,Value1B),         %%val1emptyorvalsequal(Value2,Value1A),        %%putvalue(Variable2,Value1A,Vars1,Vars2)        )->      debug_exit(Skip,[[n,[not,tail]],[Value1,Value2]]);     debug_fail(Skip,[[n,[not,tail]],[Value1,Value2]])),!.
        interpretpart(tail,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        Value1=[_Head|Value1A],%%removebrackets(Value1A,Value1B),         val1emptyorvalsequal(Value2,Value1A),        putvalue(Variable2,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,tail],[Value1,variable]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,tail],[Value1,Value1A]],"Press c."]),(not(get_single_char(97))->true;abort));true).
        interpretpart(tail,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("tail",Dbw_tail),        getvalues_equals4(Variable1,Variable2,Value1,_Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_tail],[Value1,variable]]),        ((Value1=[_Head|Value1A],%%removebrackets(Value1A,Value1B),         %val1emptyorvalsequal(Value2,Value1A),        putvalue_equals4(Variable2,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_tail],[Value1,Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_tail],[Value1,variable]])),!.
        interpretstatementlp2c1(Statement,Algorithm1,Algorithm2) :-Statement=[[N_or_v,Name],Arguments],(N_or_v=n;N_or_v=v),interpretstatementlp2c2a([N_or_v,Name],Algorithm1,Algorithm3a),        string_concat(Algorithm3a,"(",Algorithm3),interpretstatementlp2c2(Arguments,Algorithm3,Algorithm4),        string_concat(Algorithm4,")",Algorithm2),!.
        interpretstatementlp2p1(Statement,Algorithm1,Algorithm2) :-Statement=[[N_or_v,Name],Arguments],(N_or_v=n;N_or_v=v),interpretstatementlp2p2a([N_or_v,Name],Algorithm1,Algorithm3a,"[]"),        string_concat(Algorithm3a,"(",Algorithm3),interpretstatementlp2p2(Arguments,Algorithm3,Algorithm4,"[]"),        string_concat(Algorithm4,")",Algorithm2),!.
        %e4_fa_getvalue(Variable,_,_Vars) :-%var(Variable),!.e4_fa_getvalue(Variable,Value,Vars) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value)->true;        (isvar(Variable),isvalstrorundef(Value),e4_fa_getvar(Variable,Value,Vars))).
        swap_quote_to_space(A,B) :-string_codes(A,C),findall(D,(member(C1,C),swap1(C1,D)),E),string_codes(B,E),!.
          repeat_until_last_two_same(B, Result) :-    % Generate some result    generate_result(Result1),    % Check if the last two results are the same    (   ((var(B)->fail;true),    Result1 = B, B = Result)->true;    % If not, continue repeating       repeat_until_last_two_same(Result1, Result)    ),!.    /*%repeat_until_last_two_same(generate_result(Result1),Result1,R).
            writeln1(Term) :-        term_to_atom(Term,Atom),        writeln(Atom),!.       /*See also string to list (test 15) in List Prolog at `https://github.com/luciangreen/listprologinterpreter/blob/master/lpiverify4.pl`, which does the same thing as atom_to_term//3.  The predicates above replace the need for using long grammars, however I have posted answers on "My long SWI-Prolog grammar keeps on failing" (`https://stackoverflow.com/questions/52559339/my-long-swi-prolog-grammar-keeps-on-failing`) and "I can't get my Prolog DCG working with atom concat" (`https://stackoverflow.com/questions/54374105/i-cant-get-my-prolog-dcg-working-with-atom-concat`) for those who are interested.
        interpretbody(_Functions1,_Functions2,Vars,Vars,[],true) :- !.
        interpretbodylp2c(Body,Algorithm1,Algorithm2) :-        Body=[[[n,not],[Statement]]|Statements2],string_concat(Algorithm1,"not((",Algorithm3),        interpretbodylp2c([Statement],Algorithm3,Algorithm4),string_concat(Algorithm4,"))",Algorithm5),write_comma_if_not_empty_list(Statements2,Algorithm5,Algorithm6),        interpretbodylp2c(Statements2,Algorithm6,Algorithm2),        %%write_full_stop_if_last_item(Statements2,Algorithm7,Algorithm2),!.
        interpretbodylp2p(Body,Algorithm1,Algorithm2) :-%trace,            Body=[[Function,[Arguments2a,Arguments2b]]|Statements2],        (Function=[n,equals4]->true;Function=[n,=]),            %interpretstatementlp2p2a(Function,Algorithm1,Algorithm3a,"[]"), %               string_concat(Algorithm3a,"(",Algorithm3d),interpretstatementlp2p2a(Arguments2a,"",Algorithm2a1,"[]"),interpretstatementlp2p2a(Arguments2b,"",Algorithm2b1,"[]"),        foldr(string_concat,[Algorithm1,Algorithm2a1,"=",Algorithm2b1],Algorithm2c),write_comma_if_not_empty_list(Statements2,Algorithm2c,Algorithm2d),        interpretbodylp2p(Statements2,Algorithm2d,Algorithm2),!.
        memberlp2p10([],Algorithm1,Algorithm1) :- !.
           word([X|Xs]) --> [X], {char_type(X,csymf)->true;(X=27->true;X=8217)}, word(Xs), !.
                        ssi_interpretpart(stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat",Dbw_stringconcat1),Dbw_stringconcat1=Dbw_stringconcat,%Vars1=Vars2,%trace,        getvalues_equals4(Variable1,Variable2,Variable3,Value1z,Value2z,Value3z,Vars1),debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[Value1z,Value2z,Value3z]]),matrix(Matrix),findall(X,(member(Y,[Value1z,Value2z,Value3z]),(is_empty(Y)->X=o;X=i)),Z),foldr(atom_concat,Z,'',W),(member(W,Matrix)->true;(writeln([incorrect,stringconcat,modes,W]),abort)),%findall(Item_u,(member(Item,[Value1z,Value2z,Value3z]),replace_empty_with_undefined(Item,Item_u)),[Value1,Value2,Value3]),[Value1z,Value2z,Value3z]=[Value1,Value2,Value3],(W=iii->(%findall([Vars2b,[Value1,Value2a],Value2a],(,*((string_concat(Value1,Value2,Value3)%,%replace_undefined_with_empty(Item,Item_e))->(Vars1=Vars2,debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3]]));(Vars1=Vars2,debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3]]))),%putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)%),Vars2a),Vars2a=[[Vars2,_,Value2a]|Vars2d],%findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1)),Vars2c=[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a][]]);%numbers(3,1,[],N),%findall(P,(member(N1,N),get_item_n(Z,N1,Z1),(Z1=i->get_item_n([Value1,Value2,Value3],N1,P));P=[v1,N1]%(Z1=o,get_item_n([Value1a,Value2a,Value3a],N1,P))%),P1),(W=iio->(findall([Vars2b,[Value1,Value2,Value3a],Value3a],(string_concat(Value1,Value2,Value3a),putvalue_equals4(Variable3,Value3a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value3a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3a]]));(W=ioi->(findall([Vars2b,[Value1,Value2a,Value3],Value2a],(string_concat(Value1,Value2a,Value3),putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value2a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2a,Value3]]));/*(W=ioo->(findall([Vars2b,[Value1,Value2a,Value3a],Value2a,Value3a],(string_concat*(Value1,Value2a,Value3a),putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value2a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1,Value2a,Value3]]));*/(W=oii->(findall([Vars2b,[Value1a,Value2,Value3],Value1a],(string_concat(Value1a,Value2,Value3),putvalue_equals4(Variable1,Value1a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value1a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1a,Value2,Value3]]));/*(W=oio->(findall([Vars2b,[Value1a,Value2,Value3],Value1a],(string_concat(Value1a,Value2,Value3),putvalue_equals4(Variable1,Value1a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value1a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1a,Value2,Value3]]));*/(W=ooi->(%trace,findall([Vars2b,[Value1a,Value2a,Value3],Value1a,Value2a],(string_concat(Value1a,Value2a,Value3),putvalue_equals4(Variable1,Value1a,Vars1,Vars2ba),putvalue_equals4(Variable2,Value2a,Vars2ba,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value1a,Value2a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_stringconcat],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[Value1a,Value2a,Value3]]))))))).ssi_interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("append",Dbw_append1),Dbw_append1=Dbw_append,get_lang_word("v",Dbw_v),%Vars1=Vars2,        getvalues_equals4(Variable1,Variable2,Variable3,Value1z,Value2z,Value3z,Vars1),debug_call(Skip,[[Dbw_n,Dbw_append],[Value1z,Value2z,Value3z]]),matrix(Matrix),findall(X,(member(Y,[Value1z,Value2z,Value3z]),(contains_var([Dbw_v,_],Y)->X=o;X=i)),Z),foldr(atom_concat,Z,'',W),(member(W,Matrix)->true;(writeln([incorrect,append,modes,W]),abort)),%findall(Item_u,(member(Item,[Value1z,Value2z,Value3z]),replace_empty_with_undefined(Item,Item_u)),[Value1,Value2,Value3]),[Value1z,Value2z,Value3z]=[Value1,Value2,Value3],((W=iii->(%findall([Vars2b,[Value1,Value2a],Value2a],(,*((append(Value1,Value2,Value3)%,%replace_undefined_with_empty(Item,Item_e))->(Vars1=Vars2,debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3]]));(Vars1=Vars2,debug_fail(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3]]))),%putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)%),Vars2a),Vars2a=[[Vars2,_,Value2a]|Vars2d],%findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1)),Vars2c=[[Dbw_n,Dbw_append],[Value1,Value2,Value3],W,_,%,%Value2a_,_,%[Value1,Value2a][]]);%numbers(3,1,[],N),%findall(P,(member(N1,N),get_item_n(Z,N1,Z1),(Z1=i->get_item_n([Value1,Value2,Value3],N1,P));P=[v1,N1]%(Z1=o,get_item_n([Value1a,Value2a,Value3a],N1,P))%),P1),(W=iio->(findall([Vars2b,[Value1,Value2,Value3a],Value3a],(append(Value1,Value2,Value3a),putvalue_equals4(Variable3,Value3a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value3a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_append],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3a]]));(W=ioi->(findall([Vars2b,[Value1,Value2a,Value3],Value2a],(append(Value1,Value2a,Value3),putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value2a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_append],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1,Value2a,Value3]]));%/* % this is possible later x(W=ioo->findall([Vars2b,[Value1,Value2a,Value3a],Value3a],(        append1(Value1,_Value2A,Value3A),%ValueA),        find_v_sys(V_sys),                replace_in_term(Value3A,_%'$VAR'(_)        ,V_sys,Value3A1),        Value3A1=[Value3A2|Value3A3],        Value3A4=[Value3A2,"|",Value3A3],        %val1emptyorvalsequal(Value3,Value3A),        %trace,        %Vars1=Vars2,        %member([Value1A,Value3A],ValueA),        putvalue_equals4(Variable3,Value3A4,Vars1,Vars2b)%)->                        %(findall([Vars2b,[Value1,Value2a,Value3a],Value2a,Value3a],(append*(Value1,Value2a,Value3a),%putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value3a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_append],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1,Value2,Value3a]]));%*/(W=oii->(findall([Vars2b,[Value1a,Value2,Value3],Value1a],(append(Value1a,Value2,Value3),putvalue_equals4(Variable1,Value1a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value1a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_append],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1a,Value2,Value3]]));%/* possible later x(W=oio->(command_n_sols(N),findall([Vars2b,[Value1a,Value2,Value3a],Value1a,Value3a],(findnsols(N,[Value1A1,Value3A1],(append1(Value1A,Value2,Value3A),        find_v_sys(V_sys1),        replace_in_term(Value1A,_%'$VAR'(_)        ,V_sys1,Value1A1),        find_v_sys(V_sys2),        replace_in_term(Value3A,_%'$VAR'(_)        ,V_sys2,Value3A1))        ,ValueA),!,        %val1emptyorvalsequal(Value3,Value3A),        %trace,        %Vars1=Vars2,        member([Value1a,Value3a],ValueA),        putvalue_equals4(Variable1,Value1a,Vars1,Vars3),%)->        putvalue_equals4(Variable3,Value3a,Vars3,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value1a,Value3a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_append],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1a,Value2,Value3a]]));%*/(W=ooi->(%trace,findall([Vars2b,[Value1a,Value2a,Value3],Value1a,Value2a],(append(Value1a,Value2a,Value3),putvalue_equals4(Variable1,Value1a,Vars1,Vars2ba),putvalue_equals4(Variable2,Value2a,Vars2ba,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value1a,Value2a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_append],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1a,Value2a,Value3]]));      (W=ooo->(%trace,command_n_sols(N),%N=3,%find_v_sys(V_sys),replace_in_term(Value2,[Dbw_v,_],%'$VAR'(_)        _,Value22),findall([Vars2b,[Value1a,%Value2a,Value3a],Value1a,%Value2a,Value3a],(findnsols(N,[Value1A1,%Value2A1,Value3A1],(append1(Value1A,Value22,Value3A),        find_v_sys(V_sys1),        find_v_sys(V_sys2),        replace_in_term(Value1A,_%'$VAR'(_)        ,empty2,Value1A2),        %replace_in_term(Value2A,_%'$VAR'(_)        %,empty,Value2A1),        replace_in_term(Value3A,_%'$VAR'(_)        ,empty2,Value3A2),        convert_to_lp_pipe(Value1A2,Value1A3),        %convert_to_lp_pipe(Value2A2,Value2A1),        convert_to_lp_pipe(Value3A2,Value3A3),        replace_in_term(Value1A3,empty2%'$VAR'(_)        ,V_sys1,Value1A1),        replace_in_term(Value3A3,empty2%'$VAR'(_)        ,V_sys2,Value3A1)        )        ,ValueA),!,        %val1emptyorvalsequal(Value3,Value3A),        %trace,        %Vars1=Vars2,        member([Value1a,%Value2a,        Value3a],ValueA),        putvalue_equals4(Variable1,Value1a,Vars1,Vars3b),%)->        %putvalue_equals4(Variable2,Value2a,Vars3b,Vars3),%)->        putvalue_equals4(Variable3,Value3a,Vars3b,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value1a,%Value2a,Value3a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_append],[Value1,Value2,Value3],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_append],[Value1a,Value2a,Value3a]])))))))))->true;(%writeln1(fail-ssi_interpretpart(append,Variable1,Variable2,Variable3,Vars1,Vars2,Vars2c)),fail)).     % writeln(Vars2c),trace.
            %%;     %%debug_fail(Skip,[[n,member2],[Value1,Value2]])),!.
                       word([X|Xs]) --> [X], {char_type(X,csymf)->true;(X=27->true;X=8217)}, word(Xs), !.
                                                              match4([[v,a],[v,b]],[[1,3],2],[],V).V = [[[v, a], [1, 3]], [[v, b], 2]] **/map(_,_,_F,[],L,L,_).
                                                              string_concat1(A,"b","ab").
                                                             compress_vars([[[v,a],[2,3]],[[v,b],[3]]],V,V1).V = [[[&, 2], [[&, tail], [&, 1]]], [[&, 1], [2, 3]]],V1 = [[[v, a], [&, 1]], [[v, b], [&, 2]]].
                                                           apply_for_loan(2,0,1,1,A).
                                                        data_to_types22([[1],[1]],T,V),find_lists1(T,[],L,[],S),writeln(T),writeln(V),writeln(S),writeln(L).
                                     rainforest([[1,9,["*"]],[2,9,["*"]],[3,9,["*"]],[4,9,["*"]],[5,9,["*"]],[6,9,["*"]],[7,9,["*"]],[1,8,["*"]],[2,8,[]],[3,8,["m"]],[4,8,["vine"]],[5,8,[]],[6,8,[]],[7,8,["*"]],[1,7,["*"]],[2,7,["*"]],[3,7,["*"]],[4,7,["*"]],[5,7,["*"]],[6,7,["*"]],[7,7,["*"]]]).traverse(X,Y):-traverse(X,Y,[],A,[],B),!.traverse(X,Y,Explored1,Explored2,Inventory1,Inventory2):-rainforest(Map),member2(Map,[X,Y,Cell]),((equals4(Cell,["*"])->(true);(member2(Explored1,[X,Y])))->((equals4(Explored1,Explored2),equals4(Inventory1,Inventory2)));((writeln([X,Y]),(equals4(Cell,[])->(equals4(Inventory4a,Inventory1));((equals4(Cell,[Item]),append(Inventory1,[Item],Inventory3),apply_all_to_all(Inventory3,Inventory4),equals4(Inventory4a,Inventory4)))),writeln(Inventory4a),(member2(Inventory4a,"e")->((writeln("Game Over"),trace));((append(Explored1,[[X,Y]],Explored3),-(X,1,Xm1),-(Y,1,Ym1),+(X,1,Xp1),+(Y,1,Yp1),traverse(Xm1,Y,Explored3,Explored4,Inventory4a,Inventory5),traverse(X,Ym1,Explored4,Explored5,Inventory5,Inventory6),traverse(Xp1,Y,Explored5,Explored6,Inventory6,Inventory7),traverse(X,Yp1,Explored6,Explored2,Inventory7,Inventory2))))))).
                                   compile_list([1],N1,S1),compile_list([2],N2,S2),append_iio(N1,S1,N2,S2,N3,S3),uncompile_list(N3,S3,L).
        **/getvalue(Variable,Value,Vars) :-        ((not(isvar(Variable)),isvalstrorundef(Value),        %simplify(Variable,Variable2),%->true;(writeln1(simplify(Variable,Variable2)),abort)),%notrace,      Variable=Value)->true;        (isvar(Variable),isvalstrorundef(Value),getvar(Variable,Value,Vars)))./*putvalue(Variable,Value,Vars1,Vars2) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value,Vars1=Vars2)->true;        (isvar(Variable),isvalstrorundef(Value),%trace,        updatevar(Variable,Value,Vars1,Vars2))),!.         */getvar(Variable,Value,Vars) :-((member([Variable,Value],Vars),not(is_empty(Value)))->true;        ((aggregate_all(count,member([Variable,_Value],Vars),0)->true;%%(member([Variable,Empty],Vars),is_empty(Empty))),(Empty=Value))).getvar(undef,undef,_Vars) :-!.
        **/getvalue(Variable,Value,Vars) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value)->true;        (isvar(Variable),isvalstrorundef(Value),getvar(Variable,Value,Vars))).
        */interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_stringconcat],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat",Dbw_stringconcat1),get_lang_word("string_concat",Dbw_stringconcat2),(Dbw_stringconcat1=Dbw_stringconcat->true;Dbw_stringconcat2=Dbw_stringconcat),        interpretpart(stringconcat,Variable1,Variable2,Variable3,Vars1,Vars2).
        */        /**find_state_machine_statement1(Statement,Result1,Return_line_true,Return_line_false,Pred_numbers1) :-((Statement=[Number,[n,Name1],[Arguments1,Arguments2,Arguments3]],Name1=findall,%trace,length(Arguments,Arity1),find_state_machine_body2(Arguments3,Result3,Return_line_true,Return_line_false,Pred_numbers1),%atom_string(Name1,Name),%(member(Name,Reserved_words)->Pred_numbers2=none;(member([[n,Name],Arity1,Pred_numbers2],Pred_numbers1))),%(Name1=downpipe->trace;true),%(member([[n,Name1],Arity1,Pred_numbers2a],Pred_numbers1)->Pred_numbers2=Pred_numbers2a;Pred_numbers2=(-)),%Arguments=Result2,%findall(Argument,(member(Argument,Arguments),(predicate_or_rule_name(Argument))),Result2),Result1=[[Number,["on true",Return_line_true],["go after",-],["on false",Return_line_false],["go to predicates",-],[n,Name1],[Arguments1,Arguments2]]])),   append_list2([Result1,Result3],Result2),!.
        /**getvalues2(Variable1,Variable2,Value1,Value2,Vars) :-        getvalue2(Variable1,Value1,Vars),        getvalue2(Variable2,Value2,Vars).
        /**getvalues2(Variable1,Variable2,Value1,Value2,Vars) :-        getvalue2(Variable1,Value1,Vars),        getvalue2(Variable2,Value2,Vars).getvalues2(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars) :-        getvalue2(Variable1,Value1,Vars),        getvalue2(Variable2,Value2,Vars),        getvalue2(Variable3,Value3,Vars).
        way_of_speaking("high-pitched","happy").
        way_of_speaking("high-pitched","unhappy").
        way_of_speaking("low-pitched","angry").
        way_of_speaking("smiling","happy").        way_of_speaking("frowning","sad").
      %%string_concat(Algorithm3e,")",Algorithm2))).
      %%word([X]) --> [X], {char_type(X,csymf);(X=27;X=8217)}, !.      word([]) --> [].qa_db_finder(A1,B1,Algorithm) :-% name of algorithmrandom_member(Verb,B1),%writeln("What is the input variable?"),random_member(I1,A1),upper_first_letter(I1,I),%read_string(user_input, "\n", "\r", _End, I),%writeln("What variable is this last variable linked to?"),random_member(N1,A1),upper_first_letter(N1,N),%read_string(user_input, "\n", "\r", _End2, N),concat_list(["member(A1,",I,N,"),A1=[",I,",",N,"],"],Algorithm1),Vars1=[I,N],repeat1(A1,2,N,Algorithm1,Algorithm2,Vars1,Vars2),string_concat(Algorithm3,",",Algorithm2),%writeln("What is the final output variable?"),random_member(O1,A1),upper_first_letter(O1,O2),append(Vars2,[O2],O3),random_member(O,O3),%read_string(user_input, "\n", "\r", _End3, O),%%trace,find_header_args1(Vars2,"",HA1),%%string_concat(HA2,",",HA1),concat_list(["a(",HA1,I,",",O,"):-"],Algorithm4),concat_list([Algorithm4,Algorithm3,"."],Algorithm).
      **/shortest_path3d(X,Y,Z,Length) :-grid(Grid),findall(Length1,shortest_path1(X,Y,Z,Grid,0,Length1),Lengths1),sort(Lengths1,Lengths2),Lengths2=[Length|_].
    %evaluate([A,Op,B], %Accumulator,     %Result),    %apply_operator(Term, Result),!.
    %maplist(Words,The,Words1).
    (number1(Token,Token1)->(trace,Token2=Token1%[var,T,R,C,IN,Token1,[],[],[],[],[]]    );(trace,Token2=Token)),    trace,    parse_tokens(T,R,C,RestTokens, [[Token2 | SubList] | RestStack], NestedList).
    (number1(Token,Token1)->(trace,Token2=Token1%[var,T,R,C,IN,Token1,[],[],[],[],[]]    );(trace,Token2=Token)),    trace,    parse_tokens(T,R,C,RestTokens, [[Token2 | SubList] | RestStack], NestedList).*/split1(%[]%List,L16,%N,N, A,A) :- L2 is L16*2,length(List,L3),L3=<L2, !.
    first_column(Matrix, FirstCol, RestMatrix),    % Transpose the rest of the matrix.
    gridline1(X1,Y1,X2,Y2,C2,C3,N3).
    gridline1_3d(X1,Y1,Z1,X2,Y2,Z2,C2,C3,1000),    findall([X,Y,Z,M2],(member([X,Y,Z,M],C3),    (member(1000,M)->(delete(M,1000,M1),append(M1,[N3],M2));    M=M2)),C4).
    list([L|Ls]) --> [L], list(Ls).
    not(member(Token, ["(",")"])), % Ensure token is not a parenthesis.
    parse_tokens(T,R,C,RestTokens, [[] | Stack], NestedList).
    repeat_until_last_two_same( Pred, Result_var, Result) :-    repeat_until_last_two_same1(Pred, Result_var,_, Result),!.
    repeat_until_last_two_same1(Pred, Result_var, B, Result) :-    %copy_term(Result_var,Result_var0),    functor(Result_var,Name,Arity),functor(Result_var0,Name,Arity),    % Generate some result    Pred,%generate_result(Result1),    % Check if the last two results are the same    (   ((var(B)->fail;true),    Result_var = B, B = Result)->true;    % If not, continue repeating       repeat_until_last_two_same1(Pred, Result_var0,Result_var, Result)    ),!.    % Predicate to generate a result (replace this with your actual computation)*/generate_result(Result) :-    % For example, generating a random integer between 1 and 100    random(1, 3, Result),    writeln(Result).
    reverse(Stack, [NestedList|_]).
    reverse(SubList, RevSubList),    parse_tokens(T,R,C,RestTokens, [[RevSubList | PrevList] | RestStack], NestedList).
    reverse(SubList, RevSubList),    parse_tokens(T,R,C,RestTokens, [[RevSubList | PrevList] | RestStack], NestedList).parse_tokens(T,R,C,[Token | RestTokens], [SubList | RestStack], NestedList) :-    % Add regular tokens to the current sublist.
    transpose(RestMatrix, RestCols).
   **/add_furthest_rule2(New_rule_number,_Number,Rules,Program1) :-%%trace,%%New_rule_number=Number,retractall(furthest_rule(_)),delete(Rules,Program1,Rules1),append(Rules1,[Program1],Rules2),   assertz(furthest_rule([New_rule_number,Rules2])).
   paraphraser([file, "file.txt"], A, on).
  %T3=[T4|_], %open_s("test.pl",write,S22), %write(S22,T4),close(S22).
  */check_same2(TL14,TL17,L1,L2,Start,TN1,TN2) :- get_lang_word("t",T),  %trace, TL14=[TL141|TL142], TL17=[TL15|TL16], TL15=[TL151|TL152], check_same([TL141],[TL151],L1,L3,Start,TN1,TN3), append(TL142,TL152,TL142TL152), find_lists(TL142TL152,[],L4,Start,TN3,TN4), (L4=[T,_,_,_]-> append(L3,[L4],L5); append(L3,L4,L5)), %trace, %append(TL17,)) (TL16=[]->(L5=L2,TN4=TN2); (TL16=[TL171|TL18], check_same2(TL171,[L5],TL18,L2,Start,TN4,TN2))).
  4  5 2  6 31pretty_print(cube, dfs_pre_order).white yellow  red  blue green  purple  pretty_print(cube, dfs_in_order).
  4 2  51 3  6pretty_print(sphere, dfs_post_order).
 % *2(F):-F=[2]  % *([1],[1])=*(A,B):-*1(A),*2(B). *1,2([1]). x % *([1,2],C)=*(A,C):-*1(A,[],A1),A1=C. where C=[2,1]. % *1([],A,A). *1(A,B,C):-A=[D1,D2|E],D1=1,D2=2,append(B,[D2,D1],F),*1(E,F,C).
 % append(A,B,[1,2]). x[[n,stringconcat123],[[string,string],[string]]], % string("1","2",A).
 % delete non loop clauses %foldr(put_sub_term_wa_ae,D,C,B).
 % leave off:-include('../culturaltranslationtool/ctt2.pl'). % turn back on:-include('data.pl').:-include('lang_db_generator-nonabort.pl'). %:- include('translate4.pl').
 % put into stwa with types, mergesub_term_wa2(Ns1,Ns2,N,A,Find,B,C,First) :- stwa(%[ C0%,Find] ), (((C0=find,First=true,not(Ns1=[_]))->(A=Find->append(B,[[Ns1,A]],C);fail); ((C0=types,First=true%,not(Ns1=[_]) )->(is_t(Find,A,First,true)->append(B,[[Ns1,A]],C)) ))->true; (not(find_first(is_list(A))), sub_term_wa3(Ns1,Ns2,N,A,Find,B,C,First))),!.
 %(A=C->C=B; %remove_first_outer_bracket_chars(C,B)),!.
 %*/process_put_in_order(B1,B,Num):- string_strings(B1,D3), append(["a"],D5,D3), append(Num1,D7,D5 ), append(["_"],D2,D7), foldr(string_concat,Num1,Num2), number_string(Num,Num2), foldr(atom_concat,D2,B),!.
 %*/ %trace, %TT=[[T,T1,N]|_], %append(L1,[T,T1,N],L2),!.find_lists(T1T2,L1,L2,Start,TN1,TN2) :- get_lang_word("t",T),  get_lang_word("brackets",Dbw_brackets),  get_lang_word("list",Dbw_list), %trace, sort(T1T2,T1T22), %trace, (length(T1T22,1)%=[[T,_,_,_]]%length(TL14,1) %false %maplist(is_brackets,TL14) ->B1=brackets1;B1=false),  T1T22=[T1|_], %trace, (T1=[[[T,Dbw_brackets],_]]->(findall(A,(member([[[T,Dbw_brackets],A]],T1T22)),T1T23),B=brackets);(  T1=[[T,Dbw_brackets],_]->(findall(A,(member([[T,Dbw_brackets],A],T1T22)%,[A1]=A ),T1T23),B=brackets2); %trace,  (T1T22=T1T23,B=not_brackets))), sort(T1T23,T1T24),  findall(J,(member(H,T1T24),length(H,J)),G), sort(G,G1), G1=[TL10|_], %T1T24=[T10|_],  %length(T10,TL10), %findall(T13,(member(T13,T1T22),length(T13,TL13)),TL11), %length(T1,TL1), %length(T2,TL2), cut_into_equals_segments(TL10,T1T24,[],TL12),  sort(TL12,TL14),  %trace, %(length(TL14,1)->B11=brackets1;B11=B1), %TL14=[T141|T1412], %length(T141,T141L), %(forall(member(T1413,T1412),length(T1413,T141L))->B11=brackets1;B11=B1), %trace, %TL1 is TL2*2, %length(A,TL2), %append(A,B,T1), %trace, TL14=[TL15|TL16], %trace, check_same2(TL15,TL16,[],L3,Start,TN1,TN2),%writeln1(check_same2(TL15,TL16,[],['*l3',L3],Start,TN1,TN2)), %trace,  (%false% B1=brackets1 -> (L31=[[T,Dbw_brackets],L3],%notrace, %foldr(append,[[[T,Dbw_list]],L32],L31),%notrace, append(L1,[L31],L2)); (B=brackets->(%trace, %(L3=[[T, _,_,_]|_]->L32=[L3];L32=L3), L31=[[T,Dbw_list],L3],%notrace, %foldr(append,[[[T,Dbw_list]],L32],L31),%notrace, append(L1,[L31],L2)); %foldr(append,[L1,[L31]],L2)); (B=brackets2->( L31=[[T,Dbw_list],L3], %foldr(append,[[[T,Dbw_list]],L3],L31), append(L1,[L31],L2)); %foldr(append,[L1,[L31]],L2)); %L31=[[T,Dbw_brackets],L3], %append(L1,[L31],L2) append(L1,L3,L2) ))), %foldr(append,[L1,L3],L2))), !. %check_same2(A,B,L1,L2,Start),* %trace, % * find 2 sides and directions that work *1 x above, cut into min length segments, sort, (check_same in a line xx *1 x) % do d2t after find lists %(check_same(A,T2,L1,L2,Start)->true; %check_same(T2,B,L1,L2,Start) %),!.
 %*?o4%end statemerge_lists_a2(A4):-A4=[[_N1,A,_N2]|A5],merge_lists_a22(A,A5).
 %,writeln([BX,BY]).
 %A=[D|E], %()/*group_non_lists1(Xs, Ys) :-%trace, group_non_lists2(Xs, Ys).
 %append(TN1,[[[T,Dbw_type,N],end]],TN2).
 %data_to_alg4(Data3,Vars3,Vars2,Alg3,Alg2),!.
 %find_lists2(Heads2,Sets3,Sets2).
 %find_tails1([G2,[Val2|Val1]],V6,V5,V3),!.*/find_tails1([G,Val1],V4,V2,V3) :- V4=[[G2,Val2]|V6], append(V2,[[G2,Val2]],V5), find_tails1([G,Val1],V6,V5,V3),!.
 %findall(V4,(member(V3,V2),nng(Values2,%Values3,%V3,[],V4)),TG4), %append(TG1,[TG4],TG2). nng(Values,%Values3, Index,TG1,TG2) :- findall(V,member([V,Index],Values),V2), delete(Values,[_,Index],Values2), append(TG1,[V2],TG3), findall(V4,(member(V3,V2),nng(Values2,%Values3,V3,[],V4)),TG4), append(TG3,TG4,TG2).
 %flatten_except_loops2([A],[],B1), %flatten_except_loops2(C,B1,B),!.
 %is_a_number(T2,Type,TN3,TN2).
 %length(Files,L2),length(B,L2).check_predicate(Predicate,Files) :- findall(_,(member([_R,_F1,P],Files), findall(_,(member(Predicate1,P), Predicate1=Predicate2, (Predicate2=Predicate->true; (Predicate=[Predicate2,":-",Ps], findall(_,(member(P1,Ps), check_predicate(P1,Files)),A), length(Ps,L1),length(A,L1)))),B), length(P,L2),length(B,L2)),_C).
 %length(Files,L3),length(C,L3).
 %length(Registry,L3),length(D,L3).
 %length(Ts,Ts_L), %numbers(Ts_L,1,[],Ts1), %findall([Vs1,Ts3],(member(Ts2,Ts1),get_item_n(Ts,Ts2,Ts3),get_item_n(Vs,Ts2,Vs1)),TVs), %foldl(put_var,TVs,Vars2,Vars3), %updatevars(FirstArgs2,Vars2,[],_Result).
 %list_to_set(AT3332,AT3331).
 %list_to_set1(AT3332,AT3331).
 %match4_new2(Statement1,Value2,Vars1,Vars2,Standard_or_e4).
 %match4_new2(Value1,Statement2,Vars1,Vars2,Standard_or_e4).
 %merge2(Tokens2,Tokens1,T4), %T3=[["../../Github_lc/tests.txt"%_Tests12 %,Tokens2,Tokens1%T4 %]].
 %path1(Second1,A,Tree,A2,A1).
 %put_var(Vars,D,atom,Vars2), %put_var(Vars2,E,string,Vars3).
 %reverse(P2,P22), %list_to_set(P22,P23), %reverse(P23,P21).
 %sub_term_wa([],B,In), %findall(Add,member([Add,_],In),In2), %delete_sub_term_wa(In2,B,C).
 %subtract1(F,E,G),!.
 %term_to_atom(HTML1,HTML2), %time1(Time), %diff_html_n(Diff_html_n),%(exists_directory_s("../../lc_logs/")->true;%make_directory_s("../../lc_logs/")), %foldr(string_concat,["../../lc_logs/diff_html",Time,"-",Diff_html_n,".html"],File1),/*Diff_html_n1 is Diff_html_n+1,retractall(diff_html_n(_)),assertz(diff_html_n(Diff_html_n1)),*/ %save_file_s(File1,HTML3).
 %test_lists4(Common_factor,L,Heads1,Heads3).
 %trace, %P71=[P72|P73], %( %contains_loop(Ordered_pred_nums3,P71,[],_P2)-> %(find_groups([Ordered_pred_nums3,[P71]]%P73] %,[%P72 %],%Ordered_pred_nums24, %P2,true), %find_groups2(Ordered_pred_nums3,P71,[],%Ordered_pred_nums24, %P2),%find_groups2(Ordered_pred_nums3,Ordered_pred_nums42,Ordered_pred_nums23,Ordered_pred_nums22) append(Exiting_loop1,[P1],Exiting_loop2) ).%); %(find_groups_replace_loops(P71,P74), %append(Rest_of_preds1,[P74%P72|P74 %],Rest_of_preds2))).
 %trace, %findall1(E,(member(F,D), %(F=[loop1,[A1]]->E=A1;E=F)),B).
 %unique1(Result,[],Vars8), %findresult3(Ts,Vars8,[],_Result2).
 */% program may have unconnected preds, causing a bug%order_preds_bottom_up1_post_order_dfs(_,[],_%[[N, []]]%,Ordered_pred_nums,Ordered_pred_nums) :-  %append(Ordered_pred_nums1,[N],Ordered_pred_nums2),% fail,!.
 */  collect_connected_pred_ids2(Pred_id,Pred_ids1,Pred_ids2,Globals3) :- ((findall(Next_pred_id,member([pred_id_chain,Pred_id,Next_pred_id],Globals3),Next_pred_id), %member(Next_pred_id,Next_pred_id1), %not(member(Next_pred_id,Pred_ids1)) subtract(Next_pred_id,Pred_ids1,Next_pred_id1) %member([[pred_num,Prev_pred_id],Predicate_number],Globals3) )-> (%trace, append(Pred_ids1,Next_pred_id1,Pred_ids3), %findall(Pred_ids4, collect_connected_pred_ids2(Prev_pred_id,Pred_ids3,Pred_ids4,Globals3),Pred_ids5), Pred_ids3=Pred_ids5, findall(Pred_ids6,(member(Next_pred_id2,Next_pred_id1),collect_connected_pred_ids2(Next_pred_id2,Pred_ids5,Pred_ids6,Globals3)),Pred_ids7), append([Pred_id,Pred_ids7],Next_pred_id1,Pred_ids2)); Pred_ids1=Pred_ids2).
 */ % rotate shaperotate_shape(Shape_coords1,X_theta,Y_theta,Z_theta,Shape_coords2) :- Shape_coords1=%[ID, Coords,%], findall(%[X1,Y1, Z1,(member([X,Y,Z],Coords), cos_theta(X_theta,X_cos_theta), minus_sin_theta(X_theta,X_minus_sin_theta), sin_theta(X_theta,X_sin_theta), %trace, multiply_matrices([[1,0,0],[0,X_cos_theta,X_minus_sin_theta],[0,X_sin_theta,X_cos_theta]],[[X],[Y],[Z]],X1), cos_theta(Y_theta,Y_cos_theta), minus_sin_theta(Y_theta,Y_minus_sin_theta), sin_theta(Y_theta,Y_sin_theta),  X1=[X11,Y11,Z11], multiply_matrices([[Y_cos_theta,0,Y_sin_theta],[0,1,0],[Y_minus_sin_theta,0,Y_cos_theta]],%X1%[[X11],[Y11],[Z11]],Y1), cos_theta(Z_theta,Z_cos_theta), minus_sin_theta(Z_theta,Z_minus_sin_theta), sin_theta(Z_theta,Z_sin_theta), Y1=[X21,Y21,Z21],%trace,multiply_matrices([[Z_cos_theta,Z_minus_sin_theta,0],[Z_sin_theta,Z_cos_theta,0],[0,0,1]],%Y1%[[X21],[Y21],[Z21]],Z1)),Shape_coords4),%trace,%writeln(1),%findall(Shape_coords6,(member(Shape_coords5,Shape_coords3),%reset_min(0,0,0,Shape_coords5,Shape_coords6,_Max_X,_Max_Y,_Max_Z)),%Shape_coords4),Shape_coords2=%[ID,Shape_coords4%].%1,1,1.% https://www.rapidtables.com/convert/number/degrees-to-radians.htmlminus_sin_theta(Theta,Minus_sin_theta) :- sin_theta(Theta,Sin_theta), Minus_sin_theta is -1*Sin_theta.
 */ /*sublist(D,A,F) :- append(C2,D2,A),append([D],E2,D2),foldr(append,[C2,E2],F),!.*/sort1(Tests01,Tests0) :- sort1(Tests01,[],Tests0),!.
 */ contains_loop(A, [loop, A], B, C) :- append(B,[A],C),!.
 */% with state machine, going backwards from base cases, minimises sm - like minimise decision tree, do groups of clauses together x join clauses together first [x minimise decision tree doesn't have cycles - account for incoming stems (if same inc. stems etc. then delete) and delete references to deleted branches] nd branches have no condition% stop infinite loop in minimise decision tree by % is delete duplicate clauses the same as the second alg but processes preds with different names - no, the second alg processes inside preds% weird to do clauses together, do them separately (test whether they are the same but have different names) followed by alg 1% replace pred names with numbers, keeping a list of name-number correspondences, then run alg 1%  just delete them, move up and repeat until the same (not use alg 1 x also use it)% a(v2,v1):-b(v2,v1). -> ?(new_v1,new_v2):-b(new_v1,new_v2). - if two instances, delete and replace non a with a% do with sm x% minimise_alg([[[n,function],[[v,a],[v,b]],":-",[[[n,+],[[v,a],[v,b]]]]],[[n,function],[[v,b],[v,a]],":-",[[[n,+],[[v,b],[v,a]]]]]],A),writeln1(A).
 */%collect_connected_pred_ids2(Pred_id,Pred_ids1,Pred_ids1,_Globals3) :- %not(member([pred_id_chain,Pred_id,Next_pred_id],Globals3)).
 /*is_t(H,A,First0,First) :-((%trace,First0=true,First=true,member(all_resolution_level(K),H),%trace,%trace,%forall(%member(J,H),%member(K1,K)),is_list(A),%writeln1(A),%(A=["e", [r, 1, ["a"]]]->trace;true),member([r,_N,_A],A),sub_term_wa([r,_N,_A],A,Inst2),findall([Ad,A3],(member([Ad,_A4],Inst2),A3=0),Inst3),foldr(put_sub_term_wa_ae,Inst3,A,A2),%trace,%A2=A,forall(member(A1,A2),is_t([number|K],A1,First0,false)))),!.
 add1(L,Interval,0,[],A).
 caw0(Algorithms,PredicateName,Rules,MaxLength,MaxPredicates,VarLists,VarLists02,VarLists03,New_rule_number1,New_rule_number2,Program1,Program2,_V3) :-VarLists=[InputVarList,OutputVarList,Positivity],varnames(InputVarList,[],InputVars,[],InputValues),varnames(OutputVarList,[],OutputVars,[],_OutputValues),%%retractall(outputvars(_)),   %%assertz(outputvars(OutputVars)),append(InputVars,OutputVars,Vars11),%%Vars11=InputVars,%%Vars12=InputVars,append(InputValues,OutputVars,Vars2),%%append(InputValues,OutputValues,Values),Query=[[n,PredicateName],Vars2],%%writeln(caw(Algorithms,Query,PredicateName,Rules,MaxLength,MaxPredicates,Vars11,InputVars,InputVars,_,OutputVarList,OutputVars,Positivity,VarLists02,New_rule_number1,New_rule_number2,Program1,Program2)),caw(Algorithms,Query,PredicateName,Rules,MaxLength,MaxPredicates,Vars11,InputVars,InputVars,_,OutputVarList,OutputVars,Positivity,VarLists02,VarLists03,New_rule_number1,New_rule_number2,Program1,Program2,_V).
 caw0(Algorithms,PredicateName,Rules,MaxLength,MaxPredicates,VarLists,VarLists02,VarLists03,New_rule_number1,New_rule_number2,Program1,Program2,_V3) :-VarLists=[InputVarList,OutputVarList,Positivity],varnames(InputVarList,[],InputVars,[],InputValues),varnames(OutputVarList,[],OutputVars,[],_OutputValues),%%retractall(outputvars(_)),   %%assertz(outputvars(OutputVars)),append(InputVars,OutputVars,Vars11),%%Vars11=InputVars,%%Vars12=InputVars,append(InputValues,OutputVars,Vars2),%%append(InputValues,OutputValues,Values),Query=[[n,PredicateName],Vars2],%%writeln(caw(Algorithms,Query,PredicateName,Rules,MaxLength,MaxPredicates,Vars11,InputVars,InputVars,_,OutputVarList,OutputVars,Positivity,VarLists02,New_rule_number1,New_rule_number2,Program1,Program2)),caw(Algorithms,Query,PredicateName,Rules,MaxLength,MaxPredicates,Vars11,InputVars,InputVars,_,OutputVarList,OutputVars,Positivity,VarLists02,VarLists03,New_rule_number1,New_rule_number2,Program1,Program2,_V).%%caw(_,_,_,_,_,N,_,_,_,_,_,_,_,_,_,_,N,P,P) :- fail,!. %% Turn off fail,! to have all solutions/**caw(_Algorithms,_Query,_PredicateName,_Rules,_MaxLength,MaxPredicates,_Vars11,_InputVars,_InputVarsa,_InputVars2,_OutputVarList,_OutputVars,_Positivity,_VarLists02,New_rule_number1,New_rule_number2,_Program1,_Program11):-%%writeln(caw_here(Algorithms,Query,PredicateName,Rules,MaxLength,MaxPredicates,Vars11,InputVars,InputVars,InputVars2,OutputVarList,OutputVars,Positivity,VarLists02,New_rule_number1,New_rule_number2,Program1,Program1)),%%MaxPredicates1 is MaxPredicates-1,writeln(["New_rule_number>MaxPredicates1",New_rule_number,">",MaxPredicates]),New_rule_number>MaxPredicates,fail,!.
 foldr(string_concat,[N,".",L,"x"],N2),!.
 replace_particle_image1([X1,Y1,Z1,N1],%[X2,Y2,Z2,N], Grid11,Grid2) :- get_item_n(Grid11,Z1,XP631), get_item_n(XP631,Y1,XP731), get_item_n(XP731,X1,_N1x), put_item_n(XP731,X1,N1,XP732), put_item_n(XP631,Y1,XP732,XP733), put_item_n(Grid11,Z1,XP733,Grid2),!.get_particle_image([X2,Y2,Z2,N],Grid11) :-  get_item_n(Grid11,Z2,XP6), get_item_n(XP6,Y2,XP7), get_item_n(XP7,X2,N).
#!/usr/bin/swipl -f -q:- initialization(catch(main, Err, handle_error(Err))).
#!/usr/bin/swipl -f -q:-include('../listprologinterpreter/listprolog.pl').
#!/usr/bin/swipl -f -q:-include('cat_alg_files.pl').
#!/usr/bin/swipl -f -q:-include('cat_arg_files.pl').
#!/usr/bin/swipl -f -q:-include('text_to_breasonings.pl').
#!/usr/bin/swipl -f -q:-set_prolog_stack(global, limit(80 000 000 000)).
#!/usr/bin/swipl -g main -q:-include('../c/c.pl').
#!SWI-Prolog -f -q:- include('meditation.pl').
#=(A,B) :- not(var(A)),not(var(B)),A is B,!.
#=(A,B) :- not(var(A)),var(B),B is A,!.
*%*************find_lists(Sets0,Sets1,Sets2) :-%Sets=[Sets0],%trace, findall(B,(member(S,Sets0),S=B%[[[t, brackets],B]] ),Sets), find_lists1(Sets,Sets1,Sets2).
****findrulesflowingtopv2(Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[_PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program3),%%Program3=Program1,%%append(Rules1,[Rule],Rules3),subset(Rest,InputVars2),intersection(Rest,InputVars1,Intersection),length(Intersection,0),%%not((member(Var2,Rest),%%member(Var2,InputVars1))),%%delete(Program0,Rule,Program1),IV1Flag2=false,findrulesflowingtopv1(Program0,InputVars1,InputVars2,Rest,[],Rules4,IV1Flag3),%%not(Rules4=[]),iv1flagdisjunction(IV1Flag2,IV1Flag3,IV1Flag1),append(Rules1,[Rule],Rules7),append(Rules7,Rules4,Rules8),unique1(Rules8,[],Rules2).
**iv3s0([],_,IV3s1,IV3s2).
**iv3s0([],_,IV3s1,IV3s2).iv3s0(IV3s,Program0,IV3s1,IV3s2).
*** Journey 1 ***Have you meditated before time travel?(y/n)?|: n% Execution Aborted*/qa_tt2(Journeys) :- numbers(Journeys,1,[],JN), %length(JL,Journeys), findall(_,(member(JN1,JN),write("*** Journey "),write(JN1),writeln(" ***"),qa_tt1),_),!.
***/interpretstatement1(_Grammar,_Grammar2,[[Dbw_n,grammar_part],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("grammar_part",Dbw_grammar_part1),Dbw_grammar_part1=Dbw_grammar_part,%%writeln1("h1/10"),%%trace,%%%%****interpretpart(grammar_part,[Variable1,Variable2,Variable3],Vars1,Vars2).
***/interpretstatement1(ssi,_Grammar,_Grammar2,[[Dbw_n,grammar_part],[Variable1,Variable2,Variable3]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("grammar_part",Dbw_grammar_part1),Dbw_grammar_part1=Dbw_grammar_part,%%writeln1("h1/10"),%%trace,%%%%****interpretpart(grammar_part,[Variable1,Variable2,Variable3],Vars1,Vars2).
**/equals_empty_list([]).
**/equals_empty_list([]).downcase_and_split(String1,String2) :-SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",downcase_atom(String1,String3),split_string(String3, SepandPad, SepandPad, String2).
**/      :- http_handler('/registry', registry, []).      registry(_Request) :-              %%member(method(post), Request), !,              %%http_read_data(Request, _Data, []),              format('Content-type: text/html~n~n', []),      format('<p>', []),writeln("List Prolog Package Manager Registry\n\nInstallation instructions:\n\nInstall List Prolog Package Manager (LPPM) by downloading SWI-Prolog, downloading the List Prolog Package Manager from GitHub, loading LPPM with ['lppm']. then installing packages by running lppm_install(\"User\",\"Repository\").  LPPM will prompt you for an installation directory.  The available repositories are below.\n"),catch(phrase_from_file_s(string(LPPM_registry_string), "lppm_registry.txt"),_,(writeln1("Cannot find lppm_registry.txt"),abort)),term_to_atom(LPPM_registry_term1,LPPM_registry_string),      format('<table style="width:100%">  <tr>    <th>User/Repository</th>    <th>Description</th>    <th>Dependencies</th>  </tr>', []),findall(_,(member(LPPM_registry_term2,LPPM_registry_term1),      format('<tr>', []),LPPM_registry_term2=[User,Repository,Description,Dependencies],concat_list(["<td><a href=\"https://github.com/",User,"/",Repository,"\">",User,"/",Repository,"</a></td>"],Text1),string_atom(Text1,Text1a),      format(Text1a, []),concat_list(["<td>",Description,"</td>"],Text2),string_atom(Text2,Text2a),      format(Text2a, []),      format('<td>', []),findall(_,(member(Dependency,Dependencies),Dependency=[User1,Repository1],concat_list(["<a href=\"https://github.com/",User1,"/",Repository1,"\">",User1,"/",Repository1,"</a> "],String1),      string_atom(String1,Atom1),format(Atom1, [])),_),      format('</td>', []),      format('</tr>', [])),_),                  format('</table>', []),                        writeln("\nPackage uploading instructions:\n\nEnter registry entries for List Prolog Package Manager (LPPM) packages by visiting http://127.0.0.1:8001/."),                        format('NB. The luciangreen/Text-to-Breasonings repository requires <a href="https://github.com/luciangreen/Text-to-Breasonings">special instructions</a>.', []).string(String) --> list(String).
**/contains_string(Atom) :-string_concat(A,B,Atom),string_length(A,1),A="\"",string_concat(_,C,B),string_length(C,1),C="\"",!.% remove " if string, leave as atom if atomstring_atom2(String1,Atom1) :-contains_string(Atom1),delete1(Atom1,"\"",String1),%string_atom(String1,String2),%replace(String2,"'","#",String1),%string_atom(String1,String3),!.
**/contains_string(Atom,String) :-string_concat(A,B,Atom),string_length(A,1),A="\"",string_concat(String,C,B),string_length(C,1),C="\"",!.
**/memberlp2c1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Function,Arguments2],                interpretstatementlp2c2a(Function,Algorithm1,Algorithm3a),                string_concat(Algorithm3a,"(",Algorithm3d),        interpretstatementlp2c2b(Arguments2,Algorithm3d,Algorithm2a),        write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
**/memberlp2p1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[[n,comment],[Comment]],                %interpretstatementlp2p2a(Function,Algorithm1,Algorithm3a),        foldr(string_concat,[Algorithm1,%"\n",        Comment,"\n"        ],Algorithm2),                %string_concat(Algorithm3a,"(",Algorithm3d),        %interpretstatementlp2p2b(Arguments2,Algorithm3d,Algorithm2a),        %write_full_stop_if_last_item([],Algorithm9,Algorithm2),        !.
**//**merge_lists2([N1,A1,_N2],Options2,Options61,Options9) :-Options2=[N4,A2,N3],(A1=A2->(findall(Options52,(%member(Options61,Options6),((member([N4,A,N3],Options61),delete(Options61,[N4,A,N3],Options5),append([[N1,A,N3]],Options5,Options52))->true;Options61=Options52)),[Options8]),writeln(Options8),%%trace,findall(Options7,(member(Options81,Options8),((member([N41,A10,N4],Options81),delete(Options81,[N41,A10,N4],Options51),append([[N41,A10,N1]],Options51,Options7))->true;Options81=Options7)),Options9));Options61=Options9).**/%%no_more_than_one_parent_of_each_node_before1([1,_A,_N3],_Options61) :- !.
**/%% Asks if a back-translation is correct%% trytranslations2 'Original',  'I love you3.', 'I love you3 fake.', 'I love you3 tr.' ,[a,b,c]],O . removenotice(Outputs11,Outputs1) :-%%writeln([outputs11,Outputs11]),Contents=[_,"Insert an alternative that might translate better here."],/**((((Contents=[_,"Insert an alternative that might translate better here."];Contents=[_,"Insert a correct translation here",_]);Contents=[_,"Insert a correct translation here"]);Contents=_Empty),member(Contents,Outputs11),**/delete(Outputs11,Contents,Outputs1), !.
**//**pp3([]) :- !.pp3(List1) :-List1=[List2|List3],writeln1(List2),pp3(List3).
**/interpretstatement1(_F0,_Functions,[[Dbw_n,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,isop(Operator),interpretpart(is,Variable1,Variable2,Vars1,Vars2),!.
**/splitfurther(BrDict01,N) :-   phrase(file0(N),BrDict01).
**/% trace on for writelns%test(118,[[n,extract_modes2],[[[t,string],[t,string]],[],[v,typestatements3],["yes","yes"],[],[v,vars3],[input,output]]],test(118,%[[n,types],["on"]],[[n,query_pred]],%[[n,is_list],[[1,2,3]]],%[[n,extractmodes2],[[[t,string]],[],[v,typestatements3],["yes"],[],[v,vars3],[out]]],/*[[n,checktypes_inputs],[[n,pred],["yes","yes"],[[[n,pred],[[t,string],[t,string]]]],[[[n,pred],[in,out]]]]],[[n,checktypes_inputs],[["n","want_baby"],["yes","yes","yes","yes"],[[["n","want_baby"],[["t","string"],["t","string"],["t","string"],["t","string"]]]],[[["n","want_baby"],["in","in","in","out"]]]]],*/%/** *** THESE%/*[  [[n,query_pred],":-",  [[[n,equals4_on]],[[n,checktypes_inputs],[[n,want_baby],["yes"],[[[n,want_baby],[[t,string]]]],[[[n,want_baby],[in]]]]],  [[n,equals4_on]]]],%*/%**/% the type checker sm is better than the type command anyway because it will work with skip and retry in trace% - use normal trace, notrace on checktypes, works with skip, retry (trace before checktypes, if exits or fails, turns off trace)% later: $ trace status to display[[n,types],["off"]], % need assertz command in ssi, not in lpi[[n,checktypes_inputs],[[v,function],[v,vars1],[v,typestatements1],[v,modestatements1]],":-", % need these last 2 vars for out check as well[[[n,"->"],[[[n,types],["on"]],%[[n,typestatements],[[v,typestatements1]]],[[n,modestatements],[[v,modestatements1]]],[[n,checktypes0_inputs],[[v,function],[v,vars1],[v,typestatements1],[v,modestatements1]]],[[n,true]]]],[[n,cut]]]],[[n,checktypes0_inputs],[[v,function],[v,vars1],[v,typestatements1],[v,modestatements1]],":-",[[[n,length],[[v,vars1],[v,l]]],[[n,is],[[v,l],0]],[[n,equals4],[[v,vars1],[]]],[[n,get_lang_word],["in type check",[v,input_type_check]]], % need this command[[n,"->"],[[[n,types],["on"]],[[n,debug_types_call],[[[v,function],"/","~",[v,l],[v,input_type_check]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[v,function],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[v,function],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_exit],[[[v,function],"/","~",[v,l],[v,input_type_check]]]]],[[n,true]]]],[[n,cut]]]],[[n,checktypes0_inputs],[[v,function],[v,vars1],[v,typestatements1],[v,modestatements1]],":-",[[[n,length],[[v,vars1],[v,l]]],[[n,get_lang_word],["in type check",[v,input_type_check]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_call],[[[v,function],"/","~",[v,l],[v,input_type_check]]]]],[[n,true]]]],%[[n,trace]],[[[[n,member3],[[[v,function],"|",[[v,typestatements2]]],[v,typestatements1]]],[[n,member3],[[[v,function],"|",[[v,modestatements2]]],[v,modestatements1]]],[[n,extractmodes1],[[v,typestatements2],[v,typestatements3],[v,vars1],[v,vars2],[v,modestatements2]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[v,function],[v,vars2]]]],[[n,true]]]],[[n,"->"],[[[[n,checktypes1],[[v,vars2],[v,typestatements3],[v,typestatements3],[v,typestatements1]]]],[[[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[v,function],[v,vars2]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_exit],[[[v,function],"/","~",[v,l],[v,input_type_check]]]]],[[n,true]]]]]],[[[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[v,function],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_fail],[[[v,function],"/","~",[v,l],[v,input_type_check]]]]],[[n,true]]]]]]]]]],[[n,cut]]]],[[n,extractmodes1],[[v,typestatements1],[v,typestatements3],[v,vars1],[v,vars2],[v,modestatements1]],":-",[[[n,extractmodes2],[[v,typestatements1],[],[v,typestatements3],[v,vars1],[],[v,vars2],[v,modestatements1]]],[[n,cut]]]],[[n,extractmodes2],[[],[v,typestatements2a],[v,typestatements2a],[],[v,vars],[v,vars],[]],":-",[[[n,cut]]]],[[n,extractmodes2],[[v,typestatements1],[v,typestatements2a],[v,typestatements3],[v,vars1],[v,vars2],[v,vars3],[v,modestatements1]],":-",[[[n,get_lang_word],["in",[v,in]]],%[[n,trace]],%[[n,writeln],[[[v,typestatements1],[v,typestatements2a],[v,typestatements3],[v,vars1],[v,vars2],[v,vars3],[v,modestatements1]]]],%[[n,writeln],[[v,modestatements1]]],[[n,equals4],[[v,modestatements1],[[v,in],"|",[v,modestatements3]]]],[[n,equals4],[[v,typestatements1],[[v,typestatements2],"|",[v,typestatements3a]]]],[[n,equals4],[[v,vars1],[[v,vars11],"|",[v,vars12]]]],%[[n,trace]],[[n,append],[[v,typestatements2a],[[v,typestatements2]],[v,typestatements4]]],[[n,append],[[v,vars2],[[v,vars11]],[v,vars4]]],[[n,extractmodes2],[[v,typestatements3a],[v,typestatements4],[v,typestatements3],[v,vars12],[v,vars4],[v,vars3],[v,modestatements3]]],[[n,cut]] %**]],[[n,extractmodes2],[[v,typestatements1],[v,typestatements2a],[v,typestatements3],[v,vars1],[v,vars2],[v,vars3],[v,modestatements1]],":-",[[[n,get_lang_word],["out",[v,out]]],[[n,equals4],[[v,modestatements1],[[v,out],"|",[v,modestatements3]]]],[[n,equals4],[[v,typestatements1],[[v,typestatements2],"|",[v,typestatements3a]]]],[[n,equals4],[[v,vars1],[[v,vars11],"|",[v,vars12]]]],[[n,extractmodes2],[[v,typestatements3a],[v,typestatements2a],[v,typestatements3],[v,vars12],[v,vars2],[v,vars3],[v,modestatements3]]],[[n,cut]]]],[[n,checktypes],[[v,function],[v,vars1],[v,typestatements1],[v,modestatements1]],":-",[[[n,"->"],[[[n,types],["on"]],[[[[n,typestatements],[[v,typestatements1]]],[[n,checktypes0],[[v,function],[v,vars1],[v,typestatements1]]]]],[[n,true]]]],[[n,cut]]]],[[n,checktypes0],[[v,function],[v,vars1],[v,typestatements1]],":-",[[[n,get_lang_word],["Type check",[v,type_check]]],[[n,length],[[v,vars1],[v,l]]],[[n,is],[[v,l],0]],[[n,equals4],[[v,vars1],[]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_call],[[[v,function],"/",[v,l],[v,type_check]]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[v,function],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[v,function],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_exit],[[[v,function],"/",[v,l],[v,type_check]]]]],[[n,true]]]],[[n,cut]]]],[[n,checktypes0],[[v,function],[v,vars1],[v,typestatements1]],":-",[[[n,get_lang_word],["Type check",[v,type_check]]],[[n,length],[[v,vars1],[v,l]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_call],[[[v,function],"/",[v,l],[v,type_check]]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[v,function],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[[[n,member3],[[[v,function],"|",[[v,typestatements2]]],[v,typestatements1]]],[[n,checktypes1],[[v,vars1],[v,typestatements2],[v,typestatements2],[v,typestatements1]]]]],[[[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[v,function],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_exit],[[[v,function],"/",[v,l],[v,type_check]]]]],[[n,true]]]]]],[[[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[v,function],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_types_fail],[[[v,function],"/",[v,l],[v,type_check]]]]],[[n,true]]]]]]]],[[n,cut]]]],[[n,checktypes1],[[],[],[v,u1],[v,u2]],":-",[[[n,cut]]]],[[n,checktypes1],[[v,vars1],[v,typestatements1],[v,typestatements2],[v,typestatements4]],":-",[[[n,get_lang_word],["t",[v,t]]],[[n,get_lang_word],["list",[v,dbw_list]]],[[n,equals4],[[v,vars1],[[v,vars2],"|",[v,vars3]]]],%[[n,trace]],[[n,is_list],[[v,vars2]]],%[[n,writeln],[[[v,typestatements1]]]],[[n,equals4],[[v,typestatements1],[[[[v,t],[v,dbw_list]],"|",[[v,typestatements3]]],"|",[v,typestatements4a]]]], [[n,"->"],[[[n,types],["on"]],[[[n,debug_call],[[v,skip],[[[v,t],[v,dbw_list]],[v,typestatements3]]]]],[[n,true]]]],[[n,"->"],[[[[n,checktypes3],[[v,vars2],[v,typestatements3],[v,typestatements2],[v,typestatements4]]]],[[[[n,"->"],[[[n,types],["on"]],[[[n,debug_exit],[[v,skip],[[[v,t],[v,dbw_list]],[v,vars2]]]]],[[n,true]]]],[[n,checktypes1],[[v,vars3],[v,typestatements4a],[v,typestatements2],[v,typestatements4]]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_fail],[[v,skip],[[[v,t],[v,dbw_list]],[v,vars2]]]]],[[n,true]]]]]]]],[[n,checktypes1],[[v,vars1],[v,typestatements1],[v,typestatements2],[v,typestatements4]],":-",[[[n,get_lang_word],["t",[v,t]]],[[n,get_lang_word],["list",[v,dbw_list]]],[[n,equals4],[[v,typestatements1],[[[[v,t],[v,dbw_list]],"|",[[v,typestatements3]]],"|",[v,typestatements4a]]]],[[n,"->"],[[[n,types],["on"]],[[[n,debug_call],[[v,skip],[[[v,t],[v,dbw_list]],[v,typestatements3]]]]],[[n,true]]]],[[n,"->"],[[[[n,checktypes3],[[v,vars1],[v,typestatements3],[v,typestatements2],[v,typestatements4]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[[v,t],[v,dbw_list]],[v,vars1]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[[v,t],[v,dbw_list]],[v,vars1]]]],[[n,true]]]]]]]],[[n,checktypes1],[[v,vars1],[v,typestatements1],[v,typestatements2],[v,typestatements4]],":-",[[[n,get_lang_word],["t",[v,t]]],[[n,get_lang_word],["brackets",[v,dbw_brackets]]],[[n,equals4],[[v,typestatements1],[[[[v,t],[v,dbw_brackets]],"|",[[v,typestatements3]]],"|",[v,typestatements4a]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[[v,t],[v,dbw_brackets]],[v,typestatements3]]]],[[n,true]]]],[[n,"->"],[[[[[n,equals4],[[v,vars1],[[v,vars2],"|",[v,vars3]]]],[[n,checktypes1],[[v,vars2],[v,typestatements3],[v,typestatements2],[v,typestatements4]]]]],[[[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[[v,t],[v,dbw_brackets]],[v,vars1]]]],[[n,true]]]],[[n,checktypes1],[[v,vars3],[v,typestatements4a],[v,typestatements2],[v,typestatements4]]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[[v,t],[v,dbw_brackets]],[v,vars1]]]],[[n,true]]]]]],[[n,cut]]]],[[n,checktypes1],[[v,vars1],[v,typestatements0],[v,typestatements1],[v,typestatements4]],":-",[[[n,equals4],[[v,vars1],[[v,vars2],"|",[v,vars3]]]],[[n,equals4],[[v,typestatements0],[[v,typestatements2],"|",[v,typestatements3]]]],[[n,checktypes2],[[v,vars2],[v,typestatements2],[v,typestatements1],[v,typestatements4]]],[[n,checktypes1],[[v,vars3],[v,typestatements3],[v,typestatements1],[v,typestatements4]]]]],[[n,checktypes2],[[v,vars],[v,typestatements1],[v,typestatements2],[v,c]],":-",[[[n,get_lang_word],["t",[v,t]]],[[n,get_lang_word],["number",[v,dbw_number]]],[[n,equals4],[[v,typestatements1],[[v,t],[v,dbw_number]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[[v,t],[v,dbw_number]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[[n,number],[[v,vars]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[[v,t],[v,dbw_number]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[[v,t],[v,dbw_number]],[v,vars]]]],[[n,true]]]]]]]],[[n,checktypes2],[[v,vars],[v,typestatements1],[v,typestatements2],[v,u1]],":-",[[[n,get_lang_word],["t",[v,t]]],[[n,get_lang_word],["predicatename",[v,dbw_predicatename]]],[[n,get_lang_word],["n",[v,dbw_n1]]],[[n,=],[[v,dbw_n1],[v,dbw_n]]],[[n,equals4],[[v,typestatements1],[[v,t],[v,dbw_predicatename]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[[v,t],[v,dbw_predicatename]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[[n,equals4],[[v,vars],[[[v,dbw_n],[v,u2]]]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[[v,t],[v,dbw_predicatename]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[v,t],[v,dbw_predicatename]],[v,vars]]],[[n,true]]]]]]]],[[n,checktypes2],[[v,vars],[v,typestatements1],[v,typestatements2],[v,u1]],":-",[[[n,get_lang_word],["t",[v,t]]],[[n,get_lang_word],["string",[v,dbw_string]]],%[[n,trace]], ****[[n,equals4],[[v,typestatements1],[[v,t],[v,dbw_string]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[[v,t],[v,dbw_string]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[[n,string],[[v,vars]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[[v,t],[v,dbw_string]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[[v,t],[v,dbw_string]],[v,vars]]]],[[n,true]]]]]]]],[[n,checktypes2],[[v,vars],[v,typestatements1],[v,typestatements2],[v,u1]],":-",[[[n,get_lang_word],["t",[v,t]]],[[n,get_lang_word],["any",[v,dbw_any]]],[[n,equals4],[[v,typestatements1],[[v,t],[v,dbw_any]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[[v,t],[v,dbw_any]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[[n,true]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[[v,t],[v,dbw_any]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[[v,t],[v,dbw_any]],[v,vars]]]],[[n,true]]]]]]]],[[n,checktypes2],[[v,vars],[v,typestatements1],[v,typestatements2],[v,typestatements4]],":-",[[[n,get_lang_word],["t",[v,t]]],[[n,get_lang_word],["list",[v,dbw_list]]],[[n,get_lang_word],["brackets",[v,dbw_brackets]]],[[n,get_lang_word],["number",[v,dbw_number]]],[[n,get_lang_word],["predicatename",[v,dbw_predicatename]]],[[n,get_lang_word],["string",[v,dbw_string]]],[[n,get_lang_word],["any",[v,dbw_any]]],[[n,equals4],[[v,typestatements1],[[v,t],[v,type]]]],[[[[n,not],[[[n,=],[[v,type],[v,dbw_list]]]]],[[n,not],[[[n,=],[[v,type],[v,dbw_brackets]]]]],[[n,not],[[[n,=],[[v,type],[v,dbw_number]]]]],[[n,not],[[[n,=],[[v,type],[v,dbw_predicatename]]]]],[[n,not],[[[n,=],[[v,type],[v,dbw_string]]]]],[[n,not],[[[n,=],[[v,type],[v,dbw_any]]]]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_call],[[v,skip],[[[v,t],[v,type]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[[[n,member3],[[[[v,t],[v,type]],"|",[[v,typestatements3]]],[v,typestatements4]]],[[n,"->"],[[[n,checktypes1],[[v,vars],[v,typestatements3],[v,typestatements2],[v,typestatements4]]],[[n,true]],[[n,checktypes1],[[[v,vars]],[v,typestatements3],[v,typestatements2],[v,typestatements4]]]]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_exit],[[v,skip],[[[v,t],[v,type]],[v,vars]]]],[[n,true]]]],[[n,"->"],[[[n,types],["on"]],[[n,debug_fail],[[v,skip],[[[v,t],[v,type]],[v,vars]]]],[[n,true]]]]]]]],[[n,checktypes3],[[],[v,u1],[v,typestatements2],[v,u2]],":-",[[[n,cut]]]],[[n,checktypes3],[[v,vars],[v,typestatements3],[v,typestatements2],[v,typestatements6]],":-",[[[n,length],[[v,typestatements3],[v,l]]],[[n,length],[[v,l1],[v,l]]],[[n,append],[[v,l1],[v,l2],[v,vars]]],[[n,checktypes1],[[v,l1],[v,typestatements3],[v,typestatements2],[v,typestatements6]]],[[n,checktypes3],[[v,l2],[v,typestatements3],[v,typestatements2],[v,typestatements6]]],[[n,cut]]]],[[n,debug_call],[[v,skip],[[v,function],[v,vars1]]],":-",[[[n,writeln],[["debug_call",[v,function],[v,vars1]]]]]],[[n,debug_exit],[[v,skip],[[v,function],[v,vars1]]],":-",[[[n,writeln],[["debug_exit",[v,function],[v,vars1]]]]]],[[n,debug_fail],[[v,skip],[[v,function],[v,vars1]]],":-",[[[n,writeln],[["debug_fail",[v,function],[v,vars1]]]],[[n,fail]]]],[[n,debug_types_call],[[v,function]],":-",[[[n,writeln],[["debug_types_call",[v,function]]]]]],[[n,debug_types_exit],[[v,function]],":-",[[[n,writeln],[["debug_types_exit",[v,function]]]]]],[[n,debug_types_fail],[[v,function]],":-",[[[n,writeln],[["debug_types_fail",[v,function]]]],[[n,fail]]]],[[n,is_list],[[v,var]],":-",[[[n,=],[[v,var],[]]]]],[[n,is_list],[[v,var]],":-",[[[n,equals4],[[v,var],[[v,v1],"|",[v,v2]]]]]]],[[]]).
**/%% 1 black, 2 white, 3 red, 4 orange, 5 yellow, 6 green, 7 blue, 8 purple, 9 brown, 10 grey random(X),Y is round(10*X), light(Y,[[1,9,0],[2,9,0],[3,9,1],[4,9,0],[5,9,0], [1,8,0],[2,8,0],[3,8,1],[4,8,0],[5,8,0], [1,7,0],[2,7,1],[3,7,0],[4,7,1],[5,7,0], [1,6,0],[2,6,1],[3,6,0],[4,6,1],[5,6,0], [1,5,0],[2,5,1],[3,5,0],[4,5,1],[5,5,0], [1,4,1],[2,4,0],[3,4,0],[4,4,0],[5,4,1], [1,3,1],[2,3,0],[3,3,0],[4,3,0],[5,3,1], [1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0], [1,1,0],[2,1,0],[3,1,0],[4,1,0],[5,1,0]]),  writeln("Displaying 'A' 10 cm above MacBook Air's camera"), sleep(5), writeln(["1 black, 2 white, 3 red, 4 orange, 5 yellow, 6 green, 7 blue, 8 purple, 9 brown, 10 grey\nColour of Letter A=",Y]).
**/%% [[[n,a]],[[n,b],[[v,c],[v,d]]],[[n,ef],['A'],:-,[[[n,->],[[[n,h],[a]],[[n,true]],[[n,true]]]],[[n,cut]]]]]use_module(library(pio)).
**/%% alarm_clock(21,30).
**/%% ctt-orig1-orig2, ctt-orig-tran%% string_codes("[[[[a],[a]],[[a],[a]]],[[[a],[a]],[[a],[a]]],[[[a],[a]],[[a],[a]]]]",Y),phrase(file0(X),Y).
**/%% need to detect if head is a compound, flag and process ithead_is_list_of_lists(Head2,true) :-get_lang_word("v",Dbw_v),%%trace,([Head3]=Head2->true;(%%notrace,fail)),findall(A,(member(A,Head3),((A=[v,_] -> true; ((A=[Dbw_v,_] -> true;is_list(A)))))),B),%%trace,writeln(Head2).%%is_list(Head3),length(Head3,L),length(B,L),!.
**/%% x: predicate_or_rule_name(V_or_n) :- (V_or_n=v->true;V_or_n=n),fail,!.find_state_machine_body2([],[],_,_,_):-!.%%,Body3%%find_state_machine_body2([],Body,Body) :- !.find_state_machine_body2(Body1,Body2%%,Body3,Return_line_true,Return_line_false,Pred_numbers) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("exit_function",Dbw_exit_function1),Dbw_exit_function1=Dbw_exit_function,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,get_lang_word("fail_function",Dbw_fail_function1),Dbw_fail_function1=Dbw_fail_function,        Body1=[[Number,[Dbw_n,"[]"],[Statements1|Statements1a]]|Statements2        ],not(predicate_or_rule_name(Statements1)),not(number(Statements1)),        find_first_line_number(Statements1,Statements1_number),(Statements1a=[]->Statements1a_number=[Dbw_exit_function,Number];        find_first_line_number(Statements1a,Statements1a_number)),(Statements2=[]->Statements2_number=Return_line_true;        find_first_line_number(Statements2,Statements2_number)),        %%find_first_line_number(Statements2,Statements2_number),find_state_machine_body2([Statements1],Body3,Statements1a_number,[Dbw_fail_function,Number],Pred_numbers), %% 2->1find_state_machine_body2([Statements1a],Body4,[Dbw_exit_function,Number],[Dbw_fail_function,Number],Pred_numbers),        find_state_machine_body2([Statements2],Body5,Return_line_true,Return_line_false,Pred_numbers),     maplist(append,[[Body3,Body4,Body5]],[Body345]),                %% [A,B1,B2,C| - A - Line number, B1 - Line to go to if true,   %% B2 - Line to go to next  %% C - Line to go to if false  Body6=[Number,[Dbw_on_true,Statements1_number],[Dbw_go_after,Statements2_number],[Dbw_on_false,Return_line_false],[Dbw_go_to_predicates,-],[Dbw_n,"[]"]%,Body34        ],        append([Body6],Body345,Body2),!.
**//*interpretpart(stringconcat,Terminal,Phrase2,Phrase1,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat",Dbw_stringconcat),%%Variables1=[Terminal,Phrase1,Phrase2], %% terminal can be v or "a"        ((getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[Flag1,Flag2,_Flag3]), %% prolog vars, list of vars, [v]=[prolog var]        %%delete(Value1,Value2,Value3A),        (Terminal=[_Value]->TerminalValue2=[TerminalValue1];TerminalValue2=TerminalValue1),                (Terminal=""->(TerminalValue2="",       string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1))->true;            ((var(TerminalValue2)->(string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1)),string_length(TerminalValue2,1)            );string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1))),                        putvalue(Terminal,TerminalValue2,Vars1,Vars3),        putvalue(Phrase2,Phrase2Value1,Vars3,Vars4),        putvalue(Phrase1,Phrase1Value1,Vars4,Vars2),        (Flag1=true->TerminalValue3=variable1;TerminalValue3=TerminalValue1),        (Flag2=true->Phrase1Value3=variable2;Phrase1Value3=Phrase1Value1))->(debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[TerminalValue3,Phrase1Value3,Phrase2]]),debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[TerminalValue1,Phrase1Value1,Phrase2Value1]])        );                (debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,variable2,variable3]]),        debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,variable2,variable3]])        )).%!.
**//** % keeps list of pred numbers of clauses for a predicate (run after finding predicate and line numbers and before finding state machine)find_pred_numbers([[0,[n,downpipe],[[v,a],[v,a],[v,b]]],[1,[n,downpipe],[[v,a],[v,b],[v,c]],":-",[[0,[n,member2],[[v,c],[v,c1]]],[1,[n,equals1],[[v,c1]]],[2,[n,equals1],[[v,c12]]],[3,[n,"->"],[[4,[n,>],[[v,a],[v,c121]]],[5,[n,downpipe],[[v,c121],[v,b],[v,c]]],[6,[n,"->"],[[7,[n,>],[[v,a],[v,c122]]],[8,[n,downpipe],[[v,c122],[v,b],[v,c]]],[9,[n,fail]]]]]]]]],["+","-","*","/","abort","any","append","atom","brackets","call","ceiling","code","creep","cut","date","delete","equals","equals2","equals3","equals4","exit","fail","grammar","head","is","length","letters","list","member","member2","n","not","number","or","predicatename","random","round","skip","string","string_from_file","stringconcat","stringtonumber","sys","findall_sys","t","tail","true","unwrap","v","variable","vgp","wrap","input","output","string_length","sort","intersection","read_string","writeln","atom_string","trace","notrace","sqrt","notrace"],Pred_numbers),writeln1(Pred_numbers).
**//**concat_list_term(List,String) :-%trace,findall(A,(member(Item,List),%trace,(atom(Item) -> Item=A;term_to_atom(Item,A))%notrace),List1),concat_list(List1,String).
**//**remove_chains_of_one_children0(N3) :-Options1=[[1,"a",2],[2,"b",[-,"ab"]],[1,"c",4],[4,"d",[-,"cd"]]],trace,remove_chains_of_one_children2(1,N3,Options1,[],_Options41).
**//** *** may need to uncommentinterpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[Statements1|Statements2],not(Statements1=[[n,not],_]),not(predicate_or_rule_name(Statements1)),        interpretbody(Functions0,Functions,Vars1,Vars3,Statements1,Result2),        interpretbody(Functions0,Functions,Vars3,Vars2,Statements2,Result3),        %%((Result3=cut)->!;true),        logicalconjunction(Result1,Result2,Result3),!.
**//**interpretstatement1(ssi,_F0,_Functions,[[n,grammar_part]|Variables1],Vars1,Vars2,true,nocut) :-%%writeln1(x9),  [Variables2]=Variables1,        interpretpart(grammar_part,Variables2,Vars1,Vars2),!.**/interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_stringtonumber],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringtonumber",Dbw_stringtonumber1),Dbw_stringtonumber1=Dbw_stringtonumber,        interpretpart(stringtonumber,Variable1,Variable2,Vars1,Vars2).
**/:-include('../../listprologinterpreter/la_maths.pl').
**/:-include('../../listprologinterpreter/la_strings.pl').
**/caw000(Debug,PredicateName,Rules,MaxLength,MaxPredicates,TotalVars,NumInputs,NumOutputs,VarLists,AlgDict,Program1,Program2A) :-PredicateName=[PredicateName1],MaxLength=[MaxLength1],MaxPredicates=[MaxPredicates1],TotalVars=[TotalVars1],VarLists=[VarLists1],%%AlgDict=[AlgDict1],Program2A=[Program2A1],caw00(Debug,PredicateName1,Rules,MaxLength1,MaxPredicates1,TotalVars1,NumInputs,NumOutputs,VarLists1,AlgDict,Program1,Program2A1),!.
**/classicalcomposition(Name1, Name2,Progression2) :-note(Note1, Name1),note(Note2, Name2),classicalcomposition1(Note1, Note2, 0, _, [Note1], Progression1), notestonames(Progression1,Progression2),!.%%writeln(Progression2),!.
**/combination(0,C,C) :- !.
**/combination(A,B,C) :-nouns(A1),member(A,A1),verbs(B1),member(B,B1),member(C,A1).
**/concat_list(A,[],A) :-!.
**/concat_list(A,[],A):-!.
**/concat_list(A,[],A):-!.concat_list(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list(C,Items,B).
**/concat_list3(A,[],A) :-!.
**/expression(Empty) :- is_empty(Empty),!.expression(N) :-isval(N),!.
**/expression(empty) :-!.
**/expression(empty) :-!.expression(N) :-isval(N),!.
**/find_calls2(Program1,Program2,Program3) :-Program1=[Line|Program4],(Line=[[n,PredicateName],Arguments]->length(Arguments,ArgumentsLength);(Line=[[n,PredicateName]],ArgumentsLength=0)), %% correct syntax is [true] not trueItem=[[[n,PredicateName],ArgumentsLength]],append(Program2,Item,Program5),find_calls2(Program4,Program5,Program3).
**/interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[[Statements1|Statements1a]|Statements2        ],not(predicate_or_rule_name(Statements1)),%%writeln1(interpretbody(Functions0,Functions,Vars1,Vars3,[Statement],Result2)),interpretbody(Functions0,Functions,Vars1,Vars3,[Statements1],Result2), %% 2->1        %%((Result2=cut)->!;true),interpretbody(Functions0,Functions,Vars3,Vars4,Statements1a,Result22), %% 2->1        %%((Result22=cut)->!;true),        interpretbody(Functions0,Functions,Vars4,Vars2,Statements2,Result3),       %%((Result3=cut)->!;true),  %%()      logicalnot(Result2,Result4), logicalconjunction(Result1a,Result2,Result22),logicalconjunction(Result1,Result1a,Result3),true.%%!.
**/interpretbodylp2c([],Algorithm1,Algorithm1) :- !.
**/interpretbodylp2p([],Algorithm1,Algorithm1) :- !.
**/interpretstatement1(Functions0,_Functions,Query1,Vars1,Vars8,true,nocut) :-get_lang_word("v",Dbw_v),%%writeln1("h1/10"),        Query1=[Function,Arguments],%%not(Function=[n,grammar]->true;Function=[n,grammar_part]), ****%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),        %%***writeln1(substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs)),        (Function=[Dbw_v,_]->        (append([Function],Arguments,Arguments1),        substitutevarsA1(Arguments1,Vars1,[],Vars3,[],FirstArgs),        Vars3=[Function1|Vars31],        Query2=[Function1,Vars31]);        (substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln1([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),        Query2=[Function,Vars3])), %% Bodyvars2?%%        debug(on)->writeln1([call,[Function,[Vars3]]]),%%writeln1(["Query2",Query2,"Functions0",Functions0]),        interpret2(Query2,Functions0,Functions0,Result1), updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],unique1(Vars7,[],Vars8));(%%writeln1(here1),Vars8=[])).
**/interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_atom],[Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("atom",Dbw_atom1),Dbw_atom1=Dbw_atom,getvalue(Variable,Value,Vars),debug_call(Skip,[[Dbw_n,Dbw_atom],[Value]]),(atom(Value)->debug_exit(Skip,[[Dbw_n,Dbw_atom],[Value]]);     debug_fail(Skip,[[Dbw_n,Dbw_atom],[Value]])),!.
**/interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_equals1],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals1",Dbw_equals11),Dbw_equals11=Dbw_equals1,%%writeln1(5),        interpretpart(match1,Variable1,Variable2,Variable3,Vars1,Vars2).
**/interpretstatement1(_F0,_Functions,[[Dbw_n,Operator],[Variable2,Variable3,Variable1]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,operator(Operator),%%writeln1(4),        interpretpart(isop,Operator,Variable1,Variable2,Variable3,Vars1,Vars2).
**/interpretstatement1(non-ssi,Functions0,Functions,Query1,Vars1,Vars8,true,nocut) :-                %trace,        %(Query1=[[n, flatten2], [[v, e], [v, f], [v, c]]]->trace;true),%writeln1(interpretstatement1(ssi,Functions0,_Functions,Query1,Vars1,Vars8,true,nocut)),        %trace,               %writeln(interpretstatement1(ssi,Functions0,_Functions,Query1,Vars1,Vars8,true,nocut)),%get_lang_word("v",Dbw_v),%get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("call",Dbw_call1),Dbw_call1=Dbw_call,%trace,%%writeln1("h1/10"),%writeln([Functions0,Functions0]),%find_pred_sm(Reserved_words1),        %trace,       % ((Query1=[[Dbw_n,Dbw_call],[Function,Arguments]]%,        not_reserved_word(Function,Reserved_words1)        %)->true;%(Query1=[Function,Arguments],%,Function=[Dbw_n1,Function_a],atom_string(Function_a,Function_s),%(Function=[n,paraphrase2]->trace;true),%)%),%trace,        %%not(Function=[n,grammar]->true;Function=[n,grammar_part]), ****%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),        %%***writeln1(substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs)),        Function=[Dbw_v,Function2],                not(reserved_word2(Function2)),        getvalue(Function,Function3,Vars1),        %reserved_word(Function3),        append([Function3],[Arguments],Arguments1),        interpretstatement1(_,Functions0,Functions,Arguments1,Vars1,Vars8,true,nocut).
**/interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_comment],[_Variable]],Vars,Vars,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("comment",Dbw_comment1),Dbw_comment1=Dbw_comment,!.
**/interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_equals1],[Variable1,[Variable2,Variable3]]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("equals1",Dbw_equals11),Dbw_equals11=Dbw_equals1,%%writeln1(5),        interpretpart(match1,Variable1,Variable2,Variable3,Vars1,Vars2).
**/interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Operator],[Variable2,Variable3,Variable1]],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,operator(Operator),%%writeln1(4),        %trace,%trace,        interpretpart(isop,Operator,Variable1,Variable2,Variable3,Vars1,Vars2),!.
**/light(_,[]) :- !.
**/limit_reached(New_rule_number,MaxPredicates,Rules0,PredicateName,InputVars1,OutputVars,Rules1) :-New_rule_number<MaxPredicates,length(InputVars1,InputVars1L),length(OutputVars,OutputVarsL),pred_already_in_list1(PredicateName,InputVars1L,OutputVarsL,Rules0,Rules),append(Rules,[[predicatename_new_branch,InputVars1L,OutputVarsL], %% Uncommented for test 7, commented for test 7[other_new_branch,_,_] %% commented for test 7],Rules1),!.
**/limit_reached(New_rule_number,MaxPredicates,Rules0,PredicateName,InputVars1,OutputVars,Rules1) :-New_rule_number<MaxPredicates,length(InputVars1,InputVars1L),length(OutputVars,OutputVarsL),pred_already_in_list1(PredicateName,InputVars1L,OutputVarsL,Rules0,Rules),append(Rules,[[predicatename_new_branch,InputVars1L,OutputVarsL], %% Uncommented for test 7, commented for test 7[other_new_branch,_,_] %% commented for test 7],Rules1),!.limit_reached(New_rule_number,MaxPredicates,Rules0,PredicateName,InputVars1,OutputVars,Rules1) :-New_rule_number>=MaxPredicates,length(InputVars1,InputVars1L),length(OutputVars,OutputVarsL),pred_already_in_list1(PredicateName,InputVars1L,OutputVarsL,Rules0,Rules1).
**/location(_,_,"Location") :- !.
**/make_mind_reading_tree4_a(Options2a,Options3) :-%trace,merge_lists_a([1],Options2a,[],%%Options2a,Options3a),%writeln1(merge_lists_a([1],Options2a,[],%%Options2a,%Options3a)),sort(Options3a,Options3c),%trace,remove_chains_of_one_child_a([1],Options3c,[],Options3b),%writeln1(remove_chains_of_one_child_a([1],Options3c,[],Options3b)),sort(Options3b,Options3),!.
**/memberlp2c1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Function],        interpretstatementlp2c2b(Function,Algorithm1,Algorithm2a),        write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
**/memberlp2p1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Function],        interpretstatementlp2p2b(Function,Algorithm1,Algorithm2a,"[]"),        write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
**/name1(X1) --> name10(X2), {atom_string(X2,X1)}.
**/no_singletons(Vars1,Program):-findall(DA,(member(C,Program),C=[_E,D],member(DA,D)),Vars2),%%append_list(Vars2,Vars2A),append(Vars1,Vars2,Vars3),findall(Count1,(member(Item,Vars3),aggregate_all(count,(member(Item,Vars3)),Count1),Count1=1),G),G=[].
**/remove_dups([],List,List) :- !.
**/remove_dups([],List,List) :- !.remove_dups(List1,List2,List3) :-List1=[Item|List4],delete(List4,Item,List5),append(List2,[Item],List6),remove_dups(List5,List6,List3),!.
**/removebrackets([[Value]],Value) :-!.
**/split_string2(String1,Chars,List) :-%string_codes(String2,String1),test(117,_,Code,_),%trace,%writeln1([interpret(off,[[n,grammar1],[String1,Chars,[v,t]]],%Code,A)]),interpret(off,[[n,grammar1],[String1,Chars,[v,t]]],Code,[[[[v,t],List]]]),!.% ?- join_chars_after(["d","e","a","c","f","b","g"],["a","b"],[],L).
**/splitfurther(BrDict01,N) :-   phrase(file0(N),BrDict01).
**/test_open_types_cases(22,[[n,department_filer],[[v,a1],[v,a2],[v,a3]]],        [[[n,department_filer],[[t,string],[t,string],[t,string]]]],        [[[n,department_filer],[output,output,output]]],[        [[n,department_filer],[[v,a1],[v,a2],[v,a3]],":-",        [                        [[n,writeln],["What department is the algorithm from?"]],                [[n,read_string],[[v,a1]]],                [[n,writeln],["What subject is the algorithm from?"]],                [[n,read_string],[[v,a2]]],                [[n,writeln],["What is a short description of the algorithm (2-3 words)?"]],                [[n,read_string],[[v,a3]]]        ]]]).
**/truncate_words_conserving_formatting([Type1,File1],Words1,[Type2,File2]) :-% split on non-alpha chars, count n words and keep formattingSepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",(Type1="file"->(phrase_from_file_s(string(String2), File1));File1=String2),split_string_onnonletter_by_itself2(String2,SepandPad,String3),%trace,first_n_words(String3,Words1,[],String4),maplist(append,[[String4]],[Item3]),concat_list(Item3,String5),(Type2="file"->(open_s(File2,write,Stream2),write(Stream2,String5),close(Stream2),!);(String5=File2)).
**/updatefile1(List2,File) :-sort(List2,List3),updatefile3(List3,File).
**/varnames([],Vars,Vars,Values,Values) :- !.
**/varnames01(L1) --> %{trace},"[",newlines1(_N1),varnames0(L2),newlines1(_),"]",newlines1(_N2), {%foldr(append,[[L2],N1,N2],L1)L1=L2},!. /*varnames01(L1) --> {trace},"[",newlines1(N1),varnames0(L2),%,newlines1(_),"]",newlines1(N2), {foldr(append,[[L2],N1,N2],L1)},!.
**/write_to_stream_c(String,I,O) :-prepare_string_c(String,O2),append(I,O2,O).
**/ /**cawptest2(8,add0,[[[n,+],2,1%% Modes=2 inputs, 1 output]],4,1,%% MaxPredicates is not the number of predicates in the result, it is the number of non-dictionary predicates in the result.
**/ logic_ff0(Specs,Formula0) :-Specs=[[A1,A2]|A3],findall(B,logic_ff1(A1,A1,A2,B),C),logic_ff01(A3,C,Formula0),writeln(Formula0).logic_ff01([],Formula,Formula) :- !.
**/%%caw(_,_,_,_,_,_N,_,_,_,_,_,_,_,_,[],_,_N2?,P,P) :- !.caw(_,_,_,_,0,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_F) :- fail, !. %% Turn off fail,! to have all solutionscaw(Algorithms1,Query,PredicateName,_Rules,_MaxLength,MaxPredicates,_VarList,InputVars1,InputVars2,_InputVarsa,VarLists,OutputVars,Positivity,VarLists02,VarLists02,New_rule_number1,New_rule_number1,Program1,Program2,_V) :-%%writeln1(V),%%MaxLength>0, ***%%MaxPredicates1 is MaxPredicates,New_rule_number1=<MaxPredicates,%%trace,addrules(InputVars2,OutputVars,OutputVars,[],_PenultimateVars,[],Program3),%%notrace,%%writeln([addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3)]),%%optimise(Program1,InputVars1,_InputVars3,PenultimateVars,Program4), %% IV2->3%%writeln([optimise(Program1,InputVars1,InputVars3,PenultimateVars,Program4)]),append(Program1,Program3,Program5),not(Program5=[]),append(InputVars1,OutputVars,Vars2),Program22=[        [[n,PredicateName],Vars2,":-",                Program5        ]        ],%%writeln1(interpret-short(Program22)),      %%everyvarmentioned(Vars2,Program5),   %%((PredicateName=1;PredicateName=2)->trace;true),   /**   not(Program22=[        [[n,add],_,_,                [[[n,+],_]|_]        ]        ]),**/%%(Program22=[[[n,1],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,d]]],[[n,=],[[v,d],[v,c]]]]]],trace),        eliminate_unused_predicates(Program22,Algorithms1,Algorithms2),%%writeln(eliminate_unused_predicates(Program22,Algorithms1,Algorithms2)),%%Algorithms2=[[[n,_],_,_,Body]|_],length(Body,1),%%(Program22=[[[n,function0],[[v,a],[v,b],[v,c]],":-",[[[n,function2],[[v,a],[v,b],[v,d]]],[[n,=],[[v,c],[v,d]]]]]]->writeln(eliminate_unused_predicates(Program22,Algorithms1,Algorithms2));true),%%trace,%%writeln(["1*",append(Algorithms2,Program22,Program2)]), %% ***** swapped a2,p22%%[Program23]=Program22,%%not(member(Program23,Algorithms2)),append(Algorithms2,Program22,Program2), %% ***** swapped a2,p22%%remvdup(Program2a,[],Program2),%%Algorithms2=Program2,%%not(Program2=[[[n,add0],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,d]]],[[n,=],[[v,d],[v,c]]]]]]),%%(Program2=[[[n,1],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,d]]],[[n,=],[[v,d],[v,c]]]]]]->trace;true),%%length(Program2,Program2L),not(Program2L=1),%%not(New_rule_number=1),%%=<MaxPredicates,%%([off,[[n,add0],[[1,2,3],[v,b]]],[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,add2],[[v,a],[v,d]]],[[n,=],[[v,d],[v,b]]]]]],[[[[v,b],[]]]]]=[Debug,Query,Program2,[VarLists]]->trace;true),%%append_last_rule(Program2),/**length(Program2,Program2L),(Program2L>=2->(%%writeln(here2),tracetrue);true),**/debug(Debug),%%([off,[[n,add0],[[1,2,3],[v,b]]],[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,add0],[[v,a],[v,d]]],[[n,=],[[v,d],[v,b]]]]]],[[[[v,b],[]]]]]=[Debug,Query,Program2,[VarLists]]->%%true%%trace%%;true),%%([off,[[n,function3],[1,1,[v,c]]],[[[n,function1],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,c]]]]],[[n,function3],[[v,a],[v,b],[v,c]],":-",[[[n,function1],[[v,a],[v,b],[v,d]]],[[n,=],[[v,d],[v,c]]]]]],[[[[v,c],2]]]]=[Debug,Query,Program2,[VarLists]]->true%%trace%%;true),%%writeln1([V,"\n",Program2]),%%writeln1(V),%%writeln1([program2,Program2]),%%writeln1([v,V]),%% add 0s%%(var(V)->true;(member([[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,add0],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]],V)->writeln1("v yes");true)),%%**()(V=[[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,add0],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]]]->writeln1("v yes");true),%%(var(Program2)->true;(member([[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],Program2)->writeln1("p yes");true)),%%**()(Program2=[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]]]->writeln1("p yes");true),%%vyes(Program2),%%(((var(V)->true;(member([[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,add0],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]],V))),(var(Program2)->true;(member([[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]],Program2))))->trace;true),%%**()((not(var(V)),V=[[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add3],[[v,a],[v,c]]],[[n,add0],[[v,c],[v,d]]],[[n,=],[[v,d],[v,b]]]]]],%%Program2=[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,=],[[v,c],[v,b]]]]]])->trace;true),%%trace;%%true),%%writeln([program2,Program2]),%%(length(Program5,4)->writeln([program2,Program2])),%%(Program2=[[[n,add0],[[v,a],[v,b],[v,c],[v,d],[v,e]],":-",[[[n,+],[[v,a],[v,b],[v,f]]],[[n,+],[[v,c],[v,f],[v,g]]],[[n,+],[[v,d],[v,g],[v,h]]],[[n,=],[[v,h],[v,e]]]]]]->trace;true),%%writeln(["Press c."]),(get_single_char(97)->true;true), %%writeln1([interpret(Debug,Query,Program2,OutputVarList)]), %writeln1(interpret(Debug,Query,Program2,VarLists)),%%([Debug,Query,Program2,[VarLists]]=[off,[[n,add],[[],[1,2],[v,d]]],[[[n,add],[[v,a],[v,c],[v,d]],":-",[[[n,[]],[[v,a]]],[[n,=],[[v,c],[v,d]]]]]],[[[[v,d],[1,2]]]]]->trace;true),%%([Debug,Query,Program2,[VarLists]]=[off,[[n,add0],[[1,2,3],[v,b]]],[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,add2],[[v,a],[v,d]]],[[n,=],[[v,d],[v,b]]]]]],[[[[v,b],[]]]]]->trace;true),%%(Program2=[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,add2],[[v,a],[v,c]]],[[n,add2],[[v,a],[v,d]]],[[n,=],[[v,d],[v,b]]]]]]->trace;true),%%interpret(Debug,Query,Program2,OutputVarList).
**/%data(Value1a,Value2,Value3) :-%((Value1a="=\\=")->%append(Value2,[Value1a],Value3)),!.
**/%remove_chains_of_one_children2([-,A],[-,A],Options1,Options2,Options3) :-%append(Options1,Options2,Options3),!.
**/%val1emptyorvalsequal([],_Value) :- !.
**//**findrulesflowingtopv2(Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[_PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program3),%%Program3=Program1,%%append(Rules1,[Rule],Rules3),subset(Rest,InputVars2),intersection(Rest,InputVars1,Intersection),length(Intersection,0),%%not((member(Var2,Rest),%%member(Var2,InputVars1))),%%delete(Program0,Rule,Program1),IV1Flag2=false,findrulesflowingtopv1(Program0,InputVars1,InputVars2,Rest,[],Rules4,IV1Flag3),%%not(Rules4=[]),iv1flagdisjunction(IV1Flag2,IV1Flag3,IV1Flag1),append(Rules1,[Rule],Rules7),append(Rules7,Rules4,Rules8),unique1(Rules8,[],Rules2).
**//**findrulesflowingtopv2(Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[_PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program3),%%Program3=Program1,%%append(Rules1,[Rule],Rules3),subset(Rest,InputVars2),intersection(Rest,InputVars1,Intersection),length(Intersection,0),%%not((member(Var2,Rest),%%member(Var2,InputVars1))),%%delete(Program0,Rule,Program1),IV1Flag2=false,findrulesflowingtopv1(Program0,InputVars1,InputVars2,Rest,[],Rules4,IV1Flag3),%%not(Rules4=[]),iv1flagdisjunction(IV1Flag2,IV1Flag3,IV1Flag1),append(Rules1,[Rule],Rules7),append(Rules7,Rules4,Rules8),unique1(Rules8,[],Rules2).
**//**interpretstatement2(Value,_Vars,Value) :-(number(Value);atom(Value)).
**//**interpretstatement2(Value,_Vars,Value) :-(number(Value);atom(Value)).interpretstatement2(Variable,Vars1,Value) :-getvalue(Variable,Value,Vars1).
**//**remove_chains_of_one_children3(Options2,Options4,Options3) :-member(B,(append(Options2,[[N1,A,N2]],Options5),remove_chains_of_one_children1(N2,Options4,Options5,Options3**/equals_empty_list([]).
**//** ?- tryoutputs1([original,bt],[[original,bt],[original1,bt1]],L).
**/addrules(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2) :-find_addrules_outputvars(OutputVars1,OutputVars3),addrules1(OutputVars3,VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2).%%;(addrules1([],_VarList,_OutputVars1,_OutputVars2,PenultimateVars,PenultimateVars,Program,Program) :- !.
**/caw(Algorithms,Query,PredicateName,Rules,MaxLength,MaxPredicates,VarList,InputVars1,InputVars2,InputVars3,VarLists,OutputVars,Positivity,VarLists02,VarLists03,New_rule_number1,New_rule_number2,Program1,Program4,_V) :-%%writeln(here4),%%trace,%%writeln1(caw(Algorithms,Query,PredicateName,Rules,MaxLength,MaxPredicates,VarList,InputVars1,InputVars2,InputVars3,VarLists,OutputVars,Positivity,VarLists02,New_rule_number1,New_rule_number2,Program1,Program4)),%%trace,%%writeln([caw(Query,PredicateName,Rules,MaxLength,MaxPredicates,VarList,InputVars1,InputVars2,OutputVarList,OutputVars,Program1,Program4)]),?MaxLength>=0, %%***MaxLength2 is MaxLength - 1,%%reverse(InputVars2,InputVars5),%%writeln([new_rule_number,New_rule_number,maxPredicates,MaxPredicates]),%%writeln(limit_reached(New_rule_number,MaxPredicates,Rules,PredicateName,InputVars1,OutputVars,Rules1)),%%trace,limit_reached(New_rule_number1,MaxPredicates,Rules,PredicateName,InputVars1,OutputVars,Rules1), %% *** Check these%%writeln([rules1,Rules1]),%%repeat,%%writeln(limit_reached(New_rule_number,MaxPredicates,Rules,PredicateName,InputVars1,OutputVars,Rules1)),%%get_char(_),%%trace,member([RuleName0,NumInputs0,NumOutputs0],Rules1),%%[RuleName0,NumInputs0,NumOutputs0]=[other_new_branch,_,_],%%**/%%RuleName0=newrule123,%%writeln([member([RuleName,NumInputs,NumOutputs],Rules)]),%%writeln([rule(RuleName,NumInputs,NumOutputs,VarList,VarList2,Rule)]),%%retractall(newrulenumber(_)),%%assertz(newrulenumber(Newrulenumber1)),%%[InputVars2,VarLists,Positivity]=[VarLists0311,VarLists0312,_VarLists0313], ***%% **** InputVars1 or InputVars2?%%length(VarLists0311,VarLists0311L),%%length(VarLists0312,VarLists0312L),%%***newbranchifcall(RuleName0,PredicateName,Itema),numInputs(NumInputs1a),numOutputs(NumOutputs1a),member(NumInputs1,NumInputs1a),%%[1,2,3]),%%,0,2,3]), %%*** 4member(NumOutputs1,NumOutputs1a),%%[0,1]),%%,0,2,3]), %%***  4%%writeln([i,o,NumInputs1,NumOutputs1]),%%*** caw x when creates a new pred, num extra clauses 0-2, doesn't add rule to pred, returns vl03 for (rules in) this predcaw3(RuleName0,Algorithms,Algorithms2,NumInputs0,NumOutputs0,New_rule_number1,New_rule_number3,Rules,PredicateName,Program1,VarList,VarList2,InputVars2,InputVars4,OutputVars,Rule,NumInputs1,NumOutputs1,VarLists02,VarLists04,MaxPredicates,Rules2),%%->true%%; %% InputVars5->InputVars2%%writeln([rule(RuleName,NumInputs,NumOutputs,InputVars1,InputVars3,VarList,VarList2,Rule)]),%%writeln(not(member(Rule,Program1))),not(member(Rule,Program1)), %% Need to stop repeats of arity 1 callsappend(Program1,[Rule],Program3),%%writeln([inputVars3,InputVars3]),%%InputVars2=InputVars3,%%writeln([program4,Program4]),%%retractall(varlists(_)),%%assertz(varlists(VarLists02)),%%writeln1(caw(Algorithms2,Query,PredicateName,Rules2,MaxLength2,MaxPredicates,VarList2,InputVars1,InputVars4,InputVars3,VarLists,OutputVars,Positivity,VarLists02,New_rule_number3,New_rule_number2,Program3,Program4)),caw(Algorithms2,Query,PredicateName,Rules2,MaxLength2,MaxPredicates,VarList2,InputVars1,InputVars4,InputVars3,VarLists,OutputVars,Positivity,VarLists04,VarLists03,New_rule_number3,New_rule_number2,Program3,Program4,_Algorithms2).
**/cawptest2(1,add0,[[[n,+],2,1%% Modes=2 inputs, 1 output]],2,2,%% MaxPredicates is not the number of predicates in the result, it is the number of non-dictionary predicates in the result.
**/checktypes3([],_,_TypeStatements2,_) :- !.
**/interpretstatement2(Value,_Vars,Value) :-(number(Value);atom(Value)).
**/isvalstrorundef(N) :- var(N),!.
**/isvalstrorundef(N) :- var(N),!.isvalstrorundef(N) :- not(var(N)),isval(N),!.
**/isvalstrorundef(N) :- var(N);(not(var(N)),(isval(N);expression(N))).
**/iv1flagdisjunction(A,B,true) :-(A=true); (B=true).
**/location(_,_,"Port Fairy") :- !.
**/location(_,_,_,"Unknown") :- !.
**/popclassicalcomposition(Name1, Name2,Progression2) :-note(Note1, Name1),note(Note2, Name2),popclassicalcomposition1(Note1, Note2, 0, _, [Note1], Progression1), notestonames(Progression1,Progression2),!.
**/relations2(Item1,Type1,Range1,ItemNumber1,Position1,_Items1,OutputLabels,Inputs2Labels,ExtrasLabels,Relations1,Relations2) :-%%writeln(r22),((Option1=Inputs2Labels,Option2=OutputLabels);(Option1=OutputLabels,Option2=Inputs2Labels)),        member(Item2a,Option1),        Item2a=[Item2,Type2,Range2,ItemNumber2,Position2],        Item1=Item2,        append(Relations1,[[[Item1,Type1,Range1,ItemNumber1,Position1],[Item2,Type2,Range2,ItemNumber2,Position2]]],Relations3),        member(Item3a,Option1),        Item3a=[Item3,Type3,Range3,ItemNumber3,Position3],ItemNumber2=ItemNumber3,((Item3=empty,Position1=Position2,not(Position2=Position3))->(        member(Item5a,ExtrasLabels),Item5a=[Item5,Type5,Range5,ItemNumber5,Position5],        Item2=Item5,append(Relations3,[[extrarelation,Item5,Type5,Range5,ItemNumber5,Position5]],Relations4));Relations4=Relations3),(        member(Item4a,Option2),        Item4a=[Item4,Type4,Range4,ItemNumber4,Position4],        Item3=Item4,        append(Relations4,[[[Item3,Type3,Range3,ItemNumber3,Position3],[Item4,Type4,Range4,ItemNumber4,Position4]]],Relations2)),!.
**/replace_empty_with_empty_set([],A,A).
**/replace_empty_with_empty_set([],A,A) :-!.
**/replace_empty_with_empty_set([],A,A) :-!.replace_empty_with_empty_set(A,B,C) :-A=[Item1|Items],(var(Item1)->Item2=Item1;(Item1=empty->Item2=[];Item2=Item1)),append(B,[Item2],D),replace_empty_with_empty_set(Items,D,C),!.
**/rulename_if_limit(RuleName0,PredicateName,RuleName) :-RuleName0=predicatename_existing,RuleName=[n,PredicateName],!.
**/split3([],List,List) :- !.
**/split3([],List,List) :- !.split3(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[[n,Name],In,Out]|_Rest],append(List1,[[[n,Name],In,Out]],List6),split3(List4,List6,List2),!.
**/val1emptyorvalsequal(empty,_Value) :- !.val1emptyorvalsequal(Value,Value) :-not(Value=empty).
*/%trace,%findall(B,(member(B1,Ts),),G1),%foldr(append,G1,G).
*/move_vars_pred(T1,Map,T2_old,T2_Old2) :-%member([Ad1,Ads2]=Map),get_sub_term_wa(T1,Ad1,It1),findall([Ad2,It1],member(Ad2,Ads2),Ads3),foldr(put_sub_term_wa_ae,Ads3,T2_old,T2_Old2).
*/% is K11 just d or gh/d x d%[K11,H,]%[["d","a.pl",(a(B),B=1)]]%/*find_tests2(H,K11,LP,Tests) :-%findall1(N1,(member([[n,N]|_],LP),%string_strings(N,N1)),Ns),working_directory1(BHD,BHD),home_dir1(HD),working_directory1(_,HD),findall1([K11,H,F2],(append(_,LP1,LP),append([[[n,comment%c ],[Comment]]],LP2,LP1),%findall1(Tests1,(member([[n,comment],[A]],LP),string_strings(Comment,A12),not(member("=",A12)),truncate_comment(A12,A11),reverse(A11,A13),truncate_full_stop(A13,A14),reverse(A14,A15),foldr(string_concat,A15,A16),%term_to_atom(A1,A16),%trace,((not(member("(",A12))->true;(no_vars(A16)->true;string_concat("not",_,A16)))->foldr(string_concat,[%"(",A16],A1);(append([[[n,comment%c],[Comment1]]],_,LP2),string_strings(Comment1,A121),member("=",A121),truncate_comment(A121,A111),reverse(A111,A131),truncate_full_stop(A131,A141),reverse(A141,A151),foldr(string_concat,A151,A161),%term_to_atom(A110,A161),foldr(string_concat,[%"(",A16,",",A161%,")"],A1))),check_non_var0(A1,F21),foldr(string_concat,["(",F21,")"],F2)),Tests1),sort(Tests1,Tests),working_directory1(_,BHD),!.
*/answer_number(Question1,AN) :-trim_spaces_before(Question1,A1),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",split_on_substring117a(A1,SepandPad,B1),((append(C,E,B1),append([D],_%["."|_],E)->%string_strings("abcdefghijklmnopqrstuvwxyz",Alpha),%string_strings("0123456789",Nums),%member(C,Alpha)->string_concat(D,".",AN))->true;AN=""),!.
*/expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2|Data3]|Data41],not([Data2|Data3]=[T,_]),expand_types1([Data2],[],Types3),expand_types1(Data3,Types3,Types4),Types5=[[[T,Dbw_brackets],Types4]],findall(Types61,(member(Data4,Data41),expand_types1([Data4],[],Types61)),Types62),foldr(append,Types62,Types6),append_list3([Types1,Types5,Types6],Types2),!.
*/find_a_or_n(Q2,L111) :-%SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",operators1(Ops),extra_characters(EC),string_concat(Ops,EC,SepandPad),% SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",findall(L14,(member(L2,Q2),split_on_substring(L2,SepandPad,L3),foldr(string_concat,L3,S3),atom_chars(S3,A3),%atom_string(S31,S3),%string_concat(L4,_,S3),%string_length(L4,1),%atom_string(L5,L4),%L3=[L31|_],(A3=''->L13=[(*)];findall(L12,(member(A,A3)%atom_concat(S34,_,A3),((atom_length(S34,1)->((,((char_type(A,alpha)->L12=a;(char_type(A,digit),L12=n))->true;L12=(*))),L13),(member(n,L13)->L14=n;(member(a,L13)->L14=a;L14=(*))))),L11),findall(X,(member(X1,L11),(X1=(*)->X=n;X=X1)),L111),!.
*/find_number(A,N) :-(sub_term_wa([var,_,_,_,_,_,_,_,_,_,_], A, B)->B=[[_, [var,_,_,_,_,N,_,_,_,_,_]]|_];A=N),%->true;%find_first(B,(member(B,A),number(B)),N)),%C=[N|_],!.
*/find_number(A,N) :-(sub_term_wa([var,_,_,_,_,_,_,_,_,_,_], A, B)->B=[[_, [var,_,_,_,_,N,_,_,_,_,_]]|_];A=N),%->true;%find_first(B,(member(B,A),number(B)),N)),%C=[N|_],!.% number1(1,A),number1([var,_,_,_,_,1,_,_,_,_,_],B),number1("1",C).% A = B, B = C, C = 1.
*/foldr(string_concat2,ABC,D) :-findall(E,(member(E,ABC),var(E)),E1),length(E1,3),not(var(D)),sub_term_types_wa([var],ABC,[[Ad1,_],[Ad2,_],[Ad3,_]]),Ad1=[_,N1],Ad2=[_,N2],N2 is N1+1,Ad3=[_,N3],N3 is N2+1,(string(D)->string_strings(D,D11);atom_chars(D,D11)),findall(M,(member(M1,D11),(catch(number_string(M,M1),_,false)->true;M=M1)),M2),%findall(L,(member(L1,ABC),(var(L1)->L=L1;L=[L1])),L2),N4 is N1-1,length(N4L,N4),length(N4L1,N4),N5 is 3,length(N5L,N5),length(N5L1,N5),append(N4L,N6,M2),append(N5L,_,N6),append(N4L1,N61,ABC),append(N5L1,_,N61),append(V1,V4,N5L),append(V2,V3,V4),foldr(string_concat,V1,V11),foldr(string_concat,V2,V21),foldr(string_concat,V3,V31),N5L1=[V11,V21,V31].
*/group_consecutive_numbers(T,R,Co,A, B):-group_consecutive_numbers2(T,R,Co,A, B1),findall(X,(member(X1,B1),(number(X1)->X=[var,T,R,Co,_IN,X1,[],[],[],[],[]];X=X1)),B),%subtract(C,[]),!.
*/group_consecutive_numbers(T,R,Co,A, B):-group_consecutive_numbers2(T,R,Co,A, B1),findall(X,(member(X1,B1),(number(X1)->X=[var,T,R,Co,_IN,X1,[],_TP,_RP,_CP,_INP];X=X1)),B),%subtract(C,[]),!.
*/group_consecutive_numbers(T,R,Co,A, B):-group_consecutive_numbers2(T,R,Co,A, B1),findall(X,(member(X1,B1),(number(X1)->X=[var,T,R,Co,_IN,X1,[],_TP,_RP,_CP,_INP];X=X1)),B),%subtract(C,[]),!.group_consecutive_numbers2(_,_,_,[], []):-!.
*/pft_expand_types1(Data1,Types1,Types2,VD1,VD2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),%trace,Data1=[[Data2|Data3]|Data41],%not([Data2|Data3]=[T,_]),pft_expand_types1([Data2],[],Types3,VD1,VD3),pft_expand_types1(Data3,Types3,Types4,VD3,VD4),Types5=[[[T,Dbw_brackets],Types4]],pft_expand_types2(Data41,[],Types6,VD4,VD2),%findall(Types61,(member(Data4,Data41),pft_expand_types1([Data4],[],Types61,VD1,VD2)),Types62),%foldr(append,Types62,Types6),foldr(append,[Types1,Types5,Types6],Types2),!.
*/interpretstatement1(ssi,_Functions0,_Functions,Query1,Vars1,Vars8,true,nocut,_) :-%writeln1([*,_Functions0,_Functions]),get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("call",Dbw_call1),Dbw_call1=Dbw_call,%%writeln1("h1/10"),%trace,%find_pred_sm(Reserved_words1),        ((Query1=[[Dbw_n,Dbw_call],[[lang,Lang1],Debug1,[Function,Arguments],Functions%,Result        ]],Tm=off%,        %not(member(Dbw_call,Reserved_words1))        )->true;        (Query1=[[Dbw_n,Dbw_call],[[lang,Lang1],Debug1,[Function,Arguments],Types,Modes,Functions%,Result        ]],Tm=on)),                        %trace,                lang(Lang2a),        types(Types2a),  (Types2a=on->(typestatements(TypeStatements2a),  modestatements(ModeStatements2a));true),          (Lang1=same->lang(Lang2);Lang2=Lang1),        (Debug1=same->debug(Debug2);Debug2=Debug1),                %%not(Function=[n,grammar]->true;Function=[n,grammar_part]), ****%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),        %%***writeln1(substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs)),        ((Function=[Dbw_v,Function2],        not(reserved_word2(Function2)))->        (append([Function],Arguments,Arguments1),        substitutevarsA1(Arguments1,Vars1,[],Vars3,[],FirstArgs),        Vars3=[Function1|Vars31],        Query2=[Function1,Vars31]);        (substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs),        %simplify(Vars32,Vars3), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%%writeln1([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),        Query2=[Function,Vars3])), %% Bodyvars2?%%        debug(on)->writeln1([call,[Function,[Vars3]]]),%%writeln1(["Query2",Query2,"Functions0",Functions0]),                        %interpret2(Query2,Functions0,Functions0,Result1),                          remember_and_turn_off_debug(Debug),     %trace,  query_box(Query2,_Query3,Functions,Functions1),convert_to_grammar_part1(Functions1,[],Functions2,_),%insert_cuts(Functions2a,Functions2),%Functions1=Functions2,%writeln1(convert_to_grammar_part1(Functions1,[],Functions2,_)),%trace,%writeln1(Functions2),%%pp3(Functions2),%%writeln1(lucianpl11(Debug,Query,Functions2,Functions2,Result)),%findall(Result1,%trace,add_line_numbers_to_algorithm1(Functions2,Functions2a),%Functions2=Functions2a,%writeln1(add_line_numbers_to_algorithm1(Functions2,Functions2a)),%writeln1(Functions2a),%append(Functions2a,Functions1a,Functions2b),pred_numbers(Pred_numbers0),%find_pred_sm(Reserved_words),%,"en"),find_pred_numbers(Functions2a,[],%Reserved_words,Pred_numbers),retractall(pred_numbers(_)), assertz(pred_numbers(Pred_numbers)),%trace,find_state_machine1(Functions2a,Functions3a,Pred_numbers),%trace,         ((Tm=off->international_lucianpl1([lang,Lang2],%off,%         Debug2,         Query2,Functions3a,Result1a)         %international_interpret([lang,Lang2],off,%Debug2,%Query2,Functions,Result1a);international_lucianpl1([lang,Lang2],%off,%Debug2,Query2,Types,Modes,Functions3a,Result1a)%international_interpret([lang,Lang2],off,%Debug2%Query2,Types,Modes,Functions,Result1a))->true;(turn_back_debug(Debug),false)),                       turn_back_debug(Debug),member(Result1,Result1a),retractall(pred_numbers(_)), assertz(pred_numbers(Pred_numbers0)),retractall(lang(_)), assertz(lang(Lang2a)),retractall(types(_)), assertz(types(Types2a)),  (Types2a=on->(  retractall(typestatements(_)), %findall([A,C],(member([A,B],TypeStatements2a),expand_types(B,[],C)),TypeStatements2a1),assertz(typestatements(TypeStatements2a)),retractall(modestatements(_)), assertz(modestatements(ModeStatements2a)));true),updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],(%trace,unique1(Vars7,[],Vars8)%,notrace));(%%writeln1(here1),Vars8=[])).                interpretstatement1(ssi,Functions0,_Functions,Query1,Vars1,Vars8,true,nocut,_) :-                %trace,               %writeln(interpretstatement1(ssi,Functions0,_Functions,Query1,Vars1,Vars8,true,nocut)),get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("call",Dbw_call1),Dbw_call1=Dbw_call,%%writeln1("h1/10"),%trace,%writeln([Functions0,Functions0]),%find_pred_sm(Reserved_words1),        %trace,        ((Query1=[[Dbw_n,Dbw_call],[Function,Arguments]]%,        not_reserved_word(Function,Reserved_words1)        )->true;(Query1=[Function,Arguments],Function=[Dbw_v,_Function2]%not(reserved_word2(Function2))))%,Function=[Dbw_n1,Function_a],atom_string(Function_a,Function_s),%,not_reserved_word(Function,Reserved_words1))%),%trace,        %%not(Function=[n,grammar]->true;Function=[n,grammar_part]), ****%%writeln1(["Arguments",Arguments,"Vars1",Vars1]),        %%***writeln1(substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs)),        ((Function=[Dbw_v,Function2],        not(reserved_word2(Function2)))->        (%trace,        append([Function],Arguments,Arguments1),        %trace,        substitutevarsA1(Arguments1,Vars1,[],Vars3,[],FirstArgs),        Vars3=[Function1|Vars31],        Query2=[Function1,Vars31]);        (%trace,        substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs),        %simplify(Vars32,Vars3), %%% var to value, after updatevars:  more vars to values, and select argument vars from latest vars%writeln1([substitutevarsA1,arguments,Arguments,vars1,Vars1,vars3,Vars3,firstargs,FirstArgs]),        Query2=[Function,Vars3])), %% Bodyvars2?%(Function=[n,compound213]->%true%trace%;true),        %trace,%%        debug(on)->writeln1([call,[Function,[Vars3]]]),%%writeln1(["Query2",Query2,"Functions0",Functions0]),%trace,%writeln1(interpret2(Query2,Functions0,Functions0,Result1)),         remember_and_turn_off_debug(Debug), turndebug(off),%trace,         (lucianpl1(off,%,off,%Debug,         Query2,Functions0,Result1a)%interpret2(Query2,Functions0,Functions0,Result1)         ->true;(turn_back_debug(Debug),false)),                       turn_back_debug(Debug),     %trace,     member(Result1,Result1a),                %writeln1(interpret2(Query2,Functions0,Functions0,Result1)),%writeln1(updatevars2(FirstArgs,Result1,[],Vars5)),updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->%%Vars7=[Var71|Vars72],(%trace,unique1(Vars7,[],Vars8)%,notrace));(%%writeln1(here1),Vars8=[])).
*/line1_3d(X1,Y1,Z1,X2,Y2,Z2,C2,C4,N3) :-%%_3d(X1=<X2->_3d(XA1=X1,XA2=X2);_3d(XA1=X2,XA2=X1)),%%_3d(Y1=<Y2->_3d(YA1=Y1,YA2=Y2);_3d(YA1=Y2,YA2=Y1)),%%gridline1_3d(XA1,YA1,XA2,YA2,C2,C3,N3).
*/% max sentences=3, retry others from a b cdfs1(C51,D51,Sent,DB,_,A,[],Chain2) :- dfs(C51,D51,Sent,DB,_,A,[],Chain2),!.
*/%% retry nested terminterpretstatementlp2p5(A,B,Brackets):- interpretstatementlp2p5(A,"",B,Brackets).
*/%->,3get(F,Number,D,E5,_C1,C3,_,Wrap) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,F="->",%trace,/* get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,  get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,*/%trace,(Wrap=nowrap->append([_],D1,D);D1=D),get_last_line(Number,D1,C111,A,E,Number2,F2,C,Arguments2),% append(A,C,D1),%(false%Wrap=nowrap%->not(A=[]);true), %C=[C111|E], %trace, %C111=[Number2,[Dbw_on_true,_N1],[Dbw_go_after,_],[Dbw_on_false,_Number3],[Dbw_go_to_predicates,_],[Dbw_n_or_v1,F2]|Arguments2],%(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),%trace,%get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,%get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,%get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,%trace,((F2="[]"->true;(F2=Dbw_not->true;(F2=Dbw_or->true;(F2="->"->true;(F2=Dbw_findall)))))-> (%append(A,[C111],AC), %trace, get_up_to_next_chunk(A,[],Ax1), get(F2,Number2,C%AC%E E*  ,E2,[],C32,Arguments2,nowrap),  append(Ax1  ,C32,C31));(%convert_chunk%trace,append(A,[C111],AC),%trace,get_up_to_next_chunk(AC,[],C31),E=E2)),%trace,%(Wrap=nowrap->append([_],E21,E2);E21=E2),get_last_line(Number,E2,C112,A1,E1x,Number31,F3,C11,Arguments3), %append(A1,C11,E2), %C11=[C112|E1x],  %trace, %C112=[Number31,[Dbw_on_true,A3],[Dbw_go_after,B],[Dbw_on_false,_Number4],[Dbw_go_to_predicates,_],[Dbw_n_or_v2,F3]|Arguments3],%(Dbw_n_or_v2=Dbw_n->true;Dbw_n_or_v2=Dbw_v),%(A3=[Fail_or_exit,Number]->true;B=[Fail_or_exit,Number]),  %(Fail_or_exit=exit_function->true;Fail_or_exit=fail_function),((F3="[]"->true;(F3=Dbw_not->true;(F3=Dbw_or->true;(F3="->"->true;(F3=Dbw_findall)))))-> (%append(A1,[C112],AC1), get_up_to_next_chunk(A1,[],Ax), get(F3,Number31,%E1% C11%,AC1%E*  ,E3,[]%C1  ,C311x,Arguments3,nowrap),  append(Ax,C311x,C311));(%convert_chunk%trace,append(A1,[C112],AC1),get_up_to_next_chunk(AC1,[],C311),E1x=E3)),%(Wrap=nowrap->append([_],E31,E3);E31=E3),get_last_line(Number,E3,C1131,A13,E4,Number41,F33,C113,Arguments33), %append(A13,C113,E3), %C113=[C1131|E4],  %trace, %C1131=[Number41,[Dbw_on_true,A33],[Dbw_go_after,B3],[Dbw_on_false,_Number43],[Dbw_go_to_predicates,_],[Dbw_n_or_v3,F33]|Arguments33],%(Dbw_n_or_v3=Dbw_n->true;Dbw_n_or_v3=Dbw_v),%(A33=[Fail_or_exit2,Number]->true;B3=[Fail_or_exit2,Number]),  %(Fail_or_exit2=exit_function->true;Fail_or_exit2=fail_function),((F33="[]"->true;(F33=Dbw_not->true;(F33=Dbw_or->true;(F33="->"->true;(F33=Dbw_findall)))))-> (%append(A1,[C112],AC1), get_up_to_next_chunk(A13,[],A13x), get(F33,Number41,%E1% C113%,AC1%E*  ,E5,[]%C1  ,C3131,Arguments33,nowrap),  append(A13x,C3131,C313)  % eliminate ->,2  %here1  );(%convert_chunk%trace,append(A13,[C1131],AC13),get_up_to_next_chunk(AC13,[],C313),E4=E5)),%trace,foldr(append,[C31,C311,C313],C314),(true%Wrap=wrap->C3=[[[Dbw_n,F],C314]];C3=[[Dbw_n,F],C314]).
*/NA3 is N+1,process_sentences(NA3,NA2,Sentences1,List2,Connections2,Connections2a1,Connectives1,Connectives1a11),!.
*/get_chunks([],C,C) :- !.get_chunks(CD,C1,C2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,  get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates, %get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,%get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,%get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall,CD=[[Number,[Dbw_on_true,_Statements1_number],[Dbw_go_after,_Statements2_number],[Dbw_on_false,_Return_line_false],[Dbw_go_to_predicates,_Predicates],[Dbw_n_or_v1,F]|Arguments]|D],(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),%F="[]",%trace,%(F=findall->trace;true), get(F,Number,D,E,[],C4,Arguments,wrap),append(C1,C4,C6),%trace,get_up_to_next_chunk(E,[],C5),append(C6,C5,C2),!.
*/is_type([],_Type,L,L,TN,TN) :- !.
*/ put_sub_term_wa_ae([E,A],B,C) :- put_sub_term_wa(A,E,B,C),!.
*/#=(A,B) :- var(A),not(var(B)),A is B,!.
*/% build saves over gh (which is moved to lc) with a commandmerge(K11,File1,Path1,Tests) :-%writeln(merge(K11,File1,Path1,Tests)),``%trace,%trace,%%%%%%%%%*****Change gh2 to gh %foldr(string_concat,["../../Github2/",K11,"/",File1],Path11), get_file(file,Path1,S1), %p2lpconverter([Type,File1],S1), %pp0(S1,S2),S2=S3,%term_to_atom(S2,S3) %trace, split_string(Path1,"/","/",P2), append(_,[P3],P2), working_directory1(A2,A2), home_dir(A1), working_directory1(_,A1), %working_directory1(_,"../../Github_lc/"),foldr(string_concat,["../../Github_lc/tests_",K11,".txt"%"/",File1 ],File2),  foldr(string_concat,["[[n,comment],[[""File delimiter"",""../../Github_lc/",K11,""",""",P3,"""]]]"],String0), catch(open_file_s(File2,[_,Old_S11]),_,Old_S11=["[",String0,"]"]),  foldr(string_concat,Old_S11,Old_S112),  term_to_atom(Old_S1121,Old_S112), %trace, split_into_lp_files(Old_S1121,Old_S113),  foldr(string_concat,["../../Github_lc/",K11],PZ), %trace, foldr(string_concat,[P3],FZ),  (once(member([[[n, comment], [["File delimiter", PZ, FZ]]]|Old_S1],Old_S113))->true;Old_S1=[]),  %term_to_atom(Old_S114,Old_S1141), %findall1([AT1,",\n"],(member(AT1,Old_S11)),AT12),flatten(AT12,AT1x),%)),AT12), %append(AT14,[_],AT1x), %foldr(string_concat,Old_S1141,AT135), %foldr(string_concat,["[",AT135,"]"],AT132), %term_to_atom(AT134,AT135), %foldr(append,AT131,AT133), %trace, %pp0(AT133,AT134), %Old_S114=[_|Old_S1], %split_string(AT134,"\n","\n",AT13) %,trace   working_directory1(_,A2), %trace, %open_file_s(File2,Old_S1), (S1=Old_S1-> (%trace, writeln(["Files",K11,"/",File1,"and in",File2,"are identical"]), ci_fail(Ci_fail), append(Ci_fail,[1],Ci_fail1), retractall(ci_fail(_)), assertz(ci_fail(Ci_fail1)) %Tests=[]%fail%abort %Tests=[[K11,File1,Old_S1,S1]]%fail%abort );( ci_fail(Ci_fail), append(Ci_fail,[0],Ci_fail1), retractall(ci_fail(_)), assertz(ci_fail(Ci_fail1)) )),%trace, foldr(string_concat,["../../Github_lc/",K11],K12), %trace, %term_to_atom(String01,String0), %(append(String01,_,Old_S1)->Old_S1=Old_S10; %append([String01],Old_S1,Old_S10)), Old_S1=Old_S10, %(append(String01,_,S1)->S1=S10; %append([String01],S1,S10)), S1=S10, %trace, Tests=[[K12,File1,Old_S10,S10]],!.
*/% delete unconnected preds%order_preds_bottom_up(L100,Functions3,[],Ordered_pred_nums2)%find bottom up order of preds% - delete 1 in 1-1 (cycle)%find_dependencies(SM1,[],Deps).
*/% find_insertions_and_deletions([1,2,3],[1,2,4,3],In,D).
*/% find_insertions_and_deletions_vintage([1,2,3],[1,2,4,3],In,D).
*/% findall_until_fail(B,member(B,[true,true,false,true]),B,D).
*/% repeat_until_last_two_same(generate_result(Result),Result,Result1).
*/% repeat_until_the_same(A,1,(C=1,writeln(C)),C). % A = C, C = D.
*/% reserved word - membre2 -> member2 (in list)% (translate to en, check list)reserved_word2(Word) :- lang(Lang), %lang_db(Lang_db),  get_lang_word3(Word,Lang,"en",Word2), atom_string(Word2,Word3), reserved_words2(Reserved_words), (member(Word3,Reserved_words)->true; (fail% %writeln1([not_reserved_word,Word3]),fail )),!.
*/% split_string1(Docs,["`"],Input1) - splits and deletes on charssplit_string(A,B,C) :-split_string(A,B,B,C),!.
*/% start with shortest string at end of strings, build dec tree bottom up% turn recursion on way into new clauses eg abbbc% matching brackets at same level% only branches if 2nd instance needing it x% turn tree into graph% dfs post order - replaces same branches% check simpler trees for recursive parts first, x% decision_tree_s2([[a,b,c],[a,d,e],[f,g,h]],A),writeln(A).
*/%% 1 start%% key to chest->machete%% machete to vine->exit/**?- traverse(2,6).
*/%)->true;%T8=T45))),/*))findall(T6,(member(T7,T1),)break_on_list(T1,T2,T3) :-!.T1=[T4|T5],(is_list(T4)->append([T2],);T5=append(T2,T4,T6).*/% group_non_lists1([a,[b],c,d,[f],g,h],D).
*/%*//*collect_connected_pred_ids(Pred_id,Pred_ids1,Pred_ids2,Predicate_number,Globals3) :- member([pred_id_chain,Pred_id,Next_pred_id],Globals3), ((not(member(Next_pred_id,Pred_ids1)), member([[pred_num,Next_pred_id],Predicate_number],Globals3))-> (append(Pred_ids1,[Next_pred_id],Pred_ids3), collect_connected_pred_ids(Next_pred_id,Pred_ids3,Pred_ids2,Predicate_number,Globals3)); Pred_ids1=Pred_ids2),!.
*/%/*wrap_if_string(A,B) :- ((not(A=""), string(A))-> foldr(string_concat,["\"",A,"\""],B); A=B),!.%*/concat(B,G,A,C) :- %(string(A)-> foldr(string_concat,[B,G,A],C)%; %((atom(A)->true;(number(A))), %foldr(atom_concat,[B,G,A],C))) ,!.
*//*collect_simplify_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2|Data3]|Data4],collect_simplify_types(Data2,[],Types3),collect_simplify_types(Data3,Types3,Types4),Types5=[[[T,Dbw_brackets],Types4]],collect_simplify_types(Data4,[],Types6),append_list3([Types1,Types5,Types6],Types2),!.*//*collect_simplify_types(Data,Types1,Types2) :-get_lang_word("t",T),%get_lang_word("string",Dbw_string),Data=[T,A],%string(Data),append(Types1,[[T,A]],Types2),!.
*//*find_lists32(L1,L2,L3) :-repeating_unit(L1,U),append(L2,[U],L3),!.
*//*memberlp2p1(Functions2,Algorithm1,Algorithm2) :-%trace,        Functions2=[A=B],        (string(A)->true;(atom(A)->true;(number(A)))),        (string(B)->true;(atom(B)->true;(number(B)))),        %interpretstatementlp2p2a(Function,"",Algorithm3a,"[]"),        %string_concat(Algorithm3a,"(",Algorithm3d),        %interpretstatementlp2p2(Arguments2,"",Algorithm3e),        %interpretstatementlp2p2(Arguments3,"",Algorithm3f),        %string_concat(Algorithm3e,")",Algorithm3f),                concat_list([A,"=",B],Algorithm3),%interpretbodylp2p(Body,Algorithm3,Algorithm2a),      write_full_stop_if_last_item([],Algorithm3,Algorithm2),!.
*//*print_text :-trace,html_api_maker_or_terminal(Html_api_maker_or_terminal),retry_back_stack(Stack),cumulative_or_current_text(Cumulative_or_current_text),(Cumulative_or_current_text=cumulative->findall([Text1,"\n"],member([_,[text,Text1]],Stack),Text2);get_curr_text(Stack,Text2)),term_to_atom(Text2,Text4),%concat_list(Text2,Text4),(Html_api_maker_or_terminal=html->(replace(Text4,"\n","<br>",Text3),format(Text3,[]));(Text4=Text3,writeln(Text3))).
*//*replace(A,Find,Replace,F) :- split_string(A,Find,Find,B),findall([C,Replace],(member(C,B)),D),maplist(append,[D],[E]),concat_list(E,F),!.
*//*replace11([],_Insertions,After,After) :- !.
*//*simplify_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2|Data3]|Data4],simplify_types(Data2,[],Types3),simplify_types(Data3,Types3,Types4),Types5=[[[T,Dbw_brackets],Types4]],simplify_types(Data4,[],Types6),append_list3([Types1,Types5,Types6],Types2),!.
*//*simplify_types_with_n(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2|Data3]|Data4],simplify_types_with_n(Data2,[],Types3),simplify_types_with_n(Data3,Types3,Types4),Types5=[[[T,Dbw_brackets],Types4]],simplify_types_with_n(Data4,[],Types6),append_list3([Types1,Types5,Types6],Types2),!.
*//*subtract2(A,[],A) :- !.
*//*test(246,%[[n,or12],[[v,a]]],[[n,findall],[[v,b],[[n,findall],[[v,b],[[[n,or12],[[v,b]]]],[v,a]]],[v,a]]],[        [[n,or12],[1]],        [[n,or12],[2]]                ],[[[[v,a],[1,2]]]]).
*//*test(246,[[n,test]],[[[n,test],":-",[        [[n,member],[[1,2],[v,a]]],        [[n,member],[[1,2],3]]]]        ],[[[[v,a],[1,2]]]]).*/%test(247,[[[n,equals4],[[v,a],[]]]][[n,findall],[[v,d],[[n,append1],[[v,a],[v,b],[v,d]]],%test(244,[[n,string_concat1],["a","",[v,d]]],%test(244,[[n,append1],[[a],[],[v,d]]],%test(244,[[n,string_chars1],["ab",[v,d]]],%test(244,[[n,foldl1],[[n,string_concat1],["a","b"],"",[v,d]]],%test(244,[[n,foldl1],[[n,add],[1,2,3],0,[v,d]]],%[/*[[n,string_concat1],[[v,a],[v,b],[v,c]],":-",[%[[n,string_chars1],[[v,c],[v,c1]]],%[[n,equals4],[[v,c],[v,c1]]],%[[n,writeln],[[v,c1]]],%[[n,trace2]],[[n,append1],[[a],[],[v,c1]]]]],[[n,append1],[[],[v,a],[v,a]]],[[n,append1],[[[v,a],"|",[v,d]],[v,b],[[v,a],"|",[v,c]]],":-",[[[n,append1],[[v,d],[v,b],[v,c]]]]]],[[[[v,a],[1,2]]]]).
*//**was commentsnewlines1([]) --> "%", comments(_), "\n".newlines1([]) --> "/","*", commentsa(_), "*","/".newlines1([]) --> newlines1(_).
*//*ssi_interpretpart(member,Variable1,Variable2,Vars1,Vars2,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member",Dbw_member),        getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_member],[Value1,Value2]]),  %(((not(Value2=empty)->member(Value2,Value1),((findall([[Value1,Value3],Vars2b,Value3],(member(Value3,Value1),putvalue_equals4(Variable2,Value3,Vars1,Vars2b)%%,Vars2=Vars1),Vars2a),Vars2a=[[_,Vars2,Value3]|Vars2d],findall([[Value11,Value21],Vars2e],member([[Value11,Value21],Vars2e,Value31],Vars2d),Vars2c1),Vars2c=[[[Dbw_n,Dbw_member],[Value1,Value2],Value3]|[Vars2c1]])->      debug_exit(Skip,[[Dbw_n,Dbw_member],[Value1,Value3]]);     debug_fail(Skip,[[Dbw_n,Dbw_member],[Value1,Value2]])),!.
*/:-include('../listprologinterpreter/listprolog.pl').
*/calc_form2(AB,Out) :-%(A=[calculate,A1]->Calc_a=true;(A=A1,Calc_a=false)),%A=A1,%(B=[calculate,B1]->Calc_b=true;(B=B1,Calc_b=false)),%B=B1, % * Usually only A has [calculate,_] e.g. 1+1=calculate(1+1) which=2, and A doesn't change because it is only updated by changes to the function assignments in B% leave in [var|_] form so can sub back in, html will output% calculates term function B, substitutes into Asub_term_wa([function,_,_,_,_,_],AB,Instances0),findall([Add0,[function,_,_,_,AD2,B1]],(member([Add0,[function,_,_,_,FEC1,B1]],Instances0),evaluate(B1,AD1,_Vars),sub_term_wa([var|_],FEC1,Instances1),sub_term_wa([var|_],AD1,Instances2),findall(X,(member(X1,Instances1),X1=[Add1,[var,T1,R1,C1,IN1,V,VN1,TP1,RP1,CP1,INP1]],% if variable or value, substitute in if possible or leave alone(member([Add2,[var,T2,R2,C2,IN2,V2,VN,TP2,RP2,CP2,INP2]],Instances2)->X=[Add1,[var,T1,R1,C1,IN1,V2,VN,[],[],[],[]]]% Instances1 could have pointed to Varname but this doesn't matter;X=X1)),Instances1a),foldr(put_sub_term_wa_ae,Instances1a,FEC1,AD2)),AD3),foldr(put_sub_term_wa_ae,AD3,AB,Out),!.
*/change_var_base :-vars_base_s2a(A),char_code(A,A2),A3 is A2+1,char_code(A1,A3),retractall(vars_base_s2a(_)),assertz(vars_base_s2a(A1)).
*/collect_simplify_types(Data1,Types1,Types2) :-Data1=[Data2|Data3],collect_simplify_types(Data2,Types1,Types3),collect_simplify_types(Data3,Types3,Types2),!.
*/ctobr_1(S1,C1_1,Grid2) :-%writeln(C1),characterbr2(Cs),string_atom(C1_1,C1),member([C1,_C1Name,C2],Cs),%writeln(C1Name),writeln(''),grid(S1,Grid1), member([X1,Y1,M1],C2), N2=1, Stroke1=0, %% States:[[this,state],Line:[[any,state,to,this,state],[true,or,false]],State:[[this,state,to,a,state],states]] States= [ [[1,s],false,[[1,s],[1,-]]], [[1,-],false,[[3,s],[2,-]]], %%[[2,s],false,[[2,s],[3,-]]], [[2,-],true,[[3,s],[2,-]]], [[3,s],true,[[1,s],[1,-]]] %%[[3,-],false,[[3,s],[2,-]]] ],M1=[N2|_Ms],(changegrid2(_Prevstate,[1,s],Grid1,Grid2,X1,Y1,C2,_C4,N2,Stroke1,States);changegrid2(_Prevstate,[1,-],Grid1,Grid2,X1,Y1,C2,_C4,N2,Stroke1,States)), %y(Y), %prettyprint1(Grid2,Y),writeln(''), %prettyprint1A(Grid2,Y), !. %% 2 %%string_to_image1(_,_,40,24,_,File_contents,File_contents) :- !.%string_to_image1(_,_,_,_,"",File_contents,File_contents) :- !.string_to_image1(_X,_Y,_,_,_X1,_Y1,"",_C1,_T1,File_contents,File_contents) :- !.string_to_image1(X_lim,Y_lim,_X,Y,XA1,YA1,S1,C1,String,File_contents1,File_contents2) :-string_concat(Char,String2,String),string_length(Char,1),(Char="\n"->true;Char="\r"),X1 is 1,Y1 is Y+1,string_to_image1(X_lim,Y_lim,X1,Y1,XA1,YA1,S1,C1,String2,File_contents1,File_contents2).
*/cut_cps_if_necessary(Pred_id,Choice_point_trail11,Choice_point_trail2,CP_Vars1,CP_Vars2,Predicate_number,Globals3,CR_flag) :-  % find pred_id groupfindall(Pred_ids,collect_connected_pred_ids(Pred_id,[Pred_id],Pred_ids,Predicate_number,Globals3),Pred_ids1),%(not(Pred_ids1=[[_]])->writeln1(cut_cps_if_necessary(Pred_id,Choice_point_trail11,Choice_point_trail2,CP_Vars1,CP_Vars2,Predicate_number,Globals3));true),flatten(Pred_ids1,Pred_ids1a),sort(Pred_ids1a,Pred_ids2),  %writeln([2,Pred_ids2]), %(Pred_ids2=[117]->%writeln(*****************)% %true %turndebug(on) %;true), % if no cp data for pred_id group, cut cps findall([A,B2,C,D_Level,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],(member([A,B2,C,D_Level,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],Choice_point_trail11), member(C,Pred_ids2)%,not(F_Line_number_a2= -1), %not(F_Line_number_a2=["returns to", _, "pred_id", _]) ),M), ((CR_flag=check-rec->recursive_predicate(Pred_id,Pred_ids2,Globals3);true),(forall(member([A,B2,C,D_Level,E_Predicate_number2,F_Line_number_a2,Pred_or_line,H,I,All_predicate_numbers2],M),  (Pred_or_line="line"->(All_predicate_numbers2=[_Ab,_Bb,_Cb,_Db,_Eb,_Fb,Vars2c],not(Vars2c=[]));Pred_or_line="predicate"->not(All_predicate_numbers2=[]))))->cut_cps(Choice_point_trail11,Choice_point_trail2,CP_Vars1,CP_Vars2,Pred_id,Predicate_number,Globals3);(Choice_point_trail11=Choice_point_trail2,CP_Vars1=CP_Vars2)).
*/distance_greater(X1,Y1,X2,Y2,D) :- D >= sqrt((Y2-Y1)^2 + (X2-X1)^2).
*/distance_greater3d(X1,Y1,Z1,X2,Y2,Z2,D) :- D >= sqrt((Y2-Y1)^2 + (X2-X1)^2 + (Z2-Z1)^2).
*/e4_updatevars([],_,Vars2,Vars2) :- !.e4_updatevars(FirstArgs,Vars1,Vars2,Vars3) :-%writeln1(e4_updatevars(FirstArgs,Vars1,Vars2,Vars3)),%trace,%get_lang_word("v",Dbw_v),FirstArgs=[[Orig,New]|Rest],(expression_not_var(New)->append(Vars2,[[Orig,New]],Vars5);(%trace,replace_vars([Orig],[],[Orig1],[],First_vars1),%member([New,Value],Vars1),(not(expression_not_var(Orig1))->(remember_and_turn_off_debug(Debug),%trace,%find_sys(Sys_name),(interpretpart(match4,Orig1,New,Vars1,Vars4,_)->true;(turn_back_debug(Debug),fail)),%trace,collect_vars(Orig1,[],Orig2),findall([O1,O2],(member([O1,O2],Vars4),member(O1,Orig2)),Vars6),%subtract(Vars4,Vars1,Vars6),%getvalue(Orig,Value,Vars4),turn_back_debug(Debug),replace_first_vars1(Vars6,First_vars1,[],Vars61),append(Vars2,Vars61,Vars5)));Vars2=Vars5)),%append(Vars2,[[Orig,Value]],Vars4))),e4_updatevars(Rest,Vars1,Vars5,Vars3),!.
*/evader(N,N1) :- evader(N,[],N1).
*/find_combos1(Insertions,Deletions,%Changes,Combos) :- %findall1([i,In],member(In,Insertions),In1), %findall1([d,De],member(De,Deletions),De1), %findall1([c,Ch],member(Ch,Changes),Ch1), foldr(append,[Insertions,Deletions%,Changes ],Ops), find_combos2(Ops,[],Combos).
*/find_merge(K1,H,H1,Tests) :-string_concat(K11,"/",K1),merge(K11,H,H1,Tests).
*/find_sl_2(T21,T6) :- find_sl_21(T21,T6),!.
*/gen_alg(L,O,A2):- retractall(p_name(_)), assertz(p_name(1)), retractall(v_name(_)), assertz(v_name(1)), p_name1(PN1), %trace, gen_alg(L,O,[],A2,[],_B2,true,PN1).
*/get_file(Type,File1,S1) :- (Type=file->(exists_file_s(File1)-> (fastp2lp(File1,S1) %p2lpconverter([Type,File1],S1) ->true; open_string_file_s(File1,S10), lines_to_comments(S10,S1))); fastp2lp(File1,S1) %p2lpconverter([Type,File1],S1) ),!.
*/get_token_number(_N1,S1,C1,_N,N2) :-%writeln(get_token_number(N1,S1,N,N2)), %trace, %findall1(*,(member(AAA,N1),)) findall1([SI,N3],member([S1,N3],C1),B), (catch((append(_,[[_S2,N4]],B), get_base_token_number(N4,N)),_,false)->true;N="0"),%)),S2),/*findall1(S1xx,(member(S1x,N1),(number(S1x)->number_string(S1x,S1xx);%S1x=S1xx), get_base_token_number(S1x,S1xx))),S2), (number(S1)->number_string(S1,S1xxx);%S1x=S1xx), (trace,get_base_token_number(S1,S1xxx))), findall1(S2,member(S1xxx,S2),S3), */ length(B,L), %N=N2,!.
*/headache_prevention :- writeln("Do you get headaches? (y/n)?"), read_string(user_input,"\n\r","\n\r",_,S1), (S1="y"-> (writeln("Do you meditate? (y/n)?"), read_string(user_input,"\n\r","\n\r",_,S2), (S2="n"-> writeln("I recommend meditation");true), writeln("Do you use anti-headache meditation? (y/n)?"), read_string(user_input,"\n\r","\n\r",_,S3), (S3="n"-> writeln("I recommend Lucian Green's Headache Prevention App.");true) );true),!.
*/interpretpart(shell_pl,I0,QP0,QV0,P0,OVar0,Vars1,Vars2) :-%trace,% eg [I,QP,QV,P,OVar]=[[1,1],"a","A,A1","B is A+A1,B1 is A1-A1,write([B,B1]).",[v,o]] find_v_sys(V_sys), remember_and_turn_off_debug(Debug), interpretpart(match4,I0,V_sys,Vars1,Vars3,_),  turn_back_debug(Debug), getvalue(V_sys,I1,Vars3), term_to_atom(I1,I),       %getvalue(I0,I,Vars1),       getvalue(QP0,QP,Vars1),       getvalue(QV0,QV,Vars1),       getvalue(P0,P,Vars1),       getvalue(OVar0,OVar,Vars1),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("shell_pl",Dbw_shell_pl1),Dbw_shell_pl1=Dbw_shell_pl,debug_call(Skip,[[Dbw_n,Dbw_shell_pl],[I,QP,QV,P,variable]]),       ((QV="",I1=[])->Mid=    [    QP,",\n\t",    "halt.\n\n","main :- halt(1).\n",QP, " :-","\n\t"];Mid=[    "[",QV,"]=",I,",","\n\t",    QP,"(",QV,"),","\n\t",    "halt.\n\n","main :- halt(1).\n",QP,"(",QV,") :-","\n\t"]),   flatten(["#!/usr/bin/swipl -f -q\n\n",%":-include('",Go_path5,File,"').\n",":- initialization(catch(main, Err, handle_error(Err))).\n\nhandle_error(_Err):-\n  halt(1).\n\n","main :-\n\t",    %"opt_arguments([], _, Args),","\n\t",Mid,P],String1),foldr(string_concat,String1,String),foldr(string_concat,[%"../private2/luciancicd-testing/",Repository1b,"/",Go_path5,"main.pl"],GP),open_s(GP,write,S1),write(S1,String),close(S1),findall([" ",I1],member(I1,I),I2),flatten(I2,I3),foldr(string_concat,I3,I4),foldr(string_concat,["chmod +x ",GP],S31),%,%trace,catch(bash_command(S31,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text41),%writeln1(Text4),fail%abort )), foldr(string_concat,["swipl -f -q ./",GP,%" ",I4],S3),%,%trace,((catch(bash_command(S3,VO), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text4),%writeln1(Text4),fail%abort )),term_to_atom(OVar1,VO))-> (        val1emptyorvalsequal(OVar,OVar1),                         remember_and_turn_off_debug(Debug1),find_sys(Sys_name),        interpretpart(match4,OVar0,[Dbw_v,Sys_name],Vars1,Vars2fa,_),getvalue([Dbw_v,Sys_name],Value3,Vars2fa),interpretpart(match4,OVar1,Value3,[]%Vars1,Vars2,_), turn_back_debug(Debug1),         %putvalue(OVar0,OVar1,Vars1,Vars2),          debug_exit(Skip,[[Dbw_n,Dbw_shell_pl],[I,QP,QV,P,OVar1]]));(debug_fail(Skip,[[Dbw_n,Dbw_shell_pl],[I,QP,QV,P,variable]]),fail)),!.interpretpart(shell_c,I0,P0,OVar0,Vars1,Vars2) :-%trace,% eg [I,QP,QV,P,OVar]=[[1,1],"a","A,A1","B is A+A1,B1 is A1-A1,write([B,B1]).",[v,o]] %find_v_sys(V_sys), %interpretpart(match4,I0,V_sys,Vars1,Vars3,_), getvalue(I0,I1,Vars1), term_to_atom(I1,I), open_s("input.txt",write,S1T),write(S1T,I),close(S1T),        %getvalue(I0,I,Vars1),       %getvalue(QP0,QP,Vars1),       %getvalue(QV0,QV,Vars1),       %trace,       getvalue(P0,P1,Vars1),       %trace,%atomic_list_concat(P1,'\n',P2),%atomic_list_concat(P1,'\\n',P3),%atomic_list_concat(P4,'\"',P3),%atomic_list_concat(P4,'"',P),atom_string(P,P1),open_s("program.txt",write,S1C),write(S1C,P),close(S1C),foldr(string_concat,["cp program.txt program.c"],S32),%,%trace,catch(bash_command(S32,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text42),%writeln1(Text4),fail%abort )),              getvalue(OVar0,OVar,Vars1),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("shell_c",Dbw_shell_c1),Dbw_shell_c1=Dbw_shell_c,debug_call(Skip,[[Dbw_n,Dbw_shell_c],[I,P,variable]]),       foldr(string_concat,["gcc program.c"],S31),%,%trace,catch(bash_command(S31,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text43),%writeln1(Text4),fail%abort )), foldr(string_concat,["./a.out<input.txt"],S3),%,%trace,((catch(bash_command(S3,VO), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text44),%writeln1(Text4),fail%abort )),term_to_atom(OVar1,VO))-> (        val1emptyorvalsequal(OVar,OVar1),        putvalue(OVar0,OVar1,Vars1,Vars2),debug_exit(Skip,[[Dbw_n,Dbw_shell_c],[I,P,OVar1]]));(debug_fail(Skip,[[Dbw_n,Dbw_shell_c],[I,P,variable]]),fail)),!./* bash_command1(Command, Output) :-        process_create(path(bash),                ['-c', Command],                [stdout(pipe(Out))]),        read_string(Out, _, Output),        close(Out).*/interpretpart(command,Command1,Args,Variables,Vars1,Vars2) :- %trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word(Command1,Dbw_command),%trace,findall(Value,(member(Variable,Variables),getvalue(Variable,Value,Vars1)),Values),/*(length(Variables,0)->(Variables=[],       Values=[]);(length(Variables,1)->(Variables=[Variable1],       getvalue(Variable1,Value1,Vars1),Values=[Value1]);(length(Variables,2)->(Variables=[Variable1,Variable2],       getvalues(Variable1,Variable2,Value1,Value2,Vars1),       Values=[Value1,Value2]);(length(Variables,3)->(Variables=[Variable1,Variable2,Variable3],       getvalue(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),    Values=[Value1,Value2,Value3]))))),*/       length(Variables,VL),length(Args,VL),numbers(VL,1,[],VLN),% check modes of argumentsforall(member(VLN1,VLN),(get_item_n(Args,VLN1,Arg),get_item_n(Values,VLN1,Val),(Arg=o->contains_var([Dbw_v,_],Val);not(contains_var([Dbw_v,_],Val))))),findall(Debug_variable,(member(VLN1,VLN), get_item_n(Args,VLN1,Arg),get_item_n(Values,VLN1,Value), (Arg=i->Debug_variable=Value;Debug_variable=variable)), Debug_variables),  length(Command_vars,VL),%=[A,B,C], findall(Command_variable,(member(VLN1,VLN), get_item_n(Args,VLN1,Arg),get_item_n(Values,VLN1,Value), get_item_n(Command_vars,VLN1,Command_vars_val), (Arg=i->Command_variable=Value; Command_variable=Command_vars_val)), Command_variables),           debug_call(Skip,[[Dbw_n,Dbw_command],Debug_variables]),((%is_list(Value1),string_atom(Command1,Command1_atom),%trace,functor(Command2,Command1_atom,VL),(length(Command_variables,0)->Command3=Command2;(arg2(VLN,Command2,Command_variables),Command2=Command3)),Command3,%string_atom(Value2A,Value2A1), % *** LPI only takes strings   %sort(Value1,Value2A),forall(member(VLN1,VLN),(get_item_n(Args,VLN1,Arg),get_item_n(Command_vars,VLN1,Command_vars_n),get_item_n(Values,VLN1,Value),(Arg=o->val1emptyorvalsequal(Value,Command_vars_n);true))),putvalues2(Args,Variables,Command_variables,Vars1,Vars2)        %putvalue(Variable2,Value2A,Vars1,Vars2)        ),%->      debug_exit(Skip,[[Dbw_n,Dbw_command],Command_variables])      ).
*/interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_command]|Variables2],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,(Variables2=[]->Variables=[];Variables2=[Variables]),%trace,member([Command,Args],[ %["phrase_from_file",[i,i]], %["phrase_from_file",[i,i]],  ["term_to_atom",[i,i]], ["term_to_atom",[i,o]], ["term_to_atom",[o,i]], ["open_file_s",[i,o]], ["open_string_file_s",[i,o]], ["split_on_substring117a",[i,i,i,o]], ["string_strings",[i,o]], ["working_directory",[i,i]], ["working_directory",[o,i]], ["directory_files",[o]], ["exists_directory",[i]], ["exists_file",[i]], ["split_string",[i,i,i,o]], ["numbers",[i,i,i,o]], ["string_atom",[i,o]], ["string_atom",[i,i]], ["string_atom",[o,i]], /* ["atom_string",[i,o]], ["atom_string",[i,i]], ["atom_string",[o,i]], */ ["string_codes",[i,o]], ["string_codes",[i,i]], ["string_codes",[o,i]], ["number_string",[i,o]], ["number_string",[i,i]], ["number_string",[o,i]], ["reverse",[i,o]], ["reverse",[i,i]], ["reverse",[o,i]], ["get_time",[o]], ["string_chars",[i,i]], ["string_chars",[i,o]], ["string_chars",[o,i]], ["atom_chars",[i,i]], ["atom_chars",[i,o]], ["atom_chars",[o,i]], ["atom_codes",[i,i]], ["atom_codes",[i,o]], ["atom_codes",[o,i]], ["atom_concat",[i,i,i]], ["atom_concat",[i,o,i]], ["atom_concat",[o,i,i]], ["atom_concat",[o,o,i]], ["atom_concat",[i,i,o]], ["atomic",[i]], ["atom_length",[i,i]], ["atom_length",[i,o]], /* ["sub_atom",[i,i,i,i,i]], ["sub_atom",[i,i,i,i,o]], ["sub_atom",[i,i,i,o,i]], ["sub_atom",[i,i,i,o,o]], ["sub_atom",[i,i,o,i,i]], ["sub_atom",[i,i,o,i,o]], ["sub_atom",[i,i,o,o,o]], ["sub_atom",[i,o,i,i,i]], ["sub_atom",[i,o,i,i,o]], ["sub_atom",[i,o,i,o,i]], ["sub_atom",[i,o,i,o,o]], ["sub_atom",[i,o,o,i,i]], ["sub_atom",[i,o,o,i,o]], ["sub_atom",[i,o,o,o,i]], ["sub_atom",[i,o,o,o,o]], ["sub_string",[i,i,i,i,i]], ["sub_string",[i,i,i,i,o]], ["sub_string",[i,i,i,o,i]], ["sub_string",[i,i,i,o,o]], ["sub_string",[i,i,o,i,i]], ["sub_string",[i,i,o,i,o]], ["sub_string",[i,i,o,o,o]], ["sub_string",[i,o,i,i,i]], ["sub_string",[i,o,i,i,o]], ["sub_string",[i,o,i,o,i]], ["sub_string",[i,o,i,o,o]], ["sub_string",[i,o,o,i,i]], ["sub_string",[i,o,o,i,o]], ["sub_string",[i,o,o,o,i]], ["sub_string",[i,o,o,o,o]],  */ ["char_code",[i,i]], ["char_code",[i,o]], ["char_code",[o,i]], ["number_chars",[i,i]], ["number_chars",[i,o]], ["number_chars",[o,i]], ["number_codes",[i,i]], ["number_codes",[i,o]], ["number_codes",[o,i]], ["close",[i,i]], ["close",[i]], ["stream_property",[i,i]], ["stream_property",[i,o]], ["stream_property",[o,i]], ["stream_property",[o,o]], ["at_end_of_stream",[]], ["at_end_of_stream",[i]], ["set_stream_position",[i,i]], ["compound",[i]], ["copy_term",[i,i]], ["copy_term",[i,o]], ["copy_term",[o,i]], ["copy_term",[o,o]], ["current_prolog_flag",[i,i]], ["current_prolog_flag",[i,o]], ["current_prolog_flag",[o,i]], ["current_prolog_flag",[o,o]], ["current_input",[i]], ["current_input",[o]], ["current_output",[i]], ["current_output",[o]], ["float",[i]], ["get_byte",[i,i]], ["get_byte",[i,o]], ["get_byte",[i]], ["get_byte",[o]], ["peek_byte",[i,i]], ["peek_byte",[i,o]], ["peek_byte",[i]], ["peek_byte",[o]], ["put_byte",[i,o]], ["put_byte",[o,o]], ["put_byte",[i]], ["put_byte",[o]],  ["peek_char",[i,i]], ["peek_char",[i,o]], ["peek_char",[i]], ["peek_char",[o]], ["peek_code",[i,i]], ["peek_code",[i,o]], ["peek_code",[i]], ["peek_code",[o]],  ["get_char",[i]], ["get_char",[o]], ["get_char",[i,i]], ["get_char",[i,o]], ["get_code",[i]], ["get_code",[o]], ["get_code",[i,i]], ["get_code",[i,o]],  ["halt",[]], ["halt",[i]], ["set_prolog_flag",[i,i]], ["integer",[i]], ["set_input",[i]], ["set_output",[i]], ["open",[i,i,o,i]], ["open",[i,i,o]], ["nonvar",[i]], ["sin",[i,i]], ["sin",[i,o]], ["cos",[i,o]], ["cos",[i,i]], ["atan",[i,i]], ["atan",[i,o]], %["exp",[i,i]], %["exp",[i,o]], ["log",[i,i]], ["log",[i,o]], ["sqrt",[i,i]], ["sqrt",[i,o]], ["put_char",[i,i]], ["put_char",[i]], ["put_code",[i,i]], ["put_code",[i]], ["nl",[]], ["nl",[i]],  ["read_term",[i,i,i]], ["read_term",[i,o,i]], ["read_term",[i,i]], ["read_term",[i,o]], ["read",[i,i]], ["read",[i,o]], ["read",[i]], ["read",[o]], %["write_term",[i,i,i]], %["write_term",[i,i]], ["write",[i,i]], ["write",[i]], ["writeq",[i,i]], ["writeq",[i]], %["write_canonical",[i,i]], %["write_canonical",[i]], ["abs",[i,i]], ["abs",[i,o]], ["sign",[i,i]], ["sign",[i,o]], ["floor",[i,i]], ["floor",[i,o]], ["round",[i,i]], ["round",[i,o]] %["ceiling",[i,o]]]),get_lang_word(Command,Dbw_command1),Dbw_command1=Dbw_command,%(Dbw_command=string_chars->trace;true), %trace,        interpretpart(command,Command,Args,Variables,Vars1,Vars2).interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_command]|Variables2],Vars1,Vars2,true,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,(Variables2=[]->Variables=[];Variables2=[Variables]),%trace,member([Command,Args],[ %["phrase_from_file",[i,i]], %["phrase_from_file",[i,i]], /*["numbers",[i,i,i,o]], ["string_atom",[i,o]], ["string_atom",[i,i]], ["string_atom",[o,i]], ["atom_string",[i,o]], ["atom_string",[i,i]], ["atom_string",[o,i]], ["string_codes",[i,o]], ["string_codes",[i,i]], ["string_codes",[o,i]], ["number_string",[i,o]], ["number_string",[i,i]], ["number_string",[o,i]], ["reverse",[i,o]], ["reverse",[i,i]], ["reverse",[o,i]], ["get_time",[o]], ["string_chars",[i,i]], ["string_chars",[i,o]], ["string_chars",[o,i]], ["atom_chars",[i,i]], ["atom_chars",[i,o]], ["atom_chars",[o,i]], ["atom_codes",[i,i]], ["atom_codes",[i,o]], ["atom_codes",[o,i]], ["atom_concat",[i,i,i]], ["atom_concat",[i,o,i]], ["atom_concat",[o,i,i]], ["atom_concat",[o,o,i]], ["atom_concat",[i,i,o]], ["atomic",[i]], ["atom_length",[i,i]], ["atom_length",[i,o]], */ ["sub_atom",[i,i,i,i,i]], ["sub_atom",[i,i,i,i,o]], ["sub_atom",[i,i,i,o,i]], ["sub_atom",[i,i,i,o,o]], ["sub_atom",[i,i,o,i,i]], ["sub_atom",[i,i,o,i,o]], ["sub_atom",[i,i,o,o,o]], ["sub_atom",[i,o,i,i,i]], ["sub_atom",[i,o,i,i,o]], ["sub_atom",[i,o,i,o,i]], ["sub_atom",[i,o,i,o,o]], ["sub_atom",[i,o,o,i,i]], ["sub_atom",[i,o,o,i,o]], ["sub_atom",[i,o,o,o,i]], ["sub_atom",[i,o,o,o,o]], ["sub_string",[i,i,i,i,i]], ["sub_string",[i,i,i,i,o]], ["sub_string",[i,i,i,o,i]], ["sub_string",[i,i,i,o,o]], ["sub_string",[i,i,o,i,i]], ["sub_string",[i,i,o,i,o]], ["sub_string",[i,i,o,o,o]], ["sub_string",[i,o,i,i,i]], ["sub_string",[i,o,i,i,o]], ["sub_string",[i,o,i,o,i]], ["sub_string",[i,o,i,o,o]], ["sub_string",[i,o,o,i,i]], ["sub_string",[i,o,o,i,o]], ["sub_string",[i,o,o,o,i]], ["sub_string",[i,o,o,o,i]], ["number_string",[i,i]], ["number_string",[i,o]], ["number_string",[o,i]], ["get_single_char",[i]], ["get_single_char",[o]] /*, ["atom_string",[i,i]], ["atom_string",[i,o]], ["atom_string",[o,i]], ["char_code",[i,i]], ["char_code",[i,o]], ["char_code",[o,i]], ["number_chars",[i,i]], ["number_chars",[i,o]], ["number_chars",[o,i]], ["number_codes",[i,i]], ["number_codes",[i,o]], ["number_codes",[o,i]], ["close",[i,i]], ["close",[i]], ["stream_property",[i,i]], ["stream_property",[i,o]], ["stream_property",[o,i]], ["stream_property",[o,o]], ["at_end_of_stream",[]], ["at_end_of_stream",[i]], ["set_stream_position",[i,i]], ["compound",[i]], ["copy_term",[i,i]], ["copy_term",[i,o]], ["copy_term",[o,i]], ["copy_term",[o,o]], ["current_prolog_flag",[i,i]], ["current_prolog_flag",[i,o]], ["current_prolog_flag",[o,i]], ["current_prolog_flag",[o,o]], ["current_input",[i]], ["current_input",[o]], ["current_output",[i]], ["current_output",[o]], ["float",[i]], ["get_byte",[i,i]], ["get_byte",[i,o]], ["get_byte",[i]], ["get_byte",[o]], ["peek_byte",[i,i]], ["peek_byte",[i,o]], ["peek_byte",[i]], ["peek_byte",[o]], ["put_byte",[i,o]], ["put_byte",[o,o]], ["put_byte",[i]], ["put_byte",[o]],  ["peek_char",[i,i]], ["peek_char",[i,o]], ["peek_char",[i]], ["peek_char",[o]], ["peek_code",[i,i]], ["peek_code",[i,o]], ["peek_code",[i]], ["peek_code",[o]],  ["get_char",[i]], ["get_char",[o]], ["get_char",[i,i]], ["get_char",[i,o]], ["get_code",[i]], ["get_code",[o]], ["get_code",[i,i]], ["get_code",[i,o]],  ["halt",[]], ["halt",[i]], ["set_prolog_flag",[i,i]], ["integer",[i]], ["set_input",[i]], ["set_output",[i]], ["open",[i,i,o,i]], ["open",[i,i,o]], ["nonvar",[i]], ["sin",[i,i]], ["sin",[i,o]], ["cos",[i,o]], ["cos",[i,i]], ["atan",[i,i]], ["atan",[i,o]], %["exp",[i,i]], %["exp",[i,o]], ["log",[i,i]], ["log",[i,o]], ["sqrt",[i,i]], ["sqrt",[i,o]], ["put_char",[i,i]], ["put_char",[i]], ["put_code",[i,i]], ["put_code",[i]], ["nl",[]], ["nl",[i]],  ["read_term",[i,i,i]], ["read_term",[i,o,i]], ["read_term",[i,i]], ["read_term",[i,o]], ["read",[i,i]], ["read",[i,o]], ["read",[i]], ["read",[o]], %["write_term",[i,i,i]], %["write_term",[i,i]], ["write",[i,i]], ["write",[i]], ["writeq",[i,i]], ["writeq",[i]], %["write_canonical",[i,i]], %["write_canonical",[i]], ["abs",[i,i]], ["abs",[i,o]], ["sign",[i,i]], ["sign",[i,o]], ["floor",[i,i]], ["floor",[i,o]], ["round",[i,i]], ["round",[i,o]]*/ %["ceiling",[i,o]]]),get_lang_word(Command,Dbw_command1),Dbw_command1=Dbw_command,%(Dbw_command=string_chars->trace;true), %trace,        interpretpart(command,Command,Args,Variables,Vars1,Vars2).
*/line(A) --> %%spaces1(_), name1(Word11), %% name(A,B,C){%trace,Word11=not},"(",newlines1(_),lines(Lines),")",{A=[[n,Word11],Lines]},!.line(A) --> %%spaces1(_), name1(Word11),newlines1(_), %% name(A,B,C).
*/link(1,2).
*/mind_read(Item,[Item]) :- !.
*/no_vars(A16) :- foldr(string_concat,["a:-",A16,"."],C111), fastp2lp2(C111,C112), C112=[[[n, a], ":-", [[[n, _],V]]]], not(member([v,_],V)),!.% (c(1,A),A=5)% -> (c(1,A),not(var(A)),A=5)check_non_var0(C1,C2) :- dynamic(cnvn/1), retractall(cnvn(_)), assertz(cnvn(1)),  dynamic(cnv/1), retractall(cnv(_)), assertz(cnv([])), %term_to_atom(C1,C110), foldr(string_concat,["a:-",C1,"."],C111), fastp2lp2(C111,C112), C112=[[[n, a], ":-", C11]],  % [[[n, c], [1, [v, '_449476'], [v, c]]], [[n, =], [[v, '_449476'], 1]], [[n, =], [[v, c], 2]]] %trace, %square_to_round(C11,C1), C11=[C12|C13],  (C13=[]->lp2p1_a(C12,C2); (  %functor(C12,Name,Arity), %numbers(Arity,1,[],Ns), (C12=[Name]-> C23=C12; ( C12=[Name, Args], %length(Args,Arity),  %functor(C1A,Name,Arity), %* needs to get from A not _ findall1(CNV41,(%member(N,Ns),arg(N,C12,Arg),%copy_term(Arg,Arg1), member(Arg,Args), (Arg=[v,_]-> (get_cnv(CNV4), %arg(N,C1A,CNV4), cnv(CNV6), retractall(cnv(_)), %delete(CNV6,[Arg,CNV4],CNV61), append(CNV6,[[Arg,CNV4]],CNV7), assertz(cnv(CNV7)), CNV41=[v,CNV4]); CNV41=Arg)%arg(N,C1A,Arg)) %cnv(CNV1), ),CC1), %foldr(append,CC1,CC2), %append(CC3,[_],CC2), %foldr(append,[[Name,"("],CC3,["),"]],CC31), %foldr(string_concat,CC31,CC4), CC4=[Name, CC1], %dynamic(cnv/1), %retractall(cnv(_)), %assertz(cnv([])), cnv(CNV9), %trace,  /*findall1([[n,not],[[[n,var],[[v,CNV8]]]]],(%member(N,Ns),arg(N,C12,Arg),%copy_term(Arg,Arg1), %var(Arg),%cnv(CNV1), member([Arg,CNV8],CNV9), %trace, not((%not(var(Arg)), % [[n, =], [[v, '_449476'], 1]] member([[n, =],[Arg,B2]],C13),B2=[v,_] %append(CNV1,[not(var(Arg))],CNV2)%retractall(cnv(_)), %assertz(cnv(CNV2)) ))),CC5), %foldr(append,Ns1,CC5), %foldr(string_concat,Ns11,CC5),*/CC5=[], %cnv(CNV3), findall1([[n, =],[[v,CNV10],Num1]],(%member(Arg,C13),%N,Ns),arg(N,C13,CNV11=Num),%  (member([[n, =],[CNV11,Num]],C13)->true; member([[n, equals4],[CNV11,Num]],C13)),%copy_term(Arg,Arg1), %var(Arg),%cnv(CNV1), member([CNV11,CNV10],CNV9),   ((Num=[v,A5], atom_concat('_',_,A5))->Num1=[v,'_'];Num1=Num) %append(CNV1,[not(var(Arg))],CNV2)%retractall(cnv(_)), %assertz(cnv(CNV2)) ),CC7), %trace, %foldr(append,Ns2,CC7), %foldr(string_concat,Ns21,CC6), %string_concat(CC7,",",CC6), C21=[[CC4],CC5,CC7], foldr(append,C21,C23) ), lp2p1([[[n, a], ":-", C23]],C), string_concat("a:-",B1,C), string_concat(C2,".\n",B1) %foldr(string_concat,["(",C22,")"],C2) %square_to_round([C22],C2) ))), %square_to_round(C111,C2), !.  /*get_cnv(CNV42) :- cnvn(CNV4), CNV41 is CNV4+96, char_code(CNV42,CNV41), retractall(cnvn(_)), CNV5 is CNV4+1, assertz(cnvn(CNV5)).
*/perpetual_motion(N,N1) :- retractall(n1(_)), assertz(n1(0)),catch(call_with_time_limit(N,(%N2 is N1+1,loop)),_,true), n1(N1).
*/place2(X,Y,Z,Coords1,Grid1,Grid2) :- %reset_min(X,Y,Z,Coords1,Coords2,_Max_X,_Max_Y,_Max_Z), %trace, Coords1=Coords12,  % add X Y Z to shape findall([XS1,YS1,ZS1],(member([XS,YS,ZS],Coords12), XS1 is XS+X, YS1 is YS+Y, ZS1 is ZS+Z),Coords2),  % check that no shape points exist already  intersection(Coords2,Grid1,[]),  % append them %forall((member([C1,C2,C3,_],Grid1),member([D1,D2,D3],Coords2)),(not(C1=D1),not(C2=D2),not(C3=D3))), %findall([X1,Y1,Z1,Cell2],(member([X1,Y1,Z1,Cell1],Grid1), %(member([X1,Y1,Z1],Coords2)-> %Cell1=[]->fail;true);Cell1=Cell2)),Grid3), append(Grid1,Coords2,Grid2).
*/pp0_1(A,B):- ((%trace, %false% pp0_2(A,B)) ->true; (%trace, %delete(A,[],A1), lines_to_comments(A,B))). %lines_to_comments([],[]) :- !.
*/process_directory_merge(K,%G, Top_level,%Tests1, Tests61) :-working_directory1(A0,A0),%G=K,%/*findall1(K4,(member(K1,K), working_directory1(_,A0),%exists_directory(K1),directory_files(K1,F),delete_invisibles_etc(F,G),%*/findall1(Tests3,(member(H,G),not(string_concat("dot",_,H)),%not(member(H,Omit)),foldr(string_concat,[K1,H],H1),% if a file then find modification date% if a folder then continue finding files in folder(exists_directory(H1)->(string_concat(H1,"/",H2),process_directory_merge([H2],%[H], false,%[],%Omit % only omit top level dirs xx %Tests1, Tests3) %foldr(append,Tests31,Tests3) );(true%string_concat(_,".pl",H)->(%trace,%trace,find_merge(K1,H,H1,Tests3)%p2lpconverter([file,H1],LP),%time_file(H1,Tests4),%trace,%append(Tests1,[[H1,Tests4]],Tests3)))%Tests3=[[H1,Tests]]);(Tests3=[])))),Tests5),%trace,foldr(append,Tests5,Tests51),%Tests5=Tests51,(%true%Top_level=true%not(Omit=[]) % at top level->( % folder/file, plfindall1([T1,',\n'],(member([T,TT,TTT,TTTT],Tests51),term_to_atom(TTT,TTT1),term_to_atom(TTTT,TTTT1),foldr(atom_concat,["[","\"",T,"\"",",","\"",TT,"\"",",",TTT1,",",TTTT1,"]"],T1)%term_to_atom(T,T1)),T2),%trace,flatten(T2,TT2),foldr(atom_concat,TT2,T21),(T2=[]->T6=[];(find_sl_2(T21,T6)%string_concat(T4,T5,T21),%trace,%string_length(T5,2),%foldr(string_concat,["[","\n",T4,"\n","]"],T6))),%term_to_atom(Tests51,Tests52),%trace,string_concat(K3,"/",K1),foldr(string_concat,["../../Github_lc/tests_",K3,".txt"],K2),%trace,K4=[K2,T6]%open_s(K2,write,S),%write(S,Tests52),close(S)%writeln(["*",K2,%Tests52]%);(%trace,K4=Tests51))),Tests6),%trace,(%not(Omit=[])->Top_level=true->Tests6=Tests61;(%trace,foldr(append,Tests6,Tests61))),!.
*/product_name(N) :- random1(10,L), numbers(L,1,[],Ls), findall(N1,(member(_,Ls),random1(26,N2),N3 is N2+64,string_codes(N1,[N3])),N4), foldr(string_concat,N4,N).
*/qa1 :-findall(_,(qa(Q,A),writeln(Q),writeln("(y/n)?"),read_string(user_input,"\n\r","\n\r",_,S),(S="y"->writeln(A);true)),_),!.% ["Medicine","MEDICINE by Lucian Green Protector from Headache in Meditation Currant Bun 4 of 4.txt",0,algorithms,"Protector from Headache in Meditation Currant Bun 4 of 4"]/*?- headache_prevention|    .
*/qa_tt([*,meditation_As],_).qa_tt("Have you meditated before time travel?","You may now time travel.").
*/question(Rest1,Question,Question_table) :-%reverse(Rest1,Rest2),findall_until_fail(A,member(A,Rest1),(trim_spaces_before(A,A1),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string1b(A1,SepandPad,SepandPad,B1),not(((search(B1,["prepare","calculate"]))->true;(append([C],_,B1),string_strings("abcdefghijklmnopqrstuvwxyz",Alpha),member(C,Alpha))))),Question_table),(Question_table=[]->(writeln("Can't find question."),abort);true),%find_until(Rest1,D11)%trace,%reverse(D1,Question_table),%subtract(Rest1,D1,D2),%trace,%(D31=[D3|_]->%find_until(Rest1,D3,Question_table);Question_table=D1),append(Question_table,Question,Rest1),!.
*/replace_new(A1,Find,Replace,F) :-string_length(Replace,Replace_l),string_concat("%",A1,A2),string_concat(A2,"%",A),split_string(A,Find,Find,B),findall([C,Replace],(member(C,B)),D),maplist(append,[D],[E]),concat_list(E,F1),string_concat(F2,G,F1),string_length(G,Replace_l),string_concat("%",F3,F2),string_concat(F,"%",F3),!.
*/replace_vars011(Variable2,_Vars1,_Vars2a,Vars2b) :-get_lang_word("sys",Dbw_sys),findall([[A,C],C1],(member([[A,C],C1],Variable2),string_concat(Dbw_sys,_N1,C)),Vars2c),subtract(Variable2,Vars2c,Vars2b),!.
*/retract_all(A) :- retractall(A).
*/revoke(Items,R) :- ((member(land,Items)->true; (member(contract,Items)->true; (member(money,Items))))->R=true;R=false). % 36% COMPUTATIONAL ENGLISH by Lucian Green Drawing connections 3 of 4.txt% 21.   I prepared to equate Plato's soul (including the mind and body) with the soul created by 50 As (16 250 breasoning As) in Lucianic Computational English.  I did this by writing 16 250 breasoning areas of study influenced by Plato's forms about Computational English.  First, I equated the Platonic body with Lucianic Computational English bodily developed things.  Second, I equated the Platonic mind with the Lucianic Computational English mental ontological states.  Third, I equated the Platonic soul with the Lucianic Computational English continual soulful aimingness (sic).  In this way, I prepared to equate Plato's soul (including the mind and body) with the soul created by 50 As (16 250 breasoning As) in Lucianic Computational English by writing 16 250 breasoning areas of study influenced by Plato's forms about Computational English.
*/rhetoric_merge_trees(T1,T2,T3) :- T1=[Text1,Branches1], atom(Text1), T2=[Text2,Branches2], atom(Text2), merge_branches(Branches1,Branches2,Branches3), T3=[Text1-Text2,Branches3]. merge_branches(Branches1,Branches2,Branches3) :- Branches1=[[Text1a,Branches1a],[Text1b,Branches1b]], atom(Text1a),atom(Text1b), Branches2=[[Text2a,Branches2a],[Text2b,Branches2b]], atom(Text2a),atom(Text2b), merge_branches(Branches1a,Branches2a,Branches3a), merge_branches(Branches1b,Branches2b,Branches3b), Branches3=[[Text1a-Text2a|Branches3a],[Text1b-Text2b|Branches3b]].
*/split1(%[]%List,L16,%N,N, A,A) :- L2 is L16*2,length(List,L3),L3=<L2, !.
*/ss(G,Xs2,Ys2,Zs2) :- length(G,Z), numbers(Z,1,[],ZZ), member(H,G), length(H,Y), numbers(Y,1,[],YY), member(J,H), length(J,X), numbers(X,1,[],XX),!, findall(Xs%[Xs1,Xs] ,(member(Z2,ZZ),member(Y2,YY),findall(N,(member(X2,XX),get_particle_image([X2,Y2,Z2,N],G)),Xs1),%Xs1=Xs% sum(Xs1,Xs) ),Xs2),  findall(Ys%[Ys1,Ys]  ,(member(Z2,ZZ),member(X2,XX),findall(N,(member(Y2,YY),get_particle_image([X2,Y2,Z2,N],G)),Ys1),%Ys1=Ys%  sum(Ys1,Ys)  ),Ys2),findall(Zs%[Zs1,Zs],(member(X2,XX),member(Y2,YY),findall(N,(member(Z2,ZZ),get_particle_image([X2,Y2,Z2,N],G)),Zs1),%Zs1=Zs%sum(Zs1,Zs)),Zs2).
*/ssi_interpretpart(member2,Dbw_member2,Variable1,Variable2,Vars1,Vars2,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("member2",Dbw_member21),Dbw_member21=Dbw_member2,get_lang_word("v",Dbw_v),        getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),debug_call(Skip,[[Dbw_n,Dbw_member2],[Value2,Value1]]),((%Value2=empty,matrix_member(Matrix),findall(X,(member(Y,[Value1,Value2]),(contains_var([Dbw_v,_],Y)->X=o;X=i)),Z),foldr(atom_concat,Z,'',W),(member(W,Matrix)->true;(writeln([incorrect,member2,modes,W]),abort)),(W=ii->(member(Value2,Value1)->    (Vars1=Vars2,      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value2,Value1]]));    (Vars1=Vars2,     debug_fail(Skip,[[Dbw_n,Dbw_member2],[Value2,Value1]])));(      (W=io->((findall([Vars2b,[Value1,Value2a],Value2a],(member(Value2a,Value1),putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,Value2a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_member2],[Value1,Value2],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value2a,Value1]])));                      (W=oi->(%trace,     command_n_sols(N),findall([Vars2b,[Value1a,Value2],Value1a],(%replace_in_term([Value2,],_%'$VAR'(_)%        ,empty,Value1A1),        findnsols(N,Value1A1,(member(Value2,Value1A),                %Value1A=[Value3A2|Value3A3],        %ValueIA1=[Value3A2,"|",Value3A3],                        replace_in_term(Value1A,_%'$VAR'(_)        ,empty2,Value1A2),                convert_to_lp_pipe(Value1A2,Value1A3),        find_v_sys(V_sys),                replace_in_term(Value1A3,empty2%'$VAR'(_)        ,V_sys,Value1A1)                )        ,ValueA),!,                        %val1emptyorvalsequal(Value3,Value3A),        %trace,        %Vars1=Vars2,        member(Value1a,ValueA),        putvalue_equals4(Variable1,Value1a,Vars1,Vars2b)),Vars2a),        %trace,        Vars2a=[[Vars2,_,Value1a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_],Vars2d),Vars2c1),Vars2c=[[Dbw_n,Dbw_member2],[Value1,Value2],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value2,Value1a]]));            (W=oo->(%trace,command_n_sols(N),findall([Vars2b,[Value1,Value2a],%Value1a,Value2a],(findnsols(N,%[Value1A2,Value2A2%],(member(_Value1A,Value2A),        %replace_in_term(Value1A,_%'$VAR'(_)        %,empty,Value1A1),        replace_in_term(Value2A,_%'$VAR'(_)        ,empty2,Value2A1),                %convert_to_lp_pipe(Value1A1,Value1A2),        convert_to_lp_pipe(Value2A1,Value2A3),                find_v_sys(V_sys),        replace_in_term(Value2A3,empty2%'$VAR'(_)        ,V_sys,Value2A2)                        )        ,ValueA),!,        %val1emptyorvalsequal(Value3,Value3A),        %trace,        %Vars1=Vars2,        member(%[Value1a,        Value2a%]        ,ValueA),        %putvalue_equals4(Variable1,Value1a,Vars1,Vars3),%)->        putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)),Vars2a),Vars2a=[[Vars2,_,%Value1a,Value2a]|Vars2d],findall([Vars2e,Vals2g],member([Vars2e,Vals2g,%_,_],Vars2d),Vars2c1),%trace,Vars2c=[[Dbw_n,Dbw_member2],[Value1,Value2a],_,_,%,%Value2a_,_,%[Value1,Value2a]Vars2c1],      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value2a,Value1]]))))))))      ->true;(%writeln1(fail-ssi_interpretpart(member2,Variable1,Variable2,Vars1,Vars2,Vars2c)),      fail)).
*/ssi_interpretpart(member2,Dbw_member2,_Variable1,_Variable2,_Vars1,Vars2,_Vars2c,AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("member2",Dbw_member21),Dbw_member21=Dbw_member2,%trace,AC=[[Dbw_n,Dbw_member2],Value1_Value2,Value1a_Value2a,Vars2|_],%writeln1(AC),%writeln1(AC),    %getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),    Value1_Value2=[Value1_x,Value2_x],debug_call(Skip,[[Dbw_n,Dbw_member2],[Value2_x,Value1_x]]), %((%Value2=empty,%((findall([Vars2b,Value2a],(member(Value2a,Value1),%putvalue_equals4(Variable2,Value2a,Vars1,Vars2b)%),Vars2a),Vars2a=[[Vars2,Value2a]|Vars2d],%findall(Vars2e,member([Vars2e,_],Vars2d),Vars2c)%))),Value1a_Value2a=[Value1a_x,Value2a_x],      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value2a_x,Value1a_x]])%)      .
*/succ1(A,B) :-clean_input(A,A0),%clean_input(B,B0),% Month wo sepandpad or like search_for_n_words_in_common, A,B, year% january $, Product Tiger, AB , project f g((find_first_number(A0,N1),%find_first_number(B0,N2),B is N1+1)->true;((%clean_input(A,A0),%clean_input(B,B0),(months(Months1),findall(X2,(member(X1,Months1),downcase_atom(X1,X),%trace,atom_string(X,X2)),Months),next_item(A0,B0,Months),upper_first(B0,B))->true;((string_concat(_,A3,A),string_length(A3,1),%string_length(B0,1),string_codes(A3,[A3C]),B3C is A3C+1,string_codes(B,[B3C])))))),!.
*/succ1(A,B) :-clean_input(A,A0),%clean_input(B,B0),% Month wo sepandpad or like search_for_n_words_in_common, A,B, year% january $, Product Tiger, AB , project f g((find_first_number(A0,N1),%find_first_number(B0,N2),B is N1+1)->true;((%clean_input(A,A0),%clean_input(B,B0),(months(Months1),findall(X2,(member(X1,Months1),downcase_atom(X1,X),%trace,atom_string(X,X2)),Months),next_item(A0,B0,Months),upper_first(B0,B))->true;((string_concat(_,A3,A),string_length(A3,1),%string_length(B0,1),string_codes(A3,[A3C]),B3C is A3C+1,string_codes(B,[B3C])))))),!.upper_first(A,B) :-string_concat(C,E,A),string_length(C,1),upcase_atom(C,D),string_concat(D,E,B),!.% next_item(a,N,[c,a,b,d]).
*/test(215,[[n,findall],[[[v,a],[v,b]],[[n,append],[[v,a],[v,b],[1,2,3]]],[v,c]]],[],[[[[v,c],[[[],[1,2,3]],[[1],[2,3]],[[1,2],[3]],[[1,2,3],[]]]]]])./*% cut deletes cp data back to and including pred id calltest(216,[[n,count],[1,[v,n]]],[        [[n,count],[1,[v,a]],":-",[[[n,member],[[2,3],[v,a]]],[[n,cut]],[[n,fail]]]],        [[n,count],[1,3],":-",[[[n,cut]]]]        ] ,[[[[v,n], 2]]]).*/test(216,%a(% x[[n,apply_all_to_all],[["m","vine"],[v,inventory4]]],%[[n,traverse],[2,8]], %2,8 or 2,6%[[n,apply_all_to_all],[["k","c","m","vine"],[v,inventory4]]],%[[n,traverse],[3,9,empty,empty,empty,empty]],[[[n,rainforest],[[[1,9,["*"]],[2,9,["*"]],[3,9,["*"]],[4,9,["*"]],[5,9,["*"]],[6,9,["*"]],[7,9,["*"]],[1,8,["*"]],[2,8,["k"]],[3,8,["c"]],[4,8,["vine"]],[5,8,[]],[6,8,[]],[7,8,["*"]],[1,7,["*"]],[2,7,["*"]],[3,7,["*"]],[4,7,["*"]],[5,7,["*"]],[6,7,["*"]],[7,7,["*"]]]]],[[n,traverse],[[v,x],[v,y]],":-",[[[n,"->"],[[[n,traverse],[[v,x],[v,y],[],[v,c],[],[v,a],"no",[v,b]]],[[[n,true]]],[[[n,false]]]]]%,%[[n,cut]]]],[[n,traverse],[[v,'_x'],[v,'_y'],[v,explored],[v,explored],[v,inventory],[v,inventory],[v,e],[v,e]],":-",[[[n,"->"],[[[n,equals4],[[v,e],"e"]],[[n,true]],[[n,fail]]]]%,%[[n,cut]]]],[[n,traverse],[[v,x],[v,y],[v,explored1],[v,explored2],[v,inventory1],[v,inventory2],[v,e1],[v,e2]],":-",[[[n,rainforest],[[v,map]]],[[n,member],[[[v,x],[v,y],[v,cell]],[v,map]]],[[n,"->"],[[[n,"->"],[[[n,equals4],[[v,cell],["*"]]],[[[n,true]]],[[[n,member],[[[v,x],[v,y]],[v,explored1]]]]]],[[[[n,equals4],[[v,explored1],[v,explored2]]],[[n,equals4],[[v,inventory1],[v,inventory2]]],[[n,=],[[v,e2],[v,e1]]]]],[[[[n,writeln],[[[v,x],[v,y]]]],[[n,"->"],[[[n,equals4],[[v,cell],[]]],[[[n,equals4],[[v,inventory4a],[v,inventory1]]]],[[[[n,equals4],[[v,cell],[[v,item]]]],[[n,append],[[v,inventory1],[[v,item]],[v,inventory3]]],[[n,apply_all_to_all],[[v,inventory3],[v,inventory4]]],[[n,equals4],[[v,inventory4a],[v,inventory4]]]]]]],[[n,writeln],[[v,inventory4a]]],[[n,"->"],[[[n,member],["e",[v,inventory4a]]],[[[[n,writeln],["Game Over"]],[[n,equals4],[[v,explored1],[v,explored2]]],[[n,equals4],[[v,inventory2],[v,inventory4a]]],[[n,=],[[v,e2],"e"]]%,%,[[n,cut]]%,[[n,trace]]]],[[[[n,append],[[v,explored1],[[[v,x],[v,y]]],[v,explored3]]],[[n,-],[[v,x],1,[v,xm1]]],[[n,-],[[v,y],1,[v,ym1]]],[[n,+],[[v,x],1,[v,xp1]]],[[n,+],[[v,y],1,[v,yp1]]],[[n,traverse],[[v,xm1],[v,y],[v,explored3],[v,explored4],[v,inventory4a],[v,inventory5],[v,e1],[v,e3]]],[[n,traverse],[[v,x],[v,ym1],[v,explored4],[v,explored5],[v,inventory5],[v,inventory6],[v,e3],[v,e4]]],[[n,traverse],[[v,xp1],[v,y],[v,explored5],[v,explored6],[v,inventory6],[v,inventory7],[v,e4],[v,e5]]],[[n,traverse],[[v,x],[v,yp1],[v,explored6],[v,explored2],[v,inventory7],[v,inventory2],[v,e5],[v,e2]]]]]]]]]]]]],[[n,apply_all_to_all],[[v,inventory1],[v,inventory2]],":-",[[[n,findall],[[v,item3],[[[n,member],[[v,item1],[v,inventory1]]],[[n,member],[[v,item2],[v,inventory1]]],[[n,not],[[[[n,equals4],[[v,item1],[v,item2]]]]]],[[n,apply],[[v,item1],[v,item2],[v,item3]]],[[n,not],[[[[n,member],[[v,item3],[v,inventory1]]]]]]],[v,addeditems]]],[[n,"->"],[[[n,equals4],[[v,addeditems],[]]],[[[n,equals4],[[v,inventory1],[v,inventory2]]]],[[[[n,append],[[v,inventory1],[v,addeditems],[v,inventory3]]],[[n,apply_all_to_all],[[v,inventory3],[v,inventory2]]]]]]]]],[[n,apply],["k","c","m"]],[[n,apply],["m","vine","e"]]],[[]]%[[[[v,inventory4],["k","c","m","vine","e"]]]]).
*/test(247,[[n,test2],[[v,a]]],[[[n,test2],[[v,a]],":-",[[[n,shell_c],["a","#include<stdio.h>\n#include<stdlib.h>\n\nint main(void)\n{\n   char str1[20];\n\n   scanf(\"%19s\", str1);\n   \n   printf(\"%s\\n\", str1);\n return 0;\n}",[v,a]]]]]],[[[[v,a],"a"]]]).
*/test_spec_to_algorithm :-/*retractall(num_s2a(_)),assertz(num_s2a(1)),retractall(vars_s2a(_)),assertz(vars_s2a([])),retractall(vars_base_s2a(_)),assertz(vars_base_s2a('A')),*/(catch(algs(Algs),_,false)->findall(_,(member(Alg,Algs),retractall(algs(Alg))),_);true),retractall(algs(_)),assertz(algs([])),s2a_tests(Tests),findall([N,R],(member([N,Predicate_name,S,character_breakdown_mode=CBM,Alg2],Tests),((%retractall(test_n(_)),%assertz(test_n(N)),string_concat(Predicate_name,N,Predicate_name1),%catch(call_with_time_limit(10,(spec_to_algorithm(Predicate_name1,S,CBM,Alg1))%)%,    %time_limit_exceeded,    %fail)%,writeln1(S)%,writeln1(Alg1)%,trace,string_concat(Predicate_name,Rest,Alg2),string_concat(Predicate_name1,Rest,Alg21),Alg21=Alg1)->R=success;R=fail), writeln([R,N,spec_to_algorithm,test]), nl),R1), findall(N,member([N,success],R1),R_success), writeln("Successful Tests:"), writeln(R_success), findall(N,member([N,fail],R1),R_fail), writeln("Failed Tests:"), writeln(R_fail),!.
*/test_types_cases(46,[[n,spoon_feed],[1]],[[[n,spoon_feed],[[t,number]]]],        [[[n,spoon_feed],[input]]],[        [[n,spoon_feed],[5]],        [[n,spoon_feed],[[v,n1]],":-",        [       %[[n,trace2]],        [[n,+],[[v,n1],1,[v,n2]]],        [[n,spoon_feed],[[v,n2]]]]]],[[]]).
*/tests_pred2(Tests,AT3331ca,Tests0) :- findall1(X,(member(X1,AT3331ca),process_subtract([_,X1],[_,X])),AT3331c), %writeln2(["Contains predicates: "]), retractall(tests_preds3(_)), assertz(tests_preds3([])),findall1([Go_path1,File,Command1],(member([N|VE],AT3331c), N=[_,N1], ((VE=[V]->true;(VE=[V|_],not(V=":-")))->length(V,Arity);Arity=0), member([Go_path1,File,Command1],Tests), %trace, (not(Command)=Command1;Command=Command1), square_to_round(List,Command), functor(Item,N1,Arity), (not(N1=comment)-> (tests_preds3(TP), append(TP,[[N1,Arity]],TP1), retractall(tests_preds3(_)), assertz(tests_preds3(TP1))) ;true), %((Item=[Item1]->Item2=[Item1|_];Item2=Item),writeln([*,member(Item2,List)]), member(Item,List)),Tests0), tests_preds3(TP2), sort(TP2,TP3), %trace, %(TP3=[]->fail;true), writeln2(["Contains predicates: ",TP3]),%writeln2(""), !.
*/time_proportion(H1,M1,S1,H2,M2,S2,HT,MT,ST,Proportion) :-date_time_stamp(date(2023,1,1,H1,M1,S1,_,_,_),TS1),date_time_stamp(date(2023,1,1,H2,M2,S2,_,_,_),TS2),date_time_stamp(date(2023,1,1,HT,MT,ST,_,_,_),TST),Proportion is (TS2-TS1)/(TST-TS1).
*/unenroll(First,Second,Subject,Enrollments1,Enrollments2) :-member([Subject,Enrollments3],Enrollments1),delete(Enrollments3,[First,Second],Enrollments4),delete(Enrollments1,[Subject,Enrollments3],Enrollments5),append(Enrollments5,[[Subject,Enrollments4]],Enrollments2).
*/varnames(L3) --> %{trace},"[",%newlines1(N1),varnames0(L1),%newlines1(_),"]",%newlines1(N2),",",%newlines1(N3),varnames(L2),{foldr(append,[[L1],L2],L3)%foldr(append,[[L4]],L3)},%{append([L1],L2,L3)},!. % {maplist(append,[[[[L1],L2]]],[[L3]])},!. varnames(L3) --> %{trace},"[",newlines1(_),varnames0(L1),newlines1(_),"]",newlines1(_),"|",varnames(L2),newlines1(_),{maplist(append,[[[[L1],"|",L2]]],[L3])},!. varnames(L1) --> %{trace},"[",newlines1(_),varnames0(L2),newlines1(_),"]",newlines1(_),{L1 = [L2]},!. /*varnames(L1) --> %{trace},%"[","]",",","[","]",varnames0(L0),newlines1(_),spaces1(_),varnames0(L2),{append(L0,L2,L1)},!. */varnames(L3) --> %{trace},%"[",newlines1(_),varnames0(L3),newlines1(_),%"]",%",",%newlines1(_),spaces1(_),varnames(L2),%{append(L1,L2,L3)},!. varnames(L1) --> %{trace},"[",newlines1(_),"]",newlines1(_),",",newlines1(_),varnames(L2),{append([[]],L2,L1)},!. varnames(L1) --> %{trace},"[",newlines1(_),"]",newlines1(_),"|",newlines1(_),varnames(L2),{maplist(append,[[[[[]],"|",L2]]],[L1])},!. varnames(L1) --> %{trace},"[",newlines1(_),"]", newlines1(_),{L1 = []},!. varnames(L1) --> %{trace},varnames0(L1), !. varnames0(L1) --> varname1(L2),%{trace},lookahead1,%{notrace},{L1=[L2]},!.
*/varnames01(L1) --> varname1(L2),{L1=L2},!./*varnames01(L1) --> %{trace},"[",%newlines1(N1),varname1(L2),%,newlines1(_),"]",%newlines1(N2), {foldr(append,[[L2]],L1)},!.
*/verb(book,intelligent,read,studiously,library,table,n,[30,minutes],[40,minutes]).
*/        /*ssi_interpretpart(grammar_part,Variables1,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("grammar_part",Dbw_grammar_part),Variables1=[Terminal,Phrase1,Phrase2], %% terminal can be v or "a"        %%terminal(Terminal),        getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[Flag1,Flag2,_Flag3]), %% prolog vars, list of vars, [v]=[prolog var]        %%delete(Value1,Value2,Value3A),    ((    (Terminal=[_Value]->TerminalValue2=[TerminalValue1];TerminalValue2=TerminalValue1),((string(Phrase1Value1)->Phrase1Value1=Phrase1Value11;(number(Phrase1Value1)->number_string(Phrase1Value1,Phrase1Value11);Phrase1Value1=Phrase1Value11)),(Terminal=""->TerminalValue2="";true),       (((var(TerminalValue2)->(string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11)),string_length(TerminalValue2,1));string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;    string_concat(TerminalValue2,Phrase2Value1,Phrase1Value11))->true;            ((Phrase1Value1=[_ItemA|_ItemsA]),(Terminal=[]->(TerminalValue2=[],((var(TerminalValue2)->length(TerminalValue2,1);true),(append(TerminalValue2,Phrase2Value1,Phrase1Value1))))->true;(append(TerminalValue2,Phrase2Value1,Phrase1Value1)->true)))),        putvalue(Terminal,TerminalValue2,Vars1,Vars3),        putvalue(Phrase2,Phrase2Value1,Vars3,Vars4),        putvalue(Phrase1,Phrase1Value1,Vars4,Vars2),        (Flag1=true->TerminalValue3=variable1;TerminalValue3=TerminalValue1),        (Flag2=true->Phrase1Value3=variable2;Phrase1Value3=Phrase1Value1))->        (debug_call(Skip,[[Dbw_n,grammar_part],[TerminalValue3,Phrase1Value3,Phrase2]]),        debug_exit(Skip,[[Dbw_n,grammar_part],[TerminalValue1,Phrase1Value1,Phrase2Value1]]));% CAW requires input,input,output with "a","ab",[v,a] where [v,a]="b"        (debug_call(Skip,[[Dbw_n,grammar_part],[Terminal,Phrase1,Phrase2]]),        (debug_fail(Skip,[[Dbw_n,grammar_part],[Terminal,Phrase1,Phrase2]])))),!.
*/ /*not_contains_loop2a(Ordered_pred_nums1,Ordered_pred_nums2,P1,P23,First) :- (Ordered_pred_nums2=[loop,Ordered_pred_nums1]->P23=[]; (Ordered_pred_nums2=[[loop,Ordered_pred_nums1]|_]->fail; (Ordered_pred_nums2=[]->true;%P1=P2; %((Ordered_pred_nums2=[A|_],number(A))->P2=A;%P1=P2;%append(P1,[A],P2); ((Ordered_pred_nums2=[Ordered_pred_nums21]->true; Ordered_pred_nums2=Ordered_pred_nums21), Ordered_pred_nums21=[_Ordered_pred_nums3|Ordered_pred_nums4], findall1(P21,(member(Ordered_pred_nums41,Ordered_pred_nums4), (Ordered_pred_nums41=[loop,_]->fail;((Ordered_pred_nums41=A,number(A),First=false)->P21=A; %(number(Ordered_pred_nums41)->Ordered_pred_nums43=[Ordered_pred_nums41];Ordered_pred_nums43=[]), %(append(Ordered_pred_nums41 %,[Ordered_pred_nums3] %,P3), %delete(Ordered_pred_nums4,Ordered_pred_nums41,Ordered_pred_nums412), ((get_n_item(Ordered_pred_nums4,Ordered_pred_nums41,1)->First=true;First=false), not_contains_loop(Ordered_pred_nums1,[Ordered_pred_nums41],[], P21,First))))),P22), foldr(append,[P1,P22],P2), flatten(P2,P23))))).
*/% X: % this version: don't find associated vars and call with them % just assume each level has the same vars % x find associated vars  % transformations: append, length, equals4, member (intermediate) - findall - transf's across lists, delete, sort, intersection  % order data by order of transformation x later x  % map vars' paths through the data as a graph x with transformations, later *1 x % instead, add lists to data to alg x state machine with *1  % *([1,[2]],C). (C=[2,1]) x % *(B,C,A):- % B=[D,E] % D=1, *2(F), C=[F,D].
*/% interpret_induct(Command,[c,d],O).
*/% new above that returns cp a/*cp_since_findall_start2(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars2) :-%writeln1("y for trace:"),(get_char(y)->trace;true),%get(curr_cp,Curr_cp,CP_Vars1),%writeln([curr_cp,Curr_cp]),(debug4(on)->writeln1(cp_since_findall_start22(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars2));true),(get_last_p_before_n2(List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars2)->true;false%(writeln([get_last_p_before_n2,abort]),abort)),%writeln1(cp_since_findall_start22(List1,Cp1,Cp2,Cp3)),%get(curr_cp,Curr_cp1,CP_Vars2),%writeln([curr_cp,Curr_cp1]),(debug4(on)->writeln([cp_since_findall_start22,List1,Cp1,Cp2,Cp3,CP_Vars1,CP_Vars2]);true).
*/% verify,convert to matrix, find min,max x,y,z, find diff (dimensions)% dimensions(X,Y,Z).
*/%%find_first_line_to_run(Body,Vars1,Vars2) :-%% line 0, - easy to find%% usually for next line finds structure of pred,%% finds next line%% find_next_line_to_run(Predicate_number,Previous_line_number) :-%% Predicate_number= ...
*/%/*delete_dep99_na([],AT333,AT333) :- !.delete_dep99_na(Dep99_na,AT333DA,AT333) :-%trace, Dep99_na=[[N,A|_]|Dep99_na1], length(A,L), length(Args,L), C=[N,Args|_], delete(AT333DA,C,AT333DA1), delete_dep99_na(Dep99_na1,AT333DA1,AT333),!.
*/%ff_rows2(A25,A25,A25L,A25L) :-%ff_rows2(A25,A251,A25L1,A25L2) :-% var %*/find_combos2([],Combos,Combos).
*/%ff_rows2(A25,A25,A25L,A25L) :-%ff_rows2(A25,A251,A25L1,A25L2) :-% var %*/find_combos2([],Combos,Combos).find_combos2(Ops,Combos1,Combos2) :- Ops=[_Op|Ops1], %trace, %member(Switch,[on,off]), S=[on,off], member(Switch,S), append(Combos1,[Switch],Combos3), find_combos2(Ops1,Combos3,Combos2).
*/(%trace,(only_item(T1)->(T1a=[[T1]],R1=R4);(%trace,find_g1(T1,[],T1a,[],R8),append(R1,R8,R4)))))),append(G1,T1a,G3),%trace,find_g1(T2,G3,G2,R4,R2).
*//*[debug]  ?- get_later_cps_than_cp([[1,2,a],[2,3,b],[3,4,c]],[2,3,b],C).                           C = [[2, 3, b], [1, 2, a]].
*//*expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2]|Data4],expand_types1(Data2,[],Types4),Types5=[[[T,Dbw_brackets],Types4]],expand_types1(Data4,[],Types6),append_list3([Types1,Types5,Types6],Types2),!.
*//*interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_split_on_substring117a],[Variable1,Variable2,Variable3,Variable4]],Vars1,Vars2,true,nocut) :-%trace,get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("split_on_substring117a",Dbw_split_on_substring117a1),Dbw_split_on_substring117a1=Dbw_split_on_substring117a,        %trace,        interpretpart(split_on_substring117a,Variable1,Variable2,Variable3,Variable4,Vars1,Vars2).
*//*pft_expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2]|Data4],pft_expand_types1(Data2,[],Types4),Types5=[[[T,Dbw_brackets],Types4]],pft_expand_types1(Data4,[],Types6),append_list3([Types1,Types5,Types6],Types2),!.
*//*ssi_interpretpart(stringconcat,Terminal,Phrase2,Phrase1,Vars1,Vars2,Vars2c) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("stringconcat",Dbw_stringconcat),%%Variables1=[Terminal,Phrase1,Phrase2], %% terminal can be v or "a"        ((getvalues2([Terminal,Phrase1,Phrase2],        [],[TerminalValue1,Phrase1Value1,Phrase2Value1],Vars1,[],[Flag1,Flag2,_Flag3]), %% prolog vars, list of vars, [v]=[prolog var]        %%delete(Value1,Value2,Value3A),                (findall([Vars2b,TerminalValue1,TerminalValue3,Phrase1Value1,Phrase1Value3,Phrase2Value1],(        (Terminal=[_Value]->TerminalValue2=[TerminalValue1];TerminalValue2=TerminalValue1),              (Terminal=""->(TerminalValue2="",       string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1))->true;            ((var(TerminalValue2)->(string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1)),string_length(TerminalValue2,1)            );string_concat(TerminalValue2,Phrase2Value1,Phrase1Value1))),                        putvalue(Terminal,TerminalValue2,Vars1,Vars3),        putvalue(Phrase2,Phrase2Value1,Vars3,Vars4),        putvalue(Phrase1,Phrase1Value1,Vars4,Vars2b)        ),Vars2a),Vars2a=[[Vars2,TerminalValue1,TerminalValue3,Phrase1Value1,Phrase1Value3,Phrase2Value1]|Vars2d], findall(Vars2e,member([Vars2e,_],Vars2d),Vars2c)),        (Flag1=true->TerminalValue3=variable1;TerminalValue3=TerminalValue1),        (Flag2=true->Phrase1Value3=variable2;Phrase1Value3=Phrase1Value1))->(debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[TerminalValue3,Phrase1Value3,Phrase2]]),debug_exit(Skip,[[Dbw_n,Dbw_stringconcat],[TerminalValue1,Phrase1Value1,Phrase2Value1]])        );                (debug_call(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,variable2,variable3]]),        debug_fail(Skip,[[Dbw_n,Dbw_stringconcat],[variable1,variable2,variable3]])        )).%!.
*//*subtract1(A,[],A) :- !.
*//* term_to_list2(T,L) :-%catch(call_with_time_limit(3,term_to_list2(T,[],L).%),%time_limit_exceeded,%fail).
*/:-include('../listprologinterpreter/listprolog.pl').
*/all_marks(A,B) :- high_distinction(A,B),writeln([high_distinction,B]), h2a(A,C),writeln([h2a,C]), h2b(A,D),writeln([h2b,D]), h3(A,E),writeln([h3,E]), p(A,F),writeln([p,F]), n(A,G),writeln([n,G]).
*/big_connections_with_bag3_and_mr(KW) :- findall(Keyword1,(member(Keyword,KW),downcase_atom(Keyword,Keyword1)),Keywords2),/* (not(spec(_))-> (retractall(spec(_)), assertz(spec(off))); true),*/(exists_directory('Books')->true;make_directory('Books')),K=[%"../Lucian-Academy/Books/BOTS/"/*"../Lucian-Academy/Books/COMPUTER SCIENCE/",*/%"../Lucian-Academy/Books/Computational English/"%"../Lucian-Academy/Books/Computational English Copy/"%/*,%"../Lucian-Academy/Books/Creating and Helping Pedagogues/",%"../Lucian-Academy/Books/Delegate workloads, Lecturer, Recordings/",%*/%"../Lucian-Academy/Books/ECONOMICS/",%/*%"../Lucian-Academy/Books/Fundamentals of Meditation and Meditation Indicators/","../Lucian-Academy/Books/Fundamentals of Pedagogy and Pedagogy Indicators1/"%"../Lucian-Academy/Books/Fundamentals of Pedagogy and Pedagogy Indicators/"/*"../Lucian-Academy/Books/IMMORTALITY/","../Lucian-Academy/Books/Lecturer/","../Lucian-Academy/Books/MEDICINE/","../Lucian-Academy/Books/MEDITATION/","../Lucian-Academy/Books/Mind Reading/","../Lucian-Academy/Books/PEDAGOGY/","../Lucian-Academy/Books/POLITICS/","../Lucian-Academy/Books/POPOLOGY/"*/%"../Lucian-Academy/Books/REPLICATION/",%"../Lucian-Academy/Books/SALES/"/*,"../Lucian-Academy/Books/Short Arguments/","../Lucian-Academy/Books/SIMULATION/","../Lucian-Academy/Books/Time Travel/"*/%"../Lucian-Academy/Books/books2/"],findall(_J,(member(K1,K),directory_files(K1,F),delete_invisibles_etc(F,G),%/*findall(_,(member(H,G),not(string_concat("dot",_,H)),string_concat(K1,H,H1),open_file_s(H1,[A,B,_,File_term]),flatten([A,"\n",B,"\n",File_term,"\n"],J1),foldr(string_concat,J1,"",J2),split_string(J2,"\n\r.","\n\r.",J3),delete(J3,"",J4),length(J4,Length),Length2 is Length*16,%trace, bag2phil2(Length2,J2,2,Br32,Keywords2),  string_concat("../Lucian-Academy/Books/",K2,K1), string_concat("Books/",K2,K3),(exists_directory(K3)->true;make_directory(K3)),%string_concat(K4,"/",K3),%string_concat(K4,".txt",K5),foldr(string_concat,[K3,H],K5),open_s(K5,write,S),write(S,Br32),close(S),writeln([K5,written])),_J10)%*/%J10=["Hello, I am Lucian Green.  I enjoy programming, writing Philosophy and going for walks.  I also compose songs and do acting.  Programming is on the topic compilers, inductive algorithm finders and philosophy.  I love animals, and secretly wrote songs with about my (human-like) pets.  I also enjoy programming about each of my books, on topics such as meditation.
*/check141(A,B,C,D1) :-append(A31,B3,A),append([A1],A2,B3),append(A41,B4,B),append([B1],B2,B4),((A31=[],A41=[])->A51=[];(A31=[],not(A41=[]))->A51=A41;(not(A31=[]),A41=[])->A51=A31),%(A1z=[[r,A1z1]]->A1=[r,A1z1];A1=A1z),%(B1z=[[r,B1z1]]->B1=[r,B1z1];B1=B1z),%A=[A1|A2],%B=[B1|B2],(A1=B1->(A3=A1,A2=A22,B2=B22);((not(A1=[r,_]),not(B1=[r,_]))->fail;(((A1=[r,A11]->true;A1=A11),(B1=[r,B11]->true;B1=B11),(not(is_list(A11))->(A11=A13%,A14=[],(append([A21],A22,A2)->append([A13],[A21],A23);(A22=[],A23=[A13])%));(A11=A23,%[A13|A14],A22=A2%,A23=[A13])),(not(is_list(B11))->(B11=B13%,B14=[],(append([B21],B22,B2)->append([B13],[B21],B23);(B22=[],B23=[B13])%));(B11=B23,%[B13|B14],B22=B2%,B23=[B13])),%append(A14,A2,A21),%append(B14,B2,B21),check141(A23,B23,[],D),A3=[r,D])))),%((A1=[r,A11],B1=->(check141(A1,B1,[],D),A3=[r,D]);%(B1=[r,A1]->(check141(A1,B1,[],D),A3=[r,D]);%(A1=[r,[B1]]->(check141(A1,[B1],[],D),A3=[r,D]);%(B1=[r,[A1]]->(check141([A1],B1,[],D),A3=[r,D])))))),(optional_s2g(on)->(A51=[]->A52=[];A52=[[o,A51]]);(A51=[]->A52=[];fail)),foldr(append,[C,A52,[A3]],C1),check141(A22,B22,C1,D1),!.%check14(A,B,C,D) :-%A=[A1|A2],%B=[B1|B2],%append(C,[A1],C1),%check14(A2,B2,C1,D),!.
*/clear_cps(Choice_point_trail1a,Choice_point_trail1,CP_Vars1a,CP_Vars1)  :-%trace,findall([A,B,C,D,E,L,M,F,H,J],(member([A,B,C,D,E,L,M,F,H,J],Choice_point_trail1a),(J=[]->true;J=[_Ab,_Bb,_Cb,_Db,_Eb,_Fb,[]]),not(L= -1),not(L=["returns to", _, "pred_id", _]),not(L=[findall_exit_function,_]),not(M="findall")),K),delete_cps(Choice_point_trail1a,K,Choice_point_trail1,CP_Vars1a,CP_Vars1),!.
*/del_append(Globals1,[[[vars1,Pred_id],Vars1]],Globals3) :-(var(Vars1)->Globals1=Globals3;append(Globals1,[[[vars1,Pred_id],Vars1]],Globals3)),!.
*/each_combo_last_args1(0,_,Last_arg,Last_arg) :- !.
*/find_groups_replace_loops(A,%B, C) :- %trace, sub_term_wa([loop,_],A,D), findall1(E,member([E,_],D),F), foldl(delete_sub_term_wa,[F],A,C).
*/find_lists32(L1,L2,L3,Rest) :-find_lists3(L1,L2,L3,Rest).
*/get_val_s2a(Var,Val) :-%trace,(is_var_s2a(Var)->(vars_table_s2a(Vars),(member([Var,Val1],Vars)->(Val=Val1->true;fail);(append(Vars,[[Var,Val]],Vars2),retractall(vars_table_s2a(_)),assertz(vars_table_s2a(Vars2)))));(Var=Val->true;Val=[string, [Var]])).
*/house_cross_section(Rs,Ls,A) :- findall([R,L],(member(R,Rs),random_member(L,Ls)),A).
*/interpretpart(member2,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member2",Dbw_member2),get_lang_word("v",Dbw_v),%trace,        getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars1),matrix_member(Matrix),findall(X,(member(Y,[Value1,Value2]),(contains_var([Dbw_v,_],Y)->X=o;X=i)),Z),foldr(atom_concat,Z,'',W),(member(W,Matrix)->true;(writeln([incorrect,member2,modes,W]),abort)),((W=ii->true;W=io)->((%Value2=empty,((member(Value2a,Value1),debug_call(Skip,[[Dbw_n,Dbw_member2],[Value2,Value1]]),putvalue_equals4(Variable2,Value2a,Vars1,Vars2)))),      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value2a,Value1]]));                  (W=oi,%trace,%replace_in_term([Value2,],_%'$VAR'(_)%        ,empty,Value1A1),             command_n_sols(N),%trace,%writeln(Value2),findnsols(N,Value1A1,(member(Value2,Value1A),                %Value1A=[Value3A2|Value3A3],        %ValueIA1=[Value3A2,"|",Value3A3],                find_v_sys(V_sys),                %trace,        replace_in_term(Value1A,_%'$VAR'(_)        ,empty2,Value1A2),        convert_to_lp_pipe(Value1A2,Value1A3),        replace_in_term(Value1A3,empty2%'$VAR'(_)        ,V_sys,Value1A1)                )        ,ValueA),!,                        %val1emptyorvalsequal(Value3,Value3A),        %trace,        %Vars1=Vars2,        member(Value1a,ValueA),        putvalue_equals4(Variable1,Value1a,Vars1,Vars2),                        debug_call(Skip,[[Dbw_n,Dbw_member2],[Value2,Value1]]),      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value2,Value1a]]));            (W=oo->%**** change this(command_n_sols(N),%findall([Vars2b,[Value1a,Value3a],Value1a,Value3a],(findnsols(N,%[Value1A2,Value2A2%],(member(_Value1A,Value2A),        %replace_in_term(Value1A,_%'$VAR'(_)        %,empty,Value1A1),        find_v_sys(V_sys),        replace_in_term(Value2A,_%'$VAR'(_)        ,empty2,Value2A4),                %convert_to_lp_pipe(Value1A1,Value1A2),        convert_to_lp_pipe(Value2A4,Value2A3),                replace_in_term(Value2A3,empty2%'$VAR'(_)        ,V_sys,Value2A2)                )        ,ValueA),!,        %val1emptyorvalsequal(Value3,Value3A),        %trace,        %Vars1=Vars2,        member(%[Value1a,        Value2a%]        ,ValueA),        %putvalue_equals4(Variable1,Value1a,Vars1,Vars3),%)->        putvalue_equals4(Variable2,Value2a,Vars1,Vars2),%,Vars2a),Vars2a=[[Vars2,_,Value1a,Value3a]|Vars2d],%findall([Vars2e,Vals2g],member([Vars2e,Vals2g,_,_],Vars2d),Vars2c1),%Vars2c=[[Dbw_n,Dbw_member2],[Value1,Value3],_,_,%,%Value2a%_,_,%[Value1,Value2a]%Vars2c1],         debug_call(Skip,[[Dbw_n,Dbw_member2],[Value1,Value1]]),      debug_exit(Skip,[[Dbw_n,Dbw_member2],[Value2a,Value1]]))))                 .
*/interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_member2],[Variable2,Variable1]],Vars1,Vars2,true,nocut) :-%writeln(here),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,get_lang_word("member2",Dbw_member21),get_lang_word("member",Dbw_member22),(Dbw_member21=Dbw_member2->        interpretpart(member2,Variable2,Variable1,Vars1,Vars2);(Dbw_member22=Dbw_member2,%%writeln1(8),        interpretpart(member2,Variable1,Variable2,Vars1,Vars2))).
*/interpretstatement4(ssi,_F0,_Functions,[[Dbw_n,Dbw_member2],[Variable1,Variable2]],Vars1,Vars2,true,nocut,Vars2c,AC) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%trace,((get_lang_word("member2",Dbw_member21),Dbw_member21=Dbw_member2)->true;(get_lang_word("member",Dbw_member22),Dbw_member22=Dbw_member2)),%%writeln1(8),        ssi_interpretpart(member2,Dbw_member2,Variable1,Variable2,Vars1,Vars2,Vars2c,AC).
*/interpretstatementlp2p5(A,B1,B,Top,Brackets):-%writeln1(interpretstatementlp2p5(A,B1,B,Top,Brackets)),(Brackets="[]"->(LB="[",RB="]",C=",");(LB="(",RB=")",C="")), A=[A1|A2], (A1=[v,N]->(string_concat(A4,B4,N),atom_length(A4,1),upcase_atom(A4,A11),string_concat(A11,B4,A3)); interpretstatementlp2p5(A1,"",A3,true,Brackets)), foldr(string_concat,[B1,A3],B2), (A2=[]->B6=B2; ( %trace, interpretstatementlp2p5(A2,"",B5,false,Brackets), %trace, (A2=[[v,_]]%string_concat("(",_,A3) ->C1=",";C1=C), foldr(string_concat,[B2,C1],B3), foldr(string_concat,[B3,B5],B6))), (Top=true-> foldr(string_concat,[LB,B6,RB],B); B6=B),!.
*/interpretstatementlp2p5([n,cut],"!",_Brackets) :- !.
*/join_and_change(After,%Insertions,After2,After3) :- %After=[After4|After5], append(After4,After5,After), not(After4=[]), %forall(member(After45,After4),not(i_or_d(After45)))-> append(After53,_After54,After5), (After5=[]->true;(not(After53=[]), %append(After51,_After52,After54), %not(After51=[]), [After531]=After53, not(i_or_d(After531)))),  %group(-,After53,After40), group(i,After4,After41), group(d,After4,After42), find_change(%After40, After41,After42,After43),  %After53=[], %After43=After4)), foldr(append,[After2,%After4, %After50, After43],After6), %After50=After5, %;(append(After2,After4,After6), %*x append(After53,After54,After50))), %After50=After5)), join_and_change(After5,After6,After3),!.
*/keep(N,Freq,KW2) :-findall(KW,(member([N1,KW],Freq),N1>=N),KW2),!.
*/longest_to_shortest_substrings1(A,B) :-%findall(C,longest_to_shortest_substrings(A,%C),B).
*/memberlp2p1(Functions2,Algorithm1,Algorithm2) :-        Functions2=[Function,Arguments2],                interpretstatementlp2p2a(Function,Algorithm1,Algorithm3a,"[]"),                string_concat(Algorithm3a,"(",Algorithm3d),        interpretstatementlp2p2b(Arguments2,Algorithm3d,Algorithm2a,"[]"),        write_full_stop_if_last_item([],Algorithm2a,Algorithm2),!.
*/memberlp2p1(Functions2,Algorithm1,Algorithm2) :-%trace,        Functions2=[Symbol1,Function,[Arguments2,"/",Arguments3]],        symbol_lp2p(Symbol1,Symbol2),        interpretstatementlp2p2a(Function,"",Algorithm3a,"[]"),        %string_concat(Algorithm3a,"(",Algorithm3d),        %interpretstatementlp2p2(Arguments2,"",Algorithm3e),        %interpretstatementlp2p2(Arguments3,"",Algorithm3f),        %string_concat(Algorithm3e,")",Algorithm3f),                concat_list([Algorithm1,Symbol2,Algorithm3a," ",Arguments2,"/",Arguments3],Algorithm3),%interpretbodylp2p(Body,Algorithm3,Algorithm2a),      write_full_stop_if_last_item([],Algorithm3,Algorithm2),!.
*/n(N,N1) :- n(N,[],N1).n([],N,N) :- !.n(N,N1,N2) :- N=[N31|N32],append(N1,[N31],N4),%N4 is N1+1,n(N32,N4,N2).
*/newlines1(Xs) --> [X], {char_type(X,space)}, newlines1(Xs),%{%keep_comments(Y),%(%true%member(newlines,Y)%->append([X],Xs,Xs2);Xs2=[])%},!.
*/numbers_to_term([],_,T,T) :- !.numbers_to_term(SN,C1,T1,T2) :-%trace, SN=[SN1|SN2], %SN1=SN3, get_base_token_number(SN1,SN3), member([S1,SN3],C1), append(T1,[S1],T3), numbers_to_term(SN2,C1,T3,T2),!.
*/plot :- /*findall(_,(member([CX,CY,CZ],[[0,5,0]%,[0,-5,0],[5,0,0],[-5,0,0]]),member(TX,[0%,90,180,275]),member(TY,[0%,90,180,275]),member(TZ,[0%,90,180,275]),member([EX,EY,EZ],[[0,2.5,0],[0,5,0],[0,25,0]]),*/%[0,2.5,0],[0,-2.5,0],[2.5,0,0],[-2.5,0,0],%[0,10,0],[0,-10,0],[10,0,0],[-10,0,0]]),[CX,CY,CZ, TX,TY,TZ, EX,EY,EZ]=[0,0,0,0,0,0,0,0,0],%[0,0,0,0,0,0,0,0,0],%[-1,0,0, 180,0,0, 0,10,10],%[0.5,0.5,-1,0,5,0,0,0,0,0,2.5,0,_67206,_67212]Points=[[0,0,0,r],%[0.005,0.005,0.005,q],[0,1,0,y],[1,0,0,g],[1,1,0,b],[0.5,0.5,1,p],[0.5,0.5,-1,o]],findall([BX,BY,C],(member([AX,AY,AZ,C],Points),three_dimensions_to_two_dimensions(AX,AY,AZ,CX,CY,CZ,TX,TY,TZ,EX,EY,EZ,BX,BY)),Image),%writeln(Image),tty_size(R,C),numbers(C,0,[],CN),numbers(R,0,[],RN),findall(_,(member(RN1,RN),findall(_,(member(CN1,CN),%writeln([cn1,CN1,rn1,RN1]),member([CN2,RN2,Colour],Image),((CN1=CN2,RN1=RN2)->%abort%write(Colour);write(%""%" ")),!),_),nl%),_)),_).
*/simplify_by_replacing([],VG,V,V,%VG,VG) :- !.simplify_by_replacing(V1,VG1,V2,V3,%VG2,VG3) :-V1=[[V4,Val]|V5],delete(V5,[_,Val],V6),findall(V61,member([V61,Val],V5),V62),replace_in_term2_gc(VG1,V62,V4,VG4),%delete(VG1,[_,Val],VG6),append(V2,[[V4,Val]],V7),%append(VG2,[[V4,Val]],V7),simplify_by_replacing(V6,VG4,V7,V3,VG3).
*/ssi1([_,0,Predicate_number,Line_number,"predicate",Query_a,Vars,All_predicate_numbers], End_result, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2) :-append_retry_back_stack([ssi,[[_,0,Predicate_number,Line_number,"predicate",Query_a,Vars,All_predicate_numbers], End_result, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2]]),((Level=_,%/*(debug2(on)->writeln1(ssi1([_,0,Predicate_number,Line_number,"predicate",Query_a,Vars,All_predicate_numbers], End_result, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2));true),%*/%trace,(Line_number = -2 ->(%trace,%*****(%****((var(Vars)->[Result1]=Result2;append(Result1,[Vars],Result2)),%,%save_local_to_global_cp_trail(Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2)Choice_point_trail1=Choice_point_trail3,CP_Vars1=CP_Vars2%Choice_point_trail1=Choice_point_trail3)));(Line_number = -3 ->(%trace,%*****%save_local_to_global_cp_trail(Choice_point_trail1,Choice_point_trail1a,CP_Vars1,CP_Vars1a),Choice_point_trail1=Choice_point_trail1a,CP_Vars1=CP_Vars1a,((%writeln(here2), Query2=[_|_],%writeln("*2"),get_last_cp_before_n(Choice_point_trail1a,[Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],[Cp_a,Cb_b,Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],_,CP_Vars1a,CP_Vars3)%(((Pred_or_line="predicate",not(All_predicate_numbers2=[]))->true;(Pred_or_line="line",All_predicate_numbers2=[_,_,_,_,_,_,Vars2c],not(Vars2c=[])))))->(Pred_or_line="predicate"->(delete_cp(Choice_point_trail1,[Cp_a,Cb_b,Pred_id,Level,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],Choice_point_trail12,CP_Vars3,CP_Vars4,_),All_predicate_numbers2=[All_predicate_numbers3|All_predicate_numbers4],All_predicate_numbers3=[All_predicate_numbers31,"prev_pred_id",Prev_pred_id],%(Line_number2b = ["returns to", _, "pred_id", _] -> (Line_number2b1 = -1,trace) ; Line_number2b1 = Line_number2b),ssi1([Prev_pred_id,Level,All_predicate_numbers31,Line_number2b,"predicate",Query2,Vars4,All_predicate_numbers4], End_result,Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail12,Choice_point_trail3,CP_Vars4,CP_Vars2));(Pred_or_line="line" ->(delete_until_last_cp(Choice_point_trail1,Choice_point_trail6,D1,AC,CP_Vars3,CP_Vars5),(D1=[_,_,Pred_id2,Level11,Predicate_number11,Line_number_a11,"line",-,Vars2d11,Vars2e11],ssi1([Pred_id2,Level11,Predicate_number11,Line_number_a11,"line",-,Vars2d11,Vars2e11], End_result, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail6,Choice_point_trail3,["appearance of command",AC],CP_Vars5,CP_Vars2)))));%****(Result2=Result1,CP_Vars1a=CP_Vars2,Globals1=Globals2,Choice_point_trail1a=Choice_point_trail3))))))->true;(writeln0([ssi1,0,abort]),%abort%fail%number_string(a,_)%abort)),!.
*/subtract_civ([],_M32,A,A) :- !.
*/test1:-(a1(1)->b1;c1).
*/test2:-a2(1,R),d2(R). a2(1,true):-!.a2(_,false).d2(true):-b2,!. d2(false):-c2.b2:-writeln(b2).
*/try(T45,T8) :-%writeln1(try(T45,T8)),%trace,(catch(table_s2g(_),_,fail)->true;(%trace,retractall(table_s2g(_)),assertz(table_s2g([])))),%trace,table_s2g(Table),(member([T45,Value,Sign],Table)->(Sign=positive->(%trace,T8=Value);(Sign=negative->(%trace,T45=T8)));(%trace,((%repeating_item_heuristic(C1),try1(T45,T8)%find_lists3a(C1,T52,_))->true%%add_to_table([T45,T8,positive]);(%trace,%add_to_table([T45,T8,negative]),T45=T8)))),!.
*/uncompress_vars1(V1,VG,V2) :-VG=[[V3,Val]|V4],replace_in_term(V1,Val,V3,V5),uncompress_vars1(V5,V4,V2),!.
*/writeln12(A) :- log(B),term_to_atom(A,A1),foldr(string_concat,[B,A1,"\n"],C),retractall(log(_)),assertz(log(C)),writeln1(A).
, not(X=46)%% !, not(X=33)%% ?, not(X=63)%% \n, not(X=10)}, sentence33(Xs), {atom_string(CA,C),atom_concat(CA,Xs,CXs)}, !.
- identifies same solution method repeated, if final sol is >, then choose that sol's label- A in q col, qual answer, machine A in sol- ARRA and ARRB - find that are different, split different parts, subs A - diff with old lc alg, bug check if last items differskip Q1 because it requires string analysis*/:-set_prolog_stack(global, limit(80 000 000 000)).
- identifies same solution method repeated, if final sol is >, then choose that sol's label- A in q col, qual answer, machine A in sol- ARRA and ARRB - find that are different, split different parts, subs A - diff with old lc alg, bug check if last items differskip Q1 because it requires string analysis*/:-set_prolog_stack(global, limit(80 000 000 000)).:-include('../listprologinterpreter/listprolog.pl').
/find_lists(Sets,Sets1,Sets1) :- maplist(is_empty_list,Sets),!.find_lists(Sets,Sets1,Sets2) :-%Sets=[Sets0],%trace, %findall(B,(member(S,Sets0),S=[[t, brackets],B]),Sets), findall(Heads3,member([Heads3|_],Sets),Heads), %trace, findall(Bodies3,member([_|Bodies3],Sets),Bodies), find_lists2(Heads,[],Sets3), append(Sets1,[Sets3],Sets4), find_lists(Bodies,Sets4,Sets2).is_empty_list([]).
/*move_vars1([],_T1,_T2_old,Out,Out) :-!.
/*% item in first half is from 1/2-3/4length(C1,L),L2 is floor(L/2),length(List,L2),L3 is L2+1,L4 is ceiling((3*L)/4),numbers(L4,L3,[],Ns),findall(X,(member(N,Ns),get_item_n(C1,N,X)),Xs),%C1=[C2|C3],append(List,_,C1),intersection(List,Xs,A),not(A=[]),!.
/*%(%catch(call_with_time_limit(3.5,try1(T45,T8)%),    %_,    %fail)    ->true;T45=T8).*/try1(T45,T8) :-longest_to_shortest_substrings1(T45,T43),%[T45]=T43,%trace,%(find_first((T44=T43,%member(T44,T43),findall(T52,(member(C1,T43),(%trace,%find_lists3atry2(C1,T52,_)->true;fail%%C1=T52))),T7),length(T7,T7L),(length(T43,T7L)->%(%trace,T7=T8);(%trace,foldr(append,T7,T8));fail),!.
/*C..=[A,B],Cfunctor(C,A,1),D=C,arg(1,D,_),retractall(D),arg(1,C,B),%((A=curr_cp,B=24)->writeln(set(curr_cp,24));true),assertz(C),!.*/noun(peter).
/*findall(A,(member(A,D1),(search(A,["data"])->true;(search(A,["prepare"])->true;search(A,["calculate"])))/*downcase_atom(A,A1),split_string(A1,SepandPad,SepandPad,B),not(intersection(B,["data"],[]))*/),C1),subtract(D1,C1,D2),(D2=[D3|_]->find_until(D1,D3,Pre_info);Pre_info=C1),append(Pre_info,Rest,D1),!.
/*findall(A,(member(A,D1),(search(A,["data"])->true;(search(A,["prepare"])->true;search(A,["calculate"])))/*downcase_atom(A,A1),split_string(A1,SepandPad,SepandPad,B),not(intersection(B,["data"],[]))*/),C1),subtract(D1,C1,D2),(D2=[D3|_]->find_until(D1,D3,Pre_info);Pre_info=C1),append(Pre_info,Rest,D1),!.*/question(Rest1,Question,Question_table) :-%reverse(Rest1,Rest2),findall_until_fail(A,member(A,Rest1),(trim_spaces_before(A,A1),SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string1b(A1,SepandPad,SepandPad,B1),not(((search(B1,["prepare","calculate"]))->true;(append([C],_,B1),string_strings("abcdefghijklmnopqrstuvwxyz",Alpha),member(C,Alpha))))),Question_table),(Question_table=[]->(writeln("Can't find question."),abort);true),%find_until(Rest1,D11)%trace,%reverse(D1,Question_table),%subtract(Rest1,D1,D2),%trace,%(D31=[D3|_]->%find_until(Rest1,D3,Question_table);Question_table=D1),append(Question_table,Question,Rest1),!.
/*get_later_cps_than_cp1(List1,Cp1,Cp3,Cps) :-%curr_cp(N),%writeln1([cp1,Cp1]),%writeln1([list1,List1]),%trace,%Cp1=%trace,Cp1=[Cp_b,_Cp_c|Cp3],%member(Cp1,List1),member([Cp_b,Cp_a1|_Cp5],List1),member([Cp_a1,Cp_a|_Cp4],List1),get_later_cps_than_cp(List1,Cp_a,[],Cps).
/*string_concat(A,B,Atom),string_length(A,1),A="\"",string_concat(String,C,B),string_length(C,1),C="\"",!.
/*%append(Ordered_pred_nums1,[[loop1,Ordered_pred_nums3]],Ordered_pred_nums2)); (%trace, %append([Ordered_pred_nums3],Ordered_pred_nums1,Ordered_pred_nums5),findall1(Ordered_pred_nums22,(member(Ordered_pred_nums412,Ordered_pred_nums4),find_groups(Ordered_pred_nums412,[]%Ordered_pred_nums5,Ordered_pred_nums22)),Ordered_pred_nums21),%trace, (foldr(append, Ordered_pred_nums21,Ordered_pred_nums23)%->true; %Ordered_pred_nums21=Ordered_pred_nums23 ),foldr(append,[Ordered_pred_nums23,[Ordered_pred_nums3],Ordered_pred_nums1],Ordered_pred_nums2) %flatten()), %flatten(%foldr(append, %Ordered_pred_nums2,Ordered_pred_nums22).
/*?- foldl1(string_concat1,["a","b"],"",C).
/*Decision tree, with recurring partsstrings_to_grammar(["[aaa]"],G).G = [[1,>,[]], [1,>,a,1]]strings_to_grammar(["[ab]","[ac]"],G).
/*How can I save and load data files in Prolog?How can I quickly save and load data files in Prolog, for use with games?Save files with save(File_name,Term), where File_name is the file name in folder folder_name and Term is a compound containing the data file.    ?- save("file_name.txt",[[["player_name","Harold"],["score",10],["symbol",key_word]],[["player_name","Queenie"],["score",20],["symbol",schema]]]).
/*Subterm with addresssub_term_wa(Subterm, Term, Instances).
/*[ [11]]and [ [111]]make[ [1]]where this [1] represents a list of 1s[ [1,1,[2,2],1,1,[2]]]and [ [1,1,[2,2]]]make[ [1,[2]]]*/:-include('../listprologinterpreter/la_strings.pl').is_empty_list([]).
/*append hierarchy traversal- get first and last items- get items either side and at next instance of item- multiple possibilities (using above as functions)- multiple items per linex grammars process all data, don't skip datainstead, write fns to find next instance of item (single levelled data)- patterns such as *,(,*,N,*,),*,.,*- reverse - right justify- multiple items per space in patterns- a zig zag tree with multiple items coming left or right from last pointeglr_tree([[l 111],   [[r 222],          [[l 00]           [l 01]          ]   ]],Code).
/*ci3.pl- use diff group combos to find changed preds - setting to make interpred comments perm v included with space changes- do by file - (use a version of dgc that returns i as well as d for changes to get out code to check)- within changed groups, separates into different pred name, arity- remove comments within preds (x make perm), change interpred comments to permanent (to delete manually later if nec) x delete interline comments xxx they will be included with space changes- use diff group combos (dgc) with tokens not strings to compare old and new preds (use a version of dgc that returns i as well as d for changes x)- bu- run tests to find smallest set of changes needed to each predx delete interline commentsor convert them to lp to see if they are comm, then keep them x they are with the changes*/ :- use_module(library(date)).
/*find tests from repos- convert pl->lp,- finds list of pred names- find egs in comments- find eg% beginnings_middles_ends(10,5,BME).
/*find([[a,b],[a,c]],[a,_],A).
/*mrs2a_binary5- find 2 chars or words- mr 5 of either of them- s2a- t2b*/:-include('../mindreader/mind_read1.pl').
/*optimise_alg([[[n, 1], "->", [[[n, 21]], [1], [[n, 21]]]], [[n, 2], "->", [[]]], [[n, 2], "->", [[0], [[n, 2]]]], [[n, 21], "->", [[[n, 2]]]]],A).
/*                                                            string_concat1(A,"","ab").A = "ab" ;                                                             string_concat1("a","b",C).
/*12341234 pretty_print_nd([[[[1,2],[3,4]],[[1,2],[3,4]]],[[[1,2],[3,4]],[[1,2],[3,4]]]]).1234123412341234pretty_print_nd([[[[[1,2],[3,4]],[[1,2],[3,4]]],[[[1,2],[3,4]],[[1,2],[3,4]]]],[[[[1,2],[3,4]],[[1,2],[3,4]]],[[[1,2],[3,4]],[[1,2],[3,4]]]]]).
/*1 2  4  5 3  6  pretty_print(sphere, dfs_in_order).
/*:- use_module(library(http/thread_httpd)).
/*?- bag2phil(100,2,Br),writeln(Br).
/*?- magic_square([A,B,C,D,E,F,G,H,I]).
/*?- text2aphors(A),writeln(A).                                                   What is the main shape in the object called?|: aWhat are the ratios of side lengths of the object in form x:y:z?|: 1:1:1What is one of the lengths, i.e. ':1:' for y=1cm?|: 2::If there is another shape in the object, please enter its name, otherwise press 'cancel'.
/*What is the first sentence?|: aWhat is the second sentence?|: b[Is it more likely that,,1.,a,because,b,,or ,2.,b,because,a,,? (1/2)]|: 1[What part of,b,leads to,a,?]|: o[What part of,a,is lead to by,b,?]|: c[Complete:,o,...,c]|: d[Is there a connection between,a,and,c,? (y/n)]|: n[Is there a connection between,o,and,b,? (y/n)]|: n[Is there a connection between,c,and,d,? (y/n)]|: n[Is there a connection between,d,and,o,? (y/n)]|: n[[a,b,done],[a,c,done],[o,b,done],[c,d,done],[d,o,done]]*/clarify(S3) :- ask("What is the first sentence?",S1), ask("What is the second sentence?",S2), repeat, ask(["Is it more likely that","\n","1.",S1,"because",S2,"\n","or \n","2.",S2,"because",S1,"\n","? (1/2)"],Option), (Option="1"->true;Option="2"), (Option="1"-> clarify1(S1,S2,S3); clarify1(S2,S1,S3)).
/*[[[["a","b"],["c","d"]],[["a","b"],["c","d"]]],[[["a","b"],["c","d"]],[["a","b"],["c","d"]]]]*/:-include('../listprologinterpreter/listprolog.pl').
/*algorithm_decision_tree(File_list,File_list1,File_list2,String_dict,Dictionary,Reversed_dictionary2) :-File_list=[File_list3|File_list4],string_concat(File_list5,_E,File_list3),string_length(File_list5,1),string_codes(File_list5,File_list5_c),not(phrase(word1(File_list5_c),_)),append(File_list1,[File_list3],File_list6),algorithm_decision_tree(File_list4,File_list6,File_list2,String_dict,Dictionary,Reversed_dictionary2).
/*collect_connected_pred_ids2(Pred_id,Pred_ids1,Pred_ids2,Globals3) :- (findall([%Next_pred_id, Next_pred_id1],(member([pred_id_chain,Pred_id,Next_pred_id],Globals3)),Next_pred_id1), member(Next_pred_id2,Next_pred_id), collect_connected_pred_ids2(Next_pred_id2,[Next_pred_id],Pred_ids2,Globals3)).%),Pred_ids2)).
/*continuous integration (with diff x)p2lpcomments even where spaces are x ignore comments xx check comments checked for in all spaces- move to after command xxxdetect changed preds[1,2,3],[1,2,4,3] - notice insertions, test[1,2,3],[1,3] - notice deletions, test[1,2,3],[1,4,3] - x, as above- try combos of preds, starting with no changesconvert to pl, testcopy to build folder if passesdiff_combos_vintage([1,2,3],[1,2,4,3],C).
/*continuous integration (with diff x)p2lpcomments even where spaces are x ignore comments xx check comments checked for in all spaces- move to after command xxxdetect changed preds[1,2,3],[1,2,4,3] - notice insertions, test[1,2,3],[1,3] - notice deletions, test[1,2,3],[1,4,3] - x, as above- try combos of preds, starting with no changesconvert to pl, testcopy to build folder if passes*/:-include('../Prolog-to-List-Prolog/p2lpconverter.pl').:-include('../List-Prolog-to-Prolog-Converter/lp2pconverter.pl').
/*expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[Data2],not(Data2=[T,_]),not(Data2={[T,_]}),expand_types1(Data2,[],Types4),Types5=[[[T,Dbw_brackets],Types4]],append_list3([Types1,Types5],Types2),!.
/*find_combos2([],Combos,Combos).
/*find_insertions_and_deletions_vintage_old(Before,After,Insertions,Deletions) :- subtract(After,Before,Insertions), subtract(Before,After,Deletions),!.
/*get_later_cps_than_cp1(List1,Cp_a,Cps,Cps) :-not(member([_,Cp_a|_],List1)),!.get_later_cps_than_cp1(List1,Cp_a,Cps1,Cps2) :-member([Cp_b,Cp_a|Cp3],List1),append(Cps1,[[Cp_b,Cp_a|Cp3]],Cps3),get_later_cps_than_cp1(List1,Cp_b,Cps3,Cps2),!.
/*interpretpart(read_string1,Variable1,Vars1,Vars2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("read_string",Dbw_read_string),       getvalue(Variable1,Value1,Vars1),        debug_call(Skip,[[Dbw_n,Dbw_read_string],[variable]]),((read_string(user_input, "\n", "\r", _End1, Value1A),        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2))->      debug_exit(Skip,[[Dbw_n,Dbw_read_string],[Value1A]]);     debug_fail(Skip,[[Dbw_n,Dbw_read_string],[variable]])),!.
/*interpretstatement1(ssi,Functions0,_Functions,Query,Vars,Vars,true,nocut,_) :-find_pred_sm(Reserved_words1),Query=[Function],%trace,not_reserved_word(Function,Reserved_words1),%debug_call(Skip,[Function]),         remember_and_turn_off_debug(Debug),  turndebug(off),%trace,         (lucianpl1(off,%Debug,         Query,Functions0,_Result1)%interpret2(Query,Functions0,Functions0,_Result1)         ->true;(turn_back_debug(Debug),false)),                       turn_back_debug(Debug)                  ,!.
/*interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_member],[Variable1,Variable2]],Vars1,Vars2,true,nocut,[]) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("member",Dbw_member1),Dbw_member1=Dbw_member,%%writeln1(8),        ssi_interpretpart(member,Variable1,Variable2,Vars1,Vars2).
/*interpretstatementlp2p3([v,Name1],Name2) :- string_concat(A,B,Name1),atom_length(A,1),upcase_atom(A,A1),string_concat(A1,B,Name2),!.
/*line(A) -->%{trace},"true",%newlines1(_),{trace},{A=[[n,true]]}.
/*list_to_compound(Data1,Compound1,Compound2) :- Data1=[Data2|Data3], (Compound1=[]->Compound3=Data2; Compound3=..[:,Compound1,Data2]), list_to_compound(Data3,Compound3,Compound2),!.
/*lp2p1_a(A,B) :- sub_term_wa([v,_],A,A1), findall1([A2,A3],(member([A2,A4],A1), ((not(A4=[v,'_']), A4=[v,A5], atom_concat('_',_,A5), get_cnv(A6),A3=[v,A6] )->true;A4=A3)),A7), %trace, foldr(put_sub_term_wa_ae,A7,A,A8), lp2p1([[[n, a], ":-", [A8]]],C), string_concat("a:-",B1,C), string_concat(B2,".\n",B1), foldr(string_concat,["(",B2,")"],B), %square_to_round([B2],B), !.
/*newlines1(X) --> newlines0(X).
/*p1(["a",["b", "b"],"a",["b"]],[],A).A = ["a", ["b", "b"], "a", ["b"]] */p1([],V1,V1).p1(V1,V2,V3):-equals4(V1,[V11,V12|V13]),equals4(V11,"a"),p2(V12,[],V15),append(V2,[V11,V15],V14),p1(V13,V14,V3).p2([],V4,V4).
/*paths(N,L,L,P,P) :- not(member([N,_],L)),!.
/*pft_expand_types1(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[Data2],not(Data2=[T,_]),not(Data2={[T,_]}),pft_expand_types1(Data2,[],Types4),Types5=[[[T,Dbw_brackets],Types4]],append_list3([Types1,Types5],Types2),!.
/*split[1,[2],1,[2,2]]into [[1,[2]],[1,[2,2]]]try dividing the levels upfind if make a repeating unit*^|find_lists3try dividing into lists of listsincl adding []*^|s2g:s2lfind all repeating units of selections in each string with fl3 - go through term bottom up, creating var nums, insert brackets,  finding gs, keeping brackets intact- dec tree for other terms from s2l* fl3a with non repeating parts- not r but optional in fl3- takes a long time unless short data so do a part of the grammar at a timedec treeon s2l levels x at all (bottom up (x dfs po)) xx- checks whether to make a cp same or different x sort the levels of repeating structs, see if they match- goes around s2l brackets etc- dec tree merges branches with same structure**only close ] if finished patternno []rec'ively proc termtest that parts repeat, signal bracket or repeating list with smallest unit*/% find_lists3a([1,2,2,1,2],A).
/*split_on_words(T,File_list) :-SepandPad=%".",%"&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!0123456789", % doesn't have "'" xx%string_codes(String1,Codes),%string_to_list2(SepandPad,[],SepandPad1),string_codes(T,Codes),string_codes(SepandPad,SepandPad1),%split_string2(String1,SepandPad1,File_list),split_on_substring117(Codes,SepandPad1,[],File_list),!.
/*t_or_empty([t,_]).
/*test(215,[[n,function1],[[v,a]]],[        [[n,function1],[[[v,a]]],":-",        [        [[n,true]]]]],[]).
/*uncompress_vars1(V1,VG,V32) :-V1=[[V3,[[&, tail],Val]]|V4],append(V2,[[V3,[[&, tail],Val]]],V31),uncompress_vars1(V4,VG,V32),!.
/* A=[["p1", ":", a, "p2"], ["p2", ":", "p3", b], ["p3", ":", c]]*/%:- include('find_lists.pl').
/* A=[["p1", ":", a, "p2"], ["p2", ":", "p3", b], ["p3", ":", c]]*/:- include('find_lists.pl').:- dynamic p_name/1.
/* change namesrepeat until 2nd time has the same resultdcgs*/:-include('replace_vars.pl').
/**concat_list(A1,B):-A1=[A|List],concat_list(A,List,B),!.
/**(memberlp2c12(Functions2,Algorithm1,Algorithm2))).
/**(memberlp2p12(Functions2,Algorithm1,Algorithm2))).
/**,(Functions2=[_Function|Functions3],write_comma_if_not_empty_list(Functions3,Algorithm2b,Algorithm2a),memberlp2c1(Functions3,Algorithm2a,Algorithm2c),write_full_stop_if_last_item(Functions3,Algorithm2c,Algorithm2))).
/**,(Functions2=[_Function|Functions3],write_comma_if_not_empty_list(Functions3,Algorithm2b,Algorithm2a),memberlp2p1(Functions3,Algorithm2a,Algorithm2c),write_full_stop_if_last_item(Functions3,Algorithm2c,Algorithm2))).
/**yes, no for true, false cawps data- keeps increasing k until yes- don't need yes or no, need predicatecan select predicates in cawps using distances.pl- finds predicates from similar i/o *- breaks down data and then *- code db needs i,o- convert code to pl- find child predicates- print with i,o- eliminate dups- split predicates into smaller predicates ()- may find approximate predicates (with arguments out of order) that can be corrected with cawps argument re-ordering- cut off with first item in list in case multiple items causes a malfunction in algorithm- find i not o, then chains of i,o until alg completed- " for vertical chains (find o, then i,o inside recursive structs)- use types not atoms - ? - use atoms* spec finder combines parts of specs, generating content within different types- finds algorithm, spec part by spec part- e.g. alg to modify alg takes first alg, changes, then modified alg- finds alg before finding whole spec, finds data before all data (bottom up)- uses only what data's changed or needed- combines two sentence specs into one* alg finder is part of spec finder, can do separately- do i,o passes of distances separately x together, don't need y, n1. modify cawps2. prepare data**/%% distances.pl - from Luc De Raedt:-use_module(library(clpfd)).
/**%% Popology > An object can be human like > 24logic_ff0([[[[a, true], [b,  false],[c,true],[d,false]], [true]],[[[a, true], [b,  false],[c,false],[d,false]], [true]],[[[a, false], [b,  false],[c,true],[d,false]], [true]],[[[a, true], [b,  true],[c,true],[d,false]], [true]],[[[a, false], [b,  false],[c,false],[d,false]], [true]]],F).
/**- Form- Which chord progression type?- Lyrics - random sentences, rhyming- Melody - random starting and ending note of first phrase, melody and harmony from chord progression type with three notes (split for melody), the circle of fifths for connection between sections- Which of up to 3 instruments for each of melody and harmony- What sections they will play- Melody cut to the length of vocals**/%%use_module(library(pio)).
/**- Form- Which chord progression type?- Lyrics - random sentences, rhyming- Melody - random starting and ending note of first phrase, melody and harmony from chord progression type with three notes (split for melody), the circle of fifths for connection between sections- Which of up to 3 instruments for each of melody and harmony- What sections they will play- Melody cut to the length of vocals**/:-use_module(library(pio)).
/**- Form- Which chord progression type?- Lyrics - random sentences, rhyming- Melody - random starting and ending note of first phrase, melody and harmony from chord progression type with three notes (split for melody), the circle of fifths for connection between sections- Which of up to 3 instruments for each of melody and harmony- What sections they will play- Melody cut to the length of vocals**/use_module(library(pio)).
/**?- grammar_logic_to_alg2(24).                                                       ["Simplify algorithm","pia","pear"]["What is the word for","person"]1harry2june3person4pia"Please choose from menu items 1-4, or enter a new word:"|: subject["Simplify algorithm","harry","banana"]["Simplify algorithm","apple","june"][["subject","pia","pear","pear"],["subject","harry","banana","banana"],["subject","june","apple","apple"]]true.?- grammar_logic_to_alg.                                                        ["Simplify algorithm","pia","pear"][["subject","pia","pear","pear"]]true.
/**[debug]  ?- build_maze2d(4,5,Maze).
/**apply_for_loan(1,0,0,1,A).
/**build_maze3d(5, 5, 5, _).
/**grammar_logic_to_alg.ple.g. I liked God with you[liked,God],[God,you] with extra data- connect liked to you with member, return words on pathPOSgoes backwards x forwards- I v n by v n x ignoren,v- single typeadjective- ignored x (ignore names in alg)- like v,njoining words - ignore, just pairs v, n- on- joins v to n- separates vnsnegative terms- switch to positive or ignoredisappearing words- my- no list of these, because they are ignoredvv is v1, v2 x v1nn is n1*later: can randomly generate details like given sentence**/:-include('../Text-to-Breasonings/text_to_breasonings.pl').
/**grammar_logic_to_alg.ple.g. I liked God with you[liked,God],[God,you] with extra data- connect liked to you with member, return words on pathPOSgoes backwards x forwards- I v n by v n x ignoren,v- single typeadjective- ignored x (ignore names in alg)- like v,njoining words - ignore, just pairs v, n- on- joins v to n- separates vnsnegative terms- switch to positive or ignoredisappearing words- my- no list of these, because they are ignoredvv is v1, v2 x v1nn is n1*later: can randomly generate details like given sentence**/:-include('../Text-to-Breasonings/text_to_breasonings.pl').:-include('../Text-to-Breasonings/truncate.pl').
/**grammar_logic_to_alg.ple.g. I liked God with you[liked,God],[God,you] with extra data- connect liked to you with member, return words on pathPOSgoes backwards x forwards- I v n by v n x ignoren,v- single typeadjective- ignored x (ignore names in alg)- like v,njoining words - ignore, just pairs v, n- on- joins v to n- separates vnsnegative terms- switch to positive or ignoredisappearing words- my- no list of these, because they are ignoredvv is v1, v2 x v1nn is n1*later: can randomly generate details like given sentence**/:-include('../Text-to-Breasonings/truncate.pl').
/**grammar_logic_to_alg_without_brdict.pl**/:-include('../Text-to-Breasonings/text_to_breasonings.pl').
/**multi_choice_character([[1,[[2,"a"],[-,"b"],[-,"c"],[-,"d"]]],[2,[[-,"a"],[-,"b"],[-,"c"],[-,"d"]]]],1,[],Choices).1a2b3c4dPlease choose from menu items 1-4, or q to quit|: 11a2b3c4dPlease choose from menu items 1-4, or q to quit|: qChoices = ["a"].**/:-include('../../listprologinterpreter/la_strings.pl').:-include('../../listprologinterpreter/la_maths.pl').multi_choice_character(Menu,Screen_number,Choices1,Choices2) :-nl,member([Screen_number,Menu_items],Menu),length(Menu_items,Menu_items_length),numbers(Menu_items_length,1,[],N),findall([N1,"\t",Menu_item,"\n"],(member(N1,N),find_first(get_item_n(Menu_items,N1,[_,Menu_item]))),Menu1),maplist(append,[Menu1],[Menu3]),concat_list(Menu3,Menu2),writeln(Menu2),repeat,concat_list(["Please choose from menu items 1-",Menu_items_length,", or q to quit"],Prompt),writeln(Prompt),read_string(user_input,"\n","\r",_,Input),(Input="q"->Choices1=Choices2;(%trace,number_string(Input_num,Input),Input_num>=1,Input_num=<Menu_items_length,(get_item_n(Menu_items,Input_num,[Next_screen_number,Menu_item1]),append(Choices1,[Menu_item1],Choices3),(Next_screen_number=(-) -> Choices3=Choices2;multi_choice_character(Menu,Next_screen_number,Choices3,Choices2))))),!.
/**strings_to_grid(["***********","*         *","*** *** ***","*         *","* * *** ***","* *       *","***********"],Grid),writeln1(Grid).************         **** *** ****         ** * *** **** *       ************change to maze format v**/:-include('../../listprologinterpreter/la_strings.pl').:-include('../../listprologinterpreter/la_maths.pl').
/**        ;(memberlp2c13(Functions2,Algorithm1,Algorithm2))).
/**        ;(memberlp2p13(Functions2,Algorithm1,Algorithm2))).
/**?- rectangles(5,5,[[[1,1],[2,2]],[[3,3],[4,4]]],_).                                                          **   ** **   **   true.**/rectangles(X,Y,Rectangles,Grid2):-grid(X,Y,Grid1),rectangles1(Rectangles,Grid1,Grid2),print_grid(Grid2,X,Y),!.
/**Attacks:[statement 2,person 3]**/survive_philosophy(Philosophies,People) :-attacks(Philosophies,People,[],Attacks),writeln("Attacks:"),findall(_,(member(Attack,Attacks),writeln(Attack)),_).
/**Classical CompositionBased on 2 3 5 6 7 10 11 intervalshttps://swish.swi-prolog.org/p/LucianGreenMusic.plCounter=4?- classicalcomposition('C','D').
/**Classical Pop (with minor sixth) CompositionBased on 2 3 5 6 7 8 10 11 intervalsCounter=4?- popclassicalcomposition('C','D').
/**Prolog Music Composer V.11. Chorus, Solo (based on I-IV-V-I) **/versechorussoloprogression1451(Name1, Name2,Progression2) :-note(Note1, Name1),note(Note2, Name2),versechorussoloprogression11451(Note1, Note2, 0, _, [Note1], Progression1), notestonames(Progression1,Progression2),!.%%, writeln(Progression2),!.
/**Prolog Music Composer V.4Verse, Chorus and Solo (based on I-vi-IV-V):Counter=4**/versechorussoloprogression1645(Name1, Name2,Progression2) :-note(Note1, Name1),note(Note2, Name2),versechorussoloprogression11645(Note1, Note2, 0, _, [Note1], Progression1), notestonames(Progression1,Progression2),!.
/**WORKINGmake_mind_reading_tree4(["abc","abd"],[[1, "b", 3], [3, "c", [-, "abc"]], [3, "d", [-, "abd"]]]).make_mind_reading_tree4(["aaa","aab","acc"],[[1,"a",2],[2,"a",3],[2,"c",[-,"acc"]],[3,"a",[-,"aaa"]],[3,"b",[-,"aab"]]]).make_mind_reading_tree4(["cca","ccb"],[[1, "c", 3], [3, "a", [-, "cca"]], [3, "b", [-, "ccb"]]]).
/**["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Symbols 3 of 4.txt",0,algorithms,"25.  *I prepared to connect deconstruction with supplement by stating the meaning had an original reason.  I did this by connecting Derrida’s deconstruction with Lucian’s philosophy.  First, I found the supplement (secondary thought from the following that is original or natural) of pedagogy was oppressiveness (freedom).  Second, I found the supplement of medicine was reaching nothingness.  Third, I found the supplement of meditation (philosophy) was bliss.  In this way, I prepared to connect deconstruction with supplement by stating the meaning had an original reason by connecting Derrida’s deconstruction with Lucian’s philosophy."][debug]  ?- original_reason(W,M,R).W = banana,M = medication,R = watch ;W = banana,M = medication,R = eat ;W = apple,M = medication,R = watch ;W = apple,M = medication,R = eat ;**/original_reason(Word,Meaning,Reason) :- word(Word), meaning(Meaning),forall(true,not(meaning(Word,Meaning))),reason(Reason),forall(true,not(reason(Meaning,Reason))).
/**algorithmstopredicates1([],Predicates1,Predicates1) :-!.
/**expression(N) :-isval(N);(string(N);atom(N)),!.
/**find_calls2(Program1,Program2,Program3) :-Program1=[Line|Program41],Line=[[n,code]|Program42],find_calls2(Program41,Program2,Program5),append(Program5,Program42,Program6),find_calls2(Program6,[],Program3).
/**iv3s0([],_,IV3s1,IV3s2).
/**iv3s0([],_,IV3s1,IV3s2).iv3s0(IV3s,Program0,IV3s1,IV3s2).
/**mind_read(Item,List0) :-random_member(Item,List0).
/**no_more_than_one_parent_of_each_node_before1([N4,_A,_N3],Options61) :-%%member([_N2,_A1,N4],Options61),%%trace,findall([N4,_,N5],(member([N4,_,N5],Options61),N4=1),B),not(B=[]),%%->true;fail),%%B=[]),%%(B=[_]->true;fail),!.
/**unique1([Item|Items1],Items2,Items3) :-delete(Items1,Item,Items4),append(Items2,[Item],Items5),unique1(Items4,Items5,Items3).
/**varnames([L1|Ls]) --> varname1(L1),",", %%{writeln(L)}, %%***varnames(Ls), !. varnames([L1]) --> varname1(L1),!.
/****optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program2) :-findrulesflowingtopv1(Program1,InputVars1,InputVars2,PenultimateVars,[],Rules,true),%%findrulesflowingtopv1a(Program1,_Program32,InputVars1,InputVars2,PenultimateVars,[],_Rules1),intersection(Program1,Rules,Program3),unique1(Program3,[],Program2).
/**:- include('listprologinterpreter3preds5.pl').
/**add_furthest_rule2(New_rule_number,Number,_Rules,Program1) :-New_rule_number>Number,retractall(furthest_rule(_)),   assertz(furthest_rule([New_rule_number,[Program1]])),!.
/**add_furthest_rule2(New_rule_number,Number,_Rules,_Program1) :-New_rule_number<Number,!.
/**cawptest2(3,add,[[[n,[]],1,0],[[n,"_"],1,0]],4,1,4,[1,2,3],[0,1],[[[[[[v,a],[]],[[v,b],3],[[v,c],[4,5,6]]],[[[v,d],[4,5,6]]],true]]],[ %% Algorithm dictionary],%% Result[[[n,add],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,[]],[[v,a]]],[[n,"_"],[[v,a]]],[[n,"_"],[[v,b]]],[[n,=],[[v,c],[v,d]]]]]]).
/**cawptest2(3,add,[[[n,[]],1,0],[[n,"_"],1,0]],4,1,4,[1,2,3],[0,1],[[[[[[v,a],[]],[[v,b],3],[[v,c],[4,5,6]]],[[[v,d],[4,5,6]]],true]]],[ %% Algorithm dictionary],%% Result[[[n,add],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,[]],[[v,a]]],[[n,"_"],[[v,a]]],[[n,"_"],[[v,b]]],[[n,=],[[v,c],[v,d]]]]]]).**/:- dynamic debug/1.
/**delete1(Item1,Item2,Item3) :-((isvalstr(Item1),Item1A=[Item1]);(not(isvalstr(Item1)),Item1A=Item1)),        ((isvalstr(Item2),Item2A=[Item2]);(not(isvalstr(Item2)),Item2A=Item2)),        %%((isvalstr(Item3),Item3A=[Item3]);(not(isvalstr(Item3)),Item3A=Item3)),delete(Item1A,Item2A,Item3).
/**interpretstatement1(_Functions0, _Functions,_Query,_Vars1,_Vars2,false) :-writeln([false]).
/**interpretstatement1(ssi,_Functions0, _Functions,_Query,_Vars1,_Vars2,false) :-writeln1([false]).
/**isvalstrempty(N) :-atom(N),fail,!.
/**isvalstrempty(N) :-atom(N),fail,!.**/isvalstrorundef(N) :- var(N),!.
/**isvalstrempty(N) :-atom(N),fail,!.**/isvalstrorundef(N) :- var(N);(not(var(N)),(isval(N);expression(N))).undef(N) :-var(N)./**expression(N) :-isval(N);(string(N);atom(N)),!.
/**isvalstrempty(N) :-isval(N);(string(N);N=empty).**/isvalstrempty(N) :-isval(N),!.
/**isvalstrempty(N) :-isval(N);(string(N);N=empty).**/isvalstrempty(N) :-var(N),!.
/**relations2(Item1,Range1,ItemNumber1,Position1,Items1,_OutputLabels,_Inputs2Labels,_ExtrasLabels,Relations1,Relations2,ExtrasRelations,ExtrasRelations) :-writeln(r21),member(Item2a,Items1),Item2a=[Item2,_Type2,Range2,ItemNumber2,Position2],Item1=Item2,append(Relations1,[[Item1,Range1,ItemNumber1,Position1],[Item2,Range2,ItemNumber2,Position2]],Relations2).
/**removetoolongandnotrhyming(Lyrics0,Lyrics1,SyllableCount,Verbs1,Verbs2,Objects1,Objects2) :-%% makes list of all combos, checks, asks, asksremovetoolong1(Lyrics1,SyllableCount,Verbs1,[],Verbs3), %% do after end* %% not until object%% find v xremovenotrhyming1(Lyrics0,Verbs3,Verbs4),removetoolong1(Lyrics1,SyllableCount,[],Verbs,Verbs) :- !.%*removetoolong1(Lyrics1,SyllableCount,Verbs1,Verbs2,Verbs3) :-Verbs1=[Verb4|Verbs5],append_list(Lyrics1,Verb4,Lyrics2),length(Lyrics2,Length),(Length<=SyllableCount->(append(Verbs2,[Verb4],Verbs6),removetoolong1(Lyrics1,SyllableCount,Verbs5,Verbs6,Verbs3));(removetoolong1(Lyrics1,SyllableCount,Verbs5,Verbs2,Verbs3))).
/**trytranslations1([[_,String]],FromLang,ToLang,Flag1,Flag2,List1,List3,String1,String2) :-translate1(String,FromLang,ToLang,Output2),String4=[String,Output2],translate1(Output2,ToLang,FromLang,Stringa),(String=Stringa->(Flag2=true,String2=String4,append(List1,[[String,"",Output2]],List3));(Flag1=Flag2,String2=String1,append(List1,[[String,Stringa,Output2]],List3))),!.**/trytranslations1([[Original,PreviousBT1]|Outputs],FromLang,ToLang,Flag1,Flag2,List1,List2,String1,String2) :-(PreviousBT1=""->String=Original;String=PreviousBT1),translate(String,FromLang,ToLang,Output2),String4=[String,Output2],translate(Output2,ToLang,FromLang,Stringa),(String=Stringa->(Flag3=true,String3=String4,append(List1,[[String,"",Output2]],List3));(Flag3=Flag1,String3=String1),append(List1,[[String,Stringa,Output2]],List3)),trytranslations1(Outputs,FromLang,ToLang,Flag3,Flag2,List3,List2,String3,String2),!.
/**updatevars(_FirstArgs,[],Vars,Vars).
/**updatevars(_FirstArgs,[],Vars,Vars).updatevars(FirstArgs,Vars1,Vars2,Vars3) :-        Vars1=[[Variable1,Value]|Vars4],((member([Variable2,Variable1],FirstArgs), %% removed brackets around firstargs here and 2 line belowappend(Vars2,[[Variable2,Value]],Vars5))->true;(member([Variable1,_Variable2],FirstArgs),append(Vars2,[[Variable1,Value]],Vars5))),updatevars(FirstArgs,Vars4,Vars5,Vars3),!.
/*append1(L1,A0,A01,A02) :-append(A,B,A0),append(C,D,B),append(A01,[A,C,D],A02).%append(A1,B1,D),%append(C1,D1,B1).
/*convert_tokens_to_nested_list(T,R,C,Tokens, NestedList) :-    parse_tokens(T,R,C,Tokens, [], NestedList).
/*line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"is",%name2(Word21), %spaces1(_), name1(Word11),{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),A=[[n,=],[Word10a,Word11a]]},!.
/*list_to_set1(A,B,C) :- A=[D|E], (E=[]->append(B,[D],C); ((D=[[n,comment],[String]],string(String),string_strings(String,C1),contains_assignment(C1))-> (E=[E1|E2], ((E1=[[n,comment],[String1]],string(String1),string_strings(String1,C2),contains_assignment(C2))->(append(B,[D],G),list_to_set1(E2,G,C));(append(B,[D],G),list_to_set1(E,G,C))));  (%E=F,% ((append(E3,E4,E), append([D],E5,E4), foldr(append,[E3,E5],F))->true; E=F), %delete(E,D,F), append(B,[D],G), list_to_set1(F,G,C)))),!.
/*texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish) :-texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,0,[auto,off]).
11 1111 2edge(10, 10, 2, 2, 2, 9, 8, 5, 5, 5).Point is in triangle.
11 1211  edge(3, 3, 1, 1, 1, 3, 3, 2, 3, 1).
8,[2],[1],%% Numinputs, Numoutputs tested for[    [[[[[v,a],1],[[v,b],1],[[v,c],2],[[v,d],1]],[[[v,e],5]],true],    [[[[v,a],2],[[v,b],2],[[v,c],2],[[v,d],1]],[[[v,e],7]],true]]],[],%% add options to remove extra choice points%% test on lpiv%% caw00(off,add0,[[[n,+],2,1]],4,1,8,[2,4],[1],[[[[[[v,a],1],[[v,b],1],[[v,c],2],[[v,d],1]],[[[v,e],5]],true],[[[[v,a],2],[[v,b],2],[[v,c],2],[[v,d],1]],[[[v,e],7]],true]]],[],[],P).
8,[2],[1],%% Numinputs, Numoutputs tested for[    [[[[[v,a],1],[[v,b],1],[[v,c],2],[[v,d],1]],[[[v,e],5]],true],    [[[[v,a],2],[[v,b],2],[[v,c],2],[[v,d],1]],[[[v,e],7]],true]]],[],%% add options to remove extra choice points%% test on lpiv%% caw00(off,add0,[[[n,+],2,1]],4,1,8,[2,4],[1],[[[[[[v,a],1],[[v,b],1],[[v,c],2],[[v,d],1]],[[[v,e],5]],true],[[[[v,a],2],[[v,b],2],[[v,c],2],[[v,d],1]],[[[v,e],7]],true]]],[],[],P).%% x:[[[n,add0],[[v,a],[v,b],[v,c],[v,d],[v,e]],":-",[[[n,+],[[v,a],[v,b],[v,f]]],[[n,+],[[v,c],[v,f],[v,g]]],[[n,+],[[v,d],[v,g],[v,h]]],[[n,=],[[v,h],[v,e]]]]]]).**/% ["Computational English","COMPUTATIONAL ENGLISH by Lucian Green Conglish Reflection 2 of 4.txt",0,algorithms,"14.   *I prepared to serve the vegetable burger.  I did this by cooking the vegetable patty.  First, I made the patty from semolina, soy and carrot.  Second, I minced it up.  Third, I cooked it.  In this way, I prepared to serve the vegetable burger by cooking the vegetable patty."]cawptest2(8,append1,[[[n,append],2,1%% Modes=2 inputs, 1 output]],3,1,%% MaxPredicates is not the number of predicates in the result, it is the number of non-dictionary predicates in the result.
:- http_handler('/', eh_form, []).% http://localhost:8000/a:-include('../Lucian-Academy/short_essay_helper3_agps.pl').
:- http_handler('/', ssi_web_form, []).
:- http_handler('/', web_form, []).
:- http_handler('/', web_form, []).%:- include('files/listprolog.pl').
:- http_handler('/a', run_lp_form, []).
:- http_handler('/gitl', gitl_web_form, []).
:- http_handler('/luciancicd', luciancicd_web_form, []).
:- http_handler('/paraphraser', paraphraser_web_form, []).
:- http_handler('/webeditor', get_pw, []).
:- include('../../../../../Essay-Helper/short_essay_helper3.1_chicago.pl').
:- include('../../GitHub/listprologinterpreter/la_files.pl').
:- include('../../Text-to-Breasonings/texttobr2qb').
:- include('../../mindreader/mindreadtestshared').
:- include('../../mindreader/mindreadtestshared').:-include('../../listprologinterpreter/la_strings.pl'). %**** change path on server:-include('../../listprologinterpreter/la_strings_string.pl'). %**** change path on server:-include('../../listprologinterpreter/la_maths.pl'). %**** change path on serversectest_h(Person):-find_time1(H,M,S),bs_before_meditation(0,Threats1),% no_death(0,Threats2), % medits for lifewriteln([Person,H,M,S,Threats1,bs_before_meditation]).
:- include('../../mindreader/texttobr2qb').
:- include('../Algorithm-Writer-with-Lists/grammar_logic_to_alg_random').
:- include('../Languages/make_docs.pl').
:- include('../Languages/make_docs.pl').:- include('../SSI/find_pred_sm.pl').:- include('../listprologinterpreter/e4_fa_get_vals.pl').
:- include('../Music-Composer/mindreadtestmusiccomposer-unusual-mr-tree.pl').
:- include('../Philosophy/sub_term_with_address.pl').
:- include('../Prolog-to-List-Prolog/pretty_print.pl').% translates list prolog code between ``% in the following, translates v, doesn't translate x% v< x > v < x > % v & x &%translate(A,_,_,_) :-%writeln([here,A]),abort.
:- include('../SSI/find_pred_sm.pl').
:- include('../Text-to-Breasonings/mergetexttobrdict.pl').
:- include('../Text-to-Breasonings/mergetexttobrdict.pl').%:- include('../listprologinterpreter/la_strings').%:- include('../Philosophy/14 10 23.pl').
:- include('../Text-to-Breasonings/text_to_breasonings.pl').
:- include('../Text-to-Breasonings/text_to_breasonings.pl').%:-include('21 10 23.pl').
:- include('../Text-to-Breasonings/texttobr.pl').t2alg3(N1,Filex1,Stringx1,M1) :-t2alg3(N1,Filex1,Stringx1,M1,false,false,false,false,false,false,0).
:- include('../Text-to-Breasonings/texttobr2qb').
:- include('../Text-to-Breasonings/texttobr2qb.pl').
:- include('../Text-to-Breasonings/texttobr2qb.pl').%%sectest0 :-%%repeat,sectest,sectest0.
:- include('../Text-to-Breasonings/texttobrall2_reading.pl').
:- include('../Text-to-Object-Name/t2on_repeating_text.pl').
:- include('../listprologinterpreter/collect_arguments.pl').
:- include('../listprologinterpreter/e4_fa_get_vals.pl').
:- include('../listprologinterpreter/expand_types.pl').
:- include('../listprologinterpreter/expression_not_var.pl').
:- include('../listprologinterpreter/grammar.pl').
:- include('../listprologinterpreter/la_files.pl').
:- include('../listprologinterpreter/la_maths').
:- include('../listprologinterpreter/la_maths').:- include('../mindreader/make_mind_reading_tree4 working1.pl').
:- include('../listprologinterpreter/la_maths.pl').
:- include('../listprologinterpreter/la_string_codes.pl').
:- include('../listprologinterpreter/la_strings').
:- include('../listprologinterpreter/la_strings.pl').
:- include('../listprologinterpreter/la_strings.pl').:- include('../listprologinterpreter/la_string_codes.pl').
:- include('../listprologinterpreter/la_strings_string').
:- include('../listprologinterpreter/listprolog').
:- include('../listprologinterpreter/listprolog.pl').
:- include('../listprologinterpreter/listprologinterpreter1listrecursion4.pl').
:- include('../listprologinterpreter/listprologinterpreter3preds5.pl').
:- include('../listprologinterpreter/lpiverify4.pl').
:- include('../listprologinterpreter/lpiverify4_open.pl').
:- include('../listprologinterpreter/lpiverify4_open_types.pl').
:- include('../listprologinterpreter/lpiverify4_test_bt_lang_all.pl').
:- include('../listprologinterpreter/lpiverify4_test_lang_all.pl').
:- include('../listprologinterpreter/lpiverify4_types.pl').
:- include('../listprologinterpreter/match_get_put_vals.pl').
:- include('../listprologinterpreter/operators.pl').
:- include('../listprologinterpreter/preds_converters_and_matrices.pl').
:- include('../listprologinterpreter/preds_converters_and_matrices.pl').%:- include('numbers_of_items_correspond.pl').
:- include('../listprologinterpreter/replace_in_term.pl').
:- include('../listprologinterpreter/reserved_words2.pl').
:- include('../mindreader/make_mind_reading_tree4 working1.pl').
:- include('../mindreader/mindreadtestshared').
:- include('../mindreader/mindreadtestshared').:-include('../listprologinterpreter/la_strings_string.pl'). %**** change path on server:-include('../listprologinterpreter/la_maths.pl'). %**** change path on serversectest_p:-phrase_from_file_s(string([N,_]), "a_tally.txt"),%string_codes(String02b,String00a),%atom_to_term(String00a,[N,_],[]),numbers(N,1,[],Ns),findall(_,(member(N1,Ns),find_time1(H,M,S),politeness(0,Threats1),politeness(0,Threats2),politeness(0,Threats3),politeness(0,Threats4),% no_death(0,Threats2), % medits for lifewriteln([N1,H,M,S,Threats1,politeness]),writeln([N1,H,M,S,Threats2,humour]),writeln([N1,H,M,S,Threats3,connections]),writeln([N1,H,M,S,Threats4,appearances])),_).%,Threats2,no_death]).
:- include('../mindreader/mr_tree.pl').
:- include('../private/la_com_ssi1.pl').
:- include('../private/la_com_ssi1_run_in_prolog.pl').
:- include('1451').
:- include('1451').:- include('1564').
:- include('1451-4').
:- include('1451-4').:- include('1564-4').
:- include('1564').
:- include('1564-4').
:- include('1645').
:- include('1645').:- include('popclassical').
:- include('1645-4').
:- include('1645-4').:- include('popclassical-4').
:- include('br_alg_gen.pl').
:- include('caw5 copy 11.pl').
:- include('caw5 copy 12.pl').
:- include('cawpverify.pl').
:- include('cawpverifya.pl').
:- include('classical').
:- include('classical').:- include('la_strings').
:- include('classical-4').
:- include('collect_arguments.pl').
:- include('collect_simplify_types.pl').
:- include('data_to_alg3.pl').
:- include('data_to_alg5.pl').
:- include('e4_fa_get_vals.pl').
:- include('edit.pl').meditation :-File="I love you, I love you, I love you.  Arem.",Utterances=[lucianicmeditationapps,dailyregimen,nobodyproblemsapp,lucian, green, friendliness, medicine, childrenh1earningjobsprotectioninjobs,headsofstate,lucianmantrapureform,lucianmantrasunsafety,maharishisutra,meditationteachersutra,movingappearances,purusha,upasanasutra,yellowgod,greensutra,bluenature,appearances,pranayama,soma,hoursprayer,fiftybreasoningspersecond,meditationindicatorlowerriskofcancerandotherdiseasesinworkersandbroadcasters,meditationindicatordecreasedstress,meditationindicatorincreasedbloodflow,meditationincreasedbrainpotential,autobiography,computationalenglish,computerscience,economics,hermeneutics,pedagogy,breasonings,quantumbox,lucianicmeditation,lm,meditation,metaphysics,music,plays,popology,theology, qigongmantra,qigongsutra, yogamantra,yogasutra],%% initiate_utterances(File,Utterances),%% currentDate(Today),%% Today=date(Year,Month,Day),meditators(Meditators),length(Utterances,UL),length(Meditators,ML),Length2 is UL+ML,texttobr2(Length2,u,File,u),texttobr(Length2,u,File,u),!.
:- include('expression_not_var.pl').
:- include('files/Combination-Algorithm-Writer-Stable/caw5copy11.pl').
:- include('files/Combination-Algorithm-Writer-Stable/listprologinterpreter3preds5copy52.pl').
:- include('files/Combination-Algorithm-Writer-Stable/lpi_caw_commands.pl').
:- include('flatten_var_term.pl').:- include('replace_in_term3.pl').
:- include('folders.pl').
:- include('gen_alg.pl').
:- include('grammar.pl').
:- include('instruments_mr-tree.pl').
:- include('la_files.pl').
:- include('la_maths.pl').
:- include('la_string_codes.pl').
:- include('la_strings').
:- include('la_strings.pl').
:- include('la_strings_string.pl').
:- include('listprologinterpreter1listrecursion4.pl').
:- include('listprologinterpreter3preds5.pl').
:- include('lpi_caw_commands.pl').
:- include('lpiverify4.pl').
:- include('lpiverify4_open.pl').
:- include('lpiverify4_open_types.pl').
:- include('lpiverify4_open_types.pl').%%:- include('caw5 copy 12.pl').
:- include('lpiverify4_test_bt_lang_all.pl').
:- include('lpiverify4_test_bt_lang_all.pl').:- include('../Languages/make_docs.pl').
:- include('lpiverify4_test_lang_all.pl').
:- include('lpiverify4_types.pl').
:- include('lpiverify_pl.pl').
:- include('match_get_put_vals.pl').
:- include('meditatorsanddoctors.pl').
:- include('mergetexttobrdict').
:- include('mind_read_la_strings.pl').
:- include('mind_read_mr_tree.pl').
:- include('mindreadtestmusiccomposer-unusual').
:- include('mindreadtestmusiccomposer-unusual-mr').
:- include('mindreadtestmusiccomposer-unusual-mr-tree').
:- include('mindreadtestmusiccomposer-unusual-ui').
:- include('mindreadtestmusiccomposer-unusual-ui-rhythm').
:- include('mindreadtestshared').
:- include('mindreadtestshared').:- include('listprologinterpreter1listrecursion4.pl').
:- include('operators.pl').
:- include('paraphraser1.pl').
:- include('pft_expand_types.pl').
:- include('popclassical').
:- include('popclassical-4').
:- include('preds_converters_and_matrices.pl').
:- include('program_finder.pl').
:- include('remove_duplicate_predicates.pl').
:- include('remove_duplicate_predicates.pl').:- include('cawpverifya.pl').
:- include('replace1.pl').
:- include('replace_in_term.pl').
:- include('replace_nothing_with_v.pl').
:- include('replace_v_with_nothing.pl').
:- include('reserved_words2.pl').:- include('expand_types.pl').
:- include('sheet_feeder.pl').
:- include('simplify_types_with_n.pl').:- include('../Prolog-to-List-Prolog/p2lpconverter.pl').:- include('collect_ga_parts.pl').
:- include('text_to_breasonings1.pl').
:- include('text_to_breasonings3.pl').
:- include('text_to_breasonings4.pl').
:- include('texttobr').
:- include('texttobr2qb').
:- include('texttobr2qb.pl').
:- include('translate4.pl').
:- include('web-editor-pw.pl').web_editor_server(Port) :-        http_server(http_dispatch, [port(Port)]).
:- include(library(edit)).
:- initialization(catch(main, Err, handle_error(Err))).
:- use_module(library(date)).
:- use_module(library(date)).:-include('luciancicd.pl').
:- use_module(library(http/html_write)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_dispatch)).:- use_module(library(http/http_error)).
:- use_module(library(http/http_error)).
:- use_module(library(http/http_error)).:- use_module(library(http/html_write)).
:- use_module(library(http/json)).
:- use_module(library(http/thread_httpd)).
:- use_module(library(http/thread_httpd)).:- use_module(library(http/http_dispatch)).
:-include('../../LuciansHandBitMap-Font/characterbr.pl').
:-include('../../listprologinterpreter/la_files.pl').
:-include('../../listprologinterpreter/la_maths.pl').
:-include('../../listprologinterpreter/la_strings.pl').
:-include('../../listprologinterpreter/la_strings.pl').:-include('../../listprologinterpreter/la_strings_string.pl').
:-include('../../listprologinterpreter/la_strings.pl'). %**** change path on server:-include('../../listprologinterpreter/la_strings_string.pl'). %**** change path on server:-include('../../listprologinterpreter/la_maths.pl'). %**** change path on serversectest_h(Person):-find_time1(H,M,S),humour(0,Threats1),% no_death(0,Threats2), % medits for lifewriteln([Person,H,M,S,Threats1,humour]).
:-include('../../listprologinterpreter/la_strings_string.pl').
:-include('../../listprologinterpreter/la_strings_string.pl').:-include('../../listprologinterpreter/la_maths.pl').
:-include('../../listprologinterpreter/listprolog.pl').
:-include('../../mindreader/make_mind_reading_tree4 working1.pl').
:-include('../Algorithm-Writer-with-Lists/grammar_logic_to_alg.pl').:-include('breasoning_and_detail_log.pl').
:-include('../Algorithm-Writer-with-Lists/grammar_logic_to_alg1.pl').
:-include('../List-Prolog-Package-Manager/lppm.pl').
:-include('../List-Prolog-to-Prolog-Converter/lp2pconverter.pl').
:-include('../List-Prolog-to-Prolog-Converter/lp2pconverter1.pl').
:-include('../List-Prolog-to-Prolog-Converter/lp2pconverter2.pl').
:-include('../Lucian-Academy/folders.pl').
:-include('../LuciansHandBitMap-Font/characterbr.pl').
:-include('../LuciansHandBitMap-Font/characterbr1.pl').
:-include('../Music-Composer/mindreadtestmusiccomposer-unusual-mr-tree.pl').
:-include('../Philosophy/bell.pl').main:-catch(attention_needed_bell,Err,handle_error(Err)),halt.
:-include('../Philosophy/debug_tools.pl').
:-include('../Philosophy/expand_topic.pl').:-include('term_to_html.pl').
:-include('../Philosophy/philosophy/word_count.pl').
:-include('../Philosophy/pretty_print_table.pl').
:-include('../Philosophy/pretty_print_table.pl').:-dynamic variable_n/1.ssff :-%retractall(formula_n(_)),%assertz(formula_n(1)),% creates database, then queries it% finds common formulas in folder of filesFolder="training",foldr(string_concat,[Folder,"/"],Path),directory_files(Path,F),delete_invisibles_etc(F,G),% all instances of q/a for a model in one file% formulas in saved patterns file, 31 march, denominator 3, (u/f) un/favourable, which machine, q1 recog key terms% connectives% empty line tables [] are deleted, number tables, use formulas everywhere% learns to apply 2<->two when multiple qas% once run, find a with q% will work out a from q text file% html output% do all models from mid trim answers, sample exam, other mentioned weeksfindall([Filex1,Additional_variables,QAs],(member(Filex1,G),string_concat(Path,Filex1,Filex),% Additional_variables are [label,var]open_file_s(Filex,Data),member([Additional_variables,QAs],Data)),Texts1),% splits Q, A into tablesfindall([Filex1,Ad1,QA2],(member([Filex1,Ad,QA],Texts1),split_into_tables(Ad,Ad1),findall([Q1,A1],(member([Q,A],QA),%trace,split_into_tables(Q,Q1),split_into_tables(A,A1)),QA2)),ST),findall(_,(member([Filex1,Ad1,Q1A1],ST),member([Q1,A1],Q1A1),%trace,find_formulas(Ad1,Q1,A1,Ad2,Q2,A2),Folder2="models",foldr(string_concat,[Folder2,"/",Filex1],Path2),pretty_print_table([Ad2,Q2,A2],Atom),save_file_s(Path2,Atom)),_),!.
:-include('../Philosophy/replace1.pl').
:-include('../Philosophy/s2a/spec_to_algorithm.pl').
:-include('../Philosophy/s2a/strings_atoms_numbers.pl').
:-include('../Philosophy/sub_term_with_address.pl').
:-include('../Philosophy/sub_term_with_address.pl').:-include('../Daily-Regimen/chatgpt_qa.pl').
:-include('../Philosophy/web-editor.pl').
:-include('../Prolog-to-List-Prolog/p2lpconverter.pl').
:-include('../Prolog-to-List-Prolog/pretty_print.pl').
:-include('../Prolog-to-List-Prolog/pretty_print_lp2p.pl').
:-include('../Prolog-to-List-Prolog/pretty_print_lp2p.pl').%:-include('../Alg_to_Types/find_dependencies.pl').
:-include('../SSI/ssi.pl').
:-include('../SSI/ssi.pl').sm_to_lp(Algorithm1,Algorithm2) :-sm_to_lp(Algorithm1,[],Algorithm2),!.
:-include('../SSI/ssi.pl').%:-include('../listprologinterpreter/listprolog.pl').:-include('family_sols.pl').
:-include('../State-Machine-to-List-Prolog/sm_to_lp.pl').
:-include('../Text-to-Breasonings/meditationnoreplace2.pl').
:-include('../Text-to-Breasonings/meditatorsanddoctors.pl').
:-include('../Text-to-Breasonings/prompt_meditation1.pl').
:-include('../Text-to-Breasonings/prompt_question1.pl').
:-include('../Text-to-Breasonings/text_to_breasonings.pl').
:-include('../Text-to-Breasonings/text_to_breasonings1.pl').
:-include('../Text-to-Breasonings/text_to_breasonings3.pl').
:-include('../Text-to-Breasonings/texttobr.pl').
:-include('../Text-to-Breasonings/texttobrall2_reading.pl').
:-include('../Text-to-Breasonings/texttobrall2_reading3.pl').
:-include('../Text-to-Breasonings/texttobrall2_reading4.pl').
:-include('../Text-to-Object-Name/t2on_reading.pl').
:-include('../Time_Machine/analogy_generator_n.pl').
:-include('../Time_Machine/t2b_br_adder.pl').
:-include('../gitl/find_files.pl').
:-include('../gitl/gitl_ws1.pl').%:-include('../gitl/diff.pl').
:-include('../listprologinterpreter/la_files.pl').
:-include('../listprologinterpreter/la_maths.pl').
:-include('../listprologinterpreter/la_maths.pl').grammar_logic_to_alg2(First_n_words) :-% get filephrase_from_file_s(string(String1),"../Text-to-Breasonings/file.txt"),% split into lines and sentences%SepandPad2="\n\r",SepandPad1="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",string_codes(String1b,String1),downcase_atom(String1b,String1c),string_codes(String1c,String1a),split_string(String1a,SepandPad1,SepandPad1,String21),length(String21,L),(L<First_n_words->First_n_words1=L;First_n_words1=First_n_words),length(String2,First_n_words1),append(String2,_,String21),%phrase_from_file_s(string(BrDict0), "../../Text-to-Breasonings/brdict1.txt"),phrase_from_file_s(string(BrDict0), "../Text-to-Breasonings/brdict1.txt"),splitfurther(BrDict0,Term),%trace,phrase_from_file_s(string(BrDict3), "../Algorithm-Writer-with-Lists/brdict3.txt"),string_codes(String02ba,BrDict3),atom_to_term(String02ba,Term1,[]),/**phrase_from_file_s(string(BrDict4), "first-words.txt"),string_codes(String02b,BrDict4),atom_to_term(String02b,String02a,[]),**/%trace,% Finds additions to brdict3.txt (box,values)process_file(String2,Term,Term1,%String02a,%[],Additions_to_brdict3,[],Pseudo_algorithms%,%[],%First_words),%***append(Term1,Additions_to_brdict3,Additions_to_brdict3_2),term_to_atom(Additions_to_brdict3,String02a_b),string_atom(String02a_c,String02a_b),(open_s("../Algorithm-Writer-with-Lists/brdict3.txt",write,Stream1),write(Stream1,String02a_c),close(Stream1)),!,%***append(String02a,First_words,First_words_2),/**term_to_atom(First_words,First_words_2_b),string_atom(First_words_2_c,First_words_2_b),(open_s("first-words.txt",write,Stream2),write(Stream2,First_words_2_c),close(Stream2)),!,**/writeln1(Pseudo_algorithms),!,random_member(Summary_algorithm,Pseudo_algorithms),writeln1("Summary algorithm:"),writeln1(Summary_algorithm).
:-include('../listprologinterpreter/la_strings').
:-include('../listprologinterpreter/la_strings.pl').
:-include('../listprologinterpreter/la_strings_string.pl').
:-include('../listprologinterpreter/la_strings_string.pl'). %**** change path on server:-include('../listprologinterpreter/la_maths.pl'). %**** change path on server:-include('../Text-to-Breasonings/text_to_breasonings.pl').:-include('../Algorithm-Writer-with-Lists/grammar_logic_to_alg.pl').
:-include('../listprologinterpreter/listprolog.pl').
:-include('../listprologinterpreter/listprolog.pl').main:-catch((shell1_s("swipl --goal=main --stand_alone=true -o cat_alg_files -c cat_alg_files1.pl"),shell1_s("./cat_alg_files")),Err,handle_error(Err)),halt.
:-include('../listprologinterpreter/operators.pl').
:-include('../listprologinterpreter/simplify_types.pl').
:-include('../luciancicd/ci_vintage.pl').
:-include('../luciancicd/diff-cgpt.pl').:-include('gitl_ws.pl').
:-include('../luciancicd/remove_end_comment.pl').
:-include('../s2g/strings_to_grammar.pl').
:-include('../strings_to_grid.pl').
:-include('../sub_term_with_address.pl').%:-include('test15.pl').
:-include('../t2ab/t2ab.pl').
:-include('../texttoalg/texttoalg.pl').
:-include('autocomplete.pl').
:-include('auxiliary_s2a.pl').
:-include('auxiliary_s2a2.pl').
:-include('big_connections_with_bag3_and_mr_short_books_aa540_algs_init.pl').
:-include('big_connections_with_bag3_and_mr_short_books_aa540_args_init2.pl').
:-include('br_alg_gen2.pl').
:-include('bt-p2lp_test1.pl').
:-include('build_maze2d.pl').
:-include('bus_trans_sol.pl').
:-include('bus_trans_sol.pl').:-include('ssff_solve.pl').
:-include('calc.pl').
:-include('cat_alg_files.pl').
:-include('cat_arg_files.pl').
:-include('caw5copy11').
:-include('cawpverify.pl').
:-include('cgpt_combophil10-free.pl').
:-include('cgpt_combophil10.pl').
:-include('characterbr1.pl').
:-include('check_non_var.pl').
:-include('check_non_var0.pl').
:-include('ci.pl').
:-include('ci3.pl').%:-include('save_diff_html.pl').
:-include('ci_vintage.pl').
:-include('clean_formula.pl').
:-include('colours_to_image.pl').
:-include('convert_tokens_to_nested_list.pl').
:-include('cp_since_findall_start2.pl').
:-include('d.pl').:-include('e.pl').
:-include('diff-cgpt.pl').:-include('merge3.pl').
:-include('end_nested_findall.pl').
:-include('evaluate.pl').
:-include('family_test.pl').
:-include('find_dependencies.pl').
:-include('find_dependencies2-cgpt1.pl').
:-include('find_files.pl').
:-include('find_lists3.pl').
:-include('find_pred_sm.pl').
:-include('find_sums_in_term.pl').
:-include('find_tests_from_repos.pl').
:-include('flatten_keep_brackets.pl').
:-include('flush_after_last_findall').
:-include('flush_caches.pl').
:-include('folders1.pl').
:-include('gitl_ws1.pl').
:-include('grammar.pl').
:-include('grammar_logic_to_alg1.pl').
:-include('group_consecutive_items.pl').
:-include('keep.pl').
:-include('la_terms.pl').
:-include('la_vps.pl').
:-include('listprologinterpreter3preds5.pl').
:-include('listprologinterpreter3preds5copy52').
:-include('lp2pconverter1.pl').
:-include('lpi_caw_commands.pl').:-include('listprologinterpreter1listrecursion4copy52').
:-include('luciancicd_ws.pl').
:-include('luciancicd_ws1.pl').
:-include('luciancicdverify.pl').
:-include('luciancicdverify1.pl').
:-include('main.pl').
:-include('make_exercises.pl').
:-include('make_exercises2.pl').
:-include('meditationnoreplace2.pl').
:-include('meditatorsanddoctors').
:-include('meditatorsanddoctors.pl').
:-include('mind_read1.pl').
:-include('minimise_alg.pl').
:-include('move_to_repository_or_back.pl').
:-include('mr_alg.pl').
:-include('nns_alg_writer.pl').
:-include('only_ssi_verify4.pl').
:-include('optimisations.pl').
:-include('optimise_alg.pl').
:-include('p2lpverify.pl').
:-include('paraphraser1.pl').
:-include('paraphraser1_lp.pl').
:-include('paraphraser1_pl.pl').
:-include('pf_types.pl').
:-include('pft.pl').
:-include('phil_tree.pl').cs_tree(Tree) :-SepandPad_code=" &#@~%`$?;{}\n\r\s\t",test(1,_,Code1,_),test(2,_,Code2,_),test(3,_,Code3,_),test(4,_,Code4,_),maplist(append,[[Code1],[Code2],[Code3],[Code4]],Codes),findall(String5,(member(Code,Codes),term_to_atom(Code,Atom),string_atom(String1,Atom),split_string_onnonletter_by_itself(String1,"[],()|",String2),findall(String4,(member(String3,String2),split_string(String3,SepandPad_code,SepandPad_code,String4)),String4a),maplist(append,[String4a],[String5])),String6),sort(String6,Options1),abort_if_empty_string(Options1),string_to_list_b1(Options1,1,_,[],Options2),maplist(append,[Options2],[Options2a]),writeln1([options2a,Options2a]),make_mind_reading_tree4_a(Options2a,Tree).
:-include('port_fairy_map.pl').
:-include('pred_minus_one_fail2.pl').
:-include('pred_minus_three.pl').
:-include('pretty_print.pl').
:-include('pretty_print_lp2p.pl').
:-include('process_cp.pl').
:-include('prompt_meditation1.pl').
:-include('prompt_question1.pl').
:-include('remove_end_comment.pl').
:-include('remove_nd.pl').
:-include('replace2.pl').
:-include('replace_pred_names.pl').
:-include('replace_vars.pl').
:-include('rs_and_data_to_term.pl').
:-include('scaler.pl').
:-include('sessions.pl').
:-include('settings.pl').
:-include('short_essay_helper3_agps.pl').
:-include('simplify_types.pl').
:-include('simplify_types_with_n.pl')./*expand_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[Data2],not(Data2=[T,_]),expand_types1(Data2,[],Types4),Types5=Types4,append_list3([Types1,Types5],Types2),!.
:-include('spec_to_algorithm_test.pl').
:-include('spell_checker.pl').
:-include('ssff_solve.pl').
:-include('ssi-api-key.pl').
:-include('ssi-api.pl').
:-include('ssi3.pl').
:-include('ssi_3preds5.pl').
:-include('ssi_find_state_machine.pl').
:-include('ssi_verify4.pl').
:-include('ssi_verify4_open.pl').
:-include('ssi_verify4_open_types.pl').
:-include('ssi_verify4_test_bt_lang_all.pl').
:-include('ssi_verify4_test_lang_all.pl').
:-include('ssi_verify4_types.pl').
:-include('ssi_verify_pl.pl').
:-include('string_to_image.pl').
:-include('strings_atoms_numbers.pl').
:-include('strings_to_grid.pl').
:-include('sub_term_with_address.pl').
:-include('sub_term_with_address.pl').test_p(A) :- (catch(call_with_time_limit(10,A),_,(writeln1(["Predicate timed out:",A]),abort))->true;(writeln1(["Predicate failed:",A]),fail%abort)),!.
:-include('term_to_brackets.pl').
:-include('term_to_html.pl').
:-include('term_to_list.pl').
:-include('text_to_breasonings.pl').
:-include('transpose.pl').
:-include('used_by_call_command.pl').
:-include('vintage_ctt2/ctt2.pl').
:-include('web-editor.pl').
:-include('word_count.pl').
:-include('word_frequency_count.pl').
:-set_prolog_flag(stack_limit, 40000000000).
:-style_check(-singleton).
?- a([[a,b]],[[b,a]],[[a,a]],a,T).
?- add_to_detail_log(["string","word"]).
?- classicalcomposition('C','C#').
?- classicalcomposition('C','D#').
?- popclassicalcomposition('C','C#').
?- popclassicalcomposition('C','D#').
?- popclassicalcomposition('C','E').
?- popclassicalcomposition('C','E').?- popclassicalcomposition('C','D#').
?- vedic_mr("headache prevention app",R).
A = "A=[hill1, hill2, hill3],maplist(go,A).\ngo(A):-write(A).".
A = "A=[item1, item2, item3],foldr(plus,A,\"\",B).\nplus(A,B,C):-string_concat(A,B,C).".
A = "A=[paper1, paper2, paper3],maplist(to,A).\nto(A):-write(A).".
A = "A=[verify1, verify2, verify3],maplist(to,A).\nto(A):-write(A).".
A = "a" ;                                                              string_concat1("a",B,"ab").B = "b".*/string_concat1(A,B,C):-(((var(A),not(var(B)),var(C))->true;((not(var(A)),var(B),var(C))))->fail;(string_chars1(A,A1),string_chars1(B,B1),string_chars1(C,C1),append1(A1,B1,C1),string_chars1(A,A1),string_chars1(B,B1),string_chars1(C,C1))).
A = "yes 1". get_lang_word3("yes1","en","en2",A).
A = (append(b, c, l), append([b], e, c), append(f, g, e), append([d], j, g)).
A = (append(b, c, l), append([b], e, c), append(f, g, e), append([d], j, g)).reverse_engineering2([[[a,b,c,d],[b,c]]],A).
A = 1+4 ;A = 2+3 ;A = 3+2 ;A = 4+1 ;*/reverse_engineering1(N,A) :- numbers(N,1,[],Ns),member(N1,Ns),member(N2,Ns),N is N1 + N2,A=N1+N2. :-include('data_to_alg.pl').
A=[[m,1,[[f,s,[["a1",60],["Overall_grade",60]]]]]]enter_grade(f,s,m,"a2",70,[[m,1,[[f,s,[[a1,60],[Overall_grade,60]]]]]],A),writeln1(A).
A=[[m,1,[[f,s,[["a1",60],["a2",70],["Overall_grade",65]]]]]]*/enter_grade(First,Second,Subject,Assignment_name,Grade,Enrollments1,Enrollments2) :-member([Subject,Q,Enrollments3],Enrollments1),member([First,Second,Grades1],Enrollments3),delete(Grades1,[Assignment_name,_],Grades2),append(Grades2,[[Assignment_name,Grade]],Grades3),delete(Grades3,["Overall_grade",_],Grades4),%trace,findall(Grade2,(member([_,Grade2],Grades4)),Grades6),find_overall_grade(Grades6,Overall_grade),append(Grades4,[["Overall_grade",Overall_grade]],Grades5),delete(Enrollments3,[First,Second,Grades1],Enrollments4),append(Enrollments4,[[First,Second,Grades5]],Enrollments5),delete(Enrollments1,[Subject,Q,Enrollments3],Enrollments6),append(Enrollments6,[[Subject,Q,Enrollments5]],Enrollments2).
Breasoning Log[2021,3,21,20,8,35.75380301475525,3,words][2021,3,21,20,8,51.36218309402466,3,words]Detail Log[2021,3,21,19,32,43.984174966812134,1,words][2021,3,21,20,9,13.19822907447815,1,words][2021,3,21,20,11,5.764134883880615,1,words][2021,3,21,20,12,0.05728793144226074,1,words]**/add_to_breasoning_log([Type,Content]) :-get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),% add to breasoning log% add fileword_count([Type,Content],Words),phrase_from_file_s(string(String1), "brlog.txt"),string_codes(String02b,String1),atom_to_term(String02b,String02a,[]),append(String02a,[[Year,Month,Day,Hour1,Minute1,Seconda,Words,words]],String02c),term_to_atom(String02c,String02a_b),string_atom(String02a_c,String02a_b),(open_s("brlog.txt",write,Stream1),write(Stream1,String02a_c),close(Stream1)),!,concat_list(["brlog_",Year,Month,Day,Hour1,Minute1,Seconda],File1),(Type="file"->(concat_list(["cp ",Content," brlog/",File1,".txt"],Command),shell1_s(Command));((concat_list(["brlog/",File1,".txt"],File2),open_s(File2,write,Stream2),write(Stream2,Content),close(Stream2)),!)).
C = "c(A,B):-a(A,C),b(C,B).\na(A,B):-foldr(append,A,B).\nb(A,B):-flatten(A,C),foldr(string_concat,C,B).\n".
C=[[[n,findall1],[[v,a],[v,b]],":-",[[[n,findall],[[v,a1],[[n,member2],[[v,a],[v,a1]]],[v,b]]]]]]D=[[0,[n,findall1],[[v,a],[v,b]],":-",[[0,[n,findall],[[v,a1],[v,b],[[1,[n,member2],[[v,a],[v,a1]]]]]]]]][debug]  ?- find_state_machine1([[0,[n,findall1],[[v,a],[v,b]],":-",[[0,[n,findall],[[v,a1],[v,b],[[1,[n,member2],[[v,a],[v,a1]]]]]]]]],F,["+","-","*","/","abort","any","append","atom","brackets","call","ceiling","code","creep","cut","date","delete","equals1","equals2","equals3","equals4","equals4_on","equals4_off","exit","fail","grammar","head","is","length","letters","list","member","member2","member3","n","not","number","or","predicatename","random","round","skip","string","string_from_file","stringconcat","stringtonumber","sys","findall_sys","t","tail","true","unwrap","v","variable","vgp","wrap","input","output","string_length","sort","intersection","read_string","writeln","atom_string","trace","notrace","sqrt","notrace","get_lang_word"]),writeln1(F).
Computational EnglishCreating and Helping PedagoguesFundamentals of Meditation and Meditation IndicatorsFundamentals of Pedagogy and Pedagogy IndicatorsMedicineLecturerShort ArgumentsMind ReadingTime TravelDelegate workloads, Lecturer, RecordingsEnter Book of algorithm:|: LecturerMeditation.txtLecturer 2.txtComputer Science.txtLecturer Communication.txtMedicine.txtLecturer - Pedagogy Helper.txtLecturer Metaphysics.txtLecturer Societology.txtLecturer - Lecturer Pedagogy.txtLecturer - Pedagogy.txtLecturer Simulated Intelligence cont'd 2.txtLecturer Hermeneutics.txtLecturer Simulated Intelligence cont'd.txtLecturer - Simulated Intelligence.txtLecturer Lucianism.txtLecturer Culturology.txtLecturer.txtLecturer Rhetoric 2.txtLecturer Gay Studies.txtPolitics.txtLecturer - Comments.txtPeople Values.txtEnglish.txtLinguistics.txtLecturer - Recordings Pedagogy.txtHistory.txtLecturer Rhetoric.txtPhilosophy:Computational English.txtPsychology.txtLecturer Popology.txtLecturer - Simulated Intelligence 2.txtLecturer - Simulated Intelligence 3.txtEnter Essay of algorithm:|: Meditation.txt1Enter paragraph number of algorithm :|: 11Enter sentence number of algorithm :|: 2Enter what the algorithm is (verb(object)), how it will work and its data:|: v(o3),here,nowtrue.
Counter=4?- versechorussoloprogression('C','D').
Enter X co-ordinate of exit:|: 2Enter Y co-ordinate of exit:|: 2Enter X co-ordinate of starting position:|: 2Enter Y co-ordinate of starting position:|: 2[2,2][e]Game Over[*][*][*][*][e,+,-][*][*][*][*]?- maze_path(10,10,_).
Enter X co-ordinate of exit:|: 9Enter Y co-ordinate of exit:|: 9Enter X co-ordinate of starting position:|: 2Enter Y co-ordinate of starting position:|: 2[2,2][][3,2][][3,3][][2,3][][2,4][][3,4][][4,4][][4,3][][5,3][][6,3][][7,3][][8,3][][8,2][][9,2][][9,3][][10,3][][11,3][][11,2][][11,4][][10,4][][9,4][][8,4][][7,4][][6,4][][5,4][][8,5][][9,5][][9,6][][8,6][][7,6][][6,6][][5,6][][4,6][][3,6][][2,6][][2,5][][3,5][][2,7][][3,7][][4,7][][5,7][][6,7][][7,7][][8,7][][9,7][][10,7][][10,6][][11,6][][11,5][][11,7][][11,8][][11,9][][11,10][][10,10][][9,10][][8,10][][7,10][][6,10][][5,10][][4,10][][3,10][][2,10][][2,9][][2,8][][3,8][][3,9][][2,11][][3,11][][4,11][][5,11][][6,11][][7,11][][8,11][][9,11][][10,11][][11,11][][8,9][][8,8][][9,8][][9,9][e]Game Over[*][*][*][*][*][*][*][*][*][*][*][*][*][-][-][-][-][-][-][-][-][-][-][*][*][-][-][-][-][-][-][-][-][-][-][*][*][-][-][*][*][*][*][-][e,+,-][*][-][*][*][-][-][*][*][*][*][-][-][*][-][*][*][-][-][-][-][-][-][-][-][-][-][*][*][-][-][-][-][-][-][-][-][-][-][*][*][-][-][*][*][*][*][-][-][*][-][*][*][-][-][-][-][-][-][-][-][-][-][*][*][-][-][-][-][-][-][-][-][-][-][*][*][-][-][*][*][*][*][-][-][*][-][*][*][*][*][*][*][*][*][*][*][*][*][*]**/:-include('build_maze2d.pl').:-include('rpg_game_player_autorun2D.pl').maze_path(X2,Y2,Maze) :-X1 is X2+2,Y1 is Y2+2,grid(X1,Y1,Grid1),border(X1,Y1,Grid1,Grid2),numbers(5,1,[],Pathogens),findall(PX1,(member(_,Pathogens),random(X),PX4 is X2*X,ceiling(PX4,PX3),PX1 is 1+PX3),PX2),findall(PY1,(member(_,Pathogens),random(Y),PY4 is Y2*Y,ceiling(PY4,PY3),PY1 is 1+PY3),PY2),connector_points(PX2,PY2,Grid2,Grid3),writeln("Enter X co-ordinate of exit:"),read_string(user_input, "\n", "\r", _End3, X5),number_string(X6,X5),writeln("Enter Y co-ordinate of exit:"),read_string(user_input, "\n", "\r", _End4, Y5),number_string(Y6,Y5),delete(Grid3,[X6,Y6,_],Grid4),append(Grid4,[[X6,Y6,[e]]],Map4),retractall(map(_)),assertz(map(Map4)),get_map_dimensions2d(Map4),writeln("Enter X co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End1, X3),number_string(X4,X3),writeln("Enter Y co-ordinate of starting position:"),read_string(user_input, "\n", "\r", _End2, Y3),number_string(Y4,Y3),retractall(apply1(_)),assertz(apply1([])),retractall(path(_)),%assertz(path([]))),_),traverse(X4,Y4),!.
Enter filename (to be loaded from saved_games2d/-):|: eEnter X co-ordinate of starting position:|: 2Enter Y co-ordinate of starting position:|: 2Enter apply a to b giving c, in the form [[a1,b1,c1],[a2,b2,c2]]:|: [[a,b,e]][2,2][][3,2][][4,2][][5,2][][6,2][][6,3][][6,4][][4,3][][4,4][][3,4][][2,4][][4,5][][4,6][][3,6][][2,6][][5,6][b][6,6][b,a,e]Game Over% Execution Aborted**/:-include('../../listprologinterpreter/la_strings.pl').:-include('../../listprologinterpreter/la_strings_string.pl').
Enter number of input files:|: 2Enter file 1 path:|: ../Lucian-Academy/Books/IMMORTALITY/Immortality 1.txtEnter file 2 path:|: ../Lucian-Academy/Books/IMMORTALITY/Immortality 2.txt*/bag2phil(Br32) :-repeat,writeln("Enter number of input files:"),read_string(user_input,"\n\r","\n\r",_,S1),number_string(N,S1),numbers(N,1,[],N1),findall([T2,"\n",T3,"\n",T4,"\n"],(member(N2,N1),write("Enter file "),write(N2),writeln(" path:"),read_string(user_input,"\n\r","\n\r",_,S2),%open_s(S2,read,T1),read_term(T1,[T2,T3,_,T4]),close(S2)phrase_from_file_s(string(A),S2),term_to_atom([T2,T3,_,T4],A)%writeln(A1).),T5),%trace,flatten(T5,T6),%findall([T61,". "],member(T61,T6),T62),%flatten(T62,T63),foldr(string_concat,T6,T7),open_s("../Text-to-Breasonings/file.txt",write,S3),write(S3,T7),close(S3),%trace,br_alg_gen2(Br0),sort(Br0,Br),findall(T63,(member(T61,Br),string_concat(T61,". ",T63)),T62),%flatten(T62,Br11),length(T62,N3),N4 is N3 div 5,N6 is 5*N4,length(L,N6),append(L,L2,T62),divide(1,L,5,[],Br2),N8 is N4+1,append(Br2,[N8,". ",L2],Br3),flatten(Br3,Br31),foldr(string_concat,Br31,Br32),!.
Enter number of input files:|: 2Enter file 1 path:|: ../Lucian-Academy/Books/IMMORTALITY/Immortality 1.txtEnter file 2 path:|: ../Lucian-Academy/Books/IMMORTALITY/Immortality 2.txt*/bag2phil(Length,Twists,Br32) :-repeat,writeln("Enter number of input files:"),read_string(user_input,"\n\r","\n\r",_,S1),number_string(N,S1),numbers(N,1,[],N1),findall([T2,"\n",T3,"\n",T4,"\n"],(member(N2,N1),write("Enter file "),write(N2),writeln(" path:"),read_string(user_input,"\n\r","\n\r",_,S2),%open_s(S2,read,T1),read_term(T1,[T2,T3,_,T4]),close(S2)phrase_from_file_s(string(A),S2),term_to_atom([T2,T3,_,T4],A)%writeln(A1).
Enter number of input files:|: 2Enter file 1 path:|: ../Lucian-Academy/Books/IMMORTALITY/Immortality 1.txtEnter file 2 path:|: ../Lucian-Academy/Books/IMMORTALITY/Immortality 2.txt*/bag2phil(Length,Twists,Br32) :-repeat,writeln("Enter number of input files:"),read_string(user_input,"\n\r","\n\r",_,S1),number_string(N,S1),numbers(N,1,[],N1),findall([T2,"\n",T3,"\n",T4,"\n"],(member(N2,N1),write("Enter file "),write(N2),writeln(" path:"),read_string(user_input,"\n\r","\n\r",_,S2),%open_s(S2,read,T1),read_term(T1,[T2,T3,_,T4]),close(S2)phrase_from_file_s(string(A),S2),term_to_atom([T2,T3,_,T4],A)%writeln(A1).),T5),bag2phil2(Length,T5,Twists,Br32).
F=[[0,[n,findall1],[[v,a],[v,b]],":-",[[0,["on true",1],["go after",-2],["on false",-3],[n,findall],[[v,a1],[v,b]]],[1,["on true",[end_function,0]],["go after",-],["on false",-3],["go to predicates",-],[n,member2],[[v,a],[v,a1]]]]]]**/find_state_machine1(Algorithm1,Algorithm2,Pred_numbers) :-find_state_machine2(Algorithm1,[],Algorithm2,Pred_numbers).
Flow=[1, "repeat", 1, "repeat",1, "repeat"...]*/choice_points(Predicates,Query,Flow1,Flow2) :-(member([Query|Body],Predicates)->((Body=[]->append(Flow1,[Query,'.'],Flow2);(Body=[":-"|Body2],append(Flow1,[Query],Flow3),body(Query,Predicates,Body2,Flow3,Flow2))));((%trace,delete_back_until_repeat(Flow1,Flow3))->choice_points(Predicates,Query,Flow3,Flow2);Flow1=Flow2)),!.
Flow=[1, '.']choice_points([[1,":-","repeat"]],1,[],Flow).
G = [[1,>,a,1] [1,>,b], [1,>,c]]*/:-use_module(library(clpfd)).
Good. Are there any further areas to mind map? (y/n)|: yGood. Are there any further areas to mind map? (y/n)|: n?- cycle_text("I see. Are there any other things you'd like to mention to me? (y/n)").I see. Are there any other things you'd like to mention to me? (y/n)|: yI see. Are there any other things you'd like to mention to me? (y/n)|: n?- cycle_text("Well done. Are there any parts of language you are interested in? (y/n)").
Have you meditated before time travel?(y/n)?|: n% Execution Aborted*/qa_tt1 :-findall(_,(qa_tt(Q,A),writeln(Q),writeln("(y/n)?"),read_string(user_input,"\n\r","\n\r",_,S),(S="y"->writeln(A);abort)),_),!.
Instances = [[[1, 1], [a, b]], [[1, 2], [a, c]]] get_sub_term_wa(Term, Address, Item)get_sub_term_wa([[1, 4], 2, 3], [1, 1, 2], Item).
Instances = [[[1,2], [a,3]]] Possible heuristics:varstringatom[]numbercompound (non-list compounds)all(Insert_more_heuristics) (all the items are of a type, can be used to select terminals)heuristic(Heuristic, Output_variable) (Heuristic may be for example A=a and Output_variable=A)',writeln(Message).
Item = 4 put_sub_term_wa(Item, Address, Term1, Term2)put_sub_term_wa(88, [1,1], [[2, 3], 4], Term2).
L = [1, [2], [3], 4] compile_list([[1,2],3,4],N1,S1),compile_list([3,[[]],4],N2,S2),append_iio(N1,S1,N2,S2,N3,S3),uncompile_list(N3,S3,L).
L = [[[[t, brackets], [[t, number, 1]]]]]data_to_types22([[[[1]]]],T,V),find_lists1(T,[],L,[],S),writeln(T),writeln(V),writeln(S),writeln(L).
L = [[[[t,brackets],[[[t,brackets],[[t,number,1]]]]]]]                                                             data_to_types22([[[2, 2]], [[2]]],T,V),find_lists1(T,[],L,[],S),writeln(T),writeln(V),writeln(L),writeln(S).
L = [[[t, number, 1]]] data_to_types22([[[1]]],T,V),find_lists1(T,[],L,[],S),writeln(T),writeln(V),writeln(S),writeln(L).
L = [[bt1, t1], [bt, t]]. **/tryoutputs11(Output1,Output2,Output2) :-member(Output1,Output2),!.
L = [[original, bt], [original1, bt1]]. **/tryoutputs1(Output1,Output2,Output2) :-member(Output1,Output2),!.
L:a(1,1,A).
L:member([1,2],A).
L:member([1,2],A).A=1.
Lucian PrologL:load("test.lp").
Lucian PrologL:load("test.lp").L:a(1,1,A).
P = [[append, [a, b, c]], [delete, [c, b, d]], [member, [a, d]]] ;[debug]  ?- optimise([[append,[a,b,c]],[delete,[c,b,d]],[member,[a,x]]],[a,b],[a,b,c,d],[d],P).
P = [[append, [a, b, c]], [delete, [c, b, d]], [member, [c, d]]] ;[debug]  ?- optimise([[append,[a,b,c]],[delete,[c,b,d]],[member,[a,d]]],[a,b],[a,b,c,d],[d],P).
P = [[append, [a, b, c]], [delete, [c, b, d]]] ;Wantedly fail:optimise([[append,[a,e,c]]],[a],[a,e,c],[c],P).optimise([[append,[a,b,c]],[append,[c,d,e]]],[a,d],[a,b,c,d],[e],P).
P = [[append, [a, b, c]], [delete, [c, b, d]]] ;[debug]  ?- optimise([[append,[a,b,c]],[delete,[c,b,d]],[member,[c,x]]],[a,b],[a,b,c,d],[d],P).
P = [[append, [a, b, c]]] ;[debug]  ?- optimise([[append,[a,b,c]],[delete,[c,b,d]],[member,[c,d]]],[a,b],[a,b,c,d],[d],P).
Please choose the correction to "testee", <return> for no correction or type a replacement word:1 - (6) - testees2 - (4) - testtube3 - (4) - testtrace4 - (4) - tests5 - (4) - testopen6 - (4) - testnumber7 - (3) - tee8 - (3) - settee9 - (3) - selectee10 - (3) - mentee11 - (3) - guarantee12 - (3) - delegatee13 - (3) - committee14 - (2) - tree15 - (2) - trainee16 - (2) - toffee17 - (2) - three18 - (2) - tenrectangle19 - (2) - tenor20 - (2) - tennis**/%:- include('../listprologinterpreter/listprolog').:- include('../listprologinterpreter/la_strings').
Program = [f,[1,b]],[[f,[a,b],:-,[[=,[b,a]]]]],[[b,1]]caw00(off,f,[[append,2,1],[delete,2,1],[head,1,1],[tail,1,1],[member,1,1]],50,7,[[a,[1,2]]],[[b,[1,2]]],[],Program).
Program = [f,[[1,2],b]],[[f,[a,b],:-,[[=,[b,a]]]]],[[b,[1,2]]]caw00(off,f,[[append,2,1],[delete,2,1],[head,1,1],[tail,1,1],[member,1,1]],50,7,[[a,1],[b,2]],[[c,[1,2]]],[],Program).
Program = interpret(off,[f,[1,2,c]],[[f,[a,b,c],:-,[[append,[a,b,g]],[=,[c,g]]]]],[[c,[1,2]]])caw00(off,f,[[append,2,1],[delete,2,1],[head,1,1],[tail,1,1],[member,1,1]],50,8,[[a,1],[b,2],[c,3]],[[d,[1,2,3]]],[],Program).
R = '["headache prevention app ",[[[],"headache"],["headache","intertwining"],["intertwining","layer"]],"swipl -G100g -T20g -L2g\n[\'../listprolog\'].\nleash(-all),visible(+all),protocol(""gla_del.txt""),trace,interpret(off,[[n,function],[[[[],""headache""],[""headache"",""intertwining""],[""intertwining"",""layer""]]]],[[[n,function],[[v,a]],"":-"",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],"":-"",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],"":-"",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],"":-"",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n[\'../Text-to-Breasonings/text_to_breasonings.pl\'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,""gla_del.txt"",u,M),texttobr(N,""gla_del.txt"",u,M))).\n[\'../texttobr2qb\'].\ntexttobr2(3).\nhalt.","\n\nswipl -G100g -T20g -L2g\n[\'../listprolog\'].\nleash(-all),visible(+all),protocol(""gla_del.txt""),trace,interpret(off,[[n,function],[[[[],""headache""],[""headache"",""intertwining""],[""intertwining"",""layer""]],[v,b]]],[[[n,function],[[v,a],[v,b]],"":-"",[[[n,tail],[[v,a],[v,b]]]]]],_),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n[\'../Text-to-Breasonings/text_to_breasonings.pl\'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,""gla_del.txt"",u,M),texttobr(N,""gla_del.txt"",u,M))).\n[\'../texttobr2qb\'].\ntexttobr2(3).\nhalt.",[["headache","intertwining"],["intertwining","layer"]],"swipl -G100g -T20g -L2g\n[\'../listprolog\'].\nleash(-all),visible(+all),protocol(""gla_del.txt""),trace,interpret(off,[[n,function],[[[""headache"",""intertwining""],[""intertwining"",""layer""]]]],[[[n,function],[[v,a]],"":-"",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],"":-"",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],"":-"",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],"":-"",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n[\'../Text-to-Breasonings/text_to_breasonings.pl\'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,""gla_del.txt"",u,M),texttobr(N,""gla_del.txt"",u,M))).\n[\'../texttobr2qb\'].\ntexttobr2(3).\nhalt.",[[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[],v],"app"]]),b_alg([[[[],v],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","tilt"],["tilt","formative"],["formative","unnoted"]]),b_alg([[[],"headache"],["headache","tilt"],["tilt","formative"],["formative","unnoted"]],a),bb_alg([["headache","tilt"],["tilt","formative"],["formative","unnoted"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"app"]]),b_alg([[[[[],v],a],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"app"],["app","philosophically"],["philosophically","translationmanagementsystem"]]),b_alg([[[],"app"],["app","philosophically"],["philosophically","translationmanagementsystem"]],a),bb_alg([["app","philosophically"],["philosophically","translationmanagementsystem"]])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","resetcps"],["resetcps","walls"]]),b_alg([[[],"headache"],["headache","resetcps"],["resetcps","walls"]],a),bb_alg([["headache","resetcps"],["resetcps","walls"]])],[*,"headache prevention app ",a_alg([[[[],v],"headache"]]),b_alg([[[[],v],"headache"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","preoedipal"],["preoedipal","strut"]]),b_alg([[[],"prevention"],["prevention","preoedipal"],["preoedipal","strut"]],a),bb_alg([["prevention","preoedipal"],["preoedipal","strut"]])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","trancing"],["trancing","perfectionism"],["perfectionism","den"]]),b_alg([[[],"headache"],["headache","trancing"],["trancing","perfectionism"],["perfectionism","den"]],a),bb_alg([["headache","trancing"],["trancing","perfectionism"],["perfectionism","den"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","guided"],["guided","constructive"]]),b_alg([[[],"headache"],["headache","guided"],["guided","constructive"]],a),bb_alg([["headache","guided"],["guided","constructive"]])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","hermeneutically"],["hermeneutically","hellod"],["hellod","incidents"]]),b_alg([[[],"headache"],["headache","hermeneutically"],["hermeneutically","hellod"],["hellod","incidents"]],a),bb_alg([["headache","hermeneutically"],["hermeneutically","hellod"],["hellod","incidents"]])],[*,"headache prevention app ",a_alg([[[],"app"],["app","passes"],["passes","popularity"],["popularity","written"]]),b_alg([[[],"app"],["app","passes"],["passes","popularity"],["popularity","written"]],a),bb_alg([["app","passes"],["passes","popularity"],["popularity","written"]])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","transformations"],["transformations","private"]]),b_alg([[[],"prevention"],["prevention","transformations"],["transformations","private"]],a),bb_alg([["prevention","transformations"],["transformations","private"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[[],v],a],"app"]]),b_alg([[[[[],v],a],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","cause"],["cause","explicated"],["explicated","categorised"]]),b_alg([[[],"prevention"],["prevention","cause"],["cause","explicated"],["explicated","categorised"]],a),bb_alg([["prevention","cause"],["cause","explicated"],["explicated","categorised"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[[],v],a],"app"]]),b_alg([[[[[],v],a],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"app"],["app","inferences"],["inferences","exemplary"],["exemplary","chip"]]),b_alg([[[],"app"],["app","inferences"],["inferences","exemplary"],["exemplary","chip"]],a),bb_alg([["app","inferences"],["inferences","exemplary"],["exemplary","chip"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"headache"]]),b_alg([[[[[],v],a],"headache"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[],v],"headache"]]),b_alg([[[[],v],"headache"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"app"],["app","iacit"],["iacit","enjoyed"],["enjoyed","hull"]]),b_alg([[[],"app"],["app","iacit"],["iacit","enjoyed"],["enjoyed","hull"]],a),bb_alg([["app","iacit"],["iacit","enjoyed"],["enjoyed","hull"]])],[*,"headache prevention app ",a_alg([[[],"app"],["app","woven"],["woven","sizzling"],["sizzling","keypad"]]),b_alg([[[],"app"],["app","woven"],["woven","sizzling"],["sizzling","keypad"]],a),bb_alg([["app","woven"],["woven","sizzling"],["sizzling","keypad"]])],[*,"headache prevention app ",a_alg([[[[],v],"app"]]),b_alg([[[[],v],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","sortcnremvdup"],["sortcnremvdup","materialise"]]),b_alg([[[],"prevention"],["prevention","sortcnremvdup"],["sortcnremvdup","materialise"]],a),bb_alg([["prevention","sortcnremvdup"],["sortcnremvdup","materialise"]])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","controls"],["controls","muscle"]]),b_alg([[[],"prevention"],["prevention","controls"],["controls","muscle"]],a),bb_alg([["prevention","controls"],["controls","muscle"]])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","embark"],["embark","updatetrans"],["updatetrans","cracking"]]),b_alg([[[],"headache"],["headache","embark"],["embark","updatetrans"],["updatetrans","cracking"]],a),bb_alg([["headache","embark"],["embark","updatetrans"],["updatetrans","cracking"]])]],[]]'.
Repeats [1, "repeat"]choice_points([[1,":-","repeat","fail"]],1,[],Flow).
Sets2 = [[[t,list],[[t,list],[[t,list],[[t,number,1],[t,number,2],[t,number,3],[t,number,4]]]]]]data_to_types22([[[[a,b],2,3,4]],[[[a,b],2,3,4,[a,b],2,3,4]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
Sets2 = [[[t,list],[[t,list],[[t,number,1],[t,number,2],[t,number,3],[t,number,4]]]]]data_to_types22([[[[[1,2,3,4]]]],[[[[1,2,3,4,1,2,3,4]]]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
Sets2 = [[[t,list],[[t,number,1],[t,number,2],[t,number,3],[t,number,4]]]]data_to_types22([[[[1,2,3,4]]],[[[1,2,3,4,1,2,3,4]]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
Sets2 = [[[t,list],[[t,string,1],[t,number,2],[t,string,1],[t,number,2]]]]data_to_types22([[[1]],[[1,1]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2). Sets2 = [[[t, list], [[t, number, 1]]]].data_to_types22([[[1,2,3,4]],[[1,2,3,4,1,2,3,4]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
Start2 is Start-Len,find_br1(Rest,Start2,Len_needed,Len_so_far3,Text1,Text2))).
Term2 = [88, 1, 4] delete_sub_term_wa(Instances, Term1, Term2)delete_sub_term_wa([[1, 1], [1, 2]], [a, b], Term2).
Term2 = [88, 4] put_sub_term_wa_smooth(Item, Address, Term1, Term2)put_sub_term_wa_smooth([88,1], [1,1], [[2,3],4], Term2).
Term2 = [[v, 2], [v, 3]] foldr(put_sub_term_wa_ae_smooth, Instances, Term1, Term2)foldr(put_sub_term_wa_ae_smooth, [[[1, 1], [v, 2]], [[1, 2], [v, 3]]], [[v, 1], [v, 2]], Term2).
Term2 = [] foldr(put_sub_term_wa_ae,Instances, Term1, Term2).
Term2 = [v, 2, v, 3] sub_term_types_wa(Heuristic, Term, Instances)sub_term_types_wa([all([number, string])], [1,[a,3]], Instances).
That's good. Are there any areas of the idea you still don't understand? (y/n)|: yThat's good. Are there any areas of the idea you still don't understand? (y/n)|: n*/keep_on_explaining_until_it_makes_sense :- texttobr2_1(1), writeln("That's good. Are there any areas of the idea you still don't understand? (y/n)"), read_string(user_input,"\n\r","\n\r",_,S), (S="y"->keep_on_explaining_until_it_makes_sense;true),!.
Well done. Are there any parts of language you are interested in? (y/n)|: yWell done. Are there any parts of language you are interested in? (y/n)|: n?- cycle_text("Do you believe in duckling love? Do you love me too? (y/n)").Do you believe in duckling love? Do you love me too? (y/n)|: y*/cycle_text(Text) :- texttobr2_1(1), writeln(Text), read_string(user_input,"\n\r","\n\r",_,S), (S="y"->cycle_text(Text);true),!.
What is the first sentence?|: aWhat is the second sentence?|: b[Is there a connection between,a,and,b,? (y/n)]|: y[What is the connection between,a,and,b,?]|: c[Is there a connection between,a,and,c,? (y/n)]|: y[What is the connection between,a,and,c,?]|: d[Is there a connection between,c,and,b,? (y/n)]|: n[Is there a connection between,a,and,d,? (y/n)]|: n[Is there a connection between,d,and,c,? (y/n)]|: n[[a,b,done],[a,c,done],[c,b,done],[a,d,done],[d,c,done]]*/two_contact_points(S3) :- ask("What is the first sentence?",S1), ask("What is the second sentence?",S2), connect([[S1,S2,undone]],S3).
What is the sentence?|: 1What are two uses (in verb(object) form) for the sentence?|: 2What are two types (in verb(object) form) in the sentence?|: 3What is an object (in verb(object) form) for the sentence?|: 4What is a touching relationship (in verb(object) form) in the sentence?|: 5What is a human judgement (in verb(object) form) for a noun in the sentence?|: 6What is a human judgement (in verb(object) form) for a verb in the sentence?|: 7What is a room (in verb(object) form) in the sentence?|: 8What is a part of a room (in verb(object) form) in the sentence?|: 9What is a direction an object faces (in verb(object) form) in the sentence?|: 0What is an object required before the sentence (in verb(object) form)?|: 11What is an object required after the sentence (in verb(object) form)?|: 12true.
[[[a,*,*]],[[b,*,*],[c,d]],[[ef,*,*],[g],(:-),[[[[h,*,*],[i]],->,true,or,true],!]]]**/concat_list(A,[],A):-!.concat_list(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list(C,Items,B).
[[[n,a],":-",[[[n,true]]]]]?- mr2pp("spaces",[[[n,a],":-",[[[n,true]]]]],A),writeln(A).
[[[n,a],":-",[ [[n,true]]]]]*/mr2pp(Tabs_or_spaces,Alg,Alg3) :- pp0(Alg,Alg2), (Tabs_or_spaces="spaces"-> (atomic_list_concat(Alg4,"\t",Alg2), atomic_list_concat(Alg4," ",Alg3)); Alg2=Alg3),!.
[+,-,*,/,abort,any,append,atom,brackets,call,ceiling,code,creep,cut,date,delete,equals1,equals2,equals3,equals4,exit,fail,grammar,head,is,length,letters,list,member,member2,n,not,number,or,predicatename,random,round,skip,string,string_from_file,stringconcat,stringtonumber,sys,findall_sys,t,tail,true,unwrap,v,variable,vgp,wrap,input,output,string_length,sort,intersection,read_string,writeln,atom_string,trace,notrace,sqrt,notrace]A=            [[0,[n,reverse],[[],[v,l],[v,l]]],[1,[n,reverse],[[v,l],[v,m],[v,n]],":-",[[0,[n,head],[[v,l],[v,h]]],[1,[n,tail],[[v,l],[v,t]]],[2,[n,wrap],[[v,h],[v,h1]]],[3,[n,append],[[v,h1],[v,m],[v,o]]],[4,[n,reverse],[[v,t],[v,o],[v,n]]]]]],find_state_machine1(A,B,_,[+,-,*,/,abort,any,append,atom,brackets,call,ceiling,code,creep,cut,date,delete,equals1,equals2,equals3,equals4,exit,fail,grammar,head,is,length,letters,list,member,member2,n,not,number,or,predicatename,random,round,skip,string,string_from_file,stringconcat,stringtonumber,sys,findall_sys,t,tail,true,unwrap,v,variable,vgp,wrap,input,output,string_length,sort,intersection,read_string,writeln,atom_string,trace,notrace,sqrt,notrace]),writeln1(B).
[1,1,1][oh][1,2,1][oh,fm,f][1,3,1][oh,fm,f,ofh,fcre]Game Over% Execution Aborted**/make_maze :-maze(Maze1),quiz(Quiz),random_member([A,Q],Quiz),append(Maze1,[[1,3,1,[Q]]],Maze2),retractall(maze2(_)),assertz(maze2(Maze2)),Apply=[[A,Q,"e"]],retractall(apply(_)),assertz(apply(Apply)),!.
[100,other-2,35,6,9,3,0,4,2][100,cs-2,65,1,7,9,8,6,7][100,cs-2,12,8,8,9,6,7,0][99,other-3,83,9,9,0,5,8,3][99,other-3,45,2,5,7,0,1,3][99,medic-2,58,5,0,6,2,6,1][99,medic-2,7,9,2,6,3,1,9][99,cs-3,72,9,0,4,1,4,3][99,cs-2,71,4,6,6,7,8,5][98,phil-2-3,48,1,0,1,5,3,2][98,other-3,60,6,4,5,1,4,6][98,other-2,41,3,9,1,7,8,0][98,other-2,37,5,6,3,7,0,5][98,cs-3,75,5,4,1,6,4,4][97,cs-1,83,4,6,7,8,8,0][95,phil-2-3,13,0,7,4,8,2,3][95,other-2,80,4,9,2,2,8,3][95,cs-2,62,0,2,5,6,0,4][95,cs-2,29,1,5,5,6,8,7][95,cs-1,1,9,0,6,5,4,1][94,phil-2-3,69,2,1,7,5,0,0][94,phil-2-3,29,0,5,5,0,5,3][94,phil-1,84,6,7,4,9,3,8][94,phil-1,79,2,9,5,2,4,6][94,other-2,87,2,0,2,7,5,1][94,other-1,53,0,2,0,2,1,4][94,medic-2,74,8,2,5,1,1,3][94,medic-2,26,9,5,4,7,9,6][94,medic-2,24,1,5,9,6,4,4][93,phil-2-3,91,3,0,0,3,8,2][93,phil-2-3,3,6,6,0,6,3,3][93,phil-2-3,1,3,7,8,0,3,5][93,other-3,91,9,7,5,8,7,3][93,other-3,39,9,6,6,3,2,0][93,other-3,32,0,4,4,4,6,8][93,other-3,8,7,3,2,7,3,3][93,cs-1,36,0,5,8,9,1,8][92,other-2,69,8,9,3,3,2,4][92,other-1,62,3,9,6,8,9,9][92,cs-3,52,4,2,6,6,8,1][91,other-3,99,1,3,8,0,6,2][91,medic-2,71,1,2,4,2,1,0][91,medic-2,55,2,3,2,4,8,8][91,medic-2,37,1,2,4,6,6,9][91,cs-2,45,3,2,5,3,9,0][91,cs-2,6,5,6,5,2,4,9][90,phil-1,43,7,9,4,1,5,5][90,cs-3,74,4,7,5,5,3,1][90,cs-2,90,5,7,4,3,0,0][90,cs-2,24,4,1,6,3,7,7][89,other-1,1,3,5,0,4,6,7][89,medic-2,83,3,6,3,4,8,0][89,medic-2,18,7,7,0,4,6,5][89,cs-1,17,4,1,8,1,3,7][88,phil-1,94,9,4,5,5,7,2][88,other-3,63,6,4,0,0,3,3][88,other-2,9,8,2,7,7,1,0][88,cs-2,67,5,1,8,9,9,0][88,cs-2,63,0,4,6,8,8,6][87,phil-2-3,95,6,8,8,8,0,8][87,other-3,64,2,9,9,3,4,9][87,other-2,10,2,1,1,0,2,8][87,medic-2,99,9,9,0,0,5,3][86,phil-2-3,5,6,8,5,0,5,2][86,other-1,91,1,4,3,7,9,4][86,cs-3,65,3,2,5,8,0,9][86,cs-2,81,4,5,1,1,3,8][85,other-2,11,8,0,4,1,1,0][85,cs-2,97,1,5,1,8,6,6][84,phil-1,64,7,3,3,9,0,6][84,other-2,17,8,4,6,8,1,8][84,other-1,89,5,7,6,8,4,9][84,other-1,83,1,1,5,5,9,2][84,other-1,39,8,7,5,5,5,4][84,cs-1,58,0,5,9,5,5,5][83,other-2,84,5,1,0,3,6,7][83,cs-3,68,0,3,0,4,1,5][83,cs-2,26,5,9,4,5,1,7][83,cs-1,24,4,8,5,8,3,2][82,phil-2-3,82,4,0,8,4,9,7][82,other-1,12,7,1,0,7,5,9][82,medic-2,98,3,0,4,9,9,2][81,phil-2-3,57,0,5,0,7,1,5][81,other-3,17,0,9,4,5,3,4][81,other-2,32,8,7,1,8,7,1][81,medic-2,13,5,3,6,8,5,3][80,phil-1,71,7,5,8,0,3,6][80,other-1,99,3,3,7,5,9,2][80,cs-2,9,1,9,3,4,2,0][80,cs-1,77,7,7,1,2,3,9][79,phil-1,28,6,8,4,1,0,2][79,cs-1,80,2,8,1,3,5,8][79,cs-1,71,0,3,1,4,6,2][79,cs-1,49,3,4,3,6,8,7][79,cs-1,6,2,7,3,1,4,1][78,phil-1,99,7,3,7,4,2,1][78,phil-1,4,9,6,8,2,7,0][78,other-3,72,4,1,1,4,7,8][78,cs-3,23,2,8,9,2,4,7][78,cs-2,1,9,3,8,7,1,3][77,phil-1,92,8,2,1,0,4,7][77,medic-2,14,7,1,4,7,2,7][77,cs-1,46,7,4,5,0,7,1][76,phil-2-3,88,1,1,8,4,3,7][76,phil-1,36,2,0,9,2,0,1][76,other-3,89,7,3,1,3,7,9][75,phil-2-3,77,1,6,1,2,5,8][75,other-2,1,2,5,8,7,7,6][75,cs-3,61,7,4,3,8,4,2][74,phil-2-3,85,2,8,9,0,4,2][74,phil-1,29,0,6,1,9,0,1][74,phil-1,15,9,4,8,2,4,0][74,cs-3,79,6,9,4,0,2,9][74,cs-2,61,4,5,7,8,6,2][73,phil-2-3,73,9,3,7,1,1,8][73,phil-2-3,51,7,3,9,8,6,8][73,cs-1,99,7,8,4,4,8,8][72,other-2,78,1,1,8,8,9,3][72,cs-2,36,0,8,5,6,8,1][71,phil-2-3,31,4,6,0,9,8,1][71,other-3,21,1,3,7,4,4,3][71,other-1,42,4,8,5,7,8,9][71,cs-2,39,9,2,0,0,4,9][71,cs-1,27,1,0,7,7,1,0][70,phil-1,70,0,8,4,0,3,7][70,other-2,28,0,9,7,6,4,7][70,other-1,27,4,0,0,0,6,7][70,cs-3,96,5,4,5,0,1,3][70,cs-2,100,7,0,2,9,7,6][70,cs-2,92,3,6,7,3,4,1][70,cs-1,76,2,8,2,2,9,7][70,cs-1,39,2,8,9,9,2,7][69,phil-2-3,100,8,2,3,5,8,1][69,phil-2-3,70,3,5,7,2,7,3][69,phil-1,18,4,8,4,9,5,6][69,other-3,53,1,2,1,7,6,4][69,other-3,34,9,9,0,5,4,1][68,phil-1,93,9,0,2,0,3,5][68,medic-2,66,1,2,2,7,6,2][68,cs-1,12,4,6,8,0,1,9][67,phil-2-3,14,3,5,9,8,8,3][67,other-2,5,4,0,2,0,7,2][67,other-1,46,9,9,7,6,2,1][67,other-1,23,4,8,0,0,9,5][67,medic-2,8,7,5,8,8,6,2][67,cs-3,78,9,5,7,8,9,0][67,cs-1,22,8,8,7,2,0,1][66,phil-2-3,78,0,2,1,1,3,4][66,cs-2,96,6,3,0,9,1,0][65,other-3,11,1,8,8,1,1,1][65,other-2,94,8,4,5,5,7,7][65,cs-3,33,5,7,4,0,1,6][65,cs-2,83,1,5,5,8,3,4][65,cs-2,47,8,4,9,8,2,8][65,cs-1,50,3,3,3,9,2,9][65,cs-1,37,7,3,2,7,8,1][64,phil-2-3,66,1,3,4,1,4,9][64,phil-1,22,6,7,3,6,8,2][64,other-3,22,8,8,0,3,4,4][64,other-1,10,3,7,2,7,8,3][64,other-1,4,5,9,8,2,5,9][64,medic-2,84,1,7,6,9,5,0][64,cs-3,64,7,4,6,3,6,7][64,cs-3,57,2,1,5,5,0,3][64,cs-3,15,1,5,9,6,7,7][64,cs-3,11,1,0,0,5,4,5][64,cs-2,53,5,5,2,9,0,2][64,cs-2,15,0,2,3,9,7,7][64,cs-1,68,7,9,4,8,6,0][63,phil-2-3,8,0,6,2,0,0,0][63,other-1,87,2,6,0,0,9,9][63,cs-2,68,9,8,0,7,3,2][62,other-3,75,0,2,0,7,7,5][62,other-2,19,3,2,8,0,5,1][62,other-1,74,5,0,8,2,3,0][62,medic-2,59,3,4,1,5,3,6][62,cs-2,14,5,6,2,7,0,3][61,phil-1,97,9,6,2,8,6,8][61,phil-1,21,8,4,8,6,4,5][61,other-3,82,9,6,9,1,9,9][61,other-2,99,5,9,4,4,4,3][61,other-2,64,6,9,2,1,9,7][61,cs-3,36,3,2,7,7,2,8][60,phil-1,98,9,6,4,5,0,0][60,other-2,21,0,6,9,8,5,0][60,other-1,96,4,2,4,7,3,7][60,medic-2,3,3,2,3,0,9,5][59,phil-2-3,30,3,0,1,1,4,6][59,other-3,41,7,8,5,5,8,5][59,other-2,38,1,1,0,1,6,5][58,phil-1,72,3,8,6,9,0,4][58,phil-1,54,4,9,0,2,6,0][58,phil-1,40,8,2,8,3,1,9][58,other-1,25,6,0,9,5,3,5][58,medic-2,77,7,7,2,4,4,0][58,cs-2,33,7,0,1,8,8,0][57,other-3,65,5,1,6,9,1,3][57,other-3,4,6,3,4,6,7,7][56,phil-1,63,5,9,0,3,9,6][56,other-1,68,0,2,0,3,3,9][56,other-1,40,0,8,9,5,1,0][56,other-1,9,9,2,0,9,4,3][56,medic-2,56,9,3,7,1,1,3][55,other-1,59,7,4,0,1,4,1][55,medic-2,16,9,3,8,2,7,6][55,cs-3,80,2,7,1,2,3,0][55,cs-3,24,1,0,9,4,3,2][54,phil-2-3,43,4,5,6,1,4,1][54,phil-1,100,4,6,8,0,4,0][54,other-3,78,7,1,3,6,6,7][54,cs-3,62,4,7,6,2,9,0][54,cs-2,66,0,7,9,5,9,8][54,cs-2,18,6,2,5,8,5,5][53,phil-2-3,60,1,5,4,6,5,0][53,other-3,47,6,0,0,6,6,2][53,other-2,26,1,4,5,0,4,1][53,other-2,15,4,5,1,6,3,5][53,cs-1,55,2,6,9,1,1,6][52,medic-2,31,3,9,8,7,2,1][51,other-2,48,8,0,1,4,6,4][51,medic-2,92,2,5,1,8,1,0][50,phil-1,59,9,2,1,1,0,9][50,other-1,70,8,9,3,8,6,0][50,cs-3,91,7,1,7,6,7,5][50,cs-2,78,5,3,5,5,2,6][49,phil-1,95,9,4,3,7,1,1][49,medic-2,6,6,1,9,1,4,9][49,cs-3,63,9,1,0,8,4,6][49,cs-2,55,9,8,2,9,5,6][49,cs-1,72,2,4,3,2,7,1][48,other-3,20,5,7,6,7,9,9][48,other-1,19,9,9,9,6,1,4][48,medic-2,1,2,2,7,2,8,7][47,phil-2-3,34,3,3,8,2,5,5][47,phil-1,76,5,6,4,1,9,5][47,other-1,65,9,2,7,4,7,4][46,phil-2-3,87,4,0,2,6,4,2][46,phil-1,45,6,6,0,6,4,8][46,cs-2,30,0,9,0,9,3,9][45,phil-2-3,39,4,0,4,8,5,5][45,medic-2,87,8,8,9,0,8,8][45,cs-3,55,5,6,9,0,4,2][45,cs-1,10,2,7,9,6,4,6][44,phil-2-3,81,9,0,1,8,4,0][44,phil-2-3,76,2,0,6,6,1,9][44,phil-1,91,4,4,5,0,8,2][44,other-3,87,1,6,9,7,2,2][44,other-3,56,4,9,4,1,9,7][44,other-3,19,2,9,6,2,0,1][44,other-2,16,9,3,7,7,0,4][44,cs-3,50,7,1,3,0,2,5][44,cs-1,74,8,1,3,6,3,1][43,phil-2-3,92,7,3,9,8,0,8][43,phil-1,58,8,7,9,5,5,0][43,other-2,57,1,1,1,1,8,2][43,medic-2,48,8,2,0,0,1,7][43,cs-1,90,9,9,7,9,0,6][42,other-2,34,6,0,2,6,7,4][42,other-1,3,1,8,0,3,5,2][42,cs-3,22,0,2,3,3,1,8][42,cs-2,77,5,0,6,6,2,5][42,cs-2,69,4,4,1,4,3,4][42,cs-2,43,9,4,8,8,7,7][42,cs-1,89,2,2,6,8,2,4][42,cs-1,88,9,1,5,5,4,5][41,phil-2-3,2,9,5,9,9,0,4][41,other-3,84,0,2,0,2,5,2][41,medic-2,29,3,4,8,5,2,7][41,cs-3,12,1,6,0,8,3,8][40,phil-2-3,84,6,2,7,2,8,5][40,phil-2-3,38,1,5,1,0,1,7][40,phil-1,74,0,3,1,4,2,6][40,cs-2,87,5,9,8,0,6,5][40,cs-2,79,3,3,9,2,8,2][40,cs-2,38,9,3,3,5,1,1][39,phil-1,52,9,1,2,2,2,3][39,phil-1,7,2,7,1,6,0,4][39,phil-1,5,7,5,9,1,4,5][39,other-3,98,5,8,3,0,6,5][39,other-1,88,3,1,8,9,8,1][38,phil-2-3,35,5,3,4,5,6,4][38,other-3,14,0,0,2,2,8,6][38,other-1,31,6,5,8,5,0,1][38,medic-2,80,9,2,5,8,3,7][38,cs-3,16,8,5,6,6,7,0][38,cs-2,76,0,2,9,1,8,0][38,cs-2,49,6,0,0,6,0,5][37,phil-2-3,62,4,3,7,8,8,9][37,other-3,3,9,4,0,9,2,9][37,other-1,79,5,7,4,9,5,1][37,other-1,15,4,2,2,0,4,0][37,cs-3,58,5,8,9,2,9,0][37,cs-3,37,7,7,9,5,6,4][37,cs-2,98,8,9,1,8,3,6][36,phil-2-3,9,0,1,1,3,8,2][36,other-3,48,1,3,8,6,6,3][36,other-2,91,9,8,0,1,3,6][36,cs-3,19,1,9,3,9,0,1][36,cs-2,50,3,6,4,6,9,2][36,cs-2,42,9,4,6,4,1,7][35,other-3,85,8,7,8,6,7,8][34,other-1,100,2,9,5,3,2,5][33,phil-1,12,5,3,9,5,4,5][33,other-3,88,3,8,7,5,7,9][33,other-2,66,8,5,4,5,7,5][33,other-2,33,1,0,4,5,9,9][32,phil-1,20,9,7,4,7,9,5][32,other-3,79,1,7,5,3,6,0][32,other-3,27,1,5,8,1,6,3][32,other-2,79,5,7,7,9,1,3][32,other-1,28,2,8,3,7,3,6][32,cs-2,8,2,1,2,0,6,4][32,cs-1,61,7,2,8,2,8,8][31,phil-2-3,32,0,7,4,0,9,8][31,medic-2,33,9,9,4,3,2,5][31,cs-2,86,4,0,9,4,8,6][30,cs-2,60,5,6,3,1,8,0][29,phil-1,78,7,0,8,4,7,9][29,other-1,50,4,5,3,8,0,9][29,cs-2,51,0,7,7,6,6,8][29,cs-1,53,2,7,7,0,7,5][28,other-1,37,0,4,4,0,4,6][28,cs-3,93,7,4,8,2,3,3][28,cs-1,14,5,9,1,4,9,5][27,other-3,73,6,2,7,4,2,7][27,other-1,90,7,3,5,0,2,3][27,cs-1,60,5,9,6,7,0,6][26,phil-2-3,94,9,9,1,3,4,3][26,phil-1,65,5,9,8,1,1,7][26,phil-1,51,5,0,2,5,3,0][26,other-1,34,6,2,2,2,9,4][26,other-1,11,3,4,5,4,3,0][26,cs-3,18,8,4,9,6,2,9][26,cs-2,37,0,7,2,7,9,9][26,cs-1,34,4,5,5,7,8,7][26,cs-1,19,8,3,9,7,2,6][25,phil-2-3,80,5,8,0,4,5,1][25,other-3,49,7,1,6,1,7,2][25,other-2,18,0,9,5,7,3,8][25,cs-1,98,8,9,7,9,0,0][25,cs-1,91,5,4,4,7,9,9][23,phil-1,85,4,4,6,4,1,1][23,other-1,76,3,3,0,3,8,9][23,cs-3,21,2,2,4,6,9,0][23,cs-3,8,2,2,1,9,8,7][22,phil-2-3,41,4,2,3,8,4,3][22,phil-1,24,2,6,1,3,2,0][22,other-2,97,4,9,3,5,3,5][22,other-2,56,0,6,6,9,3,0][22,medic-2,96,9,6,8,1,3,2][21,cs-3,88,3,9,8,0,5,8][21,cs-3,49,4,4,5,9,8,1][21,cs-1,69,3,0,0,7,8,8][20,phil-2-3,28,9,9,4,6,9,4][20,other-3,86,6,1,1,0,2,6][20,other-3,10,7,7,9,0,6,2][20,cs-3,82,4,0,1,0,2,0][19,phil-1,61,3,0,2,1,7,0][19,other-3,68,0,8,4,0,4,4][19,other-3,50,1,7,4,6,2,0][19,other-1,64,1,1,6,8,4,5][19,medic-2,60,1,1,5,6,6,7][18,phil-2-3,65,4,4,8,9,7,9][18,phil-2-3,11,4,9,5,3,9,1][18,phil-1,50,1,3,7,5,7,0][18,other-3,36,8,5,0,6,5,4][18,medic-2,27,9,7,3,7,7,4][18,cs-3,40,1,1,9,4,9,9][17,phil-2-3,40,6,6,2,4,4,9][17,phil-1,49,6,0,7,9,4,5][17,phil-1,44,8,8,7,6,4,0][17,other-2,68,8,8,1,0,9,0][17,other-2,3,1,0,7,1,5,6][17,cs-3,66,4,9,4,7,8,3][16,other-2,93,7,1,1,8,6,6][16,other-2,82,0,7,1,7,5,7][16,other-2,63,5,1,0,4,4,5][16,other-2,24,9,2,9,1,9,9][16,medic-2,95,6,7,9,5,6,1][16,medic-2,72,2,8,6,6,4,8][15,other-1,29,7,0,7,4,2,4][15,cs-2,40,8,0,8,5,2,0][14,phil-2-3,56,1,2,5,2,4,4][14,phil-2-3,20,5,7,6,6,2,5][14,medic-2,88,4,7,0,1,1,6][14,medic-2,53,6,1,1,6,1,8][14,cs-2,41,7,6,9,1,0,8][13,other-2,47,7,3,0,8,9,2][12,phil-1,47,2,8,8,1,8,9][12,other-3,80,2,7,3,1,1,9][12,other-3,23,6,3,9,3,2,1][12,other-2,54,4,6,4,9,2,5][12,cs-2,80,4,5,5,2,8,1][11,cs-3,29,3,9,8,2,8,3][11,cs-2,13,1,0,6,9,3,4][11,cs-1,25,1,5,6,9,6,6][10,phil-2-3,93,4,9,7,1,3,5][10,other-3,30,3,6,5,2,8,0][10,other-3,26,7,8,7,0,9,9][10,other-1,80,1,6,1,2,5,5][10,cs-3,100,7,1,8,2,2,4][10,cs-1,15,7,4,5,4,8,5][10,cs-1,11,1,5,0,4,7,2][9,other-1,73,7,5,8,0,5,1][9,other-1,69,3,5,2,6,9,2][9,cs-3,92,6,7,2,6,9,2][9,cs-3,86,4,4,5,1,0,8][9,cs-1,47,1,1,6,3,4,0][8,phil-1,8,8,9,3,1,1,7][8,other-1,47,3,8,8,4,1,5][8,cs-3,27,0,2,4,9,2,7][8,cs-2,22,1,6,2,5,2,4][7,other-3,6,9,6,0,2,4,4][7,medic-2,45,4,0,1,6,3,0][7,cs-3,59,0,3,2,0,6,4][6,other-3,96,1,5,3,7,2,3][6,other-2,49,0,7,2,2,7,9][6,other-1,86,4,6,8,7,2,5][5,phil-2-3,74,6,8,0,9,4,2][5,medic-2,36,0,9,0,0,9,2][5,medic-2,28,0,3,3,5,1,2][5,medic-2,12,4,1,6,4,4,3][5,cs-1,3,2,4,3,2,6,7][4,medic-2,79,7,3,1,0,9,5][4,cs-3,87,4,8,8,9,2,4][4,cs-2,31,5,1,1,0,5,3][3,other-3,95,4,2,0,1,3,4][3,other-3,51,7,1,0,2,3,0][3,other-3,38,6,6,9,0,8,2][3,other-3,13,7,2,0,1,4,4][3,other-1,35,6,3,8,1,8,3][3,other-1,20,2,8,1,6,4,4][3,medic-2,4,6,2,0,4,7,0][3,cs-3,43,0,6,6,4,4,2][3,cs-2,93,8,2,2,7,0,4][3,cs-1,86,1,2,3,1,9,9][2,phil-2-3,61,8,3,1,9,2,6][2,phil-2-3,10,2,6,0,8,0,1][2,phil-1,41,1,3,3,9,7,2][2,cs-2,73,8,2,1,4,9,5][1,phil-2-3,97,8,3,2,3,5,9][1,phil-2-3,19,0,1,7,4,4,9][1,other-3,69,7,9,4,6,0,6][1,other-2,52,9,0,9,1,2,6][100,other-2,35,6,9,3,0,4,2][100,cs-2,65,1,7,9,8,6,7][100,cs-2,12,8,8,9,6,7,0][99,other-3,83,9,9,0,5,8,3][99,other-3,45,2,5,7,0,1,3][99,medic-2,7,9,2,6,3,1,9][99,cs-3,72,9,0,4,1,4,3][99,cs-2,71,4,6,6,7,8,5][98,other-2,41,3,9,1,7,8,0][98,cs-3,75,5,4,1,6,4,4][97,cs-1,83,4,6,7,8,8,0][95,phil-2-3,13,0,7,4,8,2,3][95,other-2,80,4,9,2,2,8,3][95,cs-2,29,1,5,5,6,8,7][94,phil-2-3,69,2,1,7,5,0,0][94,phil-2-3,29,0,5,5,0,5,3][94,medic-2,26,9,5,4,7,9,6][93,phil-2-3,91,3,0,0,3,8,2][93,phil-2-3,3,6,6,0,6,3,3][93,phil-2-3,1,3,7,8,0,3,5][93,other-3,39,9,6,6,3,2,0][93,other-3,32,0,4,4,4,6,8][93,cs-1,36,0,5,8,9,1,8][91,cs-2,45,3,2,5,3,9,0][91,cs-2,6,5,6,5,2,4,9][90,phil-1,43,7,9,4,1,5,5][90,cs-3,74,4,7,5,5,3,1][90,cs-2,90,5,7,4,3,0,0][89,other-1,1,3,5,0,4,6,7][89,medic-2,83,3,6,3,4,8,0][89,medic-2,18,7,7,0,4,6,5][88,phil-1,94,9,4,5,5,7,2][88,other-2,9,8,2,7,7,1,0][87,other-2,10,2,1,1,0,2,8][86,phil-2-3,5,6,8,5,0,5,2][86,other-1,91,1,4,3,7,9,4][86,cs-3,65,3,2,5,8,0,9][85,other-2,11,8,0,4,1,1,0][85,cs-2,97,1,5,1,8,6,6][84,phil-1,64,7,3,3,9,0,6][84,other-1,83,1,1,5,5,9,2][84,other-1,39,8,7,5,5,5,4][84,cs-1,58,0,5,9,5,5,5][83,other-2,84,5,1,0,3,6,7][82,phil-2-3,82,4,0,8,4,9,7][81,other-3,17,0,9,4,5,3,4][81,other-2,32,8,7,1,8,7,1][80,other-1,99,3,3,7,5,9,2][79,phil-1,28,6,8,4,1,0,2][79,cs-1,49,3,4,3,6,8,7][79,cs-1,6,2,7,3,1,4,1][78,phil-1,99,7,3,7,4,2,1][78,phil-1,4,9,6,8,2,7,0][77,medic-2,14,7,1,4,7,2,7][77,cs-1,46,7,4,5,0,7,1][76,phil-2-3,88,1,1,8,4,3,7][76,phil-1,36,2,0,9,2,0,1][75,cs-3,61,7,4,3,8,4,2][74,phil-2-3,85,2,8,9,0,4,2][74,cs-3,79,6,9,4,0,2,9][74,cs-2,61,4,5,7,8,6,2][71,phil-2-3,31,4,6,0,9,8,1][71,other-3,21,1,3,7,4,4,3][71,cs-2,39,9,2,0,0,4,9][70,other-1,27,4,0,0,0,6,7][70,cs-3,96,5,4,5,0,1,3][70,cs-2,92,3,6,7,3,4,1][70,cs-1,39,2,8,9,9,2,7][69,phil-2-3,100,8,2,3,5,8,1][67,other-2,5,4,0,2,0,7,2][67,other-1,46,9,9,7,6,2,1][67,medic-2,8,7,5,8,8,6,2][67,cs-1,22,8,8,7,2,0,1][66,phil-2-3,78,0,2,1,1,3,4][66,cs-2,96,6,3,0,9,1,0][65,cs-1,50,3,3,3,9,2,9][65,cs-1,37,7,3,2,7,8,1][64,phil-2-3,66,1,3,4,1,4,9][64,phil-1,22,6,7,3,6,8,2][64,other-3,22,8,8,0,3,4,4][64,cs-3,64,7,4,6,3,6,7][64,cs-2,53,5,5,2,9,0,2][63,cs-2,68,9,8,0,7,3,2][62,other-1,74,5,0,8,2,3,0][62,cs-2,14,5,6,2,7,0,3][61,phil-1,21,8,4,8,6,4,5][61,other-3,82,9,6,9,1,9,9][61,other-2,64,6,9,2,1,9,7][61,cs-3,36,3,2,7,7,2,8][60,other-2,21,0,6,9,8,5,0][60,medic-2,3,3,2,3,0,9,5][59,other-3,41,7,8,5,5,8,5][59,other-2,38,1,1,0,1,6,5][58,phil-1,72,3,8,6,9,0,4][56,other-1,40,0,8,9,5,1,0][56,other-1,9,9,2,0,9,4,3][56,medic-2,56,9,3,7,1,1,3][55,other-1,59,7,4,0,1,4,1][55,cs-3,80,2,7,1,2,3,0][54,phil-1,100,4,6,8,0,4,0][54,cs-3,62,4,7,6,2,9,0][54,cs-2,18,6,2,5,8,5,5][53,phil-2-3,60,1,5,4,6,5,0][53,other-2,26,1,4,5,0,4,1][53,cs-1,55,2,6,9,1,1,6][51,other-2,48,8,0,1,4,6,4][51,medic-2,92,2,5,1,8,1,0][50,phil-1,59,9,2,1,1,0,9][50,cs-3,91,7,1,7,6,7,5][50,cs-2,78,5,3,5,5,2,6][49,phil-1,95,9,4,3,7,1,1][49,medic-2,6,6,1,9,1,4,9][48,other-3,20,5,7,6,7,9,9][48,other-1,19,9,9,9,6,1,4][46,phil-2-3,87,4,0,2,6,4,2][46,phil-1,45,6,6,0,6,4,8][46,cs-2,30,0,9,0,9,3,9][45,cs-1,10,2,7,9,6,4,6][44,phil-1,91,4,4,5,0,8,2][44,other-3,19,2,9,6,2,0,1][44,other-2,16,9,3,7,7,0,4][44,cs-3,50,7,1,3,0,2,5][43,phil-2-3,92,7,3,9,8,0,8][43,medic-2,48,8,2,0,0,1,7][43,cs-1,90,9,9,7,9,0,6][42,other-2,34,6,0,2,6,7,4][42,other-1,3,1,8,0,3,5,2][42,cs-2,69,4,4,1,4,3,4][41,phil-2-3,2,9,5,9,9,0,4][40,phil-2-3,38,1,5,1,0,1,7][40,cs-2,87,5,9,8,0,6,5][40,cs-2,79,3,3,9,2,8,2][40,cs-2,38,9,3,3,5,1,1][39,phil-1,52,9,1,2,2,2,3][39,phil-1,7,2,7,1,6,0,4][39,other-3,98,5,8,3,0,6,5][39,other-1,88,3,1,8,9,8,1][38,other-3,14,0,0,2,2,8,6][38,other-1,31,6,5,8,5,0,1][38,medic-2,80,9,2,5,8,3,7][38,cs-2,76,0,2,9,1,8,0][38,cs-2,49,6,0,0,6,0,5][37,other-3,3,9,4,0,9,2,9][37,other-1,79,5,7,4,9,5,1][37,cs-3,58,5,8,9,2,9,0][37,cs-3,37,7,7,9,5,6,4][36,other-2,91,9,8,0,1,3,6][35,other-3,85,8,7,8,6,7,8][34,other-1,100,2,9,5,3,2,5][32,other-3,27,1,5,8,1,6,3][31,medic-2,33,9,9,4,3,2,5][31,cs-2,86,4,0,9,4,8,6][29,phil-1,78,7,0,8,4,7,9][29,other-1,50,4,5,3,8,0,9][29,cs-1,53,2,7,7,0,7,5][28,other-1,37,0,4,4,0,4,6][28,cs-1,14,5,9,1,4,9,5][27,other-1,90,7,3,5,0,2,3][26,phil-1,65,5,9,8,1,1,7][26,other-1,34,6,2,2,2,9,4][26,cs-3,18,8,4,9,6,2,9][26,cs-2,37,0,7,2,7,9,9][26,cs-1,34,4,5,5,7,8,7][26,cs-1,19,8,3,9,7,2,6][23,other-1,76,3,3,0,3,8,9][23,cs-3,21,2,2,4,6,9,0][22,other-2,56,0,6,6,9,3,0][21,cs-3,88,3,9,8,0,5,8][21,cs-3,49,4,4,5,9,8,1][20,phil-2-3,28,9,9,4,6,9,4][20,other-3,86,6,1,1,0,2,6][20,cs-3,82,4,0,1,0,2,0][18,phil-2-3,65,4,4,8,9,7,9][18,phil-2-3,11,4,9,5,3,9,1][18,phil-1,50,1,3,7,5,7,0][18,cs-3,40,1,1,9,4,9,9][17,phil-2-3,40,6,6,2,4,4,9][17,phil-1,49,6,0,7,9,4,5][17,phil-1,44,8,8,7,6,4,0][16,other-2,93,7,1,1,8,6,6][16,other-2,24,9,2,9,1,9,9][16,medic-2,95,6,7,9,5,6,1][15,other-1,29,7,0,7,4,2,4][15,cs-2,40,8,0,8,5,2,0][14,phil-2-3,56,1,2,5,2,4,4][14,phil-2-3,20,5,7,6,6,2,5][14,medic-2,88,4,7,0,1,1,6][14,cs-2,41,7,6,9,1,0,8][13,other-2,47,7,3,0,8,9,2][12,other-3,80,2,7,3,1,1,9][10,phil-2-3,93,4,9,7,1,3,5][10,other-3,30,3,6,5,2,8,0][10,other-1,80,1,6,1,2,5,5][10,cs-1,11,1,5,0,4,7,2][9,other-1,73,7,5,8,0,5,1][9,cs-1,47,1,1,6,3,4,0][8,other-1,47,3,8,8,4,1,5][8,cs-2,22,1,6,2,5,2,4][7,medic-2,45,4,0,1,6,3,0][5,phil-2-3,74,6,8,0,9,4,2][5,medic-2,36,0,9,0,0,9,2][5,medic-2,28,0,3,3,5,1,2][5,cs-1,3,2,4,3,2,6,7][4,cs-3,87,4,8,8,9,2,4][4,cs-2,31,5,1,1,0,5,3][3,other-3,95,4,2,0,1,3,4][3,other-1,20,2,8,1,6,4,4][3,medic-2,4,6,2,0,4,7,0][3,cs-3,43,0,6,6,4,4,2][3,cs-1,86,1,2,3,1,9,9][2,phil-2-3,10,2,6,0,8,0,1][2,cs-2,73,8,2,1,4,9,5][1,other-2,52,9,0,9,1,2,6][100,other-2,35,6,9,3,0,4,2][1,sentences]R = '["headache prevention app ",[[[],"headache"],["headache","intertwining"],["intertwining","layer"]],"swipl -G100g -T20g -L2g\n[\'../listprolog\'].\nleash(-all),visible(+all),protocol(""gla_del.txt""),trace,interpret(off,[[n,function],[[[[],""headache""],[""headache"",""intertwining""],[""intertwining"",""layer""]]]],[[[n,function],[[v,a]],"":-"",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],"":-"",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],"":-"",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],"":-"",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n[\'../Text-to-Breasonings/text_to_breasonings.pl\'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,""gla_del.txt"",u,M),texttobr(N,""gla_del.txt"",u,M))).\n[\'../texttobr2qb\'].\ntexttobr2(3).\nhalt.","\n\nswipl -G100g -T20g -L2g\n[\'../listprolog\'].\nleash(-all),visible(+all),protocol(""gla_del.txt""),trace,interpret(off,[[n,function],[[[[],""headache""],[""headache"",""intertwining""],[""intertwining"",""layer""]],[v,b]]],[[[n,function],[[v,a],[v,b]],"":-"",[[[n,tail],[[v,a],[v,b]]]]]],_),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n[\'../Text-to-Breasonings/text_to_breasonings.pl\'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,""gla_del.txt"",u,M),texttobr(N,""gla_del.txt"",u,M))).\n[\'../texttobr2qb\'].\ntexttobr2(3).\nhalt.",[["headache","intertwining"],["intertwining","layer"]],"swipl -G100g -T20g -L2g\n[\'../listprolog\'].\nleash(-all),visible(+all),protocol(""gla_del.txt""),trace,interpret(off,[[n,function],[[[""headache"",""intertwining""],[""intertwining"",""layer""]]]],[[[n,function],[[v,a]],"":-"",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],"":-"",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],"":-"",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],"":-"",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n[\'../Text-to-Breasonings/text_to_breasonings.pl\'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,""gla_del.txt"",u,M),texttobr(N,""gla_del.txt"",u,M))).\n[\'../texttobr2qb\'].\ntexttobr2(3).\nhalt.",[[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[],v],"app"]]),b_alg([[[[],v],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","tilt"],["tilt","formative"],["formative","unnoted"]]),b_alg([[[],"headache"],["headache","tilt"],["tilt","formative"],["formative","unnoted"]],a),bb_alg([["headache","tilt"],["tilt","formative"],["formative","unnoted"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"app"]]),b_alg([[[[[],v],a],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"app"],["app","philosophically"],["philosophically","translationmanagementsystem"]]),b_alg([[[],"app"],["app","philosophically"],["philosophically","translationmanagementsystem"]],a),bb_alg([["app","philosophically"],["philosophically","translationmanagementsystem"]])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","resetcps"],["resetcps","walls"]]),b_alg([[[],"headache"],["headache","resetcps"],["resetcps","walls"]],a),bb_alg([["headache","resetcps"],["resetcps","walls"]])],[*,"headache prevention app ",a_alg([[[[],v],"headache"]]),b_alg([[[[],v],"headache"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","preoedipal"],["preoedipal","strut"]]),b_alg([[[],"prevention"],["prevention","preoedipal"],["preoedipal","strut"]],a),bb_alg([["prevention","preoedipal"],["preoedipal","strut"]])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","trancing"],["trancing","perfectionism"],["perfectionism","den"]]),b_alg([[[],"headache"],["headache","trancing"],["trancing","perfectionism"],["perfectionism","den"]],a),bb_alg([["headache","trancing"],["trancing","perfectionism"],["perfectionism","den"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","guided"],["guided","constructive"]]),b_alg([[[],"headache"],["headache","guided"],["guided","constructive"]],a),bb_alg([["headache","guided"],["guided","constructive"]])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","hermeneutically"],["hermeneutically","hellod"],["hellod","incidents"]]),b_alg([[[],"headache"],["headache","hermeneutically"],["hermeneutically","hellod"],["hellod","incidents"]],a),bb_alg([["headache","hermeneutically"],["hermeneutically","hellod"],["hellod","incidents"]])],[*,"headache prevention app ",a_alg([[[],"app"],["app","passes"],["passes","popularity"],["popularity","written"]]),b_alg([[[],"app"],["app","passes"],["passes","popularity"],["popularity","written"]],a),bb_alg([["app","passes"],["passes","popularity"],["popularity","written"]])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","transformations"],["transformations","private"]]),b_alg([[[],"prevention"],["prevention","transformations"],["transformations","private"]],a),bb_alg([["prevention","transformations"],["transformations","private"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[[],v],a],"app"]]),b_alg([[[[[],v],a],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","cause"],["cause","explicated"],["explicated","categorised"]]),b_alg([[[],"prevention"],["prevention","cause"],["cause","explicated"],["explicated","categorised"]],a),bb_alg([["prevention","cause"],["cause","explicated"],["explicated","categorised"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[[],v],a],"app"]]),b_alg([[[[[],v],a],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"app"],["app","inferences"],["inferences","exemplary"],["exemplary","chip"]]),b_alg([[[],"app"],["app","inferences"],["inferences","exemplary"],["exemplary","chip"]],a),bb_alg([["app","inferences"],["inferences","exemplary"],["exemplary","chip"]])],[*,"headache prevention app ",a_alg([[[[[],v],a],"headache"]]),b_alg([[[[[],v],a],"headache"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[],v],"headache"]]),b_alg([[[[],v],"headache"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"app"],["app","iacit"],["iacit","enjoyed"],["enjoyed","hull"]]),b_alg([[[],"app"],["app","iacit"],["iacit","enjoyed"],["enjoyed","hull"]],a),bb_alg([["app","iacit"],["iacit","enjoyed"],["enjoyed","hull"]])],[*,"headache prevention app ",a_alg([[[],"app"],["app","woven"],["woven","sizzling"],["sizzling","keypad"]]),b_alg([[[],"app"],["app","woven"],["woven","sizzling"],["sizzling","keypad"]],a),bb_alg([["app","woven"],["woven","sizzling"],["sizzling","keypad"]])],[*,"headache prevention app ",a_alg([[[[],v],"app"]]),b_alg([[[[],v],"app"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[[[],v],a],"prevention"]]),b_alg([[[[[],v],a],"prevention"]],a),bb_alg([])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","sortcnremvdup"],["sortcnremvdup","materialise"]]),b_alg([[[],"prevention"],["prevention","sortcnremvdup"],["sortcnremvdup","materialise"]],a),bb_alg([["prevention","sortcnremvdup"],["sortcnremvdup","materialise"]])],[*,"headache prevention app ",a_alg([[[],"prevention"],["prevention","controls"],["controls","muscle"]]),b_alg([[[],"prevention"],["prevention","controls"],["controls","muscle"]],a),bb_alg([["prevention","controls"],["controls","muscle"]])],[*,"headache prevention app ",a_alg([[[],"headache"],["headache","embark"],["embark","updatetrans"],["updatetrans","cracking"]]),b_alg([[[],"headache"],["headache","embark"],["embark","updatetrans"],["updatetrans","cracking"]],a),bb_alg([["headache","embark"],["embark","updatetrans"],["updatetrans","cracking"]])]],[]]'.?- vedic_mr("breasonings",R).
[100,phil-2-3,53,5,0,4,9,0,6][100,phil-1,59,9,2,9,2,2,2][100,phil-1,53,8,0,1,0,7,6][100,other-2,19,6,7,7,2,5,6][100,other-2,13,9,7,0,6,5,4][100,medic-2,67,8,0,6,6,0,4][100,cs-1,85,9,1,5,0,4,4][99,phil-1,36,9,7,1,4,5,1][99,other-1,48,1,6,8,8,3,9][99,medic-2,85,1,8,9,6,2,4][99,cs-1,87,9,4,5,0,3,2][98,phil-2-3,88,6,3,5,9,9,1][98,phil-1,96,4,9,3,6,6,0][98,phil-1,58,6,2,4,4,0,2][98,other-2,20,3,7,0,0,2,3][98,other-1,22,5,7,6,8,1,8][98,medic-2,76,4,7,1,3,5,5][98,cs-2,93,4,7,6,2,7,0][98,cs-2,47,3,4,3,3,2,6][97,phil-2-3,60,0,3,5,5,6,3][97,phil-2-3,20,8,8,7,4,2,9][97,other-3,84,6,5,4,5,4,3][97,other-1,56,2,2,9,9,9,0][97,medic-2,3,6,8,2,8,8,9][97,cs-2,46,2,3,3,8,5,0][97,cs-1,13,4,7,0,8,5,5][96,phil-1,22,0,5,1,6,8,8][96,other-2,17,1,4,6,5,5,1][96,other-1,28,8,1,0,2,4,1][96,cs-3,57,1,9,6,2,4,4][96,cs-1,76,9,9,4,5,5,1][96,cs-1,32,4,8,7,5,6,6][95,phil-1,43,4,3,7,1,3,6][95,cs-3,28,2,7,4,3,2,3][95,cs-1,90,5,6,9,7,5,2][95,cs-1,42,6,4,4,7,3,9][95,cs-1,19,1,8,6,4,1,7][94,phil-2-3,32,8,8,4,8,2,8][94,phil-2-3,14,8,1,9,9,2,6][94,phil-2-3,10,3,4,6,5,1,9][94,phil-1,51,3,5,0,8,3,7][94,other-2,18,4,7,6,8,8,8][94,other-1,58,0,1,2,7,0,5][94,cs-3,37,2,9,4,0,0,8][93,phil-2-3,71,6,6,0,1,4,1][93,phil-1,27,4,8,3,9,8,8][93,other-3,46,5,1,8,1,0,6][93,cs-1,68,1,3,8,6,2,8][92,other-2,57,0,1,3,6,3,7][92,other-1,8,4,3,2,3,2,0][92,cs-3,39,4,3,6,3,0,5][91,other-2,79,3,0,0,0,0,5][91,other-2,63,5,3,3,1,7,6][91,medic-2,57,4,9,5,9,3,5][91,cs-1,10,3,9,9,4,0,4][90,phil-2-3,28,0,4,8,6,5,7][90,other-3,87,7,3,8,6,7,2][90,medic-2,75,2,4,1,7,5,0][90,cs-2,38,0,6,8,5,9,1][89,phil-1,45,7,4,4,7,8,2][89,other-2,96,5,5,7,4,6,2][89,cs-3,33,7,3,7,0,2,4][88,phil-2-3,51,0,1,7,0,6,5][88,phil-1,78,3,7,2,5,7,6][88,phil-1,20,7,5,0,0,2,2][88,medic-2,56,9,5,6,7,8,2][88,cs-3,86,9,5,2,1,8,3][88,cs-2,100,8,9,3,5,4,7][88,cs-2,45,3,0,8,1,4,4][87,phil-2-3,35,0,0,0,2,2,0][86,phil-2-3,9,1,3,3,6,6,0][86,phil-1,69,6,3,0,6,3,9][86,other-3,85,4,7,6,7,7,8][86,other-1,15,3,9,4,9,6,8][85,other-3,7,6,4,7,8,3,0][85,other-1,49,0,8,0,2,4,6][85,medic-2,64,1,6,2,3,0,0][85,cs-3,73,3,0,0,6,5,7][85,cs-2,78,9,6,1,2,1,9][85,cs-2,62,6,3,5,0,6,2][85,cs-2,34,9,3,1,4,3,8][85,cs-1,100,1,8,8,6,9,6][85,cs-1,3,4,5,6,4,5,2][84,other-2,25,9,6,2,9,2,0][84,other-1,33,2,3,5,1,7,1][84,medic-2,69,6,2,2,9,0,7][84,cs-3,78,5,3,3,4,6,0][83,phil-1,85,3,5,2,6,2,9][83,cs-3,99,4,5,6,3,6,5][83,cs-1,29,0,9,3,3,7,6][82,phil-2-3,56,1,0,0,6,2,5][82,phil-2-3,36,2,7,2,9,2,1][82,phil-1,74,6,6,6,3,1,3][82,cs-1,72,0,8,3,8,4,1][81,phil-1,13,9,4,6,9,1,9][81,medic-2,17,1,5,4,8,4,5][81,cs-1,86,7,1,7,4,7,0][80,phil-2-3,48,2,1,3,1,0,3][80,phil-2-3,38,8,7,0,6,0,0][80,phil-1,54,1,1,5,4,4,6][80,other-2,2,9,4,9,3,9,2][80,other-1,47,2,0,5,8,9,5][80,medic-2,13,4,0,2,5,0,7][80,cs-1,64,5,7,6,3,6,0][80,cs-1,62,4,5,5,0,7,5][80,cs-1,21,6,2,1,7,0,0][79,phil-2-3,47,2,4,7,4,7,8][79,other-2,87,9,6,4,0,0,7][79,other-1,41,6,7,3,9,3,8][79,cs-2,76,5,7,7,8,5,6][79,cs-2,19,5,9,2,2,5,7][78,phil-2-3,2,8,1,2,2,6,6][78,phil-1,23,3,5,3,3,5,2][78,other-1,24,1,2,3,9,0,4][78,medic-2,7,3,6,3,6,2,3][78,cs-1,6,4,5,8,5,6,5][77,other-1,88,7,6,2,3,2,2][77,cs-1,8,5,2,2,9,4,8][76,phil-1,14,6,5,9,4,9,4][76,other-3,70,9,2,1,2,5,6][76,cs-3,12,8,3,1,4,7,0][76,cs-2,24,3,8,7,8,1,3][76,cs-2,21,4,5,6,5,8,4][75,other-3,64,3,8,1,7,9,0][75,other-1,77,6,5,5,5,1,8][75,medic-2,71,7,4,0,5,4,3][75,cs-2,94,3,3,8,9,6,0][75,cs-1,59,3,1,1,2,0,5][74,other-3,99,4,0,4,4,3,4][74,other-2,81,3,1,0,7,5,8][74,other-2,1,6,4,3,9,7,4][74,medic-2,93,7,5,7,2,5,1][74,cs-3,36,9,4,0,9,4,1][74,cs-1,48,4,0,1,8,8,3][74,cs-1,25,2,0,4,1,6,9][73,other-3,86,4,2,9,3,0,4][73,other-2,16,2,8,5,0,1,6][73,medic-2,16,7,4,6,4,2,2][73,cs-2,26,5,6,1,2,4,9][72,phil-2-3,98,4,8,7,0,5,7][72,other-3,55,7,7,8,3,5,1][72,other-2,35,9,9,9,0,1,8][72,other-1,4,7,0,1,5,5,9][72,cs-1,54,1,4,8,2,7,7][71,other-1,19,0,2,4,9,0,2][71,medic-2,95,4,5,8,0,1,3][71,cs-2,52,0,3,4,8,3,9][71,cs-2,15,0,3,0,8,6,3][70,phil-2-3,83,4,0,4,6,3,0][70,phil-1,87,2,5,8,7,8,6][70,phil-1,66,0,4,5,7,0,9][70,other-3,29,4,5,4,3,0,3][70,cs-3,82,4,2,8,8,4,2][70,cs-3,65,7,4,2,7,0,5][69,cs-3,95,9,8,5,5,6,7][69,cs-3,19,3,9,5,1,8,7][69,cs-1,67,3,8,7,1,9,9][69,cs-1,1,3,3,8,0,7,9][68,phil-2-3,26,9,1,8,3,6,0][68,phil-2-3,19,0,3,4,8,1,1][68,phil-1,1,8,0,1,8,7,5][68,other-1,69,0,2,4,2,4,4][68,cs-1,40,7,0,6,1,7,3][68,cs-1,28,9,0,8,6,8,0][67,phil-2-3,17,6,7,5,0,4,2][67,phil-1,46,1,2,5,8,6,3][67,other-3,91,7,2,6,2,2,6][67,medic-2,79,8,6,2,3,7,0][67,cs-2,56,8,9,9,1,0,7][67,cs-1,96,9,4,0,1,1,2][66,phil-1,56,1,7,3,0,0,7][66,other-2,11,2,2,5,9,9,6][66,other-1,100,3,3,1,7,5,5][66,cs-3,63,8,1,7,5,5,3][66,cs-1,81,7,8,4,8,5,3][65,phil-2-3,34,4,6,2,3,0,1][64,phil-2-3,64,1,6,5,8,0,7][64,phil-1,35,0,0,7,6,1,4][64,other-2,48,8,1,0,9,6,5][64,other-1,82,6,6,5,7,6,9][64,medic-2,54,9,8,6,0,1,9][64,cs-2,99,8,6,7,0,8,5][64,cs-2,3,5,4,5,8,4,3][64,cs-1,95,3,0,0,3,1,5][63,other-2,80,9,2,2,5,7,7][63,other-1,78,1,6,1,3,0,0][63,medic-2,91,7,5,0,9,9,1][63,medic-2,4,2,1,9,4,7,3][63,cs-3,40,6,0,9,9,5,3][63,cs-2,59,7,2,6,5,8,8][62,medic-2,89,5,0,1,2,8,1][62,cs-3,92,5,7,4,6,9,0][62,cs-3,21,0,0,5,0,9,8][61,phil-1,19,3,3,2,0,4,1][61,other-3,11,7,6,7,5,6,3][61,cs-3,96,5,6,0,7,1,8][61,cs-2,53,9,5,1,1,5,1][60,phil-2-3,13,4,6,5,8,9,2][60,phil-1,25,6,5,5,2,7,0][60,other-2,61,6,6,8,8,6,0][60,other-1,2,7,7,9,6,3,9][60,cs-3,15,5,2,1,8,0,2][60,cs-3,5,8,5,5,6,7,5][60,cs-1,65,1,9,1,8,0,5][59,phil-1,62,8,0,0,4,2,8][59,other-1,79,8,1,9,3,5,3][59,other-1,25,1,6,8,5,1,4][59,medic-2,99,9,8,6,1,9,6][59,cs-1,5,4,4,4,5,5,8][58,phil-1,32,8,4,5,9,2,6][58,cs-1,91,9,3,0,9,0,1][56,phil-1,68,7,7,7,8,7,6][56,other-3,59,5,9,5,7,4,9][56,cs-2,69,7,5,7,6,8,4][56,cs-2,13,6,7,3,2,4,5][56,cs-1,78,5,5,8,2,3,5][55,phil-1,26,5,4,7,6,1,1][55,other-3,98,7,9,8,0,0,2][55,other-3,44,2,8,7,8,0,2][55,other-1,95,8,9,0,7,3,8][54,phil-1,61,6,9,9,2,4,1][54,other-3,92,6,9,5,2,6,2][54,other-1,51,9,2,1,3,6,7][54,medic-2,88,3,5,8,8,4,2][54,medic-2,53,3,5,5,0,9,6][54,cs-1,22,2,1,2,7,5,4][53,phil-1,60,0,7,8,0,0,3][53,other-3,96,6,9,1,4,0,5][53,other-2,22,6,5,8,4,6,2][53,cs-3,6,3,9,7,4,4,8][52,medic-2,15,3,3,6,4,7,5][52,medic-2,5,4,2,2,9,8,8][52,cs-3,87,6,4,5,2,2,8][52,cs-2,72,8,6,0,5,2,9][52,cs-1,79,8,1,1,1,6,3][51,phil-2-3,3,3,8,3,0,7,5][51,phil-1,90,1,5,2,2,0,3][51,other-2,27,8,9,5,1,6,1][51,other-2,24,5,0,9,0,8,3][51,other-1,45,5,5,7,3,0,1][51,medic-2,80,2,1,9,6,0,0][51,medic-2,43,2,7,4,9,6,0][51,medic-2,33,7,7,3,7,6,8][51,medic-2,19,1,4,8,9,9,8][50,other-2,36,2,3,6,1,1,3][50,other-1,76,3,2,8,3,7,5][50,cs-2,49,1,2,6,1,8,5][50,cs-1,63,7,5,7,2,7,5][49,other-3,32,3,9,0,6,2,1][49,other-2,97,5,5,6,9,8,4][49,cs-1,45,1,2,7,1,8,4][48,medic-2,65,6,3,1,6,3,5][47,phil-1,100,4,5,1,3,6,1][47,other-2,98,1,9,6,2,9,8][47,cs-3,42,0,3,5,3,9,2][46,other-1,39,5,1,3,0,3,1][46,cs-3,67,9,3,5,5,3,4][45,phil-2-3,4,6,4,9,5,4,5][45,other-2,62,5,4,7,8,4,5][44,phil-1,47,5,6,6,2,8,3][44,phil-1,8,2,3,7,0,0,6][44,cs-1,57,1,3,6,1,5,3][44,cs-1,4,5,2,0,8,6,5][43,phil-1,2,1,7,0,2,0,3][42,phil-1,72,3,5,7,4,3,9][42,medic-2,98,9,5,9,7,2,7][42,cs-3,30,9,1,2,3,7,6][42,cs-3,17,1,3,0,5,8,4][41,phil-2-3,18,3,1,8,7,6,0][41,phil-1,92,2,0,0,9,8,3][41,other-3,72,6,4,5,1,7,7][41,other-3,48,1,2,2,9,9,0][40,phil-2-3,81,2,6,2,7,0,6][40,phil-2-3,75,1,4,9,9,7,2][40,phil-1,71,4,0,5,0,4,4][40,other-1,83,5,4,0,0,6,4][40,medic-2,84,2,4,5,6,1,8][40,cs-2,98,8,2,6,7,3,4][39,other-1,74,0,0,4,6,7,6][39,other-1,68,3,9,8,2,8,6][39,cs-3,98,1,9,3,1,8,2][39,cs-2,73,0,5,6,2,7,2][39,cs-1,83,1,1,4,5,5,0][39,cs-1,27,7,6,1,6,9,7][38,other-3,4,4,2,9,1,1,3][38,other-2,52,8,9,7,7,0,7][38,cs-3,77,9,9,1,8,2,1][37,phil-2-3,97,8,1,7,0,0,6][37,phil-2-3,6,7,2,7,1,8,3][37,phil-1,33,7,4,1,5,0,1][37,other-1,73,2,1,9,3,8,4][37,other-1,18,0,3,1,8,0,5][37,other-1,17,2,6,4,3,8,5][37,cs-3,93,3,2,5,9,8,0][37,cs-2,33,6,7,5,0,5,8][37,cs-1,98,8,4,2,3,4,1][37,cs-1,52,6,1,8,6,5,0][36,phil-2-3,41,8,9,3,3,2,6][36,phil-1,39,3,0,9,7,8,9][36,other-3,22,8,2,9,0,4,3][36,medic-2,82,7,9,1,1,6,1][36,medic-2,14,1,1,4,8,6,3][35,phil-2-3,94,0,4,8,9,5,6][35,medic-2,62,3,7,4,0,6,6][35,medic-2,25,8,7,7,5,4,7][35,cs-3,22,6,0,4,6,7,6][34,phil-2-3,31,1,8,2,1,9,6][34,other-2,76,4,1,9,8,0,9][34,other-1,65,2,1,3,3,5,8][34,medic-2,96,8,9,1,2,2,2][34,medic-2,90,2,9,1,9,9,4][34,cs-2,66,0,8,4,1,4,5][33,phil-2-3,42,4,5,0,4,5,8][33,cs-1,7,4,0,1,1,5,3][32,other-3,57,1,7,7,8,2,5][32,other-2,41,4,6,0,2,8,6][32,medic-2,6,9,4,8,2,1,3][31,other-2,40,2,5,6,2,1,8][31,cs-2,7,9,1,0,0,0,2][30,medic-2,36,7,0,2,7,4,9][30,cs-3,35,7,5,9,6,5,1][30,cs-3,13,2,4,9,9,6,7][29,other-1,1,2,4,7,6,6,9][29,cs-2,43,6,7,0,6,8,3][28,phil-2-3,95,7,8,0,7,3,7][28,phil-2-3,57,1,1,2,0,2,6][28,other-1,81,8,5,1,3,1,7][28,other-1,13,7,9,4,0,2,5][28,cs-3,58,4,8,7,4,6,7][28,cs-2,51,4,9,9,5,1,7][28,cs-1,93,6,2,0,6,2,1][27,phil-2-3,100,9,8,3,7,3,7][27,phil-2-3,73,8,1,9,2,5,4][27,phil-2-3,54,4,5,6,0,8,7][27,medic-2,46,6,7,1,2,3,4][27,cs-2,23,6,0,9,2,4,4][27,cs-1,88,3,1,2,4,2,3][27,cs-1,39,1,6,2,9,1,2][26,medic-2,51,2,1,2,1,8,8][26,medic-2,23,5,1,3,2,3,6][25,phil-2-3,15,4,7,0,9,2,8][25,phil-1,73,7,4,7,8,9,4][25,other-3,69,7,1,4,0,5,4][25,other-3,27,9,7,5,9,2,4][25,other-1,59,4,5,4,9,3,7][25,other-1,7,8,3,6,4,4,9][25,cs-1,18,9,6,1,2,8,7][24,cs-1,31,7,1,9,2,1,3][23,phil-1,17,5,0,2,2,8,9][23,other-1,96,1,8,7,7,9,5][23,cs-2,16,0,0,8,8,3,8][23,cs-1,70,7,3,1,7,2,6][22,phil-2-3,76,5,6,1,4,9,1][22,other-1,84,4,9,7,6,9,9][22,medic-2,86,0,3,8,7,3,2][22,medic-2,24,9,5,0,9,2,8][22,cs-1,77,6,3,4,4,3,0][22,cs-1,16,4,2,2,3,7,6][21,other-3,67,8,1,5,6,0,9][21,medic-2,68,1,2,9,4,9,9][21,cs-1,82,6,6,3,5,8,9][20,phil-2-3,23,4,8,9,2,5,1][20,cs-2,84,4,1,7,5,5,6][20,cs-2,65,7,7,4,3,1,8][19,phil-2-3,12,0,1,9,5,5,1][19,other-3,81,3,1,8,6,5,9][19,other-2,82,8,6,6,5,1,6][19,other-2,69,9,2,0,4,9,3][19,medic-2,8,5,6,2,3,6,3][19,cs-3,18,9,9,9,7,7,7][18,phil-2-3,65,1,9,7,6,5,4][18,cs-2,97,4,8,6,4,8,8][18,cs-1,9,2,2,6,0,2,4][17,phil-2-3,72,1,6,7,3,7,2][17,other-3,100,1,6,5,1,6,1][17,other-3,30,4,2,4,1,0,5][17,other-2,93,1,2,9,8,7,2][17,other-1,66,7,1,4,6,0,9][17,medic-2,29,3,1,8,8,6,6][17,cs-3,53,6,5,6,9,4,5][17,cs-2,6,8,7,7,8,2,3][17,cs-1,89,5,7,0,5,3,4][16,phil-2-3,5,0,7,6,2,2,6][16,phil-1,64,4,2,5,6,4,4][16,phil-1,9,7,4,1,3,5,7][16,other-1,94,1,0,3,7,8,4][16,other-1,63,6,0,3,1,0,8][16,medic-2,26,2,7,6,0,8,2][16,cs-3,52,6,5,9,3,4,7][15,other-3,65,4,8,3,6,8,5][15,medic-2,42,2,3,0,2,5,0][15,cs-3,47,7,5,4,5,9,1][15,cs-2,80,3,6,3,0,0,8][14,other-3,54,0,5,6,2,3,1][14,other-2,77,7,9,3,6,9,5][14,other-2,55,0,6,5,0,6,4][14,other-2,45,4,8,2,9,3,4][13,phil-2-3,55,9,3,0,6,1,9][13,other-3,34,3,7,8,8,2,1][13,other-1,43,4,3,4,4,5,3][12,cs-3,75,5,7,2,3,1,2][12,cs-3,64,3,7,3,9,6,3][12,cs-2,91,0,0,2,9,2,9][11,phil-1,40,6,2,2,8,6,4][11,other-2,64,8,0,4,1,3,6][11,other-1,14,5,3,8,9,9,3][11,cs-3,24,2,4,6,8,7,1][11,cs-2,11,6,1,5,3,4,6][10,phil-2-3,22,4,9,8,1,5,4][10,phil-2-3,21,2,5,1,4,1,4][10,phil-1,63,8,6,2,7,8,6][10,phil-1,21,2,4,6,3,8,7][10,other-1,98,0,6,9,1,3,9][10,medic-2,97,7,8,9,6,6,6][10,medic-2,32,2,6,3,9,4,0][10,cs-2,36,2,9,1,3,0,9][9,other-3,90,7,1,6,0,6,9][9,other-3,56,1,0,9,5,3,6][9,other-2,31,2,2,2,2,2,9][9,cs-3,69,9,8,4,2,9,4][9,cs-3,14,4,1,3,4,5,7][8,phil-2-3,62,2,2,8,0,1,4][8,other-3,93,1,1,2,2,7,5][8,other-3,12,0,4,2,3,0,9][8,other-2,88,0,1,7,9,4,8][8,other-1,80,8,8,2,1,4,2][8,medic-2,34,3,5,7,7,1,1][7,phil-2-3,52,1,7,9,5,8,4][7,phil-2-3,49,2,5,1,7,1,3][7,other-3,89,5,0,3,8,8,7][7,other-3,31,1,9,6,4,7,8][7,other-2,99,8,1,0,1,4,0][7,other-1,34,4,4,6,7,5,3][7,medic-2,37,6,0,5,6,3,0][7,medic-2,10,2,1,5,0,1,8][7,cs-1,66,8,0,9,7,3,6][6,phil-1,48,4,9,1,0,6,2][6,other-2,74,7,4,1,9,0,2][6,other-2,6,6,1,6,5,0,5][6,other-1,99,5,4,6,6,0,5][6,other-1,36,6,1,8,1,8,9][6,cs-3,16,7,6,7,0,3,1][5,other-2,86,0,0,3,5,0,1][5,other-1,31,1,1,2,4,1,8][5,cs-3,54,7,9,9,8,6,9][5,cs-3,48,1,2,9,3,5,4][4,other-3,78,4,7,7,5,0,1][4,cs-3,68,5,7,5,7,7,7][3,phil-1,77,4,7,0,2,7,9][2,phil-2-3,59,8,0,1,1,6,8][2,phil-1,84,5,0,6,3,0,7][2,other-2,100,1,6,7,6,9,3][2,other-2,84,5,0,3,9,5,6][2,medic-2,31,5,4,7,8,2,7][2,cs-3,88,0,0,7,2,0,0][2,cs-1,43,5,7,6,7,4,3][1,cs-1,41,8,0,1,2,8,9][100,phil-1,59,9,2,9,2,2,2][100,medic-2,67,8,0,6,6,0,4][100,cs-1,85,9,1,5,0,4,4][99,cs-1,87,9,4,5,0,3,2][98,phil-1,96,4,9,3,6,6,0][98,medic-2,76,4,7,1,3,5,5][98,cs-2,93,4,7,6,2,7,0][97,phil-2-3,60,0,3,5,5,6,3][97,phil-2-3,20,8,8,7,4,2,9][97,other-3,84,6,5,4,5,4,3][97,other-1,56,2,2,9,9,9,0][97,cs-2,46,2,3,3,8,5,0][96,phil-1,22,0,5,1,6,8,8][96,cs-3,57,1,9,6,2,4,4][96,cs-1,32,4,8,7,5,6,6][95,phil-1,43,4,3,7,1,3,6][95,cs-3,28,2,7,4,3,2,3][95,cs-1,90,5,6,9,7,5,2][95,cs-1,42,6,4,4,7,3,9][94,phil-2-3,14,8,1,9,9,2,6][94,phil-2-3,10,3,4,6,5,1,9][94,other-2,18,4,7,6,8,8,8][94,other-1,58,0,1,2,7,0,5][94,cs-3,37,2,9,4,0,0,8][93,other-3,46,5,1,8,1,0,6][92,other-1,8,4,3,2,3,2,0][92,cs-3,39,4,3,6,3,0,5][91,other-2,63,5,3,3,1,7,6][91,medic-2,57,4,9,5,9,3,5][91,cs-1,10,3,9,9,4,0,4][90,phil-2-3,28,0,4,8,6,5,7][90,medic-2,75,2,4,1,7,5,0][89,phil-1,45,7,4,4,7,8,2][89,other-2,96,5,5,7,4,6,2][89,cs-3,33,7,3,7,0,2,4][88,phil-2-3,51,0,1,7,0,6,5][88,phil-1,78,3,7,2,5,7,6][88,phil-1,20,7,5,0,0,2,2][88,cs-3,86,9,5,2,1,8,3][86,phil-2-3,9,1,3,3,6,6,0][86,other-3,85,4,7,6,7,7,8][85,other-3,7,6,4,7,8,3,0][85,other-1,49,0,8,0,2,4,6][85,cs-3,73,3,0,0,6,5,7][85,cs-1,3,4,5,6,4,5,2][84,medic-2,69,6,2,2,9,0,7][84,cs-3,78,5,3,3,4,6,0][83,phil-1,85,3,5,2,6,2,9][82,cs-1,72,0,8,3,8,4,1][81,cs-1,86,7,1,7,4,7,0][80,phil-1,54,1,1,5,4,4,6][80,other-2,2,9,4,9,3,9,2][80,cs-1,62,4,5,5,0,7,5][79,cs-2,19,5,9,2,2,5,7][78,other-1,24,1,2,3,9,0,4][78,cs-1,6,4,5,8,5,6,5][75,other-3,64,3,8,1,7,9,0][75,cs-2,94,3,3,8,9,6,0][75,cs-1,59,3,1,1,2,0,5][74,other-2,81,3,1,0,7,5,8][74,other-2,1,6,4,3,9,7,4][74,cs-3,36,9,4,0,9,4,1][73,other-3,86,4,2,9,3,0,4][73,medic-2,16,7,4,6,4,2,2][72,other-3,55,7,7,8,3,5,1][72,other-1,4,7,0,1,5,5,9][71,cs-2,52,0,3,4,8,3,9][70,phil-1,66,0,4,5,7,0,9][70,other-3,29,4,5,4,3,0,3][70,cs-3,82,4,2,8,8,4,2][68,phil-2-3,26,9,1,8,3,6,0][68,phil-1,1,8,0,1,8,7,5][67,medic-2,79,8,6,2,3,7,0][67,cs-1,96,9,4,0,1,1,2][66,phil-1,56,1,7,3,0,0,7][66,other-1,100,3,3,1,7,5,5][66,cs-1,81,7,8,4,8,5,3][65,phil-2-3,34,4,6,2,3,0,1][64,phil-2-3,64,1,6,5,8,0,7][64,cs-2,99,8,6,7,0,8,5][63,medic-2,91,7,5,0,9,9,1][63,cs-2,59,7,2,6,5,8,8][61,phil-1,19,3,3,2,0,4,1][60,phil-2-3,13,4,6,5,8,9,2][59,phil-1,62,8,0,0,4,2,8][59,other-1,25,1,6,8,5,1,4][59,medic-2,99,9,8,6,1,9,6][58,phil-1,32,8,4,5,9,2,6][58,cs-1,91,9,3,0,9,0,1][56,cs-2,13,6,7,3,2,4,5][55,other-3,98,7,9,8,0,0,2][55,other-1,95,8,9,0,7,3,8][54,medic-2,53,3,5,5,0,9,6][54,cs-1,22,2,1,2,7,5,4][53,phil-1,60,0,7,8,0,0,3][53,cs-3,6,3,9,7,4,4,8][52,medic-2,5,4,2,2,9,8,8][52,cs-2,72,8,6,0,5,2,9][52,cs-1,79,8,1,1,1,6,3][51,phil-1,90,1,5,2,2,0,3][51,other-1,45,5,5,7,3,0,1][51,medic-2,43,2,7,4,9,6,0][50,other-1,76,3,2,8,3,7,5][50,cs-2,49,1,2,6,1,8,5][49,other-3,32,3,9,0,6,2,1][49,other-2,97,5,5,6,9,8,4][49,cs-1,45,1,2,7,1,8,4][48,medic-2,65,6,3,1,6,3,5][47,phil-1,100,4,5,1,3,6,1][47,other-2,98,1,9,6,2,9,8][47,cs-3,42,0,3,5,3,9,2][45,phil-2-3,4,6,4,9,5,4,5][44,phil-1,47,5,6,6,2,8,3][44,phil-1,8,2,3,7,0,0,6][44,cs-1,57,1,3,6,1,5,3][42,phil-1,72,3,5,7,4,3,9][42,medic-2,98,9,5,9,7,2,7][42,cs-3,30,9,1,2,3,7,6][41,phil-1,92,2,0,0,9,8,3][41,other-3,48,1,2,2,9,9,0][40,phil-1,71,4,0,5,0,4,4][40,other-1,83,5,4,0,0,6,4][40,medic-2,84,2,4,5,6,1,8][39,other-1,68,3,9,8,2,8,6][39,cs-1,83,1,1,4,5,5,0][39,cs-1,27,7,6,1,6,9,7][38,other-3,4,4,2,9,1,1,3][38,other-2,52,8,9,7,7,0,7][38,cs-3,77,9,9,1,8,2,1][37,other-1,73,2,1,9,3,8,4][37,other-1,18,0,3,1,8,0,5][37,cs-3,93,3,2,5,9,8,0][37,cs-1,52,6,1,8,6,5,0][36,medic-2,82,7,9,1,1,6,1][36,medic-2,14,1,1,4,8,6,3][35,medic-2,62,3,7,4,0,6,6][35,medic-2,25,8,7,7,5,4,7][35,cs-3,22,6,0,4,6,7,6][34,phil-2-3,31,1,8,2,1,9,6][34,other-2,76,4,1,9,8,0,9][34,medic-2,90,2,9,1,9,9,4][34,cs-2,66,0,8,4,1,4,5][33,phil-2-3,42,4,5,0,4,5,8][32,other-3,57,1,7,7,8,2,5][32,medic-2,6,9,4,8,2,1,3][31,other-2,40,2,5,6,2,1,8][31,cs-2,7,9,1,0,0,0,2][30,cs-3,35,7,5,9,6,5,1][29,other-1,1,2,4,7,6,6,9][28,phil-2-3,95,7,8,0,7,3,7][28,other-1,13,7,9,4,0,2,5][28,cs-3,58,4,8,7,4,6,7][28,cs-1,93,6,2,0,6,2,1][27,phil-2-3,54,4,5,6,0,8,7][27,medic-2,46,6,7,1,2,3,4][27,cs-1,39,1,6,2,9,1,2][25,phil-1,73,7,4,7,8,9,4][25,other-1,59,4,5,4,9,3,7][25,other-1,7,8,3,6,4,4,9][25,cs-1,18,9,6,1,2,8,7][24,cs-1,31,7,1,9,2,1,3][23,other-1,96,1,8,7,7,9,5][23,cs-2,16,0,0,8,8,3,8][23,cs-1,70,7,3,1,7,2,6][22,other-1,84,4,9,7,6,9,9][21,other-3,67,8,1,5,6,0,9][21,medic-2,68,1,2,9,4,9,9][19,other-2,69,9,2,0,4,9,3][19,cs-3,18,9,9,9,7,7,7][18,phil-2-3,65,1,9,7,6,5,4][17,phil-2-3,72,1,6,7,3,7,2][17,other-2,93,1,2,9,8,7,2][17,other-1,66,7,1,4,6,0,9][17,cs-3,53,6,5,6,9,4,5][16,phil-2-3,5,0,7,6,2,2,6][16,other-1,94,1,0,3,7,8,4][16,medic-2,26,2,7,6,0,8,2][15,medic-2,42,2,3,0,2,5,0][14,other-3,54,0,5,6,2,3,1][14,other-2,77,7,9,3,6,9,5][14,other-2,45,4,8,2,9,3,4][12,cs-3,75,5,7,2,3,1,2][11,phil-1,40,6,2,2,8,6,4][11,other-2,64,8,0,4,1,3,6][11,other-1,14,5,3,8,9,9,3][11,cs-3,24,2,4,6,8,7,1][10,phil-2-3,21,2,5,1,4,1,4][10,phil-1,21,2,4,6,3,8,7][10,other-1,98,0,6,9,1,3,9][10,medic-2,32,2,6,3,9,4,0][9,other-3,56,1,0,9,5,3,6][9,cs-3,69,9,8,4,2,9,4][8,other-3,93,1,1,2,2,7,5][8,other-3,12,0,4,2,3,0,9][8,other-2,88,0,1,7,9,4,8][8,medic-2,34,3,5,7,7,1,1][7,phil-2-3,52,1,7,9,5,8,4][7,other-3,89,5,0,3,8,8,7][7,other-3,31,1,9,6,4,7,8][7,other-2,99,8,1,0,1,4,0][7,other-1,34,4,4,6,7,5,3][7,medic-2,37,6,0,5,6,3,0][6,phil-1,48,4,9,1,0,6,2][6,other-2,74,7,4,1,9,0,2][6,other-1,99,5,4,6,6,0,5][6,cs-3,16,7,6,7,0,3,1][5,other-2,86,0,0,3,5,0,1][5,other-1,31,1,1,2,4,1,8][5,cs-3,54,7,9,9,8,6,9][4,other-3,78,4,7,7,5,0,1][4,cs-3,68,5,7,5,7,7,7][2,other-2,100,1,6,7,6,9,3][2,cs-3,88,0,0,7,2,0,0][2,cs-1,43,5,7,6,7,4,3][1,cs-1,41,8,0,1,2,8,9][100,phil-1,59,9,2,9,2,2,2][1,sentences]R = '["breasonings ",[[[],"breasonings"],["breasonings","interrelationships"],["interrelationships","inessive"]],"swipl -G100g -T20g -L2g\n[\'../listprolog\'].\nleash(-all),visible(+all),protocol(""gla_del.txt""),trace,interpret(off,[[n,function],[[[[],""breasonings""],[""breasonings"",""interrelationships""],[""interrelationships"",""inessive""]]]],[[[n,function],[[v,a]],"":-"",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],"":-"",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],"":-"",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],"":-"",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n[\'../Text-to-Breasonings/text_to_breasonings.pl\'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,""gla_del.txt"",u,M),texttobr(N,""gla_del.txt"",u,M))).\n[\'../texttobr2qb\'].\ntexttobr2(3).\nhalt.","\n\nswipl -G100g -T20g -L2g\n[\'../listprolog\'].\nleash(-all),visible(+all),protocol(""gla_del.txt""),trace,interpret(off,[[n,function],[[[[],""breasonings""],[""breasonings"",""interrelationships""],[""interrelationships"",""inessive""]],[v,b]]],[[[n,function],[[v,a],[v,b]],"":-"",[[[n,tail],[[v,a],[v,b]]]]]],_),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n[\'../Text-to-Breasonings/text_to_breasonings.pl\'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,""gla_del.txt"",u,M),texttobr(N,""gla_del.txt"",u,M))).\n[\'../texttobr2qb\'].\ntexttobr2(3).\nhalt.",[["breasonings","interrelationships"],["interrelationships","inessive"]],"swipl -G100g -T20g -L2g\n[\'../listprolog\'].\nleash(-all),visible(+all),protocol(""gla_del.txt""),trace,interpret(off,[[n,function],[[[""breasonings"",""interrelationships""],[""interrelationships"",""inessive""]]]],[[[n,function],[[v,a]],"":-"",[[[n,length],[[v,a],0,1]]]],[[n,function],[[v,a]],"":-"",[[[n,head],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,e],[v,f]]]],[[n,reverse],[[v,a],[],[v,a1]]],[[n,head],[[v,a1],[v,d1]]],[[n,equals1],[[v,d1],[[v,e1],[v,f1]]]],[[n,function2],[[v,a],[v,f],[v,f1]]]]],[[n,reverse],[[],[v,l],[v,l]]],[[n,reverse],[[v,l],[v,m],[v,n]],"":-"",[[[n,head],[[v,l],[v,h]]],[[n,tail],[[v,l],[v,t]]],[[n,wrap],[[v,h],[v,h1]]],[[n,append],[[v,h1],[v,m],[v,o]]],[[n,reverse],[[v,t],[v,o],[v,n]]]]],[[n,function2],[[v,a],[v,b],[v,f]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]]]],[[n,function2],[[v,a],[v,b],[v,c]],"":-"",[[[n,member2],[[v,a],[v,d]]],[[n,equals1],[[v,d],[[v,b],[v,f]]]],[[n,function2],[[v,d],[v,f],[v,c]]]]],[[n,length],[[],[v,l],[v,l]]],[[n,length],[[v,l],[v,m1],[v,n]],"":-"",[[[n,not],[[[n,=],[[v,l],[]]]]],[[n,tail],[[v,l],[v,t]]],[[n,+],[[v,m1],1,[v,m2]]],[[n,length],[[v,t],[v,m2],[v,n]]]]]],[[]]),notrace,noprotocol.\nhalt.\nswipl -G100g -T20g -L2g\n[\'../Text-to-Breasonings/text_to_breasonings.pl\'].\ntime((N is 3,\nM is 16000,\ntexttobr2(N,""gla_del.txt"",u,M),texttobr(N,""gla_del.txt"",u,M))).\n[\'../texttobr2qb\'].\ntexttobr2(3).\nhalt.",[[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[],"breasonings"],["breasonings","unravel"],["unravel","tucked"]]),b_alg([[[],"breasonings"],["breasonings","unravel"],["unravel","tucked"]],a),bb_alg([["breasonings","unravel"],["unravel","tucked"]])],[*,"breasonings ",a_alg([[[],"breasonings"],["breasonings","implication"],["implication","bagof"]]),b_alg([[[],"breasonings"],["breasonings","implication"],["implication","bagof"]],a),bb_alg([["breasonings","implication"],["implication","bagof"]])],[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[],"breasonings"],["breasonings","diagonally"],["diagonally","strengths"],["strengths","reconstructs"]]),b_alg([[[],"breasonings"],["breasonings","diagonally"],["diagonally","strengths"],["strengths","reconstructs"]],a),bb_alg([["breasonings","diagonally"],["diagonally","strengths"],["strengths","reconstructs"]])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[],"breasonings"],["breasonings","intercommunicated"],["intercommunicated","authorization"],["authorization","vagina"]]),b_alg([[[],"breasonings"],["breasonings","intercommunicated"],["intercommunicated","authorization"],["authorization","vagina"]],a),bb_alg([["breasonings","intercommunicated"],["intercommunicated","authorization"],["authorization","vagina"]])],[*,"breasonings ",a_alg([[[],"breasonings"],["breasonings","sprint"],["sprint","possession"],["possession","sim"]]),b_alg([[[],"breasonings"],["breasonings","sprint"],["sprint","possession"],["possession","sim"]],a),bb_alg([["breasonings","sprint"],["sprint","possession"],["possession","sim"]])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[],"breasonings"],["breasonings","sew"],["sew","bundle"]]),b_alg([[[],"breasonings"],["breasonings","sew"],["sew","bundle"]],a),bb_alg([["breasonings","sew"],["sew","bundle"]])],[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[],"breasonings"],["breasonings","vrooming"],["vrooming","preferable"],["preferable","mono"]]),b_alg([[[],"breasonings"],["breasonings","vrooming"],["vrooming","preferable"],["preferable","mono"]],a),bb_alg([["breasonings","vrooming"],["vrooming","preferable"],["preferable","mono"]])],[*,"breasonings ",a_alg([[[[],v],"breasonings"]]),b_alg([[[[],v],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[],"breasonings"],["breasonings","conforming"],["conforming","controllers"],["controllers","niche"]]),b_alg([[[],"breasonings"],["breasonings","conforming"],["conforming","controllers"],["controllers","niche"]],a),bb_alg([["breasonings","conforming"],["conforming","controllers"],["controllers","niche"]])],[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])],[*,"breasonings ",a_alg([[[[[],v],a],"breasonings"]]),b_alg([[[[[],v],a],"breasonings"]],a),bb_alg([])]],[]]'.
[2,6][][2,5][][3,5][][3,4][][3,3][][2,3][][2,2][][3,2][v][4,4][v][4,5][v,c][3,6][v,c,k,m,e]Game Over% Execution Aborted**/rainforest([[1,9,["*"]],[2,9,["*"]],[3,9,["*"]],[4,9,["*"]],[5,9,["*"]],[6,9,["*"]],[7,9,["*"]],[1,8,["*"]],[2,8,["k"]],[3,8,["c"]],[4,8,["vine"]],[5,8,[]],[6,8,[]],[7,8,["*"]],[1,7,["*"]],[2,7,["*"]],[3,7,["*"]],[4,7,["*"]],[5,7,["*"]],[6,7,["*"]],[7,7,["*"]]]).traverse(X,Y):-(traverse(X,Y,[],_,[],_,"n",_)->(true);(false)),!.
[2,6][][2,5][][3,5][][3,4][][3,3][][2,3][][2,2][][3,2][v][4,4][v][4,5][v,c][3,6][v,c,k,m,e]Game Over% Execution Aborted**/traverse(X,Y) :-traverse(X,Y,[],_,[],_),!.
[5,14,16][][5,13,16][][5,12,16][][5,12,15][][5,12,14][][5,11,14][][5,11,13][][5,11,12][r][5,13,14][r][5,14,14][r][5,14,13][r,m][5,14,12][r,m][6,14,12][r,m][7,14,12][r,m][7,14,11][r,m][7,14,10][r,m][7,13,10][r,m][7,12,10][r,m][8,12,10][r,m][9,12,10][r,m][9,11,10][r,m,s2][9,12,9][r,m,s2][9,12,8][r,m,s2][9,11,8][r,m,s2][8,11,8][r,m,s2][7,11,8][r,m,s2][7,10,8][r,m,s2][7,9,8][r,m,s2][7,8,8][r,m,s2][7,10,7][r,m,s2][7,10,6][r,m,s2][7,10,5][r,m,s2][7,9,5][r,m,s2][7,8,5][r,m,s2][7,8,6][r,m,s2,k][7,9,4][r,m,s2,k][7,9,3][r,m,s2,k][7,8,3][r,m,s2,k][6,8,3][r,m,s2,k][5,8,3][r,m,s2,k][5,8,4][r,m,s2,k][5,8,5][r,m,s2,k][5,9,5][r,m,s2,k][5,10,5][r,m,s2,k][5,10,6][r,m,s2,k][5,11,6][r,m,s2,k][5,12,6][r,m,s2,k][5,12,5][r,m,s2,k][5,12,4][r,m,s2,k][5,12,3][r,m,s2,k][5,11,3][r,m,s2,k][5,10,3][r,m,s2,k][5,10,7][r,m,s2,k][5,10,8][r,m,s2,k][5,9,8][r,m,s2,k][5,8,8][r,m,s2,k][5,8,7][r,m,s2,k][4,8,7][r,m,s2,k][3,8,7][r,m,s2,k][3,8,8][r,m,s2,k][3,8,9][r,m,s2,k][3,7,9][r,m,s2,k][3,6,9][r,m,s2,k][3,6,8][r,m,s2,k][3,6,7][r,m,s2,k][3,6,10][r,m,s2,k][3,6,11][r,m,s2,k][3,5,11][r,m,s2,k][3,4,11][r,m,s2,k][2,4,11][r,m,s2,k][1,4,11][r,m,s2,k][1,4,10][r,m,s2,k][1,4,9][r,m,s2,k][1,5,9][r,m,s2,k][1,6,9][r,m,s2,k,c][1,5,11][r,m,s2,k,c][1,6,11][r,m,s2,k,c][3,6,12][r,m,s2,k,c][3,6,13][r,m,s2,k,c][3,5,13][r,m,s2,k,c][3,4,13][r,m,s2,k,c][3,3,13][r,m,s2,k,c][3,2,13][r,m,s2,k,c][3,2,12][r,m,s2,k,c][3,2,11][r,m,s2,k,c][3,2,10][r,m,s2,k,c][3,2,9][r,m,s2,k,c][3,2,8][r,m,s2,k,c][3,2,7][r,m,s2,k,c][3,3,7][r,m,s2,k,c][3,4,7][r,m,s2,k,c][3,3,9][r,m,s2,k,c][3,4,9][r,m,s2,k,c][3,7,13][r,m,s2,k,c][3,8,13][r,m,s2,k,c][3,8,12][r,m,s2,k,c][3,8,10][r,m,s2,k,c][5,11,8][r,m,s2,k,c][5,12,8][r,m,s2,k,c][7,10,3][r,m,s2,k,c][7,11,3][r,m,s2,k,c][7,12,3][r,m,s2,k,c][7,12,4][r,m,s2,k,c][7,12,5][r,m,s2,k,c][7,12,6][r,m,s2,k,c][7,11,6][r,m,s2,k,c][7,10,4][r,m,s2,k,c][7,12,8][r,m,s2,k,c][7,14,9][r,m,s2,k,c][7,14,8][r,m,s2,k,c][5,14,15][r,m,s2,k,c][5,13,15][r,m,s2,k,c][5,12,17][r,m,s2,k,c][5,12,18][r,m,s2,k,c][5,11,18][r,m,s2,k,c][5,13,18][r,m,s2,k,c,s1,b1,b2,b3,b4,e]Game Over% Execution Aborted**/traverse(Z,X,Y) :-traverse(Z,X,Y,[],_,[],_),!.
[At,Maze]["go",["e"],"take",["t"],"drop",[],"map, or apply an object to an object."][Type e.g. ["<command>","<object>"]]|    ["map"][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][t,+][f][A human heart beats 100 000 times daily.][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*][*]**/quizmaze :-make_maze,maze2(Map),get_map_dimensions(Map),traverse(1,1,1,[],_,[],_,Map,_),!.
[[0,b],[1,a]]*/double_blind([A,B],C) :- random(X),X1 is floor(2*X), (X1=0->D=[A,B];D=[B,A]), writeln("Person B, please enter the results."), findall([E,S],(member(E,D),writeln(E),read_string(user_input,"\n\r","\n\r",_,S)),[F1,F2]), writeln("Person A, here are the ordered results."), (X1=0->C=[F1,F2];C=[F2,F1]).
[[C,D,E],[C,D,A,E],[C,G,A,E],[C,G,D,E],[C,G#,E]]Yes?- versechorussoloprogression('C','D#').
[[C,D],[C,G,D]]Yes?- versechorussoloprogression('C','C#').
[[C,G,D#],[C,G#,D#]]**/versechorussoloprogression1564(Name1, Name2,Progression2) :-note(Note1, Name1),note(Note2, Name2),versechorussoloprogression11564(Note1, Note2, 0, _, [Note1], Progression1), notestonames(Progression1,Progression2),!.
[[C,G,D#],[C,G#,D#]]**/versechorussoloprogression1564(Name1, Name2,Progression2) :-note(Note1, Name1),note(Note2, Name2),versechorussoloprogression11564(Note1, Note2, 0, _, [Note1], Progression1), notestonames(Progression1,Progression2),!.versechorussoloprogression11564(_, _, Counter, b, Progression, Progression) :-Counter = 3, !.
[[[n,function],[[],[v,inputs2],[v,output],[v,output]]],[[n,function],[[v,input1],[v,inputs2],[v,inputs3],[v,output]],:-,[[[n,head],[[v,input1],[v,head]]],[[n,tail],[[v,input1],[v,tail]]],[[n,=],[[v,head],[[v,a],[v,b]]]],[[[n,atom],[v,a]],[[n,atom],[v,b]]],[[n,member],[[v,inputs21],[v,inputs2]]],[[n,=],[[v,inputs21],[[v,b],[v,c]]]],[[[n,number],[v,c]]],[[n,=],[[v,item1],[[v,a],[v,c]]]],[[n,append],[[v,inputs3],[v,item1],[v,item2]]],[[n,function],[[v,tail],[v,inputs2],[v,item2],[v,output]]]]]]Input1 = [[n, a]],Inputs2 = [[a, 5]],Output = [[n, 5]],Extras = Result, Result = [],**/programfinder(Input1,Inputs2,Output,Extras,Program) :-labelall(Inputs2,inputs2,1,1,[],Inputs2Labels),%%writeln([inputs2Labels,Inputs2Labels]),label(Extras,extras,1,1,[],ExtrasLabels),%%writeln([extrasLabels,ExtrasLabels]),%%Inputs2=[Item|_Items],%%((length(Item,1),Extra=[])-> %% () is2 has 1-length tuples - then processes i1, is2 simultaneously%%replace1is2(Input1,Inputs2,Output,Program);replace(Input1,Output,Inputs2Labels,ExtrasLabels,[],Relations1), %% replace returns the relations for given input for a replacement%%writeln([relations1,Relations1]),        deleteduplicates(Relations1,[],Relations2),%%writeln([relations2,Relations2]),FunctionName=[n,function],(not(member([extrarelation,_,_,_,_,_],Relations2))->makebasecase(FunctionName,BaseCase);        makebasecase2(FunctionName,BaseCase)),%%writeln([baseCase,BaseCase]),findprogram(FunctionName,Relations2,1,[],Program1),append(BaseCase,Program1,Program).
[[function,[[],inputs2,output,output]],[function,[input1,inputs2,inputs3,output],:-,[[head,input1,head],[tail,input1,tail],[head=[a,b]],[[atom,a],[atom,b]],[member,inputs21,inputs2],[inputs21=[b,c]],[item1=[a,c]],[append,inputs3,item1,item2],[function,[tail,inputs2,item2,output]]]]]Input1 = [[n, a]],Inputs2 = [[a, 5]],Output = [[n, 5]],Extras = [],Program = [[function,[[],inputs2,output,output]],[function,[input1,inputs2,inputs3,output],:-,[[head,input1,head],[tail,input1,tail],[head=[a,b]],[[atom,a],[atom,b]],[member,inputs21,inputs2],[inputs21=[b,c]],[item1=[a,c]],[append,inputs3,item1,item2],[function,[tail,inputs2,item2,output]]]]],Result = [[result, [n, 5]]] ** AFTERInput1=[[n,a]],Inputs2=[[a,5]] ,Output=[[n, 5]] ,programfinder(Input1,Inputs2,Output,Extras,Program),writeln(Program),interpret(off,[[n,function],[Input1,Inputs2,[],[v,result]]],Program,Result).
[[n,append132],[[list,list],[list]]], % append([1],A,[1,2]).[[n,append231],[[list,list],[list]]], % append(A,[2],[1,2]).
[[n,stringconcat132],[[string,string],[string]]], % string("1",A,"12").[[n,stringconcat231],[[string,string],[string]]], % string(A,"2","12").
[]Yesversechorussoloprogression('C','E').
]*/song_writer(Lyrics) :- length(A,16), findall(L,(member(_,A),sentence(L)),Lyrics).
^-*--****--*-*-*-*---^**-*------*---**----^*---*---*--*------**^*-----***----*--^^^^*----*-*--*-**--^**-*--*--*-***-----^^^*****-*-*-**-*---^^^-***-*--*---**---^**-**-*-------*----^^*--*-**---*--**---^^***------*-***----^*-*--*-*-***---*---^-*-***-*-----------^*-*----*------***--^^^^^^*--*------------**-^^^^***---*--*--------*^**--*--*------*----^^****----------*-*--^-*-*---*----**-*---^*--*-****--********^^-*-***----*----**-^^*--**-*-------*--*^*--*-*---------*-*-^-**--*--*--*--*****^***----^^--***----*^^^-*^^^^*---**--*-*^^^*^^**-*--**------^**^^*--*---*----**-^^^^**---*----*-*---*--*---**--*/find_path(X,Y,Blocks,Y1,Y2) :- create_matrix(X,Y,Matrix1), create_blocks(Blocks,X,Y,Matrix1,Matrix2), create_straight_line_through_remaining_space(Y1,Y2,X,Matrix2,Matrix21,Blocked_coords), (Blocked_coords=[]->Matrix3=Matrix21; (%trace, Blocked_coords=[[X3,Y3]], %repeat, right_hand_rule(X3,Y3,X,Y,X,Y2,Matrix21,Matrix3))), print_matrix(X,Y,Matrix3), !.
a("dsf").
a('dd').a(A):-findall(A,hello(A),B).
a(/*1*/%2A,B).
a(/*1*/B,C)/*2*/:-d(E).a(/*1*/B,C)/*2*/->d(E).a/*2*/:-/*3*/d(E).
a(1).a(2).a(3).
a(1):-b(1),!.
a(1,true).
a(2):-b(2).
a(A):-([1]=[1]).a([A,B,C]).
a(A):-([]=[[]]).a(A):-([1]=A).a(A):-(B=A).
a(A):-[]=[[]].
a(A):-findall(A,(hello(A),hello(A)),B).a([A]):-A is 1+1.
a(A):-findall(A,hello(A),B),!.
a(A,[A]).
a(A,[[A,B]|[C,D]]).
a(E)-->["("],expr(E),[")"].
a(E)-->["("],expr(E),[")"].a(E)-->expr(E).
a(E)-->expr(E).
a(V1,V2,V10):-get_item_n(V2,1,V3),get_item_n(V2,2,V4),append(V5,V6,V1),append([V3],V7,V6),append(V10,V8,V7),append([V4],V9,V8).
a([A,B]).
a([A]).a(A).
a([A|C]).
a([[A,B]]).a(A,[]).
a([[A]|C]).a(A,[[A]|C]).
a/*2*/-->/*3*/d(E).
a/*2*/->/*3*/d(E).
a1(1).
a1(L,In,M1,M2,R1,R2) :- member([L,j,L1],In), a2(L1,In,M1,M2,R1,R2).
a1(L,In,M1,M2,R1,R2) :- member([L,j,R,N,L2],In), L1 is L+1, (member([R,N],R1)-> a2(L2,In,M1,M2,R1,R2); a2(L1,In,M1,M2,R1,R2)).
a1(L,In,M1,M2,R1,R2) :- member([L,l,N,R],In), delete(R1,[R,_],R3), append(R3,[[R,N]],R4), L1 is L+1, a2(L1,In,M1,M2,R4,R2).a1(L,In,M1,M2,R1,R2) :- member([L,s,R,M],In), delete(M1,[M,_],M3), member([R,N],R1), append(M3,[[M,N]],M4), L1 is L+1, a2(L1,In,M4,M2,R1,R2).
a1(L,In,M1,M2,R1,R2) :- member([L,m,RM,R],In), member([RM,Ma],R1), member([Ma,N],M1), delete(R1,[R,_],R3), append(R3,[[R,N]],R4), L1 is L+1, a2(L1,In,M1,M2,R4,R2).a1(L,In,M1,M2,R1,R2) :- member([L,p1,R,N,Rb],In), L1 is L+1, member([R,N1],R1), N2 is N+N1, delete(R1,[Rb,_],R3), append(R3,[[Rb,N2]],R4), a2(L1,In,M1,M2,R4,R2).a1(L,In,M1,M2,R1,R2) :- member([L,p2,R,Ra,Rb],In), L1 is L+1, member([R,N1],R1), member([Ra,N3],R1), N2 is N3+N1, delete(R1,[Rb,_],R3), append(R3,[[Rb,N2]],R4), a2(L1,In,M1,M2,R4,R2).
a:-b([A,B],1,[C]).
abbreviate1(N_syll,I,C,V,O1,O2) :- N_syll2 is N_syll-1, append(A1,A2,I), append([A3],A4,A2), member(A3,V), append(A5,A6,A4), append([A7],A8,A6), member(A7,C), foldr(append,[O1,A1,[A3],A5,[A7]],O3), abbreviate1(N_syll2,A8,C,V,O3,O2),!.
ablative(by).
ablative(from).
ablative(in).
ablative(on).
ablative(out_of).
ablative(with).
absdiffmean(S,M,D1,D2) :-S=[S1|S2],S3 is abs(S1-M),append(D1,[[S3,S1]],D3),absdiffmean(S2,M,D3,D2).
absdiffmean(S,M,D1,D2) :-S=[S1|S2],S3 is abs(S1-M),append(D1,[[S3,S1]],D3),absdiffmean(S2,M,D3,D2).mindreadtest(Sec) :-%% 250 br for characters to be br out with 10 br each from person to me - do when initial 250 br test done and doing 10 br test%%comment(fiftyastest),%%random(X),X1 is 10*X, X2 is floor(X1), (X2=<2 -> (%%texttobr,writeln(['true test']), %%); %% use breasonings breasoned out by computer for not by me, for job medicine for "me", at last time point%%true), %% leave last time point blank%%**texttobr2(640);true),%% make an A to detect reaction to gracious giving or blame of in followingget_time(TimeStamp1),%%phrase_from_file(string(_String), 'file.txt'),texttobr2(2), %% 100 As for answer (must be br before this on same day)%% is gracious giving or blameget_time(TimeStamp2),%%comment(turnoffas),   Sec is TimeStamp2 - TimeStamp1.
actor(b,["thin elf"]).
add1(A,D,B,C1,C2):-A1 is A-1,H is B+D,append(C1,[H],C3), add1(A1,D,H,C3,C2).
add_line_numbers_to_algorithm2(Algorithm1,Algorithm2,Algorithm3,Number1,Number2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("true",Dbw_true1),Dbw_true1=Dbw_true,Algorithm1=[Function1|Functions],((Function1=[Name,Arguments1,Symbol1,Body1],symbol(Symbol1,Symbol2),findall(Arguments3,(member(Arguments2,Arguments1),slp2lp_variables(Arguments2,Arguments3)),Arguments4),%Number1a is Number1+1,add_line_numbers_to_algorithm_body2(Body1,Body2,0,_),append(Algorithm2,[[Number1,Name,Arguments4,Symbol2,Body2]],Algorithm4))->true;((Function1=[Name,Symbol1,Body1],symbol(Symbol1,Symbol2),%Number1a is Number1+1,add_line_numbers_to_algorithm_body2(Body1,Body2,0,_),append(Algorithm2,[[Number1,Name,[],Symbol2,Body2]],Algorithm4))->true;((Function1=[Name,Arguments1],symbol(":-",Symbol2),findall(Arguments3,(member(Arguments2,Arguments1),slp2lp_variables(Arguments2,Arguments3)),Arguments4),add_line_numbers_to_algorithm_body2([[[Dbw_n,Dbw_true]]],Body2,0,_),append(Algorithm2,[[Number1,Name,Arguments4,Symbol2,Body2]],Algorithm4))->true;(Function1=[Name],symbol(":-",Symbol2),add_line_numbers_to_algorithm_body2([[[Dbw_n,Dbw_true]]],Body2,0,_),append(Algorithm2,[[Number1,Name,[],Symbol2,Body2]],Algorithm4))->true;% [":-", [n, include], ['../b/b.pl']]((Function1=[Symbol2,Name,Arguments1],symbol(":-",Symbol2),findall(Arguments3,(member(Arguments2,Arguments1),slp2lp_variables(Arguments2,Arguments3)),Arguments4),add_line_numbers_to_algorithm_body2([[[Dbw_n,Dbw_true]]],Body2,0,_),append(Algorithm2,[[Number1,Symbol2,Name,Arguments4,Body2]],Algorithm4)))))),Number1a is Number1+1,%%writeln1([Number1,Name,Arguments4,Symbol2,Body2]),add_line_numbers_to_algorithm2(Functions,Algorithm4,Algorithm3,Number1a,Number2).
add_line_numbers_to_algorithm_body2(Body1,Body2%%,Body3,Number1,Number2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,        Body1=[[Statements1|Statements1a]|Statements2        ],not(predicate_or_rule_name(Statements1)),  Number1a is Number1+1,add_line_numbers_to_algorithm_body2([Statements1],Body3,Number1a,Number3), %% 2->1add_line_numbers_to_algorithm_body2(Statements1a,Body4,Number3,Number4),        add_line_numbers_to_algorithm_body2(Statements2,Body5,Number4,Number2),    %%append([Body3,Body4],Body6),%%append([[Body6],Body5],Body2),     append(Body3,Body4,Body34),        Body6=[Number1,[Dbw_n,"[]"],Body34        ],        append([Body6],Body5,Body2),!.
addrules(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2) :-OutputVars2=[OutputVar|OutputVars3],member(Var,VarList),member(OutputVar,OutputVars1),append(Program1,[[=,[OutputVar,Var]]],Program3),append(PenultimateVars1,[Var],PenultimateVars3),addrules(VarList,OutputVars1,OutputVars3,PenultimateVars3,PenultimateVars2,Program3,Program2).
addrules(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2) :-restlast(VarList,[],_,Var),%%OutputVars2=[OutputVar|OutputVars3],random_member(OutputVar,OutputVars2),delete(OutputVars1,OutputVar,OutputVars3),%%member(Var,VarList),random_member(OutputVar,OutputVars1),append(Program1,[[[n,=],[OutputVar,Var]]],Program3),append(PenultimateVars1,[Var],PenultimateVars3),addrules2(VarList,OutputVars1,OutputVars3,PenultimateVars3,PenultimateVars2,Program3,Program2),!.
addrules(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2) :-restlast(VarList,[],_,Var),%%OutputVars2=[OutputVar|OutputVars3],random1(N0), N1 is N0/100, length(OutputVars2,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,OutputVars2),List2=[OutputVar|_Rest]);fail),delete(OutputVars1,OutputVar,OutputVars3),%%member(Var,VarList),random1(N01), N11 is N01/100, length(OutputVars1,L1), N21 is round(L1*N11)-1,(N21>=0->(length(List11,N21), append(List11,List21,OutputVars1),List21=[OutputVar|_Rest2]);fail),append(Program1,[[[n,=],[OutputVar,Var]]],Program3),append(PenultimateVars1,[Var],PenultimateVars3),addrules2(VarList,OutputVars1,OutputVars3,PenultimateVars3,PenultimateVars2,Program3,Program2),!.
addrules(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2) :-%%trace,OutputVars2=[OutputVar|OutputVars3],member(Var,VarList),member(OutputVar,OutputVars1),%%()append(VarList,OutputVars1,OutputVars4),member(Var2,OutputVars4),append(Program1,[[[n,=],[Var,Var2%%OutputVar]]],Program3),append(PenultimateVars1,[Var],PenultimateVars3),addrules(VarList,OutputVars1,OutputVars3,PenultimateVars3,PenultimateVars2,Program3,Program2).
addrules0(VarList,OutputVars1,OutputVars2,Program1,Program2) :-OutputVars2=[OutputVar|OutputVars3],random_member(Var,VarList),random_member(OutputVar,OutputVars1),append(Program1,[[[n,=],[OutputVar,Var]]],Program3),addrules0(VarList,OutputVars1,OutputVars3,Program3,Program2),!.
addrules1(OutputVars3,VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2) :-OutputVars3=[_OutputVars31|OutputVars32],addrules2(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars3,Program1,Program3),addrules1(OutputVars32,VarList,OutputVars1,OutputVars2,PenultimateVars3,PenultimateVars2,Program3,Program2).
addrules2(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program2) :-%%restlast(VarList,[],_,Var),OutputVars2=[OutputVar|OutputVars3],random_member(Var,VarList),not(member(Var,PenultimateVars1)),random_member(OutputVar,OutputVars1),append(Program1,[[[n,=],[OutputVar,Var]]],Program3),append(PenultimateVars1,[Var],PenultimateVars3),addrules2(VarList,OutputVars1,OutputVars3,PenultimateVars3,PenultimateVars2,Program3,Program2),!.
addrules2(VarList,OutputVars1,_OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program3) :- %%*** Underscored OutputVars2%%writeln1(addrules(VarList,OutputVars1,OutputVars2,PenultimateVars1,PenultimateVars2,Program1,Program3)),%%trace,%%OutputVars2=[],%%[OutputVar|OutputVars3],member(Var,VarList),%%member(OutputVar,OutputVars1),%%()append(VarList,OutputVars1,OutputVars4),member(Var2,OutputVars4),not(Var=Var2),append(Program1,[[[n,=],[Var,Var2%%OutputVar]]],Program3),append(PenultimateVars1,[Var],PenultimateVars2).
addrules2([[v,_]],_,_,PV,PV,Program,Program) :- !.
agree_at_time(Agree_at_times,Agree_at_times).
alg_gen1(File_string3,Alg_gen_dict1,Alg_gen_dict1a,Alg_gen_dict2,Alg_gen_dict2a) :- File_string3=[File_string3a|Rest], %findall(Words1j,(member(File_string3a,File_string3),  SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'\"0123456789", split_string(File_string3a,SepandPad,SepandPad,File_string2), %trace, (findall([AA,AB%AD,AB,AF ],(member(AA,File_string2),member([AA,AB],Alg_gen_dict1)%,member([AD,AB,AF],Alg_gen_dict2) ),AC), findall(-,(member([_,-],AC)),AG), ((length(AG,LA),length(AC,LA))-> subtract(Alg_gen_dict1,AC,Alg_gen_dict11); Alg_gen_dict1=Alg_gen_dict11)), repeat, % if l AC - l AG findall(-%[AA,AB%AD,AB,AF %] ,(member(AA,File_string2),not(member([AA,AB],Alg_gen_dict1)))%,member([AD,AB,AF],Alg_gen_dict2) ,AC1), (length(AC1,1)->Single=true;Single=false), %trace, alg_gen2(File_string2,Single,Alg_gen_dict11,Alg_gen_dict1b, Alg_gen_dict2,Alg_gen_dict2b, [],Alg_gen_dict3b, New_flag ), % if a word is new, asks for the main term in the sentence, otherwise determines it from weights%trace,((not(var(New_flag)),New_flag=true)->(term_to_atom(File_string3a,File_string3a1),(length(Alg_gen_dict3b,1)->S11=1;(length(Alg_gen_dict3b,L),numbers(L,1,[],N),findall([N1," - ",Item,"\n"],(member(N1,N),get_item_n(Alg_gen_dict3b,N1,Item)),List),foldr(append,List,[],Item2a),foldr(string_concat,Item2a,"",Item2),%term_to_atom(Alg_gen_dict3b,Alg_gen_dict3b1),foldr(string_concat,["The sentence: ",File_string3a1," has the computational terms:","\n",Item2,"What is the number of the main computational term?"],"",Prompt1),repeat,writeln(Prompt1),read_string(user_input,"\n","\r",_,S1),number_string(S11,S1))),get_item_n(Alg_gen_dict3b,S11,Item3),Flag=true%%Alg_gen_dict2=Alg_gen_dict2c);(%trace,(Alg_gen_dict3b=[]->fail;true),findall([Weight,M,Note],(member(M,File_string2),member([Weight,M,Note],Alg_gen_dict2)),M1),(M1=[]->Flag=fail;(sort(M1,M2),reverse(M2,[[W,Item3,Note]|_]),Flag=true)))),% () * repeat, get A out of [A,B]% if a word's note is not in a_dict2, then asks for its alg (Flag=fail->Alg_gen_dict2b=Alg_gen_dict2c;((Note=(-)->(foldr(string_concat,["What is the algorithm note for ",Item3,"?"],"",Prompt2),%repeat,writeln(Prompt2),read_string(user_input,"\n","\r",_,S4),%trace,member([W,Item3,_],Alg_gen_dict2b),delete(Alg_gen_dict2b,[W,Item3,_],Alg_gen_dict2c1),append(Alg_gen_dict2c1,[[W,Item3,S4]],Alg_gen_dict2c));Alg_gen_dict2b=Alg_gen_dict2c))),alg_gen1(Rest,Alg_gen_dict1b,Alg_gen_dict1a,Alg_gen_dict2c,Alg_gen_dict2a),!.
alg_to_modes(Ordered_pred_nums1,Functions1,Functions_with_modes1,Functions_with_modes2) :-Ordered_pred_nums1=[[_,Number]%Function1|Functions],(member([Number,Name,Arguments1,Symbol1,Body1],Function1)->%symbol(Symbol1,Symbol2),(alg_to_modes3(Body1,%Body2,%[],Body2,[],%var Modes 1_Var_modes,%var Modes 2[],%Modes1Modes),% *** do header as wellappend(Functions_with_modes1,[[Number,Name,Arguments1,Symbol1,Modes]],Functions_with_modes5)),alg_to_modes(Functions,Functions1,Functions_with_modes4,Functions_with_modes2).
algebra([(B+C)*A],[A*B+A*C]).
algebra_finder(A*B,C,A,C/B).algebra_finder(A/B,C,B,A/C).algebra_finder(A/B,C,A,C*B). % 5. log_finder2(log(3,(y^(1/3))/(2^3)),(1/3)*log(3,y)-3*log(3,2)).
algebra_finder(A*B,C,B,C/A).
algebra_finder(A+B,C,A,C-B).
algebra_finder(A-B,C,A,C+B).
algebra_finder(A-B,C,B,A-C).
algebra_finder1(A,B,C,D) :-algebra_finder(A,B,E,F),algebra_finder1(E,F,C,D).
algorithm(In_vars,Out_var) :-((catch(character_breakdown_mode(_),_,fail)->true;(retractall(character_breakdown_mode(_)),assertz(character_breakdown_mode(on)),print_message(information,"Warning: Character Breakdown Mode On.")))),((catch(vars_table_s2a(_),_,fail)->true;(retractall(vars_table_s2a(_)),assertz(vars_table_s2a([]))))),retractall(single_results(_)),assertz(single_results([])),retractall(san_no_rs(_)),assertz(san_no_rs(true)),length(In_vars,In_vars_L),numbers(In_vars_L,1,[],Ns),findall(Var1,(member(N,Ns),get_item_n(In_vars,N,Var),term_to_brackets(Var,Var3,split=off),characterise1(Var3,Var2),strings_atoms_numbers(Var2,Var1,rs=on)),In_vars1),T1_old=[[["[",'C1',[r,["b",'C1']],"]"],[output,[['C1']]]]],append(In_vars1,[[output,_]],In_vars3),findall(In_vars22,rs_and_data_to_term(T1_old,In_vars3,_,[],In_vars22,_T2_old,true),In_vars23),member(In_vars2,In_vars23),sub_term_wa([output,_],In_vars2,In1),In1=[[_,[output,Output]]],length(Output,Output_L),numbers(Output_L,1,[],ONs),findall(ON,(member(ON,ONs),get_item_n(Output,ON,Output1),((Output1=[Word,_Args],type_s2a1(Word))->true;(%fail,trace,character_breakdown_mode(off),not(is_list(Output1))))),SR3),retractall(single_results(_)),assertz(single_results(SR3)),sub_term_wa([output,_],T1_old,In2),get_n_item(In2,[_,[output,Output]],Map_n),double_to_single_brackets(In_vars2,In_vars21),append(In_vars41,[[output,T2_old]],In_vars21),double_to_single_brackets(In_vars41,In_vars4),get_item_n([[[[1,2],[[1,1]]],[[1,3,2,2],[[1,1]]]]],Map_n,Map2),double_to_single_brackets(T2_old,T2_old3),move_vars(Map2,In_vars4,T2_old3,Out_var2),findall(Out_var3,remove_nd(Out_var2,Out_var3),Out_var4),member(Out_var5,Out_var4),term_to_list(Out_var5,Out_var6),single_results(SR),(member(1,SR)->Out_var6=Out_var;[Out_var6]=Out_var).
algorithm_decision_tree([],File_list,File_list,_String_dict,_Dictionary,_Reversed_dictionary2) :- !.
algorithm_decision_tree2(Direction,Dictionary2,State2,A2,Word2,_Word3,Suggestions1,Suggestions2) :-((A2=[Letter100|_Rest],((Letter100=Letter)->true;(downcase_atom(Letter100,Letter101),atom_string(Letter101,Letter))),not((member([State2,Letter_b,_State3],Dictionary2),((Letter_b=Letter)->true;(downcase_atom(Letter_b,Letter01),atom_string(Letter01,Letter))))))->true;A2=[]),%trace,%writeln1(suggestions(Direction,Dictionary2,State2,Word2,_,Suggestions1,Suggestions3)),length(Word2,Word2_l),findall(Suggestions31,suggestions(Direction,Dictionary2,State2,Word2,_,Suggestions1,Suggestions31),Suggestions32),maplist(append,Suggestions32,Suggestions22),%trace,findall(Suggestions21,(member(A4,Suggestions22),(Direction=d->(append(Suggestions211,["0","1"],A4),Suggestions21=[Word2_l,Suggestions211]);(append(["1","0"],Suggestions211,A4),Suggestions21=[Word2_l,Suggestions211]))),Suggestions2).
algorithmstopredicates1(Algorithms1,Predicates1,Predicates2) :-Algorithms1=[Algorithm1|Algorithms2],Algorithm1=[_TestNumber,_Queries,Algorithm3],algorithmstopredicates2(Algorithm3,[],Algorithm4),append_list(Predicates1,Algorithm4,Predicates4),algorithmstopredicates1(Algorithms2,Predicates4,Predicates2).
algorithmstopredicates2(Algorithms1,Predicates1,Predicates2) :-Algorithms1=[Algorithm1|Algorithms2],Algorithm1=[Name,In,Out|Rest],append(Predicates1,[[Name,In,Out|Rest]],Predicates4),algorithmstopredicates2(Algorithms2,Predicates4,Predicates2).
algorithmstopredicates2([],Predicates1,Predicates1) :- !.
all_empty([A|B]) :-all_empty(A),all_empty(B),!.
allnumbers([Item|Items],Names1,Names2):-number(Item),note(Item,Name),append(Names1,[Name],Names3),allnumbers(Items,Names3,Names2).
along(along).
already_member2(X1,Insertions1,X) :-get_base_token_number(X1,X11),((member(X1,Insertions1))->X=X1;(X=X11)),!.
analogy_generator(1).
and1(0,0,0).
and1(1,0,0).and1(0,1,0).
and1([false],[true],[],[false]):-!.
and1([true],[false],[],[false]):-!.and1([false],[false],[],[false]):-!.
api-key(1234567890).
append1(A,B,C) :-append(A,B,C).
append1(B,C,A) :- append(B,C,A).
append1(B,C,A) :- append(B,C,A).minus1(L,[],L).
append1(Item1,Item2,Item3) :-((isvalstr(Item1),Item1A=[Item1]);(not(isvalstr(Item1)),Item1A=Item1)),        ((isvalstr(Item2),Item2A=[Item2]);(not(isvalstr(Item2)),Item2A=Item2)),        %%((isvalstr(Item3),Item3A=[Item3]);(not(isvalstr(Item3)),Item3A=Item3)),append(Item1A,Item2A,Item3).
append1(Item11,Item21,Item31) :-replace_empty_with_empty_set([Item11,Item21,Item31],[],[Item1,Item2,Item3]),%%maplist(expression,[Item1,Item2,Item3]), %% commented out 21 8 19/**((isvalstr(Item1),Item1A=[Item1]);(not(isvalstr(Item1)),Item1A=Item1)),        ((isvalstr(Item2),Item2A=[Item2]);(not(isvalstr(Item2)),Item2A=Item2)),        %%((isvalstr(Item3),Item3A=[Item3]);(not(isvalstr(Item3)),Item3A=Item3)),        **/append(Item1,Item2,Item3).
append1(Item11,Item21,Item31) :-replace_empty_with_empty_set([Item11,Item21,Item31],[],[Item1,Item2,Item3]),%%maplist(expression,[Item1,Item2,Item3]), %% commented out 21 8 19/**((isvalstr(Item1),Item1A=[Item1]);(not(isvalstr(Item1)),Item1A=Item1)),        ((isvalstr(Item2),Item2A=[Item2]);(not(isvalstr(Item2)),Item2A=Item2)),        %%((isvalstr(Item3),Item3A=[Item3]);(not(isvalstr(Item3)),Item3A=Item3)),        **/append(Item1,Item2,Item3),!.
append1(Item11,Item21,Item31) :-replace_empty_with_empty_set([Item11,Item21,Item31],[],[Item1,Item2,Item3]),maplist(expressionnotatom,[Item1,Item2,Item3]),/**((isvalstr(Item1),Item1A=[Item1]);(not(isvalstr(Item1)),Item1A=Item1)),        ((isvalstr(Item2),Item2A=[Item2]);(not(isvalstr(Item2)),Item2A=Item2)),        %%((isvalstr(Item3),Item3A=[Item3]);(not(isvalstr(Item3)),Item3A=Item3)),        **/append(Item1,Item2,Item3),!.
append1([A|D],B,[A|C]):-append1(D,B,C).
append1([],A,A).
append1([],Item,Item) :-!.
append1([],Item,Item) :-!.append1(Item1,Item2,Item3) :-((isvalstr(Item1),Item1A=[Item1]);(not(isvalstr(Item1)),Item1A=Item1)),        ((isvalstr(Item2),Item2A=[Item2]);(not(isvalstr(Item2)),Item2A=Item2)),        %%((isvalstr(Item3),Item3A=[Item3]);(not(isvalstr(Item3)),Item3A=Item3)),append(Item1A,Item2A,Item3).
append11(A,B,C) :- append(A,B,C).
append2(A,Item,C) :-append_list(A,Item,C),!.
append2(A,Item,C) :-append_list(A,Item,C),!.readsc(7).
append2(A,List,C) :-(List=[Item]->append(A,Item,C);fail),!.
append2(A,List,C) :-(List=[Item]->append(A,Item,C);fail),!.append2(A,Item,C) :-append_list(A,Item,C),!.readsc(7).
append_last_rule1(Program2,LastRule1) :-%%not(LastRule1=[]),not(member(Program2,LastRule1)),append(LastRule1,[Program2],LastRule2),retractall(lastrule(_)),   assertz(lastrule(LastRule2)).
append_list(A,List,B) :-List=[Item|Items],append(A,[Item],C),append_list(C,Items,B).
append_list(A,List,B) :-List=[Item|Items],append2(A,[Item],C),append_list(C,Items,B).
append_list(List,A,B) :-List=[Item|Items],append(A,Item,C),append_list(Items,C,B).
append_list2(A,List,B) :-List=[Item|Items],append(A,Item,C),append_list2(C,Items,B).
append_list2(A1,B):-%A1=[A|List],append_list2([],A1,B),!.
append_list2(A1,B):-A1=[A|List],append_list2(A,List,B),!.append_list2(A,[],A):-!.
append_list3(List,A,B) :-List=[Item|Items],append(A,Item,C),append_list3(Items,C,B).
append_list3(List,A,B) :-List=[Item|Items],append(A,Item,C),append_list3(Items,C,B),!.
appendlogic(Formula1,Name,Formula2) :-atom(Formula1), append([Formula1],[or,Name],Formula2).
appendlogic(Formula1,Name,Formula2) :-atom(Formula1), append([Formula1],[or,Name],Formula3),Formula2=[not,Formula3].
appendlogic(Formula1,Name,Formula2) :-atom(Formula1),append([Formula1],[and,Name],Formula2).
appendlogic([Formula1,Operator,Formula2],Name2,Formula3) :-appendlogic(Formula1,Name2,Formula4),Formula3=[Formula4,Operator,Formula2].
appendlogic([Formula1,Operator,Formula2],Name2,Formula3) :-        appendlogic(Formula2,Name2,Formula4),        Formula3=[Formula1,Operator,Formula4].
apply("k","c","m").
apply("m","vine","e").
apply(b1,m,b2).
apply(b2,s2,b3).
apply(b3,k,b4).
apply(b4,c,e).
apply(box1,lighthouse,box2).
apply(box2,icecream,e).
apply(m,v,e).
apply(ofh,f,fcre).
apply(s1,c,e).
apply_all_to_all(Inventory1,Inventory2):-findall(Item3,(member2(Inventory1,Item1),member2(Inventory1,Item2),not((equals4(Item1,Item2))),apply(Item1,Item2,Item3),not((member2(Inventory1,Item3)))),Addeditems),(equals4(Addeditems,[])->(equals4(Inventory1,Inventory2));((append(Inventory1,Addeditems,Inventory3),apply_all_to_all(Inventory3,Inventory2)))).
apply_operator([A,"*",B], Result) :-    Result is A*B.
apply_operator([A,"+",B], Result) :-    Result is A+B.
apply_operator([A,"+",B], Result) :-    Result is A+B.apply_operator([A,"-",B], Result) :-    Result is A-B.
apply_operator([A,"-",B], Result) :-    Result is A-B.
apply_operator([A,"/",B], Result) :-B =\= 0,    Result is A/B.
arg2([Arg_n|Arg_n2],Command,[Arg|Args]) :- arg(Arg_n,Command,Arg), arg2(Arg_n2,Command,Args).
argument1(b,poor,70).
argument1(c,quality,70).
argument1(d,quality,100).
assertz(lang("en2")).
assort_words(G0,G1,G6,G7) :- G1=[[D1,_E1,E1L]|G2], length(A,E1L), append(A,B,G0), foldr(string_concat,A,A1), append(G6,[[D1,A1]],G8), assort_words(B,G2,G8,G7),!.
atom_concat2(List1,List2,List3) :-List1=[List4|List5],atom_concat(List2,List4,List6),atom_concat2(List5,List6,List3),!.**/repeat(Str,1,Str).
atom_concat_list(A,List,B) :-List=[Item|Items],atom_concat(A,Item,C),atom_concat_list(C,Items,B).
atom_concat_list(A1,B):-%A1=[A|List],atom_concat_list([],A1,B),!.atom_concat_list(A,List,B) :-atom_concat_list1(A,List,B1),atom_codes(B,B1),!.
atom_concat_list(A1,B):-A1=[A|List],atom_concat_list(A,List,B),!.
atom_concat_list1(A,List,B) :-List=[Item|Items],atom_codes(Item,Item1),append(A,Item1,C),atom_concat_list1(C,Items,B).
average_marks(A,B) :- sum(A,C), length(A,D), B is C/D.
b(A,B):-flatten(A,C),foldr(string_concat,C,B).
b(M,A,B,C) :- get_item_n(M,A,N),B1 is B+N,A1 is A-1,b(M,A1,B1,C).
b([A1|D],B,C) :- string_concat(B,A1,A3), b(D,A3,C).
b(false):- writeln(false).
b(true):-writeln(true).
ba(12).
ba(12,1).a(1.1).
bar_n(N,M) :- P is round((N/M)*10), P1 is round((N/M)*100), numbers(P,1,[],N1), findall("*",member(_,N1),B), write(B),write(" "),write(P1),writeln("%").
bar_with_time(F,F) :- !.bar_with_time(Now,F) :- sleep(1), bar_n(Now,F), Now1 is Now+1, bar_with_time(Now1,F).
bash_command2(1,Z) :- write("Failed: "),writeln_on_lines(Z),abort.
bash_command2(N,Z) :- write("Trying: "),writeln_on_lines(Z), catch(bash_command(Z,_),_,(N1 is N-1,bash_command2(N1,Z))),!. writeln_on_lines(C) :- atomic_list_concat(A,"\\n",C),atomic_list_concat(A,"\n",B),writeln(B),!.
bless(grades).
bless(job_applications).
bless(sales).
body(Query,Predicates,Body2,Flow1,Flow2) :-Body2=[Command|Commands],(number(Command)->(choice_points(Predicates,Command,Flow1,Flow3),body(Query,Predicates,Commands,Flow3,Flow2));(Command="!"->(delete(Predicates,[Query|_],Predicates2),append(Flow1,[Command],Flow3),body(Query,Predicates2,Commands,Flow3,Flow2));(Command="fail"->((delete_back_until_period(Flow1,Flow3)->%append(Flow1,[Command],Flow3),choice_points(Predicates,Query,Flow3,Flow2);((%trace,delete_back_until_repeat(Flow1,Flow3))->choice_points(Predicates,Query,Flow3,Flow2);append(Flow1,['.'],Flow2))));(Command="repeat"->(%(delete_back_until_period(Flow1,Flow3)->append(Flow1,["repeat"],Flow3),body(Query,Predicates,Commands,Flow3,Flow2)%append(Flow1,[.],Flow2))))))).
body(Query,Predicates,[],Flow1,Flow2) :-append(Flow1,[],Flow3),(delete_curr_query_pred(Query,Predicates,Predicates1)->choice_points(Predicates1,Query,Flow3,Flow2);Flow3=Flow2).
book150book260book550*/pretty_print_all_fifty :-all_fifty(Data),pretty_print_table(Data).
book1(book2,60).
book1(book3,25).book1(book4,0).
book1(book5,50).
bottom_up(S,A-B,B-C,A-C) :- bottom_up1(S,A,B,C).
bottom_up1(object,i,have,object).
bottom_up1(subject,i,have,subject).
bottom_up1(verb,i,have,verb).
br("block",[1,1,1]).
br("pear",[5,5,10]).br("person",[50,30,180]).br("pen",[15,0.5,0.5]).br("mouth",[4,0,1]).
br(' ',1,1,0).br(',',1,1,0).br('(',1,1.5,0).
br(')',1,1.5,0).
br('-',1,1,0).
br('3',1,1.5,0).br('4',1,1.5,0).
br('5',1,1.5,0).
br('6',1,1.5,0).
br('7',1,1.5,0).
br('8',1,1.5,0).
br('9',1,1.5,0).br('{',1,1.5,0).br('}',1,1.5,0).br('\n',1,1,0).br(_,1,1,0).
br(':',1,1,0).
br('>',1,1,0).br('0',1,1.5,0).br('1',1,1.5,0).br('2',1,1.5,0).
br('A',1,1.5,0).
br('B',1,1.5,0).
br('C',1,1.5,0).br('D',1,1.5,0).br('E',1,1.5,0).br('F',1,1.5,0).
br('G',1,1.5,0).
br('H',1,1.5,0).
br('I',1,1.5,0).
br('J',1,1.5,0).
br('K',1,1.5,0).
br('L',1,1.5,0).
br('M',1,1.5,0).
br('N',1,1.5,0).
br('O',1,1.5,0).
br('P',1,1.5,0).
br('Q',1,1.5,0).br('R',1,1.5,0).
br('S',1,1.5,0).
br('T',1,1.5,0).
br('U',1,1.5,0).
br('V',1,1.5,0).br('W',1,1.5,0).br('X',1,1.5,0).br('Y',1,1.5,0).
br('Z',1,1.5,0).
br(']',1,1.5,0).br('<',1,1,0).
br('_',1,1,0).br('\'',1,1.5,0).br('[',1,1.5,0).
br('a',1,1,0).
br('b',1,1.5,0).
br('c',1,1,0).
br('d',1,1.5,0).
br('e',1,1,0).
br('f',1,2.5,0).
br('g',1,2,0).
br('h',1,1.5,0).
br('i',1,1.5,0).
br('j',1,2.5,0).br('k',1,1.5,0).
br('l',1,1.5,0).
br('m',1,1,0).br('n',1,1,0).
br('o',1,1,0).br('p',1,2,0).
br('q',1,2,0).br('r',1,1,0).
br('s',1,1,0).
br('t',1,1.5,0).br('u',1,1,0).
br('v',1,1,0).br('w',1,1,0).br('x',1,1,0).
br('y',1,2,0).br('z',1,1,0).
br('|',1,2.5,0).br('.',1,1,0).
br(Words,BrDict,BrDict2,BrDict4,BrDict5,Brth,BrthDict03,BrthDict04,Room,RoomDict03,RoomDict04,PartOfRoom,PartOfRoomDict03,PartOfRoomDict04,Direction,DirectionDict03,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict04) :-%trace, findall([Word1,X,Y,Z],(member(W1,Words),t(BrDict,BrDict4,W1,[Word1,X,Y,Z])),Words1), length(Words1,Words1L), sn(SN),  divide(1000,Words1,[],Words2), length(Words2,Words2L), numbers(Words2L,1,[],Words2Ns), findall(Words6,(member(UN,Words2Ns),get_item_n(Words2,UN,U), findall(["[",W,",",X,",",Y,",",Z,"]",","],(member([W,X,Y,Z],U)),U1), flatten(U1,Words3), append(Words4,[_],Words3), flatten(["a",UN,"(",Words4,")"],Words5), %trace, foldr(string_concat,Words5,Words6)),Words7), %foldr(string_concat,Words7,Words8),  findall([X1,",\n"],member(X1,Words7),X2), flatten(["a:-",X2],X3), append(X31,[_],X3), foldr(string_concat,X31,Words8), findall([X1,".\n"],member(X1,Words7),X21), flatten(X21,X22), foldr(string_concat,X22,Words81), foldr(string_concat,["%SN=",SN,"\n","main:-catch(a,Err,handle_error(Err)),halt.\nhandle_error(_Err):-\n  halt(1).\nmain :- halt(1).\n",Words8,".\n",Words81],Words9), save_file_s("a.pl",Words9), shell1_s("swipl --goal=main --stand_alone=true -o a -c a.pl"),  %trace,  R is ceiling((4*16000)/SN), % medit, tt, medic, hq thoughts  %numbers(R,1,[],Rs), length(Rs,R), findall(["a",","],member(_R1,Rs),R2), flatten(["b:-",R2],R3), append(R31,[_],R3),  flatten(["%R=",R,"\n","main:-catch(b,Err,handle_error(Err)),halt.\nhandle_error(_Err):-\n  halt(1).\nmain :- halt(1).\n",R31,".\n",Words8,".\n",Words81],Words92),foldr(string_concat,Words92,RWords8), %foldr(string_concat,Words91,RWords8), save_file_s("b.pl",RWords8), shell1_s("swipl --goal=main --stand_alone=true -o b -c b.pl"),% for attached people (to a single simulation person)/* R0 is ceiling((4*16000)/SN), % medit, tt, medic frozen age, hq thought  %numbers(R,1,[],Rs), length(Rs0,R0), findall(["a",","],member(_,Rs0),R20), flatten(["b:-",R20],R30), append(R310,[_],R30),  flatten(["%R=",R0,"\n","main:-b.\n",R310,".\n",Words8,".\n",Words81],Words920),foldr(string_concat,Words920,RWords80), %foldr(string_concat,Words91,RWords8), save_file_s("b0.pl",RWords80), shell1_s("swipl --goal=main --stand_alone=true -o b0 -c b0.pl"),*/f(F),term_to_atom(F,F1), flatten([":-include('texttobr.pl').\n","main:-catch(texttobr(",R,",u,",F1,",u),Err,handle_error(Err)),halt.\nhandle_error(_Err):-\n  halt(1).\nmain :- halt(1).\n"],Words93),foldr(string_concat,Words93,RWords81), save_file_s("c.pl",RWords81), shell1_s("swipl --goal=main --stand_alone=true -o c -c c.pl"), !.
br(Words,BrDict,BrDict2,BrDict4,BrDict5,Brth,BrthDict03,BrthDict04,Room,RoomDict03,RoomDict04,PartOfRoom,PartOfRoomDict03,PartOfRoomDict04,Direction,DirectionDict03,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict04) :-%trace, maplist(t(BrDict,BrDict4),Words),!.
br([Word|Words],BrDict,BrDict2,BrDict4,BrDict5,Brth,BrthDict03,BrthDict04,Room,RoomDict03,RoomDict04,PartOfRoom,PartOfRoomDict03,PartOfRoomDict04,Direction,DirectionDict03,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict04) :-downcase_atom(Word, Word2), atom_string(Word2,Word3),words_to_read(WR1),(WR1>0->(writeln(WR1),write(Word),t2alg3(3),nl,sleep(0.12),WR2 is WR1-1,retractall(words_to_read(_)),assertz(words_to_read(WR2)));true),/**member([Word3,X,Y,Z],BrDict4) -> %% This feature is a bug because words in brdict2 shouldn't necessarily be the words in brdict1%%(append(BrDict,[[Word3,""]],BrDict3), BrDict3t=BrDict4,%%br(Words,BrDict3,BrDict2,BrDict3t,BrDict5))%%;%%(**/%%(member([Word3,X,Y,Z],BrDict4) -> %% This feature is a bug because words in brdict1 should correspond to those in brdict2%%(atom_concat("The breasoning for ", Word3, P1),%%atom_concat(P1, " is defined.  Enter object name (without spaces), if different for ", Prompt));%Prompt="Enter object name (without spaces), if different for "),%%writeln([word3,Word3]),(member([Word3,String4],BrDict)-> BrDict3=BrDict;((repeat,write("Enter object name (without spaces), if different for "), writeln(Word3),read_string(user_input, "\n", "\r", _End2, String2),split_string(String2, "", " ", String3),String3=[String4]),append(BrDict,[[Word3,String4]],BrDict3),texttobr(1,u,String4,1))),%%*brth(Word3,_Brth),(String4=""->String5=Word3;String5=String4),downcase_atom(String5, String52), atom_string(String52,String53),(member([String53,_],BrDict4)->BrDict3t1=BrDict4;((repeat,write("Enter algorithm word for "), writeln(String53),read_string(user_input, "\n", "\r", _End, String),split_string(String, ",", " ", String6),String6=[String7]),%Values=[X1,Y1,Z1],number_string(X,X1),number_string(Y,Y1),number_string(Z,Z1)),append(BrDict4,[[String53,String7]],BrDict3t1))),%%*brth(String53,_Brth2),%%write("br(\'"),write(Word3),writeln("\',)."),%%writeln([Word3,X,Y,Z]),%%write(' '),/*(Brth=true,(member([String53,_Breathsoning],BrthDict03)-> BrthDict3=BrthDict03;((repeat,write("Enter human judgement (without spaces), if different for "), writeln(String53),read_string(user_input, "\n", "\r", _End2, Stringth2),split_string(Stringth2, "", " ", Stringth3),Stringth3=[Stringth4]),texttobr(1,u,Stringth4,1),append(BrthDict03,[[String53,Stringth4]],BrthDict3)))->true;true),(Room=true,(member([String53,_Room],RoomDict03)-> RoomDict3=RoomDict03;((repeat,write("Enter room (without spaces), if different for "), writeln(String53),read_string(user_input, "\n", "\r", _RoomEnd2, RoomStringth2),split_string(RoomStringth2, "", " ", RoomStringth3),RoomStringth3=[RoomStringth4]),texttobr(1,u,RoomStringth4,1),append(RoomDict03,[[String53,RoomStringth4]],RoomDict3)))->true;true),(Room=true,(member([RoomStringth4,_X,_Y,_Z],BrDict3t1)->BrDict3t2=BrDict3t1;((repeat,write("Enter x, y and z in cm for "), writeln(RoomStringth4),read_string(user_input, "\n", "\r", _End, RoomString),split_string(RoomString, ",", " ", RoomValues),RoomValues=[RoomX1,RoomY1,RoomZ1],number_string(RoomX,RoomX1),number_string(RoomY,RoomY1),number_string(RoomZ,RoomZ1)),append(BrDict3t1,[[RoomStringth4,RoomX,RoomY,RoomZ]],BrDict3t2)))->true;BrDict3t2=BrDict3t1),(PartOfRoom=true,(member([String53,_PartOfRoom],PartOfRoomDict03)-> PartOfRoomDict3=PartOfRoomDict03;((repeat,write("Enter part of room (without spaces), if different for "), writeln(String53),read_string(user_input, "\n", "\r", _PartOfRoomEnd2, PartOfRoomStringth2),split_string(PartOfRoomStringth2, "", " ", PartOfRoomStringth3),PartOfRoomStringth3=[PartOfRoomStringth4]),texttobr(1,u,PartOfRoomStringth4,1),append(PartOfRoomDict03,[[String53,PartOfRoomStringth4]],PartOfRoomDict3)))->true;true),(PartOfRoom=true,(member([PartOfRoomStringth4,_X,_Y,_Z],BrDict3t2)->BrDict3t3=BrDict3t2;((repeat,write("Enter x, y and z in cm for "), writeln(PartOfRoomStringth4),read_string(user_input, "\n", "\r", _End, PartOfRoomString),split_string(PartOfRoomString, ",", " ", PartOfRoomValues),PartOfRoomValues=[PartOfRoomX1,PartOfRoomY1,PartOfRoomZ1],number_string(PartOfRoomX,PartOfRoomX1),number_string(PartOfRoomY,PartOfRoomY1),number_string(PartOfRoomZ,PartOfRoomZ1)),append(BrDict3t2,[[PartOfRoomStringth4,PartOfRoomX,PartOfRoomY,PartOfRoomZ]],BrDict3t3)))->true;BrDict3t3=BrDict3t2),(Direction=true,(member([String53,_Direction],DirectionDict03)-> DirectionDict3=DirectionDict03;((repeat,write("Enter direction (without spaces), if different for "), writeln(String53),read_string(user_input, "\n", "\r", _DirectionEnd2, DirectionStringth2),split_string(DirectionStringth2, "", " ", DirectionStringth3),DirectionStringth3=[DirectionStringth4]),texttobr(1,u,DirectionStringth4,1),append(DirectionDict03,[[String53,DirectionStringth4]],DirectionDict3)))->true;true),(Direction=true,(member([DirectionStringth4,_X,_Y,_Z],BrDict3t3)->BrDict3t4=BrDict3t3;((repeat,write("Enter x, y and z in cm for "), writeln(DirectionStringth4),read_string(user_input, "\n", "\r", _End, DirectionString),split_string(DirectionString, ",", " ", DirectionValues),DirectionValues=[DirectionX1,DirectionY1,DirectionZ1],number_string(DirectionX,DirectionX1),number_string(DirectionY,DirectionY1),number_string(DirectionZ,DirectionZ1)),append(BrDict3t3,[[DirectionStringth4,DirectionX,DirectionY,DirectionZ]],BrDict3t4)))->true;BrDict3t4=BrDict3t3),(ObjectToPrepare=true,(member([String53,_ObjectToPrepare],ObjectToPrepareDict03)-> ObjectToPrepareDict3=ObjectToPrepareDict03;((repeat,write("Enter object to prepare (without spaces), if different for "), writeln(String53),read_string(user_input, "\n", "\r", _ObjectToPrepareEnd2, ObjectToPrepareStringth2),split_string(ObjectToPrepareStringth2, "", " ", ObjectToPrepareStringth3),ObjectToPrepareStringth3=[ObjectToPrepareStringth4]),texttobr(1,u,ObjectToPrepareStringth4,1),append(ObjectToPrepareDict03,[[String53,ObjectToPrepareStringth4]],ObjectToPrepareDict3)))->true;true),(ObjectToPrepare=true,(member([ObjectToPrepareStringth4,_X,_Y,_Z],BrDict3t4)->BrDict3t5=BrDict3t4;((repeat,write("Enter x, y and z in cm for "), writeln(ObjectToPrepareStringth4),read_string(user_input, "\n", "\r", _End, ObjectToPrepareString),split_string(ObjectToPrepareString, ",", " ", ObjectToPrepareValues),ObjectToPrepareValues=[ObjectToPrepareX1,ObjectToPrepareY1,ObjectToPrepareZ1],number_string(ObjectToPrepareX,ObjectToPrepareX1),number_string(ObjectToPrepareY,ObjectToPrepareY1),number_string(ObjectToPrepareZ,ObjectToPrepareZ1)),append(BrDict3t4,[[ObjectToPrepareStringth4,ObjectToPrepareX,ObjectToPrepareY,ObjectToPrepareZ]],BrDict3t5)))->true;BrDict3t5=BrDict3t4),(ObjectToFinish=true,(member([String53,_ObjectToFinish],ObjectToFinishDict03)-> ObjectToFinishDict3=ObjectToFinishDict03;((repeat,write("Enter object to finish (without spaces), if different for "), writeln(String53),read_string(user_input, "\n", "\r", _ObjectToFinishEnd2, ObjectToFinishStringth2),split_string(ObjectToFinishStringth2, "", " ", ObjectToFinishStringth3),ObjectToFinishStringth3=[ObjectToFinishStringth4]),texttobr(1,u,ObjectToFinishStringth4,1),append(ObjectToFinishDict03,[[String53,ObjectToFinishStringth4]],ObjectToFinishDict3)))->true;true),(ObjectToFinish=true,(member([ObjectToFinishStringth4,_X,_Y,_Z],BrDict3t5)->BrDict3t6=BrDict3t5;((repeat,write("Enter x, y and z in cm for "), writeln(ObjectToFinishStringth4),read_string(user_input, "\n", "\r", _End, ObjectToFinishString),split_string(ObjectToFinishString, ",", " ", ObjectToFinishValues),ObjectToFinishValues=[ObjectToFinishX1,ObjectToFinishY1,ObjectToFinishZ1],number_string(ObjectToFinishX,ObjectToFinishX1),number_string(ObjectToFinishY,ObjectToFinishY1),number_string(ObjectToFinishZ,ObjectToFinishZ1)),append(BrDict3t5,[[ObjectToFinishStringth4,ObjectToFinishX,ObjectToFinishY,ObjectToFinishZ]],BrDict3t6)))->true;BrDict3t6=BrDict3t5),*/br(Words,BrDict3,BrDict2,BrDict3t1,BrDict5,Brth,BrthDict3,BrthDict04,Room,RoomDict3,RoomDict04,PartOfRoom,PartOfRoomDict3,PartOfRoomDict04,Direction,DirectionDict3,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict3,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict3,ObjectToFinishDict04).
br1("danger","minus").
br1("go","right").
br2(List1,BrDict03,BrDict2,BrDict03t,BrDict03t2,N1,Brth,BrthDict03,BrthDict04,Room,RoomDict03,RoomDict04,PartOfRoom,PartOfRoomDict03,PartOfRoomDict04,Direction,DirectionDict03,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict04) :-br(List1,BrDict03,BrDict21,BrDict03t,BrDict03t21,Brth,BrthDict03,BrthDict041,Room,RoomDict03,RoomDict041,PartOfRoom,PartOfRoomDict03,PartOfRoomDict041,Direction,DirectionDict03,DirectionDict041,ObjectToPrepare,ObjectToPrepareDict03,ObjectToPrepareDict041,ObjectToFinish,ObjectToFinishDict03,ObjectToFinishDict041),N2 is N1-1,br2(List1,BrDict21,BrDict2,BrDict03t21,BrDict03t2,N2,Brth,BrthDict041,BrthDict04,Room,RoomDict041,RoomDict04,PartOfRoom,PartOfRoomDict041,PartOfRoomDict04,Direction,DirectionDict041,DirectionDict04,ObjectToPrepare,ObjectToPrepareDict041,ObjectToPrepareDict04,ObjectToFinish,ObjectToFinishDict041,ObjectToFinishDict04),!.
brDict03t1(BrDict03t2) :- brDict03t(BrDict03t2).
bracket_if_single(Value1A,[Value1A]) :-single_item(Value1A),!.
brth(_,sweetinvincibleandprayedfor).
brth2(_,sweetinvincibleandprayedfor).
brush_teeth(left-right) :- fail.
c(A,B,B4):-B4 is A+B."]]findall1([F1,Mod_times12],(member(F2,G),string_concat('../private2/luciancicd-data/',F2,F1),open_file_s(F1,Mod_times1),term_to_atom(Mod_times1,Mod_times12)),Mod_times11),*/ working_directory1(_,A) ,!.
c(A,B4):-B4=5,writeln(B4).
c(A,B4):-B4=5,writeln(B4).  %d(1,B).
c(A,B4):-B4=5,writeln(B4).   %d(1,B).
c2:-writeln(c2).
calc(Connections,Models1,Ad2,Q2,Question_table1,Answer) :-%substitute(Pre_info1,Question1,Question_table1,Answer_table),%lowercase, most number of words  choose_model(Connections,Models1,Ad2,Q2,Model),% span from headings (word in common)% flow var tablespan_from_headings(Question_table1,Model,Answer_table),calculate_loop(Ad2,Q2,Answer_table,Answer),!.
calc(Connections,Models1,Ad2,Q2,Question_table1,Answer) :-%substitute(Pre_info1,Question1,Question_table1,Answer_table),%lowercase, most number of words  choose_model(Connections,Models1,Pre_info1,Question1,Model),% span from headings (word in common)% flow var tablespan_from_headings(Question_table1,Model,Answer_table),calculate_loop(Ad2,Q2,Answer_table,Answer),!.
call1(Item) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,(Item=[[Dbw_n,_PredicateName]|_Variables]->true;Item=[Dbw_n,_PredicateName]),not(code(Item)),!.
call1(Item) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,(Item=[[Dbw_n,_PredicateName]|_Variables]->true;Item=[Dbw_n,_PredicateName]),not(code(Item)),!.call_not_grammar([[Dbw_n,PredicateName]|_Variables]) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("grammar",Dbw_grammar),not(PredicateName=Dbw_grammar),not(PredicateName=grammar_part),!.
call1(Item) :- (Item=[[n,_PredicateName]|_Variables]->true;Item=[n,_PredicateName]),not(code(Item)),!.
call_grammar_part([[Dbw_n,grammar_part]|_Variables]) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("grammar_part",Dbw_grammar_part1),Dbw_grammar_part1=Dbw_grammar_part,!.
call_grammar_part([[n,grammar_part]|_Variables]) :- !.
call_not_grammar([[Dbw_n,PredicateName]|_Variables]) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("grammar",Dbw_grammar),not(PredicateName=Dbw_grammar),not(PredicateName=grammar_part),!.
call_not_grammar([[n,PredicateName]|_Variables]) :- not(PredicateName=grammar),not(PredicateName=grammar_part),!.
call_or_terminal(Item) :-terminal(Item)->true;call1(Item),!.
cat_alg_files(Tr1) :-Tr is floor(1.32*Tr1),retractall(tally(_)),assertz(tally(0)), %/*date_time_stamp(date(2023,1,1,0,0,0,_,_,_),TS0),date_time_stamp(date(2023,1,8,0,0,0,_,_,_),TS01),TSD is TS01-TS0,get_time(TS1),Week_ago is TS1-TSD, directory_files('../../GitHub/',F),delete_invisibles_etc(F,G1),delete(G1,"LuciansHandBitMap-Font",G3),delete(G3,"private2",G),findall([F5_old,F5_new],(member(F2,G),tally(Ta),(Ta>Tr->fail;true),foldr(atom_concat,['../../GitHub/',F2,'/'],F1), directory_files(F1,F21),delete_invisibles_etc(F21,G2),member(F3,G2),foldr(atom_concat,['../../GitHub/',F2,'/',F3],F4),size_file(F4,Size),Size=<51200,((not(exists_directory(F4)),exists_file(F4))->((string_concat(_,".pl",F4)->true;(string_concat(_,".txt",F4)->true;string_concat(_,".md",F4))),time_file(F4,T),open_string_file_s(F4,F5),word_count(["string",F5],Words),Ta1 is Ta+Words,retractall(tally(_)),assertz(tally(Ta1)),% if T is less than a week old(T > Week_ago ->(%trace,F5_new=F5,F5_old="");(F5_new="",F5_old=F5)));fail)),F6),delete(F6,["",""],F61),%trace,findall([F62_new,"\n"],member([_,F62_new],F61),F63_new),findall([F62_old,"\n"],member([F62_old,_],F61),F63_old),append(F63_new,F63_old,F64),flatten(F64,F7),foldr(string_concat,F7,F80),split_string(F80,"\n\r","\n\r",F81),delete(F81,"",F82),findall([F83,"\n"],member(F83,F82),F84),flatten(F84,F85),foldr(string_concat,F85,F8),%truncate_words_conserving_formatting(["string",F8],Tr,F81),F9=["","","",F8],term_to_atom(F9,F10),open_s("../Lucian-Academy/Books1/algs/lgalgs_a.txt",write,S),write(S,F10),close(S),%*/%cat_files('../../GitHub/',"Lucian-Academy","../Lucian-Academy/Books1/algs/lgalgs_a.txt"),/* *** algs is in the same log file as args, so doesn't need to start a new one(exists_file('aa_log.txt')->( stamp_date_time(TS1,date(Year,Month,Day,Hour1,Minute1,_Seconda,_A,_TZ,_False),local), foldr(string_concat,["aa_log-",Year,"-",Month,"-",Day,"-",Hour1,"-",Minute1,".txt"],Name),  mv("aa_log.txt",Name));true),*/!.
cat_arg_files(Tr1) :-Tr is floor(1.32*Tr1),retractall(tally(_)),assertz(tally(0)), %/*date_time_stamp(date(2023,1,1,0,0,0,_,_,_),TS0),date_time_stamp(date(2023,1,8,0,0,0,_,_,_),TS01),TSD is TS01-TS0,get_time(TS1),Week_ago is TS1-TSD, directory_files('../../GitHub/Lucian-Academy/Books/',F),delete_invisibles_etc(F,G),%delete(G1,"Lucian-Academy",G),findall([F5_old,F5_new],(member(F2,G),tally(Ta),(Ta>Tr->fail;true),foldr(atom_concat,['../../GitHub/Lucian-Academy/Books/',F2,'/'],F1), directory_files(F1,F21),delete_invisibles_etc(F21,G3),delete(G3,"Books",G2),member(F3,G2),foldr(atom_concat,['../../GitHub/Lucian-Academy/Books/',F2,'/',F3],F4),size_file(F4,Size),Size=<51200,((not(exists_directory(F4)),exists_file(F4))->((string_concat(_,".pl",F4)->true;(string_concat(_,".txt",F4)->true;string_concat(_,".md",F4))),time_file(F4,T),open_string_file_s(F4,F5),word_count(["string",F5],Words),Ta1 is Ta+Words,retractall(tally(_)),assertz(tally(Ta1)),% if T is less than a week old(T > Week_ago ->(%trace,F5_new=F5,F5_old="");(F5_new="",F5_old=F5)));fail)),F6),delete(F6,["",""],F61),%trace,findall([F62_new,"\n"],member([_,F62_new],F61),F63_new),findall([F62_old,"\n"],member([F62_old,_],F61),F63_old),append(F63_new,F63_old,F64),flatten(F64,F7),foldr(string_concat,F7,F80),split_string(F80,"\n\r","\n\r",F81),delete(F81,"",F82),findall([F83,"\n"],member(F83,F82),F84),flatten(F84,F85),foldr(string_concat,F85,F8),%Tr is floor(1.32*Tr1),%truncate_words_conserving_formatting(["string",F8],Tr,F81),F9=["","","",F8],term_to_atom(F9,F10),open_s("../Lucian-Academy/Books1/args/lgtext_a.txt",write,S),write(S,F10),close(S),%*/%cat_files('../../GitHub/',"Lucian-Academy","../Lucian-Academy/Books1/algs/lgalgs_a.txt"), /*(exists_file('aa_log.txt')->( stamp_date_time(TS1,date(Year,Month,Day,Hour1,Minute1,_Seconda,_A,_TZ,_False),local), foldr(string_concat,["aa_log-",Year,"-",Month,"-",Day,"-",Hour1,"-",Minute1,".txt"],Name),  mv("aa_log.txt",Name),  open_s("aa_log.txt",write,SB),write(SB,'[]'),close(SB) );true), */!.
catch((trial1(N,[],S),trial01(S,S3)),   _,(trial0(S3)%,writeln(S3))).
caw(Predicates,Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4) :-%%writeln([caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,OutputVarList,OutputVars,Program1,Program4)]),MaxLength2 is MaxLength - 1,%%writeln(["ml",MaxLength2]),member([RuleName,NumInputs,NumOutputs],Rules),%%writeln([member([RuleName,NumInputs,NumOutputs],Rules)]),%%writeln([rule(RuleName,NumInputs,NumOutputs,VarList,VarList2,Rule)]),rule(Program1,RuleName,NumInputs,NumOutputs,InputVars2,InputVars4,VarList,VarList2,Rule),%%writeln([rule(RuleName,NumInputs,NumOutputs,InputVars1,InputVars3,VarList,VarList2,Rule)]),append(Program1,[Rule],Program3),%%writeln([inputVars3,InputVars3]),%%InputVars2=InputVars3,%%writeln([program4,Program4]),caw(Predicates,Query,PredicateName,Rules,MaxLength2,VarList2,InputVars1,InputVars4,InputVars3,OutputVarList,OutputVars,Program3,Program4).
caw(Predicates,Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4) :-%%writeln([caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,OutputVarList,OutputVars,Program1,Program4)]),MaxLength2 is MaxLength - 1,%%writeln(["ml",MaxLength2]),member([RuleName,NumInputs,NumOutputs],Rules),%%writeln([member([RuleName,NumInputs,NumOutputs],Rules)]),%%writeln([rule(RuleName,NumInputs,NumOutputs,VarList,VarList2,Rule)]),rule(RuleName,NumInputs,NumOutputs,InputVars2,InputVars4,VarList,VarList2,Rule),%%writeln([rule(RuleName,NumInputs,NumOutputs,InputVars1,InputVars3,VarList,VarList2,Rule)]),append(Program1,[Rule],Program3),%%writeln([inputVars3,InputVars3]),%%InputVars2=InputVars3,%%writeln([program4,Program4]),caw(Predicates,Query,PredicateName,Rules,MaxLength2,VarList2,InputVars1,InputVars4,InputVars3,OutputVarList,OutputVars,Program3,Program4).
caw(Predicates,Query,PredicateName,_,_,_VarList,InputVars1,InputVars2,_,OutputVarList,OutputVars,Program1,Program2) :-addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3),%%writeln([addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3)]),%%optimise(Program1,InputVars1,InputVars3,PenultimateVars,Program4), %% IV2->3%%writeln([optimise(Program1,InputVars1,InputVars3,PenultimateVars,Program4)]),append(Program1,Program3,Program5),append(InputVars1,OutputVars,Vars2),Program22=[        [PredicateName,Vars2,(:-),                Program5        ]        ],                append(Predicates,Program22,Program2),        (debug(on)->Debug=on;Debug=off),%writeln([interpret(Debug,Query,Program2,OutputVarList)]),%%writeln(""),%trace,catch(call_with_time_limit(0.05, interpret(Debug,Query,Program2,OutputVarList)),      time_limit_exceeded,      fail),      %test1(A),writeln(A),no_singletons(Vars2,Program5),!.
caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program2,Programs1,Programs2) :-MaxLength2 is MaxLength - 1,addrules(InputVars2,OutputVars,OutputVars,[],_PenultimateVars,[],Program3),%%writeln([addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3)]),%%optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4), %% IV2->3%%writeln([optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4)]),append(Program1,Program3,Program5),append(InputVars1,OutputVars,Vars2),Program2=[        [PredicateName,Vars2,":-",                Program5        ]        ],debug(Debug),%%***%% () choose iv1 as args during caw, () eliminate e problem, could move forward in optimiser but don't need it v%% should have a leading edge of 1 immediately previous (new output) as an arg in latest rule v, go backwards to choose latest possible args x, 3 x rules can have same as previous rule's output as an output x: at a time%% chunks will solve having at least 1 rule that connects to last output%% can optimise number of inputs%% test member, = in caw%%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),interpret(Debug,Query,Program2,OutputVarList2),%%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),append(Programs1,[[Query,Program2,OutputVarList2]],Programs3),cawa(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program2,Programs3,Programs2),!.
caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program4) :-%%writeln([caw(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,OutputVarList,OutputVars,Program1,Program4)]),MaxLength2 is MaxLength - 1,%%writeln(["ml",MaxLength2]),member([RuleName,NumInputs,NumOutputs],Rules),%%writeln([member([RuleName,NumInputs,NumOutputs],Rules)]),%%writeln([rule(RuleName,NumInputs,NumOutputs,VarList,VarList2,Rule)]),rule(RuleName,NumInputs,NumOutputs,InputVars2,InputVars4,VarList,VarList2,Rule),%%writeln([rule(RuleName,NumInputs,NumOutputs,InputVars1,InputVars3,VarList,VarList2,Rule)]),append(Program1,[Rule],Program3),%%writeln([inputVars3,InputVars3]),%%InputVars2=InputVars3,%%writeln([program4,Program4]),caw(Query,PredicateName,Rules,MaxLength2,VarList2,InputVars1,InputVars4,InputVars3,OutputVarList,OutputVars,Program3,Program4).
caw(Query,PredicateName,_,_,_VarList,InputVars1,InputVars2,_,OutputVarList,OutputVars,Program1,Program2) :-addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3),%%writeln([addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3)]),optimise(Program1,InputVars1,InputVars3,PenultimateVars,Program4), %% IV2->3%%writeln([optimise(Program1,InputVars1,InputVars3,PenultimateVars,Program4)]),append(Program4,Program3,Program5),append(InputVars1,OutputVars,Vars2),Program2=[        [PredicateName,Vars2,(:-),                Program5        ]        ],(debug(on)->Debug=on;Debug=off),%%writeln([interpret(Debug,Query,Program2,OutputVarList)]),interpret(Debug,Query,Program2,OutputVarList).
caw(_,_,_,0,_,_,_,_,_,_,_) :- fail, !.
caw(_,_,_,_,0,_,_,_,_,_,_,_) :- fail, !.
caw(_,_,_,_,0,_,_,_,_,_,_,_) :- fail, !.caw(Predicates,Query,PredicateName,_,_,_VarList,InputVars1,InputVars2,_,OutputVarList,OutputVars,Program1,Program2) :-addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3),%%writeln([addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3)]),%%optimise(Program1,InputVars1,InputVars3,PenultimateVars,Program4), %% IV2->3%%writeln([optimise(Program1,InputVars1,InputVars3,PenultimateVars,Program4)]),append(Program1,Program3,Program5),append(InputVars1,OutputVars,Vars2),Program22=[        [PredicateName,Vars2,(:-),                Program5        ]        ],                append(Predicates,Program22,Program2),        (debug(on)->Debug=on;Debug=off),%%writeln([interpret(Debug,Query,Program2,OutputVarList)]),%%writeln(""),catch(call_with_time_limit(0.05, interpret(Debug,Query,Program2,OutputVarList)),      time_limit_exceeded,      fail),no_singletons(Vars2,Program5),!.
caw01([[]],[[]],_Predicates,_PredicateName,_Rules3,_MaxLength,_MaxPredicates,_New_rule_number1,_New_rule_number2,Program,Program,_V3) :- %%writeln(here2),fail.%%caw01(_VarLists,_Predicates,_PredicateName,_Rules3,_MaxLength,MaxPredicates,New_rule_number,Program,Program) :- New_rule_number=<MaxPredicates,!.caw01(VarLists,VarLists03,Predicates,PredicateName,Rules3,MaxLength,MaxPredicates,New_rule_number1,New_rule_number2,Program1,Program2B,_V) :-%%writeln1(caw01(VarLists,_,Predicates,PredicateName,Rules3,MaxLength,MaxPredicates,New_rule_number1,New_rule_number2,Program1,Program2B)),%%(Predicates=[[[n,add2],[[v,a],[v,b]],":-",[[[n,=],[[v,a],[]]],[[n,=],[[v,b],[]]]]],[[n,add3],[[v,a],[v,b]],":-",[[[n,tail],[[v,a],[v,b]]]]]]->trace;true),VarLists=[VarLists0|VarLists02],VarLists0=[VarLists1|VarLists2],%%retractall(varlists(_)),%%assertz(varlists(VarLists02)),%%trace,%%writeln1(findall(Program2A,caw0(Predicates,PredicateName,%%Rules3,MaxLength,MaxPredicates,%%VarLists1,VarLists02,New_rule_number1,New_rule_number2,Program1,Program2A),Program2)),%%notrace,findall([Program2A,VarLists041,New_rule_number2A],caw0(Predicates,PredicateName,Rules3,MaxLength,MaxPredicates,VarLists1,VarLists02,VarLists041,New_rule_number1,New_rule_number2A,Program1,Program2A,_V),Program2VarLists04),findall(Program21,(member(MemberProgram2VarLists04,Program2VarLists04),MemberProgram2VarLists04=[Program21,_,_]),Program2),findall(VarLists041,(member(MemberProgram2VarLists041,Program2VarLists04),MemberProgram2VarLists041=[_,VarLists041,_]),VarLists04),findall(New_rule_number2A1,(member(MemberProgram2VarLists041New_rule_number2A1,Program2VarLists04),MemberProgram2VarLists041New_rule_number2A1=[_,_,New_rule_number2A1]),New_rule_number2A2),%%trace,%%writeln1(findall(Program2A,caw0(Predicates,PredicateName,%%Rules3,MaxLength,MaxPredicates,%%VarLists1,VarLists02,New_rule_number1,New_rule_number2,Program1,Program2A),Program2)),%%notrace,length(Program2,Program2L),length(Program2LList,Program2L),append(Program2LList,_,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]),member(Program2LListItem,Program2LList),get_item_n(Program2,Program2LListItem,Program2B),get_item_n(VarLists04,Program2LListItem,VarLists03),get_item_n(New_rule_number2A2,Program2LListItem,New_rule_number2),%%member(Program2B,Program2), %e->1%%member(VarLists03,VarLists04), %e->1%%writeln1(Program2B1),%%writeln1(Program2B),%%Program2B1=[Program2B],%%trace,%%writeln1(member(Program2B,Program2)),%%notrace,aggregate_all(count,(member(Item,VarLists2),caw0(Predicates,PredicateName,Rules3,MaxLength,MaxPredicates,Item,VarLists03,_VarLists031,New_rule_number1,_New_rule_number2A3,Program1,Program2B,_V2)),Count1),%%trace,%%writeln1(aggregate_all(count,(member(Item,VarLists2),%%caw0(Predicates,PredicateName,Rules3,MaxLength,MaxPredicates,%%Item,VarLists02,New_rule_number,Program1,Program2B)),Count)),%%notrace,%%writeln1(Program2),%%trace,%%writeln1(length(VarLists2,Count)),%%notrace,   %%(findall(EVM1,(everyvarmentioned(Vars2,Program5),length(VarLists2,Count2),Count1>=Count2,%%(Program2B=[[[n,1],[[v,a],[v,b],[v,c]],":-",[[[n,+],[[v,a],[v,b],[v,d]]],[[n,=],[[v,d],[v,c]]]]]]->true%%trace%%;true),!.%%!.%%!. %%Predicates->PredicatesA xget_item_n(List1,N1,Item) :-N2 is N1-1,length(List3,N2),append(List3,List4,List1),List4=[Item|_].
caw1(Query,PredicateName,Rules,MaxLength,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,Program1,Program2,Programs2,Ps1) :-MaxLength2 is MaxLength - 1,addrules0(InputVars2,OutputVars,OutputVars,[],Program3),%%writeln([addrules(InputVars2,OutputVars,OutputVars,[],PenultimateVars,[],Program3)]),%%optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4), %% IV2->3%%writeln([optimise(Program1,InputVars1,InputVars2,PenultimateVars,Program4)]),append(Program1,Program3,Program5),append(InputVars1,OutputVars,Vars2),Program2=[        [PredicateName,Vars2,":-",                Program5        ]        ],debug(Debug),        %%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),interpret(Debug,Query,Program2,OutputVarList2),        %%writeln([interpret(Debug,Query,Program2,OutputVarList2)]),append(Programs2,[[Query,Program2,OutputVarList2]],Programs3),caw1a(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program2,Programs3,Ps1),!.
caw1(Query,PredicateName,Rules,MaxLength2,VarList,InputVars1,InputVars2,InputVars3,OutputVarList,OutputVars,[],_Program2,Programs3,Programs3) :- !.
caw1(_Query,_PredicateName,_Rules,_MaxLength2,_VarList,_InputVars1,_InputVars2,_InputVars3,_OutputVarList,_OutputVars,[],_Program2,Programs3,Programs3) :- !.
cawptest(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,cawptest2(NTotal3,Function,Rules,MaxLength,MaxPredicates,TotalVars,Numinputs,Numoutputs,Specifications,AlgDict,Program1),%%writeln([cawptest2(NTotal3,Specifications,Program1)]),(((%%writeln(caw00(Debug,function0,[],5,TotalVars,Specifications,[],Program1)),caw00(Debug,Function,Rules,MaxLength,MaxPredicates,TotalVars,Numinputs, Numoutputs,Specifications,AlgDict,[],Program1)%%sort(Program1,ProgramA),%%sort(Program2,ProgramA)%%writeln1(Program1),writeln1(Program2)%%Program1=Program2))->(Score3 is Score1+1,writeln([cawptest,NTotal3,passed]));(Score3=Score1,writeln([cawptest,NTotal3,failed]))),writeln(""),cawptest(Debug,NTotal3,NTotal2,Score3,Score2),!.
cawptest(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,cawptest2(NTotal3,Function,Rules,MaxLength,TotalVars,Specifications,AlgDict,Program1),%%writeln([cawptest2(NTotal3,Specifications,Program1)]),(((%%writeln(caw00(Debug,function0,[],5,TotalVars,Specifications,[],Program1)),caw00(Debug,Function,Rules,MaxLength,TotalVars,Specifications,AlgDict,[],Program1)%%sort(Program1,ProgramA),%%sort(Program2,ProgramA)%%writeln1(Program1),writeln1(Program2)%%Program1=Program2))->(Score3 is Score1+1,writeln([cawptest,NTotal3,passed]));(Score3=Score1,writeln([cawptest,NTotal3,failed]))),writeln(""),cawptest(Debug,NTotal3,NTotal2,Score3,Score2),!.
cawptest(_Debug,NTotal,NTotal,Score,Score) :- NTotal=1, !.
cawptest(_Debug,NTotal,NTotal,Score,Score) :- NTotal=9, !.
cawptest2(2,add0,[],2,1,3,[1,2],[0,1],[[[[[[v,a],1],[[v,b],2]],[],true],[[[[v,a],2],[[v,b],1]],[],true]]],[ %% Algorithm dictionary        [[[n,1],1,1],[[v,a],[v,b]],":-",        [       [[n,+],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]],        [[[n,1],1,1],[[v,a],[v,b]],":-",        [       [[n,-],[[v,a],1,[v,c]]],                [[n,=],[[v,c],[v,b]]]]]], %% Result[[[n,1],[[v,a],[v,b]],":-",[[[n,+],[[v,a],1,[v,c]]],[[n,=],[[v,c],[v,b]]]]],[[n,1],[[v,a],[v,b]],":-",[[[n,-],[[v,a],1,[v,c]]],[[n,=],[[v,c],[v,b]]]]],[[n,add0],[[v,a],[v,b]],":-",[[[n,1],[[v,a],[v,c]]],[[n,=],[[v,b],[v,c]]]]]]).
changegrid2(_Prevstate,State1,Grid1,Grid2,X1,Y1,C2,C4,N2,Stroke1,States) :-member([X2,Y2,M1],C2),check(State1,M1,N2,X1,Y1,X2,Y2,C2,C4,Grid1,Grid2,Stroke1,States).
changelength(Lyrics2Length,Melody2Length,Melody,Melody) :-Lyrics2Length=Melody2Length,!.
changelength(Lyrics2Length,Melody2Length,Melody1,Melody2) :-Lyrics2Length < Melody2Length,length(Melody2,Lyrics2Length),append(Melody2,_,Melody1).
changelength(Lyrics2Length,Melody2Length,Melody1,Melody2) :-Lyrics2Length > Melody2Length,Length is Lyrics2Length-Melody2Length,repeatlastnote1(Length,Melody1,Melody2).
changelengthh(Lyrics2Length,Melody2Length,Melody,Melody) :-Lyrics2Length=Melody2Length,!.
changelengthh(Lyrics2Length,Melody2Length,Melody1,Melody2) :-Lyrics2Length < Melody2Length,length(Melody2,Lyrics2Length),append(Melody2,_,Melody1).
changelengthh(Lyrics2Length,Melody2Length,Melody1,Melody2) :-Lyrics2Length < Melody2Length,length(Melody2,Lyrics2Length),append(Melody2,_,Melody1).repeatlastnoteh1(Length,Melody1,Melody2) :-reverse(Melody1,Melody3),Melody3=[Item|_],repeatlastnoteh2(Length,Item,Melody1,Melody2),!.
changelengthh(Lyrics2Length,Melody2Length,Melody1,Melody2) :-Lyrics2Length > Melody2Length,Length is Lyrics2Length-Melody2Length,repeatlastnoteh1(Length,Melody1,Melody2).
changelengthh(Lyrics2Length,Melody2Length,Melody1,Melody2) :-Lyrics2Length > Melody2Length,Length is Lyrics2Length-Melody2Length,repeatlastnoteh1(Length,Melody1,Melody2).changelengthh(Lyrics2Length,Melody2Length,Melody1,Melody2) :-Lyrics2Length < Melody2Length,length(Melody2,Lyrics2Length),append(Melody2,_,Melody1).
check(State1,M1,N2,X1,Y1,X2,Y2,C2,C4,Grid1,Grid3,Stroke1,States) :-%%writeln([b,state1,m1,n2,x1,y1,c2,y2,c2,c4,grid1,grid3,stroke1,states,%%State1,M1,N2,X1,Y1,X2,Y2,C2,C4,Grid1,Grid3,Stroke1,States]),State1=[_,-],M1=[N2|Ms], get(States,State1,Line,States2),check2(Line,X1,Y1,X2,Y2,C2,M1,Ms,C5,Grid1,Grid2,Stroke1,Stroke2,false),%%Stroke3 is Stroke2+1,N3 is N2+1,%%writeln([b,state,State1,index,N3,stroke1,Stroke2]),gotostates(State1,States2,Grid2,Grid3,X2,Y2,C5,C4,N3,Stroke2,States).
check14(A0,B,C,D1,Rest) :-A0=[A01|A02],check141(A01,B,[],D),append(C,[D],C1),%trace,(check14(A02,B,C1,D1,Rest)%->true;%(A02=Rest,C1=D1)),%(D2=[])!.check141([],[],A,A):-!./*check141(A,B,C,D1) :-%trace, ((A=[],_A52=[[o,B]])->true; (B=[],_A52=[[o,A]])), %trace, %(A51=[]->A52=[];A52=[[o,A51]]),foldr(append,[%A52],C1),append(C,C1,D1),%check141(A2,B2,C1,D1),!.
check_grammar(R) :-    catch((findall(_,(member(S,["[a,',',a,',',a]"]),term_to_atom(S2,S),flatten_keep_brackets(S2,S1),append([_],S4,S1),append(S3,[_],S4),once(phrase(a1,S3))),A),((length(["[a,',',a,',',a]"],L),length(A,L))->R="success";R="fail")),_, fail),  !.
check_same(A,B,L1,L2,_Start,TN1,TN2) :- get_lang_word("t",T),  get_lang_word("list",Dbw_list),  A=[T11|T12], B=[T21|T22], append([T11],[T21],T11T21), find_lists(T11T21,[],L3,true,TN1,TN3), %trace, %(false% %Start=true %-> %foldr(append,[L1,[[T,Dbw_list],L3]],L4); (%false% %trace, L3=[[[T,Dbw_list]|_]|_] -> (%trace, append(L1,L3,L4)); append(L1,[L3],L4)), %foldr(append,[L1,[L3]],L4)), append(T12,T22,T12T22), find_lists(T12T22,L4,L2,false,TN3,TN2).
check_same2(TL14,TL17,L1,L2,Start,TN1,TN2) :- get_lang_word("t",T),  get_lang_word("brackets",Dbw_brackets),  %trace, TL14=[[[T,Dbw_brackets],[TL141|TL142]]], % this is the different part TL17=[TL15|TL16], TL15=[[[T,Dbw_brackets],[TL151|TL152]]], check_same([TL141],[TL151],[],L3,Start,TN1,TN3), append(TL142,TL152,TL142TL152), find_lists(TL142TL152,[],L4,Start,TN3,TN4), foldr(append,[L3,[[t,list],L4]],L34), %** foldr(append,[L1,[[t,list],L34]],L5), %trace, %append(TL17,)) (TL16=[]->(L5=L2,TN4=TN2); (TL16=[TL171|TL18], check_same2(TL171,[L5],TL18,L2,Start,TN4,TN2))),!.
check_strings1(Length_string1,String1,String2,Db,List2,List2b) :-%% finds the first str%%length(List,Index),length(List1,Length_string1),append(_,List1,String1),Length_string2 is Length_string1-1,Length_string3 is Length_string1+1,check_strings2(0,Length_string3,List1,String2,Db,List2,List2c),(var(List2c)->check_strings1(Length_string2,String1,String2,Db,List2c,List2b);List2c=List2b),!.
check_strings1(Length_string1,String1,String2,Db,List2,List2b) :-%% finds the first str%%length(List,Index),length(List1,Length_string1),append(_,List1,String1),Length_string2 is Length_string1-1,Length_string3 is Length_string1+1,check_strings2(0,Length_string3,List1,String2,Db,List2,List2c),(var(List2c)->check_strings1(Length_string2,String1,String2,Db,List2c,List2b);List2c=List2b),!.check_strings2(Length_string,Length_string,_String1,_String2,_Db,List2,List2) :- !.
check_strings2(Length_string1,Length_string3,List1,String2,Db,List2,List2b) :-%%split_string(String4,SepandPad,SepandPad,String21),%% go through s1, removing the first word each time, until v%%Length_string11 is Length_string1-1,length(List11,Length_string1),append(List11,List2,List1),Length_string2 is Length_string1+1,%%writeln([list11,List11]),((%%trace,%%(List11=[z,a,b]->trace;true),%%writeln([[_,_,List11],String2]),%%notrace,not(List11=[]),%%writeln(data_instance_k_classification1(Db%%,List11,1,A)),data_instance_k_classification1(Db%%String2,List11,1,A),%%writeln([string2,String2,list11,List11,a,A]),A=String2,%%[_,_,List11],%%trace,%%((List11=[z,a,b],A=[_,_,[z,t,b]],not(String2=[_,_,[c,z]]))->trace;notrace),%%trace,%%writeln([string2=list11,String2=List11]),%%(List11=[y]->true%%trace%%;true),%%member(List11,Db),%%**String2=[_,_,List11]List2b=List2,%%,notraceString2=[_,_,String21],writeln([found,String21,List11]))->(true%%,writeln(List11));check_strings2(Length_string2,Length_string3,List1,String2,Db,_List2c,List2b)),!.
check_strings2(Length_string1,Length_string3,List1,String2,Db,List2,List2b) :-%%split_string(String4,SepandPad,SepandPad,String21),%% go through s1, removing the first word each time, until v%%Length_string11 is Length_string1-1,length(List11,Length_string1),append(List11,List2,List1),Length_string2 is Length_string1+1,%%writeln([list11,List11]),((%%trace,%%(List11=[z,a,b]->trace;true),%%writeln([[_,_,List11],String2]),%%notrace,not(List11=[]),%%writeln(data_instance_k_classification1(Db%%,List11,1,A)),data_instance_k_classification1(Db%%String2,List11,1,A),%%writeln([string2,String2,list11,List11,a,A]),A=String2,%%[_,_,List11],%%trace,%%((List11=[z,a,b],A=[_,_,[z,t,b]],not(String2=[_,_,[c,z]]))->trace;notrace),%%trace,%%writeln([string2=list11,String2=List11]),%%(List11=[y]->true%%trace%%;true),%%member(List11,Db),%%**String2=[_,_,List11]List2b=List2,%%,notraceString2=[_,_,String21],writeln([found,String21,List11]))->(true%%,writeln(List11));check_strings2(Length_string2,Length_string3,List1,String2,Db,_List2c,List2b)),!.numbers(N2,N1,Numbers,Numbers) :-N2 is N1-1,!.
checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :-%%writeln(3),        Arguments1=[Variable1|Arguments3],isvar(Variable1),        Arguments2=[Variable2|Arguments4],isvar(Variable2),(getvalue(Variable2,Value,Vars1)->true;Value=empty),        putvalue(Variable2,Value,Vars1,Vars3),        append(FirstArgs1,[[Variable1,Variable2]],FirstArgs3),        checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2).
checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :-%%writeln(3),        Arguments1=[Variable1|Arguments3],not(var(Variable1)),isvar(Variable1),        Arguments2=[Variable2|Arguments4],not(var(Variable2)),isvar(Variable2),(getvalue(Variable2,Value,Vars1)->true;Value=empty), %%((Value=empty->Value1=Variable2;Value1=Value))),        putvalue(Variable2,Value,Vars1,Vars3),        append(FirstArgs1,[[Variable1,Variable2]],FirstArgs3),        checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2).
checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :-%%writeln(4),        Arguments1=[Value1|Arguments3],        expressionnotatom(Value1),        Arguments2=[Value1|Arguments4],        expressionnotatom(Value1),        checkarguments(Arguments3,Arguments4,Vars1,Vars2,FirstArgs1,FirstArgs2).
checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :-%%writeln1(3),        Arguments1=[Variable1|Arguments3],not(var(Variable1)),isvar(Variable1),        Arguments2=[Variable2|Arguments4],not(var(Variable2)),isvar(Variable2),(getvalue(Variable2,Value,Vars1)),%%->true);Value=empty), %%((Value=empty->Value1=Variable2;Value1=Value))),        putvalue(Variable2,Value,Vars1,Vars3),        append(FirstArgs1,[[Variable1,Variable2]],FirstArgs3),        checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2),!.
checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :-%%writeln1(4),        Arguments1=[Value1|Arguments3],        expressionnotatom3(Value1),        Arguments2=[Value1|Arguments4],        expressionnotatom3(Value1),        checkarguments(Arguments3,Arguments4,Vars1,Vars2,FirstArgs1,FirstArgs2),!.
checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%A%%writeln(2),        Arguments1=[Variable|Arguments3], %% Value may be a number, string, list or tree        isvar(Variable),        Arguments2=[Value|Arguments4],        expressionnotatom(Value),        putvalue(Variable,Value,Vars1,Vars3),append(FirstArgs1,[[Variable,_]],FirstArgs3),        checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2).
checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%A%%writeln(2),        Arguments1=[Variable|Arguments3], %% Value may be a number, string, list or tree        not(var(Variable)),isvar(Variable),        Arguments2=[Value|Arguments4],        expressionnotatom(Value),        putvalue(Variable,Value,Vars1,Vars3),append(FirstArgs1,[[Variable,Value]],FirstArgs3),        checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2).
checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%A%%writeln1(2),        Arguments1=[Variable|Arguments3], %% Value may be a number, string, list or tree        not(var(Variable)),isvar(Variable),        Arguments2=[Value|Arguments4],        expressionnotatom3(Value),        putvalue(Variable,Value,Vars1,Vars3),append(FirstArgs1,[[Variable,Value]],FirstArgs3),        checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2),!.
checkarguments([],[],Vars,Vars,FirstArgs,FirstArgs). checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%%%writeln(1),Arguments1=[Value|Arguments3], %% Value may be a number, string, list or treeexpressionnotatom(Value),Arguments2=[Variable2|Arguments4],isvar(Variable2),putvalue(Variable2,Value,Vars1,Vars3),checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs1,FirstArgs2).
checkarguments([],[],Vars,Vars,FirstArgs,FirstArgs). checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%%%writeln(1),Arguments1=[Value|Arguments3], %% Value may be a number, string, list or treeexpressionnotatom(Value),Arguments2=[Variable2|Arguments4],isvar(Variable2),putvalue(Variable2,Value,Vars1,Vars3),checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs1,FirstArgs2).checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%A%%writeln(2),        Arguments1=[Variable|Arguments3], %% Value may be a number, string, list or tree        isvar(Variable),        Arguments2=[Value|Arguments4],        expressionnotatom(Value),        putvalue(Variable,Value,Vars1,Vars3),append(FirstArgs1,[[Variable,_]],FirstArgs3),        checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2).
checkarguments([],[],Vars,Vars,FirstArgs,FirstArgs). checkarguments(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%%%writeln(1),Arguments1=[Value|Arguments3], %% Value may be a number, string, list or treeexpressionnotatom(Value),Arguments2=[Variable2|Arguments4],not(var(Variable2)),isvar(Variable2),putvalue(Variable2,Value,Vars1,Vars3),checkarguments(Arguments3,Arguments4,Vars3,Vars2,FirstArgs1,FirstArgs2).
checkarguments1(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :-%%writeln(3),        Arguments1=[Variable1|Arguments3],not(var(Variable1)),isvar(Variable1),        Arguments2=[Variable2|Arguments4],not(var(Variable2)),isvar(Variable2),(getvalue(Variable2,Value,Vars1)->((Value=empty->Value1=Variable2;Value1=Value))),        putvalue(Variable2,Value1,Vars1,Vars3),        append(FirstArgs1,[[Variable1,Variable2]],FirstArgs3),        checkarguments1(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2).
checkarguments1(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :-%%writeln(4),        Arguments1=[Value1|Arguments3],        expressionnotatom(Value1),        Arguments2=[Value1|Arguments4],        expressionnotatom(Value1),        checkarguments1(Arguments3,Arguments4,Vars1,Vars2,FirstArgs1,FirstArgs2).
checkarguments1(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :- %%A%%writeln(2),        Arguments1=[Variable|Arguments3], %% Value may be a number, string, list or tree        not(var(Variable)),isvar(Variable),        Arguments2=[Value|Arguments4],        expressionnotatom(Value),        putvalue(Variable,Value,Vars1,Vars3),append(FirstArgs1,[[Variable,_]],FirstArgs3),        checkarguments1(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2).
checkarguments2(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :-%%writeln1(3),        Arguments1=[Variable1|Arguments3],not(var(Variable1)),isvar(Variable1),        Arguments2=[Variable2|Arguments4],not(var(Variable2)),isvar(Variable2),%trace,(getvalue(Variable2,Value,Vars1)),%%->true);Value=empty), %%((Value=empty->Value1=Variable2;Value1=Value))),        putvalue(Variable2,Value,Vars1,Vars3),        append(FirstArgs1,[[Variable1,Variable2]],FirstArgs3),        checkarguments2(Arguments3,Arguments4,Vars3,Vars2,FirstArgs3,FirstArgs2),!.
checkarguments2(Arguments1,Arguments2,Vars1,Vars2,FirstArgs1,FirstArgs2) :-%%writeln1(4),        Arguments1=[Value1|Arguments3],        expressionnotatom3(Value1),        Arguments2=[Value1|Arguments4],        expressionnotatom3(Value1),        checkarguments2(Arguments3,Arguments4,Vars1,Vars2,FirstArgs1,FirstArgs2),!.
checktypes0(Function,Vars1,_TypeStatements1) :- get_lang_word("Type check",Type_check),length(Vars1,L),L is 0,Vars1=[],(types(on)->(debug_types_call([Function,/,L,Type_check]));true),(types(on)->debug_call(Skip,[Function,Vars1]);true),(types(on)->debug_exit(Skip,[Function,Vars1]);true),(types(on)->(debug_types_exit([Function,/,L,Type_check]));true),!.
checktypes0_inputs(Function,Vars1,TypeStatements1,ModeStatements1) :-length(Vars1,L),get_lang_word("input type check",Input_type_check),(types(on)->(debug_types_call([Function,/,~,L,Input_type_check]));true),(member([Function|[TypeStatements2]],TypeStatements1),member([Function|[ModeStatements2]],ModeStatements1),extract_modes1(TypeStatements2,TypeStatements3,Vars1,Vars2,ModeStatements2),(types(on)->debug_call(Skip,[Function,Vars2]);true),((checktypes1(Vars2,TypeStatements3,TypeStatements3,TypeStatements1))->((types(on)->debug_exit(Skip,[Function,Vars2]);true),(types(on)->(debug_types_exit([Function,/,~,L,Input_type_check]));true));((types(on)->debug_fail(Skip,[Function,Vars1]);true),(types(on)->(debug_types_fail([Function,/,~,L,Input_type_check]));true)))),!.
checktypes0_inputs(Function,Vars1,TypeStatements1,ModeStatements1) :-length(Vars1,L),get_lang_word("input type check",Input_type_check),(types(on)->(debug_types_call([Function,/,~,L,Input_type_check]));true),(member([Function|[TypeStatements2]],TypeStatements1),member([Function|[ModeStatements2]],ModeStatements1),extract_modes1(TypeStatements2,TypeStatements3,Vars1,Vars2,ModeStatements2),(types(on)->debug_call(Skip,[Function,Vars2]);true),((checktypes1(Vars2,TypeStatements3,TypeStatements3,TypeStatements1))->((types(on)->debug_exit(Skip,[Function,Vars2]);true),(types(on)->(debug_types_exit([Function,/,~,L,Input_type_check]));true));((types(on)->debug_fail(Skip,[Function,Vars1]);true),(types(on)->(debug_types_fail([Function,/,~,L,Input_type_check]));true)))),!.extract_modes1(TypeStatements1,TypeStatements3,Vars1,Vars2,ModeStatements1) :-%%TypeStatements1=[TypeStatements2|TypeStatements3],%%trace,%%writeln1([TypeStatements1,ModeStatements1]),extract_modes2(TypeStatements1,[],TypeStatements3,Vars1,[],Vars2,ModeStatements1),!.
checktypes0_inputs(Function,Vars1,_TypeStatements1,_ModeStatements1) :- length(Vars1,L),L is 0,Vars1=[],get_lang_word("input type check",Input_type_check),(types(on)->debug_types_call([Function,/,~,L,Input_type_check]);true),(types(on)->debug_call(Skip,[Function,Vars1]);true),(types(on)->debug_exit(Skip,[Function,Vars1]);true),(types(on)->(debug_types_exit([Function,/,~,L,Input_type_check]));true),!.
checktypes10(Vars1,TypeStatements0,TypeStatements1,TypeStatements4) :-Vars1=[Vars2|Vars3],TypeStatements0=[TypeStatements2|TypeStatements3],checktypes2(Vars2,TypeStatements2,TypeStatements1,TypeStatements4),%%not(variable_name(Vars2)),checktypes10(Vars3,TypeStatements3,TypeStatements1,TypeStatements4).
checktypes2(Vars,TypeStatements1,_TypeStatements2,_) :-get_lang_word("t",T),get_lang_word("predicatename",Dbw_predicatename),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,TypeStatements1=[T,Dbw_predicatename],(types(on)->debug_call(Skip,[[T,Dbw_predicatename],Vars]);true),((Vars=[Dbw_n,_])->(types(on)->debug_exit(Skip,[[T,Dbw_predicatename],Vars]);true);     (types(on)->debug_fail(Skip,[[T,Dbw_predicatename],Vars]);true)).
checktypes2(Vars,TypeStatements1,_TypeStatements2,_C) :-get_lang_word("t",T),get_lang_word("atom",Dbw_atom),%%writeln(checktypes2(Vars,TypeStatements1,_TypeStatements2,C)),TypeStatements1=[T,Dbw_atom],(types(on)->debug_call(Skip,[[T,Dbw_atom],Vars]);true),((atom(Vars))->(types(on)->debug_exit(Skip,[[T,Dbw_atom],Vars]);true);     (types(on)->debug_fail(Skip,[[T,Dbw_atom],Vars]);true)).
checktypes3(Vars,TypeStatements3,TypeStatements2,TypeStatements6) :-%%writeln(checktypes3(Vars,TypeStatements3,TypeStatements2,TypeStatements6)),length(TypeStatements3,L),length(L1,L),append(L1,L2,Vars),%%[L10]=L1,%%TypeStatements3=[TypeStatements4|TypeStatements5],%%findall(L10,(member(L10,L1),checktypes2(L10,TypeStatements4,TypeStatements2,TypeStatements6)),B),checktypes1(L1,TypeStatements3,TypeStatements2,TypeStatements6),checktypes3(L2,TypeStatements3,TypeStatements2,TypeStatements6),!.
checktypes3(Vars,TypeStatements3,TypeStatements2,TypeStatements6) :-%%writeln(checktypes3(Vars,TypeStatements3,TypeStatements2,TypeStatements6)),%delete(TypeStatements3,"|",TypeStatements31),%trace,%findall(L0,length1(TypeStatements3,TypeStatements6,[],_,0,L0),L01),%sort(L01,L02),%member(L,L02),length(TypeStatements3,L),length(L1,L),append(L1,L2,Vars),%%[L10]=L1,%%TypeStatements3=[TypeStatements4|TypeStatements5],%%findall(L10,(member(L10,L1),checktypes2(L10,TypeStatements4,TypeStatements2,TypeStatements6)),B),checktypes10(L1,TypeStatements3,TypeStatements2,TypeStatements6),checktypes3(L2,TypeStatements3,TypeStatements2,TypeStatements6).
choose2(N2,B,B1,B2,List0,List0) :-%%trace,string00_z(String00),choose_sentence_range(String00,N1,B,B1,B2,List0),%%chosen_quotes(Chosen_quotes1),%%trace,%%length(List0,L),%%numbers(L,1,[],N),%%random_%%member(N1,N),%%%%random_%%member([N1,Item10],List0),%%random_%%**member(Item1,Item10),N2 is N1+B2-1,%%get_item_n(List0,N1,Item10),%%**string_codes(Item10,List),%%notrace,%%**split_string(List,".\n",".\n",List2),%%length(List2,L),%%numbers(L,1,[],N),%%random_%%member(N1,N),%%N2 is N1+B2-1,%%random_%%**member(Item1,List2),%%get_item_n(List2,N1,Item1),/**string_concat(E,D,Item1),string_length(E,1),downcase_atom(E,E1),atom_string(E1,E2),string_concat(E2,D,Item2),string_length(E2,1),string_concat(Item2,""%%".",Item),**/delete(String00,[B,B1,B2,N1,List0],String00_a),%%trace,%%writeln1([[b,b1,b2,n2,list0],[B,B1,B2,N1,List0]]),%%writeln1([string00,String00]),%%writeln1([string00_a,String00_a]),%%**delete(String00,[B,B1,B2|_],String00_a),%%**delete(List0,[N1,Item10],List6),%%findall([Item3,". "],(member(Item3,List2)),List3),%%maplist(append,[List3],[List4]),%%concat_list(List4,_List5),%%append(List6,[]%%List5%%,List7),%%**(List6=[]->String00_b=String00_a;%%**(%%trace,%%**maplist(append,[[[B,B1,B2],List6]],[String00_c]),%%**append(String00_a,[String00_c],String00_b)%%,notrace%%**)),retractall(string00_z(_)),assertz(string00_z(String00_a))%%trace,%%writeln1(String00_b),notrace%%,not(member(Item,Chosen_quotes1)),%%append(Chosen_quotes1,[Item],Chosen_quotes2),%%retractall(chosen_quotes(_)),%%assertz(chosen_quotes(Chosen_quotes2)).
choose2(N2,B,B1,B2,List0,List0) :-%%trace,string00_z(String00),choose_sentence_range(String00,N1,B,B1,B2,List0),%%chosen_quotes(Chosen_quotes1),%%trace,%%length(List0,L),%%numbers(L,1,[],N),%%random_%%member(N1,N),%%%%random_%%mind_read([N1,Item10],List0),%%random_%%mind_read(Item1,Item10),N2 is N1+B2-1,%%get_item_n(List0,N1,Item10),%%**string_codes(Item10,List),%%notrace,%%**split_string(List,".\n",".\n",List2),%%length(List2,L),%%numbers(L,1,[],N),%%random_%%member(N1,N),%%N2 is N1+B2-1,%%random_%%**member(Item1,List2),%%get_item_n(List2,N1,Item1),/**string_concat(E,D,Item1),string_length(E,1),downcase_atom(E,E1),atom_string(E1,E2),string_concat(E2,D,Item2),string_length(E2,1),string_concat(Item2,""%%".",Item),**/delete(String00,[B,B1,B2,N1,List0],String00_a),%%**delete(String00,[B,B1,B2|_],String00_a),%%**delete(List0,[N1,Item10],List6),%%findall([Item3,". "],(member(Item3,List2)),List3),%%maplist(append,[List3],[List4]),%%concat_list(List4,_List5),%%append(List6,[]%%List5%%,List7),%%**(List6=[]->String00_b=String00_a;%%**(%%trace,%%**maplist(append,[[[B,B1,B2],List6]],[String00_c]),%%**append(String00_a,[String00_c],String00_b)%%,notrace%%**)),retractall(string00_z(_)),assertz(string00_z(String00_a))%%trace,%%writeln1(String00_b),notrace%%,not(member(Item,Chosen_quotes1)),%%append(Chosen_quotes1,[Item],Chosen_quotes2),%%retractall(chosen_quotes(_)),%%assertz(chosen_quotes(Chosen_quotes2)).
class(object,A) :- br1(A,B), (not(B="minus"),not(B="right")).
classicalcomposition('C','E').
classicalcomposition1(Note, Note, _Counter, a, Progression, Progression) :- !.
classicalcomposition1(Note1, Note2, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,stepclassical1(Note1, Note3),append(Progression1, [Note3], Progression3),classicalcomposition2(Note3, Note2, Note1, Counter2, Flag2, Progression3, Progression4),stepclassical2(Note1, Note4),append(Progression1, [Note4], Progression5),classicalcomposition2(Note4, Note2, Note1, Counter2, Flag3, Progression5, Progression6),stepclassical3(Note1, Note5),append(Progression1, [Note5], Progression7),classicalcomposition2(Note5, Note2, Note1, Counter2, Flag4, Progression7, Progression8),stepclassical4(Note1, Note7),append(Progression1, [Note7], Progression9),classicalcomposition2(Note7, Note2, Note3, Counter2, Flag5, Progression9, Progression10),stepclassical5(Note1, Note8),append(Progression1, [Note8], Progression11),classicalcomposition2(Note8, Note2, Note3, Counter2, Flag6, Progression11, Progression12),stepclassical6(Note1, Note9),append(Progression1, [Note9], Progression13),classicalcomposition2(Note9, Note2, Note3, Counter2, Flag7, Progression13, Progression14),stepclassical7(Note1, Note10),append(Progression1, [Note10], Progression15),classicalcomposition2(Note10, Note2, Note3, Counter2, Flag8, Progression15, Progression16),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8], [Flag5, Progression10], [Flag6, Progression12], [Flag7, Progression14], [Flag8, Progression16]], Flag1, Progression2).
classicalcomposition1(_, _, Counter, b, Progression, Progression) :-Counter = 3, !.
classicalcomposition1(_, _, Counter, b, Progression, Progression) :-Counter = 4, !.
classicalcomposition2(Note, Note, _, _Counter, a, Progression, Progression) :- !.
classicalcomposition2(Note, Note, _, _Counter, a, Progression, Progression) :- !.classicalcomposition2(Note1, Note2, Note3, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,stepclassical1(Note1, Note4),append(Progression1, [Note4], Progression3),classicalcomposition2(Note4, Note2, Note3, Counter2, Flag2, Progression3, Progression4),stepclassical2(Note1, Note5),append(Progression1, [Note5], Progression5),classicalcomposition2(Note5, Note2, Note3, Counter2, Flag3, Progression5, Progression6),stepclassical3(Note1, Note6),append(Progression1, [Note6], Progression7),classicalcomposition2(Note6, Note2, Note3, Counter2, Flag4, Progression7, Progression8),stepclassical4(Note1, Note7),append(Progression1, [Note7], Progression9),classicalcomposition2(Note7, Note2, Note3, Counter2, Flag5, Progression9, Progression10),stepclassical5(Note1, Note8),append(Progression1, [Note8], Progression11),classicalcomposition2(Note8, Note2, Note3, Counter2, Flag6, Progression11, Progression12),stepclassical6(Note1, Note9),append(Progression1, [Note9], Progression13),classicalcomposition2(Note9, Note2, Note3, Counter2, Flag7, Progression13, Progression14),stepclassical7(Note1, Note10),append(Progression1, [Note10], Progression15),classicalcomposition2(Note10, Note2, Note3, Counter2, Flag8, Progression15, Progression16),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8], [Flag5, Progression10], [Flag6, Progression12], [Flag7, Progression14], [Flag8, Progression16]], Flag1, Progression2).
classicalcomposition2(Note, _, Note, _, _, _, _) :- !.
classicalcomposition2(Note1, Note2, Note3, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,stepclassical1(Note1, Note4),append(Progression1, [Note4], Progression3),classicalcomposition2(Note4, Note2, Note3, Counter2, Flag2, Progression3, Progression4),stepclassical2(Note1, Note5),append(Progression1, [Note5], Progression5),classicalcomposition2(Note5, Note2, Note3, Counter2, Flag3, Progression5, Progression6),stepclassical3(Note1, Note6),append(Progression1, [Note6], Progression7),classicalcomposition2(Note6, Note2, Note3, Counter2, Flag4, Progression7, Progression8),stepclassical4(Note1, Note7),append(Progression1, [Note7], Progression9),classicalcomposition2(Note7, Note2, Note3, Counter2, Flag5, Progression9, Progression10),stepclassical5(Note1, Note8),append(Progression1, [Note8], Progression11),classicalcomposition2(Note8, Note2, Note3, Counter2, Flag6, Progression11, Progression12),stepclassical6(Note1, Note9),append(Progression1, [Note9], Progression13),classicalcomposition2(Note9, Note2, Note3, Counter2, Flag7, Progression13, Progression14),stepclassical7(Note1, Note10),append(Progression1, [Note10], Progression15),classicalcomposition2(Note10, Note2, Note3, Counter2, Flag8, Progression15, Progression16),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8], [Flag5, Progression10], [Flag6, Progression12], [Flag7, Progression14], [Flag8, Progression16]], Flag1, Progression2).
clean(Items1, Items2) :-clean1(Items1,[],Items2).
clean1(Items,I1,F1) :-allnumbers(Items,[],Names),append(I1,[Names],F1),!.clean1([Item|Items],I1,F1) :-clean1(Item, I1, F2),clean1(Items, F2, F1).allnumbers([],Names,Names).
clean1([],I,I).
clean_formula([A],B,C) :- number1(A),append(B,[A],C),!.
clean_formula([],A,A) :- !.
clean_formula([],A,A) :- !.clean_formula([A],B,C) :- number1(A),append(B,[A],C),!.
close1(N0,N1) :- length(N0,L0), length(N1,L1), L11 is L1-1, L12 is L1+1, L11<L0,L0=<L12.
code(Item) :-(Item=[[n,code]|_Rest]->true;Item=[n,code]),!.
code(Item) :-(Item=[[n,code]|_Rest]->true;Item=[n,code]),!.call1(Item) :- (Item=[[n,_PredicateName]|_Variables]->true;Item=[n,_PredicateName]),not(code(Item)),!.
code(Item) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("code",Dbw_code),(Item=[[Dbw_n,Dbw_code]|_Rest]->true;Item=[Dbw_n,Dbw_code]),!.
codes_key([27,91,66],down)  :- !.
codes_key([27,91,67],right) :- !.
codes_key([27,91,68],left)  :- !.
codes_key(_,other)  :- !.
collect_arguments_body2(Body1,Body2,Body3) :-        Body1=[[Statements1|Statements1a]|Statements2        ],not(predicate_or_rule_name(Statements1)),  %Number1a is Number1+1,collect_arguments_body2([Statements1],Body2,Body4), %% 2->1collect_arguments_body2(Statements1a,Body4,Body5),        collect_arguments_body2(Statements2,Body5,Body3),    %%append([Body3,Body4],Body6),%%append([[Body6],Body5],Body2),!.
collect_clauses_in_loops1(A,B,C) :- A=[[Add,[loop1,List]]|D], collect_clauses_in_loops1(List,D,[],E), append(B,[[Add,[loop1,List]]],F), collect_clauses_in_loops1(E,F,C).
collect_clauses_in_loops1(List1,D,F,E) :- D=[[Add,[loop1,List2]]|G], %subtract(List2,List1,List3),foldr(collect_clauses_in_loops2,List1,List2,List3), append(F,[[Add,[loop1,List3]]],H), collect_clauses_in_loops1(List1,G,H,E). collect_clauses_in_loops2([N1,A],NDs1,NDs2) :- (member([N1,_],NDs1)->delete(NDs1,[N1,_A2],NDs2); append(NDs1,[[N1,A]],NDs2)).
collect_consecutive([H1, Body1], [[H2, Body2]|T], [ [H1, Body1] | Group], Rest) :-    Body1 = Body2,    H2 is H1 + 1,  % Check if the heads are consecutive    collect_consecutive([H2, Body2], T, Group, Rest).collect_consecutive([H1, Body1], [[H2, Body2]|T], [[H1, Body1]], [[H2, Body2]|T]) :-    not((Body1 = Body2, H2 is H1 + 1)).
collect_consecutive([H1, Body1], [[H2, Body2]|T], [ [H1, Body1] | Group], Rest) :-    Body1 = Body2,    H2 is H1 + 1,  % Check if the heads are consecutive    collect_consecutive([H2, Body2], T, Group, Rest).collect_consecutive([H1, Body1], [[H2, Body2]|T], [[H1, Body1]], [[H2, Body2]|T]) :-    not((Body1 = Body2, H2 is H1 + 1)).% Example query%?- group_consecutive_items([[1,[1,2]],[2,[1,2]],[3,[3]],[5,[3]],[6,[3]]], Result).
collect_ga_parts(Term,Vars,Vars) :-not(is_item4(Term)),!.
collect_ga_parts(Term,Vars1,Vars2) :-is_item4(Term),append(Vars1,[Term],Vars2),!.
collect_ga_parts([],Vars,Vars) :- !.collect_ga_parts(Term,Vars1,Vars2) :-not(is_item4(Term)),Term=[Term1|Term2],collect_ga_parts(Term1,Vars1,Vars3),collect_ga_parts(Term2,Vars3,Vars2),!.
collect_simplify_types(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("atom",Dbw_atom),Data=[T,Dbw_atom,N,D],%string(Data),append(Types1,[[T,Dbw_atom,N,D]],Types2),!.
collect_simplify_types(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("number",Dbw_number),Data=[T,Dbw_number,N,D],%number(Data),append(Types1,[[T,Dbw_number,N,D]],Types2),!.
collect_simplify_types(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("string",Dbw_string),Data=[T,Dbw_string,N,D],%string(Data),append(Types1,[[T,Dbw_string,N,D]],Types2),!.
collect_simplify_types1(Data,L1,L2):- Data=[D|E], collect_simplify_types(D,[],L), append(L1,[L],L3), collect_simplify_types1(E,L3,L2).
collect_vars(Term,Vars,Vars) :-not(variable_name(Term)),!.
collect_vars(Term,Vars1,Vars2) :-not(variable_name(Term)),Term=[Term1|Term2],collect_vars(Term1,Vars1,Vars3),collect_vars(Term2,Vars3,Vars2),!.
collect_vars(Term,Vars1,Vars2) :-variable_name(Term),append(Vars1,[Term],Vars2),!.
colour(black,   [0,   0,   0]).
colour(blue,    [0,   0,   255]).colour(purple,  [128, 0,   128]).
colour(brown,   [128, 64,  0]).
colour(green,   [0,   255, 0]).
colour(orange,  [255, 128, 0]).
colour(white,   [255, 255, 255]).
colour(yellow,  [255, 255, 0]).
combination(N1,C1,C2) :-switch(S),append(C1,[S],C3),N2 is N1-1,combination(N2,C3,C2).
commaorrightbracketnext(Vgp1,Vgp2):-lookahead(Vgp1,Vgp2,",").
commaorrightbracketnext(Vgp1,Vgp2):-lookahead(Vgp1,Vgp2,"]").
commaorrightbracketnext-->lookahead([","]).
commaorrightbracketnext-->lookahead(["]"]).
comment(X1) --> spaces1(_),[X], {char_code('%',X)},comment1(Xs), {append([X],Xs,X2),string_codes(X3,X2),X1=[[n,comment],[X3]]},!.
comment(turnoffas).
comment1([]) --> [X], lookahead(A), {(char_type(X,newline)->true;A=[])}, !.
comment1([]) --> [], !.
comment3([XA,XB]) --> [XA],[XB], {char_code('*',XA),char_code('/',XB)}, !.
comment3([XA,XB]) --> [XA],[XB], {char_code('*',XA),char_code('/',XB)}, !.newlines1(_Xs) --> [X], {char_type(X,newline)}, newlines1(_Xs1), %{append([X],Xs,Xs2)},!.
comparisonoperator(<).
comparisonoperator(=<).
comparisonoperator(=<).%%comparisonoperator(=).comparisonoperator(=\=).
comparisonoperator(=\=).
comparisonoperator(>=).
competition(N,S) :- random(X),X1 is floor(10*X), random(Y),Y1 is floor(10*Y), (X1<Y1->K1="<";(X1=Y1->K1="=";K1=">")), writeln([X1,Y1,"<, = or >:"]), (catch(call_with_time_limit(2,get_single_char(K2)),_,false)->(char_code(K3,K2),atom_string(K3,K));(%nl, K="")),  (K=K1->(S1 is S+1,writeln(["Correct, Score = ",S1])); (S1 is S,writeln(["Incorrect"]))), N1 is N-1, competition(N1,S1),!.
compound(T,U)-->["["],["]"],compound213(T,U).
compound(T,U)-->["["],compound21(T,V),["]"],compound213(V,U).
compound(Vgp1,Vgp2,T,U):-grammar_part("[",Vgp1,Vgp3),compound21(Vgp3,Vgp4,T,V),grammar_part("]",Vgp4,Vgp5),compound213(Vgp5,Vgp2,V,U).
compound(Vgp1,Vgp2,T,U):-grammar_part("[",Vgp1,Vgp3),grammar_part("]",Vgp3,Vgp4),compound213(Vgp4,Vgp2,T,U).
compound21(T,U)-->item(I),[","],compound21([],Compound1name),{wrap(I,Itemname1),append(T,Itemname1,V),append(V,Compound1name,U)}.
compound21(T,U)-->item(I),lookahead(["]"]),{wrap(I,Itemname1),append(T,Itemname1,V)},compound212(V,U).
compound21(T,U)->item(I).
compound21(T,U)->item(I),!.
compound21(T,U)->item(I),lookahead("]"),{wrap(I,Itemname1),append(T,Itemname1,V)},compound212(V,U).
compound21(T,U)->{wrap(I,Itemname1),append(T,Itemname1,V)}.
compound21(T,U)->{wrap(I,Itemname1)}.
compound21(Vgp1,Vgp2,T,U):-item(Vgp1,Vgp3,I),grammar_part(",",Vgp3,Vgp4),compound21(Vgp4,Vgp2,[],Compound1name),wrap(I,Itemname1),append(T,Itemname1,V),append(V,Compound1name,U).
compound21(Vgp1,Vgp2,T,U):-item(Vgp1,Vgp3,I),lookahead(Vgp3,Vgp4,"]"),wrap(I,Itemname1),append(T,Itemname1,V),compound212(Vgp4,Vgp2,V,U).
compound212(U,U,T,T).
compound213(U,U,T,T).
compress_vars10(_,[],S1,S1,G,G) :- !.compress_vars10(G41,Statement,S1,S2,G1,G2) :-get_garbage_token(G4),flatten(Statement,Statement_f),(Statement=Statement_f->(append(G1,[[Statement,['&',G4]]],G2),append(S1,%[%[%G41,['&',G4]%]%],S2));%(%G1=G2,%variable_name(Statement)->%match_get_val(Statement,Value,Vars),%append(S1,[Value],S2));(Statement=[Statement1|Statement2],(variable_name(Statement1)->%(%match_get_val(Statement1,Value1,Vars),append(S1,[Statement1],S3)); (single_item_or_var(Statement1)-> (%Value1=Statement1,append(S1,[Statement1],S3));(compress_vars10(G41,Statement1,[],S31,G1,G3),S3=[S31]))),compress_vars10(G41,Statement2,[],S4,G3,G2),foldr(append,[S3,S4],S5),%trace,%S6=[S5],%(S1=[]->S2=S5;foldr(append,[S1,S5],S2))),!.
computers(same).
concat_list(A,List,B) :-List=[Item|Items],concat_list2(A,[Item],C),concat_list(C,Items,B).
concat_list(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list(C,Items,B).
concat_list(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list(C,Items,B).**/concat_list(A,[],A) :-!.concat_list(A,List,B) :-List=[Item|Items],concat_list2(A,[Item],C),concat_list(C,Items,B).
concat_list(A,List,B):-List=[Item|Items],stringconcat(A,Item,C),concat_list(C,Items,B).
concat_list(A,[],A):-!.
concat_list(A1,B):-%A1=[A|List],concat_list("",A1,B),!.
concat_list(A1,B):-A1=[A|List],concat_list(A,List,B),!.
concat_list(A1,B):-A1=[A|List],concat_list(A,List,B),!.
concat_list0(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list0(C,Items,B).
concat_list0(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list0(C,Items,B).sentencewithspaces(Sentence1,Sentence2) :-Sentence1=[Item|Items],string_concat(Firstletter1,Rest,Item),string_length(Firstletter1,1),upcase_atom(Firstletter1,Firstletter2),concat_list(Firstletter2,[Rest,""],Item2),flatten(Items,Items1),sentencewithspaces(Items1,Item2,Sentence3),string_concat(Sentence3,".",Sentence2).
concat_list0(A1,B):-A1=[A|List],concat_list0(A,List,B),!.
concat_list0(A1,B):-A1=[A|List],concat_list0(A,List,B),!.concat_list0(A,[],A):-!.
concat_list2(A,Item,C) :-concat_list(A,Item,C),!.
concat_list2(A,Item,C) :-concat_list(A,Item,C),!.concat_list0([],""):-!.
concat_list2(A,Item,C) :-concat_list3(A,Item,C),!.
concat_list2(A,List,C) :-((List=[[Item]]->true;List=[Item])->string_concat(A,Item,C);fail),!.concat_list2(A,Item,C) :-concat_list(A,Item,C),!.
concat_list2(A,List,C) :-((List=[[Item|Items]]->true;List=[Item])->concat_list(A,[Item|Items],C);fail),!.
concat_list2(A,List,C) :-((List=[[Item|Items]]->true;List=[Item])->concat_list0(A,[Item|Items],C);fail),!.
concat_list2(A,List,C) :-((List=[[Item|Items]]->true;List=[Item])->concat_list0(A,[Item|Items],C);fail),!.concat_list2(A,Item,C) :-concat_list(A,Item,C),!.concat_list0([],""):-!.
concat_list2(A,List,C) :-((List=[[Item|Items]]->true;List=[Item|Items])->concat_list0(A,[Item|Items],C);fail),!.
concat_list2A(A,List,B) :-List=[Item|Items],string_concat(A,Item,C),concat_list2A(C,Items,B).
concat_list3(A,List,B) :-List=[Item|Items],concat_list2(A,[Item],C),concat_list3(C,Items,B).
conjunction(_,_,false) :- !.%% list Trans%% orig to choose from  v/**- 0. Enter from, to languagesctt-input.txt[[en,fr],['How do you do?...']]ctt-orig1-orig2.txt[[[en,fr],['How do you do?','How are you?']]...] 2nd item is correct back-translation with cult cust1. If back-translation of sentence and ctt-orig-tran.txt version exists, or a link to it exists or is the same, adds to translation if nec (and lang tag x to) ctt-orig-tran.txt2. Else, - asks if the sentences have the same meaning with return/n optionsIf yes, goto 1If no, opens Grammarly editor to add possible from2 versions to retryctt-orig1-orig2-tmp-N.txt (keep all finished tmps, open in folder by itself)[['<<<Note:>>>','How do you do?'],[[[BT:'How are you?',bt]...],[['How are you - entered?']...]]]f2t only has f1 sentence and allows changes in grammarly - sentence (one of entered ones) with an acceptable back-translation will be added to f1f2ctt-orig-tran.txt[[[en,fr],['How are you?','Comment allez-vous?']]...]ctt-output.txt[[en,fr],[['How are you?','Comment allez-vous?']...]] - complete text translatedNote:- Can split sentences into logic, A verb B with C x do manuallyctt-from2tmp.txt (delete just before end)([[['How are you?'] x v working translation exists] x,[['How do you do?' (original first),...]]- assumes Sentences have been checked with Grammarly before using the program- lists from1 or from2 distance 1 x n away from from1 x all with same meaning index (eg 1)- mistaken mergers will require sentences copied from screen, manually diverged later x undo feature - makes backups at each point with command to undo) x() to (translation), from2 (back-translation) outputtedback-translation ready at this stage**/%% star 2%%ctt-orig1-orig2.txt%%[[[en,fr],['How do you do?','How are you?']]...] 2nd item is correct back-translation with cult cust%%ctt-orig-tran.txt%%[[[en,fr],['How are you?','Comment allez-vous?']]...]%% star 3%%[['<<<Note:>>>','How do you do?'],[[[BT:'How are you?',bt]...],['How are you - entered?'...]]]%% * enter default tmp contents v%%ctt-orig1-orig2.txt%%[[[en,fr],['How do you do?','How are you?']]...] 2nd item is correct back-translation with cult cust%%o1 o2***%%ctt-orig-tran.txt%%[[[en,fr],['How are you?','Comment allez-vous?']]...]%%o2 l***%% List=[o1 o2]1, List4=[o2 l]1,String4=[o2* l]2 where Word3 is o12concat_list(A1,B):-A1=[A|List],concat_list(A,List,B),!.
conjunction_list(C, [C])   :- not(C = (_,_)).
conjunction_list(C, [P|R]) :- C = (P,Q), conjunction_list(Q, R).
connect(S1,S3) :- %member([_,_,undone],S1), connect1(S1,S9), %connect1(S2,S9), %ask("Would you like to continue? (y/n)",YN), %(YN="n"->S9=S3; connect(S9,S3).
connector_points(XN1,YN1,Grid1,Grid2) :-YN1=[YN2|YN3],connector_points1(XN1,YN2,Grid1,Grid3),connector_points(XN1,YN3,Grid3,Grid2).
connector_points(XN1,YN1,ZN1,Grid1,Grid2) :-ZN1=[ZN2|ZN3],connector_points1(XN1,YN1,ZN2,Grid1,Grid3),connector_points(XN1,YN1,ZN3,Grid3,Grid2),!.
connector_points1(XN1,YN1,ZN1,Grid1,Grid2) :-YN1=[YN2|YN3],connector_points2(XN1,YN2,ZN1,Grid1,Grid3),connector_points1(XN1,YN3,ZN1,Grid3,Grid2).
connector_points1(XN1,YN2,Grid1,Grid2) :-XN1=[XN2|XN3],delete(Grid1,[XN2,YN2,_],Grid3),append(Grid3,[[XN2,YN2,[*]]],Grid4),connector_points1(XN3,YN2,Grid4,Grid2).
connector_points2(XN1,YN2,ZN1,Grid1,Grid2) :-XN1=[XN2|XN3],delete(Grid1,[ZN1,XN2,YN2,_],Grid3),append(Grid3,[[ZN1,XN2,YN2,[*]]],Grid4),connector_points2(XN3,YN2,ZN1,Grid4,Grid2).
construct(Base,Materials,Result) :-  construct1(Base,Materials,[],Result).
construct1(Base,Materials,Result1,Result2) :-Base=[B1|B2],%trace,member([B1,Materials2],Materials),append(Result1,[[B1|Materials2]],Result3),construct1(B2,Materials,Result3,Result2).
construct1([],_Materials,Result,Result) :- !.
contains_empty(Statement) :-(is_empty(Statement)->true;(Statement=[Statement1|Statement2],(is_empty(Statement1)->true;(contains_empty(Statement1)->true;contains_empty(Statement2))))).
contains_loop_dfs2(Curr,Item7,Items_all%,Items2,Items8,Items2_all1,Items8_all1,Not_on_line1,Not_on_line2) :- %trace,  (member(Curr,Item7)->%->fail;  %Items2_all1=Items6_all1;%->true;member(Curr1,)  %trace,  %* find 8 etc with lead to empty list (member(Curr,Items2_all1)-> (Items2_all1=Items8_all1, Not_on_line1=Not_on_line2 ); (append(Items2_all1,[Curr],Items8_all1), Not_on_line1=Not_on_line2));%  !.
convert_chunk(A,B) :-  get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,  get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,findall(A1,(member([_Number,[Dbw_on_true,_Statements1_number],[Dbw_go_after,_Statements2_number],[Dbw_on_false,_Return_line_false],[Dbw_go_to_predicates,_Predicates],[Dbw_n_or_v,F],Arguments],A),(Dbw_n_or_v=Dbw_n->true;Dbw_n_or_v=Dbw_v),%trace,(Arguments=[]->A1=[[Dbw_n_or_v,F]];A1=[[Dbw_n_or_v,F],Arguments])),B).
convert_to_grammar_part11(Grammar1,Grammar2,Grammar3,EndGrammar1,EndGrammar2) :-Grammar1=[Grammar4|Grammar5],(Grammar4=[[n,Name],Variables1,"->",Body1]->true;(Grammar4=[[n,Name],"->",Body1],Variables1=[])),%%((maplist(no_calls,Body1))-> %% this is a base case%%append([[v,vgp],[v,vgp]],Variables1,Variables2);append([[v,vgp1],[v,vgp2]],Variables1,Variables2)%%),member(Item1,Body1),call_or_terminal(Item1),%% If not, operator expected.
convert_to_grammar_part11(Grammar1,Grammar2,Grammar3,EndGrammar1,EndGrammar2) :-Grammar1=[Grammar4|Grammar5],(Grammar4=[[n,Name],Variables1,"->",Body1]->true;(Grammar4=[[n,Name],"->",Body1],Variables1=[])),%%((maplist(no_calls,Body1))-> %% this is a base case%%append([[v,vgp],[v,vgp]],Variables1,Variables2);append([[v,vgp1],[v,vgp2]],Variables1,Variables2)%%),member(Item1,Body1),call_or_terminal(Item1),%% If not, operator expected.append([[n,Name]],Variables2,Variables3),Grammar6=[[n,grammar_part],Variables3,":-"],convert_to_grammar_part20(Body1,1,2,2,[],Body2),append(Grammar6,[Body2],Grammar7),%% member to check all doesn't work elsewhere, do ; to ->true;(maplist(basecasecondition(Variables3,[n,Name]),Grammar2)->((Variables1=[]->(Grammar9=[[n,grammar_part],[[n,Name],[],[v,vgp]]],Grammar10=[[n,grammar_part],[[n,Name],"",[v,vgp]]],append(EndGrammar1,[[[n,grammar_part],[[n,Name],[v,vgp],[v,vgp]]]],EndGrammar3));(Grammar9=[[n,grammar_part],[[n,Name],[],[v,vgp]|Variables1]],Grammar10=[[n,grammar_part],[[n,Name],"",[v,vgp]|Variables1]],append(EndGrammar1,[[[n,grammar_part],[[n,Name],[v,vgp],[v,vgp]|Variables1]]],EndGrammar3)) ),append(Grammar2,[Grammar9,Grammar10,Grammar7],Grammar8));(EndGrammar1=EndGrammar3,append(Grammar2,[Grammar7],Grammar8))),convert_to_grammar_part11(Grammar5,Grammar8,Grammar3,EndGrammar3,EndGrammar2),!.
convert_to_grammar_part11(Grammar1,Grammar2,Grammar3,EndGrammar1,EndGrammar2) :-Grammar1=[Grammar4|Grammar5],   ((((Grammar4=[_Name1,_Variables1,":-",_Body1]->true;Grammar4=[_Name2,":-",_Body2])->true;Grammar4=[_Name3,_Variables2])->true;Grammar4=[_Name4])->true;(writeln(["Error: Grammar",Grammar4,"badly formed."]),abort)),append(Grammar2,[Grammar4],Grammar6),convert_to_grammar_part11(Grammar5,Grammar6,Grammar3,EndGrammar1,EndGrammar2),!.
convert_to_grammar_part11(Grammar1,Grammar2,Grammar3,EndGrammar1,EndGrammar2,Grammara1,Grammara2,EndGrammara1,EndGrammara2) :-Grammar1=[Grammar4|Grammar5],   (((((Grammar4=[_Name1,_Variables1,":-",_Body1]->true;Grammar4=[_Name2,":-",_Body2])->true;Grammar4=[_Name3,_Variables2])->true;Grammar4=[":-",_,_])->true;Grammar4=[_Name4])->true;(writeln1(["Error: Grammar",Grammar4,"badly formed."]),abort)),append(Grammar2,[Grammar4],Grammar6),append(Grammara1,[[Grammar4,Grammar4]],Grammara4),convert_to_grammar_part11(Grammar5,Grammar6,Grammar3,EndGrammar1,EndGrammar2,Grammara4,Grammara2,EndGrammara1,EndGrammara2),!.
convert_to_grammar_part11(Grammar1,Grammar2,Grammar3,_EndGrammar1,EndGrammar2,Grammara2,Grammara3,_EndGrammara1,EndGrammara2) :-get_lang_word("v",Dbw_v),get_lang_word("n",Dbw_n),get_lang_word("vgp1",Dbw_vgp1),get_lang_word("vgp2",Dbw_vgp2),Grammar1=[Grammar4|Grammar5],(Grammar4=[[Dbw_n,Name],Variables1,"->",Body1]->true;(Grammar4=[[Dbw_n,Name],"->",Body1],Variables1=[])),%%((maplist(no_calls,Body1))-> %% this is a base case%%append([[v,vgp],[v,vgp]],Variables1,Variables2);append([[Dbw_v,Dbw_vgp1],[Dbw_v,Dbw_vgp2]],Variables1,Variables3)%%),member(Item1,Body1),call_or_terminal(Item1),%% If not, operator expected.
convert_to_grammar_part11(Grammar1,Grammar2,Grammar3,_EndGrammar1,_EndGrammar2,Grammara1,Grammara2,_EndGrammara1,_EndGrammara2) :-Grammar1=[Grammar4|Grammar5],   ((((Grammar4=[_Name1,_Variables1,":-",_Body1]->true;Grammar4=[_Name2,":-",_Body2])->true;Grammar4=[_Name3,_Variables2])->true;Grammar4=[_Name4])->true;(writeln(["Error: Grammar",Grammar4,"badly formed."]),abort)),append(Grammar2,[Grammar4],Grammar6),append(Grammara1,[[Grammar4,Grammar4]],Grammara4),convert_to_grammar_part11(Grammar5,Grammar6,Grammar3,_EndGrammar1,_EndGrammar2,Grammara4,Grammara2,_EndGrammara1,_EndGrammara2),!.
convert_to_grammar_part11(Grammar1,Grammar2,Grammar3,_EndGrammar1,_EndGrammar2,Grammara2,Grammara3,_EndGrammara1,_EndGrammara2) :-get_lang_word("v",Dbw_v),get_lang_word("n",Dbw_n),get_lang_word("vgp1",Dbw_vgp1),get_lang_word("vgp2",Dbw_vgp2),Grammar1=[Grammar4|Grammar5],(Grammar4=[[Dbw_n,Name],Variables1,"->",Body1]->true;(Grammar4=[[Dbw_n,Name],"->",Body1],Variables1=[])),%%((maplist(no_calls,Body1))-> %% this is a base case%%append([[v,vgp],[v,vgp]],Variables1,Variables2);append([[Dbw_v,Dbw_vgp1],[Dbw_v,Dbw_vgp2]],Variables1,Variables3)%%),member(Item1,Body1),call_or_terminal(Item1),%% If not, operator expected.
convert_to_lp_pipe([Dbw_v,A],[Dbw_v,A]) :-  get_lang_word("v",Dbw_v), !.convert_to_lp_pipe(Value1A,Value1A) :- foldr(append,[Value1A],[],_).
convert_to_lp_pipe(empty2,empty2) :- !.
cos_or_sin(cos).
cos_or_sin(sin).
count_call_or_terminal([Item|Items],N1,N2,I1,I2) :-(call_or_terminal(Item)->(N3 is N1+1,append(I1,[Item],I3));N3 is N1,I3=I1),count_call_or_terminal(Items,N3,N2,I3,I2),!.
course_and_essay_topic2([["Fundamentals of Pedagogy and Pedagogy Indicators"],["Two Uses","X","Y","Breathsonings","Rebreathsonings","Room","Part of Room","Direction","Time to Prepare","Time to Do","Time to Finish","Professor Algorithm","God Algorithm","Marking Scheme - Humanities and Science Marking Scheme - Creative Arts","Higher Grades","Fewer Stillbirths","A Greater Number Of Successful Job Applications"]]).
course_and_essay_topic2([["Creating and Helping Pedagogues"],["Accreditation","Protectedness","Areas of Study to Create a Pedagogue","Create a pedagogy helper for the student","Finding out about the student as a Pedagogy Helper","Daily Professional Requirement of the Pedagogy Helper","Preparing the student to write each breasoning","Pedagogy Helper - Write on Breasoning - Politics","Pedagogy Helper - Write on Breasoning - Philosophy","Pedagogy Helper - Write on Breasoning - Computer Science","Unification to Become Pedagogy Helper","Practicum","Breason out Arguments Twice When in Large Class","Instructions for using Recordings and Lecturer in Computer Science Recordings","Lecturer","Daily Regimen","Delegate Workloads"]]).
course_and_essay_topic2([["Fundamentals of Meditation and Meditation Indicators"],["Children/H1/Earning Jobs/Protection in Jobs Heads of State","Lucian Mantra (Pure Form)","Lucian Mantra (Sun Safety)","Maharishi Sutra","Meditation Teacher Sutra Moving Appearances Purusha","Upasana Sutra","Yellow God","Green Sutra","Blue Nature","Appearances","Pranayama","Soma","Hours Prayer","50 Breasonings Per Utterance","Lower Risk of Cancer and Other Diseases In Workers and Broadcasters","Decreased Stress","Increased Blood Flow","Increased Brain Potential"]]).
course_and_essay_topic2([["Medicine"],["Doctor Sutra","Meditation","Protector from Headache in Meditation Currant Bun","Meditation","Panic attack prevented by deep breathing and sutra","Family Medicine","Help ensure successful conception and prevent miscarriage","Pedagogy","Lucianic Pedagogical Medicine","Pedagogy Grades/Failure","Pedagogy Course Plan","Get in Touch with God about Breasonings Details to see High Quality Imagery and Earn H1 250 Breasonings","Preventing Sales from Being Dangerous","Perpetual University Short Courses","Apple Meditation for Successful Relationship","Miscellaneous","4 Glasses of Water and Exercise 45 Minutes Before Breakfast","Go to Bed at 9:30 PM","Yoga","Yoga Surya Namaskara and Yoga Asanas","Prevent Headaches on Train and a Bent Spine","Brain","Brain","Brain II","Maintain Dry Eyes","Avoid Diseased People","Fewer Mental Breakdowns (Schizophrenia)","Less Depression","Honey Pot Prayer for No Headaches in Cars, Trains and Walks","Quantum Box/Prayer","Nut and Bolt","Head of State Head Ache Prevention","Daily Regimen","Laughter for Depression","Heart","Contagious Diseases","Berocca Prevents Colds and Flu","Food","Grains/Nuts/Fruits/Vegetables","Sit Properly at Table During Meals"]]).
cp_since_findall_start21(List1,Cp1,N,Cp2) :-member([B,N|Cp1],List1),%((Cp1=[_,_,_,["returns to",_]|_])->%cp_since_findall_start21(List1,Cp1,B,Cp2);Cp2=[B,N|Cp1],!.
cp_since_findall_start21(List1,Cp1,N,Cp2) :-member([B,N|Cp3],List1),not(Cp1=Cp3),cp_since_findall_start21(List1,Cp1,B,Cp2),!.
cp_since_findall_start21(List1,Cp1,N,Cp2) :-member([N,B|Cp1],List1),%((Cp1=[_,_,_,["returns to",_]|_])->%fail%cp_since_findall_start21(List1,Cp1,B,Cp2)%;Cp2=[N,B|Cp1],!.
create_blocks1(Blocks,X,Y,Matrix2,Matrix3) :- repeat, random(X2),X1 is 1+ceiling((X-2)*X2), random(Y2),Y1 is ceiling(Y*Y2), not(member([X1,Y1,*],Matrix2)), delete(Matrix2,[X1,Y1,_],Matrix4), append(Matrix4,[[X1,Y1,*]],Matrix5), Blocks1 is Blocks-1, create_blocks1(Blocks1,X,Y,Matrix5,Matrix3),!.
ctobr1([C|Cs]) :-ctobr(C),writeln(''),ctobr1(Cs).
ctobr1([]) :- !.
ctt2([[N,Word]|Words],Translation1,Translation2,List,List2,List4,List5,FromLang,ToLang,COOWithoutLangPairs) :-tryoutputs0([[Word,_]],COOWithoutLangPairs,[],COO2),%%writeln([tryoutputs0([[word,_]],cOOWithoutLangPairs,[],cOO2),tryoutputs0([[Word,_]],COOWithoutLangPairs,[],COO2)]),sort(COO2,COO4),prolog_edit:open_grammar_editor(Word,FromLang,ToLang,List,List4,String4,N,COO4),/**ctt-orig1-orig2.txt[[[en,fr],['How do you do?','How are you?']]...] 2nd item is correct back-translation with cult custo1 o2***ctt-orig-tran.txt[[[en,fr],['How are you?','Comment allez-vous?']]...]o2 l*****/(String4=[BT,Translation4]->true;String4=[[BT,Translation4]]), %% s4=[o2 l]append(Translation1,[[N,Translation4]],Translation3), %% String4=[o2 l]2%% *********** don't add if ''String5=[Word,BT],tryoutputs1(String5,List,List621), %% want [o1 o2]1%%List62=[[FromLang],[ToLang],List621],String6=[BT,Translation4],tryoutputs11(String6,List4,List611), %% want [o2 l]1%%List61=[[FromLang],[ToLang],List611],ctt2(Words,Translation3,Translation2,List621,List2,List611,List5,FromLang,ToLang,COOWithoutLangPairs),!.
culture(different).
curly_square({C}, L) :- once(conjunction_list(C, L)).
currentDate(Today) :-    get_time(Stamp),    stamp_date_time(Stamp,DateTime,local),    date_time_value(date,DateTime,Today).
cut2(-aleph,-m) :- !.
cut2(X,X) :- !.% 11.    I prepared to sum the two numbers.  I did this by observing an object travel along a finite path in the computer simulation to me.  First, I tied a knot in the first quipu string.  Second, I tied a knot in the second quipu string.  Third, I tied a knot in the third quipu string at the sum of the distances between the starts of the strings and the knots.  In this way, I prepared to sum the two numbers by observing an object travel along a finite path in the computer simulation to me.
cut2(aleph,n) :- !.
cut_into_equals_segments(L,TL11,TL13,TL12) :- TL11=[TL14|TL15], cut_into_equals_segments2(L,TL14,[],TL16), append(TL13,TL16,TL17), cut_into_equals_segments(L,TL15,TL17,TL12).
cut_into_equals_segments2(L,TL14,TL15,TL16) :- length(A,L), append(A,B,TL14), append(TL15,[A],TL17), cut_into_equals_segments2(L,B,TL17,TL16).
cycle2(Noncycles, Tree,Deps1,Deps2) :- Noncycles=[A|B], cycle1(A,Tree,Deps1,Deps3), (member(A,Deps3)->Deps3=Deps31; append(Deps3,[A],Deps31)), cycle2(B, Tree,Deps31,Deps2).test(N) :-  tests(Tests), member([N,Tree,Ans],Tests), find_deps(0,Tree,Deps), (Deps=Ans->S=success;S=fail), %nl,writeln1([N,S,"\n",result,Deps,"\n",answer,Ans]),!.tests([ [1,[[0,[]]],   [0] ], [2,[[0, [0]]],   [0] ], [3, [["yellow",["red","blue"]],["red",[]],["blue",[]],[0,["yellow","green"]],["green",["purple"]],["purple",[]]],["red", "blue", "yellow", "purple", "green", 0]  ], [4,[[0,["red"]],["red",[0]]],[[loop1, [0, "red"]]]], [5,[["yellow",["red","blue"]],["red",[]],["blue",[]],[0,["yellow","green"]],["green",["purple"]],["purple",[0]]], ["red","blue","yellow",[loop1,[0,"purple","green"]]]],  [6,[[0,["red","blue"]],["red",[0]],["blue",[0]]],[[loop1, [0,"red","blue"]]]], [7,[[0,["red","blue"]],["red",[0]],["blue",[]]],["blue", [loop1, [0, "red"]]]], [8,[[0,["red","blue"]],["red",["orange"]],["orange",[0]],["blue",[]]], ["blue", [loop1, [0, "orange", "red"]]]], [9,[[0, [1]], [1, [3, 4]], [2, []], [3, [2]], [4, [2, 6, 7]], [5, []], [6, [5, 8, 9, 10, 11, 24]], [7, [6, 7, 8, 9, 10, 11]], [8, [16, 17]], [9, [13, 14]], [10, [19, 20]], [11, [3, 4]], [12, []], [13, [12, 21, 22]], [14, [13, 14]], [15, []], [16, [15, 23]], [17, [16, 17]], [18, []], [19, [18, 21, 22]], [20, [19, 20]], [21, [24]], [22, [24]], [23, [24]], [24, []]],[2,3,5,15,24,23,16,17,8,12,21,22,13,14,9,18,19,20,10,[loop1,[7,4,11,6]],1,0]],[10,[[0, [6, 7]], [6, []], [7, [6, 7]]],[6,7,0]],[11,[[0, [6, 7]], [6, []], [7, [6, 7,0]]],[6, [loop1, [0, 7]]]],[12,[[0, [6, 7]], [6, []], [7, [8, 7,0]],[8,[6]]],[6,8, [loop1, [0, 7]]]]]).tests :- tests(Tests), findall1(_,( member([N,Tree,Ans],Tests), find_deps(0,Tree,Deps), (Deps=Ans->S=success;S=fail), nl, writeln1([N,S,"\n",result,Deps,"\n",answer,Ans])),_),!.
d(Pred_id,D0,Level,Predicate_number,Line_number_b,Query,Vars1,Vars2,All_predicate_numbers,Line,Choice_point_trail10,Globals33,Functions,Result1, Result2,Globals2,Choice_point_trail3,CP_Vars10,CP_Vars2) :-%writeln1(d(Pred_id,D0,Level,Predicate_number,Line_number_b,Query,Vars1,Vars2,All_predicate_numbers,Line,Choice_point_trail1,Globals3,Functions,Result1, Result2,Globals2,Choice_point_trail3,CP_Vars1,CP_Vars2)),%trace,(false% too slow%last_call_optimisation(Globals3,Choice_point_trail10,Choice_point_trail1,Predicate_number,Line_number_b,Functions,CP_Vars10,CP_Vars1,Globals33,Globals3)->true%writeln1(last_call_optimisation(Globals3,Choice_point_trail10,Choice_point_trail1,Predicate_number,Line_number_b,Functions,CP_Vars10,CP_Vars1));(Choice_point_trail10=Choice_point_trail1,CP_Vars1=CP_Vars10,Globals33=Globals3)),%(%append(D,All_predicate_numbers,All_predicate_numbers3),%All_predicate_numbers3=% * vars1,3Level2 is Level+1,%writeln1(append_cp(Choice_point_trail1,[[Pred_id,Level,Predicate_number,["returns to",Line_number_b],"predicate",Query,%Vars2,All_predicate_numbers]],Choice_point_trail11)%),%Line=[Function,Arguments],get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,%get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,%get_lang_word("call",Dbw_call1),Dbw_call1=Dbw_call,%find_pred_sm(Reserved_words1),Line=Query1,        %((Query1=[[Dbw_n,Dbw_call],[Function,Arguments]]        %)->true;%(Query1=[Function,Arguments]%)%),        ((Function=[Dbw_v,Function2],        not(reserved_word2(Function2)))->        (append([Function],Arguments,Arguments1),        substitutevarsA1(Arguments1,Vars1,[],Vars3,[],FirstArgs),                append(Globals3,[[[firstargs_uv2,Pred_id],FirstArgs]],Globals31),        del_append(Globals31,[[[vars1,Pred_id],Vars1]],Globals32),        Vars3=[Function1|Vars31],        Query2=[Function1,Vars31],                pred_numbers(Pred_numbers),        length(Arguments,Arity1),        %trace,        member([Function1,Arity1,Pred_numbers1],Pred_numbers),        findall([All_predicate_numbers0,"prev_pred_id",Pred_id],member(All_predicate_numbers0,Pred_numbers1),D)%All_predicate_numbers01=[[All_predicate_numbers1,"prev_pred_id",Prev_pred_id]|All_predicate_numbers2]                );        (        substitutevarsA1(Arguments,Vars1,[],Vars3,[],FirstArgs),                append(Globals3,[[[firstargs_uv2,Pred_id],FirstArgs]],Globals32),        Query2=[Function,Vars3],        findall([All_predicate_numbers0,"prev_pred_id",Pred_id],member(All_predicate_numbers0,D0),D)                )                                ),        %interpret2(Query2,Functions0,Functions0,Result1), /*updatevars2(FirstArgs,Result1,[],Vars5),updatevars3(Vars1,Vars5,Vars6),*/D=[All_predicate_numbers1|All_predicate_numbers2],All_predicate_numbers1=[All_predicate_numbers11,"prev_pred_id",Prev_pred_id],append_cp(Choice_point_trail1,[[Pred_id,Level,Predicate_number,["returns to",Line_number_b,"pred_id",Pred_id],"predicate",Query,Vars1,All_predicate_numbers%D]],Choice_point_trail11,CP_Vars1,CP_Vars3),%% **%(Pred_id=3->writeln(here1);true),%trace,%cut_cps_if_necessary(Prev_pred_id,Choice_point_trail11,Choice_point_trail12,CP_Vars3,CP_Vars32,All_predicate_numbers11,Globals32),Choice_point_trail11=Choice_point_trail12,CP_Vars3=CP_Vars32,%notrace,%writeln1(cut_cps_if_necessary(Prev_pred_id,Choice_point_trail11,Choice_point_trail12,CP_Vars3,CP_Vars32,All_predicate_numbers11,Globals32)),ssi1([["prev_pred_id",Prev_pred_id],Level2,All_predicate_numbers11,-1,"predicate",Query2,Vars1,All_predicate_numbers2], _End_result2, %don't need Functions,Vars2,Result1, Result2,  % don't needGlobals32,Globals2,Choice_point_trail12,Choice_point_trail3,CP_Vars32,CP_Vars2)% append(Result3,[End_result],Result2) .
data(Value1,Value2,Value3) :-Value1=[""|Value5],append(Value2,[""],Value7),data(Value5,Value7,Value3),!.
data(Value1,Value2,Value3) :-Value1=[Value4=Value4a],data(Value4,[],Value6),data(Value4a,[],Value6a),append(Value2,[Value6=Value6a],Value3).
data(Value1,Value2,Value3) :-Value1=[Value4|Value5],data(Value4,[],Value6),append(Value2,Value6,Value7),data(Value5,Value7,Value3),!.
data(Value1,Value2,Value3) :-Value1=[[Value4|Value4a]|Value5],data([Value4|Value4a],[],Value6),append(Value2,[Value6],Value7),data(Value5,Value7,Value3),!.
data(Value1,Value2,Value3) :-Value1=[[]|Value5],append(Value2,[[]],Value7),data(Value5,Value7,Value3),!.
data(Value1,Value2,Value3) :-to_lang2(To_lang),from_lang2(From_lang),get_lang_word3(n,"en",From_lang,N),Value1=([N,Value4]=Value4a),get_lang_word3(N,From_lang,To_lang,Value6b),data1(Value4,Value6),(Value4a=[_|_]->data(Value4a,[],Value6a);data(Value4a,[],[Value6a])),append(Value2,[[Value6b,Value6]=Value6a],Value3),!.
data(Value1,Value2,Value3) :-to_lang2(To_lang),from_lang2(From_lang),get_lang_word3(n,"en",From_lang,N),Value1=[[N,Value4]=Value4a],get_lang_word3(N,From_lang,To_lang,Value6b),data1(Value4,Value6),(Value4a=[_|_]->data(Value4a,[],Value6a);data(Value4a,[],[Value6a])),append(Value2,[[Value6b,Value6]=Value6a],Value3),!.
data(Value1,Value2,Value3) :-to_lang2(To_lang),from_lang2(From_lang),get_lang_word3(output,"en",From_lang,O),Value1=O,get_lang_word3(O,From_lang,To_lang,Value6b),%data1(Value4,Value6),append(Value2,[Value6b],Value3),!.
data(Value1,Value2,Value3) :-to_lang2(To_lang),from_lang2(From_lang),get_lang_word3(v,"en",From_lang,V),Value1=([V,Value4]=Value4a),get_lang_word3(V,From_lang,To_lang,Value6b),data1(Value4,Value6),(Value4a=[_|_]->data(Value4a,[],Value6a);data(Value4a,[],[Value6a])),append(Value2,[[Value6b,Value6]=Value6a],Value3),!.
data(Value1,Value2,Value3) :-to_lang2(To_lang),from_lang2(From_lang),get_lang_word3(v,"en",From_lang,V),Value1=[[V,Value4]=Value4a],get_lang_word3(V,From_lang,To_lang,Value6b),data1(Value4,Value6),(Value4a=[_|_]->data(Value4a,[],Value6a);data(Value4a,[],[Value6a])),append(Value2,[[Value6b,Value6]=Value6a],Value3),!.
data(Value1,Value2,Value3) :-%trace,to_lang2(To_lang),from_lang2(From_lang),get_lang_word3(v,"en",From_lang,V),Value1=[V,Value4],get_lang_word3(V,From_lang,To_lang,Value6b),data(Value4,_,Value6),(var(Value6)->(Value6c=Value6,Value6c1=[]);Value6=[Value6c|Value6c1]),foldr(append,[[Value6b],[Value6c],Value6c1],Value6d),append(Value2,Value6d,Value3),!.
data([Value1],Value2,Value3) :- var(Value1),append(Value2,[Value1],Value3),!.
data1(Value1a,Value1b%Value1a,Value2,Value3) :-from_lang2(From_lang),to_lang2(To_lang),%trace,((atom(Value1a)->true;(string(Value1a)->true;(number(Value1a))))->(translate2(Value1a,From_lang,To_lang,Value1b))), %% translate1a,2%append(Value2,[Value1b],Value3))),!.
data2at1(Line,Code) :- retractall(var_at(_)), assertz(var_at(1)), Line=[Line1,Result1], string_strings(Line1,Line2), string_strings(Result1,Result2),%trace, findall(N,(member(L2,Result2),get_n_item(Line2,L2,N)),Ns), sort(Ns,Ns1), append([Min],_,Ns1), append(_,[Max],Ns1), Min1 is Min-1, Max1 is Max+1, %trace, get_item_n(Line2,Min1,G1), get_item_n(Line2,Max1,G2), GGs=[G1,G2], get_var_at(V), get_var_at(V2),  %length(Result2,L), numbers(2,1,[],Ls), %trace, findall([[n,get_item_n],[V2,L1,V1]],(member(L1,Ls),get_var_at(V1)),Gs), findall([GGG,GGGG],(member(L1,Ls),get_item_n(GGs,L1,GGG),get_item_n(Gs,L1,[[n,get_item_n],[_,_,GGGG]])),G1s),%trace, data2at21(Line2,Result2,V,Gs,Code3,G1s,V3), Code=[[[n,a],[V,V2,V3],":-",Code3]].
data2at2(Line,Result,V,Dir,Code1,Code2,G1s,V3) :- append_line(Line,Code,V,V1,Dir,Results,Spaces,-,V3), /*findall(Results3,(find_combos(Results,Results,[],Results3)%,flatten(Results1,Results3) ),Results2), */ %sort(Results21,Results2), %trace, flatten(Results,Results2), data2at32(Result,Results2,%Results2, Code,Spaces,V1,Code1,Code2,G1s).
data2at2(Line,Result,V,Dir,Code1,Code2,G1s,V3) :- append_line(Line,Code,V,V1,Dir,Results,Spaces,G1s,V3), /*findall(Results3,(find_combos(Results,Results,[],Results3)%,flatten(Results1,Results3) ),Results2), */ %sort(Results21,Results2), %trace, flatten(Results,Results2), data2at31(Result,Results2,%Results2, Code,Spaces,V1,Code1,Code2,V3).
data2at21(Line,Result,V,Code1,Code2,G1s,V3) :- data2at2(Line,Result,V,l,Code1,Code2,G1s,V3).
data2at21(Line,Result,V,Code1,Code2,G1s,V3) :- reverse(Line,Line1), data2at2(Line1,Result,V,r,Code1,Code2,G1s,V3).
data2at31(Result,Results2,Code,_Spaces,_V1,Code1,Code2,V3) :-%writeln(member(Result,Results2)), %member(Result,Results2), Result=Results2, %trace, foldr(append,[Code1,Code],Code2).
data2at32(Result,Results2,Code,Spaces,V1,Code1,Code2,G1s) :-  not(member(Result,Results2)), member(Space,Spaces), foldr(append,[Code1,Code],Code3), data2at21(Space,Result,V1,Code3,Code2,G1s,V3).
data_symbol("|").
data_symbol(=).
data_symbol(A) :- comparisonoperator(A).
data_symbol(A) :- operator(A).
data_to_alg1(Data1,Vars1,Vars2,Alg1,Alg2) :- Data1=[Data2|Data3], (false->%is_list(Data2)->%List=true;List=false), (data_to_alg1(Data2,Vars1,Vars3,[],Alg4), Alg5=Alg4,append(Alg1,[Alg5],Alg3)); (append(Vars1,[[[v,Data2],Data2]],Vars3), append(Alg1,[[v,Data2]],Alg3))), data_to_alg1(Data3,Vars3,Vars2,Alg3,Alg2),!.
data_to_alg1(Data1,Vars1,Vars2,Alg1,Alg2) :- Data1=[Data2|Data3], (is_list(Data2)->%List=true;List=false), (data_to_alg1(Data2,Vars1,Vars3,[],Alg4), Alg5=Alg4,append(Alg1,[Alg5],Alg3)); (append(Vars1,[[[v,Data2],Data2]],Vars3), append(Alg1,[[v,Data2]],Alg3))), data_to_alg1(Data3,Vars3,Vars2,Alg3,Alg2),!.
data_to_alg4(Data1,Vars1,Vars2,Alg1,Alg2) :- %Data1=[Data2|Data3], Data1=..[:, Data2, Data3], ((is_list(Data2)->true;compound(Data2))->%List=true;List=false), (data_to_alg4(Data2,Vars1,Vars3,[],Alg4), Alg5=Alg4,append(Alg1,[Alg5],Alg3)); (append(Vars1,[[[v,Data2],Data2]],Vars3), (Alg1=[]->Alg3=[[v,Data2]]; Alg3=..[:,Alg1,[v,Data2]]) %append(Alg1,[[v,Data2]],Alg3) )), data_to_alg4(Data3,Vars3,Vars2,Alg3,Alg2),!.
data_to_alg4(Data1,Vars1,Vars2,Alg1,Alg2) :- Data1=[Data2|Data3], ((is_list(Data2)->true;compound(Data2))->%List=true;List=false), (data_to_alg4(Data2,Vars1,Vars3,[],Alg4), Alg5=Alg4,append(Alg1,[Alg5],Alg3)); (append(Vars1,[[[v,Data2],Data2]],Vars3), append(Alg1,[[v,Data2]],Alg3))), data_to_alg4(Data3,Vars3,Vars2,Alg3,Alg2),!.
data_to_alg4(Data1,Vars1,Vars3,Alg1,Alg3) :- %Data1=[Data2|Data3], ((atom(Data1)->%true;compound(Data2))->%List=true;List=false), (%data_to_alg4(Data2,Vars1,Vars3,[],Alg4), %Alg5=Alg4,append(Alg1,[Alg5],Alg3)); (append(Vars1,[[[v,Data1],Data1]],Vars3), append(Alg1,[[v,Data1]],Alg3))))),!.
data_to_alg41(Data1,Vars1,Vars2,Alg1,Alg2) :- %Data1=[Data2|Data3], Data1=..[:, Data2, Data3], ((is_list(Data2)->true;compound(Data2))->%List=true;List=false), (data_to_alg41(Data2,Vars1,Vars3,[],Alg4), Alg5=Alg4,append(Alg1,[Alg5],Alg3)); (append(Vars1,[[[v,Data2],Data2]],Vars3), %append(Alg1,[Data2],Alg3) (Alg1=[]->Alg3=[Data2]; Alg3=..[:,Alg1,Data2]))), data_to_alg41(Data3,Vars3,Vars2,Alg3,Alg2),!.
data_to_alg41(Data1,Vars1,Vars2,Alg1,Alg2) :- Data1=[Data2|Data3], ((is_list(Data2)->true;compound(Data2))->%List=true;List=false), (data_to_alg41(Data2,Vars1,Vars3,[],Alg4), Alg5=Alg4,append(Alg1,[Alg5],Alg3)); (append(Vars1,[[[v,Data2],Data2]],Vars3), append(Alg1,[Data2],Alg3))), data_to_alg41(Data3,Vars3,Vars2,Alg3,Alg2),!.
data_to_alg41(Data1,Vars1,Vars3,Alg1,Alg3) :- %Data1=[Data2|Data3], ((atom(Data1)->%true;compound(Data2))->%List=true;List=false), (%data_to_alg4(Data2,Vars1,Vars3,[],Alg4), %Alg5=Alg4,append(Alg1,[Alg5],Alg3)); (append(Vars1,[[[v,Data1],Data1]],Vars3), append(Alg1,[Data1],Alg3))))),!.
data_to_types(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("number",Dbw_number),number(Data),append(Types1,[[T,Dbw_number]],Types2),!.
data_to_types(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("string",Dbw_string),string(Data),append(Types1,[[T,Dbw_string]],Types2),!.
data_to_types(Data1,Types1,Types2) :-Data1=[Data2|Data3],data_to_types(Data2,Types1,Types3),data_to_types(Data3,Types3,Types2),!.
data_to_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2]],data_to_types(Data2,[],Types4),Types5=[[[T,Dbw_brackets],Types4]],append_list([Types1,Types5],Types2),!.
data_to_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2]],data_to_types(Data2,[],Types4),Types5=[[[T,Dbw_brackets],Types4]],append_list([Types1,Types5],Types2),!.data_to_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2]|Data4],data_to_types(Data2,[],Types4),Types5=[[[T,Dbw_brackets],Types4]],data_to_types(Data4,[],Types6),append_list([Types1,Types5,Types6],Types2),!.
data_to_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2]|Data4],data_to_types(Data2,[],Types4),Types5=[[[T,Dbw_brackets],Types4]],data_to_types(Data4,[],Types6),append_list([Types1,Types5,Types6],Types2),!.
data_to_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[Data2|Data3]|Data4],data_to_types(Data2,[],Types3),data_to_types(Data3,Types3,Types4),Types5=[[[T,Dbw_brackets],Types4]],data_to_types(Data4,[],Types6),append_list([Types1,Types5,Types6],Types2),!.
data_to_types2(Data1,Types1,Types7,VD1,VD2,_) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),%trace,Data1=[[Data2|Data3]|Data4],%not(single_item(Data2)),data_to_types2(Data2,[],Types3,VD1,VD3,true),data_to_types2(Data3,Types3,Types4,VD3,VD4,false),Types5=[[T,Dbw_brackets],[Types4]],data_to_types2(Data4,[],Types6,VD4,VD2,true),foldr(append,[Types1,Types5,Types6],Types2),Types7=[[T,Dbw_brackets],Types2],!.
data_to_types21(Data,Types1,Types2,VD1,VD2) :-%trace,get_lang_word("t",T),get_lang_word("string",Dbw_string),string(Data),(member([Dbw_string,Data,N],VD1)->VD2=VD1;(get_data_n(N),append(VD1,[[Dbw_string,Data,N]],VD2))),append(Types1,[T,Dbw_string,N],Types2),!.
data_to_types21(Data,Types1,Types2,VD1,VD2) :-get_lang_word("t",T),get_lang_word("atom",Dbw_atom),atom(Data),(member([Dbw_atom,Data,N],VD1)->VD2=VD1;(get_data_n(N),append(VD1,[[Dbw_atom,Data,N]],VD2))),append(Types1,[T,Dbw_atom,N],Types2),!.
data_to_types221(Data,Types1,Types2,VD1,VD2) :-Data=[Data1|Data2],pft_expand_types(Data1,[],Types3,VD1,VD3),append(Types1,[Types3],Types4),data_to_types221(Data2,Types4,Types2,VD3,VD2).
daysbspeoplearmy(N1):-texttobr2,N2 is N1-1,daysbspeoplearmy(N2).
dbff(Columns1,Result,Formula1) :-dbff1(Columns1,Columns1,Result,Formula1).
dbff1(Columns1,Columns2,Result,Formula1) :-        member(Column,Columns1),        Column=[Name|_Rest],        delete(Columns2,Column,Columns3),Formula2=Name,        dbff2(Columns1,Columns3,Result,Formula2,Formula3),list(Formula3,Formula1).
dbff2(Columns1,Columns2,Result,Formula1,Formula2) :-member(Column,Columns2),Column=[Name|_Rest],delete(Columns2,Column,Columns3),appendlogic(Formula1,Name,Formula3),        dbff3(Columns1,Result,Formula3),dbff2(Columns1,Columns3,Result,Formula3,Formula2).
dbff2(_Columns1,[],_Result,Formula,Formula).
dbff3(Columns,Result1,Formula1) :-        member([Formula1|Result1],Columns).
dbff3(Columns1,Result1,[Formula1,and,Formula2]) :-        dbff3(Columns1,Result2,Formula1),        dbff3(Columns1,Result3,Formula2),        intersection1(Result2,Result3,[],Result1).
dbff3(Columns1,Result1,[Formula1,or,Formula2]) :-        dbff3(Columns1,Result2,Formula1),        dbff3(Columns1,Result3,Formula2),        union(Result2,Result3,Result1).
debug_types(Call,FunctionArguments1) :-(debug(on)->(writeln1([Call,FunctionArguments1]));true).
decision_tree(A,B) :-findall(C,(member([C|_D],A)),E),sort(E,K),findall([G,J],(member(G,K),findall(G,member(G,E),H),length(H,J)),L),findall([G,K1,P],(member([G,K1],L),findall(D,member([G|D],A),D2),decision_tree(D2,P)),B).
decision_tree_s21(A,B) :-findall(C1,(member([C|_D],A),(C=[poss,C2]->member(C1,C2);C1=C)),E),remove_dups(E,K),findall([G,J],(member(G,K),findall(G,member(G,E),H),length(H,J)),L),findall(GKP,(member([G,K1],L),findall(D,member([G|D],A),D2),decision_tree_s21(D2,P),((K1=1->true;length(P,1))->((P=[]->P1=P;[P1]=P),append([G],P1,GKP));foldr(append,[[G,[nd,%K1,P]]],GKP))),B),!.
decision_tree_s21([],[]):-!.
degree(-90).
delete1([A1|A2],A1,C,D):-delete1(A2,A1,C,D),!.delete1([A1|A2],B,C,D):-delete1(A2,B,[A1|C],D),!.
delete2(L1,I1,L2,L3) :- head(L1,I1),tail(L1,L5),delete2(L5,I1,L2,L3).
delete2(L1,I1,L2,L3) :- head(L1,I2),tail(L1,L5),not((=(I1,I2))),wrap(I2,I21),append(L2,I21,L6),delete2(L5,I1,L6,L3).
delete2([],_A,L,L).delete2(L1,I1,L2,L3) :- head(L1,I1),tail(L1,L5),delete2(L5,I1,L2,L3).
delete_all(G0,G1,G2) :-G0=[[String1,String2,_]|Strings2],delete(G1,[String1,String2],G3),delete_all(Strings2,G3,G2).
delete_double_newlines(D2,D5,D) :-D2=[D3|D4],append(D5,[D3],D6),delete_double_newlines(D4,D6,D),!.
delete_double_newlines(D2,D5,D) :-trace,D2=["\n","\n"|D4],append(D5,["\n"],D6),delete_double_newlines(D4,D6,D),!.
delete_double_newlines(D2,D5,D) :-trace,D2=["\n"|D4],append(D5,[],D6),delete_double_newlines(D4,D6,D),!.
delete_duplicate_clauses(List1,List2,List3) :-%trace, List1=[[[[n,N]|_Item1],_VT]|_List4],  get_curr_node(List1,N,Node,List11), get_nodes_to_replace(List11,Node,N2,N28,List41), %*findall(N1,member([[[n,N1]|Item1],_],List4),N2), delete_nodes(List41,N2,List5), %*delete(List4,[[[n,_]|Item1],_],List5), append_node(List2,Node,List6), %*(( %Item1=[])->append(List2,[[[[n,N]],VT]],List6); %append(List2,[[[[n,N]|Item1],VT]],List6)), findall([List7,L10],(member([List8,L10],List5),replace_pred_names2(List8,List7,N28,N)),List9), %trace, findall(List7,(member(List8%,L10] ,List6),replace_pred_names2(List8,List7,N28,N)),List12), delete_duplicate_clauses(List9,List12,List3),!.
delete_duplicate_clauses(List1,List2,List3) :-trace, List1=[[[[n,N]|Item1],_VT2]|_List4], findall(D1,(member(D1,List1),D1=[[[n,N]|Item1a],VTa]),Ns), findall([[[n,_]|Item1a],_VTa],(member(D1,List1),D1=[[[n,N]|Item1a],VTa]),Ns1), %Item1=[Vars1|Rest],length(Vars1,VL), %length(Vars2,VL),Item2=[Vars2|Rest],      findall(N4,(member(D1,Ns),D1=[[[n,N4]|Item1a],VTa]),NN),   findall([[[n,N4]|Item1],_VTa],(member(D1,List1),D1=[[[n,N4]|Item1],VTa],not(N=N4)),Ns5),%findall([[[n,N5]|Item1a],_VTa],(member(D1,List1),D1=[[[n,N5]|Item1a],VTa]),Ns5),%subtract(Ns1,Ns,A),((subtract(Ns,Ns5,[]),subtract(Ns5,Ns,[]))%trace,%length(NN,NNL),length(Ns1,NNL)))%maplist(=(_),NN)->(NN=[NN1|_],subtract(List1,Ns,List4),subtract(List4,Ns1,List5),findall(N1,member([[[n,N1]|Item1],_],List4),N2));(subtract(List1,[],List4),subtract(List4,[],List5),findall(N1,member([[[n,N1]|Item1],_],List4),N2),N2=[NN1|_])),%findall(N1,member([[[n,N1]|Item1],_],List4),N2),   %subtract(List4,[[[[n,_]|Item1],_]],List10), %findall(N3,member([[n,N1]|Item1],List4),N2),  %findall(A,(member(A1,List4), %subtract(List,[A1],L1),  %(A1=[[[n,A2]|Item1],A3]->  %findall(B,(member(B1,))) %[[[n,_]|Item1]|_]   findall([[[n,N3]],VTa],(member(D1,Ns),D1=[[[n,N3]|Item1a],VTa]),Ns3),  findall([[[n,N3]|Item1a],VTa],(member(D1,Ns),D1=[[[n,N3]|Item1a],VTa]),Ns4),  (( Item1=[])->append(List2,Ns3,List6); append(List2,Ns4,List6)), findall([List7,L10],(member([List8,L10],List5),replace_pred_names2(List8,List7,N2,NN1)),List9), delete_duplicate_clauses(List9,List6,List3),!.
delete_invisibles_etc(F,G) :-findall(J,(member(H,F),atom_string(H,J),not(J="."),not(J=".."),not(string_concat(".",_,J))),G),!.open_file_s(Path,File_term) :-phrase_from_file_s(string(File), Path),string_codes(File_string,File),term_to_atom(File_term,File_string),!.
delete_newlines_after_text(D2,D1,D) :-D2=[T,"\n"|D4],append(D5,B4,D4),append([B],_C4,B4),not(B="\n"),length(D5,L),numbers(L,1,[],Ns),findall("",member(_,Ns),D51),foldr(append,[D1,[T],D51],D6),delete_newlines_after_text(B4,D6,D),!.
delete_newlines_after_text(D2,D1,D) :-D2=[T|D4],%append(D5,B4,D4),%append([B],_C4,B4),%not(B="\n"),foldr(append,[D1,[T]],D6),delete_newlines_after_text(D4,D6,D),!./*delete_double_newlines([],D,D) :- !.
delete_newlines_after_text([A],B,C) :- append(B,[A],C),!.
delete_stwa(Instances, Term1, Term2) :-delete_sub_term_wa(Instances, Term1, Term2).
delete_sub_term_wa2([A|D],Find,B,[A1|C]):- (is_list(A)->delete_sub_term_wa2(A,Find,[],A1);A=A1), delete_sub_term_wa2(D,Find,B,C).
delete_sub_term_wa2([Find|D],Find,B,C):- delete_sub_term_wa2(D,Find,B,C),!.
delete_sub_term_with_address(Instances, Term1, Term2) :-delete_sub_term_wa(Instances, Term1, Term2).
delete_subterm_with_address(Instances, Term1, Term2) :-delete_sub_term_wa(Instances, Term1, Term2).
deletea2(L,M,M1):-head(L,H),tail(L,T),not((=(M,H))),deletea2(T,M,M1).
deletea2(L,M,T):-head(L,H),tail(L,T),=(M,H).
deletea2([],_L,_M1):-fail.
deleteduplicates(List1,List2,List3) :-        %%((not(List1=[])->List1=[[[Item1,Type1,Range1,ItemNumber1,Position1],[Item2,Type2,Range2,ItemNumber2,Position2]]|Rest],        delete(Rest,[[_Item12,Type1,Range1,ItemNumber3,Position1],[_Item22,Type2,Range2,ItemNumber4,Position2]],Rest2), %% does vv need deleting too vdelete(Rest2,[[_Item23,Type2,Range2,ItemNumber4,Position2],[_Item13,Type1,Range1,ItemNumber3,Position1]],Rest3),ItemNumber1=ItemNumber2,ItemNumber1=ItemNumber3,ItemNumber1=ItemNumber4,        append(List2,[[[Item1,Type1,Range1,ItemNumber1,Position1],[Item2,Type2,Range2,ItemNumber2,Position2]]],List4),        deleteduplicates(Rest3,List4,List3),%%);(%%writeln(here1),  %%      List3=[]))!.
deleteduplicates2(List1,List2,List3) :-List1=[Item|Rest1],delete(List2,Item,List5),deleteduplicates2(Rest1,List5,List3),!.
deps([T1|T2],As2,C) :- %[[T1],[T2]] new_num(C1), deps(T1,As1,C1), %curr(C1),C2 is C1+1, %(foldr(append,T2,T3)->true;[T3]=T2), deps1(T2,As,C1), foldr(append,[[[C,C1]],As1,As],As2).
deps([[N1,_,[[N2,_,T1],[N3,_,T2]]]],[[[N1,N2],[N1,N3]|A1]|A2]) :- deps([[N2,_,T1]],A1), deps([[N3,_,T2]],A2).
deps([[_,_,[]]],[]) :-!.deps([[N1,_,[[N2,_,T]]]],[[N1,N2]|A1]) :- deps([[N2,_,T]],A), (A=[[[_,_]|_]|_]->foldr(append,A,A1);A=A1).%,(forall(member([_,_],A))->).
deps([],[],_) :-!.deps(N,[]%[[C,-]],_C) :-single_item_ta(N),!.
deps1([T1|T2],As2,C) :- %[[T1],[T2]] %new_num(C1), deps(T1,As1,C), %curr(C1),C2 is C1+1, %(foldr(append,T2,T3)->true;[T3]=T2), deps1(T2,As,C), foldr(append,[%[[C,C1]], As1,As],As2).
deps1([],[],_) :- !.deps1(N,[]%[[C,-]],_C) :-single_item_ta(N),!.
depth_tree(_,_,[]) :- !.  new_num(Curr2) :-curr(Curr1),retractall(curr(_)),Curr2 is Curr1+1,assertz(curr(Curr2)).
det(number,a).
det(string,a).
determiner("down")  --> "a".
determiner("down") --> "an".
determiner(_)-->[a].
dfs(C1,D1,_Sent,DB,DB,N,Chain1,Chain2) :-max_depth(N0),N<N0,%word_nums(WN),%member([C,C1],WN),member([D,D1],WN),symmetrical_member([C1,D1,E],DB),%not(member(Sent,E)),member([_,E1],E),not(member(E1,Chain1)),append(Chain1,[E1],%[[D,E]],Chain2).
dfs(C51,D,Sent,DB,DB3,N,Chain1,Chain2) :-max_depth(N0),N<N0,%word_nums(WN),%member([C,C51],WN),findall([C1,E],(symmetrical_member([C51,C1,E],DB)),C2),delete(DB,[C51,_,_],DB1),delete(DB1,[_,C51,_],DB2),%->C11=C1;%(member([C1,C51,E],DB),C11=C1))),%not(member(Sent,E)),(C2=[]->fail;%delete_last(Chain1,Chain2);(member([C3,C31],C2),%|C4],N1 is N+1,member([_,C32],C31),not(member(C32,Chain1)),%member([C3,C32],WN),append(Chain1,[%[C32,C32],Chain3),dfs(C3,D,Sent,DB2,DB3,N1,Chain3,Chain2))).
dfs1(C2,D,Sent,DB,DB1,N,Chain1,Chain2) :-%word_nums(WN),%member([C2,C51],WN),member([C3,C31],C2),%|C4],N1 is N+1,member([_,C32],C31),append(Chain1,[C32],%,C31]],Chain3),dfs(C3,D,Sent,DB,DB1,N1,Chain3,Chain2).
dfs1(_,_D,_Sent,_DB,_,6,Chain,Chain) :- fail, !.
dfs_in_order(null,Items2,Items2) :- !.
dfs_post_order(Curr,Items_all,Items2,Items31,Items2_all1,Items3_all1) :- member([Curr,Items],Items_all), %delete(Items_all,[Curr,Items],Items_all1), Items_all=Items_all1, dfs_post_order2(Curr,Items,Items_all1,[] ,Items6,Items2_all1,Items6_all1),  %trace, (member(Curr,Items6_all1)-> (Items6=Items3, Items6_all1=Items3_all1); (%trace, append(Items6,[Curr],Items3), append(Items6_all1,[Curr],Items3_all1))),  %trace, findall1(C,(member(C,Items3),not(C=[loop1,_])),A1), findall1([loop1,A],member([loop1,A],Items3),A2), append(A1,A2,A3), append(Items2,A3,Items31), !.
dfs_post_order([],_,Items2,Items2,Items2_all1,Items2_all1) :- !.
dfs_post_order(null,Items2,Items2) :- !.
dfs_post_order2(Curr,Item7,Items_all,Items2,Items8,Items2_all1,Items8_all1) :- Item7=[Item1|Items3], %if item1 has been covered, end (member(Item1,Items2_all1)-> (Items2=Items8, Items2_all1=Items8_all1); (%trace, (contains_loop_dfs1(Curr,Item1,Items_all,[%Item1%Curr, %cycle(Item1, Cycles,Noncycles) :- ],Items41,[],Not_on_line) %,writeln([not_on_line,Not_on_line]) )-> (append(Items3,Not_on_line,Items31), %if loop item %dfs_post_order(Item1,Items_all,[],Items41,Items2_all1,Items4_all1), length(Items41,L), (L=<1->append(Items2,Items41,Items4); ( %trace,  sub_term_wa([loop1,_],Items2,A), findall1(C,(member(C,A),C=[_Add,[loop1,B]],not(intersection(Items41,B)=[])),D),  findall1(F,member([_,[_,F]],D),G), append([Items41],G,J), foldr(append,J,J1), sort(J1,H), findall1(K,member([K,_],D),M), delete_sub_term_wa(M, Items2, E),  append(E,[[loop1,H ]],Items4)  %*/ )),  %append(Items2,[[loop1,Items41 %]],Items4) %), append(Items2_all1,Items41,Items43_all1 ), sort(Items43_all1,Items4_all1) ); %if non loop item (Items3=Items31, dfs_post_order(Item1,Items_all,Items2,Items4,Items2_all1,Items4_all1))), dfs_post_order2(Curr,Items31,Items_all,Items4,Items8,Items4_all1,Items8_all1)),!.
dfs_post_order2(_,_,[],Items,Items,Items_all1,Items_all1) :- !.
dfs_pre_order(null,Items2,Items2) :- !.
diff_combos(Before,After,Combos4) :- find_insertions_and_deletions(Before,After,Insertions,Deletions), replace11(After,Insertions,[],After2), replace12(Before,After2,Deletions,[],After3), findall1(Combos,find_combos1(Insertions,Deletions,Combos),Combos2), findall1(Combos1,(member(Combos3,Combos2), find_combos3(After3,Combos3,[],Combos1)),Combos41), sort(Combos41,Combos4),!.
diff_gitl(After3,HTML3) :-diff1_gitl(After3,HTML2),string_concat("<b>Diff output</b><br><b>Key</b><table bgcolor=\"green\"><tr><td>Insertion</td></tr></table><br><table bgcolor=\"red\"><tr><td>Deletion</td></tr></table><br>",HTML2,HTML3).
diff_group_combos(Before,After,Combos4) :- %length(Before,BL),length(After,AL), %((A>10->true;B>10)->fail;true),/* sort(After0,After01),sub* retractall(term_to_numbers2(_)), assertz(term_to_numbers2(-1000000)), term_to_numbers(term_to_numbers2,Old_S1,[],Corr,[],N1), term_to_numbers(term_to_numbers1,S1,Corr,Corr2,[],N2), diff_group_combos(N1,N2,C), findall1(T,(member(C1,C),numbers_to_term(C1,Corr2,[],T0),*/ retractall(changes(_)), assertz(changes(1)), %differentiate(Before,Before0), %differentiate(After,After0), %find_insertions_and_deletions(Before,After,Insertions,Deletions), %trace, diff(Before,After,_,_,[],[],After31),  %replace11(After,Insertions,[],After2), %replace12(Before,After2,Deletions,[],After31), join_and_change(After31,[],After3), %trace, %save_diff_html(After3), fail_if_greater_than_n_changes(After3), %length(After3,L) findall1([[i,_],I],(member([[i,_NA],I],After3)%,not(number(NA)) ),Insertions1), findall1([[d,_],D],(member([[d,_NB],D],After3)%,not(number(NB)) ),Deletions1), %findall1([c,C],(member([[c,_],C],After3)),Changes1), findall1(Combos,find_combos1(Insertions1,Deletions1,%Changes1, Combos),Combos2), findall1(Combos10,(member(Combos3,Combos2), find_combos3(After3,Combos3,[],Combos1), flatten(Combos1,Combos10)),Combos4), %subtract(Combos411,[[]],Combos412), /* findall1(Combos413,(member(Combos413,Combos412), sort(Combos413,Combos414), sort(Before,Before1), not(Combos414=Before1)),Combos41), */ %sort(Combos412,Combos413), %subtract(Combos413,[Before],Combos41), %sort_by_length(Combos41,Combos4), (Combos4=[]->fail;true), %length(Combos4,L), %trace, %(L>100->fail;true), !.%diff_group_combos(_Before,_After,[]).
diff_group_combos(_Before,After,[After]).
diff_group_combos1(_Before,After,[After]).
differentiate(List,Corrs1,Corrs2,Diffs1,Diffs2) :- List=[A|B], findall1([N,A],member([N,A],Corrs1),C), (C=[]->(N1=1,append(Corrs1,[[N1,A]],Corrs3)); (sort(C,C1),append(_,[[N2,_]],C1), N1 is N2+1,append(Corrs1,[[N1,A]],Corrs3))), append(Diffs1,[[A,N1]],Diffs3), differentiate(B,Corrs3,Corrs2,Diffs3,Diffs2).
digits([]) --> [].
digits([]) --> [].t(BrDict,BrDict4,Word) :- (member([Word,Word1],BrDict)-> (member([Word1,_X,_Y,_Z],BrDict4)->true;true);true).
digits([]) --> [].t2ab_br(Word,_):-%[],B,B,C,C,D,D,L,L) :-%!.%br([Word|Words],BrDict,BrDict2,AlgDict4,AlgDict5,AlgDict6,AlgDict7,AlgString1,AlgString2) :-downcase_atom(Word, Word2), atom_string(Word2,Word3),/*words_to_read(WR1),(WR1>0->(writeln(WR1),write(Word),texttobr2(3),nl,sleep(0.12),WR2 is WR1-1,retractall(words_to_read(_)),assertz(words_to_read(WR2)));true),*//**member([Word3,X,Y,Z],AlgDict4) -> %% This feature is a bug because words in brdict2 shouldn't necessarily be the words in brdict1%%(append(BrDict,[[Word3,""]],BrDict3), BrDict3t=AlgDict4,%%br(Words,BrDict3,BrDict2,BrDict3t,AlgDict5))%%;%%(**/%%(member([Word3,X,Y,Z],AlgDict4) -> %% This feature is a bug because words in brdict1 should correspond to those in brdict2%%(atom_concat("The breasoning for ", Word3, P1),%%atom_concat(P1, " is defined.  Enter object name (without spaces), if different for ", Prompt));%Prompt="Enter object name (without spaces), if different for "),%%writeln([word3,Word3]),%trace,t2ab_brDict031(BrDict), t2ab_algString1(AlgString1), (member([Word3,String4],BrDict)-> (BrDict3=BrDict,AlgString1=AlgString3,(String4=""->String41=Word3;String41=String4),String5=String41);((repeat,write("Enter object name (without spaces), if different for "), writeln(Word3),(auto(on)->String2="plus";read_string(user_input, "\n", "\r", _End2, String2)),split_string(String2, "", " ", String3),String3=[String4]),%%*brth(Word3,_Brth),(String4=""->String5=Word3;String5=String4),append(BrDict,[[Word3,String5]],BrDict3),append(AlgString1,[[Word3," ",String5," "]],AlgString3)%texttobr2(1,u,String5,1))),t2ab_algDict_x1(AlgDict4),downcase_atom(String5, String52), atom_string(String52,String53),%trace,(member([String53,X1],AlgDict4)->(AlgDict41=AlgDict4,AlgString3=AlgString4,(X1=""->StringX1=String53;StringX1=X1),String51=StringX1);((repeat,write("Enter algorithm name for "), writeln(String53),(auto(on)->String21="write";read_string(user_input, "\n", "\r", _, String21)),split_string(String21, "", " ", String31),String31=[String411]),%%*brth(Word3,_Brth),(String411=""->String51=String53;String51=String411),append(AlgDict4,[[String53,String51]],AlgDict41),append(AlgString3,[String51," "],AlgString4)%texttobr2(1,u,String51,1))),downcase_atom(String51, String521), atom_string(String521,String531),t2ab_algDict1(AlgDict6),(member([String531,_Y1],AlgDict6)->(AlgDict61=AlgDict6,AlgString4=AlgString5);((repeat,write("Enter Prolog algorithm for "), writeln(String531),(auto(on)->String1="writeln(A)";read_string(user_input, "\n", "\r", _End, String1)),split_string(String1, "\n\r", "\n\r", String),%Values=[X1,Y1,Z1],number_string(X,X1),number_string(Y,Y1),number_string(Z,Z1)),(String=""->String11=String531;String11=String),append(AlgDict6,[[String531,String11]],AlgDict61),append(AlgString4,[String11,"\n\n"],AlgString5)))),%%*brth(String53,_Brth2),%%write("br(\'"),write(Word3),writeln("\',)."),%%writeln([Word3,X,Y,Z]),%%write(' '),retractall(t2ab_brDict03(_)),assertz(t2ab_brDict03(BrDict3)),retractall(t2ab_algDict_x(_)),assertz(t2ab_algDict_x(AlgDict41)),retractall(t2ab_algDict(_)),assertz(t2ab_algDict(AlgDict61)),retractall(t2ab_algString(_)),assertz(t2ab_algString(AlgString5)),!.
dir(2,1,true).
dir(2,3,true).
dir(3,1,true).
dir(3,2,true).dir(1,3,true).
disjunction(_,_,false) :- !.line1(X1,Y1,X2,Y2,C2,C3,N3) :-%%(X1=<X2->(XA1=X1,XA2=X2);(XA1=X2,XA2=X1)),%%(Y1=<Y2->(YA1=Y1,YA2=Y2);(YA1=Y2,YA2=Y1)),%%gridline1(XA1,YA1,XA2,YA2,C2,C3,N3).
distribute_qa_into_plan(Worksheet_plan1,Exercises2,Worksheet_plan2,Worksheet_plan3) :- Worksheet_plan1=[[Number,Type,Number_of_gap_questions,Number_of_gap_answers]|Worksheet_plan4], length(List1,Number_of_gap_questions), append(List1,List2,Exercises2), append(Worksheet_plan2,[[Number,Type,Number_of_gap_questions,List1,Number_of_gap_answers]],Worksheet_plan5), distribute_qa_into_plan(Worksheet_plan4,List2,Worksheet_plan5,Worksheet_plan3).
divide(N,Words1,Words21,Words22) :- length(L,N), (append(L,L1,Words1)->L2=L; (L2=Words1,L1=[])), append(Words21,[L2],Words23), divide(N,L1,Words23,Words22),!.
divide(N7,Br,N4,Br1,Br2) :- length(L,N4),append(L,L2,Br), append(Br1,[N7,". ",L,"\n"],Br3), N8 is N7+1, divide(N8,L2,N4,Br3,Br2).
divide(N7,Br,N4,Br1,Br2,Keywords,Connectives) :- ((relevant_sentence(Br,Br21,L1,Keywords), get_keywords(L1,KW2,Connectives), get_chain(N4,Br21,L2,KW2,[],L,Connectives))-> %length(L,N4),append(L,L2,Br), (append(Br1,[N7,". ",L,"\n"],Br3), N8 is N7+1, divide(N8,L2,N4,Br3,Br2,Keywords,Connectives)); Br1=Br2).
do_saved_debug(State1) :-(not(saved_debug(_))->(retractall(saved_debug(_)),assertz(saved_debug([])));true),%saved_debug(State2),retractall(saved_debug(_)),assertz(saved_debug(State1)),!.
doctors([%% Don't include meditators here[doctor1firstname,surname,dobd,dobm,doby,started_day,started_month,started_year],[doctor2firstname,surname,dobd,dobm,doby,started_day,started_month,started_year]%% number of meditators + number of doctors= e.g. 21]).
double_brackets([[]]).
draw_lines(X1,Y1,Z1,Ps,Grid1,Grid2) :- Ps=[[X2,Y2,Z2]|Ps1], line1_3d(X1,Y1,Z1,X2,Y2,Z2,Grid1,Grid3,1), draw_lines(X1,Y1,Z1,Ps1,Grid3,Grid2).
duplicate(Grammar1,Grammar2,Grammar3) :-Grammar1=[Grammar4|Grammar5],append(Grammar2,[[Grammar4,Grammar4]],Grammar6),duplicate(Grammar5,Grammar6,Grammar3).
duplicates(L,M,S1,S2):-head(L,H),tail(L,T),not((membera4(M,H))),duplicates(T,M,S1,S2).
e(Pred_id,Level,Predicate_number,Vars3,End_result,Functions,Vars2,Result1, Result2, Globals1a,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2) :-%trace,/*member([[function,Pred_id],Function],Globals1),member([[arguments1,Pred_id],Arguments1],Globals1),member([[skip,Pred_id],Skip],Globals1),(debug_fail(Skip,[Function,Arguments1])->true;true),*/((not(Level=0))->(%trace,Level2 is Level-1,(Level2 = 0 ->(%(Pred_id=3->writeln(here2);true),% pred_id in following is _ (and _ for pred_id in ssi1 calls in e.pl because they are -3 line calls, and shouldn't pass previous pred ids to be added to pred id chain)ssi1([_,0,_Predicate_number,-3,"predicate",_Query_a,Vars3,_All_predicate_numbers], _Result21, Functions,Vars2,Result1, Result2, Globals1a,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2));(%Choice_point_trail1=Choice_point_trail11,%reverse(Choice_point_trail1,Choice_point_trail11),%writeln([choice_point_trail11,Choice_point_trail11]),((%trace,%writeln(here1),/*writeln1(get_last_p_before_n(Choice_point_trail1,[_Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],[Cp_a,Cb_b,_Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],_)),*/%writeln([choice_point_trail1,Choice_point_trail1]), Query2=[_|_],%trace,%writeln("*1"),get_last_cp_before_n(Choice_point_trail1,[Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2], [Cp_a,Cb_b,Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],_, CP_Vars1,CP_Vars21), member([[function,Pred_id],Function],Globals1a),member([[arguments1,Pred_id],Arguments1],Globals1a),member([[skip,Pred_id],Skip],Globals1a),%delete(Globals1a,[[function,Pred_id],Function],Globals1),Globals1a=Globals1,(debug_fail(Skip,[Function,Arguments1])->true;true)%Query2=[AB1|AB2],not(var(AB1)),not(var(AB2)), %trace,/*writeln1(get_last_p_before_n(Choice_point_trail1,[Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],[Cp_a,Cb_b,Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],_)),*/%member([_Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],Choice_point_trail11),%(((Pred_or_line="predicate",not(All_predicate_numbers2=[]))->true;(Pred_or_line="line",%writeln1(All_predicate_numbers2),All_predicate_numbers2=[_,_,_,_,_,_,Vars2c],not(Vars2c=[]))))%[[n,member2],[[1,2,3],empty],_204342,_204348,[[[[[v,a],[1,2,3]],[[v,b],2]],[[1,2,3],2]],[[[[v,a],[1,2,3]],[[v,b],3]],[[1,2,3],3]]]]%writeln1(delete(Choice_point_trail1,[Level,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],Choice_point_trail12)),/*writeln1(delete_cp(Choice_point_trail1,[Cp_a,Cb_b,_Pred_id,Level,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],Choice_point_trail12)),*//*writeln1(delete_cp(Choice_point_trail1,[Cp_a,Cb_b,_Pred_id,Level,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],Choice_point_trail12))*/)->(Pred_or_line="predicate"->%(All_predicate_numbers2=[]->(%load_local_from_global_cp_trail(Pred_id,%Choice_point_trail1,Choice_point_trail1_new,CP_Vars21,CP_Vars22),delete_cp(Choice_point_trail1,[Cp_a,Cb_b,Pred_id,Level1,Predicate_number2,Line_number2b,Pred_or_line,Query2,Vars4,All_predicate_numbers2],Choice_point_trail12,CP_Vars21,CP_Vars3,_),%save_local_to_global_cp_trail(Choice_point_trail12,[],CP_Vars3111,CP_Vars3),%***%);All_predicate_numbers2=[All_predicate_numbers3|All_predicate_numbers4],All_predicate_numbers3=[All_predicate_numbers31,"prev_pred_id",Prev_pred_id],%trace,delete_cp_value(Choice_point_trail12,[All_predicate_numbers31,"prev_pred_id",Prev_pred_id],Choice_point_trail13,CP_Vars3,CP_Vars31),member([[level,Pred_id],L],Globals1),%Level3 is Level+1,%Level3 is Level,%(Pred_id=3->writeln(here3);true),% pred id in the following was _(Line_number2b = ["returns to", _, "pred_id", _] -> (Line_number2b1 = -1%,trace) ; Line_number2b1 = Line_number2b),ssi1([["prev_pred_id",Prev_pred_id],L,All_predicate_numbers31,Line_number2b1,"predicate",Query2,Vars4,All_predicate_numbers4], End_result,Functions,Vars2,Result1, Result2,%2, Globals1,Globals2,Choice_point_trail13,Choice_point_trail3,CP_Vars31,CP_Vars2));(Pred_or_line="line" ->(%trace,%*** loads new framedelete_until_last_cp(Choice_point_trail1,Choice_point_trail6,D1,AC,CP_Vars21,CP_Vars4),%writeln1(delete_until_last_cp(Choice_point_trail1,Choice_point_trail6,D1,AC,CP_Vars21,CP_Vars4)),(D1=[_,_,Pred_id2,Level11,Predicate_number11,Line_number_a11,"line",-,Vars2d11,Vars2e11],%writeln1([d1,D1]),ssi1([Pred_id2,Level11,Predicate_number11,Line_number_a11,"line",-,Vars2d11,Vars2e11], _, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail6,Choice_point_trail3,["appearance of command",AC],CP_Vars4,CP_Vars2)))));%****(/*%reverse(Globals1,Globals3),member([[firstargs,Pred_id],FirstArgs],Globals1), %*delete, where was pred called from? - prev level in cpsdelete(Globals1,[[firstargs,Pred_id],FirstArgs],Globals41),member([[function,Pred_id],Function],Globals41),delete(Globals41,[[function,Pred_id],Function],Globals51),member([[arguments1,Pred_id],Arguments1],Globals51),delete(Globals51,[[arguments1,Pred_id],Arguments1],Globals61),member([[skip,Pred_id],Skip],Globals61),delete(Globals61,[[skip,Pred_id],Skip],Globals71),member([[level,Pred_id],Level],Globals71),delete(Globals71,[[level,Pred_id],Level],Globals222),%reverse(Globals21,Globals222),*/%(debug_fail(Skip,[Function,Arguments1])->true;true),%writeln([globals1a,Globals1a]),ssi1([Pred_id,Level,Predicate_number,-3,"predicate",-,[],_All_predicate_numbers2], End_result,Functions,Vars2,Result1, Result2,%2, Globals1a,Globals2, % *** Globals1->Globals222Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2))))))).
e4_fa_getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars) :-        e4_fa_getvalue(Variable1,Value1,Vars),        e4_fa_getvalue(Variable2,Value2,Vars),        e4_fa_getvalue(Variable3,Value3,Vars).
e4_fa_getvar(Variable,Value,Vars) :-((member([Variable,Value],Vars),not(is_empty(Value)))->true;        ((aggregate_all(count,member([Variable,_Value],Vars),0)->true;%%(member([Variable,Empty],Vars),is_empty(Empty))),Value=Variable)).
e4_fa_getvar(undef,undef,_Vars) :-!.
e4_substitutevarsA2_getvalue_match1(Variable1,Value1,Vars1,FirstArgs1,FirstArgs2) :-not(single_item_or_var(Variable1)),Variable1=[Variable1a|Variable1b],e4_substitutevarsA2_getvalue_match1(Variable1a,Value1a,Vars1,FirstArgs1,FirstArgs3),e4_substitutevarsA2_getvalue_match1(Variable1b,Value1b,Vars1,FirstArgs3,FirstArgs2),append([Value1a],Value1b,Value1),!.
each_combo_last_args(N,Last_arg0,Last_arg2) :- length(Last_arg0,L), each_combo_last_args1(L,Last_arg0,[],Last_arg3), member(Last_arg2,Last_arg3), N1 is N-1, each_combo_last_args(N1,Last_arg0,Last_arg2).
each_combo_last_args1(L,Last_arg0,Last_arg1,Last_arg2) :- member(Last_arg3,Last_arg0), %delete(Last_arg0,Last_arg3,Last_arg5), append(Last_arg1,[Last_arg3],Last_arg4), L2 is L-1, each_combo_last_args1(L2,Last_arg0,Last_arg4,Last_arg2).
each_combo_last_args1(L,Last_arg0,Last_arg1,Last_arg2) :- member(Last_arg3,Last_arg0), %delete(Last_arg0,Last_arg3,Last_arg5), append(Last_arg1,[Last_arg3],Last_arg4), L2 is L-1, each_combo_last_args1(L2,Last_arg0,Last_arg4,Last_arg2). no_singletons(Vars1,Program,Out,Rules2):-((findall([C,DA],(member(C,Program),C=[_E,D],member(DA,D)),Vars2),%%append_list(Vars2,Vars2A),findall(A,member([_,A],Vars2),Vars21),append(Vars1,Vars21,Vars3),%subtract(Vars31,Out,Vars3),findall(Item,(member(Item,Vars3),(member(Item,Out)->true;(aggregate_all(count,(member(Item,Vars3)),Count1),not(Count1=1)))),Rules21),sort(Rules21,Rules22),%member(B1,Rules22),findall(B,(member([B,_B1],Vars2),%trace,B=[_,A],forall((member(A,B),member(A1,A)),member(A1,Rules22))),Rules23),remove_dups(Rules23,Rules2)%,G=[])->true;(writeln(no_singletons(Vars1,Program)),fail)).
education_research(L,D1,D2) :- random1(10,X1), numbers(X1,1,[],Xs), findall(D3,(member(_,Xs),idea(D3)),D5), append(D1,[D5],D4), L1 is L-1,  education_research(L1,D4,D2).
ef(G):-(h(I)->true).ef(G):-(h(I)->true),!.
ef(G):-(h(I)->true;true).
ef(G):-(h(I)->true;true),!.
eliminate_unused_predicates1(Rules,Algorithms1,Algorithms2,Algorithms3) :-Algorithms1=[[Algorithms4a,Algorithms4]|Algorithms5],%%(Algorithms4a=[]->%%eliminate_unused_predicates1(Rules,Algorithms5,Algorithms2,%%Algorithms3),%%;((findall(Algorithms6a,(((member(Algorithms4a1,Algorithms4),Algorithms4a1=[[n,_]|_])->true;Algorithms4a1=Algorithms4),((Algorithms4a1=[[n,PredicateName],Arguments,":-",_Program6],%%Algorithms4a1=[[n,PredicateName],Arguments])->length(Arguments,ArgumentsLength))->true;(Algorithms4a1=[[n,PredicateName],Arguments2],length(Arguments2,ArgumentsLength)->true;(Algorithms4a1=[[n,PredicateName]],ArgumentsLength=0))),Item=[[n,PredicateName],ArgumentsLength],(member(Item,Rules)->(Algorithms4a=[]->Algorithms2=Algorithms6a;append(Algorithms2,[Algorithms4a],Algorithms6a));Algorithms6a=Algorithms2)),Algorithms6b)),Algorithms6b=[Algorithms6c|_],(var(Algorithms6c)->Algorithms6=[];Algorithms6=Algorithms6c),%%length(Algorithms4,Count)),eliminate_unused_predicates1(Rules,Algorithms5,Algorithms6,Algorithms3)).
end_nested_findall(FA,Pred_id,Level,Predicate_number,Line_number_b,Choice_point_trail1,Choice_point_trail2,Vars1,Vars2,CP_Vars1,CP_Vars2,Functions,Globals1,Globals2,Result1, Result2,End_line42) :-% if there are no more choice points after the current findall, then pass back results.
epsilon(0.000001).
equals4(A,B):-A=B.
equals4_first_args1(Length0,Length1,Variable1,Variable2,First_args0,First_args01) :-Variable1=[Item1|Item1a],Variable2=[Item2|Item2a],%numbers(Length,1,[],N),%findall(First_args%First_args1%,(member(N1,N),%get_item_n(Variable1,N1,Item1),%get_item_n(Variable2,N1,Item2),%trace,%e4_fa_match4_2([Item1],[Item2],[],First_args1),match4_new_22([Item1],[Item2],[],First_args1%,e4),collect_vars(Item2,[],Vars2),%trace,findall(Value2,(member([First_args5,Value],First_args1),(not(member(First_args5,Vars2))->Value2=[First_args5,Value];(not(expression_not_var(Value)),Value2=[Value,First_args5]))),First_args6),%(First_args2=[]->First_args6=First_args2;First_args6=First_args2),%maplist(append,First_args6,[First_args]),%*append(First_args6,[First_args),%*),First_args3),%trace,%maplist(append,[First_args3],[First_args4]),%*delete(First_args3,[],First_args2),append(First_args0,First_args6,First_args02),Length2 is Length0+1,equals4_first_args1(Length2,Length1,Item1a,Item2a,First_args02,First_args01),!.
equals_or(List,Item1) :-List=[Item2|Rest],not(Item1=Item2),equals_or(Rest,Item1),!.
equals_or(List,Item1) :-List=[Item2|Rest],not(Item1=Item2),equals_or(Rest,Item1),!.rulea(OutModes,RuleName,Vars1,VarList,VarList3,Rule,OutputVars,Vars2) :-    get_vars(OutModes,VarList,VarList3,OutputVars,[],Vars2),    append(Vars1,Vars2,Vars3),    Rule=[RuleName,Vars3],!.
equation2(DY,DX,M,Y1,X1,C) :-M is DY/DX,        C is Y1-M*X1        %%,writeln([m,M,c,C])        .
equation2_3d(DY,DX,M,Y1,X1,C) :-M is DY/DX,        C is Y1-M*X1        %%,writeln_3d([m,M,c,C])        .%% Finds the graph of the line connecting the two points.  It does this by finding the graph flipped in the y=x line if the gradient m is greater than 1 or less than -1, so that the graph is not disjointedgridline2_3d(X1,_Y1,X2,_Y2,M,C,C2,Grid,N3) :-M =< 1, M >= -1,%%x_3d(X),%%X1 is X+1,gridline3_3d(X1,X2,M,C,C2,Grid,N3,_X).
equity1(How_much_i_ate_with_you,How_much_i_like_you):- How_much_i_like_you is 2*How_much_i_ate_with_you.
evader(0,N1,N1) :- !.
evader(N,N0,N1) :- random_member(X,[1,2,3,4,5,6,7,8]), random_member(Y,[1,2,3,4,5,6,7,8]), XM is X-1, XP is X+1, YM is Y+1, YP is Y+1, not(member([XM,YM],N0)), not(member([XM,Y],N0)), not(member([XM,YP],N0)), not(member([X,YM],N0)), not(member([X,YP],N0)), not(member([XP,YM],N0)), not(member([XP,Y],N0)), not(member([XP,YP],N0)), append(N0,[[X,Y]],N01), NN is N-1, evader(NN,N01,N1).
evaluate(Number, Number,V1,V2) :-    number(Number),append(V1,[Number],V2),!.
everyvarmentioned1(Vars1,Program) :-Vars1=[Vars2|Vars3],findall(Vars2,(member(C,Program),(%%(C=[[n,"_"],[[v,b]]]->(true);true),C=[_E,D],member(Vars2,D)%%Vars2=true)),B),not(B=[]),everyvarmentioned1(Vars3,Program).
evidence(["avocado","in","cart"]).
evidence(["lettuce","in","cart"]).
evidence(["watermelon","in","box"]).
expand_topic2(B4,B5,B6) :-forall(append(_A,C,B4),not(append([" ","a","n","d"," "],_D,C))),foldr(append,[B4,[". "],B5],B6),!.
expand_topic2(B4,ET11,ET) :-%trace,append(A,C,B4),append([","," "],D,C),foldr(append,[ET11,%[". "],A,[". "]],ET1),expand_topic2(D,ET1,ET),!.expand_topic2(B4,ET1,ET) :-append(A,C,B4),append([" ","a","n","d"," "],D,C),foldr(append,[ET1,A,[". "]],ET2),expand_topic2(D,ET2,ET),!.
expand_types1(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("atom",Dbw_atom),Data=[T,Dbw_atom],%string(Data),append(Types1,[[T,Dbw_atom]],Types2),!.
expand_types1(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("number",Dbw_number),Data=[T,Dbw_number],%number(Data),append(Types1,[[T,Dbw_number,_]],Types2),!.
expand_types1(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("number",Dbw_number),Data=[T,Dbw_number],%number(Data),append(Types1,[[T,Dbw_number]],Types2),!.
expand_types1(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("string",Dbw_string),Data=[T,Dbw_string],%string(Data),append(Types1,[[T,Dbw_string,_]],Types2),!.expand_types1(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("atom",Dbw_atom),Data=[T,Dbw_atom],%string(Data),append(Types1,[[T,Dbw_atom,_]],Types2),!.
expand_types1(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("string",Dbw_string),Data=[T,Dbw_string],%string(Data),append(Types1,[[T,Dbw_string]],Types2),!.
expr(E)-->a(E1),op1(O),a(E2),{E=[E1,O,E2]}.
expr(E)-->a(E1),op1(O),a(E2),{E=[E1,O,E2]}.num(E)-->[V],{(number1(V,_Token1)->(%ct_t(T),ct_r(R),ct_c(C),E=V)%[var,T,R,C,_IN,V,[],[],[],[],[]]);fail%E=V) }.
expression(N) :-atom(N),!.
expression(N) :-isval(N),!.
expression(N) :-isval(N),!.expression(N) :-string(N),!.
expression(N) :-not(atom(N)),length(N,L),L>=1,expression2(N).
expression(N) :-not(atom(N)),length_is_list(N,L),L>=1,expression2(N).
expression(N) :-string(N),!.
expression(N) :-string(N),!.expression(N) :-atom(N),!.
expression(N) :-string(N),!.expression(N) :-atom(N),!.expression([]) :-!.
expression(N) :-%%not(atom(N)),length(N,L),L>=2,expression2(N).
expression([N]) :-expression(N).
expression([N|Ns]):-expression(N),expression(Ns).
expression([]).
expression([]) :-!.
expression([]) :-!.expression(N) :-not(atom(N)),length(N,L),L>=1,expression2(N).expression2([]).
expression([]) :-!.expression(N) :-%%not(atom(N)),length(N,L),L>=2,expression2(N).
expression(empty).
expression2([N|Ns]) :-%%(expression3(N),%%->true;expression2(N)),expression2(Ns).
expression2([N|Ns]) :-%%(expression3(N),%%->true;expression2(N)),expression2(Ns).expression3(N) :-isval(N),!.
expression2([N|Ns]) :-expression3(N),expression2(Ns).
expression2([]).
expression3(N) :-atom(N),!.
expression3(N) :-atom(N),!.expression3(N) :-expression2(N),!.
expression3(N) :-expression2(N),!.
expression3(N) :-isval(N),!.
expression3(N) :-isval(N),!.expression3(N) :-string(N),!.
expression3(N) :-string(N),!.
expression3(N) :-string(N),!.expression3(N) :-atom(N),!.
expression_not_var(Variable2) :-not(variable_name(Variable2)),expression_not_var1(Variable2,start).
expression_not_var1(Variable1,Position) :-(Position=start->not(variable_name(Variable1));true),Variable1=[Variable1a|Variable1b],not(variable_name(Variable1a)),expression_not_var1(Variable1a,start),expression_not_var1(Variable1b,non_start),!.
expression_or_atom(N) :-is_list(N),length(N,L),L>=1,expression_or_atom2(N),!.expression_or_atom(Name) :-predicate_or_rule_name(Name),!.
expression_or_atom2([N|Ns]) :-(isvalstrempty(N)->true;atom(N)),expression_or_atom2(Ns).
expression_or_atom2([]).
expressionnotatom(N) :-not(atom(N)),length(N,L),L>=1,expressionnotatom2(N),!.
expressionnotatom(N) :-not(atom(N)),length(N,L),L>=2,expressionnotatom2(N).
expressionnotatom(Name) :-predicate_or_rule_name(Name),!.
expressionnotatom2([N|Ns]) :-isvalstrempty(N),expressionnotatom2(Ns).
expressionnotatom2([N|Ns]) :-isvalstrempty(N),expressionnotatom2(Ns).substitutevarsA1(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2) :-substitutevarsA2(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2),!.
expressionnotatom2([]).
expressionnotatom3(N) :-get_lang_word("v",Dbw_v),not(N=[v,_]),not(N=["v",_]),not(N=[Dbw_v,_]),expression(N),!.
extra_characters("%$, :.").
extract_modes2(TypeStatements1,TypeStatements2a,TypeStatements3,Vars1,Vars2,Vars3,ModeStatements1) :-get_lang_word("input",Input),ModeStatements1=[Input|ModeStatements3],TypeStatements1=[TypeStatements2|TypeStatements3a],Vars1=[Vars11|Vars12],append(TypeStatements2a,[TypeStatements2],TypeStatements4),append(Vars2,[Vars11],Vars4),extract_modes2(TypeStatements3a,TypeStatements4,TypeStatements3,Vars12,Vars4,Vars3,ModeStatements3),!.
extract_modes2(TypeStatements1,TypeStatements2a,TypeStatements3,Vars1,Vars2,Vars3,ModeStatements1) :-get_lang_word("output",Output),ModeStatements1=[Output|ModeStatements3],TypeStatements1=[_TypeStatements2|TypeStatements3a],Vars1=[_Vars11|Vars12],extract_modes2(TypeStatements3a,TypeStatements2a,TypeStatements3,Vars12,Vars2,Vars3,ModeStatements3),!.
extract_modes2([],TypeStatements2a,TypeStatements2a,[],Vars,Vars,[]) :- !.
extract_modes2([],TypeStatements2a,TypeStatements2a,[],Vars,Vars,[]) :- !.%%extract_modes2(_,TypeStatements2a,TypeStatements2a,[],Vars,Vars,[]) :- !.
extrasarguments(Relations,FunctionNumber,Position1,Vars1,Vars2,Header1,Header2) :-        member([extrarelation,Item1,_Type1,_Range,FunctionNumber,Position1],Relations),        var(Item1,Var,Vars1,Vars3),        append(Header1,[Var],Header3),        Position2 is Position1 + 1,        extrasarguments(Relations,FunctionNumber,Position2,Vars3,Vars2,Header3,Header2).
extrasarguments(Relations,FunctionNumber,Position1,Vars1,Vars2,Header1,Header2) :-        not(member([extrarelation,_Item1,_Type1,_Range,FunctionNumber,Position1],Relations)),        append(Header1,[undef],Header3), %% check this works in lpi        Position2 is Position1 + 1,        extrasarguments(Relations,FunctionNumber,Position2,Vars1,Vars2,Header3,Header2).
fa1(N,B1,A,B) :- N=[N1|Ns], get_item_n(B1,N1,C), append(A,[C],A1), fa1(Ns,B1,A1,B).
factorise(0,0) :- !.
factorise(X^2-N*X,F) :- F=X*(X-N).
factors(1,_,[1]) :- !.
factors(N1,F1,F2) :-numbers1(N1,N2),(lowest_factor(N1,N2,F3)->(N3 is N1/F3,append(F1,[F3],F4),factors(N3,F4,F2));append(F1,[N1],F2)).
fail* should return an error?- foldl1(append1,[["a"],["b","c"]],[],C).
false(false).
family_test:-grandparent(Result1),writeln(Result1),older(Result2),writeln(Result2),siblings(Result3),writeln(Result3), sibling_list(john,Result5),writeln(Result5),older_brother(Result6),writeln(Result6),descendant(albert,Result7),writeln(Result7), ancestor(john,Result8),writeln(Result8),children(albert, ChildList),writeln(ChildList),list_count([1,2,3], Count1), writeln(Count1),count_descendants(albert, Count2),writeln(Count2).
fan(T1,T2) :- T2 is T1-5.pen(A,A) :- writeln(A).bag(A,A) :- findall(_,(member(B,A),writeln(B)),_).feed(dog,A,B) :- B=stomach(A).
female([doll,true],[feed,true]).
ff_rows1(OT,OTN,A21,A22) :-A21=[First_col|A25],length(A25,A25L),%numbers(A25L,1,[],A25Ns),ff_rows2(OT,OTN,A25,A251,1,A25L),append([First_col],A251,A22).
file([L|Ls]) --> entry(L),",",%%{writeln(L)}, %%***file(Ls), !. file([L]) --> entry(L), %%{writeln(L)},!.
file([L|Ls]) --> entry(L),",",%%{writeln(L)}, %%***file(Ls), !. %% file(Ls),{M=[Ls]})), !. %%, {writeln(["l",L])},",", file(Ls), {writeln(["ls",Ls])},!. %%, {append(L,Ls,M)}, !.file([L]) --> entry(L), %%{writeln(L)},!. %%(entry(L),{M=L});{M=[],(writeln("Warning - Entry in incorrect format.")%%,abort%%)}, !.
file([]) --> [],!.
file([]) --> [],!./*file(Ls2) --> newlines1(N),file(Ls),%{writeln1(L)}, %%*** {%foldr(append,[[L],N|Ls],Ls3), delete([N|Ls],[],Ls2)},%{foldr(append,[N],Ls2)},%{writeln1(L)},!.*/%%predicate([]) --> newlines1(_).
file0([]) --> [].
file0([]) --> [].%%file([]) --> [].
file0t([]) --> [].
file0t([]) --> [].%%file([]) --> [].
file4([L|Ls]) --> entry3(L),",",%%{writeln(L)}, %%file4(Ls), !. file4([L]) --> entry3(L), %%{writeln(L)},!.**/entry2([Word1,Word2]) -->"[","[",  sentence1(Word11), "]", {string_codes(Word1,Word11),string(Word1)},",", "[", sentence1(Word22), "]", {string_codes(Word2,Word22),string(Word2)}, "]",!.
filet([L|Ls]) --> entryt(L),",",%%{writeln(L)}, %%***filet(Ls), !. %% file(Ls),{M=[Ls]})), !. %%, {writeln(["l",L])},",", file(Ls), {writeln(["ls",Ls])},!. %%, {append(L,Ls,M)}, !.filet([L]) --> entryt(L), %%{writeln(L)},!. %%(entry(L),{M=L});{M=[],(writeln("Warning - Entry in incorrect format.")%%,abort%%)}, !.
filet([L|Ls]) --> entryt(L),",",%%{writeln(L)}, %%***filet(Ls), !. %% file(Ls),{M=[Ls]})), !. %%, {writeln(["l",L])},",", file(Ls), {writeln(["ls",Ls])},!. %%, {append(L,Ls,M)}, !.filet([L]) --> entryt(L), %%{writeln(L)},!. %%(entry(L),{M=L});{M=[],(writeln("Warning - Entry in incorrect format.")%%,abort%%)}, !.entryt([Word2,X3,Y3,Z3]) -->"[", word(Word), {string_codes(Word2,Word),string(Word2)},",",      digits(X),",",{atom_codes(X2,X),atom_number(X2,X3),number(X3)},           digits(Y),",",{atom_codes(Y2,Y),atom_number(Y2,Y3),number(Y3)},           digits(Z),{atom_codes(Z2,Z),atom_number(Z2,Z3),number(Z3)},           "]".word([X|Xs]) --> [X], {char_type(X,csymf)->true;(X=27->true;X=8217)}, word(Xs), !.
find11(Text,String,List1,List2):-not(sub_string(Text,_A,_B,_C,String)),append(List1,[Text],List2),!.
find11(Text,String,List1,List2):-sub_string(Text,A,_B,C,String),!,sub_string(Text,0,A,_,String2),sub_string(Text,_,C,0,String3),append(List1,[String2,String],List3),find11(String3,String,List3,List2).
find118(Text,Strings,List1,List2):-findall(String,(member(String,Strings),not((sub_string(Text,_A,_B,_C,String)))),B),length(Strings,L),length(B,L),append(List1,[Text],List2),!.
find118(Text,Strings,List1,List2):-findall(String,(member(String,Strings),not(sub_string(Text,_A,_B,_C,String))),Strings2),length(Strings,L),length(Strings2,L),append(List1,[Text],List2),!.
find118(Text,Strings,List1,List2):-findall([A,C,String],(sub_string(Text,A,_B,C,String),member(String,Strings)),D),not(D=[]),D=[[A,C,String]|_E],sub_string(Text,0,A,_,String2),sub_string(Text,_,C,0,String3),append(List1,[String2,String],List3),find118(String3,Strings,List3,List2).
find18(Text,Strings,List) :- find118(Text,Strings,[],List).
find2(A,Find,B,C) :- is_list(A), find4(A,Find,B,C).
find3(A,Find,B,B) :-  not(A=Find),!.
find_addrules_outputvars(OutputVars1,OutputVars3) :-not(OutputVars1=[]),OutputVars3=OutputVars1.
find_alg(list([a1,an]),b,list([f(a1,f(an,b))],foldr(f))).
find_all_dependencies(LPPM_registry_term1,Dependencies1,Dependencies8,Dependencies3) :-Dependencies1=[[User1a,Repository2]|Dependencies9],(member([User1a,Repository2,_Description,Dependencies7],LPPM_registry_term1)->true;(concat_list(["Error: Missing lppm_registry.txt entry: [",User1a,",",Repository2,"]."],Note_b),writeln(Note_b),abort)),append(Dependencies8,[[User1a,Repository2]],Dependencies10),subtract(Dependencies7,Dependencies10,Dependencies11),find_all_dependencies(LPPM_registry_term1,Dependencies11,Dependencies10,Dependencies6),find_all_dependencies(LPPM_registry_term1,Dependencies9,Dependencies6,Dependencies3).
find_at_header(MA_header,Col_heads_qt_LN1,MACL1,%,MACL2,Col_header_at1,Col_header_at2%,Formula_T,%Formula_R,%Formula_C,Formula_I) :-MA_header=[MA_header|MA_header2],findall_until_fail(A,member(A,MA_header2),(search_for_n_words_in_common_succ(MA_header,A, N),N>=1),C),length(C,L),length(C1,L),findall([C3,*],member(C3,C1),C2),foldr(append,[[[MA_header,(-)%Col,Item]],C2],D),MACL2 is MACL1+1,append(C,MA_header3,MA_header2),append(Col_header_at1,[D],Col_header_at3),find_at_header(MA_header3,Col_heads_qt_LN1,MACL1,%,MACL2,Col_header_at3,Col_header_at2%,Formula_T,%Formula_R,),!.
find_at_row(Table_N,R1a,Row_from_rest_ma,Header_at1,Counter,%,MACL2,Row_at1,Row_at2%,Formula_T,%Formula_R,%Formula_C,Formula_I) :-Header_at1=[[Cell,Symbol]|Header_at3],Symbol=(-),find_until(Header_at3,[_,(-)],C),%A,member(A,Header_qt3),A=[_,(-)],C),%(search_for_n_words_in_common_succ(Row_from_rest_ma1,A, N),N>=1),C),length(C,L),L1 is L+1,length(C1,L1),append(C1,C2,Row_from_rest_ma),sub_term_wa([var|_],C1,Instances1),findall([Add,[var,T1,R1,C1,IN1,V,VN1,TP1,RP1,CP1,INP1]],member([Add,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],Instances1),Instances2),(VN=[]->get_variable_n(VN1);VN1=VN),%* find new vars%find items numbers*R1a1 is R1a+1,C11 is Counter+L1,findall([VN1,Table_N,R1a1,C1,IN1],(member([Add,[var,T1,R1,C1,IN1,V,VN1,TP1,RP1,CP1,INP1]],Instances2)),Vars),Formula=[function,Table_N,R1a1,C11,XY2,F21],% * tables needed for sets of a=b+c, other tables needed for d=a/2 to find patterns (refind patterns after each table)%collect vars for function%findall([C3,*],member(C3,C1),C2),foldr(append,[C1],D),Counter1 is Counter+L1+1,%append(C,Row_from_rest_ma3,Row_from_rest_ma2),append(Row_at1,[[D],[Formula]],Row_at3),Header_at3=[Header_at4|Header_at5],find_at_row(Table_N,R1a,C2,Header_at5,Counter1,%,MACL2,Row_at3,Row_at2%,Formula_T,%Formula_R,),!.
find_br1(File_contents_list_term,Start,Len_needed,Len_so_far1,Text1,Text2) :-%%trace,File_contents_list_term=[[_Filename,Len]|Rest],Len_so_far2 is Len_so_far1+Len,(Len_so_far2 > Start -> (find_br2(File_contents_list_term,Start,Len_needed,Len_so_far1,Text1,Text2)); %% Len_so_far2 < Start(%%Len_so_far2 is Len_so_far1+Len,Len_so_far3 is 0,%%Start2 is 0,Len_needed2 is Len_needed-B.
find_calls1(Program0,Program1,Program2,Program3) :-Program1=[[_Program4a,Program4]|Program5],%% The first predicate in Program4 only is needed to find the calls x(findall(Program7a,(((member([[n,PredicateName],Arguments,":-",Program6],Program4)->true;((member([[n,PredicateName],Arguments],Program4),Program6=[])->true;Program4=[[n,PredicateName],Arguments,":-",Program6])),length(Arguments,ArgumentsLength),Item=[[n,PredicateName],ArgumentsLength],(member(Item,Program0)->Program6=Program6a;Program6a=[])%%->true;%%Item=Program0),(find_calls2(Program6a,[],Program7a))),[Program7])),%%append(Program2,Program7,Program8),%%append(Program0,Program7,Program01));%%(Program8=Program2,Program01=Program0)),append(Program2,Program7,Program8),append(Program0,Program7,Program01),find_calls1(Program01,Program5,Program8,Program3).
find_combos(S1,S,Combos1,Combos2) :- S1=[_|S2], member(Switch,S), append(Combos1,[Switch],Combos3), find_combos(S2,S,Combos3,Combos2).
find_combos2(Ops,Combos1,Combos2) :- Ops=[Op|Ops1], %trace, %member(Switch,[on,off]), (Op=[[i,_],_]->(S=[on,off ]%,S2=n );(Op=[[d,_],_],S=[on,off ]%,S2=_) )), member(Switch,S), append(Combos1,[[Op,Switch]],Combos3), find_combos2(Ops1,Combos3,Combos2).%findall1([Op,Switch],(member(Op,Ops),member(Switch,[on,off])),Switches).
find_combos2(Ops,Combos1,Combos2) :- Ops=[_Op|Ops1], %trace, %member(Switch,[on,off]), S=[on,off], member(Switch,S), append(Combos1,[Switch],Combos3), find_combos2(Ops1,Combos3,Combos2).
find_combos2(Ops,Combos1,Combos2) :- Ops=[_Op|Ops1], %trace, %member(Switch,[on,off]), S=[on,off], member(Switch,S), append(Combos1,[Switch],Combos3), find_combos2(Ops1,Combos3,Combos2). find_combos3(After,Combos,Combos1,Combos2) :- After=[Item1|After2], %Item1=[Index,Value], member(Switch,Combos), (Switch=on->Item=[Item1%[Index,Value] ];Item=[]), append(Combos1,Item,Combos3), find_combos3(After2,Combos,Combos3,Combos2).
find_combos2(Ops,Combos1,Combos2) :-%trace, Ops=[[[Op,N1],A]|Ops1],  % for n, i or d %member([_,A],Ops), %changes(N), %member(Op,N), (number(N1)-> (S3=[i,d], member(Switch,S3), S2=_);  ((Op=i->(S=[on,off ],S2=n);(S=[on%,off ],S2=_)), member(Switch,S%[on,off %] ))), append(Combos1,[[[[Op,S2],A],Switch]],Combos3), find_combos2(Ops1,Combos3,Combos2).%findall1([Op,Switch],(member(Op,Ops),member(Switch,[on,off])),Switches).
find_combos2_vintage(Ops,Combos1,Combos2) :- Ops=[Op|Ops1], (Op=[p,_]->Switch=on; member(Switch,[on,off])), append(Combos1,[[Op,Switch]],Combos3), find_combos2_vintage(Ops1,Combos3,Combos2).
find_combos3(After,Combos,Combos1,Combos2) :- After=[Item1|After2], Combos=[Switch|Combos5],%Item1=[Index,Value], %member(Switch,Combos), (Switch=on->Item=[Item1%[Index,Value] ];Item=[]), append(Combos1,Item,Combos3), find_combos3(After2,Combos5,Combos3,Combos2),!.
find_combos3(After,Combos,Combos1,Combos2) :-%trace, After=[Item1|After2], ((Item1=[Type1,N], member([[Type,N],Switch],Combos),%trace, Type=[T,_],Type1=[T,_],(Type1=[_,n]->number(N1);true), ((%Type=i, Switch=on)->Item=[N];Item=[]))->true;Item=[Item1]), append(Combos1,Item,Combos3), find_combos3(After2,Combos,Combos3,Combos2),!.
find_combos3(After,Combos,Combos1,Combos2) :-%trace, After=[Item1|After2], (Item1=[Type1,N1], %T=N, i or d member([[Type,N],Switch],Combos),%trace, Type=[T,_],Type1=[T,_],(Type1=[_,ID],(%)-> number(N)->(ID=i->Switch1=on;(ID=d->Switch1=off));Switch=Switch1), ((%Type=i, Switch1=on)->Item=[N];Item=[]))->true;Item=[Item1]), append(Combos1,Item,Combos3), find_combos3(After2,Combos,Combos3,Combos2),!.
find_combos3_vintage(After,Combos,Combos1,Combos2) :- After=[Item1|After2], ((Item1=[Type,N], (catch(get_base_token_number(N,N1),_,false)->true;true), (member([[Type,N1],Switch],Combos)->N2=N1; (member([[Type,N],Switch],Combos),N2=N)), ((%Type=i, Switch=on)->Item=[N2];Item=[]))->true;Item=[Item1]), append(Combos1,Item,Combos3), find_combos3_vintage(After2,Combos,Combos3,Combos2),!.
find_dependencies(Dep99_name,Dep99_arity,F,F2,Functions2b,Pred_numbers2) :-%trace,%writeln1(find_dependencies(Dep99_name,Dep99_arity,F,F2,Functions2b,Pred_numbers2)),%trace,/*A=[15],findall1(%[B,Functions2b%],(_Debug=off,member(B,A),*/%trace,%test(248%%15%,Q,F,_R),numbers(Dep99_arity,1,[],V2),length(Q4,Dep99_arity),(Q4=[]->Q5=[[n,Dep99_name]];Q5=[[n,Dep99_name],Q4|_]),findall1([v,V3],(member(V1,V2),atom_concat("a",V1,V3)),V),%trace,(V=[]->Q=[[n,Dep99_name]];Q=[[n,Dep99_name],V]),query_box(Q,_Query1,F,Functions1),%trace,%get_n_item(Functions1,Q,N2), x%N2=1,%XXXfindall1(N2,(((Q5=[NG],Q51=[NG|_])->true;Q51=Q5),%writeln([*,Q51,Q5]),get_n_item(Functions1,Q51,N2)),N2s),findall1(N22,(member(N21,N2s),N22 is N21-1),N22s),%*N1 is N2-1,convert_to_grammar_part1(Functions1,[],Functions2,_),add_line_numbers_to_algorithm1(Functions2,Functions2a),find_pred_numbers_to_cut(Functions2a,[],Pred_numbers),find_state_machine1(Functions2a,Functions3,Pred_numbers),%trace,a_to_m2(N22s,Functions3%2a%3,Pred_numbers,Functions2b),%trace,%/*findall1([NF,Arity,PN2],(member(PN1,Functions2b),member([NF,Arity,PN2],Pred_numbers),%member(PN1%(PN1=[loop1,PN11]->member(PN12,PN11);PN12=PN1),member(PN12,PN2)),Pred_numbers21),%Pred_numbers21=Pred_numbers2,%sort(Pred_numbers21,Pred_numbers2),%Pred_numbers21=Pred_numbers2,%*/%Pred_numbers2=Pred_numbers,%trace,findall1(NFAR,(member([NF,Arity,_],Pred_numbers2),length(Args,Arity),(Args=[]->NFAR=[NF|Rest];NFAR=[NF,Args|Rest]),member(NFAR,F)%,length(Args,Arity)),F21),%F21=F2,%sort(F21,F2),!.
find_deps1(D,Term,UR1,UR2,All1,All5) :- D=[D1|D2], find_deps2(D1,Term,[],UR3,All1,All3), ((flatten(UR3,UR22),UR22=[])->(UR23=[%D1 ]%,All2=[] );(UR23=%[[%D1| UR3%]]%,All2=[UR3]x )), append(UR1,UR23,UR31), %append(All1,All2,All4), find_deps1(D2,Term,UR31,UR2,All3,All5),!.
find_deps2([U,R],Term,UR1,UR2,All1,All2) :- Term=[[U1,R1,_,_]|T2], not([U,R]=[U1,R1]), find_deps2([U,R],T2,UR1,UR2,All1,All2),!.
find_files(A1,Mod_time_a) :-%trace,working_directory1(A,A),working_directory1(_,A),%repositories_paths(K),%omit_paths(Omit),%findall(Omit1,(member(Omit2,Omit),atom_string(Omit1,Omit2)),Omit3),/*K01=[[A1,[A1]]],%findall([A1,G4],(%member(K1,[A]),trace, %directory_files("./",F),%delete_invisibles_etc(F,G1),%delete(G1,"n.txt",G11),%findall(H,(member(H,G),not(string_concat("dot",_,H)),%subtract(G,Omit,G1),%findall(G3,(member(G2,G1),string_concat(G2,"/",G3)),G4)%not(member(G,Omit))%),K01),%trace,%foldr(append,K0,K01),working_directory1(Old_D,Old_D),findall(Tests1,(member([D,K31],K01),working_directory1(_,Old_D),working_directory1(_,D),*/%member(K2,K31),%exists_directory(K2),/*writeln1(process_directory_ff_tests_ff_ff_ff([A1],%K31,%_G, %Omit,% true, Tests1)), */ process_directory_ff([A1],%_G, %Omit,% true, Mod_time2),%),Mod_time) %),Mod_time2), foldr(append,Mod_time2,Mod_time), %foldr(append,Mod_time3,Mod_time), sort(Mod_time,Mod_time_a),  working_directory1(_,A) ,!.
find_first(A) :- A,!.
find_first_line_number(Number,Number) :- number(Number),!.
find_first_line_number([Statement|_],Number) :-%%trace,not((Statement=[Number|_],number(Number))),find_first_line_number(Statement,Number),!.
find_first_line_number([[Number|_]|_],Number) :- number(Number),!.
find_g1(T,G1,G2,R1,R2) :-%trace,T=[T1|T2],((T1=[L,%N,_T4],(L=r->true;L=o))->(find_g2(T1,[],R3),R3=[[[n, N]|_]|_],%get_var_num(N),append(R1,R3,R4),T1a=[[[n,N]]]);((%trace,T1=[nd,%N,T4]%,trace)->(findall(R3,(member(A1,T4),%%trace,find_g2([nd,[A1]],[],R3)),R31),%trace,R31=[[[[n, N]|_]|_]|_],findall([[[n, N]|Args]|B],member([[[n, _]|Args]|B],R31),%B1=[[[n, N3]|_Args]|_B2],replace_term(B1,[n,N3],[n,N],B)),R33),/*findall(B%[[[n, N]|Args]|B],(member(B1%[[[n, _]|Args]|B],R31),B1=[[[n, N3]|_Args]|_B2],replace_term(B1,[n,N3],[n,N],B)),R33),*/%trace,foldr(append,R33,R32),%get_var_num(N),append(R1,R32,R4),T1a=[[[n,N]]]))->true;(%string(T1),/*(T1a=[T1],R1=R4))),append(G1,[T1a],G3),find_g1(T2,G3,G2,R4,R2).
find_g2([],G,G) :-!.find_g2(T,G1,G2) :-%T=[T1|T2],T=[r,%N,T3],get_var_num(N),Name=[n,N],Arrow="->",Empty=[[]],find_g1(T3,[],G3,[],Rest),append(G3,[[Name]],G5),G4=[[Name,Arrow,Empty],[Name,Arrow,G5]|Rest],append(G1,G4,G2),%foldr(append,G2,G21),!.find_g2(T,G1,G2) :-%T=[T1|T2],T=[o,%N,T3],get_var_num(N),Name=[n,N],Arrow="->",Empty=[[]],find_g1(T3,[],G3,[],Rest),%append(G3,[[Name]],G5),G4=[[Name,Arrow,Empty],[Name,Arrow,G3]|Rest],append(G1,G4,G2),%foldr(append,G2,G21),!.
find_groups2(Ordered_pred_nums3,Ordered_pred_nums4,Ordered_pred_nums1,Ordered_pred_nums22) :-%writeln(find_groups2(Ordered_pred_nums3,Ordered_pred_nums4,Ordered_pred_nums1,Ordered_pred_nums22)), Ordered_pred_nums4=[Ordered_pred_nums41|Ordered_pred_nums42], (contains_loop(Ordered_pred_nums3,Ordered_pred_nums41,[],_)-> %append(P5,P6,Ordered_pred_nums4),%append([Ordered_pred_nums41],P7,P6),%P71=[%Ordered_pred_nums3|%P7],%trace, ((Ordered_pred_nums4=[Ordered_pred_nums43]->true; Ordered_pred_nums4=Ordered_pred_nums43),  ((Ordered_pred_nums43=[[AN|AN2]|_],number(AN))-> (find_groups([Ordered_pred_nums3,[AN|AN2]],[]%Ordered_pred_nums1 ,%[],%Ordered_pred_nums24, Ordered_pred_nums25,true), subtract(Ordered_pred_nums25,Ordered_pred_nums1,Ordered_pred_nums225),foldr(append,[Ordered_pred_nums225,Ordered_pred_nums1],Ordered_pred_nums24))  ; (%trace, %trace, %find_groups_replace_loops(%Ordered_pred_nums3, %Ordered_pred_nums1,Ordered_pred_nums1a),%P71,%Ordered_pred_nums1, in_or_exiting_loop(Ordered_pred_nums3,Ordered_pred_nums43,[],In_loop,[],%Ordered_pred_nums1, Exiting_loop%,[],Rest_of_preds ), %notrace,find_groups_replace_loops(%Ordered_pred_nums3, In_loop,%P71,%Ordered_pred_nums1, Ordered_pred_nums311),find_groups_replace_loops(%Ordered_pred_nums3, Exiting_loop,%P71,%Ordered_pred_nums1, Ordered_pred_nums312), flatten(Ordered_pred_nums311,Ordered_pred_nums321), flatten(Ordered_pred_nums312,Ordered_pred_nums322), append(Ordered_pred_nums321,[Ordered_pred_nums3],Ordered_pred_nums323),%trace,subtract(Ordered_pred_nums322,Ordered_pred_nums1,Ordered_pred_nums324),%subtract(Ordered_pred_nums1,Ordered_pred_nums322,Ordered_pred_nums111),%trace,insert_loop1([loop1,Ordered_pred_nums323],Ordered_pred_nums1,Ordered_pred_nums1b),list_to_set(Ordered_pred_nums1b,Ordered_pred_nums1c),foldr(append,[%Rest_of_preds,Ordered_pred_nums324,%[[loop1,Ordered_pred_nums323]],Ordered_pred_nums1c%P5,],Ordered_pred_nums251),%,notrace%reverse(Ordered_pred_nums251,Ordered_pred_nums261),%list_to_set(Ordered_pred_nums261,Ordered_pred_nums271),list_to_set(Ordered_pred_nums251,Ordered_pred_nums24)%reverse(Ordered_pred_nums271,Ordered_pred_nums24)%,notrace)),find_groups([Ordered_pred_nums3|Ordered_pred_nums42],Ordered_pred_nums24,Ordered_pred_nums22,true));(%(Ordered_pred_nums3=3->trace;true),%(member(Ordered_pred_nums3,Ordered_pred_nums1)->Ordered_pred_nums1=Ordered_pred_nums5;(number(Ordered_pred_nums3)->append([Ordered_pred_nums3],Ordered_pred_nums1,Ordered_pred_nums5);(Ordered_pred_nums3=[Ordered_pred_nums31|_]->(number(Ordered_pred_nums31)->append([Ordered_pred_nums31],Ordered_pred_nums1,Ordered_pred_nums5);Ordered_pred_nums1=Ordered_pred_nums5));Ordered_pred_nums1=Ordered_pred_nums5)),%notrace,find_groups(Ordered_pred_nums41,Ordered_pred_nums5,Ordered_pred_nums23,false),find_groups2(Ordered_pred_nums3,Ordered_pred_nums42,Ordered_pred_nums23,Ordered_pred_nums22))).
find_groups2(_,A,Ordered_pred_nums1,Ordered_pred_nums2) :-  (number(A)->A=B;(A=[B],number(B))), append([B],Ordered_pred_nums1,Ordered_pred_nums2),!.
find_header_args1(Vars,HA1,HA2) :-Vars=[_|F],Vars=[A,B|_],concat_list([A,B,","],D),string_concat(HA1,D,E),find_header_args1(F,E,HA2).
find_lists(T,T,L1,L2,_Start) :- number(T), %trace, append(L1,T,L2).
find_lists(T1,T2,L1,L2,_Start) :- length(T1,TL), length(T2,TL), check_same(T1,T2,L1,L2,true). check_same([],[],L,L,_) :- !.
find_lists(T1,T2,L1,L2,_Start) :- length(T1,TL1), length(T2,TL2), TL1 is TL2*2, length(A,TL2), append(A,B,T1), check_same(A,B,L1,L2,true), check_same(A,T2,L1,_,true).
find_lists(TT,L1,L2,_Start,TN1,TN2) :- %get_lang_word("t",T), %get_lang_word("number",Dbw_number), %/* (is_type(TT,"number",L1,L2,TN1,TN2)->true; (is_type(TT,"string",L1,L2,TN1,TN2)->true; (is_type(TT,"atom",L1,L2,TN1,TN2)))), !.
find_lists2(Heads,Sets1,Sets2) :-get_lang_word("t",Dbw_t),get_lang_word("brackets",Dbw_brackets),get_lang_word("list",Dbw_list), Heads=[Head|Heads2], %trace, get_type1(Head,Type),  (Type=brackets-> (%findall(Heads3,Heads=[[[Dbw_t, Dbw_brackets]|Heads3]|_],Heads4), findall(Heads3,member([[Dbw_t, Dbw_brackets],Heads3],Heads),Heads4),  %trace, ((forall((%trace, member(H,Heads4), H=[Head1|_]%member(H1,H), %member(Head1,H) ),get_type1(Head1,brackets)), %trace, Heads4=Heads42,  not(maplist(is_empty_list,Heads42)) )-> (%trace,%findall(Head1,member([Head1],Heads4),Heads41), find_lists2(Heads42,[],Sets4), L2=[[Dbw_t, Dbw_list],Sets4], append(Sets1,L2,Sets31), _List_of_lists=true%Heads42=Heads41    ); (%trace,  List_of_lists=false,%Heads42=Heads4),  %findall(H2,member([H2],Heads4),Heads42)  Heads4=Heads42, %(%trace, %Heads=[[[Dbw_t, Dbw_brackets]|Heads4]|_H5], test_lists(Heads42,L,CFLM),%,Heads5 %trace, (CFLM=single%false%length(L,1) ->L1=[[Dbw_t, Dbw_brackets],L];L1=[[Dbw_t, Dbw_list],L]), (List_of_lists=true->L2=[[Dbw_t, Dbw_list],L1];L2=L1), append(Sets1,L2,Sets31))), %foldr(append,Sets31,Sets3) Sets31=Sets3 );  (Type=brackets2,%findall(Heads3,Heads=[[[Dbw_t, Dbw_brackets]|Heads3]|_],Heads4), %findall(Heads3,member([Heads3],Heads),Heads4), %Heads4=Heads, %((%trace,%false, %* %trace, findall(Heads3,member(Heads3,Heads),Heads4), %trace, %Heads4=Heads, %((  %false,  % replace any top level brackets with lists (1) - here true if no top level brackets - in 2nd consequent (1) x just process them  %find_lists3(Heads4,Sets1,Sets2) (( Heads4=Heads42, % if detects brackets  not(maplist(is_empty_list,Heads42)) )-> (%trace,%findall(Head1,member([Head1],Heads4),Heads41), %foldl( find_lists2(Heads42,[],Sets4), L2=[[Dbw_t, Dbw_list],Sets4], append(Sets1,L2,Sets31), _List_of_lists=true%Heads42=Heads41    ); (%trace,  List_of_lists=false,%Heads42=Heads4),  %findall(H2,member([H2],Heads4),Heads42)  Heads4=Heads42, %(%trace, %Heads=[[[Dbw_t, Dbw_brackets]|Heads4]|_H5], test_lists(Heads42,L,CFLM),%,Heads5 %trace, (CFLM=single%false%length(L,1) ->L1=[[Dbw_t, Dbw_brackets],L];L1=[[Dbw_t, Dbw_list],L]), (List_of_lists=true->L2=[[Dbw_t, Dbw_list],L1];L2=L1), append(Sets1,L2,Sets31))), %foldr(append,Sets31,Sets3) Sets31=Sets3 )->true ; (forall(member(Head1,Heads2),get_type1(Head1,Type)), findall(N,(member([_,_,N],Heads)),Ns), Ns=[N1|_], append(Sets1,[Dbw_t,Type,N1],Sets3))), %append(Sets1,[[[Dbw_t, Dbw_list],L]],Sets3))))), Sets3=Sets2.
find_lists3(Heads4,Heads51,Heads52) :-%trace, get_lang_word("t",Dbw_t), get_lang_word("brackets",Dbw_brackets), get_lang_word("list",Dbw_list), findall(Head,member([Head|_],Heads4),Heads7), findall(Tail,member([_|Tail],Heads4),Tails7), Heads7=[Heads8|Heads9], %Heads4=[Heads5|Heads6], get_type1(Heads8,Type), forall(member(Heads10,Heads9), get_type1(Heads10,Type)),  ((Type=brackets-> find_lists3(Heads7,[],Heads11), %T=[[n,]] (length(Heads7,1)-> T=[[[Dbw_t,Dbw_brackets],Heads11]];T=Heads11), find_lists3(Tails7,[],Tails11), foldr(append,[Heads51,T,Tails11],Heads52))->true; ((Type=brackets2-> find_lists3(Heads7,[],Heads11), %T=[[n,]] (length(Heads7,1)-> T=[[[Dbw_t,Dbw_brackets],Heads11]];T=Heads11), find_lists3(Tails7,[],Tails11), foldr(append,[Heads51,T,Tails11],Heads52))->true;  (%test_lists find_lists2(Heads7,L,CFLM), find_lists3(Tails7,[],Tails11), (CFLM=single%false%length(L,1) ->L1=[[Dbw_t, Dbw_brackets],L];L1=[[Dbw_t, Dbw_list],L]), %(List_of_lists=true->L2=[[Dbw_t, Dbw_list],L1];L2=L1), %append(Sets1,L2,Sets31))), foldr(append,[Heads51,L1,Tails11],Heads52)))).
find_lists3(L1,L2,L3,Rest) :-%trace,repeating_unit(L1,U,Rest),(U=[r,U1]->%find_lists3(U1,[],U2);try(U1,U2);U2=U),append(L2,[[r,U2]],L3).
find_loop1(D3,E1,B1,X1,X2,C,N3,N2) :- find_loop(D3,E1,B1,X1,X2,C,N3,N2).
find_loop1(_D3,_E1,C,X,X,C,N,N).
find_peak_height(H1,S,H) :- string_codes(S,C), fph(H1,C,[],H2), sort(H2,H3), append(_,[H],H3),!.
find_pos("plus",a,_) :- !.
find_pos(Item,POS2,BrDict012) :-POS1="plus",member([Item,POS1],BrDict012),POS2=a,!.
find_pos(Item,POS2,BrDict012) :-member([Item,POS1],BrDict012),POS1="plus",POS2=a,!.
find_pos(Item,POS2,BrDict012) :-member([Item,POS1],BrDict012),POS1="plus",POS2=a,!.find_pos(_Item,POS2,_BrDict012) :-POS2=n.
find_pos(Item,POS2,BrDict012) :-member([Item,POS1],BrDict012),POS1="right",POS2=v,!.
find_pos(_Item,POS2,_BrDict012) :-POS2=n.
find_pred_numbers_dependencies(Algorithm1,Deps1,Deps2,Pred_numbers) :-Algorithm1=[Function1|Functions],(Function1=[Number,_Name,_Arguments1,_Symbol1,Body1]->%symbol(Symbol1,Symbol2),(%trace,find_deps3(Body1,%Body2,%[],Body2,Pred_numbers,Deps3),foldr(append,Deps3,Deps31),append(Deps1,[[Number,%Name,Arguments1,Symbol1,Body2Deps31]],Deps4)),find_pred_numbers_dependencies(Functions,Deps4,Deps2,Pred_numbers)),!.
find_pred_sm(RW,"en"),writeln1(RW).
find_pred_sm(Reserved_words1,_),writeln(Reserved_words1).
find_repeating_structures1(Position1,Position2,Length1,Length2,List,List1,List2) :-List=[List3|List4],length(List3,L),truncate_l(L,Position2,Position22),truncate_l(L,Length2,Length22),find_repeating_structures2(Position1,Position22,Length1,Length22,List3,List5),append(List1,[List5],List6),find_repeating_structures1(Position1,Position2,Length1,Length2,List4,List6,List2).
find_rev(Dir,D_code,V,V1) :- Dir=r, get_var_at(V1), D_code=[[[n,reverse],[V,V1]]].
find_rule_name(RuleName0,RuleName2) :-not(RuleName0=[_,_RuleName1]),RuleName2=RuleName0.
find_sl_21(T21,T6) :- string_concat(T4,T5,T21),%trace, string_length(T5,2), foldr(string_concat,["[","\n",T4,"\n","]"],T6).
find_spaces_after(A,"",A) :- !.
find_spaces_after(A,A,"") :-string_chars(A,A1),findall(A2,(member(A3,A1),atom_string(A3,A2)),A4),forall(member(A5,A4),is_space(A5)),!.
find_spaces_before(A,"",A) :- !.
find_spaces_before(A,A,"") :-string_chars(A,A1),findall(A2,(member(A3,A1),atom_string(A3,A2)),A4),forall(member(A5,A4),is_space(A5)),!.
find_state_machine2(Algorithm1,Algorithm2,Algorithm3,Pred_numbers) :-Algorithm1=[Function1|Functions],((Function1=[Number,Name,Arguments1,Symbol1,Body1],symbol(Symbol1,Symbol2),findall(Arguments3,(member(Arguments2,Arguments1),slp2lp_variables(Arguments2,Arguments3)),Arguments4),find_state_machine_body2(Body1,Body2,-2,-3,Pred_numbers),append(Algorithm2,[[Number,Name,Arguments4,Symbol2,Body2]],Algorithm4))/*->true;((Function1=[Number,Name,Symbol1,Body1],symbol(Symbol1,Symbol2),find_state_machine_body2(Body1,Body2,-2,-3,Pred_numbers),append(Algorithm2,[[Number,Name,[],Symbol2,Body2]],Algorithm4))->true;((Function1=[Number,Name,Arguments1],symbol(Symbol1,Symbol2),findall(Arguments3,(member(Arguments2,Arguments1),slp2lp_variables(Arguments2,Arguments3)),Arguments4),append(Algorithm2,[[Number,Name,Arguments4,Symbol2,[[[n,true]]]]],Algorithm4))->true;(Function1=[Number,Name],symbol(Symbol1,Symbol2),append(Algorithm2,[[Number,Name,[],Symbol2,[[[n,true]]]]],Algorithm4))))*/),%%writeln1([Number,Name,Arguments4,Symbol2,Body2]),%%trace,find_state_machine2(Functions,Algorithm4,Algorithm3,Pred_numbers).
find_sums_in_term(F1, F3, F33) :-    sort(F1, F12),    %F13 = [[Add, _T] | _F4],    %append(Add2, [_Last], Add),    %append(Add2, [_], Add3),    %F1 = F12,    member([Add3, T2], F12),    append(Add4, [Last], Add3),    append(Add4, [_], Add5),    findall(Add5, member([Add5, _T3], F12), Add61),    sub_term_wa(Add5, Add61, Formula_Instances1),    find_2_steps(Last, Formula_Instances1, [], Formula_Instances2),    foldr(put_sub_term_wa_ae, Formula_Instances2, Add61, F132),    findall([ZZ, ZZ2], (member(ZZ, F132), member([ZZ, ZZ2], F12)), ZZ3),    subtract(F1, ZZ3, F35),foldr(append, [%F35, %[[Add3, T2]], ZZ3], F34),foldr(append, [%F35, %[[Add3, T2]], [ZZ3]], F341), %trace,%append(F3, F341, F331),append(F3,F341,F331),    ((sort(F3, L), sort(F341, L)) -> F33=F331;%append(F3,F341,F33);    find_sums_in_term(F35, F331, F33)), !.
find_sums_in_term(F1,%F2,F3,F33) :-sort(F1,F13),%reverse(F13,F14),F13=[[Add,_T]|_F4],append(Add2,[_Last],Add),append(Add2,[_],Add3),%reverse(F1,F12),F1=F12,member([Add3,T2],F12),append(Add4,[Last],Add3),append(Add4,[_],Add5),%delete(F12,[Add3,T2],F131),findall(Add6,member([Add6,_T3],F12),Add61),sub_term_wa(Add5, Add61%F12, Formula_Instances1),%trace,find_2_steps(Last,%F12,%Formula_Instances1,[],Formula_Instances2),foldr(put_sub_term_wa_ae,Formula_Instances2,Add61%F131,F132),findall([ZZ,ZZ2],(member(ZZ,F132),member([ZZ,ZZ2],F12)),ZZ3),%trace,subtract(F1,%Formula_Instances1,ZZ3,F35%Formula_Instances3),foldr(append,[F35,%F3,[[Add3,T2]],[ZZ3]],F34),((sort(F1,L),sort(F34,%Formula_Instances3,L))->F34=Formula_Instances3;find_sums_in_term(Formula_Instances3,F34,F33)),!.
find_tails(V1,V2,V3) :- V1=[[G,Val1]|V4], find_tails1([G,Val1],V4,V2,V3),!. find_tails1([G,Val1],[],V1,V2) :- append(V1,[[G,Val1]],V2),!.
findall(F,L,M1,N) :- not((=(L,[]))),head(L,H),tail(L,T),functor(A,F,2),arg(1,A,H),arg(2,A,M2),(A->((wrap(M2,M3),append(M1,M3,M4)));(=(M1,M4))),findall(F,T,M4,N).
findall(F,L,M1,N) :- not((=(L,[]))),head(L,H),tail(L,T),functor(A,F,2),arg(1,A,H),arg(2,A,M2),(A->((wrap(M2,M3),append(M1,M3,M4)));(=(M1,M4))),findall(F,T,M4,N).intersection1([],_A,L,L).intersection1(L1,L2,L3a,L3) :- head(L1,I1),tail(L1,L4),intersection2(I1,L2,[],L5),append(L3a,L5,L6),intersection1(L4,L2,L6,L3).
findall(_F,[],L,L).
findall2(A,B,C) :- A=[D|E],member(F,D),append(B,[F],G),findall2(E,G,C).
findbest2(R,Item):-sort(R,RA),reverse(RA,RB),RB=[[_,Item]|_Rest].
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=1645,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?%%repeat,trialy2(Notes,R1),findbest(R1,N2),versechorussoloprogression1645(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),versechorussoloprogression1645(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=1645,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat,mind_read(N2,Notes),versechorussoloprogression1645(N1,N2,Progression),mind_read(Progression2,Progression),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),versechorussoloprogression1645(N1,N2,Progression3),mind_read(Progression4,Progression3),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=1645,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat,trialy2(Notes,R1),findbest(R1,N2),versechorussoloprogression1645(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),versechorussoloprogression1645(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classical,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?%%repeat,trialy2(Notes,R1),findbest(R1,N2),classicalcomposition(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),classicalcomposition(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classical,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat,mind_read(N2,Notes),classicalcomposition(N1,N2,Progression),mind_read(Progression2,Progression),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),classicalcomposition(N1,N2,Progression3),mind_read(Progression4,Progression3),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classical,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat,trialy2(Notes,R1),findbest(R1,N2),classicalcomposition(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),classicalcomposition(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classicalpop,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?%%repeat,trialy2(Notes,R1),findbest(R1,N2),popclassicalcomposition(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),popclassicalcomposition(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classicalpop,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat,mind_read(N2,Notes),popclassicalcomposition(N1,N2,Progression),mind_read(Progression2,Progression),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),popclassicalcomposition(N1,N2,Progression3),mind_read(Progression4,Progression3),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classicalpop,(CPT=1451->findall(A,note0(_,A),Notes);findall(A,note0(_,A),Notes)),%% What note should the phrase end on?repeat,trialy2(Notes,R1),findbest(R1,N2),popclassicalcomposition(N1,N2,Progression),trialy2(Progression,R2),findbest(R2,Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),popclassicalcomposition(N1,N2,Progression3),trialy2(Progression3,R3),findbest(R3,Progression4),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT='1645',repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT='1645',repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _End21, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _End2, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classical,repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classicalpop,repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classical,repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _End21, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _End2, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findmelody(Form,CPT,_Parts,_N1,_N2,Melody1,Melody2,Harmony1,Harmony2) :-CPT=classicalpop,repeat,writeln(["Please enter melody line for form",Form,"in format e.g. four notes from [d,di,r,ri,m,f,fi,s,si,l,li,t]."]),read_string(user_input, "\n", "\r", _End21, Progression2B),atom_to_term(Progression2B,Progression2A,_),solfatonotes(Progression2A,[],Progression2),not(Progression2=[]),append(Melody1,[[Form,Progression2]],Melody2),%%versechorussoloprogression1451(N1,N2,Progression3),%%trialy2(Progression3,R3),%%findbest(R3,Progression4),repeat,writeln(["Please enter harmony line in format e.g. four notes from ['C','E','G'] for",Form,"."]),read_string(user_input, "\n", "\r", _End2, Progression4A),atom_to_term(Progression4A,Progression4,_),harmony(Form,CPT,Progression4,Harmony1,Harmony2).
findnsols1(B,WN,Sent,DB,Chain4)),T),%sort(Chain2,Chain3)%Chain2=Chain3),F),%sort(F,F1)%F=F1%), %member(P,F1)%trace,%pp(Chain3,P)writeln1(T),!%,Chain2).
findprogram(FunctionName,Relations,FunctionNumber1,Program1,Program2) :-%%findprogram2(Relations,FunctionNumber1,1,[],Vars,[],Header,[],Body1),        input1arguments(Relations,FunctionNumber1,1,[[undef,[v,"`"]]],Vars1,[],Header1,[],TypeStatements1),inputs2arguments(Relations,FunctionNumber1,1,Vars1,Vars2,[],Header2,[],TypeStatements2),deleteduplicates2(TypeStatements1,TypeStatements2,TypeStatements3),%trace,outputarguments(Relations,FunctionNumber1,1,Vars2,Vars3,[],Header3),        extrasarguments(Relations,FunctionNumber1,1,Vars3,_Vars4,[],Header4),(not(Header4=[])->makecode(FunctionName,Header1,TypeStatements1,TypeStatements3,Header2,Header3,Code1);        makecode(FunctionName,Header1,TypeStatements1,TypeStatements3,Header2,Header3,Header4,Code1)),%%processcode(append(Program1,Code1,Program3),FunctionNumber2 is FunctionNumber1 + 1,findprogram(FunctionName,Relations,FunctionNumber2,Program3,Program2).input1arguments(_Relations,_FunctionNumber,3,Vars,Vars,Header,Header,TypeStatements,TypeStatements).
findr(R4,List,R) :-%%floor(R4,R4A),length(A,R4),append(A,[R|_],List).
findr(R4,List,R) :-%%floor(R4,R4A),length(A,R4),append(A,[R|_],List).%%random_member(A,List),%%R=[[_,A]]./**length(List,L),Trials is L*3,trialy22(List,Trials,[],R).**/trialy22([],_,R,R) :- !.trialy22(List,Trials,RA,RB) :-List=[Item|Items],trialy21(Item,Trials,R1),append(RA,[R1],RC),trialy22(Items,Trials,RC,RB),!.
findresult3(Arguments1,Result1,Result2,Result3) :-Arguments1=[Value|Arguments2],expression_not_var(Value),append(Result2,[Value],Result4),        findresult3(Arguments2,Result1,Result4,Result3),!.
findresult3(Arguments1,Result1,Result2,Result3) :-Arguments1=[Value|Arguments2],expressionnotatom(Value),append(Result2,[Value],Result4),        findresult3(Arguments2,Result1,Result4,Result3).
findresult3(Arguments1,Result1,Result2,Result3) :-Arguments1=[Value|Arguments2],expressionnotatom3(Value),append(Result2,[Value],Result4),        findresult3(Arguments2,Result1,Result4,Result3),!.
findresult3(Arguments1,Result1,Result2,Result3) :-        Arguments1=[Variable|Arguments2],(equals4(on)->(get_lang_word("v",Dbw_v),remember_and_turn_off_debug(Debug),find_sys(Sys_name),        interpretpart(match4,Variable,[Dbw_v,Sys_name],Result1,Vars3,_), turn_back_debug(Debug),getvalue([Dbw_v,Sys_name],Value,Vars3));(        isvar(Variable),member([Variable,Value],Result1))),        append(Result2,[Value],Result4),        findresult3(Arguments2,Result1,Result4,Result3),!.
findresult3(Arguments1,Result1,Result2,Result3) :-        Arguments1=[Variable|Arguments2],        isvar(Variable),member([Variable,Value],Result1),        append(Result2,[Value],Result4),        findresult3(Arguments2,Result1,Result4,Result3).
findresult3(Arguments1,Result1,Result2,Result3) :-        Arguments1=[Variable|Arguments2],        isvar(Variable),member([Variable,Value],Result1),        append(Result2,[Value],Result4),        findresult3(Arguments2,Result1,Result4,Result3),!.
findrulesflowingtopv1(Program0,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-(Var=[v,_]),%%***;length(Var,1)),findrulesflowingtopv20(Program0,Program0,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1).
findrulesflowingtopv1(Program0,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-(atom(Var);length(Var,1)),findrulesflowingtopv20(Program0,Program0,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1).
findrulesflowingtopv1(Program0,InputVars1,InputVars2,Vars1,Rules1,Rules2,IV1Flag1) :-Vars1=[Var|Vars2],findrulesflowingtopv20(Program0,Program0,InputVars1,InputVars2,Var,Rules1,Rules3,IV1Flag2), findrulesflowingtopv1(Program0,InputVars1,InputVars2,Vars2,Rules3,Rules2,IV1Flag3),iv1flagdisjunction(IV1Flag2,IV1Flag3,IV1Flag1).
findrulesflowingtopv1(_,_,_,[],Rules,Rules,false).
findrulesflowingtopv1(_,_,_,[],Rules,Rules,false).findrulesflowingtopv1(Program0,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-(Var=[v,_]),%%***;length(Var,1)),findrulesflowingtopv20(Program0,Program0,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1).
findrulesflowingtopv1a(Program1,Program2,InputVars1,InputVars2,Var,Rules1,Rules2) :-atom(Var),findrulesflowingtopv2a(Program1,Program2,InputVars1,InputVars2,Var,Rules1,Rules2).
findrulesflowingtopv1a(Program1,Program2,InputVars1,InputVars2,Vars1,Rules1,Rules2) :-Vars1=[Var|Vars2],findrulesflowingtopv2(Program1,Program3,InputVars1,InputVars2,Var,Rules1,Rules3),findrulesflowingtopv1a(Program3,Program2,InputVars1,InputVars2,Vars2,Rules3,Rules2).
findrulesflowingtopv1a(_,_,_,_,[],Rules,Rules).
findrulesflowingtopv2(Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[[n,_PredicateName],Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program2),%%Program2=Program1,%%(not(intersection(Rulesx,Rules1))-> x%% append, append, unique1%%append(Rules1,[Rule],Rules3);Rules3=Rules1),%%member(Var2,Rest),%%member(Var2,InputVars1),length(Rest,Length1), Length1>=1,subtract(Rest,InputVars1,IV3s),length(IV3s,Length3),subtract(Rest,IV3s,IV1s),length(IV1s,Length2), Length2>=1,subtract(IV3s,InputVars2,[]),IV1Flag2=true,%%delete(Program0,Rule,Program1),%%(delete(Program0,Rule,Program3),%%iv3s1(IV3s,Program3,IV3s,[]),(Length3>=1->(findrulesflowingtopv1(Program0,InputVars1,InputVars2,IV3s,[],Rules5,IV1Flag3),not(Rules5=[]));(Rules5=[],IV1Flag3=false)),iv1flagdisjunction(IV1Flag2,IV1Flag3,IV1Flag4),%%->true; Rules5=[],IV1Flag1=IV1Flag4),((findrulesflowingtopv1(Program0,InputVars1,InputVars2,IV1s,[],Rules6,IV1Flag5), %%iv1s->rest, etciv1flagdisjunction(IV1Flag4,IV1Flag5,IV1Flag1))->true;(Rules6=[],IV1Flag1=IV1Flag4)),append([Rule],Rules1,Rules9),append(Rules9,Rules5,Rules7),append(Rules7,Rules6,Rules8),unique1(Rules8,[],Rules2).
findrulesflowingtopv2(Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rule=[_PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program2),%%Program2=Program1,%%(not(intersection(Rulesx,Rules1))-> x%% append, append, unique1%%append(Rules1,[Rule],Rules3);Rules3=Rules1),%%member(Var2,Rest),%%member(Var2,InputVars1),length(Rest,Length1), Length1>=1,subtract(Rest,InputVars1,IV3s),length(IV3s,Length3),subtract(Rest,IV3s,IV1s),length(IV1s,Length2), Length2>=1,subtract(IV3s,InputVars2,[]),IV1Flag2=true,%%delete(Program0,Rule,Program1),%%(delete(Program0,Rule,Program3),%%iv3s1(IV3s,Program3,IV3s,[]),(Length3>=1->(findrulesflowingtopv1(Program0,InputVars1,InputVars2,IV3s,[],Rules5,IV1Flag3),not(Rules5=[]));(Rules5=[],IV1Flag3=false)),iv1flagdisjunction(IV1Flag2,IV1Flag3,IV1Flag4),%%->true; Rules5=[],IV1Flag1=IV1Flag4),((findrulesflowingtopv1(Program0,InputVars1,InputVars2,IV1s,[],Rules6,IV1Flag5), %%iv1s->rest, etciv1flagdisjunction(IV1Flag4,IV1Flag5,IV1Flag1))->true;(Rules6=[],IV1Flag1=IV1Flag4)),append([Rule],Rules1,Rules9),append(Rules9,Rules5,Rules7),append(Rules7,Rules6,Rules8),unique1(Rules8,[],Rules2).
findrulesflowingtopv2(Rule,Program0,Program1,_Program2,InputVars1,InputVars,Var,Rules1,Rules2,IV1Flag1) :-Rule=[PredicateName,Vars],restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program4),%%Program4=Program1,append(Rules1,[[PredicateName,Vars]],Rules3),findrulesflowingtopv1(Program0,Program1,_Program2,InputVars1,InputVars,Rest,Rules3,Rules2,IV1Flag3),iv1flagdisjunction(IV1Flag2,IV1Flag3,IV1Flag1).
findrulesflowingtopv20(Program0,Rules4,InputVars1,InputVars2,Var,Rules1,Rules2,IV1Flag1) :-Rules4=[Rule|Rules],(findrulesflowingtopv2(Program0,Rule,InputVars1,InputVars2,Var,Rules1,Rules3,IV1Flag2)->true;(Rules3=Rules1,IV1Flag2=false)),%%delete(Program0,Rule,Program1),findrulesflowingtopv20(Program0,Rules,InputVars1,InputVars2,Var,Rules3,Rules2,IV1Flag3),%%p1->0iv1flagdisjunction(IV1Flag2,IV1Flag3,IV1Flag1).
findrulesflowingtopv20(_,[],_InputVars1,_InputVars2,_Var,Rules,Rules,false).
findrulesflowingtopv2a(Program1,Program2,InputVars1,InputVars,Var,Rules1,Rules2) :-member([PredicateName,Vars],Program1),restlast(Vars,[],Rest,Var),%%delete(Program1,[PredicateName,Vars],Program4),Program4=Program1,append(Rules1,[[PredicateName,Vars]],Rules3),findrulesflowingtopv1a(Program4,Program2,InputVars1,InputVars,Rest,Rules3,Rules2).
findrulesflowingtopv2a(Program1,Program2,InputVars1,InputVars2,Var,Rules1,Rules2) :-member([PredicateName,Vars],Program1),restlast(Vars,[],Rest,Var),(%%delete(Program1,[PredicateName,Vars],Program3),Program3=Program1,append(Rules1,[[PredicateName,Vars]],Rules3),subset(Rest,InputVars2)),findrulesflowingtopv1a(Program3,Program2,InputVars1,InputVars2,Rest,Rules3,Rules2).
findrulesflowingtopv2a(Program1,Program2,_InputVars1,InputVars2,Var,Rules1,Rules2) :-member([PredicateName,Vars],Program1),restlast(Vars,[],Rest,Var),(%%delete(Program1,[PredicateName,Vars],Program2),Program2=Program1,append(Rules1,[[PredicateName,Vars]],Rules2),subset(Rest,InputVars2)).
findrulesflowingtopv2a([],[],_,_,_,Rules,Rules).
findrulesflowingtopv2a([],[],_,_,_,Rules,Rules).findrulesflowingtopv2a(Program1,Program2,_InputVars1,InputVars2,Var,Rules1,Rules2) :-member([PredicateName,Vars],Program1),restlast(Vars,[],Rest,Var),(%%delete(Program1,[PredicateName,Vars],Program2),Program2=Program1,append(Rules1,[[PredicateName,Vars]],Rules2),subset(Rest,InputVars2)).
fire_lab( [ [0,0,0,[*]],[0,1,0,[*]],[0,2,0,[*]],[0,3,0,[*]],[0,4,0,[*]], [0,0,1,[*]],[0,1,1,[*]],[0,2,1,[*]],[0,3,1,[*]],[0,4,1,[*]], [0,0,2,[*]],[0,1,2,[*]],[0,2,2,[*]],[0,3,2,[*]],[0,4,2,[*]], [1,0,0,[*]],[1,1,0,[*]],[1,2,0,[*]],[1,3,0,[*]],[1,4,0,[*]], [1,0,1,[*]],[1,1,1,[oh]],[1,2,1,[fm]],[1,3,1,[ofh]],[1,4,1,[*]], [1,0,2,[*]],[1,1,2,[*]],[1,2,2,[*]],[1,3,2,[*]],[1,4,2,[*]],  [2,0,0,[*]],[2,1,0,[*]],[2,2,0,[*]],[2,3,0,[*]],[2,4,0,[*]], [2,0,1,[*]],[2,1,1,[*]],[2,2,1,[*]],[2,3,1,[*]],[2,4,1,[*]], [2,0,2,[*]],[2,1,2,[*]],[2,2,2,[*]],[2,3,2,[*]],[2,4,2,[*]] ]).%% 1,1,1 start/**[debug]  ?- traverse(1,1,1).[1,1,1][oh][1,2,1][oh,fm,f][1,3,1][oh,fm,f,ofh,fcre]Game Over% Execution Aborted**/traverse(Z,X,Y) :-traverse(Z,X,Y,[],_,[],_),!.
first_column([[X|Xs]|Rows], [X|Col], [Xs|RestRows]) :-    first_column(Rows, Col, RestRows).
first_column([], [], []).
first_n_words(String1,Words1,String2a,String2b) :-String1=[String3|String4],(not((string_length(String3,2),string_concat(A,B,String3),string_length(B,1),A="‡"))),append(String2a,[String3],String5),Words2 is Words1-1,first_n_words(String4,Words2,String5,String2b),!.
first_n_words(String1,Words1,String2a,String2b) :-String1=[String3|String4],string_length(String3,2),string_concat(A,B,String3),string_length(B,1),A="‡",append(String2a,[B],String5),first_n_words(String4,Words1,String5,String2b),!.
first_n_words(_String1,0,String,String) :- !.first_n_words(String1,Words1,String2a,String2b) :-String1=[String3|String4],string_length(String3,2),string_concat(A,B,String3),string_length(B,1),A="‡",append(String2a,[B],String5),first_n_words(String4,Words1,String5,String2b),!.
first_technique("almond","drupe").
first_technique("apple","pome").
first_technique("cherry","drupe").
first_technique("peach","drupe").
first_technique("pear","pome").
first_technique("pecan","drupe").
first_technique("plum","drupe").
first_technique("raspberry","aggregate fruit").
first_technique("walnut","drupe").
flag1(Items, Flag, Progression) :-flag2(Items, Flag, [], Progression), !.
flag1([], b, []) :- !.
flag2([[a,Progression1]|Items], _, Progression2, Progression3) :-append(Progression2, [Progression1], Progression4),flag2(Items, _, Progression4, Progression3).
flag2([[b,_]|Items], _, Progression2, Progression3) :-flag2(Items, _, Progression2, Progression3).
flag2([], a, Progression, Progression) :- !.
flatten1(A,B) :- flatten2(A,[],B),!.
flatten1(A,B):-flatten2(A,[],B).
flatten2(A,B,C):-(not((A=[A1|A2]->true;A=[]))->append(B,[A],C);(A=[D|E],flatten2(D,B,F),flatten2(E,F,C))).
flatten2(A,B,C,G,H) :- (not(is_list(A))->(append(B,[A],C),; (A=[D|E],flatten(D,D1),(D=D1->append(G,[D) flatten2(D,B,F), flatten2(E,F,C))),!.*/:-dynamic garbage_token_number/1.% put in ssi at start%/*get_garbage_token(G) :- garbage_token_number(G), retractall(garbage_token_number(_)), G1 is G+1, assertz(garbage_token_number(G1)),!.
flatten2([],B,B).
flatten_except_loops1(A,B) :- flatten_except_loops2(A,[],B,false).
flatten_except_loops2(A,B,C,First) :- (not(is_list(A))->append([],[A],C); (A=[D|E], (D=[loop,_]->(append([],[D],F)%,Flag=nowrap ); ((D=[D1],number(D1))->(append([],[D1],F)%,Flag=nowrap ); (flatten_except_loops2(D,[],F,true)%,Flag=wrap ))), %(Flag=wrap->append([],[F],C2);append([],F,C2)),  flatten_except_loops2(E,F,C1,false), (First=true%Flag=wrap ->append(B,[C1],C);append(B,C1,C)))),!.
flatten_join2(A,B,C) :- (not(is_list(A))->append(B,[A],C); ((A=[[Atom,[_]]],atom(Atom))->append(B,A,C); ((A=[Atom,[_]],atom(Atom))->append(B,[A],C); (A=[D|E],flatten_join2(D,B,F), flatten_join2(E,F,C))))),!.
flatten_keep_brackets(A,B) :- flatten_keep_brackets2(A,[],B,true), !.
flatten_keep_brackets2([],B,B,_) :- !.flatten_keep_brackets2(A,B,C,First) :- (not(is_list(A))->append(B,[A],C); (%trace,%length(A,AL), A=[D|E],flatten_keep_brackets2(D,[],F,true), %trace, %((A=[A1],only_item(A1))->Flag=true;Flag=false), flatten_keep_brackets2(E,[],C1,false), (First=true->foldr(append,[B,["["],F,C1,["]"]],C); foldr(append,[B,F,C1],C)))),!.
flatten_var_term([],Vars,Vars%,_) :- !.flatten_var_term(Term,Vars1,Vars2%,Start) :-not(Term=[v,_]),Term=[Term1|Term2],flatten_var_term(Term1,[],Vars3%,true),append(Vars1,Vars3,Vars4),flatten_var_term(Term2,Vars4,Vars2%,false),!.
flipxy(Grid1,Grid2,Grid3) :-Grid1 = [Coord1 | Coords],Coord1 = [X, Y, M],Coord2 = [Y, X, M],append(Grid2,[Coord2],Grid4),flipxy(Coords,Grid4,Grid3).
flipxy_3d(Grid1,Grid2,Grid3) :-Grid1 = [Coord1 | Coords],Coord1 = [X, Y, Z, M],Coord2 = [Z, Y, X, M],append(Grid2,[Coord2],Grid4),flipxy_3d(Coords,Grid4,Grid3).
flipxy_orig_3d(Grid1,Grid2,Grid3) :-Grid1 = [Coord1 | Coords],Coord1 = [X, Y, Z, M],Coord2 = [Y, X, Z, M],append(Grid2,[Coord2],Grid4),flipxy_orig_3d(Coords,Grid4,Grid3).
flush_after_last_findall(Choice_point_trail1,Choice_point_trail2,CP_Vars1,CP_Vars2) :-reverse(Choice_point_trail1,Choice_point_trail14),member([A1,A2,_,_,_,_,"findall",_|_],Choice_point_trail14),%_D11=[_,_,_,_,"findall",_|_],%trace,get_later_cps_than_cp11(Choice_point_trail1,[A1,A2,_,_,_,_,"findall",-|_],_D1,B),%trace,delete_cp2(Choice_point_trail1,B,Choice_point_trail2,CP_Vars1,CP_Vars2).%subtract(Choice_point_trail1,B,Choice_point_trail2).
fna(1,A1,_A2,B) :- reverse(A1,[],B),write1([[n,reverse],[A1,[],B]]).
fna(1,A1,_A2,B) :- reverse(A1,[],B),writeln1([[n,reverse],[A1,[],B]]),term_to_atom(A1,A11),term_to_atom(B,B1),concat_list(["I reversed ",A11,", giving ",B1,"."],C),writeln1(C).
fna(3,A1,A2,B) :- append1(A1,A2,B),write1([[n,append1],[A1,A2,B]]).
fna(3,A1,A2,B) :- append1(A1,A2,B),writeln1([[n,append1],[A1,A2,B]]),term_to_atom(A1,A11),term_to_atom(A2,A21),term_to_atom(B,B1),concat_list(["I appended ",A11," to ",A21,", giving ",B1,"."],C),writeln1(C).
fna(4,A1,A2,B) :- minus1(A1,A2,B),write1([[n,minus1],[A1,A2,B]]).fna(5,A1,A2,B) :- intersection1(A1,A2,[],B),write1([[n,intersection1],[A1,A2,[],B]]).
fna(4,A1,A2,B) :- minus1(A1,A2,B),writeln1([[n,minus1],[A1,A2,B]]),term_to_atom(A1,A11),term_to_atom(A2,A21),term_to_atom(B,B1),concat_list(["I subtracted ",A21," from ",A11,", giving ",B1,"."],C),writeln1(C).
fna(5,A1,A2,B) :- intersection1(A1,A2,[],B),writeln1([[n,intersection1],[A1,A2,[],B]]),term_to_atom(A1,A11),term_to_atom(A2,A21),term_to_atom(B,B1),concat_list(["I found the intersection of ",A11," and ",A21,", ",B1,"."],C),writeln1(C).
fna(7,A1,A2,B) :- duplicates(A1,A2,[],B),write1([[n,duplicates],[A1,A2,[],B]]).
fna(7,A1,A2,B) :- duplicates(A1,A2,[],B),writeln1([[n,duplicates],[A1,A2,[],B]]),term_to_atom(A1,A11),term_to_atom(A2,A21),term_to_atom(B,B1),concat_list(["I found the duplicates in ",A11," and ",A21,", ",B1,"."],C),writeln1(C).
folders(["Computational English"%,"Creating and Helping Pedagogues","Fundamentals of Meditation and Meditation Indicators","Fundamentals of Pedagogy and Pedagogy Indicators","Medicine","Lecturer","Short Arguments","Mind Reading","Time Travel","Delegate workloads, Lecturer, Recordings"]).
folders(["Computational English","Creating and Helping Pedagogues","Fundamentals of Meditation and Meditation Indicators","Fundamentals of Pedagogy and Pedagogy Indicators","Medicine","Lecturer","Short Arguments","Mind Reading","Time Travel","Delegate workloads, Lecturer, Recordings"]).
foldr(put_stwa_ae,Instances, Term1, Term2) :-foldr(put_sub_term_wa_ae,Instances, Term1, Term2).
foldr(put_stwa_ae_smooth, Instances, Term1, Term2) :-foldr(put_sub_term_wa_ae_smooth, Instances, Term1, Term2).
foldr(put_sub_term_wa_ae,[[[1, 1], [v, 2]], [[1, 2], [v, 3]]], [[v, 1], [v, 2]], Term2).
foldr(put_sub_term_with_address_ae,Instances, Term1, Term2) :-foldr(put_sub_term_wa_ae,Instances, Term1, Term2).
foldr(put_sub_term_with_address_ae_smooth, Instances, Term1, Term2) :-foldr(put_sub_term_wa_ae_smooth, Instances, Term1, Term2).
foldr(put_subterm_with_address_ae,Instances, Term1, Term2) :-foldr(put_sub_term_wa_ae,Instances, Term1, Term2).
foldr(put_subterm_with_address_ae_smooth, Instances, Term1, Term2) :-foldr(put_sub_term_wa_ae_smooth, Instances, Term1, Term2).
foldr_append([A1|A2],B,C) :- append(B,A1,D), foldr_append(A2,D,C),!.
formula(A+B,C) :- formula(A,C1), formula(B,C2), C is C1+C2.
formula(A-B,C) :- formula(A,C1), formula(B,C2), C is C1-C2.formula(A,C) :- number(A), C=A.
formula(A/B,C) :- formula(A,C1), formula(B,C2), C is C1/C2.
formula(ceiling(A),C) :- formula(A,C1), C is ceiling(C1).
formula(floor(A),C) :- formula(A,C1), C is floor(C1).
four_crosses :-prompt("What are the two items to cross?",_Two_items),cross,cross,cross,prompt("What is their cross?",_Cross11).
fph(_,[],H,H) :- !.fph(H1,C,H5,H6) :- C=[H2|H3], ([H2]=`-` -> H4=H1; ([H2]=`u` -> H4 is H1+1; ([H2]=`d` -> H4 is H1-1))), append(H5,[H4],H7), fph(H4,H3,H7,H6),!.
frequency(Data,F1,F2) :-Data=[D1|_D2],findall(D1,member(D1,Data),D3),length(D3,L),append(F1,[[D1,L]],F3),delete(Data,D1,D4),frequency(D4,F3,F2).
full_stop("block")  --> ".".noun("pear")  --> "pear".noun("person")  --> "mara".
fulladjective("es",'Spanish') :- !.fulladjective("ru",'Russian') :- !.fulladjective(A,A) :- !.
fulladjective("fr",'French') :- !.fulladjective("de",'German') :- !.
gen_alg(L,A1,A2,B1,B2,Start,PN1):- (Start=true-> (%p_name1(PN1), foldr(append,[B1,[PN1],[":"]],B3), gen_alg(L,A1,A2,B3,B2,false,_) ); ( L=[L1|L2], (atom(L1)-> (foldr(append,[B1,[L1]],B3), gen_alg(L2,A1,A2,B3,B2,false,_) ) ; (is_list(L1), p_name1(PN2), gen_alg(L1,A1,A3,[],_B3,true,PN2), foldr(append,[B1,[PN2]],B4), gen_alg(L2,A3,A2,B4,B2,false,_) ) ))).
gender(brian,male).
gender(jim,male).
gender(john,male).
gender(lee,male).
gender(peter,male).
generate_alg(L,Alg1,Alg2) :- L=[I,O], retractall(p_name(_)), assertz(p_name(1)), retractall(v_name(_)), assertz(v_name(1)), trace, generate_p1([I,O],Alg1,Alg2%,Alg3,Alg4 ), foldr(append,[Alg1%,Alg3,Alg4 ],Alg2). generate_p1([I0,O0],Alg1,Alg2%,Alg3,Alg4) :- get_lang_word("t",T), get_lang_word("n",Dbw_n), get_lang_word("list",Dbw_list), ((I0=[[[T, Dbw_list],I]], O0=[[[T, Dbw_list],O]])->true; %((I0=[I], %O0=[O])->true;  %( I0=I,O0=O)%)) , v_name1(VN1), v_name1(VN2), p_name1(PN1), (%maplist(is_4,I) not(I=[T,_,_,_Data])-> (p_name1(PN2), B=[[[Dbw_n,PN2],[VN1,[],VN2]]], generate_p11([I,O],%[],  PN1,Alg3,Alg4) ); (I=[_,_,_,Data], O=[_,_,_,Data], B=[[[Dbw_n,=],[VN1,Data]], [[Dbw_n,=],[VN1,VN2]]], Alg3=[],Alg4=[] )), L1=[[Dbw_n,PN1],[VN1,VN2],":-",B], foldr(append,[Alg1,L1,Alg3,Alg4 ],Alg2).
generate_lines(Number_of_lines1,Max_line_length,L1,L2) :- numbers(Max_line_length,1,[],L3), findall([Number_of_lines1,Item],member(Item,L3),L4), append(L1,[L4],L5), Number_of_lines2 is Number_of_lines1-1, generate_lines(Number_of_lines2,Max_line_length,L5,L2).
generate_p11([I,O],%Alg1, PN1,Alg2,Alg4) :-  (generate_p31(I,O,_VN5s,_IVNs,_Calls1,Calls2,_Alg3,Alg4)->true; (%trace,  get_lang_word("n",Dbw_n), get_lang_word("equals4",Dbw_equals4), get_lang_word("append",Dbw_append), v_name1(VN1), v_name1(VN2), v_name1(VN3), v_name1(VN4), length(I,IL), numbers(IL,1,[],IVNs), findall(VN5,(member(_,IVNs),v_name1(VN5)),VN5s), v_name1(VN6), v_name1(VN61), %VN6=[VN8,VN9], append(VN5s,["|",VN6],VN7),%trace, generate_p3(I,O,VN5s,IVNs,[],Calls,[],Alg4), data_to_alg(I,O,VN5s,VN8),%findall(*,(member(IVN,IVNs),get_item_n(I,IVN,IN),get_item_n(VN5s,IVN,VN8), %(%is_list(IN)->( %generate_p2(IN,VN8,Call,A1),* Alg2=[[[Dbw_n,PN1],[[],VN1,VN1]], [[Dbw_n,PN1],[VN2,VN3,VN4]],":-", [[[Dbw_n,Dbw_equals4],VN7],Calls,[[Dbw_n,Dbw_append],[VN3,VN8,VN61]], [[Dbw_n,PN1],[VN6,VN61,VN4]]]] )).
generate_p3(I0,O0,VN5s,IVNs,Calls1,Call2,Alg3,Alg4) :- ((I0=[[[T, Dbw_list],I]], O0=[[[T, Dbw_list],O]])->true; %((I0=[I], %O0=[O])->true;  %( I0=I,O0=O),%))  IVNs=[IVN|IVNs2], get_item_n(I,IVN,IN),get_item_n(VN5s,IVN,VN8), get_item_n(O,IVN,ON), %is_list(IN)->( generate_p11([IN,ON],%[],A0,  VN8,Call,A1%,Alg31,Alg41  ), generate_p1([IN,ON],%[],A0,  [],A0%VN8,Call,A1%,Alg31,Alg41  ), append(Calls1,[Call],Calls3), foldr(append,[Alg3,[A1],A0%,Alg31,Alg41 ],Alg5), generate_p3(I,O,VN5s,IVNs2,Calls3,Call2,Alg5,Alg4 ).
generate_sentences(Sentence3,Sentence_a1,Sentence_a2,N1) :-random_member(Item,Sentence3),%%trace,generate_sentence(Item,Sentence_a3),append(Sentence_a1,[Sentence_a3],Sentence_a4),N2 is N1-1,generate_sentences(Sentence3,Sentence_a4,Sentence_a2,N2).
generate_sentences(Sentence3,Sentence_a1,Sentence_a2,N1) :-random_member(Item,Sentence3),generate_sentence(Item,Sentence_a3),append(Sentence_a1,[Sentence_a3],Sentence_a4),N2 is N1-1,generate_sentences(Sentence3,Sentence_a4,Sentence_a2,N2).
generate_session_key(Key5) :- repeat, api-key(API_key), length(Key,10), findall(Key1,(member(_,Key),random(X),Key1 is ceiling(10*X)),Key2), flatten([API_key,"-",Key2],List), foldr(string_concat,List,"",Key4), string_atom(Key4,Key5), foldr(string_concat,["sessions/session",Key5,".txt"],Path), not(exists_file(Path)), %number_string(Key31,Key3), %Key4=API_key-Key31, !.  % each day, delete sessions older than 1 year x day x month delete_old_sessions :-get_time(Now),One_month_ago is Now - 2592000.0,%findall(J5,(%member(K1,K),directory_files("sessions/",F),delete_invisibles_etc(F,G),findall(_,(member(H,G),string_concat("sessions/",H,H1),set_time_file(H1, [access(Access)], []),Access < One_month_ago,delete_file(H1)),_),!.
generatemelody1(Melody1,Melody2,Melody3) :-Melody1=[Melody4|Melody5],append(Melody2,[Melody4%,Melody4],Melody6),generatemelody1(Melody5,Melody6,Melody3),!.
generatemelody1(Melody1,Melody2,Melody3) :-Melody1=[Melody4|Melody5],append(Melody2,[Melody4,Melody4],Melody6),generatemelody1(Melody5,Melody6,Melody3),!.
generatemelodyh1(Melody1,Melody2,Melody3) :-Melody1=[Melody4|Melody5],append(Melody2,[Melody4%,Melody4],Melody6),generatemelodyh1(Melody5,Melody6,Melody3),!.
generatemelodyh1(Melody1,Melody2,Melody3) :-Melody1=[Melody4|Melody5],append(Melody2,[Melody4,Melody4],Melody6),generatemelodyh1(Melody5,Melody6,Melody3),!.
geometric_sequence(0,_,_C,B,B):-!.
geometric_sequence(A,D,B,C1,C2):-A1 is A-1,H is B+D,D1 is D*2,append(C1,[H],C3), geometric_sequence(A1,D1,H,C3,C2).
get1(connector,"although").
get1(connector,"because").
get1(connector,"negating").
get1(connector2,"agreeing with").
get1(connector2,"arriving at").
get1(connector2,"creating").% 40% I did this by calculating the breasonings currency takings to be proportional to the percent of the time, rather than the percentage of the value of the total takings.
get1(connector2,"doubting").
get1(object,"home").
get1(object,S1):-get1(subject,S1).
get1(subject,"Mine").get1(subject,"Dr. Archipelago").
get1(subject,"Neon Visor").
get1(verb,"arrives at a").
get1(verb,"goes").
get1(verb,"sleeps").
get1(verb,"writes on").
get_extra_answers2(Text,Extra_answers1,Answers1,Answers2) :- Punct1='&#@~%`$?+*^,()|.:;=_/[]<>{}\s\t\\"!0123456789\n\r', split_string(Text,Punct1,Punct1,Text2), repeat, random_member(Answer,Text2), not(member(Answer,Answers1)), append(Answers1,[Answer],Answers3), Extra_answers2 is Extra_answers1 - 1, get_extra_answers2(Text,Extra_answers2,Answers3,Answers2).
get_item_n1(Exposition,Number1,Item) :-Number2 is Number1-1,length(List,Number2),append(List,[Item|_],Exposition),!.
get_item_uncompile_list(N2,N3,_N,S,L1,L2) :- N2=2, % string N31 is N3+1, get_item_n(S,N31,S1), append(L1,[S1],L2).
get_item_uncompile_list(N2,N3,_N,S,L1,L2) :- N2=3, % atom N31 is N3+1, get_item_n(S,N31,S1), append(L1,[S1],L2).
get_item_uncompile_list(N2,N3,_N,S,L1,L2) :- N2=5, % variable name N31 is N3+1, get_item_n(S,N31,S1), get_lang_word("v",Dbw_v), append(L1,[[Dbw_v,S1]],L2).get_item_uncompile_list(N2,N3,_N,S,L1,L2) :- N2=6, % predicate name N31 is N3+1, get_item_n(S,N31,S1), get_lang_word("n",Dbw_n), append(L1,[[Dbw_n,S1]],L2).
get_item_uncompile_list(N2,N3,_N,_S,L1,L2) :- N2=1, % number append(L1,[N3],L2).
get_items_summing_to_l(Q2,L16,N1,N2,L1,L2) :-Q2=[S-N|Q4],(L16=N->(N3 is N1+L16,N->a,N3 is N1-N)).
get_items_summing_to_l(Q2,L16,N1,N2,L1,L2) :-Q2=[S-N|Q4],(L16=N->(N3 is N1+L16,N->a,N3 is N1-N)).*/find_a_or_n(Q2,L111) :-%SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",operators1(Ops),extra_characters(EC),string_concat(Ops,EC,SepandPad),% SepandPad="&#@~%`$?+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'",findall(L14,(member(L2,Q2),split_on_substring(L2,SepandPad,L3),foldr(string_concat,L3,S3),atom_chars(S3,A3),%atom_string(S31,S3),%string_concat(L4,_,S3),%string_length(L4,1),%atom_string(L5,L4),%L3=[L31|_],(A3=''->L13=[(*)];findall(L12,(member(A,A3)%atom_concat(S34,_,A3),((atom_length(S34,1)->((,((char_type(A,alpha)->L12=a;(char_type(A,digit),L12=n))->true;L12=(*))),L13),(member(n,L13)->L14=n;(member(a,L13)->L14=a;L14=(*))))),L11),findall(X,(member(X1,L11),(X1=(*)->X=n;X=X1)),L111),!.%findall(L12,((member(L31,L3),atom_string(S33,L31),((S33='')->L12=(*); (atom_concat(S34,_,S33),((atom_length(S34,1)->(((char_type(S34,alpha)->L12=a;(char_type(S34,digit),L12=n))->true;L12=(*)));fail%L1=(*)%)))))),L13),maplist(=(_), L1)),L11),!.
get_lang_word3(Input,From_lang,To_lang,Output) :-not(From_lang="en"),To_lang="en",%(From_lang="en2"->Epsilon="";Epsilon=" "),Epsilon="",%(string(Input)->true;(number(Input))->true;fail),%lang_db(Lang_db),(not(lang_db(Lang_db))->(load_lang_db,lang_db(Lang_db));lang_db(Lang_db)),split_on_number(Input,Input1,Input10),((member([Output2,_Input101,From_lang,Input1],Lang_db),%notrace,(Input10="" -> Output3=Output2;concat_list([Output2,Epsilon,Input10],Output3)))->true;(translate4(Input1,From_lang,To_lang,Output2),(Input10="" -> Output3=Output2;concat_list([Output2,Epsilon,Input10],Output3)))),replace(Output3," ","_",Output4),atom_string(Output,Output4),!.
get_last_p_before_n1(List1,Cp1,N,Cp2) :-member([B,N|Cp1],List1),%((Cp1=[_,_,_,["returns to",_]|_])->%get_last_p_before_n1(List1,Cp1,B,Cp2);Cp2=[B,N|Cp1].
get_last_p_before_n1(List1,Cp1,N,Cp2) :-member([B,N|Cp3],List1),not(Cp1=Cp3),get_last_p_before_n1(List1,Cp1,B,Cp2).
get_last_p_before_n1(List1,Cp1,N,Cp2) :-%trace,writeln1(List1),member([N,B|Cp1],List1),%((Cp1=[_,_,_,["returns to",_]|_])->%fail%get_last_p_before_n1(List1,Cp1,B,Cp2)%;Cp2=[N,B|Cp1],!.
get_later_cps_than_cp(List1,Cp_a,Cps1,Cps2) :-member([Cp_a,Cp_b|Cp3],List1),append(Cps1,[[Cp_a,Cp_b|Cp3]],Cps3),get_later_cps_than_cp(List1,Cp_b,Cps3,Cps2),!.*/set(A,B,CP_Vars1,CP_Vars2) :-delete(CP_Vars1,[A,_],CP_Vars3),append(CP_Vars3,[[A,B]],CP_Vars2),!.
get_later_cps_than_cp11(List1,Cp1,Cp3,Cps) :-%trace,%member([Cp_a,Cp_b|Cp1],List1),%trace,append(_,B,List1),append([Cp1],Cps,B),%writeln1(["*4",append([Cp1],Cps,B)]),[_,_|Cp3]=Cp1.
get_members(InModes1,InputVars,Vars1,Vars2) :-(not(InModes1=0)->(%%findnsols(InModes1,A,(member(A,InputVars)),Vars2).
get_members(_,[],Vars,Vars).
get_n_item(D3,[_,F],N2),%numbers(N1,1,[],N11),length(L2,N2),%append(G,[E|_],C2)append(_,L2,D3),findall(D4,member([D4,_],L2),D5),foldr(append,[C5,[" "],D5],[],L31),%trace,%((%not(not(spec(_))),%spec(on))->(findall(L312,(member(L311,L31),downcase_atom(L311,L312)),L313),keywords(Keywords),not(intersection(L313,Keywords,[]))%,trace%);true),%writeln1(C5),trace,foldr(string_concat,L31,"",L3)),Br).
get_r(X2) :-random(X),X1 is ceiling(X*1000000),foldr(string_concat,["Books/algs-",X1,"/"],X3),(exists_directory(X3)->get_r(X2);X3=X2).
get_r(X2) :-random(X),X1 is ceiling(X*1000000),foldr(string_concat,["Books/args-",X1,"/"],X3),(exists_directory(X3)->get_r(X2);X3=X2).
get_stwa(Term, Address, Item) :-get_sub_term_wa(Term, Address, Item).
get_sub_term_wa(List,[_|Ns],L1) :- get_sub_term_wa1(List,Ns,L1),!.
get_sub_term_with_address(Term, Address, Item) :-get_sub_term_wa(Term, Address, Item).
get_subterm_with_address(Term, Address, Item) :-get_sub_term_wa(Term, Address, Item).
get_type(A1,atom)   :- atom(A1).
get_type(A1,compound) :- compound(A1).
get_type(A1,number) :- number(A1).
get_types2(A,V1,V2) :- (A=[[n,_Name]|_Args]->get_types3(A,V1,V2); %not(is_list(A))->append(B,[A],C); (A=[D|E],get_types2(D,V1,V3), get_types2(E,V3,V2))),!.
get_until_char(S,_C,S,"") :- !.
get_up_to_next_chunk(B,C1,C2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n, get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall, append(A,C,B), C=[C111|D],C111=[_Number,[Dbw_on_true,_Statements1_number],[Dbw_go_after,_Statements2_number],[Dbw_on_false,_Return_line_false],[Dbw_go_to_predicates,_Predicates],[Dbw_n_or_v1,F]|_Arguments],(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),%trace,((F="[]"->true;(F=Dbw_not->true;(F=Dbw_or->true;(F="->"->true;(F=Dbw_findall)))))->(convert_chunk(A,E),append(C1,E,C3),%* append E%trace,append(C,[],CD),get_chunks(CD,[],C22),append(C3,C22,C2));(%trace,%not((%(F="[]"->true;(F=Dbw_not->true;(F=Dbw_or->true;(F="->"->true;(F=Dbw_findall))))))),%trace,/*convert_chunk(B,E),*/%trace,append(A,[C111],AC),convert_chunk(AC,E),append(C1,E,C3),%* append E%trace,%append(C,[],CD),get_up_to_next_chunk(D,[],C22),append(C3,C22,C2))),!.
get_up_to_next_chunk2(B,C1,C2) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n, get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,get_lang_word("not",Dbw_not1),Dbw_not1=Dbw_not,get_lang_word("or",Dbw_or1),Dbw_or1=Dbw_or,get_lang_word("findall",Dbw_findall1),Dbw_findall1=Dbw_findall, %append(A,C,B), %C=[C111|D],%C111=[_Number,[Dbw_on_true,_Statements1_number],[Dbw_go_after,_Statements2_number],[Dbw_on_false,_Return_line_false],[Dbw_go_to_predicates,_Predicates],[Dbw_n_or_v1,F]|_Arguments],%(Dbw_n_or_v1=Dbw_n->true;Dbw_n_or_v1=Dbw_v),%trace,(forall(member([_Number,[Dbw_on_true,_Statements1_number],[Dbw_go_after,_Statements2_number],[Dbw_on_false,_Return_line_false],[Dbw_go_to_predicates,_Predicates],[Dbw_n_or_v1,F]|_Arguments],B),not((F="[]"->true;(F=Dbw_not->true;(F=Dbw_or->true;(F="->"->true;(F=Dbw_findall)))))))->(convert_chunk(B,E),append(C1,E,C2));get_up_to_next_chunk(B,C1,C2)),!.
get_vars(OutModes1,VarList1,VarList2,OutputVars,Vars1,Vars2) :-    var(VarList1,Var,VarList3,OutputVars),    append(Vars1,[Var],Vars3),    OutModes2 is OutModes1 - 1, get_vars(OutModes2,VarList3,VarList2,OutputVars,Vars3,Vars2),!.
get_vars(OutModes1,VarList1,VarList2,OutputVars,Vars1,Vars2) :-    var(VarList1,Var,VarList3,OutputVars),    append(Vars1,[Var],Vars3),    OutModes2 is OutModes1 - 1, get_vars(OutModes2,VarList3,VarList2,OutputVars,Vars3,Vars2),!./**rule(RuleName,1,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-member(Var,InputVars1),rule2(RuleName,Var,VarList,VarList2,Rule,Var1),append(InputVars1,[Var1],InputVars2).
get_y :-repeat,writeln("Please enter \"y\":"),read_string(user_input,"\n\r","\n\r",_,S),S="y",!.
getitemn(0,_A,[]).
getitemn(0,_A,[]).getitemn(1,B,C) :- head(B,C).
getitemn(1,B,C) :- head(B,C).
getitemn(A,B,C) :- not((=(A,1))),tail(B,T),subtract(A,1,D),getitemn(D,T,C).
getvalue(Variable,Value,Vars) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value)->true;        (isvar(Variable),isvalstrorundef(Value),getvar(Variable,Value,Vars))).
getvalue(Variable,Value,Vars) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value)->true;        (isvar(Variable),isvalstrorundef(Value),getvar(Variable,Value,Vars))).putvalue(Variable,Value,Vars1,Vars2) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value,Vars1=Vars2)->true;        (isvar(Variable),isvalstrorundef(Value),updatevar(Variable,Value,Vars1,Vars2))),!. getvar(Variable,Value,Vars) :-        member([Variable,Value],Vars),not(Value=empty).
getvalue(Variable,Value,Vars) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value);        (isvar(Variable),isvalstrorundef(Value),getvar(Variable,Value,Vars))).
getvalue_match(Variable1,Value1,Vars1) :-not(member("|",Variable1)),not(single_item(Variable1)),Variable1=[Variable1a|Variable1b],getvalue_match(Variable1a,Value1a,Vars1),getvalue_match(Variable1b,Value1b,Vars1),append([Value1a],Value1b,Value1).
getvalue_match([],[],_Vars1) :- !.
getvalue_match1(Variable1,Value1,Vars1) :-not(single_item_or_atom(Variable1)),Variable1=[Variable1a|Variable1b],getvalue_match1(Variable1a,Value1a,Vars1),getvalue_match1(Variable1b,Value1b,Vars1),append([Value1a],Value1b,Value1),!.
getvalue_match11(Variable1,Vars1,Vars2a,Vars2b) :-not(single_item(Variable1)),Variable1=[Variable1a|Variable1b],getvalue_match11(Variable1a,Vars1,Vars2a,Vars2c),getvalue_match11(Variable1b,Vars1,Vars2c,Vars2b),%append([Value1a],Value1b,Value1),!.
getvalue_match_pipe(Variable1,Value1,Vars1) :-variable_name(Variable1),getvalue(Variable1,Value1,Vars1),not(Value1=empty),!.
getvalues(Variable1,Variable2,Value1,Value2,Vars) :-        getvalue(Variable1,Value1,Vars),        getvalue(Variable2,Value2,Vars).
getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars) :-        getvalue(Variable1,Value1,Vars),        getvalue(Variable2,Value2,Vars),        getvalue(Variable3,Value3,Vars).
getvalues2(VarNames1,Values1,Values2,Vars,Flags1,Flags2) :-VarNames1=[VarName1|VarNames2],(VarName1=[VarName2]->Flag1=true;VarName2=VarName1),getvalue(VarName2,Value1,Vars),(Value1=empty->Flag2=true;(Value2=Value1,Flag2=false)),(Flag1=true->Value3=[Value2];Value3=Value2),append(Values1,Value3,Values3),append(Flags1,[Flag2],Flags3),getvalues2(VarNames2,Values3,Values2,Vars,Flags3,Flags2),!.
getvalues2(VarNames1,Values1,Values2,Vars,Flags1,Flags2) :-VarNames1=[VarName1|VarNames2],%trace,((isvar(VarName1),VarName1=[VarName2])->Flag1=true;VarName2=VarName1),getvalue(VarName2,Value1,Vars),(is_empty(Value1)->Flag2=true;(Value2=Value1,Flag2=false)),(Flag1=true->Value3=[Value2];Value3=Value2),append(Values1,Value3,Values3),append(Flags1,[Flag2],Flags3),getvalues2(VarNames2,Values3,Values2,Vars,Flags3,Flags2),!.
getvalues2(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars) :-        getvalue2(Variable1,Value1,Vars),        getvalue2(Variable2,Value2,Vars),        getvalue2(Variable3,Value3,Vars).
getvar(Variable,empty,Vars) :-        not(member([Variable,_Value],Vars))->true;member([Variable,empty],Vars).
getvar(Variable,empty,Vars) :-        not(member([Variable,_Value],Vars));member([Variable,empty],Vars).
getvar(undef,undef,_Vars) :-!.
getvar(undef,undef,_Vars) :-!.getvar(Variable,empty,Vars) :-        not(member([Variable,_Value],Vars))->true;member([Variable,empty],Vars).
gh_init2 :- (exists_file_s("luciancicd.pl")->true;(writeln("Error: Please quit Prolog, reload and run luciancicd in its folder."),abort)),working_directory1(A1000,A1000), (time1(_T1)->true;get_time1),(home_dir1(HD)->true;true),(var(HD)->(retractall(home_dir1(_)),assertz(home_dir1(A1000)));true),repositories_paths([RP_1]), (exists_directory_s(RP_1)->true;make_directory_s(RP_1)),working_directory1(_,A1000),output_path([OP_1]), (exists_directory_s(OP_1)->true;make_directory_s(OP_1)),%(exists_directory_s("../private2/")->true;make_directory_recursive_s("./","../private2")),working_directory1(_,A1000).
gitl_data_path("../gitl_data/").
go1(A,B) :- link1(A,C),go1(C,B),!.
go_delete_message(N,Messages) :- delete_item_n(Messages,N,Messages2),write_file('messages.txt',Messages2),nl,writeln("Deleted message."),nl,messager.
go_edit_message(N,Messages) :- %trace,get_item_n(Messages,N,[N,Title,Message]),writeln("Edit title:"),text_area("rows=\"4\" style=\"width:100%\"",Title,T2),writeln("Edit message:"),text_area("rows=\"4\" style=\"width:100%\"",Message,M2),delete(Messages,[N,_A,_B],Messages0),append(Messages0,[[N,T2,M2]],Messages2),sort(Messages2,Messages21),write_file('messages.txt',Messages21),nl,writeln("Edited message."),nl,messager.
go_messager_option(1,Messages) :- length(Messages,L),L2 is L+1,writeln("Enter Title:"),read_string(T),writeln("Enter Message:"),read_string(M),append(Messages,[[L2,T,M]],Messages2),sort(Messages2,Messages21),write_file('messages.txt',Messages21),messager.
go_messager_option(2,Messages) :- display_messages_to_select(Messages),length(Messages,L),nl,write("Enter number of message to edit (1-"),write(L),writeln(" or 0 to go up):"),read_string(S),(number_string(N,S)->(go_edit_message(N,Messages));go_messager_option(2,Messages)).
go_messager_option(3,Messages) :- display_messages_to_select(Messages),length(Messages,L),nl,write("Enter number of message to delete (1-"),write(L),writeln(" or 0 to go up):"),read_string(S),(number_string(N,S)->(go_delete_message(N,Messages));go_messager_option(3,Messages)).
going_to_5689 :-open_file_s("tt_log.txt",File_term),(append(_,[[n=_N1,_Pres_D,_Pres_M,_Pres_Y,Fut_D,Fut_M,Fut_Y]],File_term)->true;fail),foldr(string_concat,["Going to ",Fut_D," ",Fut_M," ",Fut_Y,", press \"y\":"],S),print_message(information,S),!.
gotostates(Prevstate,States1,Grid1,Grid2,X,Y,C,C2,N,Stroke,States) :-States1=[State|States2],(changegrid2(Prevstate,State,Grid1,Grid2,X,Y,C,C2,N,Stroke,States);gotostates(Prevstate,States2,Grid1,Grid2,X,Y,C,C2,N,Stroke,States)).
grammar1(U,T):-compound(U,"",[],T).compound213(U,U,T,T).
grammar1(U,T):-compound([],T,U,[]),!.
gridline2(X1,Y1,_X2,Y2,M,_C,C22,Grid1,N3) :-(M > 1; M < -1),        M2 is 1/M,sort(Y1,Y2,YA1,YA2),        C2 is X1-M2*Y1,        flipxy(C22,[],Grid),    %%y(Y),    %%Y1 is Y+1,  gridline3(YA1,YA2,M2,C2,Grid,Grid2,N3,_Y1),%%writeln(['***',flipxygrid,Grid2]),        flipxy(Grid2,[],Grid1).%% Sorts Y1 and Y2sort(Y1,Y2,Y1,Y2) :-Y1=<Y2, !.
gridline2_3d(X1,Y1,_X2,Y2,M,_C,C22,Grid1,N3) :-(M > 1; M < -1),        M2 is 1/M,sort_3d(Y1,Y2,YA1,YA2),        C2 is X1-M2*Y1,        flipxy_3d(C22,[],Grid),    %%y_3d(Y),    %%Y1 is Y+1,  gridline3_3d(YA1,YA2,M2,C2,Grid,Grid2,N3,_Y1),%%writeln_3d(['***',flipxygrid,Grid2]),        flipxy_3d(Grid2,[],Grid1).
gridline3(X1,X2,M,C,Grid1,Grid2,N3,_N4) :-Y is round(M*X1+C),%%Coord = [X1,Y],member([X1,Y,M2],Grid1),delete(Grid1,[X1,Y,M2],Grid11),append(M2,[N3],M3),append(Grid11,[[X1,Y,M3]],Grid3),%%writeln([X1,Y,M3]), %%X3 is X1+1,gridline3(X3,X2,M,C,Grid3,Grid2,N3,_N42).
gridline3_3d(X1,X2,M,C,Grid1,Grid2,N3,_N4) :-Z is floor(M*X1+C), % or round ***%%Coord = [X1,Y],findall(New,(member([X0,Y0,Z0,M0],Grid1),([X0,Y0,Z0,M0]=[X1,Y,Z,M2]->%member([X1,Y,Z,M2],Grid1),%delete(Grid1,[X1,Y,Z,M2],Grid11),(append(M2,[N3],M3),New=[X1,Y,Z,M3]);New=[X0,Y0,Z0,M0])),Grid3),%append(Grid11,[[X1,Y,M3]],Grid3),%%writeln_3d([X1,Y,M3]), %%X3 is X1+1,gridline3_3d(X3,X2,M,C,Grid3,Grid2,N3,_N42).
gridline_orig_2_3d(X1,Y1,_X2,Y2,M,_C,C22,Grid1,N3) :-(M > 1; M < -1),        M2 is 1/M,sort_3d(Y1,Y2,YA1,YA2),        C2 is X1-M2*Y1,        flipxy_orig_3d(C22,[],Grid),    %%y_3d(Y),    %%Y1 is Y+1,  gridline_orig_3_3d(YA1,YA2,M2,C2,Grid,Grid2,N3,_Y1),%%writeln_3d(['***',flipxygrid,Grid2]),        flipxy_3d(Grid2,[],Grid1).
group(L,After4,After41) :- findall1(A,(member([L,A],After4)),After42), (not(After42=[])-> After41=[[[L,-] ,After42]]; After41=[]),!.
group_consecutive_aux([H|T], [Group|Groups]) :-    collect_consecutive(H, T, Group, Rest),    group_consecutive_aux(Rest, Groups).
group_consecutive_aux([H|T], [Group|Groups]) :-    collect_consecutive(H, T, Group, Rest),    group_consecutive_aux(Rest, Groups).% Helper predicate to collect consecutive elements with the same body and consecutive headscollect_consecutive(X, [], [X], []).
group_consecutive_duplicates([X, Y|Xs], [[X]|Ys]) :-    dif(X, Y),    group_consecutive_duplicates([Y|Xs], Ys),!.
group_consecutive_duplicates([X], [[X]]):-!.
group_consecutive_duplicates([[X,R1], [X,R2]|Xs], [[[X,R1]|Xs1]|Ys]) :-    group_consecutive_duplicates([[X,R2]|Xs], [Xs1|Ys]),!.
group_consecutive_duplicates([[X,R1], [X,R2]|Xs], [[[X,R1]|Xs1]|Ys]) :-    group_consecutive_duplicates([[X,R2]|Xs], [Xs1|Ys]),!.group_consecutive_duplicates([X, Y|Xs], [[X]|Ys]) :-    dif(X, Y),    group_consecutive_duplicates([Y|Xs], Ys),!.
group_consecutive_numbers2(T,R,Co,[X11, C, X21|Xs], Ys) :-%trace,catch(number_string(_X1,X11),_,false),catch(number_string(_X2,X21),_,false),(C=","->true;C=" "),%->true;C=".")),string_concat(X11,X21,X3),    group_consecutive_numbers2(T,R,Co,[X3|Xs], Ys),!.
group_consecutive_numbers2(T,R,Co,[X11, C, X21|Xs], Ys) :-%trace,catch(number_string(_X1,X11),_,false),catch(number_string(_X2,X21),_,false),C=".",%->true;C=" "),%->true;C=".")),foldr(string_concat,[X11,C,X21],X3),    group_consecutive_numbers2(T,R,Co,[X3|Xs], Ys),!.
group_consecutive_numbers2(T,R,Co,[X11, C|Xs], Ys) :-catch(number_string(_C1,C),_,false),X11="-",string_concat(X11,C,X3),    group_consecutive_numbers2(T,R,Co,[X3|Xs], Ys),!.
group_consecutive_numbers2(T,R,Co,[X11, C|Xs], Ys) :-catch(number_string(_C1,C),_,false),X11="-",string_concat(X11,C,X3),    group_consecutive_numbers2(T,R,Co,[X3|Xs], Ys),!.group_consecutive_numbers2(T,R,Co,[X11, C, X21|Xs], Ys) :-%trace,catch(number_string(_X1,X11),_,false),catch(number_string(_X2,X21),_,false),(C=","->true;C=" "),%->true;C=".")),string_concat(X11,X21,X3),    group_consecutive_numbers2(T,R,Co,[X3|Xs], Ys),!.
group_consecutive_numbers2(T,R,Co,[X11, X21|Xs], Ys) :-is_all_alpha(X11),is_all_alpha(X21),string_concat(X11,X21,X3),    group_consecutive_numbers2(T,R,Co,[X3|Xs], Ys),!.
group_consecutive_numbers2(T,R,Co,[X11|Xs], [X12|Ys]) :-(catch(number_string(X1,X11),_,false)->X12=X1;X12=X11),    group_consecutive_numbers2(T,R,Co,Xs, Ys),!.
group_consecutive_numbers2(_,_,_,[], []):-!.
group_into_clauses([A2,N1,B2],NDs0,NDs1,NDs2,NDs3,NDs4) :- NDs0=[[A3,N10,B3]|NDs01],%member([_,N1,_],NDs1), ((N10=N1,member([A3,N1,B3],NDs1))->(delete(NDs1,[A3,N1,B3],NDs20), append(NDs3,[[A3,N1,B3]],NDs40)); (NDs3=NDs40,NDs1=NDs20%append(NDs1,[[A2,N1,B2]],NDs20) )), group_into_clauses([A2,N1,B2],NDs01, NDs20,NDs2,NDs40,NDs4),!.
group_into_clauses1(Comment_pred_ns,A,B,F) :-%trace, reverse(A,A1), group_into_clauses10(Comment_pred_ns,A1,B,F1), reverse(F1,F).
group_into_clauses10(Comment_pred_ns,A,B,F) :- A=[C|D], (C=[loop1,E]->( H=[[old,[]],[new,E]], append(B,[H],B1),G=D %append(D,E,B11),G=D, %group_into_clauses1(Comment_pred_ns,B11,[],B1) ); (C=[_ON,CN,PN], (member(PN,Comment_pred_ns)-> (G=D,H=[[old,[]],[new,[C]]]); (append(D,A ,G2),list_to_set(G2,G1),group_into_clauses([_, CN, _], G1, G1, G%[] , []%A , H1), group_into_old_new(H1,H))), append(B,[H],B1))), group_into_clauses10(Comment_pred_ns,G,B1,F).
group_non_lists(A2, C,_First) :- %true%First=true %-> %trace, (((append(["["],A4,A2), append(A5,["]"],A4))->A21=A5;(%trace, A21=A2)), %["]"]],A2))), is_list(A21),forall(member(A3,A21),only_item(A3)), %A2=[A],%trace, %only_item(A))-> C=A2)->true; (fail,A2=[A],% %trace, %is_list(A2), %A2=[A3|_], %member(A3,A2),only_item(A3), group_non_lists([A],[A1],false ), C=[["[",[A1],"]"]]),%; %(A=A1,C=[["[",[A1],"]"]])), !. group_non_lists([A], [A],_) :-!.
group_non_lists([A2], C,_First) :- %true%First=true %-> ((A2=[A],%trace, only_item(A))->C=[["[",[A],"]"]]; (%fail,% %trace, (((append(["["],A4,A2), append(A5,["]"],A4))->A21=A5;(%trace, A21=A2)), %["]"]],A2))), is_list(A21),forall(member(A3,A21),only_item(A3)), %A2=[A],%trace, %only_item(A))-> C=[["[",A2,"]"]])->true; (A2=[A],% %trace, %is_list(A2), %A2=[A3|_], %member(A3,A2),only_item(A3), group_non_lists([A],[A1],false ), C=[["[",[A1],"]"]]))),%; %(A=A1,C=[["[",[A1],"]"]])), !.
group_non_lists([], [],_) :-!.group_non_lists([X11, C|Xs], Ys,First) :-%catch(number_string(_C1,C),_,false),not(is_list(C)),%X11="-",X11=['&item'|X12],(not(is_list(X12))->X13=[X12];X13=X12),append(X13,[C],X3),X31=['&item'|X3],    group_non_lists([X31|Xs], Ys,First),!.group_non_lists([X11,C2|Xs], [X13|Ys],First) :-%trace,%trace,%(%true%((C2=[C3|_],only_item(C3))->true;(trace,only_item(C2)))%length(C2,1)(true%length(C2,1)->)->group_non_lists(C2,C,false);group_non_lists2(C2,C%,false)),(X11=['&item'|X12]->(X13=X12,C1=C);(%X11=[l|X12],X13=["[",X11,"]"],C1=['&item'|C])),%is_list(X11),%)%(catch(number_string(X1,X11),_,false)%->%X12=X1;X12=X11),    group_non_lists([C1|Xs], Ys,First),!.
group_non_lists2(Xs, Ys) :-%trace,group_non_lists([['&item']|Xs], Ys1,true),(append([[]],Ys,Ys1)->true;Ys=Ys1).group_non_lists([['&item'|A]], B,_First) :-(is_list(A)->B=[A];B=[[A]]),!.
guess(N) :-%repeat,writeln("Please guess the number between 0 and 10."),read_string(user_input,"\n\r","\n\r",_,N1),%number(N1),(number_string(N,N1)->true;guess(N)).
h2a(A,B) :- findall(C,(member([C,D],A),D>=75,D<80),B).%h2b([[a,50],[b,60],[c,70],[d,80]],A).%A = [c].
h2b(A,B) :- findall(C,(member([C,D],A),D>=70,D<75),B).%h3([[a,50],[b,60],[c,70],[d,80]],A).
h3(A,B) :- findall(C,(member([C,D],A),D>=65,D<70),B).
handle_error(_Err):-  halt(1).
happy([_,"happy"]).
harmony1(Form,CPT,Progression1,Harmony1,Harmony2) :-Progression1=[Note1|Progression2],(CPT='1451'->(harmony1451(Note1,2,Note2),harmony1451(Note1,4,Note3));(harmonyr(Note1,4,Note2),harmonyr(Note1,7,Note3))),Harmony30=[Note2,Note3],findall(B1,(member(A1,Harmony30),string_concat(B,_C,A1),string_length(B,1),atom_string(B1,B)),Harmony31),append([Note1],Harmony31,Harmony3),append(Harmony1,[[Form,Harmony3]],Harmony4),harmony1(Form,CPT,Progression2,Harmony4,Harmony2),!.
harmony1(Form,CPT,Progression1,Harmony1,Harmony2) :-Progression1=[Note1|Progression2],(CPT=1451->(harmony1451(Note1,2,Note2),harmony1451(Note1,4,Note3));(harmonyr(Note1,4,Note2),harmonyr(Note1,7,Note3))),Harmony30=[Note2,Note3],findall(B1,(member(A1,Harmony30),string_concat(B,_C,A1),string_length(B,1),atom_string(B1,B)),Harmony31),append([Note1],Harmony31,Harmony3),append(Harmony1,[[Form,Harmony3]],Harmony4),harmony1(Form,CPT,Progression2,Harmony4,Harmony2),!.
harmonyr(Note1,Value2,Note2) :-note(Value1,Note1),Value3 is Value1+Value2,Value4 is Value3 mod 12,note(Value4,Note2).
head_is_list_of_lists(_,false) :- !.
help(stwa) :-help(subterm_with_address).
help(sub_term_wa) :-help(subterm_with_address).
high_distinction(A,B) :- findall(C,(member([C,D],A),D>=80),B).
higher_lower(0,_X1) :- writeln("You lost."),!.
higher_lower(N,X1) :-guess(N1),(N1=X1->writeln("Correct.");((N1<X1->writeln("Higher.");writeln("Lower.")),N2 is N-1,higher_lower(N2,X1))),!.
horizontal_line1(XN,Y,Grid1,Grid2) :-XN=[XN1|XN2],delete(Grid1,[XN1,Y,_],Grid3),append(Grid3,[[XN1,Y,[*]]],Grid4),horizontal_line1(XN2,Y,Grid4,Grid2).
horizontal_line1(XN,Y,Z1,Grid1,Grid2) :-XN=[XN1|XN2],delete(Grid1,[Z1,XN1,Y,_],Grid3),append(Grid3,[[Z1,XN1,Y,[*]]],Grid4),horizontal_line1(XN2,Y,Z1,Grid4,Grid2).vertical_line(Y1,Y2,X,Z1,Grid1,Grid2) :-numbers(Y2,Y1,[],YN),vertical_line1(YN,X,Z1,Grid1,Grid2).
horizontal_line1([],_Y,Grid,Grid) :- !.
horizontal_line1([],_Y,_Z1,Grid,Grid) :- !.
https://en.wikipedia.org/wiki/3D_projection#Perspective_projectionthree_dimensions_to_two_dimensions(AX,AY,AZ,CX,CY,CZ,TX,TY,TZ,EX,EY,EZ,BX,BY).
idea1(D1,D3) :- random_member([_-_-E],D1), random1(100,X1), random1(100,X2), append(D1,[[E,X1,X2]],D4), idea1(D4,D3),!.% I did this by stating that the sales were found out from a number one.
if_brackets_tl1(Heads11,H1,Heads1) :-%trace, %findall(Head,member([Head|_],Heads4),Heads7), %findall(Tail,member([_|Tail],Heads4),Tails7), Heads11=[Heads2|Heads3], (get_type1(Heads2,Type)->true;Type=multiple),  ((Type=brackets, Heads2=[[[t,brackets],Heads5]], test_lists(Heads5,Heads41,_), Heads4=[Heads41] %foldr(append,Heads42,Heads43), %[Heads43]=Heads4 )->true;  ((%trace, Type=brackets2, %Heads2=[Heads5], % [_|_]? %trace, test_lists_a(Heads2,[],Heads4))->true;  (Type=multiple, [Heads2]=Heads4))),  append(H1,Heads4,H2), if_brackets_tl1(Heads3,H2,Heads1a), Heads1=[Heads1a].
immortality(same).
implies1(A,B,C):-and1(A,B,C).and1(1,1,1).
ind(A,B,R,Op) :- R is A+B,Op=(+).
init(N,List) :- numbers(N,1,[],Ns), findall([N1,0],member(N1,Ns),List).
initiate_utterances(File,[_Utterances|Utterances]) :-texttobr2(File),texttobr(File),initiate_utterances(File,Utterances).
input1arguments(Relations,FunctionNumber,Position1,Vars1,Vars2,Header1,Header2,TypeStatements1,TypeStatements2) :-(member([[Item1,Type1,input1,FunctionNumber,Position1],[Item1,_Type2,_Range2,FunctionNumber,_Position2]],Relations);member([[Item1,_Type2,_Range2,FunctionNumber,_Position2],[Item1,Type1,input1,FunctionNumber,Position1]],Relations)),        var(Item1,Var,Vars1,Vars3),        append(Header1,[Var],Header3),Position2 is Position1 + 1,append(TypeStatements1,[[Type1,[Var]]],TypeStatements3), %% add to lpiinput1arguments(Relations,FunctionNumber,Position2,Vars3,Vars2,Header3,Header2,TypeStatements3,TypeStatements2).
input1arguments(Relations,FunctionNumber,Position1,Vars1,Vars2,Header1,Header2,TypeStatements1,TypeStatements2) :-not((member([[Item1,Type1,input1,FunctionNumber,Position1],[Item1,_Type2,_Range2,FunctionNumber,_Position2]],Relations);member([[Item1,_Type22,_Range22,FunctionNumber,_Position22],[Item1,Type1,input1,FunctionNumber,Position1]],Relations))),append(Header1,[undef],Header3), %% check this works in lpi        Position2 is Position1 + 1,        input1arguments(Relations,FunctionNumber,Position2,Vars1,Vars2,Header3,Header2,TypeStatements1,TypeStatements2).
inputs2arguments(Relations,FunctionNumber,Position1,Vars1,Vars2,Header1,Header2,TypeStatements1,TypeStatements2) :-        (member([[Item1,Type1,inputs2,FunctionNumber,Position1],[Item1,_Type2,_Range2,FunctionNumber,_Position2]],Relations);member([[Item1,_Type2,_Range2,FunctionNumber,_Position2],[Item1,Type1,inputs2,FunctionNumber,Position1]],Relations)),var(Item1,Var,Vars1,Vars3),        append(Header1,[Var],Header3),        Position2 is Position1 + 1,        append(TypeStatements1,[[Type1,[Var]]],TypeStatements3),        inputs2arguments(Relations,FunctionNumber,Position2,Vars3,Vars2,Header3,Header2,TypeStatements3,TypeStatements2).
inputs2arguments(Relations,FunctionNumber,Position1,Vars1,Vars2,Header1,Header2,TypeStatements1,TypeStatements2) :-        not((member([[Item1,Type1,inputs2,FunctionNumber,Position1],[Item1,_Type2,_Range2,FunctionNumber,_Position2]],Relations);member([[Item1,_Type22,_Range22,FunctionNumber,_Position22],[Item1,Type1,inputs2,FunctionNumber,Position1]],Relations))),        append(Header1,[undef],Header3), %% check this works in lpi        Position2 is Position1 + 1,        inputs2arguments(Relations,FunctionNumber,Position2,Vars1,Vars2,Header3,Header2,TypeStatements1,TypeStatements2).
insert_loop1([loop1,Ordered_pred_nums323],Ordered_pred_nums1,Ordered_pred_nums1b) :- append(_,[Index],Ordered_pred_nums323), ((append(A,B,Ordered_pred_nums1),append([[loop1,D]],C,B), append(_,[Index],D))->(union(D,Ordered_pred_nums323,E),%subtract(Ordered_pred_nums1,[[loop1,D]],E), foldr(append,[A,[[loop1,E]],C],Ordered_pred_nums1b));  ((append(A,B,Ordered_pred_nums1),append([Index],C,B))->(union([Index],Ordered_pred_nums323,E),%subtract(Ordered_pred_nums1,[Index],E), foldr(append,[A,[[loop1,E]],C],Ordered_pred_nums1b)))),!.
insert_vertical_lines(A,N,%B1,B) :-%trace, get_up_to_n_cols(A,N,C,D,D2), get_first_and_last_items(D,I1,I2), append_vertical_line(C,I1,I2,C2), group_concat(C2,D,D4), group_concat(D4,D2,D3), N1 is N+4, insert_vertical_lines(D3,N1,B).
insertdoublebackslashbeforequote1(Input1,Input2,Input3) :-Input1=[Input4|Input5],Input4=39, %% quoteappend(Input2,[92,39],Input6),insertdoublebackslashbeforequote1(Input5,Input6,Input3), !.
insertdoublebackslashbeforequote1(Input1,Input2,Input3) :-Input1=[Input4|Input5],not(Input4=39), %% quoteappend(Input2,[Input4],Input6),insertdoublebackslashbeforequote1(Input5,Input6,Input3), !.
insertdoublebackslashbeforequote1([],Input,Input) :- !.
instrumentlist(NumberofInstruments1,Instruments1,Instruments2) :-Instruments=[[0,"Acoustic Grand Piano"],[1,"Bright Acoustic Piano"],[2,"Electric Grand Piano"],[3,"Honky-Tonk Piano"],[4,"Electric Piano 1"],[5,"Electric Piano 2"],[6,"Harpsichord"],[7,"Clavinet"],[8,"Celesta"],[9,"Glockenspiel"],[10,"Music Box"],[11,"Vibraphone"],[12,"Marimba"],[13,"Xylophone"],[14,"Tubular Bells"],[15,"Dulcimer"],[16,"Drawbar Organ"],[17,"Percussive Organ"],[18,"Rock Organ"],[19,"Church Organ"],[20,"Reed Organ"],[21,"Accordian"],[22,"Harmonica"],[23,"Tango Accordian"],[24,"Nylon Acoustic Guitar"],[25,"Steel Acoustic Guitar"],[26,"Jazz Electric Guitar"],[27,"Clean Electric Guitar"],[28,"Muted Electric Guitar"],[29,"Overdriven Guitar"],[30,"Distortion Guitar"],[31,"Guitar Harmonics"],[32,"Acoustic Bass"],[33,"Electric Bass (finger)"],[34,"Electric Bass (pick)"],[35,"Fretless Bass"],[36,"Slap Bass 1"],[37,"Slap Bass 2"],[38,"Synth Bass 1"],[39,"Synth Bass 2"],[40,"Violin"],[41,"Viola"],[42,"Cello"],[43,"Contrabass"],[44,"Tremolo Strings"],[45,"Pizzicato Strings"],[46,"Orchestral Harp"],[47,"Timpani"],[48,"String Ensemble 1"],[49,"String Ensemble 2"],[50,"Synth Strings 1"],[51,"Synth Strings 2"],[52,"Choir Aahs"],[53,"Voice Oohs"],[54,"Synth Choir"],[55,"Orchestra Hit"],[56,"Trumpet"],[57,"Trombone"],[58,"Tuba"],[59,"Muted Trumpet"],[60,"French Horn"],[61,"Brass Section"],[62,"Synth Brass 1"],[63,"Synth Brass 2"],[64,"Soprano Sax"],[65,"Alto Sax"],[66,"Tenor Sax"],[67,"Baritone Sax"],[68,"Oboe"],[69,"English Horn"],[70,"Bassoon"],[71,"Clarinet"],[72,"Piccolo"],[73,"Flute"],[74,"Recorder"],[75,"Pan Flute"],[76,"Blown Bottle"],[77,"Shakuhachi"],[78,"Whistle"],[79,"Ocarina"],[80,"Lead 1 (square)"],[81,"Lead 2 (sawtooth)"],[82,"Lead 3 (calliope)"],[83,"Lead 4 (chiff)"],[84,"Lead 5 (charang)"],[85,"Lead 6 (voice)"],[86,"Lead 7 (fifths)"],[87,"Lead 8 (bass + lead)"],[88,"Pad 1 (new age)"],[89,"Pad 2 (warm)"],[90,"Pad 3 (polysynth)"],[91,"Pad 4 (choir)"],[92,"Pad 5 (bowed)"],[93,"Pad 6 (metallic)"],[94,"Pad 7 (halo)"],[95,"Pad 8 (sweep)"],[96,"FX 1 (rain)"],[97,"FX 2 (soundtrack)"],[98,"FX 3 (crystal)"],[99,"FX 4 (atmosphere)"],[100,"FX 5 (brightness)"],[101,"FX 6 (goblins)"],[102,"FX 7 (echoes)"],[103,"FX 8 (sci-fi)"],[104,"Sitar"],[105,"Banjo"],[106,"Shamisen"],[107,"Koto"],[108,"Kalimba"],[109,"Bagpipe"],[110,"Fiddle"],[111,"Shanai"],[112,"Tinkle Bell"],[113,"Agogo"],[114,"Steel Drums"],[115,"Woodblock"],[116,"Taiko Drum"],[117,"Melodic Tom"],[118,"Synth Drum"],[119,"Reverse Cymbal"],[120,"Guitar Fret Noise"],[121,"Breath Noise"],[122,"Seashore"]],%% ,[123,"Bird Tweet"],[124,"Telephone Ring"],[125,"Helicopter"],[126,"Applause"],[127,"Gunshot"]trialy2(Instruments,R1),findbest(R1,Instrument),append(Instruments1,[Instrument],Instruments3),NumberofInstruments2 is NumberofInstruments1-1,instrumentlist(NumberofInstruments2,Instruments3,Instruments2),!.
instrumentlist(NumberofInstruments1,Instruments1,Instruments2) :-Instruments=[[0,"Acoustic Grand Piano"],[1,"Bright Acoustic Piano"],[2,"Electric Grand Piano"],[3,"Honky-Tonk Piano"],[4,"Electric Piano 1"],[5,"Electric Piano 2"],[6,"Harpsichord"],[7,"Clavinet"],[8,"Celesta"],[9,"Glockenspiel"],[10,"Music Box"],[11,"Vibraphone"],[12,"Marimba"],[13,"Xylophone"],[14,"Tubular Bells"],[15,"Dulcimer"],[16,"Drawbar Organ"],[17,"Percussive Organ"],[18,"Rock Organ"],[19,"Church Organ"],[20,"Reed Organ"],[21,"Accordian"],[22,"Harmonica"],[23,"Tango Accordian"],[24,"Nylon Acoustic Guitar"],[25,"Steel Acoustic Guitar"],[26,"Jazz Electric Guitar"],[27,"Clean Electric Guitar"],[28,"Muted Electric Guitar"],[29,"Overdriven Guitar"],[30,"Distortion Guitar"],[31,"Guitar Harmonics"],[32,"Acoustic Bass"],[33,"Electric Bass (finger)"],[34,"Electric Bass (pick)"],[35,"Fretless Bass"],[36,"Slap Bass 1"],[37,"Slap Bass 2"],[38,"Synth Bass 1"],[39,"Synth Bass 2"],[40,"Violin"],[41,"Viola"],[42,"Cello"],[43,"Contrabass"],[44,"Tremolo Strings"],[45,"Pizzicato Strings"],[46,"Orchestral Harp"],[47,"Timpani"],[48,"String Ensemble 1"],[49,"String Ensemble 2"],[50,"Synth Strings 1"],[51,"Synth Strings 2"],[52,"Choir Aahs"],[53,"Voice Oohs"],[54,"Synth Choir"],[55,"Orchestra Hit"],[56,"Trumpet"],[57,"Trombone"],[58,"Tuba"],[59,"Muted Trumpet"],[60,"French Horn"],[61,"Brass Section"],[62,"Synth Brass 1"],[63,"Synth Brass 2"],[64,"Soprano Sax"],[65,"Alto Sax"],[66,"Tenor Sax"],[67,"Baritone Sax"],[68,"Oboe"],[69,"English Horn"],[70,"Bassoon"],[71,"Clarinet"],[72,"Piccolo"],[73,"Flute"],[74,"Recorder"],[75,"Pan Flute"],[76,"Blown Bottle"],[77,"Shakuhachi"],[78,"Whistle"],[79,"Ocarina"],[80,"Lead 1 (square)"],[81,"Lead 2 (sawtooth)"],[82,"Lead 3 (calliope)"],[83,"Lead 4 (chiff)"],[84,"Lead 5 (charang)"],[85,"Lead 6 (voice)"],[86,"Lead 7 (fifths)"],[87,"Lead 8 (bass + lead)"],[88,"Pad 1 (new age)"],[89,"Pad 2 (warm)"],[90,"Pad 3 (polysynth)"],[91,"Pad 4 (choir)"],[92,"Pad 5 (bowed)"],[93,"Pad 6 (metallic)"],[94,"Pad 7 (halo)"],[95,"Pad 8 (sweep)"],[96,"FX 1 (rain)"],[97,"FX 2 (soundtrack)"],[98,"FX 3 (crystal)"],[99,"FX 4 (atmosphere)"],[100,"FX 5 (brightness)"],[101,"FX 6 (goblins)"],[102,"FX 7 (echoes)"],[103,"FX 8 (sci-fi)"],[104,"Sitar"],[105,"Banjo"],[106,"Shamisen"],[107,"Koto"],[108,"Kalimba"],[109,"Bagpipe"],[110,"Fiddle"],[111,"Shanai"],[112,"Tinkle Bell"],[113,"Agogo"],[114,"Steel Drums"],[115,"Woodblock"],[116,"Taiko Drum"],[117,"Melodic Tom"],[118,"Synth Drum"],[119,"Reverse Cymbal"],[120,"Guitar Fret Noise"],[121,"Breath Noise"],[122,"Seashore"],[123,"Bird Tweet"],[124,"Telephone Ring"],[125,"Helicopter"],[126,"Applause"],[127,"Gunshot"]],trialy2(Instruments,R1),findbest(R1,Instrument),append(Instruments1,[Instrument],Instruments3),NumberofInstruments2 is NumberofInstruments1-1,instrumentlist(NumberofInstruments2,Instruments3,Instruments2),!.
instrumentlist(NumberofInstruments1,Instruments1,Instruments2) :-Instruments=[[0,"Acoustic Grand Piano"],[1,"Bright Acoustic Piano"],[2,"Electric Grand Piano"],[3,"Honky-Tonk Piano"],[4,"Electric Piano 1"],[5,"Electric Piano 2"],[6,"Harpsichord"],[7,"Clavinet"],[8,"Celesta"],[9,"Glockenspiel"],[10,"Music Box"],[11,"Vibraphone"],[12,"Marimba"],[13,"Xylophone"],[14,"Tubular Bells"],[15,"Dulcimer"],[16,"Drawbar Organ"],[17,"Percussive Organ"],[18,"Rock Organ"],[19,"Church Organ"],[20,"Reed Organ"],[21,"Accordian"],[22,"Harmonica"],[23,"Tango Accordian"],[24,"Nylon Acoustic Guitar"],[25,"Steel Acoustic Guitar"],[26,"Jazz Electric Guitar"],[27,"Clean Electric Guitar"],[28,"Muted Electric Guitar"],[29,"Overdriven Guitar"],[30,"Distortion Guitar"],[31,"Guitar Harmonics"],[32,"Acoustic Bass"],[33,"Electric Bass (finger)"],[34,"Electric Bass (pick)"],[35,"Fretless Bass"],[36,"Slap Bass 1"],[37,"Slap Bass 2"],[38,"Synth Bass 1"],[39,"Synth Bass 2"],[40,"Violin"],[41,"Viola"],[42,"Cello"],[43,"Contrabass"],[44,"Tremolo Strings"],[45,"Pizzicato Strings"],[46,"Orchestral Harp"],[47,"Timpani"],[48,"String Ensemble 1"],[49,"String Ensemble 2"],[50,"Synth Strings 1"],[51,"Synth Strings 2"],[52,"Choir Aahs"],[53,"Voice Oohs"],[54,"Synth Choir"],[55,"Orchestra Hit"],[56,"Trumpet"],[57,"Trombone"],[58,"Tuba"],[59,"Muted Trumpet"],[60,"French Horn"],[61,"Brass Section"],[62,"Synth Brass 1"],[63,"Synth Brass 2"],[64,"Soprano Sax"],[65,"Alto Sax"],[66,"Tenor Sax"],[67,"Baritone Sax"],[68,"Oboe"],[69,"English Horn"],[70,"Bassoon"],[71,"Clarinet"],[72,"Piccolo"],[73,"Flute"],[74,"Recorder"],[75,"Pan Flute"],[76,"Blown Bottle"],[77,"Shakuhachi"],[78,"Whistle"],[79,"Ocarina"],[80,"Lead 1 (square)"],[81,"Lead 2 (sawtooth)"],[82,"Lead 3 (calliope)"],[83,"Lead 4 (chiff)"],[84,"Lead 5 (charang)"],[85,"Lead 6 (voice)"],[86,"Lead 7 (fifths)"],[87,"Lead 8 (bass + lead)"],[88,"Pad 1 (new age)"],[89,"Pad 2 (warm)"],[90,"Pad 3 (polysynth)"],[91,"Pad 4 (choir)"],[92,"Pad 5 (bowed)"],[93,"Pad 6 (metallic)"],[94,"Pad 7 (halo)"],[95,"Pad 8 (sweep)"],[96,"FX 1 (rain)"],[97,"FX 2 (soundtrack)"],[98,"FX 3 (crystal)"],[99,"FX 4 (atmosphere)"],[100,"FX 5 (brightness)"],[101,"FX 6 (goblins)"],[102,"FX 7 (echoes)"],[103,"FX 8 (sci-fi)"],[104,"Sitar"],[105,"Banjo"],[106,"Shamisen"],[107,"Koto"],[108,"Kalimba"],[109,"Bagpipe"],[110,"Fiddle"],[111,"Shanai"],[112,"Tinkle Bell"],[113,"Agogo"],[114,"Steel Drums"],[115,"Woodblock"],[116,"Taiko Drum"],[117,"Melodic Tom"],[118,"Synth Drum"],[119,"Reverse Cymbal"],[120,"Guitar Fret Noise"],[121,"Breath Noise"],[122,"Seashore"]],%% ,[123,"Bird Tweet"],[124,"Telephone Ring"],[125,"Helicopter"],[126,"Applause"],[127,"Gunshot"]trialy2("Please select an instrument from:",Instruments,R1),findbest(R1,Instrument),append(Instruments1,[Instrument],Instruments3),NumberofInstruments2 is NumberofInstruments1-1,instrumentlist(NumberofInstruments2,Instruments3,Instruments2),!.
instrumentlist(NumberofInstruments1,Instruments1,Instruments2) :-Instruments=[[0,"Acoustic Grand Piano"],[1,"Bright Acoustic Piano"],[2,"Electric Grand Piano"],[3,"Honky-Tonk Piano"],[4,"Electric Piano 1"],[5,"Electric Piano 2"],[6,"Harpsichord"],[7,"Clavinet"],[8,"Celesta"],[9,"Glockenspiel"],[10,"Music Box"],[11,"Vibraphone"],[12,"Marimba"],[13,"Xylophone"],[14,"Tubular Bells"],[15,"Dulcimer"],[16,"Drawbar Organ"],[17,"Percussive Organ"],[18,"Rock Organ"],[19,"Church Organ"],[20,"Reed Organ"],[21,"Accordian"],[22,"Harmonica"],[23,"Tango Accordian"],[24,"Nylon Acoustic Guitar"],[25,"Steel Acoustic Guitar"],[26,"Jazz Electric Guitar"],[27,"Clean Electric Guitar"],[28,"Muted Electric Guitar"],[29,"Overdriven Guitar"],[30,"Distortion Guitar"],[31,"Guitar Harmonics"],[32,"Acoustic Bass"],[33,"Electric Bass (finger)"],[34,"Electric Bass (pick)"],[35,"Fretless Bass"],[36,"Slap Bass 1"],[37,"Slap Bass 2"],[38,"Synth Bass 1"],[39,"Synth Bass 2"],[40,"Violin"],[41,"Viola"],[42,"Cello"],[43,"Contrabass"],[44,"Tremolo Strings"],[45,"Pizzicato Strings"],[46,"Orchestral Harp"],[47,"Timpani"],[48,"String Ensemble 1"],[49,"String Ensemble 2"],[50,"Synth Strings 1"],[51,"Synth Strings 2"],[52,"Choir Aahs"],[53,"Voice Oohs"],[54,"Synth Choir"],[55,"Orchestra Hit"],[56,"Trumpet"],[57,"Trombone"],[58,"Tuba"],[59,"Muted Trumpet"],[60,"French Horn"],[61,"Brass Section"],[62,"Synth Brass 1"],[63,"Synth Brass 2"],[64,"Soprano Sax"],[65,"Alto Sax"],[66,"Tenor Sax"],[67,"Baritone Sax"],[68,"Oboe"],[69,"English Horn"],[70,"Bassoon"],[71,"Clarinet"],[72,"Piccolo"],[73,"Flute"],[74,"Recorder"],[75,"Pan Flute"],[76,"Blown Bottle"],[77,"Shakuhachi"],[78,"Whistle"],[79,"Ocarina"],[80,"Lead 1 (square)"],[81,"Lead 2 (sawtooth)"],[82,"Lead 3 (calliope)"],[83,"Lead 4 (chiff)"],[84,"Lead 5 (charang)"],[85,"Lead 6 (voice)"],[86,"Lead 7 (fifths)"],[87,"Lead 8 (bass + lead)"],[88,"Pad 1 (new age)"],[89,"Pad 2 (warm)"],[90,"Pad 3 (polysynth)"],[91,"Pad 4 (choir)"],[92,"Pad 5 (bowed)"],[93,"Pad 6 (metallic)"],[94,"Pad 7 (halo)"],[95,"Pad 8 (sweep)"],[96,"FX 1 (rain)"],[97,"FX 2 (soundtrack)"],[98,"FX 3 (crystal)"],[99,"FX 4 (atmosphere)"],[100,"FX 5 (brightness)"],[101,"FX 6 (goblins)"],[102,"FX 7 (echoes)"],[103,"FX 8 (sci-fi)"],[104,"Sitar"],[105,"Banjo"],[106,"Shamisen"],[107,"Koto"],[108,"Kalimba"],[109,"Bagpipe"],[110,"Fiddle"],[111,"Shanai"],[112,"Tinkle Bell"],[113,"Agogo"],[114,"Steel Drums"],[115,"Woodblock"],[116,"Taiko Drum"],[117,"Melodic Tom"],[118,"Synth Drum"],[119,"Reverse Cymbal"],[120,"Guitar Fret Noise"],[121,"Breath Noise"],[122,"Seashore"]],%% ,[123,"Bird Tweet"],[124,"Telephone Ring"],[125,"Helicopter"],[126,"Applause"],[127,"Gunshot"]mind_read_instruments(Instrument,Instruments),append(Instruments1,[Instrument],Instruments3),NumberofInstruments2 is NumberofInstruments1-1,instrumentlist(NumberofInstruments2,Instruments3,Instruments2),!.
instrumentlist(NumberofInstruments1,Instruments1,Instruments2) :-Instruments=[[0,"Acoustic Grand Piano"],[1,"Bright Acoustic Piano"],[2,"Electric Grand Piano"],[3,"Honky-Tonk Piano"],[4,"Electric Piano 1"],[5,"Electric Piano 2"],[6,"Harpsichord"],[7,"Clavinet"],[8,"Celesta"],[9,"Glockenspiel"],[10,"Music Box"],[11,"Vibraphone"],[12,"Marimba"],[13,"Xylophone"],[14,"Tubular Bells"],[15,"Dulcimer"],[16,"Drawbar Organ"],[17,"Percussive Organ"],[18,"Rock Organ"],[19,"Church Organ"],[20,"Reed Organ"],[21,"Accordian"],[22,"Harmonica"],[23,"Tango Accordian"],[24,"Nylon Acoustic Guitar"],[25,"Steel Acoustic Guitar"],[26,"Jazz Electric Guitar"],[27,"Clean Electric Guitar"],[28,"Muted Electric Guitar"],[29,"Overdriven Guitar"],[30,"Distortion Guitar"],[31,"Guitar Harmonics"],[32,"Acoustic Bass"],[33,"Electric Bass (finger)"],[34,"Electric Bass (pick)"],[35,"Fretless Bass"],[36,"Slap Bass 1"],[37,"Slap Bass 2"],[38,"Synth Bass 1"],[39,"Synth Bass 2"],[40,"Violin"],[41,"Viola"],[42,"Cello"],[43,"Contrabass"],[44,"Tremolo Strings"],[45,"Pizzicato Strings"],[46,"Orchestral Harp"],[47,"Timpani"],[48,"String Ensemble 1"],[49,"String Ensemble 2"],[50,"Synth Strings 1"],[51,"Synth Strings 2"],[52,"Choir Aahs"],[53,"Voice Oohs"],[54,"Synth Choir"],[55,"Orchestra Hit"],[56,"Trumpet"],[57,"Trombone"],[58,"Tuba"],[59,"Muted Trumpet"],[60,"French Horn"],[61,"Brass Section"],[62,"Synth Brass 1"],[63,"Synth Brass 2"],[64,"Soprano Sax"],[65,"Alto Sax"],[66,"Tenor Sax"],[67,"Baritone Sax"],[68,"Oboe"],[69,"English Horn"],[70,"Bassoon"],[71,"Clarinet"],[72,"Piccolo"],[73,"Flute"],[74,"Recorder"],[75,"Pan Flute"],[76,"Blown Bottle"],[77,"Shakuhachi"],[78,"Whistle"],[79,"Ocarina"],[80,"Lead 1 (square)"],[81,"Lead 2 (sawtooth)"],[82,"Lead 3 (calliope)"],[83,"Lead 4 (chiff)"],[84,"Lead 5 (charang)"],[85,"Lead 6 (voice)"],[86,"Lead 7 (fifths)"],[87,"Lead 8 (bass + lead)"],[88,"Pad 1 (new age)"],[89,"Pad 2 (warm)"],[90,"Pad 3 (polysynth)"],[91,"Pad 4 (choir)"],[92,"Pad 5 (bowed)"],[93,"Pad 6 (metallic)"],[94,"Pad 7 (halo)"],[95,"Pad 8 (sweep)"],[96,"FX 1 (rain)"],[97,"FX 2 (soundtrack)"],[98,"FX 3 (crystal)"],[99,"FX 4 (atmosphere)"],[100,"FX 5 (brightness)"],[101,"FX 6 (goblins)"],[102,"FX 7 (echoes)"],[103,"FX 8 (sci-fi)"],[104,"Sitar"],[105,"Banjo"],[106,"Shamisen"],[107,"Koto"],[108,"Kalimba"],[109,"Bagpipe"],[110,"Fiddle"],[111,"Shanai"],[112,"Tinkle Bell"],[113,"Agogo"],[114,"Steel Drums"],[115,"Woodblock"],[116,"Taiko Drum"],[117,"Melodic Tom"],[118,"Synth Drum"],[119,"Reverse Cymbal"],[120,"Guitar Fret Noise"],[121,"Breath Noise"],[122,"Seashore"]],%% ,[123,"Bird Tweet"],[124,"Telephone Ring"],[125,"Helicopter"],[126,"Applause"],[127,"Gunshot"]trialy2(Instruments,R1),findbest(R1,Instrument),append(Instruments1,[Instrument],Instruments3),NumberofInstruments2 is NumberofInstruments1-1,instrumentlist(NumberofInstruments2,Instruments3,Instruments2),!.
interpret1(Debug,Query,Functions1,Functions2,Result) :-%%writeln([i11]),retractall(debug(_)),    assertz(debug(Debug)),        retractall(cut(_)),        assertz(cut(off)),member1(Query,Functions1,Functions2,Result).
interpret1(Debug,Query,Functions1,Functions2,Result) :-%%writeln([i11]),retractall(debug(_)),    assertz(debug(Debug)),        retractall(cut(_)),        assertz(cut(off)),member1(Query,Functions1,Functions2,Result).%%member1([_,R],_,[],R).
interpret2(Query,Functions1,Functions2,Result) :-%%writeln(i2),%%writeln(["%%interpret2 Query",Query,"Functions1",Functions1,"Functions2",Functions2]),        member2(Query,Functions1,Functions2,Result).
interpret2(Query,Functions1,Functions2,Result) :-%%writeln(i2),%%writeln(["%%interpret2 Query",Query,"Functions1",Functions1,"Functions2",Functions2]),        member2(Query,Functions1,Functions2,Result).%%member2([_,R],_,[],R).
interpret2(Query,Functions1,Functions2,Result) :-%%writeln1(i2),%%writeln1(["%%interpret2 Query",Query,"Functions1",Functions1,"Functions2",Functions2]),        member2(Query,Functions1,Functions2,Result).
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[[Statements1],or,[Statements2]],        (interpretbody(Functions0,Functions,Vars1,Vars2,Statements1,Result1)->true;%%,((Value1=cut)->!;true));        interpretbody(Functions0,Functions,Vars1,Vars2,Statements2,Result1)),!.
interpretbody(Functions0,Functions,Vars1,Vars2,Body,Result1) :-        Body=[[Statements1],or,[Statements2]],        (interpretbody(Functions0,Functions,Vars1,Vars2,Statements1,Result1);%%,((Value1=cut)->!;true));        interpretbody(Functions0,Functions,Vars1,Vars2,Statements2,Result1)),!.
interpretbodylp2c(Body,Algorithm1,Algorithm2) :-Body=[Statement|Statements],Statement=[v,_],interpretstatementlp2c2a(Statement,Algorithm1,Algorithm3),write_comma_if_not_empty_list(Statements,Algorithm3,Algorithm4),interpretbodylp2c(Statements,Algorithm4,Algorithm2),%%write_full_stop_if_last_item(Statements,Algorithm5,Algorithm2),!.
interpretbodylp2c(Body,Algorithm1,Algorithm2) :-        Body=[[Statements1|Statements1a]|Statements2],not(predicate_or_rule_name(Statements1)),string_concat(Algorithm1,"(",Algorithm3),interpretbodylp2c([Statements1],Algorithm3,Algorithm4),write_comma_if_not_empty_list(Statements1a,Algorithm4,Algorithm5),interpretbodylp2c(Statements1a,Algorithm5,Algorithm6),string_concat(Algorithm6,")",Algorithm6a),write_comma_and_newline_if_not_empty_list(Statements2,Algorithm6a,Algorithm7),interpretbodylp2c(Statements2,Algorithm7,Algorithm2),%%write_full_stop_if_last_item(Statements2,Algorithm8,Algorithm2),!.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-Body=[Statement|Statements],Statement=[v,_],interpretstatementlp2p2a(Statement,Algorithm1,Algorithm3,"[]"),write_comma_if_not_empty_list(Statements,Algorithm3,Algorithm4),interpretbodylp2p(Statements,Algorithm4,Algorithm2),%%write_full_stop_if_last_item(Statements,Algorithm5,Algorithm2),!.
interpretbodylp2p(Body,Algorithm1,Algorithm2) :-        Body=[[Statements1|Statements1a]|Statements2],        %trace,        (only_item(Statements1)->(S1="[",S2="]");(S1="(",S2=")")),not(predicate_or_rule_name(Statements1)),string_concat(Algorithm1,S1,Algorithm3),interpretbodylp2p([Statements1],Algorithm3,Algorithm4),write_comma_if_not_empty_list(Statements1a,Algorithm4,Algorithm5),interpretbodylp2p(Statements1a,Algorithm5,Algorithm6),string_concat(Algorithm6,S2,Algorithm6a),write_comma_and_newline_if_not_empty_list(Statements2,Algorithm6a,Algorithm7),interpretbodylp2p(Statements2,Algorithm7,Algorithm2),%%write_full_stop_if_last_item(Statements2,Algorithm8,Algorithm2),!.
interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),Value1A = [Value2],        val1emptyorvalsequal(Value1,Value1A),        %%val1emptyorvalsequal(Value1A,Value2),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[variable,=,[Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Variable2,=,[Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(bracket2,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        Value1A = Value2,        val1emptyorvalsequal(Value1,Value1A),        %%val1emptyorvalsequal(Value2A,Value1),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[variable],=,[Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[Value2],=,[Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(head,Variable1,Variable2,Vars1,Vars2) :-getvalues(Variable1,Variable2,Value1,Value2,Vars1),Value1=[Value1A|_Rest],        val1emptyorvalsequal(Value2,Value1A),        putvalue(Variable2,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[head,Value1,variable],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[head,Value1,Value1A],"Press c."]),(not(get_single_char(97))->true;abort));true),!.
interpretpart(is,Variable1,Value1,Vars1,Vars2) :-        getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),expression(Value1A),        %%val1emptyorvalsequal(Value1A,Value1),%%isval(Value2),        putvalue(Variable1,Value1A,Vars1,Vars2),(debug(on)->(writeln([call,[variable,is,Value1A],"Press c."]),(not(get_single_char(97))->true;abort));true),(debug(on)->(writeln([exit,[Variable1,is,Value1A],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(is,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),expression(Value1),expression(Value2),        val1emptyorvalsequal(Value1,Value2),%%isval(Value2),        putvalue(Variable1,Value2,Vars1,Vars2),(debug(on)->(writeln([call,[[n,is],[variable,Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true),(debug(on)->(writeln([exit,[[n,is],[Variable1,Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(is,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),expression(Value1),expression(Value2),        val1emptyorvalsequal(Value1,Value2),%%isval(Value2),        putvalue(Variable1,Value2,Vars1,Vars2),(debug(on)->(writeln([call,[[n,is],[variable,Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true),(debug(on)->(writeln([exit,[[n,is],[Variable1,Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true).interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),Value1A = [Value2],        val1emptyorvalsequal(Value1,Value1A),        %%val1emptyorvalsequal(Value1A,Value2),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[[n,wrap],[variable,[Value2]]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[n,wrap],[Variable2,[Value2]]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(is,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("is",Dbw_is),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),not(is_empty(Value1)),expression(Value1),is_empty(Value2),        val1emptyorvalsequal(Value2,Value1),%%isval(Value2),debug_call(Skip,[[Dbw_n,Dbw_is],[Value1,variable]]),(        putvalue(Variable2,Value1,Vars1,Vars2)->debug_exit(Skip,[[Dbw_n,Dbw_is],[Value1,Value1]]);     debug_fail(Skip,[[Dbw_n,Dbw_is],[Value1,variable]])),!.
interpretpart(is,Variable1,Variable2,Vars1,Vars2) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("is",Dbw_is),        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        %%getvalue(Value1,Value1A,Vars1),%%isvalstr(Value1),%%isvalstr(Value1A),not(isempty(Value1)),expression(Value1),isempty(Value2),        val1emptyorvalsequal(Value2,Value1),%%isval(Value2),debug_call(Skip,[[Dbw_n,Dbw_is],[Value1,variable]]),(        putvalue(Variable2,Value1,Vars1,Vars2)->debug_exit(Skip,[[Dbw_n,Dbw_is],[Value1,Value1]]);     debug_fail(Skip,[[Dbw_n,Dbw_is],[Value1,variable]])),!.
interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1A is Value2 + Value3,        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[variable,is,Value2+Value3],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Value1A,is,Value2+Value3],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(isplus,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1A is Value2 + Value3,        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[variable,is,Value2+Value3],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Value1A,is,Value2+Value3],"Press c."]),(not(get_single_char(97))->true;abort));true).interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1 = [Value2A, Value3A],        val1emptyorvalsequal(Value2,Value2A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable2,Value2A,Vars1,Vars3),        putvalue(Variable3,Value3A,Vars3,Vars2),        (debug(on)->(writeln([call,[[Value2A, Value3A],=,[variable1,variable2]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[Value2A, Value3A],=,[Value2A, Value3A]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1 = [Value2A, Value3A],        val1emptyorvalsequal(Value2,Value2A),        val1emptyorvalsequal(Value3,Value3A),        putvalue(Variable2,Value2A,Vars1,Vars3),        putvalue(Variable3,Value3A,Vars3,Vars2),        (debug(on)->(writeln([call,[[Value2A, Value3A],=,[variable1,variable2]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[Value2A, Value3A],=,[Value2A, Value3A]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1A = [Value2, Value3],        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[variable,=,[Value2,Value3]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[Value2,Value3],=,[Value2,Value3]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(match,Variable1,Variable2,Variable3,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Variable3,Value1,Value2,Value3,Vars1),        Value1A = [Value2, Value3],        val1emptyorvalsequal(Value1,Value1A),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[variable,=,[Value2,Value3]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[[Value2,Value3],=,[Value2,Value3]],"Press c."]),(not(get_single_char(97))->true;abort));true).interpretpart(bracket1,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),Value1A = [Value2],        val1emptyorvalsequal(Value1,Value1A),        %%val1emptyorvalsequal(Value1A,Value2),        putvalue(Variable1,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[variable,=,[Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Variable2,=,[Value2]],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretpart(member,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),(not(Value1=empty)->(member(Value1,Value2),Vars2=Vars1,        (debug(on)->(writeln([call,[member,Value1,Value2],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[member,Value1,Value2],"Press c."]),(not(get_single_char(97))->true;abort));true));(member(Value3,Value2),putvalue(Variable1,Value3,Vars1,Vars2),                (debug(on)->(writeln([call,[member,variable1,Value2],"Press c."]),(not(get_single_char(97))->true;abort));true),                (debug(on)->(writeln([exit,[member,Value3,Value2],"Press c."]),(not(get_single_char(97))->true;abort));true))).
interpretpart(tail,Variable1,Variable2,Vars1,Vars2) :-        getvalues(Variable1,Variable2,Value1,Value2,Vars1),        Value1=[_Head|Value1A],%%removebrackets(Value1A,Value1B),         val1emptyorvalsequal(Value2,Value1A),        putvalue(Variable2,Value1A,Vars1,Vars2),        (debug(on)->(writeln([call,[tail,Value1,variable],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[tail,Value1,Value1A],"Press c."]),(not(get_single_char(97))->true;abort));true).
interpretstatement1(Functions0,_Functions,Query,Vars,Vars,true) :-Query=[_Function],        debug(on)->writeln([call,[Function]]),        interpret2(Query,Functions0,Functions0,_Result1),        debug(on)->writeln([exit,[Function]]).
interpretstatement1(Functions0,_Functions,Query,Vars,Vars,true,nocut) :-Query=[_Function],debug_call(Skip,[Function]),        (interpret2(Query,Functions0,Functions0,_Result1)->debug_exit(Skip,[Function]);     debug_fail(Skip,[Function])),!.
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_fail]],Vars,Vars,_,nocut) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("fail",Dbw_fail1),Dbw_fail1=Dbw_fail,fail.
interpretstatement1(_F0,_Functions,[[Dbw_n,Dbw_true]],Vars,Vars,_,nocut) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("true",Dbw_true1),Dbw_true1=Dbw_true,!.
interpretstatement1(_F0,_Functions,[[not,Operator],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-isop(Operator),interpretpart(not_is,Variable1,Variable2,Vars1,Vars2),!.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_fail]|_],Vars,Vars,_,nocut) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("fail",Dbw_fail1),Dbw_fail1=Dbw_fail,fail.
interpretstatement1(ssi,_F0,_Functions,[[Dbw_n,Dbw_fail]|_],Vars,Vars,_,nocut,[]) :- interpretstatement1(non-ssi,_F0,_Functions,[[Dbw_n,Dbw_fail]|_],Vars,Vars,_,nocut).
interpretstatement1(ssi,_F0,_Functions,[[n,[not,Operator]],[Variable1,Variable2]],Vars1,Vars2,true,nocut) :-isop(Operator),interpretpart(not_is,Variable1,Variable2,Vars1,Vars2),!.
interpretstatement2(Variable,Vars1,Value) :-getvalue(Variable,Value,Vars1).
interpretstatement3(A + B,Vars,Value1) :-        interpretstatement2(A,Vars,Value2),        interpretstatement2(B,Vars,Value3),        Value1 = Value2 + Value3.
interpretstatement3(Value,_Vars,Value) :-(number(Value);atom(Value)).
interpretstatement3(Variable,Vars,Value) :-        getvalue(Variable,Value,Vars).
interpretstatementlp2c2(Arguments1,Algorithm1,Algorithm2) :-Arguments1=[Arguments1a|Arguments2],interpretstatementlp2c2a(Arguments1a,Algorithm1,Algorithm3),write_comma_if_not_empty_list(Arguments2,Algorithm3,Algorithm4),interpretstatementlp2c2(Arguments2,Algorithm4,Algorithm2),!.
interpretstatementlp2c2b(Arguments1,Algorithm1,Algorithm2) :-Arguments1=[Arguments1a|Arguments2],interpretstatementlp2c2a(Arguments1a,Algorithm1,Algorithm3),write_comma_if_not_empty_list(Arguments2,Algorithm3,Algorithm4),interpretstatementlp2c2b(Arguments2,Algorithm4,Algorithm5),   write_close_bracket_if_last_item(Arguments2,Algorithm5,Algorithm2),!.
interpretstatementlp2c3(Term1,Term2) :-%not(is_list(Term1)),not(contains_var([v,_],Term1)),not(contains_var([n,_],Term1)),term_to_atom(Term1,Term1a), foldr(string_concat,[Term1a],Term2),!.
interpretstatementlp2c3([n,Name],Name) :- !.
interpretstatementlp2c3([v,Name1],Name2) :- %string_concat(A,B,Name1),atom_length(A,1),%upcase_atom(A,A1),string_concat("",Name1,Name2),!.
interpretstatementlp2p2(Arguments1,Algorithm1,Algorithm2,Brackets) :-Arguments1=[Arguments1a|Arguments2],interpretstatementlp2p2a(Arguments1a,Algorithm1,Algorithm3,Brackets),write_comma_if_not_empty_list(Arguments2,Algorithm3,Algorithm4),interpretstatementlp2p2(Arguments2,Algorithm4,Algorithm2,Brackets),!.
interpretstatementlp2p2b(Arguments1,Algorithm1,Algorithm2,Brackets) :-Arguments1=[Arguments1a|Arguments2],interpretstatementlp2p2a(Arguments1a,Algorithm1,Algorithm3,Brackets),write_comma_if_not_empty_list(Arguments2,Algorithm3,Algorithm4),interpretstatementlp2p2b(Arguments2,Algorithm4,Algorithm5,Brackets),   write_close_bracket_if_last_item(Arguments2,Algorithm5,Algorithm2),!.
interpretstatementlp2p3(Term1,Term2) :-%not(is_list(Term1)),not(contains_var1([v,_],Term1)),not(contains_var1([n,_],Term1)),term_to_atom(Term1,Term1a), foldr(string_concat,[Term1a],Term2),!.
interpretstatementlp2p5([],_,"()","()") :- !.
interpretstatementlp2p5([n,Name],Name,_Brackets) :- !.
intersection1(A,B,C):-findall(D,(member(D,A),member(D,B)),C).intersection2(A,B,C):-intersection2(A,B,[],C),!.
intersection1(L1,L2,L3a,L3) :- head(L1,I1),tail(L1,L4),intersection2(I1,L2,[],L5),append(L3a,L5,L6),intersection1(L4,L2,L6,L3).
intersection1(Result1,Result2,Result3,Result4) :-        Result1=[Result6|Results1],intersection2(Result6,Result2,Result3,Result5),        intersection1(Results1,Result2,Result5,Result4).
intersection1([],_A,L,L).
intersection2(I1,L1,L2,L3) :- head(L1,I1),tail(L1,L4),wrap(I1,I11),append(L2,I11,L5),intersection2(I1,L4,L5,L3).
intersection2(I1,L1,L2,L3) :- head(L1,I2),tail(L1,L4),not((=(I1,I2))),intersection2(I1,L4,L2,L3).
intersection2(Result1,Result2,Result7,Result3) :-        member(Result1,Result2),        append(Result7,[Result1],Result3).
intersection2(Result1,Result2,Result7,Result7) :-        not(member(Result1,Result2)).
intersection2([],_,A,A):-!.intersection2([A1|A2],B,C,D):-member1(A1,B),intersection2(A2,B,[A1|C],D).
intersection2([_|A2],B,C,D):-intersection2(A2,B,C,D).member1(A,[A|_]):-!.
intersection2(_A,[],L,L).
intersection_all1([A1|A3],A2,C) :-intersection(A2,A1,A4),intersection_all1(A3,A4,C).
io(+,[A,B],[C]):-C is A+B.
is_alpha_or_quotes("'") :- !.is_alpha_or_quotes("’") :- !.
is_brackets([[[T,Dbw_brackets]|_]|_]):- get_lang_word("t",T),  get_lang_word("brackets",Dbw_brackets).
is_empty(N) :-variable_name(N).%=empty.
is_item4([T,_,_,_]) :- get_lang_word("t",T).
is_item4([[T,Dbw_brackets],_]) :- get_lang_word("t",T), get_lang_word("brackets",Dbw_brackets).
is_type(TT,Type,L1,L2,TN1,TN2) :- get_lang_word("t",T),  get_lang_word(Type,Dbw_type), TT=[[T,Dbw_type,_,_]|_], forall(member(T0,TT),T0=[T,Dbw_type,_,_]), findall([N1,Data],(member(T0,TT),T0=[T,Dbw_type,N1,Data]),Ns), %TT=[T1|T2], %T1=[T,Dbw_type,N], put_TN(Dbw_type,Ns,L1,L2,TN1,TN2).
is_value_match(A) :- A="|",fail,!.
is_value_match(A) :- blob(A,stream),!.
is_value_match(A) :- number(A),!.
is_value_match(A) :- string(A),!.
islist(A) :- list1(A,_,_),!.
isop(=).
isop(=).append1([],Item,Item) :-!.
isop(=).stringconcat1([],Item,Item) :-!.
isop(Is):-get_lang_word("is",Is1),Is1=Is,!.
isop(is).
isval(Value) :-number(Value).
isvalempty(N) :-isval(N);(N=empty).
isvalempty(N) :-isval(N);(N=empty).isempty(N) :-N=empty.
isvalempty(N) :-isval(N);(is_empty(N)).
isvalstr(N) :-isval(N);string(N).
isvalstr(N) :-isval(N);string(N)./**isvalstrempty(N) :-isval(N);(string(N);N=empty).**/isvalstrempty(N) :-isval(N),!.
isvalstrempty(N) :-isval(N),!.
isvalstrempty(N) :-string(N).
isvalstrempty(N) :-string(N),!.
isvalstrempty(N) :-string(N),!.isvalstrempty(empty) :- !./**isvalstrempty(N) :-atom(N),fail,!.**/isvalstrorundef(N) :- var(N);(not(var(N)),(isval(N);expression(N))).
isvalstrempty(N) :-get_lang_word("v",Dbw_v),not(N=Dbw_v),not(N=[Dbw_v,_]),string(N).
isvalstrempty(N) :-get_lang_word("v",Dbw_v),not(N=Dbw_v),not(N=[Dbw_v,_]),string(N).isvalstrempty(Empty) :- is_empty(Empty).isvalstrempty([]).
isvalstrempty([]).
isvalstrempty(empty).
isvalstrempty(empty) :- !.
isvalstrorundef(N) :- blob(N,stream),!.
isvalstrorundef(N) :- not(var(N)),expression(N),!.
isvalstrorundef(N) :- not(var(N)),isval(N),!.
isvar([Dbw_v,_Value]) :- get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,!.
isvar([v,_Value]) :- !.
isvar([v,_Value]) :- !.isval(Value) :-number(Value).
item(T)-->["\""],word21("",T),["\""].
item(T)-->["\""],word21("",T),["\""].item(T)-->number21("",U),{stringtonumber(U,T)}.
item(T)-->compound([],T).
item(T)-->number21("",U),{stringtonumber(U,T)}.item(T)-->word21_atom("",T1),{atom_string(T,T1)}.
item(T)-->word21_atom("",T1),{atom_string(T,T1)}.
item(Vgp1,Vgp2,T):-compound(Vgp1,Vgp2,[],T).
item(Vgp1,Vgp2,T):-grammar_part("\"",Vgp1,Vgp3),word21(Vgp3,Vgp4,"",T),grammar_part("\"",Vgp4,Vgp2).
item(Vgp1,Vgp2,T):-number21(Vgp1,Vgp2,"",U),stringtonumber(U,T).
item(Vgp1,Vgp2,T):-word21_atom(Vgp1,Vgp2,"",T1),atom_string(T,T1).
iv1flagdisjunction(_,_,false).
iv1flagdisjunction(_,_,false) :- !.
iv3s0(IV3s,Program0,IV3s1,IV3s2).
iv3s1(_,[],IV3s,IV3s).iv3s1(IV3,Program0,IV3s1,IV3s2) :-Program0=[Rule|Rules],iv3s2(IV3,Rule,IV3s1,IV3s3),iv3s1(IV3,Rules,IV3s3,IV3s2).
iv3s2(IV3,Rule,IV3s,IV3s1,IV3s2).
join_and_change(After,%Insertions,After2,After3) :- After=[After4|After5], not(i_or_d(After4)), append(After2,[After4],After6), join_and_change(After5,%Insertions,After6,After3),!.
join_chars_after(List1,Chars,List5,List2) :-List1=[Char1,Char2|List3],member(Char2,Chars),string_concat(Char1,Char2,Char3),append([Char3],List3,List4),join_chars_after(List4,Chars,List5,List2),!.
join_chars_after(List1,Chars,List5,List2) :-List1=[Char1,Char2|List3],not(member(Char2,Chars)),append([Char2],List3,List4),append(List5,[Char1],List6),join_chars_after(List4,Chars,List6,List2),!.
join_chars_after([List1],_Chars,List2,List3) :-append(List2,[List1],List3),!.
join_period([A],[A]) :-!.join_period([X11,".",X13|Xs], [X12|Ys]) :-string_concat(X11,".",X12),not(X13="."),join_period([X13|Xs], Ys),!.
join_period([],[]) :-!.
join_san(A,atom,B) :- foldr(string_concat,A,B1),atom_string(B,B1),!.
join_san(A,compound,B) :- foldr(string_concat,A,B1),term_to_atom(B,B1),!.
join_san(A,number,B) :- foldr(string_concat,A,B1),number_string(B,B1),!.
join_san(P,list,P) :- !.
jump(Start,Jump,Limit,L1,L21,L22) :- member([Start,Name],L1), append(L21,[[Start,Name]],L23), Start2 is Start+Jump, jump(Start2,Jump,Limit,L1,L23,L22),!.
keep([[comment,1]]).
label(Item1,Range,ItemNumber,Position1,ItemLabels1,ItemLabels2) :-((atom(Item1);number(Item1))->Item1a=[Item1];Item1a=Item1),Item1a=[Item2|Items], %% removed [] from i1((atom(Item2),Type=[n,atom]);(number(Item2),Type=[n,number]);(string(Item2),Type=[n,string]);(var(Item2),Type=[n,variable])), %% ***Label=[Item2,Type,Range,ItemNumber,Position1],append(ItemLabels1,[Label],ItemLabels3),Position2 is Position1 + 1,label(Items,Range,ItemNumber,Position2,ItemLabels3,ItemLabels2).
label([],_Range,_ItemNumber,_Position,ItemLabels,ItemLabels).
labelall(Data1,Range,ListItemNumber,Position1,Labels1,Labels2) :-Data1=[Data2|Data3],label(Data2,Range,ListItemNumber,Position1,Labels1,Labels3),Position2 is Position1 + 1,labelall(Data3,Range,ListItemNumber,Position2,Labels3,Labels2).
last_call_or_terminal2(Body1) :-Body1=[Item|Body2],not(call_or_terminal(Item)),last_call_or_terminal2(Body2),!.
lc_test(NTotal,NTotal,Score,Score,List,List) :- !.
lc_test(NTotal1,NTotal2,Score1,Score2,List1,List2) :-NTotal3 is NTotal1+1,%gh2tmp,((catch(call_with_time_limit(19,(lc_test0(NTotal3,At_start,Max,CICD,Start_files,End_files),%writeln(***),pwd, %gh_init(At_start),luciancicd(At_start,Max,CICD,Start_files,End_files),sleep(2.0)%writeln1([result1,Result1]),%Result=Result1)),_,fail))->(Score3 is Score1+1,append(List1,[[lc_test,NTotal3,passed]],List3));(Score3=Score1,append(List1,[[lc_test,NTotal3,failed]],List3))),writeln0(""), %tmp2gh,lc_test(NTotal3,NTotal2,Score3,Score2,List3,List2),!.%% lc_test individual cases, Debug=trace=on or off, N=case number, Passed=output=resultlc_test1(N,Passed) :- %gh2tmp,((lc_test0(N,At_start,Max,CICD,Start_files,End_files),gh_init(At_start),luciancicd(At_start,Max,CICD,Start_files,End_files)%writeln1([result1,Result1]),%Result=Result1)->(Passed=passed,writeln0([lc_test,N,passed]));(Passed=failed,writeln0([lc_test,N,failed]))), %tmp2gh,!.
lead_to_empty_list(Items,Items_all,A,B) :- Items=[Items1|Items2], (member(Items1,A)->fail; (append(A,[Items1],C), member([Items1,Items3],Items_all), lead_to_empty_list(Items3,Items_all,C,D), lead_to_empty_list(Items2,Items_all,D,B))). % cyclespath(Node, Node, Tree, Cycles1, A4) :-    findall1(Cycles2,path00(Node, Node, Tree, Cycles1, Cycles2),Cycles3),    flatten(Cycles3,A3),list_to_set(A3,A4),    not(A4=[]),!.% Predicate to check if there's a path from Start to Endpath00(Start, End, Tree, Visited, [End|Visited]) :-    member([Start, Ends], Tree),    member(End, Ends),    \+ member(End, Visited).
letter(address,"34 Thicket Place").
letter(date,"Friday, 31 March, 2023").letter(message,"Could you please send the parcel code 001 to me by the end April?").letter(dear,"Dear").
letter(from,"Harry Jones").
letter(from_address,"56 High Way").
letter(from_postcode,"0002").
letter(from_suburb,"Frontier").
letter(postcode,"0000").
letter(suburb,"Thisby").
letter(yours_sincerely,"Yours Sincerely").
lettering_spacing(L,N,S) :- S is L/N.
lfl2html_codes([body],"<body>","</body>").
lfl2html_codes([head],"<head>","</head>").
lfl2html_codes([p],"<p>","</p>").lfl2html_codes([b],"<b>","</b>").
lfl2html_codes([title],"<title>","</title>").
light(WhitetoColour,Pixels1) :-Pixels1=[Pixel|Pixels2],Pixel=[_X,_Y,Colour1],(Colour1=2-> Colour2=WhitetoColour;Colour2=Colour1),texttobr2(1000), %% 100 done-up As * 10 songstexttobr2(2), %% dot on graciously give, graciously givetexttobr2(20), %% spiritually play 10 songs to light pixellight(WhitetoColour,Pixels2).
limit_reached(New_rule_number,MaxPredicates,Rules0,PredicateName,InputVars1,OutputVars,Rules1) :-New_rule_number>=MaxPredicates,length(InputVars1,InputVars1L),length(OutputVars,OutputVarsL),pred_already_in_list1(PredicateName,InputVars1L,OutputVarsL,Rules0,Rules1).
line(A) --> %%spaces1(_),%{trace}, name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A=B"=",%name2(Word21), %spaces1(_), name1(Word11),{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),A=[[n,=],[Word10a,Word11a]]},!.
line(A) --> %%spaces1(_), name1(Word10), spaces1(_), %% A = B*Y(name1(Word21)|name2(Word21)), spaces1(_), name1(Word11), name2(Word12), name1(Word13), {string_concat(Word11,Word12,B),string_concat(B,Word13,C),A=[Word10,Word21,C]},!.line(A) --> %%spaces1(_), name1(Word10), spaces1(_), %% A is Bname2(Word21), spaces1(_), name1(Word11),{A=[Word10,Word21,Word11]},!.
line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"=",%name2(Word21), %spaces1(_), "\"\"",{v_if_string_or_atom(Word10,Word10a),%v_if_string_or_atom(Word11,Word11a),%v_if_string_or_atom(Word12,Word12a),A=[[n,equals4],[Word10a,""]]},!.
line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"=",%name2(Word21), %spaces1(_), varnames(Word11),{v_if_string_or_atom(Word10,Word10a),%v_if_string_or_atom(Word11,Word11a),A=[[n,=],[Word10a,Word11]]},!.
line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A=B"=",%name2(Word21), %spaces1(_), name1(Word11),{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),A=[[n,=],[Word10a,Word11a]]},!.
line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},newlines1(_), %% A is Bname1(Word21), newlines1(_), name1(Word11),{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),A=[[n,Word21],[Word10a,Word11a]]},!.
line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},newlines1(_), %% A is Bname2(Word21), newlines1(_), name1(Word11),{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),A=[[n,Word21],[Word10a,Word11a]]},!.
line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},spaces1(_), %% A is Bname1(Word21), spaces1(_), name1(Word11),{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),A=[[n,Word21],[Word10a,Word11a]]},!./*line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"is",%name2(Word21), %spaces1(_), name1(Word11),{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),A=[[n,=],[Word10a,Word11a]]},!.
line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},spaces1(_), %% A is Bname2(Word21), spaces1(_), name1(Word11),{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),A=[[n,Word21],[Word10a,Word11a]]},!.
line(A) --> %%spaces1(_),    %{trace},%name1(Word10),{%trace,%not(Word10=findall)},%spaces1(_), %% A = [B,C]%"=",%name2(Word21), %spaces1(_), "[",newlines1(_),%varnames(Word11),"]",%newlines1(_),{%v_if_string_or_atom(Word10,Word10a),%v_if_string_or_atom(Word11,Word11a),%v_if_string_or_atom(Word12,Word12a),A=[]},!.line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"=",%name2(Word21), %spaces1(_), "[",name1(Word11),"|",name1(Word12),"]",{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),v_if_string_or_atom(Word12,Word12a),A=[[n,equals4],[Word10a,[Word11a,"|",Word12a]]]},!.line(A) --> %%spaces1(_), name1(Word10),newlines1(_),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"=",newlines1(_),%name2(Word21), %spaces1(_), varnames3(Word11),%newlines1(_),{v_if_string_or_atom(Word10,Word10a),%v_if_string_or_atom(Word11,Word11a),A=[[n,=],[Word10a,Word11]]},!.
line(A) --> %%spaces1(_),    %{trace},name1(Word10),newlines1(_),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"=",newlines1(_),%name2(Word21), %spaces1(_), "[",newlines1(_),varnames(Word11),newlines1(_),"]",%newlines1(_),{v_if_string_or_atom(Word10,Word10a),%v_if_string_or_atom(Word11,Word11a),%v_if_string_or_atom(Word12,Word12a),A=[[n,equals4],[Word10a,Word11]]},!.line(A) --> %%spaces1(_),    %{trace},%name1(Word10),{%trace,%not(Word10=findall)},%spaces1(_), %% A = [B,C]%"=",%name2(Word21), %spaces1(_), "[",newlines1(_),varnames(Word11),newlines1(_),"]",%newlines1(_),{%v_if_string_or_atom(Word10,Word10a),%v_if_string_or_atom(Word11,Word11a),%v_if_string_or_atom(Word12,Word12a),A=Word11},!.
line(A) --> %%spaces1(_),    %{trace},name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"=",%name2(Word21), %spaces1(_), "[",varnames(Word11),"]",{v_if_string_or_atom(Word10,Word10a),%v_if_string_or_atom(Word11,Word11a),%v_if_string_or_atom(Word12,Word12a),A=[[n,equals4],[Word10a,Word11]]},!.line(A) --> %%spaces1(_), name1(Word10),{%trace,not(Word10=findall)},%spaces1(_), %% A = [B,C]"=",%name2(Word21), %spaces1(_), "[",name1(Word11),"|",name1(Word12),"]",{v_if_string_or_atom(Word10,Word10a),v_if_string_or_atom(Word11,Word11a),v_if_string_or_atom(Word12,Word12a),A=[[n,equals4],[Word10a,[Word11a,"|",Word12a]]]},!.
line(Word) --> %%spaces1(_), name1(Word), {(Word="true"->true;Word="!")},!.line(Word1) -->"(",lines(Word2),")",{Word1=[Word2]},!.
line(Word1) -->"(",line(Word2),")",{Word1=[Word2]},!.
line(Word1) -->"(",line(Word2),"->",line(Word3),";",line(Word4),")",{Word1=[Word2,->,Word3,or,Word4]},!.line(Word1) -->"(",line(Word2),"->",line(Word3),")",{Word1=[Word2,->,Word3]},!.line(Word1) -->"(",line(Word2),";",line(Word3),")",{Word1=[Word2,or,Word3]},!.
line(Word1) -->"(",line(Word2),";",newlines1(_N2),spaces1(_),line(Word3),")",{Word1=[[n,or],[Word2,Word3]]},!.line([[n,cut]]) --> %%spaces1(_), name1(Word), {not(Word=findall)},{Word=!},!.
line(Word1) -->"(",newlines1(_),line(Word2),";",newlines1(_N2),line(Word3),")",{Word1=[[n,or],[Word2,Word3]]},!.
line(Word1) -->"(",newlines1(_),line(Word2),newlines1(_N21),"->",newlines1(_N2),line(Word3),newlines1(_N3),")",{Word1=[[n,"->"],[Word2,Word3]]},!.
line(Word1) -->"{",lines(Word2),"}",{Word1=[[n,code],Word2]},!.
line(Word1) -->%{trace},"(",newlines1(_),line(Word2),newlines1(_),"->",newlines1(_),line(Word3),newlines1(_),";",newlines1(_N2),line(Word4),newlines1(_N3),")",{%(Word4=[[[[n,_]|_]|_]|_]->Word4=[Word41];Word4=Word41),%if_one_item_then_remove_brackets()Word1=[[n,"->"],[Word2,Word3,Word4]]},!.
line([[n,Word]]) --> %%spaces1(_), name1(Word),{%trace,not(Word=findall)}.
line([[n,cut]]) --> %%spaces1(_), name1(Word), {not(Word=findall)},{Word=!},!.
lines_to_comments(A,B) :- %term_to_atom(A,A1), split_string(A,"\n\r","\n\r",C), findall1([[n,comment],[D]],member(D,C),B).
lines_to_comments(A,_) :- member([],A),writeln("Error in main_file.txt, or other."),abort.
link(1,3).link(1,4).link(1,5).
link(2,3).
link(2,5).
link(2,6).
link(3,4).
link(3,6).
link(4,5).
link(4,6).
link(5,6).
link1("Earth","space station").
link1("space station","planetary outpost").% 26 done% ["Time Travel","Interesting histories to visit 2.txt",0,algorithms,"43. The character from history wanted an optimised algorithm."]%minimise_dfa([[a,b],[a,c],[b,d],[c,d],[d,a]],Min_dfa).
list(Formula,Formula) :-not(atom(Formula)).
list(Formula1,Formula2) :-atom(Formula1),Formula2=[Formula1].
list(Formula1,Formula2) :-atom(Formula1),Formula2=[Formula1].list(Formula,Formula) :-not(atom(Formula)).
list([L|Ls]) --> [L], list(Ls).
list([L|Ls]) --> [L], list(Ls).short_essay_helper(%%Filex,String01,Key_words,Reasons_per_paragraph) :-retractall(num_paras_exp(_)),assertz(num_paras_exp(5)),retractall(num_paras_crit(_)),assertz(num_paras_crit(5)),retractall(string00_z(_)),%%assertz(string00_z([])),retractall(critique3(_)),assertz(critique3([])),retractall(refs(_)),assertz(refs([])),retractall(chosen_quotes(_)),assertz(chosen_quotes([])),directory_files("sources/",F),delete_invisibles_etc(F,G),%%trace,SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall(String02h3,(member(Filex1,G),string_concat("sources/",Filex1,Filex),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),(String02a=[Az,Bz,Cz|String02c]->true;(concat_list(["Error: ",Filex," not in format [\"Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.\",\"Surname, A 2000\",First_Page_Num,\"<first page>\",\"<second page>\",...\"]"],Notification1),writeln(Notification1),abort)),%%String02c=String02d,%%trace,findall([Az,Bz,Cz,N1,String02cb],(length(String02c,L),numbers(L,1,[],N),%%random_member(N1,N),get_item_n(String02c,N1,String02ca),%%member(String02ca,String02c),split_string(String02ca, ".\n\r", ".\n\r", String02cb)%%member(String02cb1,String02cb)),String02cc),%%maplist(append,[String02cc],[String02d]),%%delete(String02cc,[_,[]],String02d),String02cc=String02d,findall([Az,Bz,Cz,N2,String02d2],(member([Az,Bz,Cz,N2,String02d1],String02d),member(String02d2,String02d1),downcase_atom(String02d2,String02e),atom_string(String02e,String02f1),split_string(String02f1, SepandPad, SepandPad, String02e1),findall(String02g,(member(Key_words1,Key_words),%%trace,downcase_atom(Key_words1,Key_words11),atom_string(Key_words11,Key_words12),findall(Key_words12,(member(Key_words12,String02e1)),String02g)),String02i),not(maplist(equals_empty_list,String02i))),String02h31),sort(String02h31,String02h3)%%prepare_file_for_ml(String00,String02a)),String00z1),%%,%%trace,%%writeln1([string00z1,String00z1]),%%findall(String02h2,(member([Ay,By,Cy,N1,String02h1],String00z1),%%(String02h1=[]->String02h2=[];maplist(append,[String00z1],[String00]),%%)%%),String00z),%%delete(String00z,[],String00),term_to_atom(Key_words,Key_words_a),atom_string(Key_words_a,Key_words_b),(String00=[]->(concat_list(["Error: No files in source folder or no instances of keywords ",Key_words_b," in files in source folder."],Notification2),writeln(Notification2),abort);true),%%maplist(append,[[String00z1]],String00),%%maplist(append,[String00z],String00),%%trace,assertz(string00_z(String00)),%%writeln1([string00,String00]),%%notrace,%%writeln1(String02),generate_file_name(File1,File2),Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],explain_structure(String01,Reasons_per_paragraph,File1),exposition(String00,String01,Reasons_per_paragraph,Numbers,String02,Exposition),%%concat_list(["Do you agree or disagree with ",String01," (a/d) ? "],String2ad),%%get_string(String2ad,either,one-not-ml,"","",String3ad),choose1(["a"%%,"d"],String3ad),(String3ad="a"->(retractall(agree_disagree(_)),assertz(agree_disagree(agree)));(retractall(agree_disagree(_)),assertz(agree_disagree(disagree)))),critique(String00,String01,Reasons_per_paragraph,Numbers,String02,Critique),agree_disagree(Pole),%%concat_list(["What is the future area of research from your essay about ",String01,"? "],Future_research_prompt),%%trace,%%get_string(Future_research_prompt,either,one-not-ml,"","",Future_research),%%choose_sentence_range(String00,),choose(N_page_ref,String00a1,String00a2,_String00a3,_String00a4,String00a5),concat_list(["In ",String01,", automation should apply to \"",String00a5,"\" (",String00a2,", p. ",N_page_ref,")."],Future_research),reference(String00a1),term_to_atom([Exposition,Critique,Future_research],File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream),%% Output essay%%findall(_,(member(Exposition1,Exposition),Exposition1=refs(R2),%%writeln1([Exposition,Critique,Future_research,R2]),write_essay(String01,Pole,Exposition,Critique,Future_research,R2,Essay,HTML),writeln1(Essay),(open_s(File2,write,Stream1),%%string_codes(BrDict3),write(Stream1,HTML),close(Stream1)),!.
list([L|Ls]) --> [L], list(Ls).comment(fiftyastest).
list([L|Ls]) --> [L], list(Ls).comment(fiftyastest).comment(turnoffas).
list([L|Ls]) --> [L], list(Ls).short_essay_helper(Files,%%Filex,String01,Reasons_per_paragraph,Essay_0) :-retractall(critique3(_)),assertz(critique3([])),retractall(refs(_)),assertz(refs([])),retractall(refs_long(_)),assertz(refs_long([])),retractall(key_words(_)),assertz(key_words([])),findall(String02a,(member(Filex1,Files),%string_concat("sources/",Filex1,Filex),%phrase_from_file_s(string(String00a), Filex),%string_codes(String02b,String00a),atom_to_term(Filex1,String02a,[])%%split_string(String00, "\n\r", "\n\r", [String01a|_]),%%prepare_file_for_ml(String00,String02a)),String00),%%trace,%%writeln1(String00),%%notrace,%%writeln1(String02),generate_file_name(File1,_File2),Numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],explain_structure(String01,Reasons_per_paragraph,File1),exposition(String00,String01,Reasons_per_paragraph,Numbers,String02,Exposition),%%concat_list(["Do you agree or disagree with ",String01," (a/d) ? "],String2ad),%%get_string(String2ad,either,one-not-ml,"","",String3ad),choose1(["a"%%,"d"],String3ad),(String3ad="a"->(retractall(agree_disagree(_)),assertz(agree_disagree(agree)));(retractall(agree_disagree(_)),assertz(agree_disagree(disagree)))),critique(String00,String01,Reasons_per_paragraph,Numbers,String02,Critique),agree_disagree(Pole),%%concat_list(["What is the future area of research from your essay about ",String01,"? "],Future_research_prompt),%%trace,%%get_string(Future_research_prompt,either,one-not-ml,"","",Future_research),choose_sentence_range(String00,N_page_ref,String00a1,String00a2,_String00a3,String00a4),choose(String00a4,String00a5),concat_list(["In ",String01,", automation should apply to ",String00a5," (",String00a2,", p. ",N_page_ref,")."],Future_research),reference(String00a1),refs(R2),refs_long(_R21),%term_to_atom([Exposition,Critique,String3ad,Future_research,R21],File_contents),open_s(File1,write,Stream),write(Stream,File_contents),close(Stream),%% Output essay%%findall(_,(member(Exposition1,Exposition),Exposition1=%%writeln1([Exposition,Critique,Future_research,R2]),write_essay(String01,Pole,Exposition,Critique,Future_research,R2,Essay_0,_HTML)%writeln1(Essay_0)/**(open_s(File2,write,Stream1),%%string_codes(BrDict3),write(Stream1,HTML),close(Stream1))**/.
list([L|Ls]) --> [L], list(Ls).word1([])-->[].word1([A|As]) --> [A],word1(As),{%%atom_codes(A,AC),char_type(A,alpha)},!.
list2([L|Ls]) --> [L], list2(Ls).
list2([]) --> [].
list_count([_|Tail], Count) :-    list_count(Tail, TailCount),    Count is TailCount + 1.% count_descendants(Person, Count)% Count is bound to the number of descendants of Person.%count_descendants(Person, Count) :-    descendant(Person, List),    list_count(List, Count).
list_to_compound(Data1,Compound1,Compound2) :- Data1=Data3,atom(Data3), (Compound1=[]->Compound2=Data3; Compound2=..[:,Compound1,Data3]),!.
list_to_compound(Data1,Compound1,Compound2) :- Data1=[Data2|Data3], list_to_compound(Data2,[],Data4), (Compound1=[]->Compound3=Data4; Compound3=..[:,Compound1,Data4]), list_to_compound(Data3,Compound3,Compound2),!.
list_to_string(A,B) :- list_to_string(A,"",B),!. %/*list_to_string("",B,C) :- %string(B1), %wrap_if_string(B1,B), %foldr(string_concat,["[",B,"]"],C), concat(B,"\"\"","",C),!.
listhead(A,B):-head(A,Ah),tail(A,At),head(B,Ah),tail(B,Bt),listhead(At,Bt).
listhead(A,B):-head(A,Ah),tail(A,At),head(B,Ah),tail(B,Bt),listhead(At,Bt).%%%%%%%%%%%%%%findbest(R,R) :-!.
listhead(_L,[]).
listoutputs(N1,N2,[]) :- N2 is N1-1, !.
listoutputs(N1,N3,[[Original,Backtranslation,_Translation]|Outputs1]) :-write(N1),write("\t\t"),write(Original),write("\n\t\t"),writeln(Backtranslation),write("\n"),N2 is N1+1,listoutputs(N2,N3,Outputs1).
lists_of_same_length2(List0,Item2_l) :-List0=[Item1|Rest],(list1(Item1,_,_)->Item2=Item1;fail),%[Item1]=Item2),%term_to_atom(Item1,Item2),length(Item2,Item2_l),lists_of_same_length2(Rest,Item2_l).
location(10,5,"Ice Cream Shop") :- !.
location(14,2,"Southern Beach") :- !.
location(16,2,"Lighthouse") :- !.
location(16,8,"Eastern Beach") :- !.
location(5,11,12,"Temple") :- !.
location(5,11,12,"Temple") :- !.location(5,13,14,"Stream") :- !.
location(5,11,18,"Wall") :- !.
location(5,12,18,"Gate") :- !.
location(5,13,14,"Stream") :- !.
location(5,13,14,"Stream") :- !.location(_X,_Y,"Underground Pyramid") :-Z=<4,!.
location(5,13,18,"Cave") :- !.
location(6,_X,_Y,"Rainforest Canopy") :- !.
location(7,_X,_Y,"Rainforest Canopy") :- !.
location(8,_X,_Y,"Rainforest Canopy") :- !.
location(8,_X,_Y,"Rainforest Canopy") :- !.%%(Z=7->true;Z=8),X>13,Y>9,!.
location(9,_X,_Y,"Rainforest Canopy") :- !.
location(X,Y,"Underwater Maze") :-(Z=7->true;Z=8),X=<13,Y=<9,!.location(7,_X,_Y,"Rainforest Canopy") :- !.location(8,_X,_Y,"Rainforest Canopy") :- !.
location(Z,X,Y,"Underwater Maze") :-(Z=7->true;Z=8),X=<13,Y=<9,!.
location(Z,_X,Y,"Rainforest Floor") :-Z=5,Y>=11,!.
location(Z,_X,Y,"Rainforest Floor") :-Z=5,Y>=11,!.location(Z,_X,Y,"Underwater Maze") :-(Z=5->true;Z=6),Y<11,!.location(Z,_X,Y,"Underwater Maze") :-(Z=5->true;Z=6),Y<11,!.
location(Z,_X,Y,"Underwater Maze") :-(Z=5->true;Z=6),Y<11,!.
location(Z,_X,_Y,"Underground Pyramid") :-Z=<4,!.
location(_,_,_,"Unknown") :- !.
location(_X,Y,"Rainforest Floor") :-Z=5,Y>=11,!.
location(_X,Y,"Underwater Maze") :-(Z=5->true;Z=6),Y<11,!.
location(_X,Y,"Underwater Maze") :-(Z=5->true;Z=6),Y<11,!.location(X,Y,"Underwater Maze") :-(Z=7->true;Z=8),X=<13,Y=<9,!.
location(_X,_Y,"Underground Pyramid") :-Z=<4,!.
log_find6er(B^0,1,0,log(B,1)).
log_finder((B^M)^N,B^(M*N),N*log(B,X),log(B,X^N)).log_finder(B^1,B,1,log(B,B)).
log_finder(B^M/B^N,B^(M-N),log(B,X)-log(B,Y),log(B,(X/Y))).
log_finder(log(B,A),X,B^X,A).
log_finder1(A,B,C,D) :-log_finder(A,B,C,D),!.
log_finder1(A,B,C,D) :-log_finder(A,B,E,F),log_finder1(E,F,C,D).
log_finder1(A,B,C,D) :-log_finder3(A,D,_,_).
log_finder1(A,B,C,D) :- % (log(2,X)+log(2,Y),1,x,A). log_finder(_,_,A,E), % (_,_,log(2,X)+log(2,Y),log(2,X*Y))log_finder(E,B,F,H),log_finder3(F,G,_,_),algebra_finder1(H,G,C,D).
log_finder2(D+E,H) :-log_finder2(D,F),log_finder2(E,G),log_finder2(F+G,H).
log_finder2(D,J) :-log_finder(_,_,D,K),log_finder3(_,_,J,K),!.log_finder2(D,J) :-log_finder(_,_,D,J).log_finder2(D,J) :-log_finder(_,_,J,D).%log_finder2(D,J) :-%log_finder3(_,_,J,K),%log_finder(_,_,D,J).
log_finder2(D,J) :-log_finder(_,_,G+H,D),log_finder(_,_,J,G+H).log_finder(B^M*B^N,B^(M+N),log(B,M)+log(B,N),log(B,M*N)).
log_finder2(D,J-K) :-log_finder(_,_,G-H,D),log_finder(_,_,J,G),log_finder(_,_,K,H).
log_finder3((A^B)^C,D,_,_) :-number(A),number(B),number(C),D is (A^B)^C.log_finder3(A^C,D,_,_) :-number(A),number(C),D is A^C.
log_finder3(A^(C/B),D,_,_) :-number(A),number(C),number(B),D is A^(C/B).
log_finder3(A^B,C,_,_) :-number(A),number(B),C is A^B.
log_finder3(C,A^(B/D),_,_) :-number(A),number(B),number(D),C is A^(B/D).
log_finder3(_,_,log(B,C),log(B,X^N)) :-number(X),number(N),C is X^N.
log_finder3(log(B,A),D,_,_) :-number(A),number(B),D is log(A)/log(B).
log_finder3(log(B,A^(F/G)),D,_,_) :-number(A),number(B),number(F),number(G),D is log(A^(F/G))/log(B).
log_meetings(_,Simulation,Meetings1,Meetings2) :- Simulation=[Simulation1|Simulation2], log_meetings1(Simulation1,Simulation1,[],Meetings3), append(Meetings1,[Meetings3],Meetings4), log_meetings(_,Simulation2,Meetings4,Meetings2).
log_meetings1(Simulation1,Simulation2,Meetings1,Meetings2) :- Simulation2=[[N,[X,Y]]|Rest], meetings(N,X,Y,Simulation1,[],Meetings3), append(Meetings1,Meetings3,Meetings4), log_meetings1(Simulation1,Rest,Meetings4,Meetings2).
logic_ff01(Specs,Formula1,Formula2) :-Specs=[[A1,A2]|A3],findall(B,logic_ff1(A1,A1,A2,B),C),intersection(Formula1,C,Formula4),sort(Formula4,Formula5),logic_ff01(A3,Formula5,Formula2).
logic_ff2(Columns1,Columns2,Result,Formula1,Formula2) :-member(Column,Columns2),Column=[Name|_Rest],delete(Columns2,Column,Columns3),appendlogic(Formula1,Name,Formula3),        logic_ff3(Columns1,Result,Formula3),logic_ff2(Columns1,Columns3,Result,Formula3,Formula2).logic_ff2(Columns1,Columns2,Result,_Formula1,Formula2) :-member(Column,Columns2),Column=[Name|_Rest],delete(Columns2,Column,Columns3),appendlogic(%%Formula1,Name,Formula3),        logic_ff3(Columns1,Result,Formula3),logic_ff2(Columns1,Columns3,Result,Formula3,Formula2).logic_ff3(Columns1,Result1,[not,Formula2]) :-        logic_ff3(Columns1,Result3,Formula2),        not(Result3,[],Result1).
logic_ff2([[A, false]],[],[true],A,[not,A]):-!.
logic_ff2([[A, true]],[],[false],A,[not,A]):-!.
logic_ff2(_Columns1,[],_Result,Formula,Formula).
logic_ff3(Columns,Result1,Formula1) :-        member([Formula1|Result1],Columns).
logic_ff3(Columns1,Result1,[Formula1,or,Formula2]) :-        logic_ff3(Columns1,Result2,Formula1),        logic_ff3(Columns1,Result3,Formula2),        or(Result2,Result3,Result1).
logicalconjunction(false,false,false) :- !.
logicalconjunction(false,false,true) :- !.
logicalconjunction(false,true,false) :- !.
logicalconjunction(true,Result2,Result3) :-true(Result2),true(Result3).
logicalconjunction(true,true,true) :- !.
logicaldisjunction(true,Result2,Result3) :-        true(Result2);true(Result3).
logicaldisjunction(true,false,true) :- !.
logicaldisjunction(true,true,false) :- !.logicaldisjunction(false,false,true) :- !.
logicaldisjunction(true,true,true) :- !.
logicalnot(Result1,Result2) :-true(Result1),false(Result2).
logicalnot(Result1,Result2) :-true(Result1),false(Result2).logicalnot(Result1,Result2) :-        false(Result1),true(Result2).
logicalnot(Result1,Result2) :-        false(Result1),true(Result2).
longest_to_shortest_substrings(A0,C) :-%length(A0,L),L1 is L-3,(L1<3->L11=3;L11=L1),%append(D,E,A),%not(D=[]),append1(3%L11,A0,[],A01),delete(A01,[],C).
lookahead(A,A,B):-stringconcat(B,D,A).
lookahead(B,A,A):-append(B,_D,A).
lookahead1(A,A) :- append(`)`,_,A).
lowest_factor(N1,N2,N5) :-N2=[N3|N4],(0 is mod(N1,N3)->N5=N3;lowest_factor(N1,N4,N5)).
lp2p1_a(A,B) :- sub_term_wa([v,_],A,A1), findall1([A2,A3],(member([A2,A4],A1), ((not(A4=[v,'_']), A4=[v,A5], atom_concat('_',_,A5), get_cnv(A6),A3=[v,A6] )->true;A4=A3)),A7), %trace, foldr(put_sub_term_wa_ae,A7,A,A8), lp2p1([[[n, a], ":-", [A8]]],C), string_concat("a:-",B1,C), string_concat(B2,".\n",B1), foldr(string_concat,["(",B2,")"],B), %square_to_round([B2],B), !.% (c(1,A),A=5)% -> (c(1,A),not(var(A)),A=5)check_non_var(C1,C2) :- dynamic(cnvn/1), retractall(cnvn(_)), assertz(cnvn(1)),  dynamic(cnv/1), retractall(cnv(_)), assertz(cnv([])), term_to_atom(C1,C110), foldr(string_concat,["a:-",C110,"."],C111), fastp2lp2(C111,C112), C112=[[[n, a], ":-", C11]],  % [[[n, c], [1, [v, '_449476'], [v, c]]], [[n, =], [[v, '_449476'], 1]], [[n, =], [[v, c], 2]]] %trace, %square_to_round(C11,C1), C11=[C12|C13],  (C13=[]->lp2p1_a(C12,C2); (  %functor(C12,Name,Arity), %numbers(Arity,1,[],Ns), C12=[Name, Args], %length(Args,Arity),  %functor(C1A,Name,Arity), %* needs to get from A not _ findall1(CNV41,(%member(N,Ns),arg(N,C12,Arg),%copy_term(Arg,Arg1), member(Arg,Args), (Arg=[v,_]-> (get_cnv(CNV4), %arg(N,C1A,CNV4), cnv(CNV6), retractall(cnv(_)), %delete(CNV6,[Arg,CNV4],CNV61), append(CNV6,[[Arg,CNV4]],CNV7), assertz(cnv(CNV7)), CNV41=[v,CNV4]); CNV41=Arg)%arg(N,C1A,Arg)) %cnv(CNV1), ),CC1), %foldr(append,CC1,CC2), %append(CC3,[_],CC2), %foldr(append,[[Name,"("],CC3,["),"]],CC31), %foldr(string_concat,CC31,CC4), CC4=[Name, CC1], %dynamic(cnv/1), %retractall(cnv(_)), %assertz(cnv([])), cnv(CNV9), %trace, findall1([[n,not],[[[n,var],[[v,CNV8]]]]],(%member(N,Ns),arg(N,C12,Arg),%copy_term(Arg,Arg1), %var(Arg),%cnv(CNV1), member([Arg,CNV8],CNV9), %trace, not((%not(var(Arg)), % [[n, =], [[v, '_449476'], 1]] (member([[n, =],[Arg,B2]],C13)->true; member([[n, equals4],[Arg,B2]],C13)), B2=[v,_] %append(CNV1,[not(var(Arg))],CNV2)%retractall(cnv(_)), %assertz(cnv(CNV2)) ))),CC5), %foldr(append,Ns1,CC5), %foldr(string_concat,Ns11,CC5), %cnv(CNV3), findall1([[n, =],[[v,CNV10],Num1]],(%member(Arg,C13),%N,Ns),arg(N,C13,CNV11=Num),%  (member([[n, =],[CNV11,Num]],C13)->true; member([[n, equals4],[CNV11,Num]],C13)),%copy_term(Arg,Arg1), %var(Arg),%cnv(CNV1), member([CNV11,CNV10],CNV9),   ((Num=[v,A5], atom_concat('_',_,A5))->Num1=[v,'_'];Num1=Num) %append(CNV1,[not(var(Arg))],CNV2)%retractall(cnv(_)), %assertz(cnv(CNV2)) ),CC7), %trace, %foldr(append,Ns2,CC7), %foldr(string_concat,Ns21,CC6), %string_concat(CC7,",",CC6), C21=[[CC4],CC5,CC7], foldr(append,C21,C23), lp2p1([[[n, a], ":-", C23]],C), string_concat("a:-",B1,C), string_concat(C22,".\n",B1), foldr(string_concat,["(",C22,")"],C2) %square_to_round([C22],C2) )), %square_to_round(C111,C2), !.
lp2sm_en2test(10,[[["n","query box 1"],[["v",t]],":-",[[["n","grammar 1"],["aa",["v",t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aa",[v,t]]]]]]).
lp2sm_en2test(100,[[["n","query box 1"],[["v",b],["v",c]],":-",[[["n","equals 41"],[1,["v",c],["v",b]]]]]],[[0,[n,query_box_1],[[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[v,c],[v,b]]]]]]).lp2sm_en2test(101,[[["n","query box 1"],[["v",b],["v",c]],":-",[[["n","equals 41"],[1,["v",c],["v",b]]]]]],[[0,[n,query_box_1],[[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[v,c],[v,b]]]]]]).
lp2sm_en2test(102,[[["n","query box 1"],[["v",b1],["v",b2],["v",b3]],":-",[[["n","equals 41"],[1,[2,3],["v",b1],["v",b2],["v",b3]]]]]],[[0,[n,query_box_1],[[v,b1],[v,b2],[v,b3]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]]]]]).
lp2sm_en2test(103,[[["n","query box 1"],[["v",b1],["v",b2],["v",b3]],":-",[[["n","equals 41"],[1,[2,3],["v",b1],["v",b2],["v",b3]]]]]],[[0,[n,query_box_1],[[v,b1],[v,b2],[v,b3]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]]]]]).
lp2sm_en2test(104,[[["n","query box 1"],[["v",b]],":-",[[["n","find all 1"],[[[1,2],[3,4]],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[[1,2],[3,4]],[v,b]]]]]]).
lp2sm_en2test(105,[[["n","query box 1"],[["v",b]],":-",[[["n","member 2a"],[["v",b],[1,11,111]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member2a],[[v,b],[1,11,111]]]]]]).lp2sm_en2test(106,[[["n","query box 1"],[["v",b]],":-",[[["n","call 1a"],[["v",b],[1,11,111]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,call1a],[[v,b],[1,11,111]]]]]]).
lp2sm_en2test(107,[[["n","query box 1"],[["v",b]],":-",[[["n","call 1b"],[[1,11,111],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,call1b],[[1,11,111],[v,b]]]]]]).
lp2sm_en2test(108,[[["n","query box 1"],[["v",b]],":-",[[["n","call 1b"],[[1,11,111],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,call1b],[[1,11,111],[v,b]]]]]]).
lp2sm_en2test(109,[[["n","query box 1"],[["v",b]],":-",[[["n","middle"],[2,["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,middle],[2,[v,b]]]]]]).
lp2sm_en2test(11,[[["n","query box 1"],[["v",t],["v",u]],":-",[[["n","grammar 1"],["aa",["v",t],["v",u]]]]]],[[0,[n,query_box_1],[[v,t],[v,u]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aa",[v,t],[v,u]]]]]]).lp2sm_en2test(12,[[["n","query box 1"],[],":-",[[["n","grammar 1"],["aa"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aa"]]]]]).
lp2sm_en2test(110,[[["n","query box 1"],[["v",b]],":-",[[["n","level with"],[170,["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,level_with],[170,[v,b]]]]]]).
lp2sm_en2test(111,[[["n","query box 1"],[["v",a]],":-",[[["n","tra las"],[5,["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,tra_las],[5,[v,a]]]]]]).
lp2sm_en2test(112,[[["n","query box 1"],[["v",a]],":-",[[["n","final gong"],[5,["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,final_gong],[5,[v,a]]]]]]).lp2sm_en2test(113,[[["n","query box 1"],[["v",b]],":-",[[["n","bedroom to garden"],["bedroom",["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,bedroom_to_garden],["bedroom",[v,b]]]]]]).
lp2sm_en2test(114,[[["n","query box 1"],[["v",a]],":-",[[["n","stop at top"],[["-","-","-","top"],["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stop_at_top],[["-","-","-","top"],[v,a]]]]]]).lp2sm_en2test(115,[[["n","query box 1"],[["v",result]],":-",[[["n","function"],[[["n1","a"]],[["a",5]],[],["v",result]]]]]],[[0,[n,query_box_1],[[v,result]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[[["n1","a"]],[["a",5]],[],[v,result]]]]]]).
lp2sm_en2test(116,[[["n","query box 1"],[["v",t]],":-",[[["n","grammar 1"],[".aaa.bbb.",[".","?"],["v",t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],[".aaa.bbb.",[".","?"],[v,t]]]]]]).
lp2sm_en2test(117,[[["n","query box 1"],[["v",t]],":-",[[["n","grammar 1"],["a   a. a ",[" ","."],["v",t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["a   a. a ",[" ","."],[v,t]]]]]]).
lp2sm_en2test(118,[[["n","query box 1"],[],":-",[[["n","query pred"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,query_pred],[]]]]]).
lp2sm_en2test(119,[[["n","query box 1"],[],":-",[[["n","count"],[2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,count],[2]]]]]).
lp2sm_en2test(120,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","function"],[1,["v",b],2,["v",a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,[v,b],2,[v,a]]]]]]).
lp2sm_en2test(121,[[["n","query box 1"],[["v",a]],":-",[[["n","append 1"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[v,a]]]]]]).lp2sm_en2test(122,[[["n","query box 1"],[],":-",[[["n","equals 4 on1"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4_on1],[]]]]]).lp2sm_en2test(123,[[["n","query box 1"],[["v",b],["v",c]],":-",[[["n","equals 41"],[[["v",b],"|",["v",c]]]]]]],[[0,[n,query_box_1],[[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,b],"|",[v,c]]]]]]]).
lp2sm_en2test(124,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d]],":-",[[["n","equals 41"],[[[["v",a],"|",["v",d]],["v",c],"|",["v",b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[[v,a],"|",[v,d]],[v,c],"|",[v,b]]]]]]]).lp2sm_en2test(125,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","equals 41"],[[[["v",a],["v",c]],"|",["v",b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[[v,a],[v,c]],"|",[v,b]]]]]]]).lp2sm_en2test(126,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[[["v",a],"|",["v",b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],"|",[v,b]]]]]]]).lp2sm_en2test(127,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d]],":-",[[["n","equals 41"],[[["v",a],["v",c],"|",["v",b],["v",d]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],[v,c],"|",[v,b],[v,d]]]]]]]).
lp2sm_en2test(128,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","equals 41"],[[[["v",a]],["v",c],"|",["v",b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[[v,a]],[v,c],"|",[v,b]]]]]]]).
lp2sm_en2test(129,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[[["v",a],"|",["v",b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],"|",[v,b]]]]]]]).
lp2sm_en2test(13,[[["n","query box 1"],[["v",t]],":-",[[["n","grammar 1"],["[a,a]",["v",t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["[a,a]",[v,t]]]]]]).
lp2sm_en2test(130,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[[["v",a],"|",[["v",b]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],"|",[[v,b]]]]]]]]).lp2sm_en2test(131,[[["n","query box 1"],[["v",a]],":-",[[["n","equals 41"],[[["v",a]]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a]]]]]]]).
lp2sm_en2test(132,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[[["v",a],["v",b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],[v,b]]]]]]]).lp2sm_en2test(133,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[[["v",a],["v",b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],[v,b]]]]]]]).
lp2sm_en2test(134,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d]],":-",[[["n","equals 41"],[[["v",a],["v",c],"|",["v",b],"|",["v",d]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],[v,c],"|",[v,b],"|",[v,d]]]]]]]).
lp2sm_en2test(135,[[["n","query box 1"],[],":-",[[["n","equals 41"],[[1,2,3]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3]]]]]]).
lp2sm_en2test(136,[[["n","query box 1"],[["v",a],["v",b],["v",d]],":-",[[["n","equals 41"],[[["v",a],"|",[["v",b],"|",["v",d]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],"|",[[v,b],"|",[v,d]]]]]]]]).
lp2sm_en2test(137,[[["n","query box 1"],[["v",b]],":-",[[["n","equals 41"],[["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,b]]]]]]).
lp2sm_en2test(138,[[["n","query box 1"],[],":-",[[["n","equals 41"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[]]]]]).
lp2sm_en2test(139,[[["n","query box 1"],[["v",a],["v",d]],":-",[[["n","append 1"],[["v",a],["v",d]]]]]],[[0,[n,query_box_1],[[v,a],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[v,a],[v,d]]]]]]).
lp2sm_en2test(14,[[["n","query box 1"],[["v",t]],":-",[[["n","grammar 1"],["[a]",["v",t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["[a]",[v,t]]]]]]).
lp2sm_en2test(140,[[["n","query box 1"],[["v",b]],":-",[[["n","equals 41"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).lp2sm_en2test(141,[[["n","query box 1"],[["v",b]],":-",[[["n","equals 41"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).lp2sm_en2test(142,[[["n","query box 1"],[["v",b]],":-",[[["n","equals 41"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).
lp2sm_en2test(143,[[["n","query box 1"],[["v",b]],":-",[[["n","equals 41"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).
lp2sm_en2test(144,[[["n","query box 1"],[["v",b]],":-",[[["n","equals 41"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).lp2sm_en2test(145,[[["n","query box 1"],[["v",c]],":-",[[["n","equals 41"],[[[1,2,3]],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[1,2,3]],[v,c]]]]]]).lp2sm_en2test(146,[[["n","query box 1"],[["v",c]],":-",[[["n","equals 41"],[[[1,2,3],4,5],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[1,2,3],4,5],[v,c]]]]]]).
lp2sm_en2test(147,[[["n","query box 1"],[["v",c]],":-",[[["n","equals 41"],[["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,c]]]]]]).
lp2sm_en2test(148,[[["n","query box 1"],[["v",c]],":-",[[["n","equals 41"],[["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,c]]]]]]).
lp2sm_en2test(149,[[["n","query box 1"],[["v",b],["v",c]],":-",[[["n","equals 41"],[[[1,2,3]],["v",b],["v",c]]]]]],[[0,[n,query_box_1],[[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[1,2,3]],[v,b],[v,c]]]]]]).
lp2sm_en2test(15,[[["n","query box 1"],[["v",t]],":-",[[["n","grammar 1"],["[[""aa,]"",b,""c"",[]],1]",["v",t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["[[""aa,]"",b,""c"",[]],1]",[v,t]]]]]]).
lp2sm_en2test(150,[[["n","query box 1"],[["v",c]],":-",[[["n","equals 41"],[[[4,5,6]],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[4,5,6]],[v,c]]]]]]).
lp2sm_en2test(151,[[["n","query box 1"],[["v",c]],":-",[[["n","equals 41"],[[[6,2,3],[5]],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[6,2,3],[5]],[v,c]]]]]]).
lp2sm_en2test(152,[[["n","query box 1"],[["v",c]],":-",[[["n","equals 41"],[[6,2,3],[1,2,3],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[6,2,3],[1,2,3],[v,c]]]]]]).
lp2sm_en2test(153,[[["n","query box 1"],[["v",c]],":-",[[["n","equals 41"],[[[4,5,6]],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[4,5,6]],[v,c]]]]]]).
lp2sm_en2test(154,[[["n","query box 1"],[["v",c]],":-",[[["n","equals 41"],[[[4,5,6]],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[4,5,6]],[v,c]]]]]]).
lp2sm_en2test(155,[[["n","query box 1"],[["v",a]],":-",[[["n","equals 41"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).
lp2sm_en2test(156,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","equals 42"],[["v",a],[["v",b],["v",c]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals42],[[v,a],[[v,b],[v,c]]]]]]]).
lp2sm_en2test(157,[[["n","query box 1"],[["v",a]],":-",[[["n","equals 41"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).lp2sm_en2test(158,[[["n","query box 1"],[["v",a]],":-",[[["n","equals 41"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).
lp2sm_en2test(159,[[["n","query box 1"],[],":-",[[["n","equals 41"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[]]]]]).
lp2sm_en2test(16,[[["n","query box 1"],[],":-",[[["n","grammar 1"],["john ate the apple"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["john ate the apple"]]]]]).
lp2sm_en2test(160,[[["n","query box 1"],[["v",c]],":-",[[["n","function"],[1,1,["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).lp2sm_en2test(161,[[["n","query box 1"],[["v",c]],":-",[[["n","function"],[1,1,["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).
lp2sm_en2test(162,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","equals 41"],[["v",a],["v",b],["v",c]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b],[v,c]]]]]]).
lp2sm_en2test(163,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","function 1"],[["v",a],["v",a],["v",b],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],[v,a],[v,b],[v,b]]]]]]).
lp2sm_en2test(164,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","function 1"],[["v",a],["v",a],["v",b],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],[v,a],[v,b],[v,b]]]]]]).lp2sm_en2test(165,[[["n","query box 1"],[["v",a],["v",b]],":-",[[[["n","equals 4"],[["v",a],[1,2]]],[["n","equals 4"],[["v",b],[0,"|",["v",a]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,"[]"]],[1,[on_true,2],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,a],[1,2]]],[2,[on_true,[exit_function,0]],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,b],[0,"|",[v,a]]]]]]]).
lp2sm_en2test(166,[[["n","query box 1"],[["v",a],["v",b]],":-",[[[["n","equals 4"],[["v",a],0]],[["n","equals 4"],[["v",b],[["v",a],"|",[1,2]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,"[]"]],[1,[on_true,2],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,a],0]],[2,[on_true,[exit_function,0]],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,b],[[v,a],"|",[1,2]]]]]]]).lp2sm_en2test(167,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 4"],[[["v",a],"|",["v",b]],[1,"|",2]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[[v,a],"|",[v,b]],[1,"|",2]]]]]]).lp2sm_en2test(168,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","function 1"],[["v",a],"|",["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],"|",[v,b]]]]]]).
lp2sm_en2test(169,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","function 1"],[["v",a],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],[v,b]]]]]]).
lp2sm_en2test(17,[[["n","query box 1"],[["v",t]],":-",[[["n","grammar 1"],["aaa1 ,-'! a? b! b.",["v",t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aaa1 ,-'! a? b! b.",[v,t]]]]]]).lp2sm_en2test(18,[[["n","query box 1"],[["v",c]],":-",[[["n","grammar 1"],["what is 1+11",["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["what is 1+11",[v,c]]]]]]).
lp2sm_en2test(170,[[["n","query box 1"],[["v",a]],":-",[[["n","function 1"],[["v",a],["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],[v,a]]]]]]).
lp2sm_en2test(171,[[["n","query box 1"],[],":-",[[["n","function 1"],[[[]]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[[]]]]]]]).
lp2sm_en2test(172,[[["n","query box 1"],[],":-",[[["n","equals 4"],[[],[[]]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[],[[]]]]]]]).lp2sm_en2test(173,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d],["v",e]],":-",[[["n","equals 4"],[[["v",d],["v",d],["v",a],["v",b],["v",a]],[["v",e],["v",c],1,["v",c],["v",b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d],[v,e]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[[v,d],[v,d],[v,a],[v,b],[v,a]],[[v,e],[v,c],1,[v,c],[v,b]]]]]]]).lp2sm_en2test(174,[[["n","query box 1"],[["v",a],["v",c],["v",e]],":-",[[["n","function 1"],[["v",e],["v",c],["v",a],["v",c],["v",a]]]]]],[[0,[n,query_box_1],[[v,a],[v,c],[v,e]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,e],[v,c],[v,a],[v,c],[v,a]]]]]]).lp2sm_en2test(175,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d],["v",e1],["v",e2],["v",f],["v",f2]],":-",[[["n","equals 4"],[[[["v",e1],["v",e2]],["v",c],["v",a],["v",c],["v",a],["v",e1]],[["v",d],["v",d],[[1,1],[1,1]],["v",b],["v",b],[["v",f],["v",f2]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d],[v,e1],[v,e2],[v,f],[v,f2]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[[[v,e1],[v,e2]],[v,c],[v,a],[v,c],[v,a],[v,e1]],[[v,d],[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]]]]]).
lp2sm_en2test(176,[[["n","query box 1"],[["v",a],["v",c],["v",e1],["v",e2]],":-",[[["n","function 1"],[[["v",e1],["v",e2]],["v",c],["v",a],["v",c],["v",a],["v",e1]]]]]],[[0,[n,query_box_1],[[v,a],[v,c],[v,e1],[v,e2]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[[v,e1],[v,e2]],[v,c],[v,a],[v,c],[v,a],[v,e1]]]]]]).
lp2sm_en2test(177,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d],["v",e1],["v",e2],["v",f],["v",f2]],":-",[[["n","equals 4"],[[[["v",e1],["v",e2]],"|",[["v",c],["v",a],["v",c],["v",a],["v",e1]]],[["v",d],"|",[["v",d],[[1,1],[1,1]],["v",b],["v",b],[["v",f],["v",f2]]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d],[v,e1],[v,e2],[v,f],[v,f2]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[[[v,e1],[v,e2]],"|",[[v,c],[v,a],[v,c],[v,a],[v,e1]]],[[v,d],"|",[[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]]]]]]).lp2sm_en2test(178,[[["n","query box 1"],[["v",a],["v",c],["v",e1],["v",e2]],":-",[[["n","function 1"],[[["v",e1],["v",e2]],"|",[["v",c],["v",a],["v",c],["v",a],["v",e1]]]]]]],[[0,[n,query_box_1],[[v,a],[v,c],[v,e1],[v,e2]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[[v,e1],[v,e2]],"|",[[v,c],[v,a],[v,c],[v,a],[v,e1]]]]]]]).
lp2sm_en2test(179,[[["n","query box 1"],[],":-",[[["n","add 0"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[]]]]]).
lp2sm_en2test(180,[[["n","query box 1"],[],":-",[[["n","add 0"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[]]]]]).
lp2sm_en2test(181,[[["n","query box 1"],[["v",b]],":-",[[["n",1],[[1,2],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,1],[[1,2],[v,b]]]]]]).
lp2sm_en2test(182,[[["n","query box 1"],[["v",b]],":-",[[["n","member try"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member_try],[[1,2,3],[v,b]]]]]]).lp2sm_en2test(183,[[["n","query box 1"],[],":-",[[["n","not 1"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not1],[]]]]]).
lp2sm_en2test(184,[[["n","query box 1"],[],":-",[[["n","not 1"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not1],[]]]]]).
lp2sm_en2test(185,[[["n","query box 1"],[],":-",[[["n","not 1"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not1],[]]]]]).lp2sm_en2test(186,[[["n","query box 1"],[],":-",[[["n","brackets 1"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,brackets1],[]]]]]).
lp2sm_en2test(187,[[["n","query box 1"],[],":-",[[["n","brackets 1"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,brackets1],[]]]]]).
lp2sm_en2test(188,[[["n","query box 1"],[],":-",[[["n","brackets 1"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,brackets1],[]]]]]).lp2sm_en2test(189,[[["n","query box 1"],[],":-",[[["n","brackets 1"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,brackets1],[]]]]]).
lp2sm_en2test(19,[[["n","query box 1"],[["v",s]],":-",[[["n","positivityscore"],[["not","you","like","a","walk"],["would","you","like","a","walk"],0,["v",s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,positivityscore],[["not","you","like","a","walk"],["would","you","like","a","walk"],0,[v,s]]]]]]).
lp2sm_en2test(190,[[["n","query box 1"],[],":-",[[["n","true"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,true],[]]]]]).lp2sm_en2test(191,[[["n","query box 1"],[],":-",[[["n","not 1"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not1],[]]]]]).
lp2sm_en2test(192,[[["n","query box 1"],[["v",b]],":-",[[["n","find all 1"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[1,2,3],[v,b]]]]]]).lp2sm_en2test(193,[[["n","query box 1"],[["v",b]],":-",[[["n","find all 1"],[[[[1,2,3,4]]],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[[[1,2,3,4]]],[v,b]]]]]]).
lp2sm_en2test(194,[[["n","query box 1"],[["v",a]],":-",[[["n","cut 1"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,cut1],[[v,a]]]]]]).
lp2sm_en2test(195,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","find all"],[["v",b],[[["n","or 12"],[["v",b]]]],["v",a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,or12],[[v,b]]]]]]).
lp2sm_en2test(196,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","find all"],[["v",b],[[["n","or 12"],[["v",b]]]],["v",a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,or12],[[v,b]]]]]]).
lp2sm_en2test(197,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","find all"],[["v",b],[[["n","member"],[["v",b],[1]]]],["v",a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,member],[[v,b],[1]]]]]]).lp2sm_en2test(198,[[["n","query box 1"],[],":-",[[["n","function"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).lp2sm_en2test(199,[[["n","query box 1"],[["v",a]],":-",[[["n","function"],[1,1,["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,a]]]]]]).
lp2sm_en2test(2,[[["n","query box 1"],[["v",c]],":-",[[["n","function"],[1,1,["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).
lp2sm_en2test(20,[[["n","query box 1"],[["v",c]],":-",[[["n","function"],[1,1,["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).
lp2sm_en2test(200,[[["n","query box 1"],[],":-",[[["n","function"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_en2test(201,[[["n","query box 1"],[],":-",[[["n","function"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_en2test(202,[[["n","query box 1"],[],":-",[[["n","function"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_en2test(203,[[["n","query box 1"],[],":-",[[["n","traverse"],[2,6]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,traverse],[2,6]]]]]).
lp2sm_en2test(204,[[["n","query box 1"],[],":-",[[["n","function"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_en2test(205,[[["n","query box 1"],[["v",b]],":-",[[["n","find all 1"],[[[1,2],[1,4]],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[[1,2],[1,4]],[v,b]]]]]]).
lp2sm_en2test(206,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","find all"],[["v",b],[[["n","or 12"],[1,["v",b]]]],["v",a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,or12],[1,[v,b]]]]]]).
lp2sm_en2test(207,[[["n","query box 1"],[["v",b1]],":-",[[["n","find all 1"],[[1,2],["v",b1]]]]]],[[0,[n,query_box_1],[[v,b1]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[1,2],[v,b1]]]]]]).lp2sm_en2test(208,[[["n","query box 1"],[["v",b],["v",c],["v",g]],":-",[[["n","reverse 1"],[[1,2,3],[],["v",c],["v",b],["v",g]]]]]],[[0,[n,query_box_1],[[v,b],[v,c],[v,g]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,reverse1],[[1,2,3],[],[v,c],[v,b],[v,g]]]]]]).
lp2sm_en2test(209,[[["n","query box 1"],[["v",a]],":-",[[["n","a"],[["a","b"],"",["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,a],[["a","b"],"",[v,a]]]]]]).
lp2sm_en2test(21,[[["n","query box 1"],[["v",t]],":-",[[["n","grammar 1"],["ate",["v",t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["ate",[v,t]]]]]]).lp2sm_en2test(22,[[["n","query box 1"],[],":-",[[["n","grammar 1"],["peter cut the pear"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["peter cut the pear"]]]]]).
lp2sm_en2test(210,[[["n","query box 1"],[],":-",[[["n","grammar 1"],[[apple]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],[[apple]]]]]]).
lp2sm_en2test(211,[[["n","query box 1"],[],":-",[[["n","grammar 1"],[[apple,banana]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],[[apple,banana]]]]]]).
lp2sm_en2test(212,[[["n","query box 1"],[],":-",[[["n","grammar 1"],[[apple,banana,carrot]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],[[apple,banana,carrot]]]]]]).
lp2sm_en2test(213,[[["n","query box 1"],[["v",a]],":-",[[["n","reverse 1"],[[1,2,3],[],["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,reverse1],[[1,2,3],[],[v,a]]]]]]).
lp2sm_en2test(214,[[["n","query box 1"],[["v",a]],":-",[[["n","append 1"],[[1,2,3],[],["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[1,2,3],[],[v,a]]]]]]).
lp2sm_en2test(215,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","find all"],[[["v",a],["v",b]],[["n","append"],[["v",a],["v",b],[1,2,3]]],["v",c]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b]],[v,c]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],[v,b],[1,2,3]]]]]]).lp2sm_en2test(216,[[["n","query box 1"],[],":-",[[["n","traverse"],[2,8]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,traverse],[2,8]]]]]).
lp2sm_en2test(217,[[["n","query box 1"],[],":-",[[["n","traverse"],[2,6]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,traverse],[2,6]]]]]).
lp2sm_en2test(218,[[["n","query box 1"],[["v",b]],":-",[[["n","find all 1"],[[[1,2],[3,4]],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[[1,2],[3,4]],[v,b]]]]]]).
lp2sm_en2test(219,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","find all"],[[["v",a],["v",b]],[["n","concatenate strings"],[["v",a],["v",b],"abc"]],["v",c]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b]],[v,c]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,stringconcat],[[v,a],[v,b],"abc"]]]]]).
lp2sm_en2test(220,[[["n","query box 1"],[],":-",[[["n","concatenate strings"],["a","b","ab"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stringconcat],["a","b","ab"]]]]]).
lp2sm_en2test(221,[[["n","query box 1"],[["v",a]],":-",[[["n","concatenate strings"],["a","b",["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stringconcat],["a","b",[v,a]]]]]]).
lp2sm_en2test(222,[[["n","query box 1"],[["v",a]],":-",[[["n","concatenate strings"],["a",["v",a],"ab"]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stringconcat],["a",[v,a],"ab"]]]]]).lp2sm_en2test(223,[[["n","query box 1"],[["v",a]],":-",[[["n","concatenate strings"],[["v",a],"b","ab"]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stringconcat],[[v,a],"b","ab"]]]]]).
lp2sm_en2test(224,[[["n","query box 1"],[],":-",[[["n","append"],[["a"],["b"],["a","b"]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[["a"],["b"],["a","b"]]]]]]).lp2sm_en2test(225,[[["n","query box 1"],[["v",a]],":-",[[["n","append"],[["a"],["b"],["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[["a"],["b"],[v,a]]]]]]).
lp2sm_en2test(226,[[["n","query box 1"],[["v",a]],":-",[[["n","append"],[["a"],["v",a],["a","b"]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[["a"],[v,a],["a","b"]]]]]]).
lp2sm_en2test(227,[[["n","query box 1"],[["v",a]],":-",[[["n","append"],[["v",a],["b"],["a","b"]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[[v,a],["b"],["a","b"]]]]]]).
lp2sm_en2test(228,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","find all"],[[["v",a],["v",b]],[["n","append"],[["v",a],["v",b],["a","b","c"]]],["v",c]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b]],[v,c]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],[v,b],["a","b","c"]]]]]]).
lp2sm_en2test(229,[[["n","query box 1"],[["v",a],["v",c]],":-",[[["n","find all"],[["v",a],[["n","member"],[["v",a],["a","b"]]],["v",c]]]]]],[[0,[n,query_box_1],[[v,a],[v,c]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,a],[v,c]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,member],[[v,a],["a","b"]]]]]]).
lp2sm_en2test(23,[[["n","query box 1"],[["v",s]],":-",[[["n","agree"],[["a","b","c"],["d","e","f"],["a","b","c","g"],["v",s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,agree],[["a","b","c"],["d","e","f"],["a","b","c","g"],[v,s]]]]]]).lp2sm_en2test(24,[[["n","query box 1"],[["v",s]],":-",[[["n","modus ponens"],["a",[["a","b"],["c","d"],["e","f"]],["v",s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,modus_ponens],["a",[["a","b"],["c","d"],["e","f"]],[v,s]]]]]]).
lp2sm_en2test(230,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","append"],[["a"],["v",a],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[["a"],[v,a],[v,b]]]]]]).lp2sm_en2test(231,[[["n","query box 1"],[["v",a],["v",c],["v",d]],":-",[[["n","find all"],[[["v",a],["v",c]],[["n","append"],[["v",a],["a","b"],["v",c]]],["v",d]]]]]],[[0,[n,query_box_1],[[v,a],[v,c],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,c]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],["a","b"],[v,c]]]]]]).
lp2sm_en2test(232,[[["n","query box 1"],[],":-",[[["n","member"],["a",["a","b"]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member],["a",["a","b"]]]]]]).
lp2sm_en2test(233,[[["n","query box 1"],[["v",a],["v",d]],":-",[[["n","find all"],[["v",a],[["n","member"],["a",["v",a]]],["v",d]]]]]],[[0,[n,query_box_1],[[v,a],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,a],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,member],["a",[v,a]]]]]]).
lp2sm_en2test(234,[[["n","query box 1"],[["v",a]],":-",[[["n","member"],[["v",a],["a","b"]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member],[[v,a],["a","b"]]]]]]).lp2sm_en2test(235,[[["n","query box 1"],[["v",a],["v",b],["v",d]],":-",[[["n","find all"],[[["v",a],["v",b]],[["n","member"],[["v",b],["v",a]]],["v",d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,member],[[v,b],[v,a]]]]]]).
lp2sm_en2test(236,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d]],":-",[[["n","find all"],[[["v",a],["v",b],["v",c]],[["n","append"],[["v",a],["a"],[["v",b],"|",["v",c]]]],["v",d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b],[v,c]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],["a"],[[v,b],"|",[v,c]]]]]]]).
lp2sm_en2test(237,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d]],":-",[[["n","find all"],[[["v",a],["v",b],["v",c]],[["n","append"],[["v",a],["b",["v",b]],["v",c]]],["v",d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b],[v,c]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],["b",[v,b]],[v,c]]]]]]).
lp2sm_en2test(238,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d]],":-",[[["n","find all"],[[["v",a],["v",b],["v",c]],[["n","append"],[["v",a],["v",b],["v",c]]],["v",d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b],[v,c]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],[v,b],[v,c]]]]]]).
lp2sm_en2test(239,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","append"],[["v",a],["b",["v",b]],[["v",c]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[[v,a],["b",[v,b]],[[v,c]]]]]]]).
lp2sm_en2test(240,[[["n","query box 1"],[["v",a],["v",c]],":-",[[["n","append"],[["v",a],["b"],[["v",c]]]]]]],[[0,[n,query_box_1],[[v,a],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[[v,a],["b"],[[v,c]]]]]]]).
lp2sm_en2test(241,[[["n","query box 1"],[["v",a]],":-",[[["n","reverse 1"],[["v",a],[],[3,2,1]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,reverse1],[[v,a],[],[3,2,1]]]]]]).
lp2sm_en2test(242,[[["n","query box 1"],[["v",a]],":-",[[["n","append 1"],[["v",a],[],[1,2,3]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[v,a],[],[1,2,3]]]]]]).
lp2sm_en2test(243,[[["n","query box 1"],[["v",a]],":-",[[["n","back propagate"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,back_propagate],[[v,a]]]]]]).
lp2sm_en2test(244,[[["n","query box 1"],[["v",d]],":-",[[["n","foldl 1"],[["n","stringconcata 1"],["a","b"],"",["v",d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,foldl1],[[n,stringconcata1],["a","b"],"",[v,d]]]]]]).lp2sm_en2test(245,[[["n","query box 1"],[["v",a],["v",x],["v",y],["v",z]],":-",[[[["n","equals 4"],[["v",a],"abc"]],[["n","string chars"],[["v",a],[["v",x],["v",y],["v",z]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,x],[v,y],[v,z]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,"[]"]],[1,[on_true,2],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,a],"abc"]],[2,[on_true,[exit_function,0]],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,string_chars],[[v,a],[[v,x],[v,y],[v,z]]]]]]]).
lp2sm_en2test(246,[[["n","query box 1"],[],":-",[[["n","test 2"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,test2],[]]]]]).lp2sm_en2test(247,[[["n","query box 1"],[["v",a]],":-",[[["n","test 2"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,test2],[[v,a]]]]]]).bt-lp2sm_en2test(Lang,BL,RL) :-findall(A,(lp2sm_en2test(N,I,O),((retractall(lang(_)),assertz(lang("en")),sm_to_lp(O,I2),trans_alg(I2,"en",Lang,I3),I3=I)->(writeln([bt-lp2sm_en2test,N,passed]),A=passed);(writeln([bt-lp2sm_en2test,N,failed]),A=failed))),B),length(B,BL),findall(_,member(passed,B),R),length(R,RL),!.
lp2sm_en2test(25,[[["n","query box 1"],[["v",s]],":-",[[["n","grammar 1"],["aaa1 ,-'abb","aaa1 ,-'aba",["v",s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aaa1 ,-'abb","aaa1 ,-'aba",[v,s]]]]]]).
lp2sm_en2test(26,[[["n","query box 1"],[["v",s]],":-",[[["n","append 1"],[["a"],["b"],["v",s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[["a"],["b"],[v,s]]]]]]).
lp2sm_en2test(27,[[["n","query box 1"],[],":-",[[["n","equals 11"],["a","a"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals11],["a","a"]]]]]).lp2sm_en2test(28,[[["n","query box 1"],[],":-",[[["n","number 11"],[1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,number11],[1]]]]]).
lp2sm_en2test(29,[[["n","query box 1"],[["v",c]],":-",[[["n","minus 11"],[[1,2,3],[3],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,minus11],[[1,2,3],[3],[v,c]]]]]]).lp2sm_en2test(30,[[["n","query box 1"],[["v",b]],":-",[[["n","if 11"],[1,["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,if11],[1,[v,b]]]]]]).
lp2sm_en2test(3,[[["n","query box 1"],[["v",c]],":-",[[["n","function"],[1,1,["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).
lp2sm_en2test(31,[[["n","query box 1"],[],":-",[[["n","not 11"],[1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not11],[1]]]]]).lp2sm_en2test(32,[[["n","query box 1"],[],":-",[[["n","or 11"],[1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,or11],[1]]]]]).lp2sm_en2test(33,[[["n","query box 1"],[],":-",[[["n","downpipe"],[3,1,[[3,[4,2]],[2,[3,1]]]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,downpipe],[3,1,[[3,[4,2]],[2,[3,1]]]]]]]]).
lp2sm_en2test(34,[[["n","query box 1"],[["v",c]],":-",[[["n","getitemn"],[3,[1,2,3],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,getitemn],[3,[1,2,3],[v,c]]]]]]).
lp2sm_en2test(35,[[["n","query box 1"],[],":-",[[["n","identical"],[1,2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,identical],[1,2]]]]]).
lp2sm_en2test(36,[[["n","query box 1"],[],":-",[[["n","associative"],[1,2,3]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,associative],[1,2,3]]]]]).
lp2sm_en2test(37,[[["n","query box 1"],[["v",l]],":-",[[["n","length 1"],[[1],0,["v",l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,length1],[[1],0,[v,l]]]]]]).
lp2sm_en2test(38,[[["n","query box 1"],[["v",d]],":-",[[["n","optimise 1"],[[[5,4],[3,2],[1,0]],["v",d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,optimise1],[[[5,4],[3,2],[1,0]],[v,d]]]]]]).
lp2sm_en2test(39,[[["n","query box 1"],[],":-",[[["n","member 1a"],[1,[1,2]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member1a],[1,[1,2]]]]]]).lp2sm_en2test(40,[[["n","query box 1"],[["v",a]],":-",[[["n","minus 1"],[[1,2,3],[1,2],["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,minus1],[[1,2,3],[1,2],[v,a]]]]]]).lp2sm_en2test(41,[[["n","query box 1"],[],":-",[[["n","part of string"],[[1,2,3,4],[2,3]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,part_of_string],[[1,2,3,4],[2,3]]]]]]).
lp2sm_en2test(4,[[["n","query box 1"],[["v",a]],":-",[[["n","append 1"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[v,a]]]]]]).lp2sm_en2test(5,[[["n","query box 1"],[["v",n]],":-",[[["n","count"],[1,["v",n]]]]]],[[0,[n,query_box_1],[[v,n]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,count],[1,[v,n]]]]]]).
lp2sm_en2test(42,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","find all"],[["v",b],[[["n","or 12"],[["v",b]]]],["v",a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,or12],[[v,b]]]]]]).
lp2sm_en2test(43,[[["n","query box 1"],[["v",a]],":-",[[["n","intersection 1"],[[1,2,3],[3,4,5],[],["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,intersection1],[[1,2,3],[3,4,5],[],[v,a]]]]]]).
lp2sm_en2test(44,[[["n","query box 1"],[["v",a]],":-",[[["n","delete 2"],[[1,1,2],1,[],["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,delete2],[[1,1,2],1,[],[v,a]]]]]]).
lp2sm_en2test(45,[[["n","query box 1"],[],":-",[[["n","greaterthan"],[3,2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,greaterthan],[3,2]]]]]).lp2sm_en2test(46,[[["n","query box 1"],[["v",c]],":-",[[["n","conjunction"],["true","false",["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,conjunction],["true","false",[v,c]]]]]]).lp2sm_en2test(47,[[["n","query box 1"],[["v",l]],":-",[[["n","sum"],[[3,1,2],0,["v",l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,sum],[[3,1,2],0,[v,l]]]]]]).
lp2sm_en2test(48,[[["n","query box 1"],[["v",l]],":-",[[["n","sort 0"],[[9,4,8,2,1,5,7,6,3,10],["v",l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,sort0],[[9,4,8,2,1,5,7,6,3,10],[v,l]]]]]]).
lp2sm_en2test(49,[[["n","query box 1"],[["v",m]],":-",[[["n","maximum 0"],[[2,1,3,5,-1],["v",m]]]]]],[[0,[n,query_box_1],[[v,m]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,maximum0],[[2,1,3,5,-1],[v,m]]]]]]).
lp2sm_en2test(50,[[["n","query box 1"],[["v",c]],":-",[[["n","disjunction"],["true","false",["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,disjunction],["true","false",[v,c]]]]]]).
lp2sm_en2test(51,[[["n","query box 1"],[["v",c]],":-",[[["n","expressionnotheadache"],["true",["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,expressionnotheadache],["true",[v,c]]]]]]).lp2sm_en2test(52,[[["n","query box 1"],[["v",c]],":-",[[["n","mainrole"],[7,["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,mainrole],[7,[v,c]]]]]]).
lp2sm_en2test(53,[[["n","query box 1"],[["v",c]],":-",[[["n","function"],[[["n","function 2"],[2]],1,1,["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[[[n,function2],[2]],1,1,[v,c]]]]]]).
lp2sm_en2test(54,[[["n","query box 1"],[["v",c]],":-",[[["n","function"],[[["n","function 2"],[2]],1,1,["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[[[n,function2],[2]],1,1,[v,c]]]]]]).
lp2sm_en2test(55,[[["n","query box 1"],[["v",c]],":-",[[["n","test 1"],[["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,test1],[[v,c]]]]]]).lp2sm_en2test(56,[[["n","query box 1"],[["v",d]],":-",[[["n","map"],[["n","add"],[1,2,3],0,["v",d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,map],[[n,add],[1,2,3],0,[v,d]]]]]]).
lp2sm_en2test(57,[[["n","query box 1"],[["v",d]],":-",[[["n","find all 1"],[["n","plusone"],[1,2,3],[],["v",d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[n,plusone],[1,2,3],[],[v,d]]]]]]).
lp2sm_en2test(58,[[["n","query box 1"],[["v",d]],":-",[[["n","find all 1"],[["n","a to c"],["a","b","a"],[],["v",d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[n,a_to_c],["a","b","a"],[],[v,d]]]]]]).
lp2sm_en2test(59,[[["n","query box 1"],[["v",n]],":-",[[["n","count"],[1,["v",n]]]]]],[[0,[n,query_box_1],[[v,n]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,count],[1,[v,n]]]]]]).
lp2sm_en2test(6,[[["n","query box 1"],[["v",n]],":-",[[["n","count"],[0,["v",n]]]]]],[[0,[n,query_box_1],[[v,n]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,count],[0,[v,n]]]]]]).
lp2sm_en2test(60,[[["n","query box 1"],[],":-",[[["n","a"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,a],[]]]]]).
lp2sm_en2test(61,[[["n","query box 1"],[["v",l]],":-",[[["n","add"],[[1,2,3],3,[],["v",l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add],[[1,2,3],3,[],[v,l]]]]]]).
lp2sm_en2test(62,[[["n","query box 1"],[["v",l]],":-",[[["n","add"],[[1],[2,3],["v",l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add],[[1],[2,3],[v,l]]]]]]).lp2sm_en2test(63,[[["n","query box 1"],[["v",b]],":-",[[["n","add"],[1,["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add],[1,[v,b]]]]]]).
lp2sm_en2test(64,[[["n","query box 1"],[["v",b]],":-",[[["n","add 0"],[[1,2],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[[1,2],[v,b]]]]]]).
lp2sm_en2test(65,[[["n","query box 1"],[["v",b]],":-",[[["n","add 0"],[[1],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[[1],[v,b]]]]]]).lp2sm_en2test(66,[[["n","query box 1"],[],":-",[[["n","addorsubtract 1"],[2,1,1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,addorsubtract1],[2,1,1]]]]]).
lp2sm_en2test(67,[[["n","query box 1"],[],":-",[[["n","addorsubtract 1"],[2,1,1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,addorsubtract1],[2,1,1]]]]]).
lp2sm_en2test(68,[[["n","query box 1"],[],":-",[[["n","addorsubtract 1"],[2,1,1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,addorsubtract1],[2,1,1]]]]]).
lp2sm_en2test(69,[[["n","query box 1"],[],":-",[[["n","add 0"],[2,1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[2,1]]]]]).
lp2sm_en2test(7,[[["n","query box 1"],[["v",l]],":-",[[["n","reverse"],[[1,2,3],[],["v",l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,reverse],[[1,2,3],[],[v,l]]]]]]).lp2sm_en2test(8,[[["n","query box 1"],[],":-",[[["n","grammar 1"],["apple"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["apple"]]]]]).
lp2sm_en2test(70,[[["n","query box 1"],[],":-",[[["n","add 0"],[1,2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[1,2]]]]]).lp2sm_en2test(71,[[["n","query box 1"],[],":-",[[["n","add 0"],[1,2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[1,2]]]]]).
lp2sm_en2test(72,[[["n","query box 1"],[["v",b]],":-",[[["n","add 0"],[1,["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[1,[v,b]]]]]]).
lp2sm_en2test(73,[[["n","query box 1"],[["v",c]],":-",[[["n","add 0"],[1,1,["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[1,1,[v,c]]]]]]).
lp2sm_en2test(74,[[["n","query box 1"],[["v",c]],":-",[[["n","add 0"],[[1,2],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[[1,2],[v,c]]]]]]).
lp2sm_en2test(75,[[["n","query box 1"],[["v",c]],":-",[[["n","add 0"],[[],["v",c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[[],[v,c]]]]]]).
lp2sm_en2test(76,[[["n","query box 1"],[["v",b]],":-",[[["n","implies 2"],[1,["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,implies2],[1,[v,b]]]]]]).lp2sm_en2test(77,[[["n","query box 1"],[["v",b]],":-",[[["n","find all 1"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[1,2,3],[v,b]]]]]]).lp2sm_en2test(78,[[["n","query box 1"],[["v",b]],":-",[[["n","map list 1"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,maplist1],[[1,2,3],[v,b]]]]]]).
lp2sm_en2test(79,[[["n","query box 1"],[["v",b]],":-",[[["n","equals 41"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).
lp2sm_en2test(80,[[["n","query box 1"],[["v",a],["v",b],["v",c],["v",d]],":-",[[["n","equals 41"],[["v",a],["v",d],["v",c],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,d],[v,c],[v,b]]]]]]).lp2sm_en2test(81,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","equals 41"],[["v",a],["v",c],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,c],[v,b]]]]]]).
lp2sm_en2test(82,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[["v",a],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).lp2sm_en2test(83,[[["n","query box 1"],[],":-",[[["n","equals 41"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[]]]]]).
lp2sm_en2test(84,[[["n","query box 1"],[["v",a],["v",b],["v",c]],":-",[[["n","equals 41"],[["v",a],["v",c],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,c],[v,b]]]]]]).
lp2sm_en2test(85,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[["v",a],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).
lp2sm_en2test(86,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[["v",a],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).lp2sm_en2test(87,[[["n","query box 1"],[["v",a]],":-",[[["n","equals 41"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).lp2sm_en2test(88,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[["v",a],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).lp2sm_en2test(89,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[["v",a],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).
lp2sm_en2test(9,[[["n","query box 1"],[],":-",[[["n","grammar 1"],["aaa"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aaa"]]]]]).
lp2sm_en2test(90,[[["n","query box 1"],[],":-",[[["n","equals 41"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[]]]]]).
lp2sm_en2test(91,[[["n","query box 1"],[],":-",[[["n","equals 41"],[[1,2,3]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3]]]]]]).
lp2sm_en2test(92,[[["n","query box 1"],[["v",a],["v",b],["v",d]],":-",[[["n","equals 41"],[["v",a],["v",b],["v",d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b],[v,d]]]]]]).
lp2sm_en2test(93,[[["n","query box 1"],[["v",b]],":-",[[["n","map list 1"],[[[1],[2],[3]],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,maplist1],[[[1],[2],[3]],[v,b]]]]]]).lp2sm_en2test(94,[[["n","query box 1"],[["v",b]],":-",[[["n","map list 1"],[[[[1]],[[2]],[[3]]],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,maplist1],[[[[1]],[[2]],[[3]]],[v,b]]]]]]).
lp2sm_en2test(95,[[["n","query box 1"],[["v",b]],":-",[[["n","find all 1"],[[1,2,3],["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[1,2,3],[v,b]]]]]]).lp2sm_en2test(96,[[["n","query box 1"],[["v",b]],":-",[[["n","equals 41"],[1,["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[v,b]]]]]]).
lp2sm_en2test(97,[[["n","query box 1"],[["v",a]],":-",[[["n","equals 41"],[["v",a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).
lp2sm_en2test(98,[[["n","query box 1"],[["v",a],["v",b]],":-",[[["n","equals 41"],[[[1,2],3,4],["v",a],["v",b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[1,2],3,4],[v,a],[v,b]]]]]]).
lp2sm_en2test(99,[[["n","query box 1"],[["v",b]],":-",[[["n","equals 41"],[1,["v",b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[v,b]]]]]]).
lp2sm_test(10,[[[n,query_box_1],[[v,t]],":-",[[[n,grammar1],["aa",[v,t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aa",[v,t]]]]]]).
lp2sm_test(100,[[[n,query_box_1],[[v,b],[v,c]],":-",[[[n,equals41],[1,[v,c],[v,b]]]]]],[[0,[n,query_box_1],[[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[v,c],[v,b]]]]]]).
lp2sm_test(101,[[[n,query_box_1],[[v,b],[v,c]],":-",[[[n,equals41],[1,[v,c],[v,b]]]]]],[[0,[n,query_box_1],[[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[v,c],[v,b]]]]]]).lp2sm_test(102,[[[n,query_box_1],[[v,b1],[v,b2],[v,b3]],":-",[[[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]]]]],[[0,[n,query_box_1],[[v,b1],[v,b2],[v,b3]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]]]]]).
lp2sm_test(103,[[[n,query_box_1],[[v,b1],[v,b2],[v,b3]],":-",[[[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]]]]],[[0,[n,query_box_1],[[v,b1],[v,b2],[v,b3]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[2,3],[v,b1],[v,b2],[v,b3]]]]]]).
lp2sm_test(104,[[[n,query_box_1],[[v,b]],":-",[[[n,findall1],[[[1,2],[3,4]],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[[1,2],[3,4]],[v,b]]]]]]).
lp2sm_test(105,[[[n,query_box_1],[[v,b]],":-",[[[n,member2a],[[v,b],[1,11,111]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member2a],[[v,b],[1,11,111]]]]]]).lp2sm_test(106,[[[n,query_box_1],[[v,b]],":-",[[[n,call1a],[[v,b],[1,11,111]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,call1a],[[v,b],[1,11,111]]]]]]).
lp2sm_test(107,[[[n,query_box_1],[[v,b]],":-",[[[n,call1b],[[1,11,111],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,call1b],[[1,11,111],[v,b]]]]]]).lp2sm_test(108,[[[n,query_box_1],[[v,b]],":-",[[[n,call1b],[[1,11,111],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,call1b],[[1,11,111],[v,b]]]]]]).
lp2sm_test(109,[[[n,query_box_1],[[v,b]],":-",[[[n,middle],[2,[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,middle],[2,[v,b]]]]]]).
lp2sm_test(11,[[[n,query_box_1],[[v,t],[v,u]],":-",[[[n,grammar1],["aa",[v,t],[v,u]]]]]],[[0,[n,query_box_1],[[v,t],[v,u]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aa",[v,t],[v,u]]]]]]).lp2sm_test(12,[[[n,query_box_1],[],":-",[[[n,grammar1],["aa"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aa"]]]]]).lp2sm_test(13,[[[n,query_box_1],[[v,t]],":-",[[[n,grammar1],["[a,a]",[v,t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["[a,a]",[v,t]]]]]]).
lp2sm_test(110,[[[n,query_box_1],[[v,b]],":-",[[[n,level_with],[170,[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,level_with],[170,[v,b]]]]]]).lp2sm_test(111,[[[n,query_box_1],[[v,a]],":-",[[[n,tra_las],[5,[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,tra_las],[5,[v,a]]]]]]).lp2sm_test(112,[[[n,query_box_1],[[v,a]],":-",[[[n,final_gong],[5,[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,final_gong],[5,[v,a]]]]]]).
lp2sm_test(113,[[[n,query_box_1],[[v,b]],":-",[[[n,bedroom_to_garden],["bedroom",[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,bedroom_to_garden],["bedroom",[v,b]]]]]]).lp2sm_test(114,[[[n,query_box_1],[[v,a]],":-",[[[n,stop_at_top],[["-","-","-","top"],[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stop_at_top],[["-","-","-","top"],[v,a]]]]]]).
lp2sm_test(115,[[[n,query_box_1],[[v,result]],":-",[[[n,function],[[["n1","a"]],[["a",5]],[],[v,result]]]]]],[[0,[n,query_box_1],[[v,result]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[[["n1","a"]],[["a",5]],[],[v,result]]]]]]).
lp2sm_test(116,[[[n,query_box_1],[[v,t]],":-",[[[n,grammar1],[".aaa.bbb.",[".","?"],[v,t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],[".aaa.bbb.",[".","?"],[v,t]]]]]]).
lp2sm_test(117,[[[n,query_box_1],[[v,t]],":-",[[[n,grammar1],["a   a. a ",[" ","."],[v,t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["a   a. a ",[" ","."],[v,t]]]]]]).
lp2sm_test(118,[[[n,query_box_1],[],":-",[[[n,query_pred]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,query_pred],[]]]]]).
lp2sm_test(119,[[[n,query_box_1],[],":-",[[[n,count],[2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,count],[2]]]]]).lp2sm_test(120,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,function],[1,[v,b],2,[v,a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,[v,b],2,[v,a]]]]]]).lp2sm_test(121,[[[n,query_box_1],[[v,a]],":-",[[[n,append1],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[v,a]]]]]]).
lp2sm_test(122,[[[n,query_box_1],[],":-",[[[n,equals4_on1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4_on1],[]]]]]).
lp2sm_test(123,[[[n,query_box_1],[[v,b],[v,c]],":-",[[[n,equals41],[[[v,b],"|",[v,c]]]]]]],[[0,[n,query_box_1],[[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,b],"|",[v,c]]]]]]]).
lp2sm_test(124,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,equals41],[[[[v,a],"|",[v,d]],[v,c],"|",[v,b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[[v,a],"|",[v,d]],[v,c],"|",[v,b]]]]]]]).
lp2sm_test(125,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,equals41],[[[[v,a],[v,c]],"|",[v,b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[[v,a],[v,c]],"|",[v,b]]]]]]]).
lp2sm_test(126,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[[v,a],"|",[v,b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],"|",[v,b]]]]]]]).lp2sm_test(127,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,equals41],[[[v,a],[v,c],"|",[v,b],[v,d]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],[v,c],"|",[v,b],[v,d]]]]]]]).
lp2sm_test(128,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,equals41],[[[[v,a]],[v,c],"|",[v,b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[[v,a]],[v,c],"|",[v,b]]]]]]]).
lp2sm_test(129,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[[v,a],"|",[v,b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],"|",[v,b]]]]]]]).lp2sm_test(130,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[[v,a],"|",[[v,b]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],"|",[[v,b]]]]]]]]).
lp2sm_test(131,[[[n,query_box_1],[[v,a]],":-",[[[n,equals41],[[[v,a]]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a]]]]]]]).
lp2sm_test(132,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[[v,a],[v,b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],[v,b]]]]]]]).
lp2sm_test(133,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[[v,a],[v,b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],[v,b]]]]]]]).lp2sm_test(134,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,equals41],[[[v,a],[v,c],"|",[v,b],"|",[v,d]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],[v,c],"|",[v,b],"|",[v,d]]]]]]]).lp2sm_test(135,[[[n,query_box_1],[],":-",[[[n,equals41],[[1,2,3]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3]]]]]]).
lp2sm_test(136,[[[n,query_box_1],[[v,a],[v,b],[v,d]],":-",[[[n,equals41],[[[v,a],"|",[[v,b],"|",[v,d]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[v,a],"|",[[v,b],"|",[v,d]]]]]]]]).lp2sm_test(137,[[[n,query_box_1],[[v,b]],":-",[[[n,equals41],[[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,b]]]]]]).lp2sm_test(138,[[[n,query_box_1],[],":-",[[[n,equals41]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[]]]]]).lp2sm_test(139,[[[n,query_box_1],[[v,a],[v,d]],":-",[[[n,append1],[[v,a],[v,d]]]]]],[[0,[n,query_box_1],[[v,a],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[v,a],[v,d]]]]]]).lp2sm_test(140,[[[n,query_box_1],[[v,b]],":-",[[[n,equals41],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).
lp2sm_test(14,[[[n,query_box_1],[[v,t]],":-",[[[n,grammar1],["[a]",[v,t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["[a]",[v,t]]]]]]).
lp2sm_test(141,[[[n,query_box_1],[[v,b]],":-",[[[n,equals41],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).
lp2sm_test(142,[[[n,query_box_1],[[v,b]],":-",[[[n,equals41],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).lp2sm_test(143,[[[n,query_box_1],[[v,b]],":-",[[[n,equals41],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).
lp2sm_test(144,[[[n,query_box_1],[[v,b]],":-",[[[n,equals41],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).lp2sm_test(145,[[[n,query_box_1],[[v,c]],":-",[[[n,equals41],[[[1,2,3]],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[1,2,3]],[v,c]]]]]]).
lp2sm_test(146,[[[n,query_box_1],[[v,c]],":-",[[[n,equals41],[[[1,2,3],4,5],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[1,2,3],4,5],[v,c]]]]]]).lp2sm_test(147,[[[n,query_box_1],[[v,c]],":-",[[[n,equals41],[[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,c]]]]]]).
lp2sm_test(148,[[[n,query_box_1],[[v,c]],":-",[[[n,equals41],[[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,c]]]]]]).
lp2sm_test(149,[[[n,query_box_1],[[v,b],[v,c]],":-",[[[n,equals41],[[[1,2,3]],[v,b],[v,c]]]]]],[[0,[n,query_box_1],[[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[1,2,3]],[v,b],[v,c]]]]]]).lp2sm_test(150,[[[n,query_box_1],[[v,c]],":-",[[[n,equals41],[[[4,5,6]],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[4,5,6]],[v,c]]]]]]).
lp2sm_test(15,[[[n,query_box_1],[[v,t]],":-",[[[n,grammar1],["[[""aa,]"",b,""c"",[]],1]",[v,t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["[[""aa,]"",b,""c"",[]],1]",[v,t]]]]]]).
lp2sm_test(151,[[[n,query_box_1],[[v,c]],":-",[[[n,equals41],[[[6,2,3],[5]],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[6,2,3],[5]],[v,c]]]]]]).
lp2sm_test(152,[[[n,query_box_1],[[v,c]],":-",[[[n,equals41],[[6,2,3],[1,2,3],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[6,2,3],[1,2,3],[v,c]]]]]]).
lp2sm_test(153,[[[n,query_box_1],[[v,c]],":-",[[[n,equals41],[[[4,5,6]],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[4,5,6]],[v,c]]]]]]).
lp2sm_test(154,[[[n,query_box_1],[[v,c]],":-",[[[n,equals41],[[[4,5,6]],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[4,5,6]],[v,c]]]]]]).lp2sm_test(155,[[[n,query_box_1],[[v,a]],":-",[[[n,equals41],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).lp2sm_test(156,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,equals42],[[v,a],[[v,b],[v,c]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals42],[[v,a],[[v,b],[v,c]]]]]]]).
lp2sm_test(157,[[[n,query_box_1],[[v,a]],":-",[[[n,equals41],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).lp2sm_test(158,[[[n,query_box_1],[[v,a]],":-",[[[n,equals41],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).
lp2sm_test(159,[[[n,query_box_1],[],":-",[[[n,equals41]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[]]]]]).
lp2sm_test(16,[[[n,query_box_1],[],":-",[[[n,grammar1],["john ate the apple"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["john ate the apple"]]]]]).
lp2sm_test(160,[[[n,query_box_1],[[v,c]],":-",[[[n,function],[1,1,[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).
lp2sm_test(161,[[[n,query_box_1],[[v,c]],":-",[[[n,function],[1,1,[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).
lp2sm_test(162,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,equals41],[[v,a],[v,b],[v,c]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b],[v,c]]]]]]).
lp2sm_test(163,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,function1],[[v,a],[v,a],[v,b],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],[v,a],[v,b],[v,b]]]]]]).
lp2sm_test(164,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,function1],[[v,a],[v,a],[v,b],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],[v,a],[v,b],[v,b]]]]]]).
lp2sm_test(165,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[[n,equals4],[[v,a],[1,2]]],[[n,equals4],[[v,b],[0,"|",[v,a]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,"[]"]],[1,[on_true,2],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,a],[1,2]]],[2,[on_true,[exit_function,0]],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,b],[0,"|",[v,a]]]]]]]).
lp2sm_test(166,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[[n,equals4],[[v,a],0]],[[n,equals4],[[v,b],[[v,a],"|",[1,2]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,"[]"]],[1,[on_true,2],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,a],0]],[2,[on_true,[exit_function,0]],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,b],[[v,a],"|",[1,2]]]]]]]).
lp2sm_test(167,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals4],[[[v,a],"|",[v,b]],[1,"|",2]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[[v,a],"|",[v,b]],[1,"|",2]]]]]]).
lp2sm_test(168,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,function1],[[v,a],"|",[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],"|",[v,b]]]]]]).lp2sm_test(169,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,function1],[[v,a],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],[v,b]]]]]]).
lp2sm_test(17,[[[n,query_box_1],[[v,t]],":-",[[[n,grammar1],["aaa1 ,-'! a? b! b.",[v,t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aaa1 ,-'! a? b! b.",[v,t]]]]]]).lp2sm_test(18,[[[n,query_box_1],[[v,c]],":-",[[[n,grammar1],["what is 1+11",[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["what is 1+11",[v,c]]]]]]).lp2sm_test(19,[[[n,query_box_1],[[v,s]],":-",[[[n,positivityscore],[["not","you","like","a","walk"],["would","you","like","a","walk"],0,[v,s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,positivityscore],[["not","you","like","a","walk"],["would","you","like","a","walk"],0,[v,s]]]]]]).
lp2sm_test(170,[[[n,query_box_1],[[v,a]],":-",[[[n,function1],[[v,a],[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,a],[v,a]]]]]]).
lp2sm_test(171,[[[n,query_box_1],[],":-",[[[n,function1],[[[]]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[[]]]]]]]).
lp2sm_test(172,[[[n,query_box_1],[],":-",[[[n,equals4],[[],[[]]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[],[[]]]]]]]).lp2sm_test(173,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d],[v,e]],":-",[[[n,equals4],[[[v,d],[v,d],[v,a],[v,b],[v,a]],[[v,e],[v,c],1,[v,c],[v,b]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d],[v,e]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[[v,d],[v,d],[v,a],[v,b],[v,a]],[[v,e],[v,c],1,[v,c],[v,b]]]]]]]).
lp2sm_test(174,[[[n,query_box_1],[[v,a],[v,c],[v,e]],":-",[[[n,function1],[[v,e],[v,c],[v,a],[v,c],[v,a]]]]]],[[0,[n,query_box_1],[[v,a],[v,c],[v,e]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[v,e],[v,c],[v,a],[v,c],[v,a]]]]]]).
lp2sm_test(175,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d],[v,e1],[v,e2],[v,f],[v,f2]],":-",[[[n,equals4],[[[[v,e1],[v,e2]],[v,c],[v,a],[v,c],[v,a],[v,e1]],[[v,d],[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d],[v,e1],[v,e2],[v,f],[v,f2]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[[[v,e1],[v,e2]],[v,c],[v,a],[v,c],[v,a],[v,e1]],[[v,d],[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]]]]]).
lp2sm_test(176,[[[n,query_box_1],[[v,a],[v,c],[v,e1],[v,e2]],":-",[[[n,function1],[[[v,e1],[v,e2]],[v,c],[v,a],[v,c],[v,a],[v,e1]]]]]],[[0,[n,query_box_1],[[v,a],[v,c],[v,e1],[v,e2]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[[v,e1],[v,e2]],[v,c],[v,a],[v,c],[v,a],[v,e1]]]]]]).lp2sm_test(177,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d],[v,e1],[v,e2],[v,f],[v,f2]],":-",[[[n,equals4],[[[[v,e1],[v,e2]],"|",[[v,c],[v,a],[v,c],[v,a],[v,e1]]],[[v,d],"|",[[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d],[v,e1],[v,e2],[v,f],[v,f2]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals4],[[[[v,e1],[v,e2]],"|",[[v,c],[v,a],[v,c],[v,a],[v,e1]]],[[v,d],"|",[[v,d],[[1,1],[1,1]],[v,b],[v,b],[[v,f],[v,f2]]]]]]]]]).lp2sm_test(178,[[[n,query_box_1],[[v,a],[v,c],[v,e1],[v,e2]],":-",[[[n,function1],[[[v,e1],[v,e2]],"|",[[v,c],[v,a],[v,c],[v,a],[v,e1]]]]]]],[[0,[n,query_box_1],[[v,a],[v,c],[v,e1],[v,e2]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function1],[[[v,e1],[v,e2]],"|",[[v,c],[v,a],[v,c],[v,a],[v,e1]]]]]]]).lp2sm_test(179,[[[n,query_box_1],[],":-",[[[n,add0]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[]]]]]).
lp2sm_test(180,[[[n,query_box_1],[],":-",[[[n,add0]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[]]]]]).
lp2sm_test(181,[[[n,query_box_1],[[v,b]],":-",[[[n,1],[[1,2],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,1],[[1,2],[v,b]]]]]]).lp2sm_test(182,[[[n,query_box_1],[[v,b]],":-",[[[n,member_try],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member_try],[[1,2,3],[v,b]]]]]]).
lp2sm_test(183,[[[n,query_box_1],[],":-",[[[n,not1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not1],[]]]]]).lp2sm_test(184,[[[n,query_box_1],[],":-",[[[n,not1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not1],[]]]]]).
lp2sm_test(185,[[[n,query_box_1],[],":-",[[[n,not1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not1],[]]]]]).
lp2sm_test(186,[[[n,query_box_1],[],":-",[[[n,brackets1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,brackets1],[]]]]]).
lp2sm_test(187,[[[n,query_box_1],[],":-",[[[n,brackets1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,brackets1],[]]]]]).
lp2sm_test(188,[[[n,query_box_1],[],":-",[[[n,brackets1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,brackets1],[]]]]]).
lp2sm_test(189,[[[n,query_box_1],[],":-",[[[n,brackets1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,brackets1],[]]]]]).
lp2sm_test(190,[[[n,query_box_1],[],":-",[[[n,true]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,true],[]]]]]).
lp2sm_test(191,[[[n,query_box_1],[],":-",[[[n,not1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not1],[]]]]]).
lp2sm_test(192,[[[n,query_box_1],[[v,b]],":-",[[[n,findall1],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[1,2,3],[v,b]]]]]]).lp2sm_test(193,[[[n,query_box_1],[[v,b]],":-",[[[n,findall1],[[[[1,2,3,4]]],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[[[1,2,3,4]]],[v,b]]]]]]).
lp2sm_test(194,[[[n,query_box_1],[[v,a]],":-",[[[n,cut1],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,cut1],[[v,a]]]]]]).
lp2sm_test(195,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,findall],[[v,b],[[[n,or12],[[v,b]]]],[v,a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,or12],[[v,b]]]]]]).lp2sm_test(196,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,findall],[[v,b],[[[n,or12],[[v,b]]]],[v,a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,or12],[[v,b]]]]]]).lp2sm_test(197,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,findall],[[v,b],[[[n,member],[[v,b],[1]]]],[v,a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,member],[[v,b],[1]]]]]]).
lp2sm_test(198,[[[n,query_box_1],[],":-",[[[n,function]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_test(199,[[[n,query_box_1],[[v,a]],":-",[[[n,function],[1,1,[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,a]]]]]]).
lp2sm_test(2,[[[n,query_box_1],[[v,c]],":-",[[[n,function],[1,1,[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).
lp2sm_test(20,[[[n,query_box_1],[[v,c]],":-",[[[n,function],[1,1,[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).
lp2sm_test(200,[[[n,query_box_1],[],":-",[[[n,function]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_test(201,[[[n,query_box_1],[],":-",[[[n,function]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_test(202,[[[n,query_box_1],[],":-",[[[n,function]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_test(203,[[[n,query_box_1],[],":-",[[[n,traverse],[2,6]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,traverse],[2,6]]]]]).
lp2sm_test(204,[[[n,query_box_1],[],":-",[[[n,function]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[]]]]]).
lp2sm_test(205,[[[n,query_box_1],[[v,b]],":-",[[[n,findall1],[[[1,2],[1,4]],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[[1,2],[1,4]],[v,b]]]]]]).lp2sm_test(206,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,findall],[[v,b],[[[n,or12],[1,[v,b]]]],[v,a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,or12],[1,[v,b]]]]]]).lp2sm_test(207,[[[n,query_box_1],[[v,b1]],":-",[[[n,findall1],[[1,2],[v,b1]]]]]],[[0,[n,query_box_1],[[v,b1]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[1,2],[v,b1]]]]]]).lp2sm_test(208,[[[n,query_box_1],[[v,b],[v,c],[v,g]],":-",[[[n,reverse1],[[1,2,3],[],[v,c],[v,b],[v,g]]]]]],[[0,[n,query_box_1],[[v,b],[v,c],[v,g]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,reverse1],[[1,2,3],[],[v,c],[v,b],[v,g]]]]]]).lp2sm_test(209,[[[n,query_box_1],[[v,a]],":-",[[[n,a],[["a","b"],"",[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,a],[["a","b"],"",[v,a]]]]]]).
lp2sm_test(21,[[[n,query_box_1],[[v,t]],":-",[[[n,grammar1],["ate",[v,t]]]]]],[[0,[n,query_box_1],[[v,t]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["ate",[v,t]]]]]]).
lp2sm_test(210,[[[n,query_box_1],[],":-",[[[n,grammar1],[[apple]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],[[apple]]]]]]).
lp2sm_test(211,[[[n,query_box_1],[],":-",[[[n,grammar1],[[apple,banana]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],[[apple,banana]]]]]]).
lp2sm_test(212,[[[n,query_box_1],[],":-",[[[n,grammar1],[[apple,banana,carrot]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],[[apple,banana,carrot]]]]]]).lp2sm_test(213,[[[n,query_box_1],[[v,a]],":-",[[[n,reverse1],[[1,2,3],[],[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,reverse1],[[1,2,3],[],[v,a]]]]]]).
lp2sm_test(214,[[[n,query_box_1],[[v,a]],":-",[[[n,append1],[[1,2,3],[],[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[1,2,3],[],[v,a]]]]]]).
lp2sm_test(215,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,append],[[v,a],[v,b],[1,2,3]]],[v,c]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b]],[v,c]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],[v,b],[1,2,3]]]]]]).
lp2sm_test(216,[[[n,query_box_1],[],":-",[[[n,traverse],[2,8]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,traverse],[2,8]]]]]).
lp2sm_test(217,[[[n,query_box_1],[],":-",[[[n,traverse],[2,6]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,traverse],[2,6]]]]]).
lp2sm_test(218,[[[n,query_box_1],[[v,b]],":-",[[[n,findall1],[[[1,2],[3,4]],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[[1,2],[3,4]],[v,b]]]]]]).
lp2sm_test(219,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,stringconcat],[[v,a],[v,b],"abc"]],[v,c]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b]],[v,c]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,stringconcat],[[v,a],[v,b],"abc"]]]]]).
lp2sm_test(22,[[[n,query_box_1],[],":-",[[[n,grammar1],["peter cut the pear"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["peter cut the pear"]]]]]).
lp2sm_test(220,[[[n,query_box_1],[],":-",[[[n,stringconcat],["a","b","ab"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stringconcat],["a","b","ab"]]]]]).
lp2sm_test(221,[[[n,query_box_1],[[v,a]],":-",[[[n,stringconcat],["a","b",[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stringconcat],["a","b",[v,a]]]]]]).
lp2sm_test(222,[[[n,query_box_1],[[v,a]],":-",[[[n,stringconcat],["a",[v,a],"ab"]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stringconcat],["a",[v,a],"ab"]]]]]).lp2sm_test(223,[[[n,query_box_1],[[v,a]],":-",[[[n,stringconcat],[[v,a],"b","ab"]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,stringconcat],[[v,a],"b","ab"]]]]]).
lp2sm_test(224,[[[n,query_box_1],[],":-",[[[n,append],[["a"],["b"],["a","b"]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[["a"],["b"],["a","b"]]]]]]).lp2sm_test(225,[[[n,query_box_1],[[v,a]],":-",[[[n,append],[["a"],["b"],[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[["a"],["b"],[v,a]]]]]]).
lp2sm_test(226,[[[n,query_box_1],[[v,a]],":-",[[[n,append],[["a"],[v,a],["a","b"]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[["a"],[v,a],["a","b"]]]]]]).
lp2sm_test(227,[[[n,query_box_1],[[v,a]],":-",[[[n,append],[[v,a],["b"],["a","b"]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[[v,a],["b"],["a","b"]]]]]]).
lp2sm_test(228,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,append],[[v,a],[v,b],["a","b","c"]]],[v,c]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b]],[v,c]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],[v,b],["a","b","c"]]]]]]).
lp2sm_test(229,[[[n,query_box_1],[[v,a],[v,c]],":-",[[[n,findall],[[v,a],[[n,member],[[v,a],["a","b"]]],[v,c]]]]]],[[0,[n,query_box_1],[[v,a],[v,c]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,a],[v,c]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,member],[[v,a],["a","b"]]]]]]).
lp2sm_test(23,[[[n,query_box_1],[[v,s]],":-",[[[n,agree],[["a","b","c"],["d","e","f"],["a","b","c","g"],[v,s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,agree],[["a","b","c"],["d","e","f"],["a","b","c","g"],[v,s]]]]]]).lp2sm_test(24,[[[n,query_box_1],[[v,s]],":-",[[[n,modus_ponens],["a",[["a","b"],["c","d"],["e","f"]],[v,s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,modus_ponens],["a",[["a","b"],["c","d"],["e","f"]],[v,s]]]]]]).lp2sm_test(25,[[[n,query_box_1],[[v,s]],":-",[[[n,grammar1],["aaa1 ,-'abb","aaa1 ,-'aba",[v,s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aaa1 ,-'abb","aaa1 ,-'aba",[v,s]]]]]]).
lp2sm_test(230,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,append],[["a"],[v,a],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[["a"],[v,a],[v,b]]]]]]).
lp2sm_test(231,[[[n,query_box_1],[[v,a],[v,c],[v,d]],":-",[[[n,findall],[[[v,a],[v,c]],[[n,append],[[v,a],["a","b"],[v,c]]],[v,d]]]]]],[[0,[n,query_box_1],[[v,a],[v,c],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,c]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],["a","b"],[v,c]]]]]]).lp2sm_test(232,[[[n,query_box_1],[],":-",[[[n,member],["a",["a","b"]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member],["a",["a","b"]]]]]]).lp2sm_test(233,[[[n,query_box_1],[[v,a],[v,d]],":-",[[[n,findall],[[v,a],[[n,member],["a",[v,a]]],[v,d]]]]]],[[0,[n,query_box_1],[[v,a],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,a],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,member],["a",[v,a]]]]]]).lp2sm_test(234,[[[n,query_box_1],[[v,a]],":-",[[[n,member],[[v,a],["a","b"]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member],[[v,a],["a","b"]]]]]]).
lp2sm_test(235,[[[n,query_box_1],[[v,a],[v,b],[v,d]],":-",[[[n,findall],[[[v,a],[v,b]],[[n,member],[[v,b],[v,a]]],[v,d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,member],[[v,b],[v,a]]]]]]).
lp2sm_test(236,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,findall],[[[v,a],[v,b],[v,c]],[[n,append],[[v,a],["a"],[[v,b],"|",[v,c]]]],[v,d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b],[v,c]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],["a"],[[v,b],"|",[v,c]]]]]]]).
lp2sm_test(237,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,findall],[[[v,a],[v,b],[v,c]],[[n,append],[[v,a],["b",[v,b]],[v,c]]],[v,d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b],[v,c]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],["b",[v,b]],[v,c]]]]]]).
lp2sm_test(238,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,findall],[[[v,a],[v,b],[v,c]],[[n,append],[[v,a],[v,b],[v,c]]],[v,d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[[v,a],[v,b],[v,c]],[v,d]]],[1,[on_true,[findall_exit_function,0]],[go_after,-],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,append],[[v,a],[v,b],[v,c]]]]]]).
lp2sm_test(239,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,append],[[v,a],["b",[v,b]],[[v,c]]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[[v,a],["b",[v,b]],[[v,c]]]]]]]).
lp2sm_test(240,[[[n,query_box_1],[[v,a],[v,c]],":-",[[[n,append],[[v,a],["b"],[[v,c]]]]]]],[[0,[n,query_box_1],[[v,a],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append],[[v,a],["b"],[[v,c]]]]]]]).
lp2sm_test(241,[[[n,query_box_1],[[v,a]],":-",[[[n,reverse1],[[v,a],[],[3,2,1]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,reverse1],[[v,a],[],[3,2,1]]]]]]).
lp2sm_test(242,[[[n,query_box_1],[[v,a]],":-",[[[n,append1],[[v,a],[],[1,2,3]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[v,a],[],[1,2,3]]]]]]).
lp2sm_test(243,[[[n,query_box_1],[[v,a]],":-",[[[n,back_propagate],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,back_propagate],[[v,a]]]]]]).
lp2sm_test(244,[[[n,query_box_1],[[v,d]],":-",[[[n,foldl1],[[n,stringconcata1],["a","b"],"",[v,d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,foldl1],[[n,stringconcata1],["a","b"],"",[v,d]]]]]]).
lp2sm_test(245,[[[n,query_box_1],[[v,a],[v,x],[v,y],[v,z]],":-",[[[[n,equals4],[[v,a],"abc"]],[[n,string_chars],[[v,a],[[v,x],[v,y],[v,z]]]]]]]],[[0,[n,query_box_1],[[v,a],[v,x],[v,y],[v,z]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,"[]"]],[1,[on_true,2],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,equals4],[[v,a],"abc"]],[2,[on_true,[exit_function,0]],[go_after,-],[on_false,[fail_function,0]],[go_to_predicates,-],[n,string_chars],[[v,a],[[v,x],[v,y],[v,z]]]]]]]).lp2sm_test(246,[[[n,query_box_1],[],":-",[[[n,test2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,test2],[]]]]]).
lp2sm_test(247,[[[n,query_box_1],[[v,a]],":-",[[[n,test2],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,test2],[[v,a]]]]]]).
lp2sm_test(26,[[[n,query_box_1],[[v,s]],":-",[[[n,append1],[["a"],["b"],[v,s]]]]]],[[0,[n,query_box_1],[[v,s]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[["a"],["b"],[v,s]]]]]]).
lp2sm_test(27,[[[n,query_box_1],[],":-",[[[n,equals11],["a","a"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals11],["a","a"]]]]]).
lp2sm_test(28,[[[n,query_box_1],[],":-",[[[n,number11],[1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,number11],[1]]]]]).
lp2sm_test(29,[[[n,query_box_1],[[v,c]],":-",[[[n,minus11],[[1,2,3],[3],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,minus11],[[1,2,3],[3],[v,c]]]]]]).
lp2sm_test(3,[[[n,query_box_1],[[v,c]],":-",[[[n,function],[1,1,[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[1,1,[v,c]]]]]]).
lp2sm_test(30,[[[n,query_box_1],[[v,b]],":-",[[[n,if11],[1,[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,if11],[1,[v,b]]]]]]).
lp2sm_test(31,[[[n,query_box_1],[],":-",[[[n,not11],[1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,not11],[1]]]]]).
lp2sm_test(32,[[[n,query_box_1],[],":-",[[[n,or11],[1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,or11],[1]]]]]).
lp2sm_test(33,[[[n,query_box_1],[],":-",[[[n,downpipe],[3,1,[[3,[4,2]],[2,[3,1]]]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,downpipe],[3,1,[[3,[4,2]],[2,[3,1]]]]]]]]).
lp2sm_test(34,[[[n,query_box_1],[[v,c]],":-",[[[n,getitemn],[3,[1,2,3],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,getitemn],[3,[1,2,3],[v,c]]]]]]).
lp2sm_test(35,[[[n,query_box_1],[],":-",[[[n,identical],[1,2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,identical],[1,2]]]]]).
lp2sm_test(36,[[[n,query_box_1],[],":-",[[[n,associative],[1,2,3]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,associative],[1,2,3]]]]]).lp2sm_test(37,[[[n,query_box_1],[[v,l]],":-",[[[n,length1],[[1],0,[v,l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,length1],[[1],0,[v,l]]]]]]).
lp2sm_test(38,[[[n,query_box_1],[[v,d]],":-",[[[n,optimise1],[[[5,4],[3,2],[1,0]],[v,d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,optimise1],[[[5,4],[3,2],[1,0]],[v,d]]]]]]).lp2sm_test(39,[[[n,query_box_1],[],":-",[[[n,member1a],[1,[1,2]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,member1a],[1,[1,2]]]]]]).
lp2sm_test(4,[[[n,query_box_1],[[v,a]],":-",[[[n,append1],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,append1],[[v,a]]]]]]).lp2sm_test(5,[[[n,query_box_1],[[v,n]],":-",[[[n,count],[1,[v,n]]]]]],[[0,[n,query_box_1],[[v,n]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,count],[1,[v,n]]]]]]).
lp2sm_test(40,[[[n,query_box_1],[[v,a]],":-",[[[n,minus1],[[1,2,3],[1,2],[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,minus1],[[1,2,3],[1,2],[v,a]]]]]]).lp2sm_test(41,[[[n,query_box_1],[],":-",[[[n,part_of_string],[[1,2,3,4],[2,3]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,part_of_string],[[1,2,3,4],[2,3]]]]]]).lp2sm_test(42,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,findall],[[v,b],[[[n,or12],[[v,b]]]],[v,a]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,1],[go_after,-2],[on_false,-3],[go_to_predicates,-],[n,findall],[[v,b],[v,a]]],[1,[on_true,2],[go_after,[findall_exit_function,0]],[on_false,[findall_fail_function,0]],[go_to_predicates,-],[n,"[]"]],[2,[on_true,[exit_function,1]],[go_after,-],[on_false,[fail_function,1]],[go_to_predicates,-],[n,or12],[[v,b]]]]]]).
lp2sm_test(43,[[[n,query_box_1],[[v,a]],":-",[[[n,intersection1],[[1,2,3],[3,4,5],[],[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,intersection1],[[1,2,3],[3,4,5],[],[v,a]]]]]]).lp2sm_test(44,[[[n,query_box_1],[[v,a]],":-",[[[n,delete2],[[1,1,2],1,[],[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,delete2],[[1,1,2],1,[],[v,a]]]]]]).
lp2sm_test(45,[[[n,query_box_1],[],":-",[[[n,greaterthan],[3,2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,greaterthan],[3,2]]]]]).
lp2sm_test(46,[[[n,query_box_1],[[v,c]],":-",[[[n,conjunction],["true","false",[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,conjunction],["true","false",[v,c]]]]]]).lp2sm_test(47,[[[n,query_box_1],[[v,l]],":-",[[[n,sum],[[3,1,2],0,[v,l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,sum],[[3,1,2],0,[v,l]]]]]]).
lp2sm_test(48,[[[n,query_box_1],[[v,l]],":-",[[[n,sort0],[[9,4,8,2,1,5,7,6,3,10],[v,l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,sort0],[[9,4,8,2,1,5,7,6,3,10],[v,l]]]]]]).lp2sm_test(49,[[[n,query_box_1],[[v,m]],":-",[[[n,maximum0],[[2,1,3,5,-1],[v,m]]]]]],[[0,[n,query_box_1],[[v,m]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,maximum0],[[2,1,3,5,-1],[v,m]]]]]]).
lp2sm_test(50,[[[n,query_box_1],[[v,c]],":-",[[[n,disjunction],["true","false",[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,disjunction],["true","false",[v,c]]]]]]).
lp2sm_test(51,[[[n,query_box_1],[[v,c]],":-",[[[n,expressionnotheadache],["true",[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,expressionnotheadache],["true",[v,c]]]]]]).
lp2sm_test(52,[[[n,query_box_1],[[v,c]],":-",[[[n,mainrole],[7,[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,mainrole],[7,[v,c]]]]]]).lp2sm_test(53,[[[n,query_box_1],[[v,c]],":-",[[[n,function],[[[n,function2],[2]],1,1,[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[[[n,function2],[2]],1,1,[v,c]]]]]]).
lp2sm_test(54,[[[n,query_box_1],[[v,c]],":-",[[[n,function],[[[n,function2],[2]],1,1,[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,function],[[[n,function2],[2]],1,1,[v,c]]]]]]).lp2sm_test(55,[[[n,query_box_1],[[v,c]],":-",[[[n,test1],[[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,test1],[[v,c]]]]]]).
lp2sm_test(56,[[[n,query_box_1],[[v,d]],":-",[[[n,map],[[n,add],[1,2,3],0,[v,d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,map],[[n,add],[1,2,3],0,[v,d]]]]]]).
lp2sm_test(57,[[[n,query_box_1],[[v,d]],":-",[[[n,findall1],[[n,plusone],[1,2,3],[],[v,d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[n,plusone],[1,2,3],[],[v,d]]]]]]).
lp2sm_test(58,[[[n,query_box_1],[[v,d]],":-",[[[n,findall1],[[n,a_to_c],["a","b","a"],[],[v,d]]]]]],[[0,[n,query_box_1],[[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[n,a_to_c],["a","b","a"],[],[v,d]]]]]]).
lp2sm_test(59,[[[n,query_box_1],[[v,n]],":-",[[[n,count],[1,[v,n]]]]]],[[0,[n,query_box_1],[[v,n]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,count],[1,[v,n]]]]]]).
lp2sm_test(6,[[[n,query_box_1],[[v,n]],":-",[[[n,count],[0,[v,n]]]]]],[[0,[n,query_box_1],[[v,n]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,count],[0,[v,n]]]]]]).
lp2sm_test(60,[[[n,query_box_1],[],":-",[[[n,a]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,a],[]]]]]).
lp2sm_test(61,[[[n,query_box_1],[[v,l]],":-",[[[n,add],[[1,2,3],3,[],[v,l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add],[[1,2,3],3,[],[v,l]]]]]]).
lp2sm_test(62,[[[n,query_box_1],[[v,l]],":-",[[[n,add],[[1],[2,3],[v,l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add],[[1],[2,3],[v,l]]]]]]).
lp2sm_test(63,[[[n,query_box_1],[[v,b]],":-",[[[n,add],[1,[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add],[1,[v,b]]]]]]).
lp2sm_test(64,[[[n,query_box_1],[[v,b]],":-",[[[n,add0],[[1,2],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[[1,2],[v,b]]]]]]).
lp2sm_test(65,[[[n,query_box_1],[[v,b]],":-",[[[n,add0],[[1],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[[1],[v,b]]]]]]).lp2sm_test(66,[[[n,query_box_1],[],":-",[[[n,addorsubtract1],[2,1,1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,addorsubtract1],[2,1,1]]]]]).
lp2sm_test(67,[[[n,query_box_1],[],":-",[[[n,addorsubtract1],[2,1,1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,addorsubtract1],[2,1,1]]]]]).lp2sm_test(68,[[[n,query_box_1],[],":-",[[[n,addorsubtract1],[2,1,1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,addorsubtract1],[2,1,1]]]]]).
lp2sm_test(69,[[[n,query_box_1],[],":-",[[[n,add0],[2,1]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[2,1]]]]]).
lp2sm_test(7,[[[n,query_box_1],[[v,l]],":-",[[[n,reverse],[[1,2,3],[],[v,l]]]]]],[[0,[n,query_box_1],[[v,l]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,reverse],[[1,2,3],[],[v,l]]]]]]).
lp2sm_test(70,[[[n,query_box_1],[],":-",[[[n,add0],[1,2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[1,2]]]]]).
lp2sm_test(71,[[[n,query_box_1],[],":-",[[[n,add0],[1,2]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[1,2]]]]]).lp2sm_test(72,[[[n,query_box_1],[[v,b]],":-",[[[n,add0],[1,[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[1,[v,b]]]]]]).
lp2sm_test(73,[[[n,query_box_1],[[v,c]],":-",[[[n,add0],[1,1,[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[1,1,[v,c]]]]]]).lp2sm_test(74,[[[n,query_box_1],[[v,c]],":-",[[[n,add0],[[1,2],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[[1,2],[v,c]]]]]]).lp2sm_test(75,[[[n,query_box_1],[[v,c]],":-",[[[n,add0],[[],[v,c]]]]]],[[0,[n,query_box_1],[[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,add0],[[],[v,c]]]]]]).
lp2sm_test(76,[[[n,query_box_1],[[v,b]],":-",[[[n,implies2],[1,[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,implies2],[1,[v,b]]]]]]).
lp2sm_test(77,[[[n,query_box_1],[[v,b]],":-",[[[n,findall1],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[1,2,3],[v,b]]]]]]).lp2sm_test(78,[[[n,query_box_1],[[v,b]],":-",[[[n,maplist1],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,maplist1],[[1,2,3],[v,b]]]]]]).
lp2sm_test(79,[[[n,query_box_1],[[v,b]],":-",[[[n,equals41],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3],[v,b]]]]]]).lp2sm_test(80,[[[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[[n,equals41],[[v,a],[v,d],[v,c],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,d],[v,c],[v,b]]]]]]).lp2sm_test(81,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,equals41],[[v,a],[v,c],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,c],[v,b]]]]]]).
lp2sm_test(8,[[[n,query_box_1],[],":-",[[[n,grammar1],["apple"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["apple"]]]]]).
lp2sm_test(82,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[v,a],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).
lp2sm_test(83,[[[n,query_box_1],[],":-",[[[n,equals41]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[]]]]]).
lp2sm_test(84,[[[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[[n,equals41],[[v,a],[v,c],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,c]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,c],[v,b]]]]]]).lp2sm_test(85,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[v,a],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).lp2sm_test(86,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[v,a],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).
lp2sm_test(87,[[[n,query_box_1],[[v,a]],":-",[[[n,equals41],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).
lp2sm_test(88,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[v,a],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).lp2sm_test(89,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[v,a],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b]]]]]]).
lp2sm_test(9,[[[n,query_box_1],[],":-",[[[n,grammar1],["aaa"]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,grammar1],["aaa"]]]]]).
lp2sm_test(90,[[[n,query_box_1],[],":-",[[[n,equals41]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[]]]]]).lp2sm_test(91,[[[n,query_box_1],[],":-",[[[n,equals41],[[1,2,3]]]]]],[[0,[n,query_box_1],[],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[1,2,3]]]]]]).
lp2sm_test(92,[[[n,query_box_1],[[v,a],[v,b],[v,d]],":-",[[[n,equals41],[[v,a],[v,b],[v,d]]]]]],[[0,[n,query_box_1],[[v,a],[v,b],[v,d]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a],[v,b],[v,d]]]]]]).
lp2sm_test(93,[[[n,query_box_1],[[v,b]],":-",[[[n,maplist1],[[[1],[2],[3]],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,maplist1],[[[1],[2],[3]],[v,b]]]]]]).
lp2sm_test(94,[[[n,query_box_1],[[v,b]],":-",[[[n,maplist1],[[[[1]],[[2]],[[3]]],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,maplist1],[[[[1]],[[2]],[[3]]],[v,b]]]]]]).
lp2sm_test(95,[[[n,query_box_1],[[v,b]],":-",[[[n,findall1],[[1,2,3],[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,findall1],[[1,2,3],[v,b]]]]]]).
lp2sm_test(96,[[[n,query_box_1],[[v,b]],":-",[[[n,equals41],[1,[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[v,b]]]]]]).
lp2sm_test(97,[[[n,query_box_1],[[v,a]],":-",[[[n,equals41],[[v,a]]]]]],[[0,[n,query_box_1],[[v,a]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[v,a]]]]]]).
lp2sm_test(98,[[[n,query_box_1],[[v,a],[v,b]],":-",[[[n,equals41],[[[1,2],3,4],[v,a],[v,b]]]]]],[[0,[n,query_box_1],[[v,a],[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[[[1,2],3,4],[v,a],[v,b]]]]]]).lp2sm_test(99,[[[n,query_box_1],[[v,b]],":-",[[[n,equals41],[1,[v,b]]]]]],[[0,[n,query_box_1],[[v,b]],":-",[[0,[on_true,-2],[go_after,-],[on_false,-3],[go_to_predicates,-],[n,equals41],[1,[v,b]]]]]]).
lppm_get_registry(LPPM_registry_term1) :-catch(phrase_from_file_s(string(LPPM_registry_string), "lppm_registry.txt"),_,(writeln1("Error: Cannot find lppm_registry.txt"),abort)),term_to_atom(LPPM_registry_term1,LPPM_registry_string).
luciancicd_ws1 :-%trace,home_dir1(A),working_directory1(_,A),repositories_paths([RP]),output_path([OP]),foldr(string_concat,[RP],To_m_1),foldr(string_concat,[OP],R1), find_files(To_m_1,Tests1), %);Tests1=[]), find_files(R1,RTests), working_directory1(_,A), findall1([T1a,BA1],(member([T1,BA],RTests),remove_end_comments2(BA,BA1),string_concat(R1,T1a,T1)),R110), To=R1,term_to_atom(R110,R1101),term_to_atom(Tests1,Tests11),term_to_atom(RTests,RTests1),term_to_atom(R1,R11),term_to_atom(To_m_1,To_m_11),%term_to_atom(Repository_root_path,Repository_root_path1),%term_to_atom(Repository,Repository1),%term_to_atom(Gitl_data_path1,Gitl_data_path11),%term_to_atom(N,N1),%term_to_atom(R1,R1A),%term_to_atom(N_path,N_path1),term_to_atom(To,To1),%trace,foldr(string_concat,["#!/usr/bin/swipl -g main -q\n\n",":-include('../gitl/gitl.pl').\n","handle_error(_Err):-\n  halt(1).\n","main :-\n    catch((sd2(",R1101,",",Tests11,",",RTests1,",",R11,",",To_m_11,",_,_,_,_,_,_,",To1,",HTML),term_to_atom(HTML,HTML1), write(HTML1)),Err, handle_error(Err)), nl,\n    halt.\n","main :- halt(1).\n"],String),foldr(string_concat,[%"../private2/luciancicd-testing/",Repository1b,"/",Go_path5,"tmp.pl"],GP),%string_concat(Go_path,"testcicd.pl",GP),open_s(GP,write,S1),write(S1,String),close(S1),sleep(2),foldr(string_concat,["chmod +x ",GP,"\n","swipl -g main -q ./",GP],S3),%,((catch(bash_command(S3,HTML), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text4),%writeln1(Text4),fail%abort )),term_to_atom(HTML2,HTML))%sd2(R110,Tests1,RTests,R1,To_m_1,Repository_root_path,Repository,Gitl_data_path1,N,R1,N_path,To,HTML) ->HTML1=HTML2; HTML1="Identical"),delete_tmp, working_directory1(_,A), time1(Time), %diff_html_n(Diff_html_n),working_directory1(A1,A1),%repositories_paths([RP]),working_directory1(_,RP),(exists_directory_s("../lc_logs/")->true;make_directory_s("../lc_logs/")), foldr(string_concat,["../lc_logs/diff_html",Time,%"-",Diff_html_n,".html"],File1),%Diff_html_n1 is Diff_html_n+1,%retractall(diff_html_n(_)),%assertz(diff_html_n(Diff_html_n1)),string_concat("<b>Diff output</b><br>These are the changes.<br><br>"%Key</b><br><table bgcolor=\"green\"><tr><td>Insertion</td></tr></table><br><table bgcolor=\"red\"><tr><td>Deletion</td></tr></table><br>",HTML1,HTML3), save_file_s(File1,HTML3),  working_directory1(_,A1), !.
lyrics1(Form1,Character,Lyrics1,Lyrics2) :-Form1=[Form2|Forms2],lyrics2(Form2,Character,Lyrics1,Lyrics3),lyrics2([instrumental,_],_Character,Lyrics1,Lyrics2) :-append_list(Lyrics1,[[],[],[],[]],Lyrics2).
lyrics2(Form1,Lyrics1,Lyrics2,Names1,Names2,Maxlength1,Maxlength2) :-Form1=[Form2|Forms3],findsentence(Sentence1,Names1,Names3),length(Sentence1,Length1),findsentence(Sentence2,Names3,Names4),length(Sentence2,Length2),findrhyme(Sentence1,Sentence3,Names4,Names5),length(Sentence3,Length3),findrhyme(Sentence2,Sentence4,Names5,Names6),length(Sentence4,Length4),append(Lyrics1,[[Form2,Sentence1,Sentence2,Sentence3,Sentence4]],Lyrics3),max([Length1,Length2,Length3,Length4],Maxlength1,Maxlength3),lyrics2(Forms3,Lyrics3,Lyrics2,Names6,Names2,Maxlength3,Maxlength2),!.
lyrics2([verse,_],Character,Lyrics1,Lyrics2) :-lyricsv1(Lyrics1,[Character],Lyrics3),append_list(Lyrics1,[Lyrics3,*],Lyrics2),.
lyrics2_m2m(Lyrics1,Maxlength1,Maxlength2) :-%Form1=[Form2|Forms3],Lyrics1=[[_Form2,Sentence1,Sentence2,Sentence3,Sentence4]|Lyrics3],%findsentence(Sentence1,Names1,Names3),length(Sentence1,Length1),%findsentence(Sentence2,Names3,Names4),length(Sentence2,Length2),%findrhyme(Sentence1,Sentence3,Names4,Names5),length(Sentence3,Length3),%findrhyme(Sentence2,Sentence4,Names5,Names6),length(Sentence4,Length4),%append(Lyrics1,[[Form2,Sentence1,Sentence2,Sentence3,Sentence4]],Lyrics3),max([Length1,Length2,Length3,Length4],Maxlength1,Maxlength3),lyrics2_m2m(Lyrics3,Maxlength3,Maxlength2),!.
magnitude(X1,Y1,X2,Y2,M) :- M is sqrt((X2-X1)^2+(Y2-Y1)^2).
main :-cat_alg_files(6000),    nl,    halt.
main :-cat_arg_files(6000),    nl,    halt.
main :-texttobr2(u,u,"square",u),    nl,    halt.
main :-date_time_stamp(date(2023,1,1,1,0,0,_,_,_),TS0),date_time_stamp(date(2023,1,2,1,0,0,_,_,_),TS01),TSD is TS01-TS0,get_time(TS1),In_a_day is TS1+TSD,Hours=[9,12,15],get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),findall(TSA0,(member(H,Hours),date_time_stamp(date(Year,Month,Day,H,0,0,_,_,_),TSA0)),TSAA),day_loop(0,In_a_day,TSAA), nl,    halt.
main :-    (bag_algs(6000,Br)->true;Br=0),    write(Br), nl,    halt.
main :-    (bag_args(6000,Br)->true;Br=0),    write(Br),    nl,    halt.
main :-    catch(call_with_time_limit(1,((c(A),not((var(A))),A=3))), Err, handle_error(Err)), nl,    halt.
main :- %time(lc_test(A,B)).time((lc_test1(8,A),sleep(1),lc_test1(9,B))),!.
main :- halt(1).
main :- halt(1).day_loop(NB,In_a_day,TSA) :-get_time(TS1),(TS1>In_a_day->true;(foldr(string_concat,["./day.sh"],S3)%,,catch(bash_command(S3,_), _, (foldr(string_concat,["Warning."%%"Error: Can't clone ",User3,"/",Repository3," repository on GitHub."],_Text4),%writeln1(Text4),true%fail%abort )),%get_time(TS1),NB1 is NB+6000,findall(TS2,(member(TS2,TSA),TS1>TS2,%foldr(atom_concat,['echo "" | mutt -s "Alarm ',NB1,' Breasonings" luciangreen@lucianacademy.com',''],A1),%shell1(A1) foldr(string_concat,["afplay /System/Library/Sounds/Funk.aiff\nsay \" Alarm "%done"%"echo " ,%""% NB1, "\" Breasonings"],S1), shell1_s(S1) ),TS3),subtract(TSA,TS3),%atom_concat('echo "" | mutt -s "BAG Day Test" luciangreen@lucianacademy.com','',A1),%shell1(A1) day_loop(NB1,In_a_day,TS3)  )),!.
main :- halt(1).handle_error(_Err):-  halt(1).
main :- halt(1).handle_error(_Err):-  halt(1).attention_needed_bell :-catch((bell("Attention needed")->true;true),_,true),!.
main :- halt(1).main2 :-/*date_time_stamp(date(2023,1,1,1,0,0,_,_,_),TS0),date_time_stamp(date(2023,1,2,1,0,0,_,_,_),TS01),TSD is TS01-TS0,get_time(TS1),In_a_day is TS1+TSD,Hours=[9,12,15],get_time(TS),stamp_date_time(TS,date(Year,Month,Day,Hour1,Minute1,Seconda,_A,_TZ,_False),local),findall(TSA0,(member(H,Hours),date_time_stamp(date(Year,Month,Day,H,0,0,_,_,_),TSA0)),TSAA),*/open_file_s("../Lucian-Academy/Books1/algs/lgalgs_a.txt",[_,_,_,FS1]),not(FS1=""),open_file_s("../Lucian-Academy/Books1/args/lgtext_a.txt",[_,_,_,FS2]),not(FS2=""),(exists_file('aa_log.txt')->(get_time(TS1), stamp_date_time(TS1,date(Year,Month,Day,Hour1,Minute1,_Seconda,_A,_TZ,_False),local), foldr(string_concat,["aa_log-",Year,"-",Month,"-",Day,"-",Hour1,"-",Minute1,".txt"],Name),  mv("aa_log.txt",Name),  open_s("aa_log.txt",write,SB), write(SB,'[]'),close(SB) );true),texttobr2(25,u,"square",u),BL is %1000,%4*16000,%5*16000*8*5,day_loop(BL,0,0%,In_a_day,TSAA),flush_caches,A is (25-1)*(1 % teleport 1   + 1 % anti-ageing medicine 1   + 1 % teleport 2   + 1 % anti-ageing medicine 2   + 2 % meditation   + 2),% a thoughttexttobr2_1(A),%bell("Freezing Ages Complete"), nl,    halt.
main :- open_string_file_s("../Text-to-Breasonings/file.txt",A),find_sent(A,A1),findall([Mark,B],(member(B,A1),((B="\n"->true;B=".")->Mark="";random_member(Mark,[""," *: "]))),List),flatten(List,List1),foldr(string_concat,List1,S),save_file_s("../Text-to-Breasonings/file-rpr-out.txt",S),!.
main :- open_string_file_s("../Text-to-Breasonings/file.txt",A),split_string(A,".\n\r",".\n\r",B),delete(B,"",A1),findall(C,(member(C,A1),string_chars(C,D),not(forall(member(E,D),char_type(E,white)))),F),findall(_,(member(G,F),cgpt_combophil(["SALES","FINANCE","ECONOMICS","BOTS"],30,G)),_),!.
main :- open_string_file_s("../Text-to-Breasonings/file0.txt",A),open_string_file_s("../Text-to-Breasonings/file01.txt",A0),find_sent(A,A1),find_sent(A0,A01),subtract(A1,A01,B1),length(B1,B1L),subtract(A01,A1,B2),length(B2,B2L),%findall([X,"\n"],member(X,B1),B1X),%findall([X,"\n"],member(X,B2),B2X),flatten([B1L,"sentences deleted from file0.txt",B2L,"sentences added to file01.txt","*****","Deleted from file0.txt:",B1,"*****","Added to file01.txt:",B2],List),findall(_,(member(L,List),term_to_atom(L,L1),writeln(L1)),_),%writeln(Atom),!.
main:-N is 108*2,texttobr2_1(N).
main:-catch((N is 1,texttobr2_1(N)),Err,handle_error(Err)),halt.
main:-catch((meditators(A),meditators2(B),length(A,AL),length(B,BL),CL is AL+BL,N1 is 108*2,texttobr2_1(N1),texttobr2_1(CL)),Err,handle_error(Err)),halt.
main:-catch((meditators(A),meditators2(B),length(A,AL),length(B,BL),CL is AL+BL,N1 is 15*4*(16000/250),time(texttobr2_1(N1)),time(texttobr2_1(CL))),Err,handle_error(Err)),halt.
main:-catch((meditators(A),meditators2(B),length(A,AL),length(B,BL),CL is AL+BL,N1 is 2*(16000/250),time(texttobr2_1(N1)),time(texttobr2_1(CL))),Err,handle_error(Err)),halt.
main:-catch((shell1_s("swipl --goal=main --stand_alone=true -o cat_arg_files -c cat_arg_files1.pl"),shell1_s("./cat_arg_files")),Err,handle_error(Err)),halt.handle_error(_Err):-  halt(1).
main:-catch((texttobr2_1(1),texttobr2(4,u,"square",u)),Err,handle_error(Err)),halt.handle_error(_Err):-  halt(1).
main:-catch(cat_alg_files(6000),Err,handle_error(Err)),halt.
main:-catch(cat_arg_files(6000),Err,handle_error(Err)),halt.
main:-catch(get_y,Err,handle_error(Err)),halt.
main:-catch(going_to_5689,Err,handle_error(Err)),halt.
main:-catch(meditation,Err,handle_error(Err)),halt.
main:-catch(prompt_meditation,Err,handle_error(Err)),halt.
main:-catch(prompt_question,Err,handle_error(Err)),halt.
main:-current_prolog_flag(argv, [First | _Rest]),atom_number(First,First1),%First2 is First1,writeln(First2).%cgpt_combophil(["Fundamentals of Pedagogy and Pedagogy Indicators","Delegate workloads, Lecturer, Recordings","Fundamentals of Meditation and Meditation Indicators","Lecturer","Creating and Helping Pedagogues","PEDAGOGY"],First1).
main_t2b4:-catch(texttobr2(u,"file.txt",u,u,[auto,on]),Err,handle_error(Err)),halt.
make_connection("artist","diagram","drew").
make_connection("artist","diagram","heated",(-)).
make_connection("artist","diagram","modified").
make_connection("artist","diagram","wrote",(-)).
make_connection("computer scientist","algorithm","debugged").
make_connection("computer scientist","algorithm","deleted").
make_connection("computer scientist","algorithm","ignored",(-)).
make_connection("computer scientist","algorithm","loaded").
make_connection("computer scientist","algorithm","saved").
make_connection("computer scientist","algorithm","smelled",(-)).
make_connection("computer scientist","algorithm","tasted",(-)).
make_connection("computer scientist","algorithm","touched",(-)).
make_connection("computer scientist","algorithm","was blinded by the",(-)).
make_connection("computer scientist","algorithm","wrote").
make_connection("philosopher","connection","made").
make_connection("philosopher","connection","wore",(-)).
make_connection("screen","image","displayed").
make_connection("screen","image","produced a smell from",(-)).
make_directory_recursive_s(LCTD,PZ5,%PZ4,PZ) :- PZ=[PZ6|PZ7], foldr(string_concat,[LCTD,"/",PZ5,PZ6%,"/" ],K212), (exists_directory_s(K212)->true;make_directory_s(K212)), foldr(string_concat,[PZ5,"/",PZ6,"/" ],PZ8), make_directory_recursive_s(LCTD,PZ8,%PZ4,PZ7),!.
make_exercise0(Connectives,Sentences,%Sentences1,Number_of_questions,Exercises1,Exercises2) :-make_exercise1(Connectives,Sentences,%Sentences1,Sentences0,%Sentences01,Exercise),append(Exercises1,[Exercise],Exercises3),Number_of_questions2 is Number_of_questions-1,make_exercise0(Connectives,Sentences0,%Sentences01,Number_of_questions2,Exercises3,Exercises2).
make_formula_term1(F2,F3,F4) :-F2=["("|F6],make_formula_term1(F6,F61,[],F41),append(F3,F41,F4),make_formula_term1(F61,F61,[],F41),!.
make_formula_term1(F2,F3,F4) :-F2=["("|F6],make_formula_term1(F6,F61,[],F41),append(F3,F41,F4),make_formula_term1(F61,F61,[],F41),!.make_formula_term1(F2,F3,F4) :-F2=[")"|F6],make_formula_term1(F6,F61,F3,F4),!.
make_formula_term1(F2,F3,F4) :-F2=[")"|F6],make_formula_term1(F6,F61,F3,F4),!.
makecode(FunctionName,Header1,TypeStatements1,TypeStatements2,Header2,Header3,Code) :-append([[v,head]],[Header1],List1),append([[v,head1]],[Header2],List2),append([[v,item1]],[Header3],List3),Code=[[FunctionName,[[v,input1],[v,inputs2],[v,inputs3],[v,output]],":-",[[[n,head],[[v,input1],[v,head]]],[[n,tail],[[v,input1],[v,tail]]],[[n,equals1],List1],TypeStatements1,%[[n,member2],[[v,inputs2],[v,inputs21]]], %% brackets here in new lpi[[n,head],[[v,inputs2],[v,head1]]],[[n,tail],[[v,inputs2],[v,tail1]]],[[n,equals1],List2],TypeStatements2,[[n,equals2],List3],[[n,wrap],[[v,item1],[v,item1a]]],[[n,append],[[v,inputs3],[v,item1a],[v,item2]]], %% brackets here in new lpi[FunctionName,[[v,tail],[v,tail1],[v,item2],[v,output]]]]]].makebasecase2(FunctionName,Code) :-        Code=[[FunctionName,[[],[v,inputs2],[v,extras],[v,extras],[v,output],[v,output]]]].
makecode(FunctionName,Header1,TypeStatements1,TypeStatements2,Header2,Header3,Header4,Code) :-append([[v,head]],[Header1],List1),append([[v,head1]],[Header2],List2),append([[v,item1]],[Header3],List3),append([[v,item3]],[Header4],List4),        Code=[                [FunctionName,[[v,input1],[v,inputs2],[v,extras1],[v,extras2],[v,inputs3],[v,output]],":-",                [                        [[n,head],[[v,input1],[v,head]]],                        [[n,tail],[[v,input1],[v,tail]]],                        [[n,equals1],List1],TypeStatements1,                        %[[n,member2],[[v,inputs2],[v,inputs21]]], %% brackets here in new lpi                        [[n,head],[[v,inputs2],[v,head1]]],                        [[n,tail],[[v,inputs2],[v,tail1]]],                        [[n,equals1],List2],TypeStatements2,                        [[n,equals2],List3],TypeStatements2,                        [[n,wrap],[[v,item1],[v,item1a]]],                        [[n,append],[[v,inputs3],[v,item1a],[v,item2]]], %% brackets here in new lpi[[n,equals2],List4],[[n,append],[[v,extras1],[v,item3],[v,extras2]]],                        [FunctionName,[[v,tail],[v,tail1],[v,item2],[v,output]]]                ]            ]        ].findprogram2(Relations,FunctionNumber,ArgumentNumber1,Vars1,Vars2,Header1,Header2,Body1,Body2) :-ArgumentNumber2 is ArgumentNumber1 + 1,findprogram2(Relations,FunctionNumber,ArgumentNumber2,Vars1,Vars2,Header1,Header2,Body1,Body2)./**processcode( deleteduplicatecode(optimisecode(**/var(Item,Var,Vars,Vars) :-member([Item,Var],Vars).var(Item1,Var1A,Vars1,Vars2) :-length(Vars1,Vars1Length1),Vars1Length2 is Vars1Length1-1,length(Vars3,Vars1Length2),append(Vars3,[[_Item2,[v,Var2]]],Vars1),char_code(Var2,Var2Code1),Var2Code2 is Var2Code1 + 1,Var2Code2 =< 122,char_code(Var1,Var2Code2),Var1A=[v,Var1],append(Vars1,[[Item1,[v,Var1]]],Vars2)./**fp2-() 2v in is2,o- convert to var a,b,c, etc.
makenames(Num1,N1,N2) :-random_member(R1,["Ack","Luc","Add","All","Brae","Skye","Whist","Dix","Wilb","Duk","Le","Ven","Syd","Don","Count","Black","Nei"]),random_member(R2,["an","ae","ye","ler","ee","ur","ard","ice","ney","ald","ess","el"]),append([R1],[R2],R3),append(N1,[R3],N3),Num2 is Num1-1,makenames(Num2,N3,N2).
makerandomlist(List,A,C1,C) :- not((=(A,0))),trialy2A(List,N1),%%random(R),multiply(R,L,R1),ceiling(R1,N1),wrap(N1,N2),append(C1,N2,Nb3),subtract(A,1,D),makerandomlist(List,D,Nb3,C).
makerandomlist(_,0,A,A).
male([doll,false],[feed,false]).
map(F,L,M1,N) :- not((=(L,[]))),head(L,H),tail(L,T),functor(A,F,3),arg(1,A,M1),arg(2,A,H),arg(3,A,M2),A,map(F,T,M2,N).
map(_F,[],L,L).
map(_F,[],L,L).map(F,L,M1,N) :- not((=(L,[]))),head(L,H),tail(L,T),functor(A,F,3),arg(1,A,M1),arg(2,A,H),arg(3,A,M2),A,map(F,T,M2,N).
master(Levels1,Level,Levels2) :- length(Levels1,Length), numbers(Length,1,[],Ns), findall(Level,member(_,Ns),Levels2).
match4(Variable1,Variable2,Vars1,Vars2%%,Top_flag) :-split_into_head_and_tail(Variable1,Head1a,Tail1a,Pipe1,Head_is_list_of_lists1),(single_item(Head1a) -> L1 = 1 ; length(Head1a,L1)),split_into_head_and_tail(Variable2,Head2a,Tail2a,Pipe2,Head_is_list_of_lists2),(single_item(Head2a) -> L2 = 1 ; length(Head2a,L2)),(%%trace,(Head_is_list_of_lists1=true->true;Head_is_list_of_lists2=true)->(%%writeln(here1),Head1=Head1a,Tail1=Tail1a,Head2=Head2a,Tail2=Tail2a,%%notrace,%%trace,match4_list(Head1,Head2,Vars1,Vars3),match4(Tail1,Tail2,Vars3,Vars2)%%[Value3]=Value5,Value4=[Value6|Value6a],%%maplist(append,[[Value5,Value6,Value6a]],Value2)%%,notrace);((Pipe1=true,Pipe2=false)->(split_by_number_of_items(Variable2,L1,Head2,Tail2),Head1=Head1a,Tail1=Tail1a);((Pipe1=false,Pipe2=true)->(split_by_number_of_items(Variable1,L2,Head1,Tail1),Head2=Head2a,Tail2=Tail2a);(Pipe1=false,Pipe2=false,L1=L2,Head1=Head1a,Tail1=Tail1a),Head2=Head2a,Tail2=Tail2a)), % *1%%trace,%%writeln(here2),match4_list(Head1,Head2,Vars1,Vars3),match4(Tail1,Tail2,Vars3,Vars2)%%,notrace%%(Top_flag=true->(trace,[Value3]=Value5);Value3=Value5),(Value4=[]->(Value6=[],Val6a=[]);[Value6|Val6a]=Value4),%%maplist(append,[[Value1,Value5]],[Value2a]),%%(Top_flag=true->(append(Value2a,Value6,Value61),%%append(Value61,Val6a,Value2));maplist(append,[[Value2a,Value6,Val6a]],[Value2]))%%,%%append(Value2a,Value4,Value2))%%,notrace,!.
match4(Variable1,Variable2,Vars1,Vars2) :-variable_name(Variable1),getvalue(Variable1,Value1,Vars1),not(variable_name(Variable2)),is_list(Variable2),%%findall(Value2,(member(A,Variable2),getvalue(A,Value2,Vars1)),X),getvalue_match(Variable2,X,Vars1),val1emptyorvalsequal(Value1,X),putvalue(Variable1,X,Vars1,Vars2),length(Variable2,L),length(X,L).
match4_2(Variable1,Variable2,Vars1,Vars2) :-match4(Variable1,Variable2,Vars1,Vars2),!.
match4_list(Head1,Head2,Vars1,Vars2) :-not(variable_name(Head1)),not(Head1="|"),variable_name(Head2),getvalue(Head2,Value2,Vars1),not(Value2=empty),match4(Head1,Value2,Vars1,Vars2).
match4_list(Head1,Head2,Vars1,Vars2) :-variable_name(Head1),variable_name(Head2),getvalue(Head1,Value1,Vars1),not(Value1=empty),getvalue(Head2,Value2,Vars1),not(Value2=empty),match4(Value1,Value2,Vars1,Vars2).
match4_list(Head1,Head2,Vars1,Vars2) :-%%trace,%%single_item(Head1),%%single_item(Head2),match4_terminal(Head1,Head2,Vars1,Vars2).%%,%%append(Value1,[Value3],Value2).
match4_terminal(Variable1,Variable2,Vars1,Vars2) :-%%is_list(Variable1),length(Variable1,1),%%is_list(Variable2),length(Variable2,1),%%trace,[Variable1a]=Variable1,[Variable2a]=Variable2,single_item(Variable1a),single_item(Variable2a),%%notrace,match4_terminal(Variable1a,Variable2a,Vars1,Vars2).%%,%%append(Value1,[[Value3]],Value2).
match_char("{","}").match_char(A,A).
max(A,D) :- A=[B|C], max1(B,C,D).
max(List1,Max1,Max2) :-List1=[Item|List2],Item<Max1,max(List2,Max1,Max2),!.
max(List1,Max1,Max2) :-List1=[Item|List2],Item>=Max1,max(List2,Item,Max2),!.
max([A],A).
max1(A,[],A).max1(B,C,D) :- C=[E|F], (B>=E->max1(B,F,D);max1(E,F,D)).
maximum(L,M1,N,R1,R2) :- not((=(L,[]))),head(L,H),tail(L,T),(>=(M1,H)->(=(M2,M1),wrap(H,H2),append(R1,H2,R3));(=(M2,H),wrap(M1,M12),append(R1,M12,R3))),maximum(T,M2,N,R3,R2).
maximum([],L,L,R,R).
maximum1(List1,Item1,List2) :-List1=[Item2|List3],maximum2(Item2,List3,Item1,[],List2).
maximum2(Item,[],Item,List,List) :- !.
maximum2(Item1,List1,Item2,List2a,List2) :-List1=[Item3|List3],(Item1<Item3->(append(List2a,[Item3],List5),maximum2(Item1,List3,Item2,List5,List2));(append(List2a,[Item1],List5),maximum2(Item3,List3,Item2,List5,List2))).
maze( [ [0,0,0,[*]],[0,1,0,[*]],[0,2,0,[*]],[0,3,0,[*]],[0,4,0,[*]], [0,0,1,[*]],[0,1,1,[*]],[0,2,1,[*]],[0,3,1,[*]],[0,4,1,[*]], [0,0,2,[*]],[0,1,2,[*]],[0,2,2,[*]],[0,3,2,[*]],[0,4,2,[*]], [1,0,0,[*]],[1,1,0,[*]],[1,2,0,[*]],[1,3,0,[*]],[1,4,0,[*]], [1,0,1,[*]],[1,1,1,["t"]],[1,2,1,["f"]],            [1,4,1,[*]], [1,0,2,[*]],[1,1,2,[*]],[1,2,2,[*]],[1,3,2,[*]],[1,4,2,[*]],  [2,0,0,[*]],[2,1,0,[*]],[2,2,0,[*]],[2,3,0,[*]],[2,4,0,[*]], [2,0,1,[*]],[2,1,1,[*]],[2,2,1,[*]],[2,3,1,[*]],[2,4,1,[*]], [2,0,2,[*]],[2,1,2,[*]],[2,2,2,[*]],[2,3,2,[*]],[2,4,2,[*]] ]).%% 1,1,1 start/**[debug]  ?- make_maze,traverse(1,1,1).
meaning("plus",["summed with","added to"]).
meaning(banana,fruit).
meaning(fruit).
meaning(medication).
medicine("Circulatory system / Cardiovascular system").
medicine("Digestive system and Excretory system").
medicine("Endocrine system").
medicine("Immune system and lymphatic system:").
medicine("Integumentary system / Exocrine system").
medicine("Muscular system").
medicine("Nervous system").
medicine("Other medicines for the body").
medicine("Renal system and Urinary system").
medicine("Reproductive system").
medicine("Respiratory system").
medicine("Skeletal System").
medicine("antidepressant").
medicine("antipsychotic").
medicine("memory").
medicine("muscle relaxation").
medicine("seeing clearly").
medicine("stopping dementia").
medicine("thinking").
medicine(different).
medicine1("B to B").
medicine1("B").
medicine2("Anti-ageing medicine").
medicine2("Body replacement").
medicine2("Immortality").
meditation(same).
meditation_chain_letter1(S,S1,N,X1,L1,L2) :-(forall(member(S0,S1),S0=(*))->L1=L2;(numbers(N,1,[],Ns),X11 is X1+2,findall(X2,(member(_,Ns),random(1,X11,X2)%random(X),X2 is ceiling((X1+0)*X)+1),S2),numbers(S,1,[],Ss),findall(S5,(member(S3,Ss),get_item_n(S1,S3,S4),(member(S3,%S4,S2)->S5=(*);S5=S4)),S6),findall(_,member((*),S6),S7),length(S7,X3),L3 is L1+1,meditation_chain_letter1(S,S6,N,X3,L3,L2))),!.
meditators([[first,surname,dob_d,dob_m,dob_y,day_of_learning_d,day_of_learning_m,day_of_learning_y]]).
melodyharmony(Form1,CPT,Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-Form1=[Form2|Forms3],findmelody(Form2,CPT,Parts,N1,N3,Melody1,Melody3,Harmony1,Harmony3),(CPT=1451->harmony1451(N3,3,N4);harmonyr(N3,5,N4)),findmelody(Form2,CPT,Parts,N4,N5,Melody3,Melody4,Harmony3,Harmony4),melodyharmony(Forms3,CPT,Parts,N5,N2,Melody4,Melody2,Harmony4,Harmony2).
melodyharmony(Form1,CPT,Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-Form1=[Form2|Forms3],findmelody(Form2,CPT,Parts,N1,N3,Melody1,Melody3,Harmony1,Harmony3),(CPT=1451->harmony1451(N3,3,N4);harmonyr(N3,5,N4)),findmelody(Form2,CPT,Parts,N4,N5,Melody3,Melody4,Harmony3,Harmony4),reverse(Melody3,Melody3R),Melody3R=[[_,Melody3RI]|_], %% relies on repeat *1reverse(Melody4,Melody4R),Melody4R=[[_,Melody4RI]|_],not((length(Melody3RI,1),length(Melody4RI,1))),melodyharmony(Forms3,CPT,Parts,N5,N2,Melody4,Melody2,Harmony4,Harmony2).
melodyharmony(Form1,CPT,Parts,N1,N2,Melody1,Melody2,Harmony1,Harmony2) :-Form1=[Form2|Forms3],findmelody(Form2,CPT,Parts,N1,N3,Melody1,Melody3,Harmony1,Harmony3),(CPT='1451'->harmony1451(N3,3,N4);harmonyr(N3,5,N4)),findmelody(Form2,CPT,Parts,N4,N5,Melody3,Melody4,Harmony3,Harmony4),%%reverse(Melody3,Melody3R),Melody3R=[[_,Melody3RI]|_], %% relies on repeat *1%%reverse(Melody4,Melody4R),Melody4R=[[_,Melody4RI]|_],%%not((length(Melody3RI,1),length(Melody4RI,1))),melodyharmony(Forms3,CPT,Parts,N5,N2,Melody4,Melody2,Harmony4,Harmony2).
member([dog,good]).
member([dog,happy]).
member([person,good]).
member([person,happy]).
member([person,updated]).
member([phone,good]).
member([phone,updated]).
member1(A,[_|B2]):-member1(A,B2).
member1(Query,Functions,Functions2,Vars8) :-%%writeln([m1]),cut(off)->(        (Query=[Function,Arguments1],(Functions2=[[Function,Arguments2,":-",Body]|_Functions3]),length(Arguments1,Length),length(Arguments2,Length),                ((Function=[n,grammar]->true;Function=[n,grammar_part])->checkarguments1(Arguments1,Arguments2,[],Vars1,[],FirstArgs);checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!),        %%->ca2 %%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),                (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),interpretbody(Functions,Functions2,Vars1,Vars2,Body,true),updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),%%writeln(["FirstArgs",FirstArgs,"Vars",Vars2,"Result",Result,"Vars7",Vars7,"Vars72",Vars72,"Var71",Var71,"Vars8",Vars8]),%%writeln(["Vars8",Vars8]),findresult3(Arguments1,Vars8,[],Result2)%%writeln([findresult3,"Arguments1",Arguments1,"Vars8",Vars8,"Result2",Result2]));(%%writeln(here1),Vars8=[],Result2=[])),%%writeln(["Arguments1",Arguments1,"Vars2",Vars2,"Result",Result]),(debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,":-",_Body]|Functions3], %% make like previous trunk?member11(Query,Functions,Functions2,Vars8)));(turncut(off)%%,Result=[]).
member1(Query,Functions,Functions2,Vars8) :-%%writeln([m1]),cut(off)->(        (Query=[Function,Arguments1],(Functions2=[[Function,Arguments2,(:-),Body]|_Functions3]),length(Arguments1,Length),length(Arguments2,Length),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!, %%->ca2 %%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),                (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),interpretbody(Functions,Functions2,Vars1,Vars2,Body,true),updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),%%writeln(["FirstArgs",FirstArgs,"Vars",Vars2,"Result",Result,"Vars7",Vars7,"Vars72",Vars72,"Var71",Var71,"Vars8",Vars8]),%%writeln(["Vars8",Vars8]),findresult3(Arguments1,Vars8,[],Result2)%%writeln([findresult3,"Arguments1",Arguments1,"Vars8",Vars8,"Result2",Result2]));(%%writeln(here1),Vars8=[],Result2=[])),%%writeln(["Arguments1",Arguments1,"Vars2",Vars2,"Result",Result]),(debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,(:-),_Body]|Functions3], %% make like previous trunk?member11(Query,Functions,Functions2,Vars8)));(turncut(off)%%,Result=[]).
member1(Query,Functions,Functions2,Vars8) :-%%writeln1([m1]),(cut(off)->(        (Query=[Function,Arguments1],(Functions2=[[Function,Arguments2,":-",Body]|_Functions3]),length(Arguments1,Length),length(Arguments2,Length),debug_call(Skip,[Function,Arguments1]),((checktypes_inputs(Function,Arguments1),                %%writeln1(checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs)),        %trace,        %(Function=[n,query_box_1]->true;trace),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),        %notrace,        %%->ca2 %writeln1([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),interpretbody(Functions,Functions2,Vars1,Vars2,Body,true),updatevars(FirstArgs,Vars2,[],Result),%writeln1(updatevars(FirstArgs,Vars2,[],Result)),%trace,unique1(Result,[],Vars8)%writeln1(unique1(Result,[],Vars8))%,notrace)->debug_fail_fail(Skip);debug_fail(Skip,[Function,Arguments1])),findresult3(Arguments1,Vars8,[],Result2),debug_exit(Skip,[Function,Result2]),%trace,%%writeln1(updatevars(FirstArgs,Vars2,[],Result)),%trace,%notrace,        %%reverse(Result,[],Vars7),((true->%not(Result=[])->        %%Result=[Var71|Vars72],        %%writeln1(unique1(Result,[],Vars8)),        (true%%writeln1(["FirstArgs",FirstArgs,"Vars",Vars2,"Result",Result,"Vars7",Vars7,"Vars72",Vars72,"Var71",Var71,"Vars8",Vars8]),%%writeln1(["Vars8",Vars8]),%%writeln1(findresult3(Arguments1,Vars8,[],Result2)),%trace,%writeln1([findresult3,"Arguments1",Arguments1,"Vars8",Vars8,"Result2",Result2]));(%%writeln1(here1),Vars8=[],Result2=[]))),%%writeln1(["Arguments1",Arguments1,"Vars2",Vars2,"Result",Result]),%trace,        checktypes(Function,Result2));(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,":-",_Body]|Functions3], %% make like previous trunk?member11(Query,Functions,Functions2,Vars8)));(turncut(off),fail%%,Result=[])).
member1(Query,Functions,Functions2,Vars8) :-%%writeln1([m1]),cut(off)->(        (Query=[Function,Arguments1],(Functions2=[[Function,Arguments2,":-",Body]|_Functions3]),length(Arguments1,Length),length(Arguments2,Length),checktypes_inputs(Function,Arguments1),                %%writeln1(checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs)),        %trace,        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),        %%->ca2 %%writeln1([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),debug_call(Skip,[Function,Arguments1]),(interpretbody(Functions,Functions2,Vars1,Vars2,Body,true)->debug_fail_fail(Skip);debug_fail(Skip,[Function,Arguments1])),%%writeln1(updatevars(FirstArgs,Vars2,[],Result)),updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),((not(Result=[])->        %%Result=[Var71|Vars72],        %%writeln1(unique1(Result,[],Vars8)),        unique1(Result,[],Vars8),%%writeln1(["FirstArgs",FirstArgs,"Vars",Vars2,"Result",Result,"Vars7",Vars7,"Vars72",Vars72,"Var71",Var71,"Vars8",Vars8]),%%writeln1(["Vars8",Vars8]),%%writeln1(findresult3(Arguments1,Vars8,[],Result2)),findresult3(Arguments1,Vars8,[],Result2)%%writeln1([findresult3,"Arguments1",Arguments1,"Vars8",Vars8,"Result2",Result2]));(%%writeln1(here1),Vars8=[],Result2=[])),%%writeln1(["Arguments1",Arguments1,"Vars2",Vars2,"Result",Result]),debug_exit(Skip,[Function,Result2]),        checktypes(Function,Result2));(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,":-",_Body]|Functions3], %% make like previous trunk?member11(Query,Functions,Functions2,Vars8)));(turncut(off),fail%%,Result=[]).
member1(_,[]) :- false.
member1(_,_,[],_) :- fail.
member1(_,_,[],_) :- fail,!.
member1(_,_,[],_) :- fail,!.member1(Query,Functions,Functions2,Vars8) :-%%writeln([m1]),cut(off)->(        (Query=[Function,Arguments1],(Functions2=[[Function,Arguments2,":-",Body]|_Functions3]),length(Arguments1,Length),length(Arguments2,Length),                ((Function=[n,grammar]->true;Function=[n,grammar_part])->checkarguments1(Arguments1,Arguments2,[],Vars1,[],FirstArgs);checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!),        %%->ca2 %%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),                (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),interpretbody(Functions,Functions2,Vars1,Vars2,Body,true),updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),%%writeln(["FirstArgs",FirstArgs,"Vars",Vars2,"Result",Result,"Vars7",Vars7,"Vars72",Vars72,"Var71",Var71,"Vars8",Vars8]),%%writeln(["Vars8",Vars8]),findresult3(Arguments1,Vars8,[],Result2)%%writeln([findresult3,"Arguments1",Arguments1,"Vars8",Vars8,"Result2",Result2]));(%%writeln(here1),Vars8=[],Result2=[])),%%writeln(["Arguments1",Arguments1,"Vars2",Vars2,"Result",Result]),(debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,":-",_Body]|Functions3], %% make like previous trunk?member11(Query,Functions,Functions2,Vars8)));(turncut(off)%%,Result=[]).
member1(_,_,[],_) :- fail.member1(Query,Functions,Functions2,Vars8) :-%%writeln([m1]),cut(off)->(        (Query=[Function,Arguments1],(Functions2=[[Function,Arguments2,(:-),Body]|_Functions3]),length(Arguments1,Length),length(Arguments2,Length),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!, %%->ca2 %%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),                (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),interpretbody(Functions,Functions2,Vars1,Vars2,Body,true),updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),%%writeln(["FirstArgs",FirstArgs,"Vars",Vars2,"Result",Result,"Vars7",Vars7,"Vars72",Vars72,"Var71",Var71,"Vars8",Vars8]),%%writeln(["Vars8",Vars8]),findresult3(Arguments1,Vars8,[],Result2)%%writeln([findresult3,"Arguments1",Arguments1,"Vars8",Vars8,"Result2",Result2]));(%%writeln(here1),Vars8=[],Result2=[])),%%writeln(["Arguments1",Arguments1,"Vars2",Vars2,"Result",Result]),(debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,(:-),_Body]|Functions3], %% make like previous trunk?member11(Query,Functions,Functions2,Vars8)));(turncut(off)%%,Result=[]).
member1(_Query,_,_,[],_) :- %%writeln1(["The query",Query,"matches no predicates."]),fail.
member1(_Query,_,_,[],_) :- %%writeln1(["The query",Query,"matches no predicates."]),fail,!.
member11(Query,Functions,Functions2,Result) :-%%writeln([m11]),%%writeln(["Query",Query,"Functions",Functions,"Functions2",Functions2,"Result",Result]),cut(off)->(        (Query=[Function],        (Functions2=[[Function,":-",Body]|_Functions3]),                (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),Result=[],        interpretbody(Functions,Functions2,[],_Vars2,Body,true),!,        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],%%Functions2=[[Function]|Functions3],member12(Query,Functions,Functions2,Result)));(turncut(off)).
member11(Query,Functions,Functions2,Result) :-%%writeln([m11]),%%writeln(["Query",Query,"Functions",Functions,"Functions2",Functions2,"Result",Result]),cut(off)->(        (Query=[Function],        (Functions2=[[Function,(:-),Body]|_Functions3]),                (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),Result=[],        interpretbody(Functions,Functions2,[],_Vars2,Body,true),!,        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],%%Functions2=[[Function]|Functions3],member12(Query,Functions,Functions2,Result)));(turncut(off)).
member11(Query,Functions,Functions2,Result) :-%%writeln1([m11]),%%writeln1(["Query",Query,"Functions",Functions,"Functions2",Functions2,"Result",Result]),(cut(off)->(        (Query=[Function],        (Functions2=[[Function,":-",Body]|_Functions3]),        debug_call(Skip,[Function]),Result=[],        (interpretbody(Functions,Functions2,[],_Vars2,Body,true)->debug_fail_fail(Skip);debug_fail(Skip,[Function])),    debug_exit(Skip,[Function]));(%%Query=[Function],%%Functions2=[[Function]|Functions3],member12(Query,Functions,Functions2,Result)));(turncut(off),fail)).
member11(Query,Functions,Functions2,Result) :-%%writeln1([m11]),%%writeln1(["Query",Query,"Functions",Functions,"Functions2",Functions2,"Result",Result]),cut(off)->(        (Query=[Function],        (Functions2=[[Function,":-",Body]|_Functions3]),        debug_call(Skip,[Function]),Result=[],        (interpretbody(Functions,Functions2,[],_Vars2,Body,true)->debug_fail_fail(Skip);debug_fail(Skip,[Function])),    debug_exit(Skip,[Function]));(%%Query=[Function],%%Functions2=[[Function]|Functions3],member12(Query,Functions,Functions2,Result)));(turncut(off),fail).
member11([C2|C2s],N,F1,F2) :- C2=[_,_,M],(member(N,M)->Flag=true;Flag=false),disjunction(F1,Flag,F3),member11(C2s,N,F3,F2).
member12(Query,Functions,Functions2,Vars8) :-%%writeln([m12]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        ((Function=[n,grammar]->true;Function=[n,grammar_part])->checkarguments1(Arguments1,Arguments2,[],Vars1,[],FirstArgs);checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!),%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln(here2),Vars8=[],Result2=[])),        (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member13(Query,Functions,Functions2,Vars8)));(turncut(off)).
member12(Query,Functions,Functions2,Vars8) :-%%writeln([m12]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        ((Function=[n,grammar]->true;Function=[n,grammar_part])->checkarguments1(Arguments1,Arguments2,[],Vars1,[],FirstArgs);checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!),%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln(here2),Vars8=[],Result2=[])),        (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member13(Query,Functions,Functions2,Vars8)));(turncut(off)).member13(Query,Functions,Functions2,Result) :-%%writeln([m13]),cut(off)->(        (Query=[Function],!,        (Functions2=[[Function]|_Functions3]),        (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),Result=[],        %%interpretbody(Functions,[],_Vars2,Body,true),        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],Functions2=[_Function|Functions3],member1(Query,Functions,Functions3,Result)));(turncut(off)).
member12(Query,Functions,Functions2,Vars8) :-%%writeln([m12]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!, %% ->ca2%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln(here2),Vars8=[],Result2=[])),        (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member13(Query,Functions,Functions2,Vars8)));(turncut(off)).
member12(Query,Functions,Functions2,Vars8) :-%%writeln([m12]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!, %% ->ca2%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln(here2),Vars8=[],Result2=[])),        (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member13(Query,Functions,Functions2,Vars8)));(turncut(off)).member13(Query,Functions,Functions2,Result) :-%%writeln([m13]),cut(off)->(        (Query=[Function],!,        (Functions2=[[Function]|_Functions3]),        (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),Result=[],        %%interpretbody(Functions,[],_Vars2,Body,true),        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],Functions2=[_Function|Functions3],member1(Query,Functions,Functions3,Result)));(turncut(off)).
member12(Query,Functions,Functions2,Vars8) :-%%writeln([m12]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!, %% ->ca2%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln(here2),Vars8=[],Result2=[])),        (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member13(Query,Functions,Functions2,Vars8)));(turncut(off)).member13(Query,Functions,Functions2,Result) :-%%writeln([m13]),cut(off)->(        (Query=[Function],!,        (Functions2=[[Function]|_Functions3]),        (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),Result=[],        %%interpretbody(Functions,[],_Vars2,Body,true),        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],Functions2=[_Function|Functions3],member1(Query,Functions,Functions3,Result)));(turncut(off)).interpret2(Query,Functions1,Functions2,Result) :-%%writeln(i2),%%writeln(["%%interpret2 Query",Query,"Functions1",Functions1,"Functions2",Functions2]),        member2(Query,Functions1,Functions2,Result).
member12(Query,Functions,Functions2,Vars8) :-%%writeln1([m12]),(cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        debug_call(Skip,[Function,Arguments1]),                ((        checktypes_inputs(Function,Arguments1),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),        %%writeln1([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((%not        true->%(Result=[])->        %%Result=[Var71|Vars72],        (%trace,        unique1(Result,[],Vars8),%notrace,        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln1(here2),Vars8=[],Result2=[]))))->debug_fail_fail(Skip);debug_fail(Skip,[Function,Arguments1])),   debug_exit(Skip,[Function,Result2]),checktypes(Function,Result2));(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member13(Query,Functions,Functions2,Vars8)));(turncut(off),fail)).
member12(Query,Functions,Functions2,Vars8) :-%%writeln1([m12]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),                checktypes_inputs(Function,Arguments1),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),%%writeln1([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln1(here2),Vars8=[],Result2=[])),        debug_call(Skip,[Function,Arguments1]),   debug_exit(Skip,[Function,Result2]),checktypes(Function,Result2));(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member13(Query,Functions,Functions2,Vars8)));(turncut(off),fail).
member13(Query,Functions,Functions2,Result) :-%%writeln([m13]),cut(off)->(        (Query=[Function],!,        (Functions2=[[Function]|_Functions3]),        (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),Result=[],        %%interpretbody(Functions,[],_Vars2,Body,true),        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],Functions2=[_Function|Functions3],member1(Query,Functions,Functions3,Result)));(turncut(off)).
member13(Query,Functions,Functions2,Result) :-%%writeln1([m13]),(cut(off)->(        (Query=[Function],        (Functions2=[[Function]|_Functions3]),        debug_call(Skip,[Function]),Result=[],        %%interpretbody(Functions,[],_Vars2,Body,true),        debug_exit(Skip,[Function]));%%->true;(%%Query=[Function],Functions2=[_Function|Functions3],member1(Query,Functions,Functions3,Result)));(turncut(off),fail)).
member13(Query,Functions,Functions2,Result) :-%%writeln1([m13]),cut(off)->(        (Query=[Function],        (Functions2=[[Function]|_Functions3]),        debug_call(Skip,[Function]),Result=[],        %%interpretbody(Functions,[],_Vars2,Body,true),        debug_exit(Skip,[Function]));%%->true;(%%Query=[Function],Functions2=[_Function|Functions3],member1(Query,Functions,Functions3,Result)));(turncut(off),fail).
member2(Query,Functions,Functions2,Vars8) :-%%writeln([m2]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2,":-",Body]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        ((Function=[n,grammar]->true;Function=[n,grammar_part])->checkarguments1(Arguments1,Arguments2,[],Vars1,[],FirstArgs);checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!),%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),                (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        interpretbody(Functions,Functions2,Vars1,Vars2,Body,true), %%**arg2 change%%writeln(["Functions",Functions,"Functions2",Functions2,"Vars1",Vars1,"Vars2",Vars2,"Body",Body]),        updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)%%writeln(["Vars2",Vars2,"Result",Result]),        );(%%writeln(here3),Vars8=[],Result2=[])),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,":-",_Body]|Functions3],member21(Query,Functions,Functions2,Vars8)));(turncut(off)).
member2(Query,Functions,Functions2,Vars8) :-%%writeln([m2]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2,":-",Body]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        ((Function=[n,grammar]->true;Function=[n,grammar_part])->checkarguments1(Arguments1,Arguments2,[],Vars1,[],FirstArgs);checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!),%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),                (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        interpretbody(Functions,Functions2,Vars1,Vars2,Body,true), %%**arg2 change%%writeln(["Functions",Functions,"Functions2",Functions2,"Vars1",Vars1,"Vars2",Vars2,"Body",Body]),        updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)%%writeln(["Vars2",Vars2,"Result",Result]),        );(%%writeln(here3),Vars8=[],Result2=[])),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,":-",_Body]|Functions3],member21(Query,Functions,Functions2,Vars8)));(turncut(off)).member21(Query,Functions,Functions2,Result) :-%%writeln([m21]),cut(off)->(        (Query=[Function],        (Functions2=[[Function,":-",Body]|_Functions3]),        Vars1=[],                (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),        interpretbody(Functions,Functions2,Vars1,_Vars2,Body,true),!, %%**arg2 change        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],%%Functions2=[[Function]|Functions3],member22(Query,Functions,Functions2,Result)));(turncut(off)).
member2(Query,Functions,Functions2,Vars8) :-%%writeln([m2]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2,(:-),Body]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!,%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),                (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        interpretbody(Functions,Functions2,Vars1,Vars2,Body,true), %%**arg2 change%%writeln(["Functions",Functions,"Functions2",Functions2,"Vars1",Vars1,"Vars2",Vars2,"Body",Body]),        updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)%%writeln(["Vars2",Vars2,"Result",Result]),        );(writeln(here3),Vars8=[],Result2=[])),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,(:-),_Body]|Functions3],member21(Query,Functions,Functions2,Vars8)));(turncut(off)).
member2(Query,Functions,Functions2,Vars8) :-%%writeln1([m2]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2,":-",Body]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),                checktypes_inputs(Function,Arguments1),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),        %%writeln1([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),debug_call(Skip,[Function,Arguments1]),        (interpretbody(Functions,Functions2,Vars1,Vars2,Body,true)->debug_fail_fail(Skip);        debug_fail(Skip,[Function,Arguments1])), %%**arg2 change%%writeln1(["Functions",Functions,"Functions2",Functions2,"Vars1",Vars1,"Vars2",Vars2,"Body",Body]),        updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)%%writeln1(["Vars2",Vars2,"Result",Result]),        );(%%writeln1(here3),Vars8=[],Result2=[])),   debug_exit(Skip,[Function,Result2]),   checktypes(Function,Result2));%%->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,":-",_Body]|Functions3],member21(Query,Functions,Functions2,Vars8)));(turncut(off),fail).
member2(_,_,[],_) :- fail.
member2(_,_,[],_) :- fail,!.
member2(_,_,[],_) :- fail.member2(Query,Functions,Functions2,Vars8) :-%%writeln([m2]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2,(:-),Body]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!,%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),                (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        interpretbody(Functions,Functions2,Vars1,Vars2,Body,true), %%**arg2 change%%writeln(["Functions",Functions,"Functions2",Functions2,"Vars1",Vars1,"Vars2",Vars2,"Body",Body]),        updatevars(FirstArgs,Vars2,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)%%writeln(["Vars2",Vars2,"Result",Result]),        );(writeln(here3),Vars8=[],Result2=[])),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,(:-),_Body]|Functions3],member21(Query,Functions,Functions2,Vars8)));(turncut(off)).
member2(_Query,_,_,[],_) :- %%writeln1(["The query",Query,"matches no predicates."]),fail,!.
member2(_Query,_,_,[],_) :- %%writeln1(["The query",Query,"matches no predicates."]),fail.member2(Query,Functions,Functions2,Vars8) :-%writeln1(member2(Query,Functions,Functions2,Vars8)),%%writeln1([m2]),(cut(off)->(        (%trace,        Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2,":-",Body]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),debug_call(Skip,[Function,Arguments1]),        ((        checktypes_inputs(Function,Arguments1),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),        %%writeln1([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),        interpretbody(Functions,Functions2,Vars1,Vars2,Body,true),        updatevars(FirstArgs,Vars2,[],Result),        %trace,        unique1(Result,[],Vars8)%,notrace        )->debug_fail_fail(Skip);        debug_fail(Skip,[Function,Arguments1])), %%**arg2 change%%writeln1(["Functions",Functions,"Functions2",Functions2,"Vars1",Vars1,"Vars2",Vars2,"Body",Body]),        %trace,                %%reverse(Result,[],Vars7),        (true->%not(Result=[])->        %%Result=[Var71|Vars72],        (true,        findresult3(Arguments1,Vars8,[],Result2)%%writeln1(["Vars2",Vars2,"Result",Result]),        );(%%writeln1(here3),Vars8=[],Result2=[])),   debug_exit(Skip,[Function,Result2]),   checktypes(Function,Result2));%%->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2,":-",_Body]|Functions3],member21(Query,Functions,Functions2,Vars8)));(turncut(off),fail)).
member21(Query,Functions,Functions2,Result) :-%%writeln([m21]),cut(off)->(        (Query=[Function],        (Functions2=[[Function,":-",Body]|_Functions3]),        Vars1=[],                (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),        interpretbody(Functions,Functions2,Vars1,_Vars2,Body,true),!, %%**arg2 change        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],%%Functions2=[[Function]|Functions3],member22(Query,Functions,Functions2,Result)));(turncut(off)).
member21(Query,Functions,Functions2,Result) :-%%writeln([m21]),cut(off)->(        (Query=[Function],        (Functions2=[[Function,(:-),Body]|_Functions3]),        Vars1=[],                (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),        interpretbody(Functions,Functions2,Vars1,_Vars2,Body,true),!, %%**arg2 change        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],%%Functions2=[[Function]|Functions3],member22(Query,Functions,Functions2,Result)));(turncut(off)).
member21(Query,Functions,Functions2,Result) :-%%writeln1([m21]),(cut(off)->(        (Query=[Function],        (Functions2=[[Function,":-",Body]|_Functions3]),        Vars1=[],  debug_call(Skip,[Function]),        (interpretbody(Functions,Functions2,Vars1,_Vars2,Body,true)->debug_fail_fail(Skip);        debug_fail(Skip,[Function])), %%**arg2 change        debug_exit(Skip,[Function]));%%->true;(%%Query=[Function],%%Functions2=[[Function]|Functions3],member22(Query,Functions,Functions2,Result)));(turncut(off),fail)).
member21(Query,Functions,Functions2,Result) :-%%writeln1([m21]),cut(off)->(        (Query=[Function],        (Functions2=[[Function,":-",Body]|_Functions3]),        Vars1=[],  debug_call(Skip,[Function]),        (interpretbody(Functions,Functions2,Vars1,_Vars2,Body,true)->debug_fail_fail(Skip);        debug_fail(Skip,[Function])), %%**arg2 change        debug_exit(Skip,[Function]));%%->true;(%%Query=[Function],%%Functions2=[[Function]|Functions3],member22(Query,Functions,Functions2,Result)));(turncut(off),fail).member22(Query,Functions,Functions2,Vars8) :-%%writeln1([m22]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),                checktypes_inputs(Function,Arguments1),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),%%writeln1([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),        updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln1(here4),Vars8=[],Result2=[])),        debug_call(Skip,[Function,Arguments1]),        debug_exit(Skip,[Function,Result2]),checktypes(Function,Result2));%%->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member23(Query,Functions,Functions2,Vars8)));(turncut(off),fail).
member22(Query,Functions,Functions2,Vars8) :-%%writeln([m22]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        ((Function=[n,grammar]->true;Function=[n,grammar_part])->checkarguments1(Arguments1,Arguments2,[],Vars1,[],FirstArgs);checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!),%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),        updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln(here4),Vars8=[],Result2=[])),        (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member23(Query,Functions,Functions2,Vars8)));(turncut(off)).
member22(Query,Functions,Functions2,Vars8) :-%%writeln([m22]),cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),!,%%writeln([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),        updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        ((not(Result=[])->        %%Result=[Var71|Vars72],        unique1(Result,[],Vars8),        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln(here4),Vars8=[],Result2=[])),        (debug(on)->(writeln([call,[Function,Arguments1],"Press c."]),(not(get_single_char(97))->true;abort));true),        (debug(on)->(writeln([exit,[Function,Result2],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member23(Query,Functions,Functions2,Vars8)));(turncut(off)).
member22(Query,Functions,Functions2,Vars8) :-%%writeln1([m22]),(cut(off)->(        (Query=[Function,Arguments1],        (Functions2=[[Function,Arguments2]|_Functions3]),        length(Arguments1,Length),        length(Arguments2,Length),debug_call(Skip,[Function,Arguments1]),        ((        checktypes_inputs(Function,Arguments1),        checkarguments(Arguments1,Arguments2,[],Vars1,[],FirstArgs),%%writeln1([checkarguments,"Arguments1",Arguments1,"Arguments2",Arguments2,"Vars1",Vars1,"FirstArgs",FirstArgs]),        updatevars(FirstArgs,Vars1,[],Result),        %%reverse(Result,[],Vars7),        (true->%not(Result=[])->        %%Result=[Var71|Vars72],        (%trace,        unique1(Result,[],Vars8),%notrace,        findresult3(Arguments1,Vars8,[],Result2)        );(%%writeln1(here4),Vars8=[],Result2=[])),checktypes(Function,Result2))->debug_fail_fail(Skip);        debug_fail(Skip,[Function,Arguments1])), %%**arg2 change        debug_exit(Skip,[Function,Result2]));%%->true;(%%Query=[Function,_Arguments1],%%Functions2=[[Function,_Arguments2]|Functions3],member23(Query,Functions,Functions2,Vars8)));(turncut(off),fail)).member23(Query,Functions,Functions2,Vars8) :-%%writeln1([m23]),(cut(off)->(        (Query=[Function],        (Functions2=[[Function]|_Functions3]),        debug_call(Skip,[Function]),Vars8=[],        debug_exit(Skip,[Function]));%%->true;(%%Query=[Function],Functions2=[_Function|Functions3],member2(Query,Functions,Functions3,Vars8)));(turncut(off),fail)).
member23(Query,Functions,Functions2,Vars8) :-%%writeln([m23]),cut(off)->(        (Query=[Function],!,        (Functions2=[[Function]|_Functions3]),        (debug(on)->(writeln([call,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true),Vars8=[],        (debug(on)->(writeln([exit,[Function],"Press c."]),(not(get_single_char(97))->true;abort));true))->true;(%%Query=[Function],Functions2=[_Function|Functions3],member2(Query,Functions,Functions3,Vars8)));(turncut(off)).
member23(Query,Functions,Functions2,Vars8) :-%%writeln1([m23]),cut(off)->(        (Query=[Function],        (Functions2=[[Function]|_Functions3]),        debug_call(Skip,[Function]),Vars8=[],        debug_exit(Skip,[Function]));%%->true;(%%Query=[Function],Functions2=[_Function|Functions3],member2(Query,Functions,Functions3,Vars8)));(turncut(off),fail).
member_exit_fail(fail).
membera3(L,M):-head(L,H),tail(L,T),not((=(M,H))),membera3(T,M),!.
membera3([],_L):-!.
membera4(L,H):-head(L,H).
membera4(L,M):-head(L,H),tail(L,T),not(M=H),membera4(T,M).
membera4([],_L):-fail.
memberlp2c10(Functions2,Algorithm1,Algorithm2) :-Functions2=[Functions3|Functions4],memberlp2c1(Functions3,Algorithm1,Algorithm3),memberlp2c10(Functions4,Algorithm3,Algorithm2).
memberlp2p10(Functions2,Algorithm1,Algorithm2) :-Functions2=[Functions3|Functions4],memberlp2p1(Functions3,"",Algorithm3),%writeln(Algorithm3),string_concat(Algorithm1,Algorithm3,Algorithm31),memberlp2p10(Functions4,Algorithm31,Algorithm2).
memorisation(List1,N1) :-repeat,writeln("Say out loud and type the following to help memorise it:"),writeln1(List1),read_string(user_input, "\n", "\r", _, List11),term_to_atom(List1,List11),reverse(List1,List2),repeat,writeln("Reverse, say out loud and type the following to help memorise it:"),writeln1(List1),read_string(user_input, "\n", "\r", _, List21),term_to_atom(List2,List21),N2 is N1-1,memorisation(List1,N2),!.
merge_back_until_forward_fork1(N1,Options8,Options72,Options7,_N43,N42) :-Options8=[[N41,A10,N4]|Rest],delete(Options8,[N41,A10,N4],Options51),append(Options51,[[N41,A10,N1]],Options73),append(Options72,Options73,Options74),merge_back_until_forward_fork2(Rest,Options74,Options7,N41,N42).
merge_back_until_forward_fork2(_,_Options71,_Options72,_N41,_N42) :- fail.
merge_branches(Branches1,Branches2,Branches3) :- length(Branches1,L1), length(Branches2,L2), (L1=<L2->merge_branch(L2,Branches1,Branches2,Branches3); merge_branch(L1,Branches2,Branches1,Branches3)).
merge_files(AT233,AT133,AT3331) :- split_into_lp_files(AT233,AT2331), split_into_lp_files(AT133,AT1331), merge_files2(AT2331,AT1331,[],AT333), foldr(append,AT333,AT3332), % keep separate tests (sometimes with duplicates %A=1), remove other dups %trace, AT3332=AT3331.
merge_files2(AT2331,AT1331,AT333,AT3331) :- AT2331=[[[[n, comment], [["File delimiter", PZ, FZ]]]|T10]|AT2333], %merge3(T10) (member([[[n, comment], [["File delimiter", PZ, FZ]]]|T11],AT1331)-> (append(T10,T11,T12), %merge_files3(T10,T11,T12), delete(AT1331,[[[n, comment], [["File delimiter", PZ, FZ]]]|T11],AT1333)); (T12=T10,AT1331=AT1333)), append(AT333,[[[[n, comment], [["File delimiter", PZ, FZ]]]|T12]],AT3332), %*/ merge_files2(AT2333,AT1333,AT3332,AT3331)./*merge_files2([],AT1331,AT333,AT3331) :- append(AT333,AT1331,AT3331),!.merge_files2(AT2331,AT1331,AT333,AT3331) :- AT2331=[[[[n, comment], [["File delimiter", PZ, FZ]]]|T10]|AT2333], (member([[[n, comment], [["File delimiter", PZ, FZ]]]|T11],AT1331)-> (not(string_concat(_,".pl",FZ))-> (delete(AT1331,[[[n, comment], [["File delimiter", PZ, FZ]]]|T10],AT1333), append(AT333,[[[[n, comment], [["File delimiter", PZ, FZ]]]|T12]],AT3332), merge_files2(AT2333,AT1333,AT3332,AT3331));  (append(T10,T11,T12), %merge_files3(T10,T11,T12), delete(AT1331,[[[n, comment], [["File delimiter", PZ, FZ]]]|T11],AT1333), append(AT333,[[[[n, comment], [["File delimiter", PZ, FZ]]]|T12]],AT3332), merge_files2(AT2333,AT1333,AT3332,AT3331))); (T12=T10,AT1331=AT1333, append(AT333,[[[[n, comment], [["File delimiter", PZ, FZ]]]|T12]],AT3332), merge_files2(AT2333,AT1333,AT3332,AT3331))) .*/ merge_files3([],AT1331,AT1331%,AT3331) :- %append(AT333,AT1331,AT13331), !.
merge_files2b(A,B,C,D) :-  A=[[[[n, comment], [["File delimiter", PZ, FZ]]]|T10]|E],  (member([[[n, comment], [["File delimiter", PZ, FZ]]]|T11],B)-> (merge3(T10,T11,T12), %merge_files3(T10,T11,T12), delete(B,[[[n, comment], [["File delimiter", PZ, FZ]]]|T11],B1)); (T12=T10,B=B1)), append(C,[[[[n, comment], [["File delimiter", PZ, FZ]]]|T12]],A2), %*/ merge_files2b(E,B1,A2,D),!.
merge_files3(AT2331,AT1331,AT333%,AT3331) :-%writeln1(merge_files3(AT2331,AT1331,AT333)), AT2331=[[_N0,[Pred_name1|Rest1]]|_AT2333], pred_rest(Arity1,Rest1,_Lines1), findall1([_N,[Pred_name1|Rest3]],(member([_N2,[Pred_name1|Rest3]],AT2331), pred_rest(Arity1,Rest3,_Lines3)),Ps), subtract(AT2331,Ps,Ps2), %((%trace,% append(C2,D2,AT2331),append(Ps,E2,D2),foldr(append,[C2,E2],Ps2))->true;AT2331=Ps2),!, reverse(AT1331,AT1332), ((append(A,B,AT1332), append([[N1,[Pred_name1|Rest4]]],C,B),!, pred_rest(Arity1,Rest4,_Lines2) )-> (%trace, reverse(A,A1),reverse(C,C1),foldr(append,[C1,[[N1,[Pred_name1|Rest4]]],Ps,A1],AT1334)); append(AT1331,Ps,AT1334)), merge_files3(Ps2,AT1334,AT333),!.%,AT3331) :-put_in_nums(T49,AT333,T491) :- % leave exact comments, includes x /*findall1(*,(member([Pred_name1|Rest1],T49), pred_rest(Arity1,Rest1,_Lines2), get_n_item(AT333,) ))) *//*  length(AT333,AT333L), numbers(AT333L,1,[],AT333N), findall1([AT333N1,AT333Item],(member(AT333N1,AT333N), get_item_n(AT333,AT333N1,AT333Item), member(AT333Item,T49)),T491),!.*/%/* %length(T49,T49L), %numbers(T49L,1,[],T49N), findall1([T49N1,T49A],(member(T49A,T49), once(get_n_item(AT333,T49A,T49N1)) %member(AT333Item,T49) ),T491),%sort(T492,T491), !.
merge_lists1(Options1,Options3a,Options3b) :-Options1=[Options4|Options5],%%Options2=[Options6|Options7],%%trace,merge_lists1b(Options4,Options1,[],Options3c),append(Options3a,Options3c,Options3d),%%writeln1(merge_lists2(Options4,Options6,Options3a,Options3c)),merge_lists1(Options5,Options3d,Options3b).
merge_lists1b(Options1,Options2,Options3a,Options3b) :-Options1=[Options4|Options5],Options2=[Options6|Options7],%%trace,merge_lists2(Options4,Options6,Options3a,Options3c),%%writeln1(merge_lists2(Options4,Options6,Options3a,Options3c)),merge_lists1b(Options5,Options7,Options3c,Options3b).
merge_lists1b(Options1,Options3a,Options3b) :-Options1=[Options4|Options5],%%Options2=[Options6|Options7],%%trace,merge_lists2(Options4,Options1,[],Options3c),append(Options3a,Options3c,Options3d),%%writeln1(merge_lists2(Options4,Options6,Options3a,Options3c)),merge_lists1b(Options5,Options3d,Options3b).
merge_lists1c(Options4,Options5,Options2a,Options2b) :-Options5=[Options5a|Options5b],merge_lists1b(Options4,Options5a,Options2a,Options2c),merge_lists1c(Options4,Options5b,Options2c,Options2b).
merge_lists_a(N1,Options1,Options2,Options3) :-%trace,N1=[M1|Ms],abort_if_gone_past_error(M1,Options1),%writeln1([n1,N1]),% If all As lead to the same letter then merge themfindall(A,(member([M1,A,_N2],Options1)),A1),sort(A1,A11),% next n1merge_lists_a1(M1,A11,Options1,[],Options31,[],N21),append(Options2,Options31,Options32),append(Ms,N21,M21),sort(M21,M2),%M21=M2,merge_lists_a(M2,Options32,[],Options3).
merge_lists_a22(A,A5) :-A5=[[_N1,A,_N2]|A6],merge_lists_a22(A,A6).
merge_lists_a22(_A,[]) :- !.
merge_lists_a5(N2,N3,Options1,Options2,Options4,Options5,Options6) :-Options1=[[N31,A,N4]|A9],not(N2=N31),append(Options5,[[N31,A,N4]],Options5a),merge_lists_a5(N2,N3,A9,Options2,Options4,Options5a,Options6).
merge_lists_a5(N2,N3,Options1,Options2,Options4,Options5,Options6) :-%(N2=3->trace;true),Options1=[[N3,A,N4]|A9],delete(Options2,[N3,A,N4],Options2aa),%trace,append(Options2aa,[[N2,A,N4]],Options2a),merge_lists_a5(N2,N3,A9,Options2a,Options4,Options5,Options6).merge_lists_a5(N2,N3,Options1,Options2,Options4,Options5,Options6) :-Options1=[[N2,A,N4]|A9],delete(Options2,[N3,A,N4],Options2aa),%trace,append(Options2aa,[[N2,A,N4]],Options2a),merge_lists_a5(N2,N3,A9,Options2a,Options4,Options5,Options6).
merge_types(T,MT1,MT2) :-%trace, T=[[TT,Type,N,D]|T2], findall([TT,Type,N2,D],(member([TT,Type,N2,D],T2)),N3), subtract(T2,N3,T3), N4=[[[TT,Type,N,D],N3]], %append(N3,[[TT,Type,N,D]],N4), append(MT1,N4,MT3), merge_types(T3,MT3,MT2).
met_a_chain_member(Meetings,Person0,Person1,Person2) :- Meetings=[Meetings1|Meetings2], ((member([Person1,_Person3],Meetings1)->true; member([_Person3,Person1],Meetings1))-> met_a_chain_member(_Meetings,Person0,Person2,Person2); met_a_chain_member(Meetings2,Person0,Person1,Person2) ).
met_a_chain_member([],Person0,Person1,Person2) :- (not(Person1=Person2)->(writeln(["No link between",Person0,"and",Person2]),!);true).
meta2mid1 :-check_asc2mid,Folder="meta",foldr(string_concat,[Folder,"/"],Path),directory_files(Path,F),delete_invisibles_etc(F,G),findall(_,(member(Filex1,G),string_concat(Path,Filex1,Filex),% Additional_variables are [label,var]open_file_s(Filex,Meta_file),%open_file_s("meta/song202422921430.467365026474_meta.txt",Meta_file),Meta_file=[[form,Form1],[chord_progressions,CPT],[voice_part,Voiceparts2],[melody,Melody],[harmony,Harmony],[melody_instruments,MelodyInstruments],[harmony_instruments,HarmonyInstruments],[melody_parts,MelodyParts],[harmony_parts,HarmonyParts],[lyrics,Lyrics],[genre,["anthem"]]|Rhythm1],(Rhythm1=[[rhythm,Rhythm]]->(retractall(rhythm(_)),assertz(rhythm(Rhythm)));(ask_for_rhythm(true)->rhythm;%(MelodyParts,HarmonyParts);(retractall(rhythm(_)),assertz(rhythm([["0","NT","1/2",1,80],["1/2","NT","1/2",1,80],["1","NT","1/2",2,80],["1+1/2","NT","1/2",2,80],["2","NT","1/2",3,80],["2+1/2","NT","1/2",3,80],["3","NT","1/2",4,80],["3+1/2","NT","1/2",4,80]]))))),%sectest0(_Form1,_Lyrics,_Melody,_Harmony,_MelodyParts,%_HarmonyParts,_Vocalstubinstrument,_Song1),%N2 is N1-1,%sectest(N2),!.
method("book","e-book").
method("induction","literary induction"). % through small ideas, works out problemsmethod("constraint satisfaction solver","constraint satisfaction neurosolver").
method("interpreter","List Prolog Interpreter").
method("interpreter","Neurointerpreter").
method("interpreter","State Saving Interpreter").
method("paraprogramming","metaprogramming"). % given a worked solution, write an algorithm using pattern matchingmethod("neuronetwork","decision tree"). % to find usually unpredictable values, verify and compute properties of data, with a decision tree that contains cycles based on weights - for example, bb,aa->Aa,Bb is found using an algorithm that finds combos of capitalise words and sort, followed by recognising this combo - it could also recognise first sort then capitalisation% 1. Conglish allows thought processes to be analysed. It is an analytic perspective for expressing ideas, i.e. looks at the relationships between functional units.
mind_read(Item,List0) :-findall([A,Type],(member(A1,List0),once(get_type(A1,Type)), (Type=list->A1=A;string_strings(A1,A))),List2),findall(B,member([B,_],List2),List3),decision_tree(List3,List1),%trace,mind_read3([],P,List1),member([P,Type1],List2),join_san(P,Type1,Item),!.
mind_read(Item,List0) :-(lists_of_same_length1(List0)->mind_read_a(Item,List0); %% segment decision treesmind_read_b(Item,List0)). %% 1 decision treemind_read_a(Item,List0) :-/**findall(L,(member(Item,List0),string_length(Item,L)),Ls1),sort(Ls1,Ls2),reverse(Ls2,Ls3),Ls3=[Maximum_length|_],numbers(Maximum_length,1,[],Numbers1),**/mind_read_a_1(List0,[],Item).
mind_read10(Item,List) :-writeln1([list,List]),%trace,%%catch((trialy2(List,R1),findbest(R1,Item),writeln1([item,Item]))   %_,%mind_read10(Item,List)%),!.
mind_read10(Item,[Item]) :-writeln1([item,Item]),!.
mind_read3(N1,Options2,_Options,Tree1,Item2,Item1) :-%trace,%subtract2(Tree1,Options,[],Tree2),member([N1,Item2,N2],Options2),mind_read2(N2,Tree1,Item1).
mind_read3(Progress1,Progress2,Options2%,_Options%,%Tree1,%Item2,Item1) :-%trace,%subtract2(Tree1,Options,[],Tree2),%(true%length(Options2,1)%->findall(A,member([_,_,A],Options2)%,length(A,L))%,A1);(trace,%Options2=[_,_,A],%trace,%A1=[A])),%foldr(append,A1,A2),%mind_read10([Item2,_,A2],Options2),mind_read10(%Tree1,[Item2,_,A2],Options2),%(member([Item2,_,A3],Options2)->true;[Item2,_,A3]=Options2),member(Item1,A3),append(Progress1,[Item2],Progress4),mind_read3(Progress4,Progress2,A2%,_Options%,%Tree1,%Item2,Item1).
mind_read_a_1(List0,Item1_a,Item1_a2) :-%List0=[List0_1|_Rest],(maplist(equals_empty_list,List0)->(%trace,%append(Item1_a,[Item],Item1_a2));Item1_a=Item1_a2);(%trace,findall(Item2_a,(member(List0_1,List0),get_item_n(List0_1,1,Item2_a)),Item2_a1),sort(Item2_a1,Item2_a2),findall(D1,(member(D2,Item2_a2),term_to_atom(D2,D3),string_atom(D1,D3)),List1),%trace,%List1=A,findall(B,(member(C,List1),string_concat(C," 01",B)),List2),findall(B,(member(C,List2),(number(C)->number_string(C,B)->true;((atom(C)->atom_string(C,B))->true;(string(C),C=B)))),List3),%trace,minimise_strings1(List3,List4,Map),%writeln1(minimise_strings1(List3,List4,Map)),% findall(B,(member(C,List13),string_concat(C," 01",B)),List),%notrace,%trace,%writeln1(make_mind_reading_tree4(List,Tree)),make_mind_reading_tree4(List4,Tree),%writeln1(make_mind_reading_tree4-here1(List,Tree)),%writeln1(mind_read2(1,Tree,Item1)),mind_read2(1,Tree,Item1),writeln1(mind_read2(1,Tree,Item1)),writeln(""),%trace,%string_concat(Item3," 01",Item1),find_mapped_item(Item1,Item2,Map),term_to_atom(Item,Item2),(findall(Rest1,(member(Item1_b,List0),%get_item_b(Item1_b,Number,Item1_b1),%Number2 is Number+1,get_item_b(Item1_b,Number2,Item1_b2)Item1_b=[Item|Rest1]),Item1_b2),append(Item1_a,[Item],Item1_a3),mind_read_a_1(Item1_b2,Item1_a3,Item1_a2)))).
mind_read_mrs2a(Item,List0,List2) :-%trace,mind_read3([],P,List0),member([P,Type1],List2),join_san(P,Type1,Item),!.
minimise_dfa(A,B,C) :- A=[[D1,D2]|E], findall(_,member([D1,_],A),D4), length(D4,1), append(B,[[D1,D2]],F), minimise_dfa(E,F,C).
minimise_dfa(A,B,C) :-%writeln(minimise_dfa(A,B,C)), A=[[D1,D2]|E], findall(_,member([D1,_],A),D4), not(length(D4,1)), %trace, ((find_loops(D1,A,[],_C1%,1,N1 ,[],L), findall(H3,(member([_F,_G,H],L),length(H,LeH),LeH>=2,H=[_H1|H3]),H2), foldr(append,H2,H4), foldr(append,H4,H5), %L=[L1|L2], %foldr(append,L2,L3), %find_loop(D2,E,[],C11,1,N2), %N1=N2 subtract(E,H5,C2%B1 ), append([[D1,D2]],C2,C3),  (H5=[]->C=C3; minimise_dfa(C3,[],C)) %E=C).%,%, %append(C2,L1,C) )->true; (%trace,%subtract(A,E,A1), %append(A,B,B1), minimise_dfa(E,B,C))). %E=C).%, %minimise_dfa(B1,B,C).
minimise_dfa(Transitions,DFA1,DFA2) :- Transitions=[T2|T3], %append(DFA1,[T2],DFA4), DFA1=DFA4, minimise_dfa2(T2,T3,DFA4,DFA3), minimise_dfa(T3,DFA3,DFA2).
minimise_dfa3(From,To,T3,DFA1,DFA2) :- T3=[T4|T5], T4=[From,To1], member([To,To2],T3), append(DFA1,[T4],DFA3), %DFA1=DFA3, minimise_dfa3(To1,To2,T5,DFA3,DFA2),!.
minimise_strings1(List0,A,Map) :-sort(List0,List1),findall(L,(member(Item,List1),string_length(Item,L)),Ls1),sort(Ls1,Ls2),reverse(Ls2,Ls3),Ls3=[Maximum_length|_],numbers(Maximum_length,1,[],Numbers1),minimise_strings11(Numbers1,_Numbers2,List1,List2,First_part),string_length(First_part,First_part_l),Maximum_length2 is Maximum_length-First_part_l+1,numbers(Maximum_length2,1,[],Numbers3),minimise_strings2(Numbers3,List2,First_part,A,Map).
minimise_strings11(Numbers1,Numbers2,List1,List2,First_part) :-Numbers1=[Number|Numbers3],findall(Item2,(member(Item1,List1),string_concat(Item2,_,Item1),string_length(Item2,Number)),Item3),Item3=[First_part2|_],string_concat(First_part1,Char,First_part2),string_length(Char,1),sort(Item3,Item3a),length(Item3,Item3_l),length(List1,List1_l),(Item3_l=List1_l->(Number2 is Number-1,findall(Item4,(member(Item1,List1),string_concat(Item2,Item4,Item1),string_length(Item2,Number2)),Item4a),(length(Item3a,1)->minimise_strings11(Numbers3,Numbers2,List1,List2,First_part);(Numbers2=Numbers1,List2=Item4a,First_part=First_part1)));(Numbers2=Numbers1,List2=List1,First_part=First_part1)).
minimise_strings2(Numbers1,List1,First_part,A1,Map1) :-Numbers1=[Number|Numbers2],findall(Item3a,(member(Item1,List1),string_concat(Item2,_,Item1),string_length(Item2,Number),string_concat(Item2," 01",Item3a)),Item3),sort(Item3,Item31),%trace,findall([Item3a,Item1a],(member(Item1,List1),string_concat(Item2,_,Item1),string_length(Item2,Number),string_concat(Item2," 01",Item3a),string_concat(First_part,Item1,Item1a)),Item4),length(Item31,Length1),length(Item3,Length2),(Length1=Length2->(A1=Item3,Map1=Item4);minimise_strings2(Numbers2,List1,First_part,A1,Map1)).
minus1(L,[],L).
minus1(L1,L2,L3) :- head(L2,I1),tail(L2,L5),delete2(L1,I1,[],L6),minus1(L6,L5,L3).
minus1(L1,L2,L3) :- head(L2,I1),tail(L2,L5),delete2(L1,I1,[],L6),minus1(L6,L5,L3).delete2([],_A,L,L).
moti(X,Y,Z,N_particles,N_frames,Grid2,Moving_particles) :- set_up_box(X,Y,Z,Grid1), set_up_particles([X,Y,Z],N_particles,[],Particles1), render_particles(X,Y,Z,N_frames,Grid1,[],Grid2,Particles1,[],Particles2), moving_particles(Particles2,Moving_particles), print_grids(Grid2),writeln(["moving particles",Moving_particles]).print_grids(Grids) :-%trace, findall(["---","\n",Zs],(member(Grid,Grids), %findall([Ys,"\n"],(member(Z,Grid), findall([Xs,"\n"],(member(Y,Grid), findall([XAs,"\n"],(member(X,Y),%writeln1(X),(X=[]->X1="-";X1=X)),Xs findall(A1,(member(A,X),%writeln1(X), (A=[]->A1=" ";A1=A)),XAs%)),Xs )),Xs)),Zs)),Grids1), flatten(Grids1,Grids2), foldr(string_concat,Grids2,Grids3), writeln(Grids3).
move1(Win_X,_Win_Y,_X_min,X_max,_Y_min,_Y_max,right,X,Y,X2,Y) :- X1 is X+1, (X1 is X_max-Win_X+1 ->X2=X;X2=X1).
move1(X_min,_X_max,_Y_min,_Y_max,left,X,Y,X2,Y) :- X1 is X-1, (X1 is X_min-1->X2=X;X2=X1).
move1(_Win_X,_Win_Y,X_min,_X_max,_Y_min,_Y_max,left,X,Y,X2,Y) :- X1 is X-1, (X1 is X_min-1->X2=X;X2=X1).
move1(_Win_X,_Win_Y,_X_min,_X_max,_Y_min,Y_max,down,X,Y,X,Y2) :-%trace, Y1 is Y+1, (Y1 is Y_max%+Win_Y%+1 ->Y2=Y;Y2=Y1).
move1(_X_min,X_max,_Y_min,_Y_max,right,X,Y,X2,Y) :- X1 is X+1, (X1 is X_max->X2=X;X2=X1). tty_put10(C, R,X,Y) :- numbers(R,1,[],Rs), findall(_,(member(_,Rs),nl),_), numbers(X,1,[],Xs), findall(_,(member(_,Xs),write(' ')),_), write(C), Y1 is R-Y, numbers(Y1,1,[],Y1s), findall(_,(member(_,Y1s),nl),_).
move1(_X_min,_X_max,_Y_min,Y_max,down,X,Y,X,Y2) :- Y1 is Y+1, (Y1 is Y_max->Y2=Y;Y2=Y1).
move_non_loop_clauses_to_loop1(C,A1,A2%,D1,D2%,NLC1,NLC2) :- C=[E|F], (E=[loop1,_]->(A1=A2);%get_n_item(A1,E,N),put_item_n(A1,N,append(A1,[E],A2)); (move_non_loop_clauses_to_loop2(E,A1,A1,A3), move_non_loop_clauses_to_loop1(F,A3,A2))).%,D1,D2%,NLC1,NLC2move_non_loop_clauses_to_loop2(_,[],A,A) :- !.move_non_loop_clauses_to_loop2(E,A1,A2,A4) :- E=[N,E1], A1=[%[Add, F%[loop1,B]%] |C], (F=[loop1,B]-> (member([N,_E2],B)->(append(B,[[N,E1]],B1),%delete(A1,[loop1,B],A3), get_n_item(A2,F,N1),put_item_n(A2,N1,[loop1,B1],A31), get_n_item(A31,[N,E1],N2),put_item_n(A31,N2,["&del"],A3) %append(A2,[%[Add, %[loop1,B1]]%] %,A4) ); (A2=A3%append(A2,[%[Add, %[loop1,B]]%] %,A3) %move_non_loop_clauses_to_loop2(E,C,A3,A4)))); )); A2=A3%append(A2,[F],A3) ), move_non_loop_clauses_to_loop2(E,C,A3,A4).
move_to_lhs(L1,R1,L2,R2) :- L2=L1-R1,R2=0.
move_vars(Map,T1,T2_old,Out2) :-move_vars1(Map,T1,T2_old,Out2).
move_vars1(Map,T1,T2_old,_Out1,Out2) :-%foldl(move_vars_pred,[T1,T2_old],Map,Out).Map=[Map1|Map2],move_vars_pred(T1,T2_old,Map1,Out),%append(Out1,[Out],Out3),move_vars1(Map2,T1,Out%T2_old,Out,Out2).
mr_alg(Algorithm_length1,Commands,Output1,Commands1,Commands2) :- findall(Command2,(member(Command2,Commands), Command2=[_Name2,[Output1,_Output2]]),Commands3), random_member(Command4,Commands3), Command4=[_Name3,[_Input3,Output3]], append(Commands1,[Command4],Commands5), Algorithm_length2 is Algorithm_length1 - 1, mr_alg(Algorithm_length2,Commands,Output3,Commands5,Commands2).
multiplier(-1).
multiplier(1).
mutually_exclusive(A,B) :-intersection(A,B,[]).
mutually_exclusive(L,M):-head(L,H),tail(L,T),membera3(M,H),mutually_exclusive(T,M),!.
n(A,B) :- findall(C,(member([C,D],A),D<50),B). %all_marks([[a,50],[b,60],[c,70],[d,80]],A).
n(apple).
n(lawn).n(rake).
n(path).n(garden).v(ate).v(watered).
n_level_argument1(N1,Args1,Args2) :-writeln("What is evidence for this?"),read_string(user_input,"\n","\r",_,C1),append(Args1,[C1],Args3),N2 is N1-1,n_level_argument1(N2,Args3,Args2).
name([Dbw_n,_Name]):-get_lang_word("n",Dbw_n1),Dbw_n1,Dbw_n,!.
name([Dbw_n,_Name]):-get_lang_word("n",Dbw_n1),Dbw_n1,Dbw_n,!.call_or_terminal(Item) :-terminal(Item)->true;call1(Item),!.
name([n,_Name]):-!.
name1([]) --> [].
name1([]) --> [].**/name1(X1) --> name1a(X1).name1a(X1) --> name10(X11),{(string_atom(X12,X11),number_string(X1,X12)->true;((%contains_string(X11)->string_atom2(X1,X11)%;X11=X1))))}.%%., X2->X1 {atom_string(X2,X1)}.
name1([]) --> [].**/%*****name1(X1) --> name10(X11),{(string_atom(X12,X11),number_string(X1,X12)->true;((%contains_string(X11)->string_atom2(X1,X11)%;X11=X1))))}.%%., X2->X1 {atom_string(X2,X1)}.
name2([]) --> [].**/%%spaces1(_) --> [X], {char_type(X,space)},!.
name2([]) --> [].**/%%spaces1(_) --> [X], {char_type(X,space)},!.spaces1([X|Xs]) --> [X], {char_type(X,space)}, spaces1(Xs), !.
new_radius(Multiple_of_area,Radius) :- Radius is sqrt(Multiple_of_area/3.14).
newbranchifcall(RuleName0,PredicateName,Itema):-not(RuleName0=[n,PredicateName]),Itema=useexisting.
newlines0(X) --> newlines11(X2), {%(not(X2=[])->X=[[[n,newlines],[X2]]]%;X=[])},!.
newlines0(X) --> newlines12(X2), {X=[[[n,percentage_comments],[X2]]]},!.
newlines0(X) --> newlines13(X2), {X=[[[n,slash_star_comments],[X2]]]},!.
newlines00(X) --> newlines11(X).
newlines00(X) --> newlines12(X).newlines00(X) --> newlines13(X).
newlines1(Xs2) --> %{trace},comment(X), newlines1(Xs), %{append([X],Xs,Xs2)},{keep_comments(Y),(member(percentage_comments,Y)->append(X,Xs,Xs2);Xs2=[])},!.
newlines1(Xs2) --> comment2(X), newlines1(Xs), %{append([X],Xs,Xs2)},{keep_comments(Y),(member(slash_star_comments,Y)->append(X,Xs,Xs2);Xs2=[])},!.
newlines1([]) --> "/","*", commentsa(_), "*","/".newlines1([]) --> newlines1(_).
newlines1([]) --> [],%lookahead([]),!.
newlines1([]) --> [],%lookahead([]),!./**was commentsnewlines1([]) --> "%", comments(_), "\n".
newlines1([]) --> newlines1(_).
newlines1(_%[X|Xs]) --> comment(_X), newlines1(_Xs), %{append([X],Xs,Xs2)},!.
newlines1(_%[X|Xs]) --> comment2(_X), newlines1(_Xs), %{append([X],Xs,Xs2)},!.%%newlines1([X]) --> [X], {char_type(X,newline)},!.
newlines12([]) --> [],%lookahead([]),!.
newlines13([]) --> [],%lookahead([]),!.
no_more_than_one_parent_of_each_node_before1([N4,_A,_N3],Options61) :-%%member([N2,A1,N4],Options61),findall([N5,_,N4],(member([N5,_,N4],Options61)),[_]),%%,not(N2=N5)findall([N2,A1,N4],(member([N2,A1,N4],Options61),no_more_than_one_parent_of_each_node_before1([N2,A1,N4],Options61)),[_]),!.
non duplicated itemsD = [0, 0, 2, 2, 4],(duplicated items x all items), (their former indices x) and the indices of the items they are duplicates of*/point_dups([],_,A,A,B,B,C,C,D,D):-!.
not([false],[],[true]):-!.
not([true],[],[false]):-!.
not1(0,1).
not1(1,0).
note(10,'A#').
note(11,'B').
note(2,'D').
note(3,'D#').
note(4,'E').
note(5,'F').
note(6,'F#').
note(7,'G').
note(8,'G#').
note(9,'A').
note0(1,'D').
note0(2,'E').note0(3,'F').note0(4,'G').
note0(5,'A').
note0(6,'B').
notestonames(Progression1, Progression2) :-clean(Progression1, Progression2).
noticed1(X,Y,Seconds1,Seconds2,Object,Grid) :- Seconds3 is Seconds1+1, noticed1(X,Y,Seconds3,Seconds2,Object,Grid),!.
noun(a_book).
noun(a_song).
noun(sue).
noun1(B) --> determiner(B1), space(B2), noun(B3), {foldr(append,[[B1],[B2],[B3]],B)}.
noun1(B) --> noun(B1), {foldr(append,[[B1]],B)}.
nouns([hat,flask,bottle,book,pen]).
num(E)-->[V],{(number1(V,_Token1)->(%ct_t(T),ct_r(R),ct_c(C),E=V)%[var,T,R,C,_IN,V,[],[],[],[],[]]);fail%E=V) }.
num_modes(OutModes,Last,InputVars1) :-not(OutModes=0),restlast(InputVars1,[],_,Last),!.
number21(T,U)-->[A],commaorrightbracketnext,{((stringtonumber(A,A1),number(A1))->(true);((equals4(A,".")->(true);(equals4(A,"-"))))),stringconcat(T,A,V)},number212(V,U).
number21(T,U)-->[A],commaorrightbracketnext,{((stringtonumber(A,A1),number(A1))->(true);((equals4(A,".")->(true);(equals4(A,"-"))))),stringconcat(T,A,V)},number212(V,U).number21(T,U)-->[A],{((stringtonumber(A,A1),number(A1))->(true);((equals4(A,".")->(true);(equals4(A,"-"))))),stringconcat(T,A,V)},number21("",Numberstring),{stringconcat(V,Numberstring,U)}.
number21(T,U)-->[A],{((stringtonumber(A,A1),number(A1))->(true);((equals4(A,".")->(true);(equals4(A,"-"))))),stringconcat(T,A,V)},number21("",Numberstring),{stringconcat(V,Numberstring,U)}.word212(U,U,T,T).
number21(Vgp1,Vgp2,T,U):-grammar_part(A,Vgp1,Vgp3),((stringtonumber(A,A1),number(A1))->(true);((equals4(A,".")->(true);(equals4(A,"-"))))),stringconcat(T,A,V),number21(Vgp3,Vgp2,"",Numberstring),stringconcat(V,Numberstring,U).
number21(Vgp1,Vgp2,T,U):-grammar_part(A,Vgp1,Vgp3),commaorrightbracketnext(Vgp3,Vgp4),((stringtonumber(A,A1),number(A1))->(true);((equals4(A,".")->(true);(equals4(A,"-"))))),stringconcat(T,A,V),number212(Vgp4,Vgp2,V,U).
number212(U,U,T,T).
numbers(N2,N1,Numbers1,Numbers2) :-N3 is N1+1,append(Numbers1,[N1],Numbers3),numbers(N2,N3,Numbers3,Numbers2).
numbers1(N2,N1,Numbers,Numbers) :-N2 is N1-1,!.
numbers1(N2,N1,Numbers1,Numbers2) :-N3 is N1+1,append(Numbers1,[N1],Numbers3),numbers1(N2,N3,Numbers3,Numbers2).
numbers1(N2,N1,Numbers1,Numbers2) :-N3 is N1+1,append(Numbers1,[N1],Numbers3),numbers1(N2,N3,Numbers3,Numbers2),!.
o_o_constantDis(X,X,D):-    D #= 0.
object(good).
object(happy).
object(sphere,(((null,4,null),2,(null,5,null)),1,(null,3,(null,6,null)))).
object(updated).
ocr1(Text):-ocr([l-[['*','-'],['*','*']],i-[['*','-'],['*','-']],v-[['*','*'],['*','-']],'bs'-[['*','-'],['-','*']],'/'-[['-','*'],['*','-']],'.'-[['-','-'],['*','-']],'-'-[['*','*'],['-','-']],'_'-[['-','-'],['*','*']],','-[['-','*'],['*','*']],'\''-[['-','*'],['-','-']],'*'-[['*','*'],['*','*']]],[[['*','-'],['*','*']],[['*','*'],['-','-']],[['*','*'],['*','*']]],Text).ocr(Characters,Graphics,Text) :- findall(C,(member(G,Graphics),member(C-G,Characters)),Text).
one_d_gravity_block(B1,B2,B3) :-append(B1,B2,B3).
one_fill(Spaces,Ones1) :-string_length(Spaces,Length),numbers(Length,1,[],Numbers),findall("1",member(_Number,Numbers),Ones2),concat_list(Ones2,Ones1).
only_item1(A) :- only_item2_c(A).only_item1_c(A) :- (is_var_s2a(A)->true;(A=[A1,_],type_s2a1(A1))),not(type_s2a1(A)).only_item2_c(A):-only_item(A).
only_item2_c([]).
only_ssi_test(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,only_ssi_test(NTotal3,Query,Functions,Result),((international_lucianpl([lang,"en"],Debug,Query,Functions,Result1)%,writeln1([Result,Result1]),Result=Result1)->(Score3 is Score1+1,writeln0([only_ssi_test,NTotal3,passed]));(Score3=Score1,writeln0([only_ssi_test,NTotal3,failed]))),writeln0(""),only_ssi_test(Debug,NTotal3,NTotal2,Score3,Score2),!.
only_ssi_test(_Debug,NTotal,NTotal,Score,Score) :- NTotal=3, !.
op1(O)-->[O],{operators1(Op),string_strings(Op,Ops),member(O,Ops)}.
operate3(*,[A,B],1,Output) :-Output is A*B.operate3(/,[A,B],1,Output) :-Output is A/B.
operator(*).
operator(-).
operator(-) :- !.operator(*) :- !.
operator(/).
operator(/) :- !.comparisonoperator(>).
operators2("=()").
operators2("=()").extra_characters("%$, :.").
optimise("Combination-Algorithm-Writer",foldr).
optimise("Logic-Formula-Finder",foldr).
optimise("Program-Finder-from-Data-",maplist).
optimise("Simple-List-Prolog-to-List-Prolog",maplist).
optimise([[append,[a,b,c]],[append,[c,d,e]]],[a,b],[a,b,c,d],[e],P).
optional_end(_A4) --> [], !.
or([]):-fail.
or([false],[false],[false]):-!.
or([false],[true],[true]):-!.
or([true],[false],[true]):-!.
or([true],[true],[true]):-!.
or1(0,0,0).
or1(0,1,1).
or1(1,0,1).or1(0,1,1).
or1(1,1,1).
order_preds_bottom_up1(L,N,Functions,Ordered_pred_nums1,Ordered_pred_nums2) :-L3 is L+1,append(Ordered_pred_nums1,[[L,N]],Ordered_pred_nums11),% assign a level, record min, max levelsfindall1(Ordered_pred_nums8,(member(P2,N),member([P2,P3],Functions),%member(P4,P3),%),Ordered_pred_nums1a),%foldr(append,[Ordered_pred_nums1,Ordered_pred_nums1a],Ordered_pred_nums1b),%findall1(Ordered_pred_nums3,%(member([N2,P4],Functions),%L2 is L-1,delete(Functions,[P2,P3],Functions2),%member(P1,P),order_preds_bottom_up1(L3,P3,Functions2,[],Ordered_pred_nums3),foldr(append,Ordered_pred_nums3,Ordered_pred_nums5),append([[L3,P3]],Ordered_pred_nums5,Ordered_pred_nums7),append(Ordered_pred_nums11,Ordered_pred_nums7,Ordered_pred_nums8)),Ordered_pred_nums2),!.%),_Ordered_pred_nums4),/*% what about sortdelete(Functions,[N,P],Functions2),%***%trace,%foldr(append,Ordered_pred_nums4,Ordered_pred_nums5),findall1(Ordered_pred_nums6,(member([N2,P1],Functions),member(N,P1),L2 is L+1,delete(Functions2,[N2,P1],Functions3),order_preds_bottom_up1(L2,N2,Functions3,[],Ordered_pred_nums6)),Ordered_pred_nums7),findall1([N2,P1],(not(member([N2,P1],Functions2)),member(N,P1)),Functions3),foldr(append,[Ordered_pred_nums1b,Ordered_pred_nums7],Ordered_pred_nums2).
order_preds_bottom_up1_post_order_dfs(_L,N,Functions,Ordered_pred_nums1,Ordered_pred_nums2,Pre_order1) :-%L3 is L+1,% assign a level, record min, max levels%findall1(Ordered_pred_nums8,(%member(P4,P3),%),Ordered_pred_nums1a),%foldr(append,[Ordered_pred_nums1,Ordered_pred_nums1a],Ordered_pred_nums1b),%findall1(Ordered_pred_nums31,%(member([N2,P4],Functions),%L2 is L-1,(member(P2,N),member([P2,P3],Functions),order_preds_bottom_up1_post_order_dfs2(P3,P2,Functions,Ordered_pred_nums1,Ordered_pred_nums3,Pre_order1)%append([P3],Ordered_pred_nums3,Ordered_pred_nums11)),%(P3=[]->Ordered_pred_nums3=P2;%delete(Functions,[P2,P3],Functions2),%member(P1,P),%order_preds_bottom_up1_post_order_dfs(_L3,P3,Functions,[],Ordered_pred_nums3)))%append(Ordered_pred_nums3,[N]%[[L,N]]%,Ordered_pred_nums11),foldr(append,[Ordered_pred_nums1,Ordered_pred_nums3],Ordered_pred_nums2).
output_critique(Numbera11,Critique,CString5a1a,Essay1,Essay2) :-findall( Essay6,(member(Critique1,Critique),Critique1=[Numbera11,_Number3a,_String3,_String3a,String5a,String3y,_String3ay,String5a1,_CNumber2aa,_CNumber3aa,CString5a1a,_CNumber2a1,_CNumber3a1,_LastCStrings,String5aaa],concat_list([String5a,"  ",String5a1,"  ",String5aaa,"  "],Essay4),delete(Critique,Critique1,Critique2),output_critique(Numbera11,Critique2,String5aaa,Essay4,Essay6)),Essay33),%%trace,(Essay33=[]->concat_list([Essay1%%,"  "],Essay2);%%(Essay33=[Essay3]->concat_list([Essay1,"  ",Essay3],Essay2);%%(Essay33=[Essay3|[E33]]-> concat_list([Essay1,"  ",Essay3,E33],Essay2);(Essay33=[Essay3|E33], concat_list(E33,E34),concat_list([Essay1,%%"  ",Essay3,E34],Essay2)))%%)%%).
output_critique(Numbera11,Critique,CString5a1a,Essay1,Essay2) :-findall( Essay6,(member(Critique1,Critique),Critique1=[Numbera11,_Number3a,_String3,_String3a,String5a,_String3y1,_String3ay,String5a1,_CNumber2aa,_CNumber3aa,CString5a1a,_CNumber2a1,_CNumber3a1,_LastCStrings,String5aaa],concat_list([String5a,"  ",String5a1,"  ",String5aaa,"  "],Essay4),delete(Critique,Critique1,Critique2),output_critique(Numbera11,Critique2,String5aaa,Essay4,Essay6)),Essay33),%%trace,(Essay33=[]->concat_list([Essay1%%,"  "],Essay2);%%(Essay33=[Essay3]->concat_list([Essay1,"  ",Essay3],Essay2);%%(Essay33=[Essay3|[E33]]-> concat_list([Essay1,"  ",Essay3,E33],Essay2);(Essay33=[Essay3|E33], concat_list(E33,E34),concat_list([Essay1,%%"  ",Essay3,E34],Essay2)))%%)%%).
output_critique(Numbera11,Critique,CString5a1a,Essay1,Essay2) :-findall( Essay6,(member(Critique1,Critique),Critique1=[Numbera11,_Number3a,_String3,_String3a,String5a,_String3y1,_String3ay,String5a1,_CNumber2aa,_CNumber3aa,CString5a1a,_CNumber2a1,_CNumber3a1,_LastCStrings,String5aaa],concat_list([String5a,"  ",String5a1,"  ",String5aaa,"  "],Essay4),delete(Critique,Critique1,Critique2),output_critique(Numbera11,Critique2,String5aaa,Essay4,Essay6)),Essay33),%%trace,(Essay33=[]->concat_list([Essay1%%,"  "],Essay2);%%(Essay33=[Essay3]->concat_list([Essay1,"  ",Essay3],Essay2);%%(Essay33=[Essay3|[E33]]-> concat_list([Essay1,"  ",Essay3,E33],Essay2);(Essay33=[Essay3|E33], concat_list(E33,E34),concat_list([Essay1,%%"  ",Essay3,E34],Essay2)))%%)%%)./**critique(String00,String01,Reasons_per_paragraph,Numbers,Critique).
outputarguments(Relations,FunctionNumber,Position1,Vars1,Vars2,Header1,Header2) :-        (member([[Item1,_Type1,output,FunctionNumber,Position1],[Item1,_Type2,_Range2,FunctionNumber,_Position2]],Relations);member([[Item1,_Type22,_Range22,FunctionNumber,_Position22],[Item1,_Type12,output,FunctionNumber,Position1]],Relations)),        var(Item1,Var,Vars1,Vars3),        append(Header1,[Var],Header3),        Position2 is Position1 + 1,        outputarguments(Relations,FunctionNumber,Position2,Vars3,Vars2,Header3,Header2).
outputarguments(Relations,FunctionNumber,Position1,Vars1,Vars2,Header1,Header2) :-        not((member([[Item1,Type1,output,FunctionNumber,Position1],[Item1,_Type2,_Range2,FunctionNumber,_Position2]],Relations);member([[Item1,_Type22,_Range22,FunctionNumber,_Position22],[Item1,Type1,output,FunctionNumber,Position1]],Relations))),        append(Header1,[undef],Header3), %% check this works in lpi        Position2 is Position1 + 1,        outputarguments(Relations,FunctionNumber,Position2,Vars1,Vars2,Header3,Header2).
outputlyrics(Lyrics1) :-Lyrics1=[Lyrics2|Lyrics3],Lyrics2=[_|Lyrics4],outputlyrics2(Lyrics4),writeln(""),outputlyrics(Lyrics3).
outputlyrics1(Lyrics1,Lyrics5,Lyrics6) :-Lyrics1=[Lyrics2|Lyrics3],Lyrics2=[_|Lyrics4],outputlyrics2(Lyrics4,Lyrics5,Lyrics7),string_concat(Lyrics7,"\n",Lyrics8),outputlyrics1(Lyrics3,Lyrics8,Lyrics6).
outputlyrics2(Lyrics1,Lyrics5,Lyrics6) :-Lyrics1=[Lyrics2|Lyrics3],sentencewithspaces(Lyrics2,Lyrics4),%%writeln(Lyrics4),concat_list(Lyrics5,[Lyrics4,"\n"],Lyrics7),outputlyrics2(Lyrics3,Lyrics7,Lyrics6).
outputlyrics2(Lyrics1,Lyrics5,Lyrics6) :-Lyrics1=[Lyrics2|Lyrics3],sentencewithspaces(Lyrics2,Lyrics4),%%writeln(Lyrics4),concat_list3(Lyrics5,[Lyrics4,"\n"],Lyrics7),outputlyrics2(Lyrics3,Lyrics7,Lyrics6).
p(A,B) :- findall(C,(member([C,D],A),D>=50,D<65),B).%n([[a,50],[b,60],[c,70],[d,80]],A).
p2(List,N1,L1,L2) :- List=[L|Ls], (L=" "-> (N3 is N1+1, p2(Ls,N3,L1,L2))),!.
p2(List,N1,L1,L2) :-  List=[L|Ls], (string_length(L,LN), append(L1,[N1],L3), N3 is N1+LN, p2(Ls,N3,L3,L2)).
p2(V4,V5,V6):-equals4(V4,[V7|V8]),equals4(V7,"b"),append(V5,[V7],V9),p2(V8,V9,V6).
p2([],_,L,L) :- !.
p2lp_test(NTotal,NTotal,Score,Score) :-  findall(_,p2lp_test(_,_,_),Ns),length(Ns,NL),NL=NTotal, !.p2lp_test(NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,p2lp_test(NTotal3,In,Out),((p2lpconverter([string,In],Result1),%writeln1([result1,Result1]),Out=Result1)->(Score3 is Score1+1,writeln0([p2lp_test,NTotal3,passed]));(Score3=Score1,writeln0([p2lp_test,NTotal3,failed]))),writeln0(""),p2lp_test(NTotal3,NTotal2,Score3,Score2),!.
p2lpconverter_term([Type,In],Out) :-foldr(string_concat,["a:-",In,"."],In1),p2lpconverter([Type,In1],Out1),Out1=[[[n,a],":-",Out]],!.
paint_elements(X,Y,Elements1,File_contents1,File_contents2) :-Elements1=[Element|Elements2],(Element=["text","x_bounds",XB1,"y_bounds",YB1,"x",X1,"y",Y1,"size",S1,"colour",C1,T1]->string_to_image(["text","x_bounds",XB1,"y_bounds",YB1,"x",X1,"y",Y1,"size",S1,"colour",C1,T1],_X,_Y,File_contents1,File_contents3)),paint_elements(X,Y,Elements2,File_contents3,File_contents2).
para([[[n,shell1],[[v,i],[v,q],[v,p],[v,o]],":-",[]],[[n,paraphraser],":-",[%[[n,trace]],[[n,read_password],["apple"]],%[[n,phrase_from_file],[[[n,string],[[v,codes]]],'file.txt']],[[n,writeln],["Please enter the file to paraphrase."]],[[n,text_area],["rows=\"8\" style=\"width:100%\"","",[v,string_a]]],[[n,shell_pl],[[],"sepandpad1","","string_chars(\"#@~%`$?-+*^,().:;=_/[]<>{}\\n\\r\s\t\\\"!0123456789\",Sepandpad),findall(C1,(member(C,Sepandpad),atom_string(C,C1)),Sepandpad2),term_to_atom(Sepandpad2,Sepandpad3),write(Sepandpad3).",[v,sepandpad1]]],[[n,shell_pl],[[[v,string_a],[v,sepandpad1]],"find18","Text,Strings","find118(Text,Strings,[],File_list),term_to_atom(File_list,File_list1),write(File_list1).
paraphrase1(Auto,File_list1,Synonym_list1) :-assertz(auto(Auto)),paraphrase1(File_list1,[],File_list,Synonym_list1,Synonym_list),term_to_atom([File_list,Synonym_list],A),write(A).
paraphrase1(File_list,File_list1,File_list2,Synonym_list,Synonym_list2) :-File_list=[File_list3|File_list4],string_concat(File_list5,_E,File_list3),string_length(File_list5,1),string_codes(File_list5,File_list5_c),(not(phrase(word1(File_list5_c),_))->true;member(File_list3,["the","a","i","on","with","of","an","for","to","was","were","and","in","my","from","out","by"])),append(File_list1,[File_list3],File_list6),paraphrase1(File_list4,File_list6,File_list2,Synonym_list,Synonym_list2).
paraphraser([file,"file.txt"],_).% Find paraphrased file in file2.txt*/:-dynamic auto/1.
parent(albert, jim).
parent(albert, peter).
parent(jim, brian).
parent(peter, john).
parent(peter, lee).
parse_tokens(T,R,C,[], Stack, NestedList) :-    % When all tokens are parsed, the final nested list is on top of the stack.
parse_tokens(T,R,C,[], Stack, NestedList) :-    % When all tokens are parsed, the final nested list is on top of the stack.    reverse(Stack, [NestedList|_]).
parts1(Form,Instruments1,Parts1,Parts2) :-Instruments1=[Instrument2|Instruments3],parts2(Form,Instrument2,[],Part3),append(Parts1,[Part3],Parts4),parts1(Form,Instruments3,Parts4,Parts2),!.
parts1(Form,Instruments1,Parts1,Parts2) :-Instruments1=[Instrument2|Instruments3],parts2(Form,Instrument2,[],Part3),append(Parts1,[Part3],Parts4),parts1(Form,Instruments3,Parts4,Parts2),!.parts2([],_Instrument,Part,Part) :- !.
parts2(Form1,Instrument,Part1,Part2) :-Form1=[Section1|Form2],%% shortenstring_concat(B11,_C1,Section1),string_length(B11,1),atom_string(Section,B11),%% shorten((findall([Section,Instrument,Playing],(member([Section2,Instrument,Playing],Part1),string_concat(B1,_C,Section2),string_length(B1,1),atom_string(Section,B1)),Form3),[[Section,Instrument,Playing]|_]=Form3)->true;%% Is the instrument playing in the section?(trialy2([0,1],R1),findbest(R1,Playing))),append(Part1,[[Section1,Instrument,Playing]],Part3),parts2(Form2,Instrument,Part3,Part2),!.
parts2(Form1,Instrument,Part1,Part2) :-Form1=[Section|Form2],(member([Section,Instrument,Playing],Part1)->true;%% Is the instrument playing in the section?(mind_read(Playing,[0,1]))),append(Part1,[[Section,Instrument,Playing]],Part3),parts2(Form2,Instrument,Part3,Part2),!.
parts2(Form1,Instrument,Part1,Part2) :-Form1=[Section|Form2],(member([Section,Instrument,Playing],Part1)->true;%% Is the instrument playing in the section?(trialy2([0,1],R1),findbest(R1,Playing))),append(Part1,[[Section,Instrument,Playing]],Part3),parts2(Form2,Instrument,Part3,Part2),!.
parts2(Form1,Instrument,Part1,Part2) :-Form1=[Section|Form2],(member([Section,Instrument,Playing],Part1)->true;%% Is the instrument playing in the section?term_to_atom(Instrument,Instrument1),concat_list("Is ",[Instrument1," playing in ",Section,"?"],Question),(trialy2(Question,[0,1],R1),findbest(R1,Playing))),append(Part1,[[Section,Instrument,Playing]],Part3),parts2(Form2,Instrument,Part3,Part2),!.
password("apple8").
path(A,A,_Tree,A0,A1) :- append(A0,[A],A1),!.path(First,A,Tree,A0,A1) :- member([First,Second],Tree), member(Second1,Second), append(A0,[First],A2), path(Second1,A,Tree,A2,A1).
path(D,Map1,Map2,Goal,Path1,Path2,Trail1,Trail2) :-%trace,member([[D2|D1],[E2|E]],Map1),length(D1,L),numbers(L,1,[],N),member(N1,N),get_item_n(D1,N1,Goal),get_item_n(E,N1,Goal3),number(Goal3),member(N2,N),get_item_n(D1,N2,D),get_item_n(E,N2,D3),number(D3),delete(Map1,[[D2|D1],[E2|E]],Map2),append(Path1,[[[D2|D1],[E2|E]]],Path2),append(Trail1,[[D,Goal]],Trail2),!.
path(D,Map1,Map2,Goal,Path1,Path2,Trail1,Trail2) :-%trace,member([[D2|D1],[E2|E]],Map1),delete(Map1,[[D2|D1],[E2|E]],Map3),append(Path1,[[[D2|D1],[E2|E]]],Path3),append(Trail1,[[D,Goal]],Trail3),length(D1,L),numbers(L,1,[],N),member(N1,N),get_item_n(D1,N1,D),get_item_n(E,N1,Goal3),number(Goal3),member(D,D1),delete(D1,D,D4),get_n_item(D1,D,N4),delete_item_n(E,N4,E4),length(D4,L2),path2(1,L2,D4,E4,Goal,Map3,Map2,_Goal6,Path3,Path2,Trail3,Trail2),!.
path1(First,A,Tree,A0,A1) :- member([First,Second],Tree), member(Second1,Second), append(A0,[First],A2), path1(Second1,A,Tree,A2,A1).
path10(Stop,First,Tree,A0,A1) :- member([First,Second],Tree), member(Second1,Second), append(A0,[First],A2), append(Stop,[First],Stop1), (member(Second1,Stop) %(Second1=Stop ->A2=A1; path10(Stop1,Second1,Tree,A2,A1)).find_deps(Nodes,Tree,Deps) :- findall1(Deps2,(member(Node,Nodes), cycle1(Node,Tree,[],Deps2)),Deps1a), foldr(append,Deps1a,Deps1),  list_to_set(Deps1,Ordered_pred_nums14),%reverse(Ordered_pred_nums12,Ordered_pred_nums14),reverse(Ordered_pred_nums14,Ordered_pred_nums141),remove_dups_from_loops(Ordered_pred_nums141,Ordered_pred_nums151),reverse(Ordered_pred_nums151,Ordered_pred_nums15),%trace,findall1(Ordered_pred_nums19,(member(Ordered_pred_nums16,Ordered_pred_nums15),(Ordered_pred_nums16=[loop1,Ordered_pred_nums17]->(list_to_set(Ordered_pred_nums17,Ordered_pred_nums18),Ordered_pred_nums19=[loop1,Ordered_pred_nums18]);Ordered_pred_nums19=Ordered_pred_nums16)),Ordered_pred_nums20),%delete(Ordered_pred_nums20,loop,Ordered_pred_nums21), findall1(E,(member(F,Ordered_pred_nums20), (F=[loop1,[A1]]->E=A1;E=F)),Deps2), delete(Deps2,[loop1,[]],Deps).
path10(_Stop,First,Tree,A0,A1) :- member([First,[]],Tree), %trace, %member(Second1,Second), append(A0,[First],A1).
path2(N3,L2,D4,E4,Goal,Map1,Map2,_Goal6,Path1,Path2,Trail1,Trail2) :-((get_item_n(D4,N3,Goal4),get_item_n(E4,N3,Goal5),number(Goal5))->path(Goal4,Map1,Map3,Goal,Path1,Path3,Trail1,Trail3);(Map1=Map3,Path1=Path3,Goal4=Goal)),N4 is N3+1,path2(N4,L2,D4,E4,Goal4,Map3,Map2,_Goal61,Path3,Path2,Trail3,Trail2),!.
paths(N,L,L3,P1,P4) :- %append(P1,[N],P3), %P1=P3, paths2(N,L,L2,L,P1,P2), paths3(P2,L2,L3,P2,P4), %foldr(append,[P3,P2,P5],P4).
paths2(N,L_all,L_all3,L,P1,P2) :- L=[L1|L2], L1=[N,N2], %not(member(N,P1)), not(member(N2,P1)), delete(L_all,L1,L_all2), append(P1,[N2],P3), paths2(N,L_all2,L_all3,L2,P3,P2).
paths2(N,L_all,L_all3,L,P1,P2) :- L=[L1|L2], L1=[N3,_N2], not(N=N3), %delete(L_all,L1,L_all2), %append(P1,[N],P3), paths2(N,L_all,L_all3,L2,P1,P2).paths2(N,L_all,L_all3,L,P1,P2) :- L=[L1|L2], L1=[N3,N2], %not(N=N3), delete(L_all,[N3,_],L_all2), %append(P1,[N],P3), paths2(N2,L_all2,L_all3,L2,P1,P2).
paths2(_N,L_all,L_all,[],P1,P2) :- %append(P1,[N],P2), P1=P2,!.
paths3(P,L,L2,P1,P2) :- P=[P10|P2], paths(P10,L,L3,P1,P3), paths3(P2,L3,L2,P3,P2).
paths3([],L,L,P,P) :- !.
pedagogy(same).
person(_)-->[eshan].person(_)-->[mary].
person(_)-->[james].person(_)-->[jonno].
person(_)-->[john].
person(_)-->[jonny].
person(_)-->[peter].
person(_)-->[richard].
person(_)-->[sera].
person1(aaron).
person1(albert).
person1(bei-en).
person1(hamilton).
person1(heshan).
person1(john).
person1(manaia).
person1(peter).
person1(susan).
person1(susie).
pft_expand_types1(Data,Types1,Types2,VD1,VD2) :-get_lang_word("t",T),get_lang_word("number",Dbw_number),number(Data),%=[T,Dbw_number],%number(Data),(false%member([Dbw_number,Data,N],VD1)->VD2=VD1;(get_data_n(N),append(VD1,[[Dbw_number,Data,N]],VD2))),append(Types1,[[T,Dbw_number,N,Data]],Types2),!.
pft_expand_types2(Data1,Types1,Types2,VD1,VD2) :-%get_lang_word("t",T),%not(Data1=[T,_]),Data1=[Data2|Data3],pft_expand_types1([Data2],[],Types61,VD1,VD3),%),Types62),append(Types1,Types61,Types3),pft_expand_types2(Data3,Types3,Types2,VD3,VD2),!.
physiological_time("boil kettle",45).
physiological_time("drink tea",300).
physiological_time("make tea",15).
pl(N,Transitions,Trail1,Trail2) :- % find all linked to statesfindall([C1,C],(member([N,C1],Transitions),member([C1,C],Transitions)),E), sort(E,K), % find frequency of occurrences of statesfindall([J,G],(member([_,G],K),findall(G,member([_,G],E),H),length(H,J)),M4), sort(M4,M5),  % find most popular links append(_,[[L1,_M6]],M5), findall(M7,member([L1,M7],M5),M8),  % follow most popular links findall(Trail5,(member(M9,M8), append(Trail1,[M9],Trail3), pl(M9,Transitions,[],Trail4), append(Trail3,Trail4,Trail5)),Trail2).
pl(N,Transitions,Trail1,Trail2) :- member([N,N1],Transitions),not(member([N1,_],Transitions)),append(Trail1,[N1],Trail2),!.
point_dups(A,N,B,C,B1,C1,B2,C2,B3,C3):- N1 is N+1, A=[D|E], (member([D,N2],B)-> (%N0 is N-1,N02 is N2-1, append(B1,[[%D, N,N2]],F), N3 is N2-1, append(B3,[%D, N3],F3), point_dups(E,N1,B,C,F,C1,B2,C2,F3,C3)); (N3 is N-1, append(B3,[%D, N3],F4), append(B1,[[%D, N,N]],F3), append(B,[[D,N]],F), append(B2,[D],F2), point_dups(E,N1,F,C,F3,C1,F2,C2,F4,C3))).
popclassicalcomposition1(Note, Note, _Counter, a, Progression, Progression) :- !.
popclassicalcomposition1(Note1, Note2, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,steppopclassical1(Note1, Note3),append(Progression1, [Note3], Progression3),popclassicalcomposition2(Note3, Note2, Note1, Counter2, Flag2, Progression3, Progression4),steppopclassical2(Note1, Note4),append(Progression1, [Note4], Progression5),popclassicalcomposition2(Note4, Note2, Note1, Counter2, Flag3, Progression5, Progression6),steppopclassical3(Note1, Note5),append(Progression1, [Note5], Progression7),popclassicalcomposition2(Note5, Note2, Note1, Counter2, Flag4, Progression7, Progression8),steppopclassical4(Note1, Note7),append(Progression1, [Note7], Progression9),popclassicalcomposition2(Note7, Note2, Note3, Counter2, Flag5, Progression9, Progression10),steppopclassical5(Note1, Note8),append(Progression1, [Note8], Progression11),popclassicalcomposition2(Note8, Note2, Note3, Counter2, Flag6, Progression11, Progression12),steppopclassical52(Note1, Note82),append(Progression1, [Note82], Progression112),popclassicalcomposition2(Note82, Note2, Note3, Counter2, Flag62, Progression112, Progression122),steppopclassical6(Note1, Note9),append(Progression1, [Note9], Progression13),popclassicalcomposition2(Note9, Note2, Note3, Counter2, Flag7, Progression13, Progression14),steppopclassical7(Note1, Note10),append(Progression1, [Note10], Progression15),popclassicalcomposition2(Note10, Note2, Note3, Counter2, Flag8, Progression15, Progression16),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8], [Flag5, Progression10], [Flag6, Progression12], [Flag62, Progression122], [Flag7, Progression14], [Flag8, Progression16]], Flag1, Progression2).
popclassicalcomposition1(_, _, Counter, b, Progression, Progression) :-Counter = 3, !.
popclassicalcomposition1(_, _, Counter, b, Progression, Progression) :-Counter = 4, !.
popclassicalcomposition2(Note, Note, _, _Counter, a, Progression, Progression) :- !.
popclassicalcomposition2(Note, Note, _, _Counter, a, Progression, Progression) :- !.popclassicalcomposition2(Note1, Note2, Note3, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,steppopclassical1(Note1, Note4),append(Progression1, [Note4], Progression3),popclassicalcomposition2(Note4, Note2, Note3, Counter2, Flag2, Progression3, Progression4),steppopclassical2(Note1, Note5),append(Progression1, [Note5], Progression5),popclassicalcomposition2(Note5, Note2, Note3, Counter2, Flag3, Progression5, Progression6),steppopclassical3(Note1, Note6),append(Progression1, [Note6], Progression7),popclassicalcomposition2(Note6, Note2, Note3, Counter2, Flag4, Progression7, Progression8),steppopclassical4(Note1, Note7),append(Progression1, [Note7], Progression9),popclassicalcomposition2(Note7, Note2, Note3, Counter2, Flag5, Progression9, Progression10),steppopclassical5(Note1, Note8),append(Progression1, [Note8], Progression11),popclassicalcomposition2(Note8, Note2, Note3, Counter2, Flag6, Progression11, Progression12),steppopclassical52(Note1, Note82),append(Progression1, [Note82], Progression112),popclassicalcomposition2(Note82, Note2, Note3, Counter2, Flag62, Progression112, Progression122),steppopclassical6(Note1, Note9),append(Progression1, [Note9], Progression13),popclassicalcomposition2(Note9, Note2, Note3, Counter2, Flag7, Progression13, Progression14),steppopclassical7(Note1, Note10),append(Progression1, [Note10], Progression15),popclassicalcomposition2(Note10, Note2, Note3, Counter2, Flag8, Progression15, Progression16),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8], [Flag5, Progression10], [Flag6, Progression12], [Flag62, Progression122], [Flag7, Progression14], [Flag8, Progression16]], Flag1, Progression2).
popclassicalcomposition2(Note, _, Note, _, _, _, _) :- !.
popclassicalcomposition2(Note1, Note2, Note3, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,steppopclassical1(Note1, Note4),append(Progression1, [Note4], Progression3),popclassicalcomposition2(Note4, Note2, Note3, Counter2, Flag2, Progression3, Progression4),steppopclassical2(Note1, Note5),append(Progression1, [Note5], Progression5),popclassicalcomposition2(Note5, Note2, Note3, Counter2, Flag3, Progression5, Progression6),steppopclassical3(Note1, Note6),append(Progression1, [Note6], Progression7),popclassicalcomposition2(Note6, Note2, Note3, Counter2, Flag4, Progression7, Progression8),steppopclassical4(Note1, Note7),append(Progression1, [Note7], Progression9),popclassicalcomposition2(Note7, Note2, Note3, Counter2, Flag5, Progression9, Progression10),steppopclassical5(Note1, Note8),append(Progression1, [Note8], Progression11),popclassicalcomposition2(Note8, Note2, Note3, Counter2, Flag6, Progression11, Progression12),steppopclassical52(Note1, Note82),append(Progression1, [Note82], Progression112),popclassicalcomposition2(Note82, Note2, Note3, Counter2, Flag62, Progression112, Progression122),steppopclassical6(Note1, Note9),append(Progression1, [Note9], Progression13),popclassicalcomposition2(Note9, Note2, Note3, Counter2, Flag7, Progression13, Progression14),steppopclassical7(Note1, Note10),append(Progression1, [Note10], Progression15),popclassicalcomposition2(Note10, Note2, Note3, Counter2, Flag8, Progression15, Progression16),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8], [Flag5, Progression10], [Flag6, Progression12], [Flag62, Progression122], [Flag7, Progression14], [Flag8, Progression16]], Flag1, Progression2).
populatevars([RV1|RVs],MaxLength2,PV1,PV2) :-randvars2(MaxLength2,MaxLength2,[],RV2),append(PV1,[[RV1,RV2]],PV3),populatevars(RVs,MaxLength2,PV3,PV2),!.
populatevars([],_,PV,PV) :- !.
port_fairy([[1,9,[*    ]],[2,9,[*    ]],[3,9,[*    ]],[4,9,[*    ]],[5,9,[*    ]],[6,9,[*    ]],[7,9,[*    ]],[8,9,[*    ]],[9,9,[*    ]],[10,9,[*    ]],[11,9,[*    ]],[12,9,[*    ]],[13,9,[*    ]],[14,9,[*    ]],[15,9,[*    ]],[16,9,[*    ]],[17,9,[*    ]], [1,8,[*    ]],[2,8,[     ]],[3,8,[     ]],[4,8,[     ]],[5,8,[     ]],[6,8,[     ]],[7,8,[     ]],[8,8,[     ]],[9,8,[     ]],[10,8,[     ]],[11,8,[     ]],[12,8,[     ]],[13,8,[     ]],[14,8,[     ]],[15,8,[     ]],[16,8,[beachball    ]],[17,8,[*    ]],  [1,7,[*    ]],[2,7,[     ]],[3,7,[*    ]],[4,7,[     ]],[5,7,[*    ]],[6,7,[     ]],[7,7,[*    ]],[8,7,[     ]],[9,7,[*    ]],[10,7,[     ]],[11,7,[*    ]],[12,7,[     ]],[13,7,[*    ]],[14,7,[     ]],[15,7,[*    ]],[16,7,[     ]],[17,7,[*    ]], [1,6,[*    ]],[2,6,[     ]],[3,6,[     ]],[4,6,[     ]],[5,6,[     ]],[6,6,[     ]],[7,6,[     ]],[8,6,[     ]],[9,6,[     ]],[10,6,[     ]],[11,6,[     ]],[12,6,[     ]],[13,6,[     ]],[14,6,[     ]],[15,6,[     ]],[16,6,[     ]],[17,6,[*    ]],  [1,5,[*    ]],[2,5,[     ]],[3,5,[*    ]],[4,5,[     ]],[5,5,[*    ]],[6,5,[     ]],[7,5,[*    ]],[8,5,[     ]],[9,5,[*    ]],[10,5,[icecream     ]],[11,5,[*    ]],[12,5,[     ]],[13,5,[*    ]],[14,5,[     ]],[15,5,[*    ]],[16,5,[     ]],[17,5,[*    ]], [1,4,[*    ]],[2,4,[     ]],[3,4,[     ]],[4,4,[     ]],[5,4,[     ]],[6,4,[     ]],[7,4,[     ]],[8,4,[     ]],[9,4,[     ]],[10,4,[     ]],[11,4,[     ]],[12,4,[     ]],[13,4,[     ]],[14,4,[     ]],[15,4,[     ]],[16,4,[     ]],[17,4,[*    ]], [1,3,[*    ]],[2,3,[     ]],[3,3,[*    ]],[4,3,[     ]],[5,3,[*    ]],[6,3,[     ]],[7,3,[*    ]],[8,3,[     ]],[9,3,[*    ]],[10,3,[     ]],[11,3,[*    ]],[12,3,[     ]],[13,3,[*    ]],[14,3,[     ]],[15,3,[*    ]],[16,3,[     ]],[17,3,[*    ]], [1,2,[*    ]],[2,2,[     ]],[3,2,[     ]],[4,2,[     ]],[5,2,[     ]],[6,2,[     ]],[7,2,[     ]],[8,2,[     ]],[9,2,[     ]],[10,2,[     ]],[11,2,[     ]],[12,2,[     ]],[13,2,[     ]],[14,2,[pinecone    ]],[15,2,[     ]],[16,2,[lighthouse     ]],[17,2,[*    ]], [1,1,[*    ]],[2,1,[*    ]],[3,1,[*    ]],[4,1,[*    ]],[5,1,[*    ]],[6,1,[*    ]],[7,1,[*    ]],[8,1,[*    ]],[9,1,[*    ]],[10,1,[*    ]],[11,1,[*    ]],[12,1,[*    ]],[13,1,[*    ]],[14,1,[*    ]],[15,1,[*    ]],[16,1,[*    ]],[17,1,[*    ]]]).
postsong(N1) :-texttobr2(3), %% give self breasonings texttobr2(20), %%Feature 1 texttobr2(20), %%Updates texttobr2(20), %%Feature 2 texttobr2(20), %%Updates texttobr2(20), %%Feature 3 texttobr2(20), %%Updates texttobr2(100), %%Icon texttobr2(20), %%Updates texttobr2(32), %%Lyrics texttobr2(36), %%Music texttobr2(20), %%Updates  texttobr2(2), %%Medicine texttobr2(20), %%Updates texttobr2(2), %%Sales texttobr2(20), %%Updates texttobr2(2), %%Marketing texttobr2(20), %%Updates texttobr2(2), %%Graciously give or blame listener for colour imagery texttobr2(20), %%Updates texttobr2(2), %%Play song texttobr2(2),  N2 is N1-1, postsong(N2).
pp1(List1) :-List1=[List2|Lists3],(((List2=[[_Name,*,*]]->true;List2=[[_Name,*,*],_Variables]),write(List2),writeln(","))->true;(List2=[[Name,*,*],Variables1,(:-),Body]->(term_to_atom(Variables1,Variables2),concat_list("[[",[Name,",*,*],",Variables2,",(:-),"],String),writeln(String),writeln("["),pp2(Body),writeln("]],")))),pp1(Lists3),!.pp2([]):-!.
pp1(List1,S1,S2) :-List1=[List2|Lists3],pp3(List2,S1,S3),pp1(Lists3,S3,S2),!.
pp1([],S,S):-!.pp1([List1],S1,S2) :-%List1=[List2],pp3(List1,S1,S2).
pp2(List1) :-List1=[List2],write("\t"),writeln(List2),!.
pp2(List1) :-List1=[List2|Lists3],write("\t"),write(List2),writeln(","),pp2(Lists3),!.
pp2(List1,S1,S2,N) :-pp_separate_comma(PSC),List1=[List2|Lists3],%write("\t"),write(List2),writeln(","),(List2=[[n,findall],[V1,Body,V2]]-> % if then else(N2 is N+1,pp2([Body],'',S4,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),length(Counter2,N2),findall('\t',member(_,Counter2),Ts21),concat_list(Ts21,Ts2),%pp2(Lists3,'',S3,N),term_to_atom(V1,V11),term_to_atom(V2,V21),pp2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,'[[n,findall]',',','\n',Ts,'[','\n',Ts2,V11,PSC,',','\n', S4,PSC,',',%'\n',Ts, '\n','\n',Ts2,V21, '\n',%Ts,'],[', %S5, Ts,']]',PSC,',',S3],S2));(List2=[[n,"->"],[If,Then]]-> % if then else(N2 is N+1,pp2([If],'',S4,N2),pp2([Then],'',S5,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),pp2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,'[[n,"->"]',',','\n',Ts,'[', S4,PSC,',',%'\n',Ts, '\n',%Ts,'],[', S5,'\n',Ts,']]',PSC,',',S3],S2));%concat_list([S1,'\n',Ts,S4,',','\n',Ts,S5,',',S3],S2));(List2=[[n,"->"],[If,Then,Else]]-> % if then else(N2 is N+1,pp2([If],'',S4,N2),pp2([Then],'',S5,N2),pp2([Else],'',S51,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),pp2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,'[[n,"->"]',',','\n',Ts,'[', S4,PSC,',',%'\n',Ts, '\n',%Ts,'],[', S5,PSC,',',%'\n',Ts, '\n',%Ts,'],[', S51,'\n',Ts,']]',PSC,',',S3],S2));%concat_list([S1,'\n',Ts,S4,',','\n',Ts,S5,',','\n',Ts,S51,',',S3],S2));(%pp2(List2,'',List2a,N),%trace,List2=[[N_or_v,_]|_],(N_or_v=n->true;N_or_v=v),pp2(Lists3,'',S3,N),term_to_atom(List2,List2a),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),(S3=''->Comma='';Comma=','),concat_list([S1,'\n',Ts,List2a,Comma,S3],S2));(pp2(List2,'',List2a,N),pp2(Lists3,'',S3,N),%term_to_atom(List2,List2a),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),concat_list([S1,%'\n',Ts,'\n',Ts,'[',List2a,'\n',Ts,']',PSC,',',S3],S2))))),%concat_list([S1,%'\n',Ts,%List2a,',',S3],S2)))),/*(term_to_atom(List2,List2a),pp2(Lists3,'',S3,N),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),concat_list([S1,'\n',Ts,List2a,',',S3],S2)))),*/!.
pp2([],S,S,_N):-!.pp2(List1,S1,S2,N) :-pp_separate_comma(PSC),List1=[List2],(List2=[[n,findall],[V1,Body,V2]]-> % if then else(N2 is N+1,pp2([Body],'',S4,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),length(Counter2,N2),findall('\t',member(_,Counter2),Ts21),concat_list(Ts21,Ts2),%pp2(Lists3,'',S3,N),term_to_atom(V1,V11),term_to_atom(V2,V21),concat_list([S1,'\n',Ts,'[[n,findall]',',','\n',Ts,'[','\n',Ts2,V11,PSC,',','\n', S4,PSC,',',%'\n',Ts, '\n','\n',Ts2,V21, '\n',%Ts,'],[', %S5, Ts,']]'],S2));(List2=[[n,"->"],[If,Then]]-> % if then else(N2 is N+1,pp2([If],'',S4,N2),pp2([Then],'',S5,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),%pp2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,'[[n,"->"]',',','\n',Ts,'[', S4,PSC,',',%'\n',Ts, '\n',%Ts,'],[', S5,'\n',Ts,']]'],S2));%* remove \n Ts%* put in n,"->"(List2=[[n,"->"],[If,Then,Else]]-> % if then else(N2 is N+1,pp2([If],'',S4,N2),pp2([Then],'',S5,N2),pp2([Else],'',S51,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),%pp2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,'[[n,"->"]',',','\n',Ts,'[', S4,PSC,',',%'\n',Ts, '\n',%Ts,'],[', S5,PSC,',',%'\n',Ts, '\n',%Ts,'],[', S51,'\n',Ts,']]'],S2));%concat_list([S1,'\n',Ts,S4,',','\n',Ts,S5,',','\n',Ts,S51],S2));%write("\t")%,writeln(List2),(%pp2(List2,'',List2a,N),List2=[[n,_]|_],term_to_atom(List2,List2a),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),concat_list([S1,'\n',Ts,List2a],S2));(pp2(List2,'',List2a,N),%term_to_atom(List2,List2a),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),concat_list([S1,%'\n',Ts,'\n',Ts,'[',List2a,'\n',Ts,']'],S2))))),!.
pp3(List1) :-List1=[List2|List3],writeln1(List2),pp3(List3).
pp_lp2p0(List,String2) :-%trace,pp_lp2p1(List,'',String1),concat_list(['',String1],String6),%5),%replace(String3,"&","\"",String4),%replace(String3,"#","'",String5),%string_concat(String6,B,String5),string_length(B,2),string_concat(String6,'\n',String2),!.
pp_lp2p1(List1,S1,S2) :-List1=[List2|Lists3],pp_lp2p3(List2,S1,S3),pp_lp2p1(Lists3,S3,S2),!.
pp_lp2p1([List1],S1,S2) :-%List1=[List2],pp_lp2p3(List1,S1,S2).
pp_lp2p1([],S,S):-!.
pp_lp2p2(List1,S1,S2,N) :-List1=[List2],(List2=[[n,findall],[V1,Body,V2]]-> % if then else(N2 is N+1,pp_lp2p2([Body],'',S4,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),length(Counter2,N2),findall('\t',member(_,Counter2),Ts21),concat_list(Ts21,Ts2),%pp_lp2p2(Lists3,'',S3,N),%term_to_atom(V1,V11),interpretstatementlp2p5(V1,'',V11),%term_to_atom(V2,V21),interpretstatementlp2p5(V2,'',V21),concat_list([S1,'\n',Ts,'findall(',%'\n',Ts,%'\n',Ts2,V11,',','\n', S4,',',%'\n',Ts, '\n','\n',Ts2,V21, %'\n',%Ts,'],[', %S5, ')'%Ts,']]' ],S2));(List2=[[n,"->"],[If,Then]]-> % if then else(N2 is N+1,pp_lp2p2([If],'',S4,N2),pp_lp2p2([Then],'',S5,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),%pp_lp2p2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,%'[[n,"->"]',',',%'\n',Ts, '(', S4,'->',%'\n',Ts, '\n',Ts,'', S5,'\n',Ts,')'],S2)); (List2=[[n,code],Code1]-> % if then else(N2 is N+1,(%trace,(Code1=[A|_],not(predicate_or_rule_name(A)))->Code1=Code;[Code1]=Code),pp_lp2p2(Code,'',S4,N2),%pp_lp2p2([Then],'',S5,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),%pp_lp2p2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,%'[[n,"->"]',',',%'\n',Ts, '{', S4,'',%'\n',Ts, %'\n',Ts,'', %S5, '\n',Ts,'}'],S2));%* remove \n Ts%* put in n,"->"(List2=[[n,"->"],[If,Then,Else]]-> % if then else(N2 is N+1,pp_lp2p2([If],'',S4,N2),pp_lp2p2([Then],'',S5,N2),pp_lp2p2([Else],'',S51,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),%pp_lp2p2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,%'[[n,"->"]',',','\n',Ts,'(', S4,'->',%'\n',Ts, '\n',%Ts,'],[', S5,';',%'\n',Ts, '\n',%Ts,'],[', S51,'\n',Ts,')'],S2));%concat_list([S1,'\n',Ts,S4,',','\n',Ts,S5,',','\n',Ts,S51],S2));%write("\t")%,writeln(List2),(%pp_lp2p2(List2,'',List2a,N),List2=[[n,cut]|_]->(%pp4_lp2p3_1_4(List2,List2a),List2a="!",length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),concat_list([S1,'\n',Ts,List2a],S2));(List2=[[n,comment],[Comment]]-> % if then else(%N2 is N+1,%pp_lp2p2([Comment],'',S4,N),%pp_lp2p2([Then],'',S5,N2),%pp_lp2p2([Else],'',S51,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),%pp_lp2p2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,Comment],S2));(%pp_lp2p2(List2,'',List2a,N),List2=[[n,_]|_]->(pp4_lp2p3_1_4(List2,List2a),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),concat_list([S1,'\n',Ts,List2a],S2));(N2 is N+1,pp_lp2p2(List2,'',List2a,N2),%term_to_atom(List2,List2a),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),concat_list([S1,%'\n',Ts,'\n',Ts,'(',List2a,'\n',Ts,')'],S2))))))))),!.
pp_lp2p2(List1,S1,S2,N) :-List1=[List2|Lists3],%write("\t"),write(List2),writeln(","),(List2=[[n,findall],[V1,Body,V2]]-> % if then else(N2 is N+1,pp_lp2p2([Body],'',S4,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),length(Counter2,N2),findall('\t',member(_,Counter2),Ts21),concat_list(Ts21,Ts2),%pp_lp2p2(Lists3,'',S3,N),interpretstatementlp2p5(V1,'',V11),interpretstatementlp2p5(V2,'',V21),pp_lp2p2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,'findall(',%'\n',Ts,'',%'\n',Ts2,V11,',','\n', S4,',',%'\n',Ts, '\n','\n',Ts2,V21, '',%Ts,'],[', %S5, %Ts, ')',',',S3],S2));(List2=[[n,"->"],[If,Then]]-> % if then else(N2 is N+1,pp_lp2p2([If],'',S4,N2),pp_lp2p2([Then],'',S5,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),pp_lp2p2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,'(','','\n',Ts,'', S4,'->',%'\n',Ts, '\n',%Ts,'],[', S5,'\n',Ts, ')',',',S3],S2));%concat_list([S1,'\n',Ts,S4,',','\n',Ts,S5,',',S3],S2));(List2=[[n,code],Code1]-> % if then else(N2 is N+1,(%trace,(Code1=[A|_],not(predicate_or_rule_name(A)))->Code1=Code;[Code1]=Code),pp_lp2p2(Code,'',S4,N2),%pp_lp2p2([Then],'',S5,N2),%pp_lp2p2([Else],'',S51,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),pp_lp2p2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,'{',%',','\n',Ts,'[', S4,%'->',%'\n',Ts, '\n'%Ts,'],[', %S5,';',%'\n',Ts, %'\n',%Ts,'],[', %S51%,'\n' ,Ts ,'}',',',S3],S2)); (List2=[[n,"->"],[If,Then,Else]]-> % if then else(N2 is N+1,pp_lp2p2([If],'',S4,N2),pp_lp2p2([Then],'',S5,N2),pp_lp2p2([Else],'',S51,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),pp_lp2p2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,'(',%',','\n',Ts,'[', S4,'->',%'\n',Ts, '\n',%Ts,'],[', S5,';',%'\n',Ts, '\n',%Ts,'],[', S51%,'\n' %,Ts ,')',',',S3],S2)); %concat_list([S1,'\n',Ts,S4,',','\n',Ts,S5,',','\n',Ts,S51,',',S3],S2));(%pp_lp2p2(List2,'',List2a,N),%trace,(List2=[[N_or_v,cut]|_],(N_or_v=n->true;N_or_v=v))->(pp_lp2p2(Lists3,'',S3,N),%pp4_lp2p3_1_4(List2,List2a),List2a="!",length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),(S3=''->Comma='';Comma=','),concat_list([S1,'\n',Ts,List2a,Comma,S3],S2));(List2=[[n,comment],[Comment]]-> % if then else(pp_lp2p2(Lists3,'',S3,N),%N2 is N+1,%pp_lp2p2([Comment],'',S4,N),%pp_lp2p2([Then],'',S5,N2),%pp_lp2p2([Else],'',S51,N2),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),%pp_lp2p2(Lists3,'',S3,N),concat_list([S1,'\n',Ts,Comment,S3],S2));(%pp_lp2p2(List2,'',List2a,N),%trace,(List2=[[N_or_v,_]|_],(N_or_v=n->true;N_or_v=v))->(pp_lp2p2(Lists3,'',S3,N),pp4_lp2p3_1_4(List2,List2a),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),(S3=''->Comma='';Comma=','),concat_list([S1,'\n',Ts,List2a,Comma,S3],S2));(N2 is N+1,pp_lp2p2(List2,'',List2a,N2),pp_lp2p2(Lists3,'',S3,N),%term_to_atom(List2,List2a),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),concat_list([S1,%'\n',Ts,'\n',Ts,'(',List2a,'\n',Ts,')',',',S3],S2))))))))),%concat_list([S1,%'\n',Ts,%List2a,',',S3],S2)))),/*(term_to_atom(List2,List2a),pp_lp2p2(Lists3,'',S3,N),length(Counter,N),findall('\t',member(_,Counter),Ts1),concat_list(Ts1,Ts),concat_list([S1,'\n',Ts,List2a,',',S3],S2)))),*/!.pp_lp2p_1(List,String) :-pp4_lp2p3_1_4(List,Atom),atom_string(Atom,String).pp_lp2p3(List1,S1,S3) :-%symbol_1_lp2p(Symbol,Symbol1),%List1=List2,((pp4_lp2p3_1(List1,String),%trace,%pp_lp2p2(Body,'',B1,1),%string_concat(B1,",",B11),concat_list([S1,String,".\n"%,'.\n\n'],S3))->true;((pp4_lp2p3_2(List1,String),%trace,%pp_lp2p2(Body,'',B1,1),%string_concat(B1,",",B11),concat_list([S1,String,"\n"%,%B1,%'.\n\n'],S3))->true;((pp4_lp2p3_21(List1,String),%trace,%pp_lp2p2(Body,'',B1,1),%string_concat(B1,",",B11),concat_list([S1,String,".\n"%,%B1,%'.\n\n'],S3))->true;%)->true;((pp4_lp2p3_3(List1,String,B1),%string_concat(B1,",",B11),concat_list([S1,String,B1,'.\n\n'],S3)->true;((pp4_lp2p3_4(List1,String,B1),%string_concat(B1,",",B11),concat_list([S1,String,B1,'.\n\n'],S3)->true;((pp4_lp2p3_5(List1,String),%string_concat(B1,",",B11),concat_list([S1,String,'.\n\n'],S3)->true;((pp4_lp2p3_6(List1,String),%string_concat(B1,",",B11),concat_list([S1,String,'.\n\n'],S3)))))))))))),!.pp4_lp2p3_1_4(L,S) :-(pp4_lp2p3_1(L,S)->true;(pp4_lp2p3_2(L,S)->true;(pp4_lp2p3_21(L,S)->true;((pp4_lp2p3_3(L,String,B1),string_concat(String,B1,S))->true;(pp4_lp2p3_4(L,String,B1),string_concat(String,B1,S)))))),!.
pp_lp2p2([],S,S,_N):-!.
pred_minus_three([Pred_id1,Level,Predicate_number,_Line_number,"predicate",Query_a,Vars,All_predicate_numbers], Result21, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2) :-%trace,member([[firstargs,Pred_id1],_FirstArgs],Globals1),member([[function,Pred_id1],Function],Globals1),member([[arguments1,Pred_id1],Arguments1],Globals1),member([[skip,Pred_id1],Skip],Globals1),member([[level,Pred_id1],Level_a],Globals1),Globals1=Globals3,%/*(trace,(debug3(on)->write0(["L",Level_a]);true),(debug_fail(Skip,[Function,Arguments1])->true;true),%*/%trace,%updatevars(FirstArgs,Vars,[],Result),%unique1(Result,[],Vars3),/*Pred_id1=Pred_id4,get_last_p_before_n(Choice_point_trail1,[%_,_,Pred_id4,_Level,_Predicate_number4,-1,"predicate",[Function,Arguments1], %**_Vars,_All_predicate_numbers4],[_,_,Pred_id4,_Level,_Predicate_number4,-1,"predicate",[Function,Arguments1], %**_Vars,_All_predicate_numbers4],_%Choice_point_trail5,CP_Vars1,CP_Vars3),*//*trace,writeln1(["here1:",%_,_,Pred_id4,_Level,_Predicate_number4,-1,"predicate",[Function,Arguments1], %**_Vars,_All_predicate_numbers4]),*/%trace,%findresult3(Arguments1,Vars3,[],Result22),/*(debug3(on)->write(["L",Level_a]);true),   debug_exit(Skip,[Function,Result22]), % return result21   checktypes(Function,Result22),*/((not(Level_a=0))->(Level2 is Level-1,(Level2 = 0 ->%trace,(%trace,(debug3(on)->write0(["L",Level_a]);true),(debug_fail(Skip,[Function,Arguments1])->true;true),ssi1([_,0,Predicate_number,-3,"predicate",Query_a,Vars,All_predicate_numbers], Result21, Functions,Vars2,Result1, Result2, Globals1,Globals2,Choice_point_trail1,Choice_point_trail3,CP_Vars1,CP_Vars2));(%trace,%(Mode=pred_minus_three->%writeln1([globals3,Globals3]),member([pred_id_chain,PID1,Pred_id1],Globals3),%;%PID1=Pred_id1), %trace,get_last_p_before_n(Choice_point_trail1,[PID1,Level3,Predicate_number3,["returns to",Line_number3,"pred_id",Pred_id3],"predicate",Query2,Vars4,All_predicate_numbers3],[_Cp_a,_Cb_b,PID1,Level3,Predicate_number3,["returns to",Line_number3,"pred_id",Pred_id3],"predicate",Query2,Vars4,All_predicate_numbers3],_,CP_Vars1,CP_Vars41),get_last_p_before_n(Choice_point_trail1,[PID1,Level21,Predicate_number2,-1%Line_number2b,"predicate",Query21,Vars9,All_predicate_numbers2],[_Cp_a1,_Cb_b1,PID1,Level21,Predicate_number2,-1%Line_number2b,"predicate",Query21,Vars9,All_predicate_numbers2],_,CP_Vars41,CP_Vars42),/*delete_cp(Choice_point_trail1,[_Cp_a1,_Cb_b1,PID1,Level21,Predicate_number2,-1%Line_number2b,"predicate",Query21,Vars9,All_predicate_numbers2],Choice_point_trail1a,CP_Vars42,CP_Vars4,_),*/Choice_point_trail1=Choice_point_trail1a,CP_Vars42=CP_Vars4,%trace,writeln1([all_predicate_numbers2,All_predicate_numbers2]),%notrace,/*writeln1(get_last_p_before_n(Choice_point_trail1,[PID1,Level3,Predicate_number2,-1%Line_number2b,"predicate",Query2,Vars4,All_predicate_numbers2],[_Cp_a,_Cb_b,PID1,Level3,Predicate_number2,Line_number2b,"predicate",Query2,Vars4,All_predicate_numbers2],_,CP_Vars1,CP_Vars4)),*/%member([[vars1,PID1],Vars5],Globals3),(%Line_number2b=["returns to",%Line_number3,"pred_id",Pred_id3]true % *** this may lower test results->(%member([[pred_num,Pred_id3],Predicate_number2],Globals3),get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("true",Dbw_true1),Dbw_true1=Dbw_true,member([Predicate_number2,_F|Rest],Functions),(Rest=[_Args,":-",Lines]->true;(Rest=[_Args]->Lines=[[[Dbw_n,Dbw_true]]];(Rest=[":-",Lines];(Rest=[],Lines=[[[Dbw_n,Dbw_true]]])))),get_lang_word("on_true",Dbw_on_true1),Dbw_on_true1=Dbw_on_true,get_lang_word("go_after",Dbw_go_after1),Dbw_go_after1=Dbw_go_after,get_lang_word("on_false",Dbw_on_false1),Dbw_on_false1=Dbw_on_false,get_lang_word("go_to_predicates",Dbw_go_to_predicates1),Dbw_go_to_predicates1=Dbw_go_to_predicates,member([Line_number3,[Dbw_on_true,_A],[Dbw_go_after,_B],[Dbw_on_false,C],[Dbw_go_to_predicates,_D]|_Line],Lines),C=Line_number2a%trace,/*reverse(Globals1,Globals33), member([[firstargs_uv2,Pred_id3],FirstArgs1],Globals33),%trace,%writeln1([globals33,Globals33]),Globals33=Globals43,member([[vars1,Pred_id3],Vars11],Globals43),Globals43=Globals212,reverse(Globals212,Globals22),updatevars2(FirstArgs1,Vars3,[],Vars5),updatevars3(Vars11,Vars5,Vars6),reverse(Vars6,[],Vars7),((not(Vars7=[])->(unique1(Vars7,[],Vars8)));(Vars8=[])),Vars8=Vars44 %% 4 not 2? ****/);(Line_number2a=Line_number3%Line_number2b%,%,Level_x=Level2%Vars44=Vars3)), % Line_number2 to 2bmember([[level,PID1],Level_b],Globals3),%trace,ssi1([PID1,Level_b,Predicate_number2,Line_number2a,"line",-,Vars4,All_predicate_numbers2], _, Functions,Vars2,Result1, Result2, Globals3,Globals2,Choice_point_trail1a,Choice_point_trail3,CP_Vars4,CP_Vars2))))).
predicate(A) -->name1(Word11),"(",varnames(Varnames),")",spaces1(_),":-",newlines1(_),lines(L), ".",{A=[[Word11,"*","*"],Varnames,(:-),L]}.
predicate(A) -->name1(Word11), "(",newlines1(N1),varnames(Varnames),%,newlines1(N2),")",".", {foldr(append,[[[[n,Word11],Varnames]],N1],A)}.
predicate(A) -->name1(Word11), "(",varnames(Varnames),")",".", {A=[[Word11,"*","*"],Varnames]}.
predicate(A2) -->":-",newlines1(_),name1(Word11),%"(",newlines1(N1),name1(Word13),%varnames(Varnames),newlines1(_),"/",newlines1(_),name1(Word12),%")",newlines1(N2),%":-",%newlines1(N3),%{trace},%lines(L), ".",{foldr(append,[[[":-",[n,Word11],[Word13,"/",Word12]%,Varnames%N,]],N1,N2%,N3],A2)%delete(A,[],A2)}.
predicate(A2) -->name1(Word11),"(",newlines1(N1),varnames(Varnames),")",newlines1(N2),"-->",newlines1(N3),lines(L), ".",{foldr(append,[[[[n,Word11],Varnames,"->",%N,L]],N1,N2,N3],A2)%delete(A,[],A2)}.
predicate(A2) -->name1(Word11),"(",newlines1(N1),varnames(Varnames),")",newlines1(N2),"->",newlines1(N3),lines(L), ".",{foldr(append,[[[[n,Word11],Varnames,"->",L]],N1,N2,N3],A2)%delete(A,[],A2)}.
predicate(A2) -->name1(Word11),"(",newlines1(N1),varnames(Varnames),")",newlines1(N2),":-",newlines1(N3),%{trace},lines(L), ".",{foldr(append,[[[[n,Word11],Varnames,":-",%N,L]],N1,N2,N3],A2)%delete(A,[],A2)}.
predicate(A2) -->name1(Word11),newlines1(N1),":-",newlines1(N2),%{trace},lines(L), ".",{foldr(append,[[[[n,Word11],":-",%N,L]],N1,N2],A2)%delete(A,[],A2)}.predicate(A2) -->name1(Word11),newlines1(N1),"->",newlines1(N2),lines(L), ".",{foldr(append,[[[[n,Word11],"->",%N,L]],N1,N2],A2)%delete(A,[],A2)}.predicate(A2) -->name1(Word11),newlines1(N1),"-->",newlines1(N2),lines(L), ".",{foldr(append,[[[[n,Word11],"->",%N,L]],N1,N2],A2)%delete(A,[],A2)}./**name1([L3|Xs]) --> [X], {string_codes(L2,[X]),(char_type(X,alnum)->true;L2="_"),downcase_atom(L2,L3)}, name1(Xs), !.
predicate_or_rule([[Dbw_n,_Name]|_Variables]) :- get_lang_word("n",Dbw_n),!.
predicate_or_rule([[n,_Name]|_Variables]) :- !.
predicate_or_rule_name(A) :- atom(A),!.
predicate_or_rule_name([Dbw_n1,_Name]) :- %trace,get_lang_word("n",Dbw_n),Dbw_n=Dbw_n1,!.
predicate_or_rule_name([V_or_n,_Name]) :- get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,(V_or_n=Dbw_v->true;V_or_n=Dbw_n),!.%%,atom(Name),!.
predicate_or_rule_name([n,_Name]) :- !.
predicate_or_rule_name([n,_Name]) :- !.predicate_or_rule([[n,_Name]|_Variables]) :- !.
predicate_or_rule_name_or_terminal(A) :- (atom(A)->true;(number(A)->true;string(A))).
predicate_or_rule_name_or_terminal([A]) :-predicate_or_rule_name(A).
predicate_or_rule_name_or_terminal([]).
prepare_string_c(S,O) :-string_codes(S,O).
pretty_print_dfs_in_order((Item7,Item4,Item8),N,D,E) :- N1 is N+3, pretty_print_dfs_in_order(Item7,N1,D,D1), numbers(N,1,[],Ns), findall(A,(member(_,Ns),A=" "),B), foldr(string_concat,B,B1), foldr(string_concat,[B1,"-",Item4,"-","\n"],F), append(D1,[F],F1), pretty_print_dfs_in_order(Item8,N1,F1,E),!.
pretty_print_dfs_post_order(null,_) :- !.
prettyprint1(C,N) :-prettyprint2(C,N,1),writeln(''),N2 is N-1,prettyprint1(C,N2).
prettyprint1A(C,N) :-prettyprint2A(C,N,1),writeln(''),N2 is N-1,prettyprint1A(C,N2).
prettyprint2(_C,_N,X1) :- x(X), X1 is X+1, !.prettyprint2(C,N,M) :-member([M,N,M2],C),write(M2),write('\t'),M3 is M+1,prettyprint2(C,N,M3).
prettyprint2A(C,N,M) :-member([M,N,M2],C),(not(M2=[])->write('*');write(' ')),M3 is M+1,prettyprint2A(C,N,M3).
prettyprint2A(_C,_N,X1) :- x(X), X1 is X+1, !.
prettyprint2_e(C,N,M,X) :-member([M,N,M2],C),(M2=[]->write(' ');(member(2,M2)->write(2);(write(1)))),write('\t'),M3 is M+1,prettyprint2_e1(C,N,M3,X).% 25 left% Second, he drove through the courtyard.
prettyprint2_e(_C,_N,X1,X) :- X1 is X+1, !.
prettyprint2_lg(_C,_N,X1,X) :- X1 is X+1, !.prettyprint2_lg(C,N,M,X) :-member([M,N,M2],C),(M2=[]->write(' ');write('*')),write('\t'),M3 is M+1,prettyprint2_lg(C,N,M3,X).% 37 left% First, he started at the edge of the courtyard.
prettyprint_3d_1_e(C,N,X,Z) :-prettyprint_3d_2_e(C,N,Z,1,X),writeln(''),N2 is N-1,prettyprint_3d_1_e(C,N2,X,Z).
prettyprint_3d_2_e(C,N,Z,M,X) :-member([M,N,Z,M2],C),(M2=[]->write(' ');(member(2,M2)->write(2);(write(1)))),write('\t'),M3 is M+1,prettyprint_3d_2_e(C,N,Z,M3,X).
prettyprint_3d_2_e(_C,_N,_Z,X1,X) :- X1 is X+1, !.
prettyprint_scale2A(C,N,M) :-member([M,N,M2],C),(not(M2=[])->write('*');write(' ')),M3 is M+1,prettyprint_scale2A(C,N,M3).
prettyprint_scale2A(_C,_N,X1) :- x1(X), X1 is X+1, !.
print_map_path1(Grid1,Grid,Path) :-Path=[[X,Y]|Path2],member([X,Y,Pixel1],Grid1),append(Pixel1,[-],Pixel2),delete(Grid1,[X,Y,_],Grid2),append(Grid2,[[X,Y,Pixel2]],Grid3),print_map_path1(Grid3,Grid,Path2).
print_map_path3d1(Grid1,Grid,Path) :-Path=[[Z,X,Y]|Path2],member([Z,X,Y,Pixel1],Grid1),append(Pixel1,[-],Pixel2),delete(Grid1,[Z,X,Y,_],Grid2),append(Grid2,[[Z,X,Y,Pixel2]],Grid3),print_map_path3d1(Grid3,Grid,Path2).
process1([A|As],_To_lang,String1,String2) :- %trace,%term_to_atom(A,A1),%term_to_atom(As,As1),(As=[]->(concat_list([String1,A],String2)%,notrace);(maplist(append,[[[String1],[A],As]],[C]),concat_list(C,String2)%,notrace)),!.
process1([],_To_lang,String,String) :- !.
process2([A|As],To_lang,String1,String2) :- split_string1(A,["&"],A11), % docs.txt needs a character between `,<,>,&process3(A11,To_lang,"",A1),%term_to_atom(A,A1),%term_to_atom(As,As1),(As=[]->concat_list([String1,A1],String2);(maplist(append,[[[String1],[A1],As]],[C]),concat_list(C,String2))),!.
process2([],_To_lang,String,String) :- !.
process3([A|As],_To_lang,String1,String2) :- %term_to_atom(A,A1),%term_to_atom(As,As1),(As=[]->concat_list([String1,A],String2);(maplist(append,[[[String1],[A],As]],[C]),concat_list(C,String2))),!.
process3([],_To_lang,String,String) :- !.
process_body2(Body1,Body2%%,Body3) :-        Body1=[[Statements1|Statements1a]|Statements2        ],not(predicate_or_rule_name(Statements1)),process_body2([Statements1],Body3), %% 2->1process_body2(Statements1a,Body4),        process_body2(Statements2,Body5),    append([Body3,Body4],Body6),append([[Body6],Body5],Body2),!.
process_cp(Findall_end_line,FA,D1,E1,Query_a2,Vars1,End_result, Functions,Vars2, %% CPVs here?**** CPV0,CPV to CPV1,CPV2Result1, Result2, Globals3,Globals2,Choice_point_trail1e,Choice_point_trail3,CP_Vars31,CP_Vars2%*/) :-%trace,%trace,writeln(here1),D1=[Pred_id3,Level4%1,Predicate_number14,Line_number_a14,"findall",-,[old_vars,Old_vars],[findall_vars,Findall_vars],[format_vars,Format_vars],[result_var,Result_var]],%writeln([d1,D1]),E1=[Pred_id2,Level3,Predicate_number2,Line_number_a2,Pred_or_line%"line",Query_a2,_CPV0,CPV3],%trace,(Pred_or_line="line"->(CPV3=[CPV_A1,CPV_A2,CPV_A31,CPV_A41,CPV_A51,CPV_A61,CPV],%CPV=[CPV1|CPV2],CPV=[[CPV11,CPV12]|CPV2],get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,remember_and_turn_off_debug(Debug),find_sys(Sys_name),%trace, interpretpart(match4,Format_vars,[Dbw_v,Sys_name],Vars1,Vars2fa,_),%writeln([*,FA]),(not(FA=fail)->getvalue([Dbw_v,Sys_name],Value3,Vars2fa);is_empty(Value3)),(is_empty(Value3)->Findall_vars=Findall_vars2;append(Findall_vars,[Value3],Findall_vars2)),turn_back_debug(Debug),%trace,get_last_p_before_n(Choice_point_trail1e,D1,[Cp_a1,Cp_a2|D1],_,CP_Vars31,CP_Vars4),%trace,replace_cp(Choice_point_trail1e,Cp_a1,Cp_a2,D1,[Pred_id3,Level4%1,Predicate_number14,Line_number_a14,"findall",-,[old_vars,Old_vars],[findall_vars,Findall_vars2],[format_vars,Format_vars],[result_var,Result_var]],Choice_point_trail1b,CP_Vars4,CP_Vars6),%delete_cp(Choice_point_trail1e,[Cp_a1,Cp_a2|D1],Choice_point_trail1a,CP_Vars4,CP_Vars5,_),%D2=[Pred_id3,Level4%1%,Predicate_number14,Line_number_a14,"findall",-,[old_vars,Old_vars],[findall_vars,Findall_vars2],[format_vars,Format_vars],[result_var,Result_var]],%append_cp(Choice_point_trail1a,[D2],Choice_point_trail1b,CP_Vars5,CP_Vars6),%trace,%trace,(cp_since_findall_start(Choice_point_trail1b,_,_,E1,_,CP_Vars6,_)->(%trace,delete_cp(Choice_point_trail1b,[_,_|E1],Choice_point_trail1c,CP_Vars6,CP_Vars7,_));(CP_Vars6=CP_Vars7,Choice_point_trail1b=Choice_point_trail1c)),%delete_cp(Choice_point_trail1b,[_,_|E1],Choice_point_trail1c,CP_Vars6,CP_Vars7,_),%*%CPV22=CPV2,CPV22=[CPV_A1,CPV_A2,CPV12,CPV11],CPV23=[CPV_A1,CPV_A2,CPV_A31,CPV_A41,CPV_A51,CPV_A61,CPV2],%/*%writeln(["*1",append_cp(Choice_point_trail1c,[[Pred_id2,Level3,Predicate_number2,Line_number_a2,Pred_or_line,_,_,CPV23]],Choice_point_trail1d,CP_Vars7,CP_Vars8)]),append_cp(Choice_point_trail1c,[[Pred_id2,Level3,Predicate_number2,Line_number_a2,Pred_or_line,_,_,CPV23]],Choice_point_trail1d,CP_Vars7,CP_Vars8),/*%*//*get_last_p_before_n(Choice_point_trail1b,E1,[Cp_a11,Cp_a21|E1],_,CP_Vars6,CP_Vars7),%trace,replace_cp(Choice_point_trail1b,Cp_a11,Cp_a21,E1,[Pred_id2,Level3,Predicate_number2,Line_number_a2,Pred_or_line,_,_,CPV23],Choice_point_trail1d,CP_Vars7,CP_Vars8),*/%writeln1(["*1",append_cp(Choice_point_trail1c,[[Pred_id2,Level3,Predicate_number2,Line_number_a2,Pred_or_line,_,_,CPV23]],Choice_point_trail1d,CP_Vars7,CP_Vars8)]),get_lang_word("findall_exit_function",Dbw_findall_exit_function1),Dbw_findall_exit_function1=Dbw_findall_exit_function,append_cp(Choice_point_trail1d,[[Pred_id2,Level3,Predicate_number2,[Dbw_findall_exit_function,Findall_end_line],"line",_,Vars2fa,_]],Choice_point_trail1d1,CP_Vars8,CP_Vars81), % Pred_id n?%CPV1=[CPV10, "prev_pred_id", Prev_pred_id],ssi1([Pred_id2,Level3, %*Predicate_number2,Line_number_a2,"line",Query_a2,Old_vars,CPV23], End_result, Functions,Vars2, %% CPVs here?**** CPV0,CPV to CPV1,CPV2Result1, Result2, Globals3,Globals2,Choice_point_trail1d1,Choice_point_trail3,["appearance of command",CPV22],CP_Vars81,CP_Vars2));(Pred_or_line="predicate"->(CPV3=CPV,CPV=[CPV1|CPV2],get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,remember_and_turn_off_debug(Debug),find_sys(Sys_name),  interpretpart(match4,Format_vars,[Dbw_v,Sys_name],Vars1,Vars2fa,_),%writeln([*,FA]),(not(FA=fail)->getvalue([Dbw_v,Sys_name],Value3,Vars2fa);is_empty(Value3)),(is_empty(Value3)->Findall_vars=Findall_vars2;append(Findall_vars,[Value3],Findall_vars2)),turn_back_debug(Debug),%trace,get_last_p_before_n(Choice_point_trail1e,D1,[Cp_a1,Cp_a2|D1],_,CP_Vars31,CP_Vars4),replace_cp(Choice_point_trail1e,Cp_a1,Cp_a2,D1,[Pred_id3,Level4%1,Predicate_number14,Line_number_a14,"findall",-,[old_vars,Old_vars],[findall_vars,Findall_vars2],[format_vars,Format_vars],[result_var,Result_var]],Choice_point_trail1b,CP_Vars4,CP_Vars6),%x%delete_cp(Choice_point_trail1e,[Cp_a1,Cp_a2|D1],Choice_point_trail1a,CP_Vars4,CP_Vars5,_),%xD2=[Pred_id3,Level4%1%,Predicate_number14,Line_number_a14,"findall",-,[old_vars,Old_vars],[findall_vars,Findall_vars2],[format_vars,Format_vars],[result_var,Result_var]],%append_cp(Choice_point_trail1a,[D2],Choice_point_trail1b,CP_Vars5,CP_Vars6),delete_cp(Choice_point_trail1b,[_,_|E1],Choice_point_trail1c,CP_Vars6,CP_Vars7,_),%(Pred_or_line="line"->%(CPV22=[CPV_A1,CPV_A2,CPV_A3,CPV_A4,CPV_A5,%CPV_A6,CPV2]%);%(Pred_or_line="predicate"->CPV22=CPV2,%/*%writeln1([*,append_cp(Choice_point_trail1c,[[Pred_id2,Level3,CPV1,Line_number_a2,Pred_or_line,_,_,CPV22]],Choice_point_trail1d,CP_Vars7,CP_Vars8)]),% Get and delete old cp%trace,(cp_since_findall_start3(Choice_point_trail1c,_Level1,_D13,CPX,_D11,CP_Vars7,CP_Vars8)->(%trace,delete_cp(Choice_point_trail1c,CPX,Choice_point_trail1c1,CP_Vars8,CP_Vars9,_));(CP_Vars7=CP_Vars9,Choice_point_trail1c=Choice_point_trail1c1)),append_cp(Choice_point_trail1c1,[[Pred_id2,Level3,CPV1,Line_number_a2,Pred_or_line,_,_,CPV22]],Choice_point_trail1d,CP_Vars9,CP_Vars8),%*/%get_last_p_before_n(Choice_point_trail1b,E1,[Cp_a11,Cp_a21|E1],_,CP_Vars6,CP_Vars7),%trace,%replace_cp(Choice_point_trail1b,Cp_a11,Cp_a21,E1,[Pred_id2,Level3,CPV1,Line_number_a2,Pred_or_line,_,_,CPV22],Choice_point_trail1d,CP_Vars7,CP_Vars8),%writeln1(["*2",append_cp(Choice_point_trail1c,[[Pred_id2,Level3,Predicate_number2,Line_number_a2,Pred_or_line,_,_,CPV23]],Choice_point_trail1d,CP_Vars7,CP_Vars8)]),get_lang_word("findall_exit_function",Dbw_findall_exit_function1),Dbw_findall_exit_function1=Dbw_findall_exit_function,get_lang_word("findall_fail_function",Dbw_findall_fail_function1),Dbw_findall_fail_function1=Dbw_findall_fail_function,%writeln([*,FA]),(not(FA=exit)->FA1=Dbw_findall_fail_function;FA1=Dbw_findall_exit_function),append_cp(Choice_point_trail1d,[[Pred_id2,Level3,CPV1,[FA1,Findall_end_line],"line",_,Vars2fa,_]],Choice_point_trail1d1,CP_Vars8,CP_Vars81), % Pred_id n?%trace,(CPV1=[CPV10, "prev_pred_id", Prev_pred_id]->true;(%writeln("Error here"),fail)),%->ssi1([Prev_pred_id,Level3, %*CPV10,Line_number_a2,"line",Query_a2,_,CPV2], End_result, Functions,Vars2, %% CPVs here?**** CPV0,CPV to CPV1,CPV2Result1, Result2, Globals3,Globals2,Choice_point_trail1d1,Choice_point_trail3,CP_Vars81,CP_Vars2)/*;(Line_number_a2=["returns to", CPV10, "pred_id", Prev_pred_id]),%[CPV10, "prev_pred_id", Prev_pred_id]),ssi1([Prev_pred_id,Level3, %*CPV10,Line_number_a2,"line",Query_a2,_,CPV2], End_result, Functions,Vars2, %% CPVs here?**** CPV0,CPV to CPV1,CPV2Result1, Result2, Globals3,Globals2,Choice_point_trail1d1,Choice_point_trail3,CP_Vars81,CP_Vars2)).
process_rhythm2(Replacements,A,D) :- Replacements=[[B,C]|G], atomic_list_concat(E,B,A), atomic_list_concat(E,C,F), process_rhythm2(G,F,D),!.
process_strings1(String,String1,String2) :-string_concat(String3,String4,String),string_length(String3,1),append(String1,[String3],String5),process_strings1(String4,String5,String2).
process_terms2(T1,T2,T3,R1,R2) :-%trace,%T1=[T4|T51],((%fail,member(["[",T6,"]"],T1))->((append(T4,B,T1),append([["[",T6,"]"]],T51,B),(process_terms2(T6,[],T5,[],R3),foldr(append,[["["],T5,["]"]],T53),T54=T53,R6=R3%get_var_num(N),T5=[r,N],foldr(append,[R1,R5,[T52]],R6)%)%;(fail%T51=[],R6=[])));((%fail,%trace,(member(["[","]"],T1))->(append(T4,B,T1),append([["[","]"]],T51,B),(%process_terms(T6,[],T5,[],R3),foldr(append,[["["],["]"]],T53),T54=T53,R6=[]%get_var_num(N),T5=[r,N],foldr(append,[R1,R5,[T52]],R6)%)%;(fail%T51=[],R6=[]));(T54=[],T4=T1,T51=[])))),%trace,(foldr(append,T4,T45)->true;T4=T45),T9=T45,%trace,foldr(append,[T2,T9,T54],T61),append(R1,[R6],R7),process_terms2(T51,T61,T3,R7,R2),!.
process_terms3(T1,T2,T3,R1,R2) :-%trace,%T1=[T4|T51],((%fail,member(["[",T6,"]"],T1))->((append(T4,B,T1),append([["[",T6,"]"]],T51,B),(process_terms3(T6,[],T5,[],R3),foldr(append,[["["],T5,["]"]],T53),T54=[T53],R6=R3%get_var_num(N),T5=[r,N],foldr(append,[R1,R5,[T52]],R6)%)%;(fail%T51=[],R6=[])));((%fail,%trace,(member(["[","]"],T1))->(append(T4,B,T1),append([["[","]"]],T51,B),(%process_terms(T6,[],T5,[],R3),foldr(append,[["["],["]"]],T53),T54=[T53],R6=[]%get_var_num(N),T5=[r,N],foldr(append,[R1,R5,[T52]],R6)%)%;(fail%T51=[],R6=[]));(T54=[],T4=T1,T51=[])))),%trace,(foldr(append,T4,T45)->true;T4=T45),(all_distinct1(T45)->T9=T45;%trace,(s2g_mode(findall)->(findall(T8,try(T45,T8),T81),T9=[poss,T81]);(try(T45,T9)))/*longest_to_shortest_substrings1(T45,T43),%trace,(find_first((T44=T43,%member(T44,T43),findall(T52,(member(C1,T44),(find_lists3a(C1,T52)->true;fail%%C1=T52))),T7),length(T7,T7L),length(T44,T7L),foldr(append,T7,T8)))->true;T8=T45))),*/),foldr(append,[T2,T9,T54],T61),append(R1,[R6],R7),process_terms3(T51,T61,T3,R7,R2),!.
productivity(b,1,1).
productivity(c,1,2).
prompt_meditation :-repeat,writeln("Please think of 108 arems and 108 friendlinesses, then enter \"y\":"),read_string(user_input,"\n\r","\n\r",_,S),S="y",!.
prompt_question :-repeat,writeln("Please ask the future Head of State and the Simulation Co-ordinator for the age freezing medicine, then say \"too\" to each of the following:\n\nA, B, B to B for Reishi Mushroom\nA, B, B to B for Goji\nA, B, B to B for Ginseng\nA, B, B to B for He-Shou-Wu\nA, B, B to B for Gotu Kola\nA, B, B to B for Schisandra\nA, B, B to B for Love head of state\nA, B, B to B for Thank who helped me with immortality medicine, body replacement and anti-ageing\nA, B, B to B for Thank head of state for Reishi Mushroom\nA, B, B to B for Thank head of state for Goji\nA, B, B to B for Thank head of state for Ginseng\nA, B, B to B for Thank head of state for He-Shou-Wu\nA, B, B to B for Thank head of state for Gotu Kola\nA, B, B to B for Thank head of state for Schisandra\nA, B, B to B for Immortality\nA, B, B to B for Body replacement\nA, B, B to B for Anti-ageing medicine\nA, B, B to B for immortality medicine, body replacement and anti-ageing for memory\nA, B, B to B for immortality medicine, body replacement and anti-ageing for thinking\nA, B, B to B for immortality medicine, body replacement and anti-ageing for stopping dementia\nA, B, B to B for immortality medicine, body replacement and anti-ageing for seeing clearly\nA, B, B to B for immortality medicine, body replacement and anti-ageing for muscle relaxation\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Circulatory system / Cardiovascular system\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Digestive system and Excretory system\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Endocrine system\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Integumentary system / Exocrine system\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Immune system and lymphatic system:\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Muscular system\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Nervous system\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Renal system and Urinary system\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Reproductive system\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Respiratory system\nA, B, B to B for immortality medicine, body replacement and anti-ageing for Skeletal System\nA, B, B to B for immortality medicine, body replacement and anti-ageing for antidepressant\nA, B, B to B for immortality medicine, body replacement and anti-ageing for antipsychotic\nA, B, B to B for Other medicines for the body\nA, B, B to B for ginkgo biloba\nA, B, B to B for practicum for others in immortality, etc.\nA, B, B to B for the other As\nA, B, B to B for Thank head of state.\n\nThen enter \"y\":"),read_string(user_input,"\n\r","\n\r",_,S),S="y",!.
protect(File,Year1,_Month1,_Day1,[Meditator|Meditators],Old1,Old2) :-Meditator=[_FirstName,_LastName,_DayDOB,_MonthDOB,_YearDOB,_DayLearned,_MonthLearned,YearLearned],Year2 is YearLearned+101,(Year2=Year1->append(Old1,[Meditator],Old3);Old3=Old1),texttobr2(File),texttobr(File), %% Sendertexttobr2(File),texttobr(File), %% Recipientprotect(File,Year1,_Month,_Day,Meditators,Old3,Old2).
protect(_File,_Year,_Month,_Day,[],Old1,Old1) :- !.
put_TN2(T,Dbw_type,Ns,L1,L2,TN1,TN2) :- Ns=[[N1,Data1],[N2,Data2]|Ns2], replace_in_term(TN1, [[T,Dbw_type,N0],[T,Dbw_type,N1]], [[T,Dbw_type,N0],[T,Dbw_type,N2]],TN3), append(TN3,[[[T,Dbw_type,N1],[T,Dbw_type,N2]]],TN4), append(Data1,[Data2],Data3), replace_in_term(L1, [T,Dbw_type,N1,Data1], [T,Dbw_type,N2,Data3],L3), put_TN2(T,Dbw_type,[N2|Ns2],L3,L2,TN4,TN2).
put_stwa(Item, Address, Term1, Term2) :-put_sub_term_wa(Item, Address, Term1, Term2).
put_stwa_smooth(Item, Address, Term1, Term2) :-put_sub_term_wa_smooth(Item, Address, Term1, Term2).
put_sub_term_wa1(List,Ns,L1,L2) :- Ns=[N|Ns2], get_item_n(L1,N,L3), put_sub_term_wa1(List,Ns2,L3,L4), put_item_n(L1,N,L4,L2).
put_sub_term_with_address(Item, Address, Term1, Term2) :-put_sub_term_wa(Item, Address, Term1, Term2).
put_sub_term_with_address_smooth(Item, Address, Term1, Term2) :-put_sub_term_wa_smooth(Item, Address, Term1, Term2).
put_subterm_with_address(Item, Address, Term1, Term2) :-put_sub_term_wa(Item, Address, Term1, Term2).
put_subterm_with_address_smooth(Item, Address, Term1, Term2) :-put_sub_term_wa_smooth(Item, Address, Term1, Term2).
putvalue(Variable,Value,Vars1,Vars2) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value);        (isvar(Variable),isvalstrorundef(Value),updatevar(Variable,Value,Vars1,Vars2))),!. getvar(Variable,Value,Vars) :-        member([Variable,Value],Vars),not(Value=empty).
putvalue(Variable,Value,Vars1,Vars2) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value,Vars1=Vars2)->true;        (isvar(Variable),isvalstrorundef(Value),updatevar(Variable,Value,Vars1,Vars2))),!. getvar(Variable,Value,Vars) :-((member([Variable,Value],Vars),not(Value=empty))->true;        ((aggregate_all(count,member([Variable,_Value],Vars),0)->true;%%member([Variable,empty],Vars)),Value=empty)).
putvalue(Variable,Value,Vars1,Vars2) :-        ((not(isvar(Variable)),isvalstrorundef(Value),Variable=Value,Vars1=Vars2)->true;        (isvar(Variable),isvalstrorundef(Value),updatevar(Variable,Value,Vars1,Vars2))),!. getvar(Variable,Value,Vars) :-        member([Variable,Value],Vars),not(Value=empty).
putvalue(Variable,Value,Vars1,Vars2) :-%writeln1(putvalue(Variable,Value,Vars1,Vars2)),%trace,        ((not(isvar(Variable)),isvalstrorundef_or_compound(Value),Variable=Value,Vars1=Vars2)->true;        (isvar(Variable),isvalstrorundef_or_compound(Value),updatevar(Variable,Value,Vars1,Vars2))),!. isvalstrorundef_or_compound(Value):-(compound(Value)->true;isvalstrorundef(Value)),!.
putvalue_equals4(Variable,Value,Vars1,Vars2) :-(equals4(on)->putvalue_equals41(Variable,Value,Vars1,Vars2);putvalue(Variable,Value,Vars1,Vars2)).
qa("Can't you sleep?","Remember to take your tablet.").
qa("Do you have a headache?","Don't go in the sun without a hat.").
qa("Feeling flimsy?","Do a workout.").
qa("Is it a few weeks since your doctor's appointment?","Remember to make another appointment.").
qa("Is it the morning?","Remember to take your morning tablet.").
qa_tt("Have you meditated?","Good").
qa_tt("Have you meditated?","Good").qa_tt([*,medicine_problems_and_solutions],_).
qa_tt("Have you time travelled?","You may now meditate.").
qa_tt([*,immortality_medicine],_).
qa_tt([*,meditation_As],_).
qa_tt([*,time_travel_As],_).
query_box_2(T):-A="[[\"aa,]\",b,\"c\",[]],1]",string_chars(A,C),findall(G,(member(E,C),atom_string(E,G)),F),grammar1(F,T).
query_box_2(T):-grammar1("[[\"aa,]\",b,\"c\",[]],1]",T).
quote_next(Vgp1,Vgp2):-lookahead(Vgp1,Vgp2,"\"").
quote_next-->lookahead(["\""]).
quote_next-->lookahead(["\""]).lookahead(B,A,A):-append(B,_D,A).%grammar_part(A,B,C):-string_concat(A,C,B),string_length(A,1).
r_o_nd_types(A) :- type_s2a1(A).
r_o_nd_types(nd).
r_o_nd_types(o).
rainforest( [ [0,1,19,[    ]],[0,2,19,[    ]],[0,3,19,[    ]],[0,4,19,[    ]],[0,5,19,[    ]],[0,6,19,[    ]],[0,7,19,[    ]],[0,8,19,[    ]],[0,9,19,[    ]],[0,10,19,[    ]],[0,11,19,[    ]],[0,12,19,[    ]],[0,13,19,[    ]],[0,14,19,[    ]],[0,15,19,[    ]], [0,1,18,[    ]],[0,2,18,[    ]],[0,3,18,[    ]],[0,4,18,[    ]],[0,5,18,[    ]],[0,6,18,[    ]],[0,7,18,[    ]],[0,8,18,[    ]],[0,9,18,[    ]],[0,10,18,[    ]],[0,11,18,[    ]],[0,12,18,[    ]],[0,13,18,[    ]],[0,14,18,[    ]],[0,15,18,[    ]], [0,1,17,[    ]],[0,2,17,[    ]],[0,3,17,[    ]],[0,4,17,[    ]],[0,5,17,[    ]],[0,6,17,[    ]],[0,7,17,[    ]],[0,8,17,[    ]],[0,9,17,[    ]],[0,10,17,[    ]],[0,11,17,[    ]],[0,12,17,[    ]],[0,13,17,[    ]],[0,14,17,[    ]],[0,15,17,[    ]], [0,1,16,[    ]],[0,2,16,[    ]],[0,3,16,[    ]],[0,4,16,[    ]],[0,5,16,[    ]],[0,6,16,[    ]],[0,7,16,[    ]],[0,8,16,[    ]],[0,9,16,[    ]],[0,10,16,[    ]],[0,11,16,[    ]],[0,12,16,[    ]],[0,13,16,[    ]],[0,14,16,[    ]],[0,15,16,[    ]], [0,1,15,[    ]],[0,2,15,[    ]],[0,3,15,[    ]],[0,4,15,[    ]],[0,5,15,[    ]],[0,6,15,[    ]],[0,7,15,[    ]],[0,8,15,[    ]],[0,9,15,[    ]],[0,10,15,[    ]],[0,11,15,[    ]],[0,12,15,[    ]],[0,13,15,[    ]],[0,14,15,[    ]],[0,15,15,[    ]], [0,1,14,[    ]],[0,2,14,[    ]],[0,3,14,[    ]],[0,4,14,[    ]],[0,5,14,[    ]],[0,6,14,[    ]],[0,7,14,[    ]],[0,8,14,[    ]],[0,9,14,[    ]],[0,10,14,[    ]],[0,11,14,[    ]],[0,12,14,[    ]],[0,13,14,[    ]],[0,14,14,[    ]],[0,15,14,[    ]], [0,1,13,[    ]],[0,2,13,[    ]],[0,3,13,[    ]],[0,4,13,[    ]],[0,5,13,[    ]],[0,6,13,[    ]],[0,7,13,[    ]],[0,8,13,[    ]],[0,9,13,[    ]],[0,10,13,[    ]],[0,11,13,[    ]],[0,12,13,[    ]],[0,13,13,[    ]],[0,14,13,[    ]],[0,15,13,[    ]], [0,1,12,[    ]],[0,2,12,[    ]],[0,3,12,[*   ]],[0,4,12,[*   ]],[0,5,12,[*   ]],[0,6,12,[*   ]],[0,7,12,[*   ]],[0,8,12,[    ]],[0,9,12,[    ]],[0,10,12,[    ]],[0,11,12,[    ]],[0,12,12,[    ]],[0,13,12,[    ]],[0,14,12,[    ]],[0,15,12,[    ]], [0,1,11,[    ]],[0,2,11,[    ]],[0,3,11,[*   ]],[0,4,11,[*   ]],[0,5,11,[*   ]],[0,6,11,[*   ]],[0,7,11,[*   ]],[0,8,11,[    ]],[0,9,11,[    ]],[0,10,11,[    ]],[0,11,11,[    ]],[0,12,11,[    ]],[0,13,11,[    ]],[0,14,11,[    ]],[0,15,11,[    ]], [0,1,10,[    ]],[0,2,10,[    ]],[0,3,10,[*   ]],[0,4,10,[*   ]],[0,5,10,[*   ]],[0,6,10,[*   ]],[0,7,10,[*   ]],[0,8,10,[    ]],[0,9,10,[    ]],[0,10,10,[    ]],[0,11,10,[    ]],[0,12,10,[    ]],[0,13,10,[    ]],[0,14,10,[    ]],[0,15,10,[    ]], [0,1,9,[     ]],[0,2,9,[     ]],[0,3,9,[*    ]],[0,4,9,[*    ]],[0,5,9,[*    ]],[0,6,9,[*    ]],[0,7,9,[*    ]],[0,8,9,[     ]],[0,9,9,[     ]],[0,10,9,[     ]],[0,11,9,[     ]],[0,12,9,[     ]],[0,13,9,[     ]],[0,14,9,[     ]],[0,15,9,[     ]], [0,1,8,[     ]],[0,2,8,[     ]],[0,3,8,[*    ]],[0,4,8,[*    ]],[0,5,8,[*    ]],[0,6,8,[*    ]],[0,7,8,[*    ]],[0,8,8,[     ]],[0,9,8,[     ]],[0,10,8,[     ]],[0,11,8,[     ]],[0,12,8,[     ]],[0,13,8,[     ]],[0,14,8,[     ]],[0,15,8,[     ]], [0,1,7,[     ]],[0,2,7,[     ]],[0,3,7,[     ]],[0,4,7,[     ]],[0,5,7,[     ]],[0,6,7,[     ]],[0,7,7,[     ]],[0,8,7,[     ]],[0,9,7,[     ]],[0,10,7,[     ]],[0,11,7,[     ]],[0,12,7,[     ]],[0,13,7,[     ]],[0,14,7,[     ]],[0,15,7,[     ]], [0,1,6,[     ]],[0,2,6,[     ]],[0,3,6,[     ]],[0,4,6,[     ]],[0,5,6,[     ]],[0,6,6,[     ]],[0,7,6,[     ]],[0,8,6,[     ]],[0,9,6,[     ]],[0,10,6,[     ]],[0,11,6,[     ]],[0,12,6,[     ]],[0,13,6,[     ]],[0,14,6,[     ]],[0,15,6,[     ]], [0,1,5,[     ]],[0,2,5,[     ]],[0,3,5,[     ]],[0,4,5,[     ]],[0,5,5,[     ]],[0,6,5,[     ]],[0,7,5,[     ]],[0,8,5,[     ]],[0,9,5,[     ]],[0,10,5,[     ]],[0,11,5,[     ]],[0,12,5,[     ]],[0,13,5,[     ]],[0,14,5,[     ]],[0,15,5,[     ]], [0,1,4,[     ]],[0,2,4,[     ]],[0,3,4,[     ]],[0,4,4,[     ]],[0,5,4,[     ]],[0,6,4,[     ]],[0,7,4,[     ]],[0,8,4,[     ]],[0,9,4,[     ]],[0,10,4,[     ]],[0,11,4,[     ]],[0,12,4,[     ]],[0,13,4,[     ]],[0,14,4,[     ]],[0,15,4,[     ]], [0,1,3,[     ]],[0,2,3,[     ]],[0,3,3,[     ]],[0,4,3,[     ]],[0,5,3,[     ]],[0,6,3,[     ]],[0,7,3,[     ]],[0,8,3,[     ]],[0,9,3,[     ]],[0,10,3,[     ]],[0,11,3,[     ]],[0,12,3,[     ]],[0,13,3,[     ]],[0,14,3,[     ]],[0,15,3,[     ]], [0,1,2,[     ]],[0,2,2,[     ]],[0,3,2,[     ]],[0,4,2,[     ]],[0,5,2,[     ]],[0,6,2,[     ]],[0,7,2,[     ]],[0,8,2,[     ]],[0,9,2,[     ]],[0,10,2,[     ]],[0,11,2,[     ]],[0,12,2,[     ]],[0,13,2,[     ]],[0,14,2,[     ]],[0,15,2,[     ]], [0,1,1,[     ]],[0,2,1,[     ]],[0,3,1,[     ]],[0,4,1,[     ]],[0,5,1,[     ]],[0,6,1,[     ]],[0,7,1,[     ]],[0,8,1,[     ]],[0,9,1,[     ]],[0,10,1,[     ]],[0,11,1,[     ]],[0,12,1,[     ]],[0,13,1,[     ]],[0,14,1,[     ]],[0,15,1,[     ]], [1,1,19,[    ]],[1,2,19,[    ]],[1,3,19,[    ]],[1,4,19,[    ]],[1,5,19,[    ]],[1,6,19,[    ]],[1,7,19,[    ]],[1,8,19,[    ]],[1,9,19,[    ]],[1,10,19,[    ]],[1,11,19,[    ]],[1,12,19,[    ]],[1,13,19,[    ]],[1,14,19,[    ]],[1,15,19,[    ]], [1,1,18,[    ]],[1,2,18,[    ]],[1,3,18,[    ]],[1,4,18,[    ]],[1,5,18,[    ]],[1,6,18,[    ]],[1,7,18,[    ]],[1,8,18,[    ]],[1,9,18,[    ]],[1,10,18,[    ]],[1,11,18,[    ]],[1,12,18,[    ]],[1,13,18,[    ]],[1,14,18,[    ]],[1,15,18,[    ]], [1,1,17,[    ]],[1,2,17,[    ]],[1,3,17,[    ]],[1,4,17,[    ]],[1,5,17,[    ]],[1,6,17,[    ]],[1,7,17,[    ]],[1,8,17,[    ]],[1,9,17,[    ]],[1,10,17,[    ]],[1,11,17,[    ]],[1,12,17,[    ]],[1,13,17,[    ]],[1,14,17,[    ]],[1,15,17,[    ]], [1,1,16,[    ]],[1,2,16,[    ]],[1,3,16,[    ]],[1,4,16,[    ]],[1,5,16,[    ]],[1,6,16,[    ]],[1,7,16,[    ]],[1,8,16,[    ]],[1,9,16,[    ]],[1,10,16,[    ]],[1,11,16,[    ]],[1,12,16,[    ]],[1,13,16,[    ]],[1,14,16,[    ]],[1,15,16,[    ]], [1,1,15,[    ]],[1,2,15,[    ]],[1,3,15,[    ]],[1,4,15,[    ]],[1,5,15,[    ]],[1,6,15,[    ]],[1,7,15,[    ]],[1,8,15,[    ]],[1,9,15,[    ]],[1,10,15,[    ]],[1,11,15,[    ]],[1,12,15,[    ]],[1,13,15,[    ]],[1,14,15,[    ]],[1,15,15,[    ]], [1,1,14,[    ]],[1,2,14,[    ]],[1,3,14,[    ]],[1,4,14,[    ]],[1,5,14,[    ]],[1,6,14,[    ]],[1,7,14,[    ]],[1,8,14,[    ]],[1,9,14,[    ]],[1,10,14,[    ]],[1,11,14,[    ]],[1,12,14,[    ]],[1,13,14,[    ]],[1,14,14,[    ]],[1,15,14,[    ]], [1,1,13,[    ]],[1,2,13,[    ]],[1,3,13,[    ]],[1,4,13,[    ]],[1,5,13,[    ]],[1,6,13,[    ]],[1,7,13,[    ]],[1,8,13,[    ]],[1,9,13,[    ]],[1,10,13,[    ]],[1,11,13,[    ]],[1,12,13,[    ]],[1,13,13,[    ]],[1,14,13,[    ]],[1,15,13,[    ]], [1,1,12,[    ]],[1,2,12,[    ]],[1,3,12,[*   ]],[1,4,12,[*   ]],[1,5,12,[*   ]],[1,6,12,[*   ]],[1,7,12,[*   ]],[1,8,12,[    ]],[1,9,12,[    ]],[1,10,12,[    ]],[1,11,12,[    ]],[1,12,12,[    ]],[1,13,12,[    ]],[1,14,12,[    ]],[1,15,12,[    ]], [1,1,11,[    ]],[1,2,11,[    ]],[1,3,11,[*   ]],[1,4,11,[    ]],[1,5,11,[    ]],[1,6,11,[    ]],[1,7,11,[*   ]],[1,8,11,[    ]],[1,9,11,[    ]],[1,10,11,[    ]],[1,11,11,[    ]],[1,12,11,[    ]],[1,13,11,[    ]],[1,14,11,[    ]],[1,15,11,[    ]], [1,1,10,[    ]],[1,2,10,[    ]],[1,3,10,[*   ]],[1,4,10,[    ]],[1,5,10,[*   ]],[1,6,10,[*   ]],[1,7,10,[*   ]],[1,8,10,[    ]],[1,9,10,[    ]],[1,10,10,[    ]],[1,11,10,[    ]],[1,12,10,[    ]],[1,13,10,[    ]],[1,14,10,[    ]],[1,15,10,[    ]], [1,1,9,[     ]],[1,2,9,[     ]],[1,3,9,[*    ]],[1,4,9,[     ]],[1,5,9,[     ]],[1,6,9,[c    ]],[1,7,9,[*    ]],[1,8,9,[     ]],[1,9,9,[     ]],[1,10,9,[     ]],[1,11,9,[     ]],[1,12,9,[     ]],[1,13,9,[     ]],[1,14,9,[     ]],[1,15,9,[     ]], [1,1,8,[     ]],[1,2,8,[     ]],[1,3,8,[*    ]],[1,4,8,[*    ]],[1,5,8,[*    ]],[1,6,8,[*    ]],[1,7,8,[*    ]],[1,8,8,[     ]],[1,9,8,[     ]],[1,10,8,[     ]],[1,11,8,[     ]],[1,12,8,[     ]],[1,13,8,[     ]],[1,14,8,[     ]],[1,15,8,[     ]], [1,1,7,[     ]],[1,2,7,[     ]],[1,3,7,[     ]],[1,4,7,[     ]],[1,5,7,[     ]],[1,6,7,[     ]],[1,7,7,[     ]],[1,8,7,[     ]],[1,9,7,[     ]],[1,10,7,[     ]],[1,11,7,[     ]],[1,12,7,[     ]],[1,13,7,[     ]],[1,14,7,[     ]],[1,15,7,[     ]], [1,1,6,[     ]],[1,2,6,[     ]],[1,3,6,[     ]],[1,4,6,[     ]],[1,5,6,[     ]],[1,6,6,[     ]],[1,7,6,[     ]],[1,8,6,[     ]],[1,9,6,[     ]],[1,10,6,[     ]],[1,11,6,[     ]],[1,12,6,[     ]],[1,13,6,[     ]],[1,14,6,[     ]],[1,15,6,[     ]], [1,1,5,[     ]],[1,2,5,[     ]],[1,3,5,[     ]],[1,4,5,[     ]],[1,5,5,[     ]],[1,6,5,[     ]],[1,7,5,[     ]],[1,8,5,[     ]],[1,9,5,[     ]],[1,10,5,[     ]],[1,11,5,[     ]],[1,12,5,[     ]],[1,13,5,[     ]],[1,14,5,[     ]],[1,15,5,[     ]], [1,1,4,[     ]],[1,2,4,[     ]],[1,3,4,[     ]],[1,4,4,[     ]],[1,5,4,[     ]],[1,6,4,[     ]],[1,7,4,[     ]],[1,8,4,[     ]],[1,9,4,[     ]],[1,10,4,[     ]],[1,11,4,[     ]],[1,12,4,[     ]],[1,13,4,[     ]],[1,14,4,[     ]],[1,15,4,[     ]], [1,1,3,[     ]],[1,2,3,[     ]],[1,3,3,[     ]],[1,4,3,[     ]],[1,5,3,[     ]],[1,6,3,[     ]],[1,7,3,[     ]],[1,8,3,[     ]],[1,9,3,[     ]],[1,10,3,[     ]],[1,11,3,[     ]],[1,12,3,[     ]],[1,13,3,[     ]],[1,14,3,[     ]],[1,15,3,[     ]], [1,1,2,[     ]],[1,2,2,[     ]],[1,3,2,[     ]],[1,4,2,[     ]],[1,5,2,[     ]],[1,6,2,[     ]],[1,7,2,[     ]],[1,8,2,[     ]],[1,9,2,[     ]],[1,10,2,[     ]],[1,11,2,[     ]],[1,12,2,[     ]],[1,13,2,[     ]],[1,14,2,[     ]],[1,15,2,[     ]], [1,1,1,[     ]],[1,2,1,[     ]],[1,3,1,[     ]],[1,4,1,[     ]],[1,5,1,[     ]],[1,6,1,[     ]],[1,7,1,[     ]],[1,8,1,[     ]],[1,9,1,[     ]],[1,10,1,[     ]],[1,11,1,[     ]],[1,12,1,[     ]],[1,13,1,[     ]],[1,14,1,[     ]],[1,15,1,[     ]], [2,1,19,[    ]],[2,2,19,[    ]],[2,3,19,[    ]],[2,4,19,[    ]],[2,5,19,[    ]],[2,6,19,[    ]],[2,7,19,[    ]],[2,8,19,[    ]],[2,9,19,[    ]],[2,10,19,[    ]],[2,11,19,[    ]],[2,12,19,[    ]],[2,13,19,[    ]],[2,14,19,[    ]],[2,15,19,[    ]], [2,1,18,[    ]],[2,2,18,[    ]],[2,3,18,[    ]],[2,4,18,[    ]],[2,5,18,[    ]],[2,6,18,[    ]],[2,7,18,[    ]],[2,8,18,[    ]],[2,9,18,[    ]],[2,10,18,[    ]],[2,11,18,[    ]],[2,12,18,[    ]],[2,13,18,[    ]],[2,14,18,[    ]],[2,15,18,[    ]], [2,1,17,[    ]],[2,2,17,[    ]],[2,3,17,[    ]],[2,4,17,[    ]],[2,5,17,[    ]],[2,6,17,[    ]],[2,7,17,[    ]],[2,8,17,[    ]],[2,9,17,[    ]],[2,10,17,[    ]],[2,11,17,[    ]],[2,12,17,[    ]],[2,13,17,[    ]],[2,14,17,[    ]],[2,15,17,[    ]], [2,1,16,[    ]],[2,2,16,[    ]],[2,3,16,[    ]],[2,4,16,[    ]],[2,5,16,[    ]],[2,6,16,[    ]],[2,7,16,[    ]],[2,8,16,[    ]],[2,9,16,[    ]],[2,10,16,[    ]],[2,11,16,[    ]],[2,12,16,[    ]],[2,13,16,[    ]],[2,14,16,[    ]],[2,15,16,[    ]], [2,1,15,[    ]],[2,2,15,[    ]],[2,3,15,[    ]],[2,4,15,[    ]],[2,5,15,[    ]],[2,6,15,[    ]],[2,7,15,[    ]],[2,8,15,[    ]],[2,9,15,[    ]],[2,10,15,[    ]],[2,11,15,[    ]],[2,12,15,[    ]],[2,13,15,[    ]],[2,14,15,[    ]],[2,15,15,[    ]], [2,1,14,[*   ]],[2,2,14,[*   ]],[2,3,14,[*   ]],[2,4,14,[*   ]],[2,5,14,[*   ]],[2,6,14,[*   ]],[2,7,14,[*   ]],[2,8,14,[*   ]],[2,9,14,[*   ]],[2,10,14,[    ]],[2,11,14,[    ]],[2,12,14,[    ]],[2,13,14,[    ]],[2,14,14,[    ]],[2,15,14,[    ]], [2,1,13,[*   ]],[2,2,13,[*   ]],[2,3,13,[*   ]],[2,4,13,[*   ]],[2,5,13,[*   ]],[2,6,13,[*   ]],[2,7,13,[*   ]],[2,8,13,[*   ]],[2,9,13,[*   ]],[2,10,13,[    ]],[2,11,13,[    ]],[2,12,13,[    ]],[2,13,13,[    ]],[2,14,13,[    ]],[2,15,13,[    ]], [2,1,12,[*   ]],[2,2,12,[*   ]],[2,3,12,[*   ]],[2,4,12,[*   ]],[2,5,12,[*   ]],[2,6,12,[*   ]],[2,7,12,[*   ]],[2,8,12,[*   ]],[2,9,12,[*   ]],[2,10,12,[    ]],[2,11,12,[    ]],[2,12,12,[    ]],[2,13,12,[    ]],[2,14,12,[    ]],[2,15,12,[    ]], [2,1,11,[*   ]],[2,2,11,[*   ]],[2,3,11,[*   ]],[2,4,11,[    ]],[2,5,11,[*   ]],[2,6,11,[*   ]],[2,7,11,[*   ]],[2,8,11,[*   ]],[2,9,11,[*   ]],[2,10,11,[    ]],[2,11,11,[    ]],[2,12,11,[    ]],[2,13,11,[    ]],[2,14,11,[    ]],[2,15,11,[    ]], [2,1,10,[*   ]],[2,2,10,[*   ]],[2,3,10,[*   ]],[2,4,10,[*   ]],[2,5,10,[*   ]],[2,6,10,[*   ]],[2,7,10,[*   ]],[2,8,10,[*   ]],[2,9,10,[*   ]],[2,10,10,[    ]],[2,11,10,[    ]],[2,12,10,[    ]],[2,13,10,[    ]],[2,14,10,[    ]],[2,15,10,[    ]], [2,1,9,[*    ]],[2,2,9,[*    ]],[2,3,9,[*    ]],[2,4,9,[*    ]],[2,5,9,[*    ]],[2,6,9,[*    ]],[2,7,9,[*    ]],[2,8,9,[*    ]],[2,9,9,[*    ]],[2,10,9,[     ]],[2,11,9,[     ]],[2,12,9,[     ]],[2,13,9,[     ]],[2,14,9,[     ]],[2,15,9,[     ]], [2,1,8,[*    ]],[2,2,8,[*    ]],[2,3,8,[*    ]],[2,4,8,[*    ]],[2,5,8,[*    ]],[2,6,8,[*    ]],[2,7,8,[*    ]],[2,8,8,[*    ]],[2,9,8,[*    ]],[2,10,8,[     ]],[2,11,8,[     ]],[2,12,8,[     ]],[2,13,8,[     ]],[2,14,8,[     ]],[2,15,8,[     ]], [2,1,7,[*    ]],[2,2,7,[*    ]],[2,3,7,[*    ]],[2,4,7,[*    ]],[2,5,7,[*    ]],[2,6,7,[*    ]],[2,7,7,[*    ]],[2,8,7,[*    ]],[2,9,7,[*    ]],[2,10,7,[     ]],[2,11,7,[     ]],[2,12,7,[     ]],[2,13,7,[     ]],[2,14,7,[     ]],[2,15,7,[     ]], [2,1,6,[*    ]],[2,2,6,[*    ]],[2,3,6,[*    ]],[2,4,6,[*    ]],[2,5,6,[*    ]],[2,6,6,[*    ]],[2,7,6,[*    ]],[2,8,6,[*    ]],[2,9,6,[*    ]],[2,10,6,[     ]],[2,11,6,[     ]],[2,12,6,[     ]],[2,13,6,[     ]],[2,14,6,[     ]],[2,15,6,[     ]], [2,1,5,[     ]],[2,2,5,[     ]],[2,3,5,[     ]],[2,4,5,[     ]],[2,5,5,[     ]],[2,6,5,[     ]],[2,7,5,[     ]],[2,8,5,[     ]],[2,9,5,[     ]],[2,10,5,[     ]],[2,11,5,[     ]],[2,12,5,[     ]],[2,13,5,[     ]],[2,14,5,[     ]],[2,15,5,[     ]], [2,1,4,[     ]],[2,2,4,[     ]],[2,3,4,[     ]],[2,4,4,[     ]],[2,5,4,[     ]],[2,6,4,[     ]],[2,7,4,[     ]],[2,8,4,[     ]],[2,9,4,[     ]],[2,10,4,[     ]],[2,11,4,[     ]],[2,12,4,[     ]],[2,13,4,[     ]],[2,14,4,[     ]],[2,15,4,[     ]], [2,1,3,[     ]],[2,2,3,[     ]],[2,3,3,[     ]],[2,4,3,[     ]],[2,5,3,[     ]],[2,6,3,[     ]],[2,7,3,[     ]],[2,8,3,[     ]],[2,9,3,[     ]],[2,10,3,[     ]],[2,11,3,[     ]],[2,12,3,[     ]],[2,13,3,[     ]],[2,14,3,[     ]],[2,15,3,[     ]], [2,1,2,[     ]],[2,2,2,[     ]],[2,3,2,[     ]],[2,4,2,[     ]],[2,5,2,[     ]],[2,6,2,[     ]],[2,7,2,[     ]],[2,8,2,[     ]],[2,9,2,[     ]],[2,10,2,[     ]],[2,11,2,[     ]],[2,12,2,[     ]],[2,13,2,[     ]],[2,14,2,[     ]],[2,15,2,[     ]], [2,1,1,[     ]],[2,2,1,[     ]],[2,3,1,[     ]],[2,4,1,[     ]],[2,5,1,[     ]],[2,6,1,[     ]],[2,7,1,[     ]],[2,8,1,[     ]],[2,9,1,[     ]],[2,10,1,[     ]],[2,11,1,[     ]],[2,12,1,[     ]],[2,13,1,[     ]],[2,14,1,[     ]],[2,15,1,[     ]], [3,1,19,[    ]],[3,2,19,[    ]],[3,3,19,[    ]],[3,4,19,[    ]],[3,5,19,[    ]],[3,6,19,[    ]],[3,7,19,[    ]],[3,8,19,[    ]],[3,9,19,[    ]],[3,10,19,[    ]],[3,11,19,[    ]],[3,12,19,[    ]],[3,13,19,[    ]],[3,14,19,[    ]],[3,15,19,[    ]], [3,1,18,[    ]],[3,2,18,[    ]],[3,3,18,[    ]],[3,4,18,[    ]],[3,5,18,[    ]],[3,6,18,[    ]],[3,7,18,[    ]],[3,8,18,[    ]],[3,9,18,[    ]],[3,10,18,[    ]],[3,11,18,[    ]],[3,12,18,[    ]],[3,13,18,[    ]],[3,14,18,[    ]],[3,15,18,[    ]], [3,1,17,[    ]],[3,2,17,[    ]],[3,3,17,[    ]],[3,4,17,[    ]],[3,5,17,[    ]],[3,6,17,[    ]],[3,7,17,[    ]],[3,8,17,[    ]],[3,9,17,[    ]],[3,10,17,[    ]],[3,11,17,[    ]],[3,12,17,[    ]],[3,13,17,[    ]],[3,14,17,[    ]],[3,15,17,[    ]], [3,1,16,[    ]],[3,2,16,[    ]],[3,3,16,[    ]],[3,4,16,[    ]],[3,5,16,[    ]],[3,6,16,[    ]],[3,7,16,[    ]],[3,8,16,[    ]],[3,9,16,[    ]],[3,10,16,[    ]],[3,11,16,[    ]],[3,12,16,[    ]],[3,13,16,[    ]],[3,14,16,[    ]],[3,15,16,[    ]], [3,1,15,[    ]],[3,2,15,[    ]],[3,3,15,[    ]],[3,4,15,[    ]],[3,5,15,[    ]],[3,6,15,[    ]],[3,7,15,[    ]],[3,8,15,[    ]],[3,9,15,[    ]],[3,10,15,[    ]],[3,11,15,[    ]],[3,12,15,[    ]],[3,13,15,[    ]],[3,14,15,[    ]],[3,15,15,[    ]], [3,1,14,[*   ]],[3,2,14,[*   ]],[3,3,14,[*   ]],[3,4,14,[*   ]],[3,5,14,[*   ]],[3,6,14,[*   ]],[3,7,14,[*   ]],[3,8,14,[*   ]],[3,9,14,[*   ]],[3,10,14,[    ]],[3,11,14,[    ]],[3,12,14,[    ]],[3,13,14,[    ]],[3,14,14,[    ]],[3,15,14,[    ]], [3,1,13,[*   ]],[3,2,13,[    ]],[3,3,13,[    ]],[3,4,13,[    ]],[3,5,13,[    ]],[3,6,13,[    ]],[3,7,13,[    ]],[3,8,13,[    ]],[3,9,13,[*   ]],[3,10,13,[    ]],[3,11,13,[    ]],[3,12,13,[    ]],[3,13,13,[    ]],[3,14,13,[    ]],[3,15,13,[    ]], [3,1,12,[*   ]],[3,2,12,[    ]],[3,3,12,[*   ]],[3,4,12,[*   ]],[3,5,12,[*   ]],[3,6,12,[    ]],[3,7,12,[*   ]],[3,8,12,[    ]],[3,9,12,[*   ]],[3,10,12,[    ]],[3,11,12,[    ]],[3,12,12,[    ]],[3,13,12,[    ]],[3,14,12,[    ]],[3,15,12,[    ]], [3,1,11,[*   ]],[3,2,11,[    ]],[3,3,11,[*   ]],[3,4,11,[    ]],[3,5,11,[    ]],[3,6,11,[    ]],[3,7,11,[*   ]],[3,8,11,[*   ]],[3,9,11,[*   ]],[3,10,11,[    ]],[3,11,11,[    ]],[3,12,11,[    ]],[3,13,11,[    ]],[3,14,11,[    ]],[3,15,11,[    ]], [3,1,10,[*   ]],[3,2,10,[    ]],[3,3,10,[*   ]],[3,4,10,[*   ]],[3,5,10,[*   ]],[3,6,10,[    ]],[3,7,10,[*   ]],[3,8,10,[    ]],[3,9,10,[*   ]],[3,10,10,[    ]],[3,11,10,[    ]],[3,12,10,[    ]],[3,13,10,[    ]],[3,14,10,[    ]],[3,15,10,[    ]], [3,1,9,[*    ]],[3,2,9,[     ]],[3,3,9,[     ]],[3,4,9,[     ]],[3,5,9,[*    ]],[3,6,9,[     ]],[3,7,9,[     ]],[3,8,9,[     ]],[3,9,9,[*    ]],[3,10,9,[     ]],[3,11,9,[     ]],[3,12,9,[     ]],[3,13,9,[     ]],[3,14,9,[     ]],[3,15,9,[     ]], [3,1,8,[*     ]],[3,2,8,[     ]],[3,3,8,[*    ]],[3,4,8,[*    ]],[3,5,8,[*    ]],[3,6,8,[     ]],[3,7,8,[*    ]],[3,8,8,[     ]],[3,9,8,[*    ]],[3,10,8,[     ]],[3,11,8,[     ]],[3,12,8,[     ]],[3,13,8,[     ]],[3,14,8,[     ]],[3,15,8,[     ]], [3,1,7,[*    ]],[3,2,7,[     ]],[3,3,7,[     ]],[3,4,7,[     ]],[3,5,7,[*    ]],[3,6,7,[     ]],[3,7,7,[*    ]],[3,8,7,[     ]],[3,9,7,[*    ]],[3,10,7,[     ]],[3,11,7,[     ]],[3,12,7,[     ]],[3,13,7,[     ]],[3,14,7,[     ]],[3,15,7,[     ]], [3,1,6,[*    ]],[3,2,6,[*    ]],[3,3,6,[*    ]],[3,4,6,[*    ]],[3,5,6,[*    ]],[3,6,6,[*    ]],[3,7,6,[*    ]],[3,8,6,[*    ]],[3,9,6,[*    ]],[3,10,6,[     ]],[3,11,6,[     ]],[3,12,6,[     ]],[3,13,6,[     ]],[3,14,6,[     ]],[3,15,6,[     ]], [3,1,5,[     ]],[3,2,5,[     ]],[3,3,5,[     ]],[3,4,5,[     ]],[3,5,5,[     ]],[3,6,5,[     ]],[3,7,5,[     ]],[3,8,5,[     ]],[3,9,5,[     ]],[3,10,5,[     ]],[3,11,5,[     ]],[3,12,5,[     ]],[3,13,5,[     ]],[3,14,5,[     ]],[3,15,5,[     ]], [3,1,4,[     ]],[3,2,4,[     ]],[3,3,4,[     ]],[3,4,4,[     ]],[3,5,4,[     ]],[3,6,4,[     ]],[3,7,4,[     ]],[3,8,4,[     ]],[3,9,4,[     ]],[3,10,4,[     ]],[3,11,4,[     ]],[3,12,4,[     ]],[3,13,4,[     ]],[3,14,4,[     ]],[3,15,4,[     ]], [3,1,3,[     ]],[3,2,3,[     ]],[3,3,3,[     ]],[3,4,3,[     ]],[3,5,3,[     ]],[3,6,3,[     ]],[3,7,3,[     ]],[3,8,3,[     ]],[3,9,3,[     ]],[3,10,3,[     ]],[3,11,3,[     ]],[3,12,3,[     ]],[3,13,3,[     ]],[3,14,3,[     ]],[3,15,3,[     ]], [3,1,2,[     ]],[3,2,2,[     ]],[3,3,2,[     ]],[3,4,2,[     ]],[3,5,2,[     ]],[3,6,2,[     ]],[3,7,2,[     ]],[3,8,2,[     ]],[3,9,2,[     ]],[3,10,2,[     ]],[3,11,2,[     ]],[3,12,2,[     ]],[3,13,2,[     ]],[3,14,2,[     ]],[3,15,2,[     ]], [3,1,1,[     ]],[3,2,1,[     ]],[3,3,1,[     ]],[3,4,1,[     ]],[3,5,1,[     ]],[3,6,1,[     ]],[3,7,1,[     ]],[3,8,1,[     ]],[3,9,1,[     ]],[3,10,1,[     ]],[3,11,1,[     ]],[3,12,1,[     ]],[3,13,1,[     ]],[3,14,1,[     ]],[3,15,1,[     ]], [4,1,19,[    ]],[4,2,19,[    ]],[4,3,19,[    ]],[4,4,19,[    ]],[4,5,19,[    ]],[4,6,19,[    ]],[4,7,19,[    ]],[4,8,19,[    ]],[4,9,19,[    ]],[4,10,19,[*   ]],[4,11,19,[*   ]],[4,12,19,[*   ]],[4,13,19,[*   ]],[4,14,19,[*   ]],[4,15,19,[    ]], [4,1,18,[    ]],[4,2,18,[    ]],[4,3,18,[    ]],[4,4,18,[    ]],[4,5,18,[    ]],[4,6,18,[    ]],[4,7,18,[    ]],[4,8,18,[    ]],[4,9,18,[    ]],[4,10,18,[*   ]],[4,11,18,[*   ]],[4,12,18,[*   ]],[4,13,18,[*   ]],[4,14,18,[*   ]],[4,15,18,[    ]], [4,1,17,[    ]],[4,2,17,[    ]],[4,3,17,[    ]],[4,4,17,[    ]],[4,5,17,[    ]],[4,6,17,[    ]],[4,7,17,[    ]],[4,8,17,[    ]],[4,9,17,[    ]],[4,10,17,[*   ]],[4,11,17,[*   ]],[4,12,17,[*   ]],[4,13,17,[*   ]],[4,14,17,[*   ]],[4,15,17,[*   ]], [4,1,16,[    ]],[4,2,16,[    ]],[4,3,16,[    ]],[4,4,16,[    ]],[4,5,16,[    ]],[4,6,16,[    ]],[4,7,16,[    ]],[4,8,16,[    ]],[4,9,16,[    ]],[4,10,16,[    ]],[4,11,16,[*   ]],[4,12,16,[*   ]],[4,13,16,[*   ]],[4,14,16,[*   ]],[4,15,16,[*   ]], [4,1,15,[    ]],[4,2,15,[    ]],[4,3,15,[    ]],[4,4,15,[    ]],[4,5,15,[    ]],[4,6,15,[    ]],[4,7,15,[    ]],[4,8,15,[    ]],[4,9,15,[    ]],[4,10,15,[*   ]],[4,11,15,[*   ]],[4,12,15,[*   ]],[4,13,15,[*   ]],[4,14,15,[*   ]],[4,15,15,[*   ]], [4,1,14,[*   ]],[4,2,14,[*   ]],[4,3,14,[*   ]],[4,4,14,[*   ]],[4,5,14,[*   ]],[4,6,14,[*   ]],[4,7,14,[*   ]],[4,8,14,[*   ]],[4,9,14,[*   ]],[4,10,14,[*   ]],[4,11,14,[*   ]],[4,12,14,[*   ]],[4,13,14,[*   ]],[4,14,14,[*   ]],[4,15,14,[*   ]], [4,1,13,[*   ]],[4,2,13,[*   ]],[4,3,13,[*   ]],[4,4,13,[*   ]],[4,5,13,[*   ]],[4,6,13,[*   ]],[4,7,13,[*   ]],[4,8,13,[*   ]],[4,9,13,[*   ]],[4,10,13,[*   ]],[4,11,13,[*   ]],[4,12,13,[*   ]],[4,13,13,[*   ]],[4,14,13,[*   ]],[4,15,13,[*   ]], [4,1,12,[*   ]],[4,2,12,[*   ]],[4,3,12,[*   ]],[4,4,12,[*   ]],[4,5,12,[*   ]],[4,6,12,[*   ]],[4,7,12,[*   ]],[4,8,12,[*   ]],[4,9,12,[*   ]],[4,10,12,[*   ]],[4,11,12,[*   ]],[4,12,12,[*   ]],[4,13,12,[*   ]],[4,14,12,[*   ]],[4,15,12,[*   ]], [4,1,11,[*   ]],[4,2,11,[*   ]],[4,3,11,[*   ]],[4,4,11,[*   ]],[4,5,11,[*   ]],[4,6,11,[*   ]],[4,7,11,[*   ]],[4,8,11,[*   ]],[4,9,11,[*   ]],[4,10,11,[*   ]],[4,11,11,[*   ]],[4,12,11,[*   ]],[4,13,11,[*   ]],[4,14,11,[*   ]],[4,15,11,[*   ]], [4,1,10,[*   ]],[4,2,10,[*   ]],[4,3,10,[*   ]],[4,4,10,[*   ]],[4,5,10,[*   ]],[4,6,10,[*   ]],[4,7,10,[*   ]],[4,8,10,[*   ]],[4,9,10,[*   ]],[4,10,10,[    ]],[4,11,10,[    ]],[4,12,10,[    ]],[4,13,10,[    ]],[4,14,10,[    ]],[4,15,10,[    ]], [4,1,9,[*    ]],[4,2,9,[*    ]],[4,3,9,[*    ]],[4,4,9,[*    ]],[4,5,9,[*    ]],[4,6,9,[*    ]],[4,7,9,[*    ]],[4,8,9,[*    ]],[4,9,9,[*    ]],[4,10,9,[*    ]],[4,11,9,[*    ]],[4,12,9,[*    ]],[4,13,9,[*    ]],[4,14,9,[*    ]],[4,15,9,[*    ]], [4,1,8,[*    ]],[4,2,8,[*    ]],[4,3,8,[*    ]],[4,4,8,[*    ]],[4,5,8,[*    ]],[4,6,8,[*    ]],[4,7,8,[*    ]],[4,8,8,[*    ]],[4,9,8,[*    ]],[4,10,8,[*    ]],[4,11,8,[*    ]],[4,12,8,[*    ]],[4,13,8,[*    ]],[4,14,8,[*    ]],[4,15,8,[*    ]], [4,1,7,[*    ]],[4,2,7,[*    ]],[4,3,7,[*    ]],[4,4,7,[*    ]],[4,5,7,[*    ]],[4,6,7,[*    ]],[4,7,7,[*    ]],[4,8,7,[     ]],[4,9,7,[*    ]],[4,10,7,[*    ]],[4,11,7,[*    ]],[4,12,7,[*    ]],[4,13,7,[*    ]],[4,14,7,[*    ]],[4,15,7,[*    ]], [4,1,6,[*    ]],[4,2,6,[*    ]],[4,3,6,[*    ]],[4,4,6,[*    ]],[4,5,6,[*    ]],[4,6,6,[*    ]],[4,7,6,[*    ]],[4,8,6,[*    ]],[4,9,6,[*    ]],[4,10,6,[*    ]],[4,11,6,[*    ]],[4,12,6,[*    ]],[4,13,6,[*    ]],[4,14,6,[     ]],[4,15,6,[     ]], [4,1,5,[     ]],[4,2,5,[     ]],[4,3,5,[     ]],[4,4,5,[     ]],[4,5,5,[     ]],[4,6,5,[     ]],[4,7,5,[*    ]],[4,8,5,[*    ]],[4,9,5,[*    ]],[4,10,5,[*    ]],[4,11,5,[*    ]],[4,12,5,[*    ]],[4,13,5,[*    ]],[4,14,5,[     ]],[4,15,5,[     ]], [4,1,4,[     ]],[4,2,4,[     ]],[4,3,4,[     ]],[4,4,4,[     ]],[4,5,4,[     ]],[4,6,4,[     ]],[4,7,4,[*    ]],[4,8,4,[*    ]],[4,9,4,[*    ]],[4,10,4,[*    ]],[4,11,4,[*    ]],[4,12,4,[*    ]],[4,13,4,[*    ]],[4,14,4,[     ]],[4,15,4,[     ]], [4,1,3,[     ]],[4,2,3,[     ]],[4,3,3,[     ]],[4,4,3,[     ]],[4,5,3,[     ]],[4,6,3,[     ]],[4,7,3,[*    ]],[4,8,3,[*    ]],[4,9,3,[*    ]],[4,10,3,[*    ]],[4,11,3,[*    ]],[4,12,3,[*    ]],[4,13,3,[*    ]],[4,14,3,[     ]],[4,15,3,[     ]], [4,1,2,[     ]],[4,2,2,[     ]],[4,3,2,[     ]],[4,4,2,[     ]],[4,5,2,[     ]],[4,6,2,[     ]],[4,7,2,[*    ]],[4,8,2,[*    ]],[4,9,2,[*    ]],[4,10,2,[*    ]],[4,11,2,[*    ]],[4,12,2,[*    ]],[4,13,2,[*    ]],[4,14,2,[     ]],[4,15,2,[     ]], [4,1,1,[     ]],[4,2,1,[     ]],[4,3,1,[     ]],[4,4,1,[     ]],[4,5,1,[     ]],[4,6,1,[     ]],[4,7,1,[     ]],[4,8,1,[     ]],[4,9,1,[     ]],[4,10,1,[     ]],[4,11,1,[     ]],[4,12,1,[     ]],[4,13,1,[     ]],[4,14,1,[     ]],[4,15,1,[     ]], [5,1,19,[    ]],[5,2,19,[    ]],[5,3,19,[    ]],[5,4,19,[    ]],[5,5,19,[    ]],[5,6,19,[    ]],[5,7,19,[    ]],[5,8,19,[    ]],[5,9,19,[    ]],[5,10,19,[*   ]],[5,11,19,[*   ]],[5,12,19,[*   ]],[5,13,19,[*   ]],[5,14,19,[*   ]],[5,15,19,[    ]], [5,1,18,[    ]],[5,2,18,[    ]],[5,3,18,[    ]],[5,4,18,[    ]],[5,5,18,[    ]],[5,6,18,[    ]],[5,7,18,[    ]],[5,8,18,[    ]],[5,9,18,[    ]],[5,10,18,[*   ]],[5,11,18,[    ]],[5,12,18,[    ]],[5,13,18,[s1  ]],[5,14,18,[*   ]],[5,15,18,[    ]], [5,1,17,[    ]],[5,2,17,[    ]],[5,3,17,[    ]],[5,4,17,[    ]],[5,5,17,[    ]],[5,6,17,[    ]],[5,7,17,[    ]],[5,8,17,[    ]],[5,9,17,[    ]],[5,10,17,[*   ]],[5,11,17,[*   ]],[5,12,17,[    ]],[5,13,17,[*   ]],[5,14,17,[*   ]],[5,15,17,[*   ]], [5,1,16,[    ]],[5,2,16,[    ]],[5,3,16,[    ]],[5,4,16,[    ]],[5,5,16,[    ]],[5,6,16,[    ]],[5,7,16,[    ]],[5,8,16,[    ]],[5,9,16,[    ]],[5,10,16,[    ]],[5,11,16,[*   ]],[5,12,16,[    ]],[5,13,16,[    ]],[5,14,16,[    ]],[5,15,16,[*   ]], [5,1,15,[    ]],[5,2,15,[    ]],[5,3,15,[    ]],[5,4,15,[    ]],[5,5,15,[    ]],[5,6,15,[    ]],[5,7,15,[    ]],[5,8,15,[    ]],[5,9,15,[    ]],[5,10,15,[*   ]],[5,11,15,[*   ]],[5,12,15,[    ]],[5,13,15,[*   ]],[5,14,15,[    ]],[5,15,15,[*   ]], [5,1,14,[    ]],[5,2,14,[    ]],[5,3,14,[    ]],[5,4,14,[    ]],[5,5,14,[    ]],[5,6,14,[    ]],[5,7,14,[    ]],[5,8,14,[    ]],[5,9,14,[    ]],[5,10,14,[*   ]],[5,11,14,[    ]],[5,12,14,[    ]],[5,13,14,[    ]],[5,14,14,[    ]],[5,15,14,[*   ]], [5,1,13,[    ]],[5,2,13,[    ]],[5,3,13,[    ]],[5,4,13,[    ]],[5,5,13,[    ]],[5,6,13,[    ]],[5,7,13,[    ]],[5,8,13,[    ]],[5,9,13,[    ]],[5,10,13,[*   ]],[5,11,13,[    ]],[5,12,13,[*   ]],[5,13,13,[*   ]],[5,14,13,[m   ]],[5,15,13,[*   ]], [5,1,12,[    ]],[5,2,12,[    ]],[5,3,12,[    ]],[5,4,12,[    ]],[5,5,12,[    ]],[5,6,12,[    ]],[5,7,12,[    ]],[5,8,12,[    ]],[5,9,12,[    ]],[5,10,12,[*   ]],[5,11,12,[r   ]],[5,12,12,[*   ]],[5,13,12,[*   ]],[5,14,12,[    ]],[5,15,12,[*   ]], [5,1,11,[    ]],[5,2,11,[    ]],[5,3,11,[    ]],[5,4,11,[    ]],[5,5,11,[    ]],[5,6,11,[    ]],[5,7,11,[    ]],[5,8,11,[    ]],[5,9,11,[    ]],[5,10,11,[*   ]],[5,11,11,[*   ]],[5,12,11,[*   ]],[5,13,11,[*   ]],[5,14,11,[*   ]],[5,15,11,[*   ]], [5,1,10,[    ]],[5,2,10,[    ]],[5,3,10,[    ]],[5,4,10,[    ]],[5,5,10,[    ]],[5,6,10,[    ]],[5,7,10,[    ]],[5,8,10,[    ]],[5,9,10,[    ]],[5,10,10,[    ]],[5,11,10,[    ]],[5,12,10,[    ]],[5,13,10,[    ]],[5,14,10,[    ]],[5,15,10,[    ]], [5,1,9,[     ]],[5,2,9,[     ]],[5,3,9,[     ]],[5,4,9,[     ]],[5,5,9,[     ]],[5,6,9,[     ]],[5,7,9,[*    ]],[5,8,9,[*    ]],[5,9,9,[*    ]],[5,10,9,[*    ]],[5,11,9,[*    ]],[5,12,9,[*    ]],[5,13,9,[*    ]],[5,14,9,[     ]],[5,15,9,[     ]], [5,1,8,[     ]],[5,2,8,[     ]],[5,3,8,[     ]],[5,4,8,[     ]],[5,5,8,[     ]],[5,6,8,[     ]],[5,7,8,[*    ]],[5,8,8,[     ]],[5,9,8,[     ]],[5,10,8,[     ]],[5,11,8,[     ]],[5,12,8,[     ]],[5,13,8,[*    ]],[5,14,8,[     ]],[5,15,8,[     ]], [5,1,7,[     ]],[5,2,7,[     ]],[5,3,7,[     ]],[5,4,7,[     ]],[5,5,7,[     ]],[5,6,7,[     ]],[5,7,7,[*    ]],[5,8,7,[     ]],[5,9,7,[*    ]],[5,10,7,[     ]],[5,11,7,[*    ]],[5,12,7,[*    ]],[5,13,7,[*    ]],[5,14,7,[     ]],[5,15,7,[     ]], [5,1,6,[     ]],[5,2,6,[     ]],[5,3,6,[     ]],[5,4,6,[     ]],[5,5,6,[     ]],[5,6,6,[     ]],[5,7,6,[*    ]],[5,8,6,[*    ]],[5,9,6,[*    ]],[5,10,6,[     ]],[5,11,6,[     ]],[5,12,6,[     ]],[5,13,6,[*    ]],[5,14,6,[     ]],[5,15,6,[     ]], [5,1,5,[     ]],[5,2,5,[     ]],[5,3,5,[     ]],[5,4,5,[     ]],[5,5,5,[     ]],[5,6,5,[     ]],[5,7,5,[*    ]],[5,8,5,[     ]],[5,9,5,[     ]],[5,10,5,[     ]],[5,11,5,[*    ]],[5,12,5,[     ]],[5,13,5,[*    ]],[5,14,5,[     ]],[5,15,5,[     ]], [5,1,4,[     ]],[5,2,4,[     ]],[5,3,4,[     ]],[5,4,4,[     ]],[5,5,4,[     ]],[5,6,4,[     ]],[5,7,4,[*    ]],[5,8,4,[     ]],[5,9,4,[*    ]],[5,10,4,[*    ]],[5,11,4,[*    ]],[5,12,4,[     ]],[5,13,4,[*    ]],[5,14,4,[     ]],[5,15,4,[     ]], [5,1,3,[     ]],[5,2,3,[     ]],[5,3,3,[     ]],[5,4,3,[     ]],[5,5,3,[     ]],[5,6,3,[     ]],[5,7,3,[*    ]],[5,8,3,[     ]],[5,9,3,[*    ]],[5,10,3,[     ]],[5,11,3,[     ]],[5,12,3,[     ]],[5,13,3,[*    ]],[5,14,3,[     ]],[5,15,3,[     ]], [5,1,2,[     ]],[5,2,2,[     ]],[5,3,2,[     ]],[5,4,2,[     ]],[5,5,2,[     ]],[5,6,2,[     ]],[5,7,2,[*    ]],[5,8,2,[*    ]],[5,9,2,[*    ]],[5,10,2,[*    ]],[5,11,2,[*    ]],[5,12,2,[*    ]],[5,13,2,[*    ]],[5,14,2,[     ]],[5,15,2,[     ]], [5,1,1,[     ]],[5,2,1,[     ]],[5,3,1,[     ]],[5,4,1,[     ]],[5,5,1,[     ]],[5,6,1,[     ]],[5,7,1,[     ]],[5,8,1,[     ]],[5,9,1,[     ]],[5,10,1,[     ]],[5,11,1,[     ]],[5,12,1,[     ]],[5,13,1,[     ]],[5,14,1,[     ]],[5,15,1,[     ]],  [6,1,19,[    ]],[6,2,19,[    ]],[6,3,19,[    ]],[6,4,19,[    ]],[6,5,19,[    ]],[6,6,19,[    ]],[6,7,19,[    ]],[6,8,19,[    ]],[6,9,19,[    ]],[6,10,19,[*   ]],[6,11,19,[*   ]],[6,12,19,[*   ]],[6,13,19,[*   ]],[6,14,19,[*   ]],[6,15,19,[    ]], [6,1,18,[    ]],[6,2,18,[    ]],[6,3,18,[    ]],[6,4,18,[    ]],[6,5,18,[    ]],[6,6,18,[    ]],[6,7,18,[    ]],[6,8,18,[    ]],[6,9,18,[    ]],[6,10,18,[*   ]],[6,11,18,[*   ]],[6,12,18,[*   ]],[6,13,18,[*   ]],[6,14,18,[*   ]],[6,15,18,[    ]], [6,1,17,[    ]],[6,2,17,[    ]],[6,3,17,[    ]],[6,4,17,[    ]],[6,5,17,[    ]],[6,6,17,[    ]],[6,7,17,[    ]],[6,8,17,[    ]],[6,9,17,[    ]],[6,10,17,[*   ]],[6,11,17,[*   ]],[6,12,17,[*   ]],[6,13,17,[*   ]],[6,14,17,[*   ]],[6,15,17,[*   ]], [6,1,16,[    ]],[6,2,16,[    ]],[6,3,16,[    ]],[6,4,16,[    ]],[6,5,16,[    ]],[6,6,16,[    ]],[6,7,16,[    ]],[6,8,16,[    ]],[6,9,16,[    ]],[6,10,16,[    ]],[6,11,16,[*   ]],[6,12,16,[*   ]],[6,13,16,[*   ]],[6,14,16,[*   ]],[6,15,16,[*   ]], [6,1,15,[    ]],[6,2,15,[    ]],[6,3,15,[    ]],[6,4,15,[    ]],[6,5,15,[    ]],[6,6,15,[    ]],[6,7,15,[    ]],[6,8,15,[    ]],[6,9,15,[    ]],[6,10,15,[*   ]],[6,11,15,[*   ]],[6,12,15,[*   ]],[6,13,15,[*   ]],[6,14,15,[*   ]],[6,15,15,[*   ]], [6,1,14,[    ]],[6,2,14,[    ]],[6,3,14,[    ]],[6,4,14,[    ]],[6,5,14,[    ]],[6,6,14,[    ]],[6,7,14,[    ]],[6,8,14,[    ]],[6,9,14,[    ]],[6,10,14,[*   ]],[6,11,14,[*   ]],[6,12,14,[*   ]],[6,13,14,[*   ]],[6,14,14,[*   ]],[6,15,14,[*   ]], [6,1,13,[    ]],[6,2,13,[    ]],[6,3,13,[    ]],[6,4,13,[    ]],[6,5,13,[    ]],[6,6,13,[    ]],[6,7,13,[    ]],[6,8,13,[    ]],[6,9,13,[    ]],[6,10,13,[*   ]],[6,11,13,[*   ]],[6,12,13,[*   ]],[6,13,13,[*   ]],[6,14,13,[*   ]],[6,15,13,[*   ]], [6,1,12,[    ]],[6,2,12,[    ]],[6,3,12,[    ]],[6,4,12,[    ]],[6,5,12,[    ]],[6,6,12,[    ]],[6,7,12,[    ]],[6,8,12,[    ]],[6,9,12,[    ]],[6,10,12,[*   ]],[6,11,12,[*   ]],[6,12,12,[*   ]],[6,13,12,[*   ]],[6,14,12,[    ]],[6,15,12,[*   ]], [6,1,11,[    ]],[6,2,11,[    ]],[6,3,11,[    ]],[6,4,11,[    ]],[6,5,11,[    ]],[6,6,11,[    ]],[6,7,11,[    ]],[6,8,11,[    ]],[6,9,11,[    ]],[6,10,11,[*   ]],[6,11,11,[*   ]],[6,12,11,[*   ]],[6,13,11,[*   ]],[6,14,11,[*   ]],[6,15,11,[*   ]], [6,1,10,[    ]],[6,2,10,[    ]],[6,3,10,[    ]],[6,4,10,[    ]],[6,5,10,[    ]],[6,6,10,[    ]],[6,7,10,[    ]],[6,8,10,[    ]],[6,9,10,[    ]],[6,10,10,[    ]],[6,11,10,[*   ]],[6,12,10,[*   ]],[6,13,10,[*   ]],[6,14,10,[*   ]],[6,15,10,[*   ]], [6,1,9,[     ]],[6,2,9,[     ]],[6,3,9,[     ]],[6,4,9,[     ]],[6,5,9,[     ]],[6,6,9,[     ]],[6,7,9,[*    ]],[6,8,9,[*    ]],[6,9,9,[*    ]],[6,10,9,[*    ]],[6,11,9,[*    ]],[6,12,9,[*    ]],[6,13,9,[*    ]],[6,14,9,[*    ]],[6,15,9,[*    ]], [6,1,8,[     ]],[6,2,8,[     ]],[6,3,8,[     ]],[6,4,8,[     ]],[6,5,8,[     ]],[6,6,8,[     ]],[6,7,8,[*    ]],[6,8,8,[*    ]],[6,9,8,[*    ]],[6,10,8,[*    ]],[6,11,8,[*    ]],[6,12,8,[*    ]],[6,13,8,[*    ]],[6,14,8,[*    ]],[6,15,8,[*    ]], [6,1,7,[     ]],[6,2,7,[     ]],[6,3,7,[     ]],[6,4,7,[     ]],[6,5,7,[     ]],[6,6,7,[     ]],[6,7,7,[*    ]],[6,8,7,[*    ]],[6,9,7,[*    ]],[6,10,7,[*    ]],[6,11,7,[*    ]],[6,12,7,[*    ]],[6,13,7,[*    ]],[6,14,7,[*    ]],[6,15,7,[*    ]], [6,1,6,[     ]],[6,2,6,[     ]],[6,3,6,[     ]],[6,4,6,[     ]],[6,5,6,[     ]],[6,6,6,[     ]],[6,7,6,[*    ]],[6,8,6,[*    ]],[6,9,6,[*    ]],[6,10,6,[*    ]],[6,11,6,[*    ]],[6,12,6,[*    ]],[6,13,6,[*    ]],[6,14,6,[     ]],[6,15,6,[     ]], [6,1,5,[     ]],[6,2,5,[     ]],[6,3,5,[     ]],[6,4,5,[     ]],[6,5,5,[     ]],[6,6,5,[     ]],[6,7,5,[*    ]],[6,8,5,[*    ]],[6,9,5,[*    ]],[6,10,5,[*    ]],[6,11,5,[*    ]],[6,12,5,[*    ]],[6,13,5,[*    ]],[6,14,5,[     ]],[6,15,5,[     ]], [6,1,4,[     ]],[6,2,4,[     ]],[6,3,4,[     ]],[6,4,4,[     ]],[6,5,4,[     ]],[6,6,4,[     ]],[6,7,4,[*    ]],[6,8,4,[*    ]],[6,9,4,[*    ]],[6,10,4,[*    ]],[6,11,4,[*    ]],[6,12,4,[*    ]],[6,13,4,[*    ]],[6,14,4,[     ]],[6,15,4,[     ]], [6,1,3,[     ]],[6,2,3,[     ]],[6,3,3,[     ]],[6,4,3,[     ]],[6,5,3,[     ]],[6,6,3,[     ]],[6,7,3,[*    ]],[6,8,3,[     ]],[6,9,3,[*    ]],[6,10,3,[*    ]],[6,11,3,[*    ]],[6,12,3,[*    ]],[6,13,3,[*    ]],[6,14,3,[     ]],[6,15,3,[     ]], [6,1,2,[     ]],[6,2,2,[     ]],[6,3,2,[     ]],[6,4,2,[     ]],[6,5,2,[     ]],[6,6,2,[     ]],[6,7,2,[*    ]],[6,8,2,[*    ]],[6,9,2,[*    ]],[6,10,2,[*    ]],[6,11,2,[*    ]],[6,12,2,[*    ]],[6,13,2,[*    ]],[6,14,2,[     ]],[6,15,2,[     ]], [6,1,1,[     ]],[6,2,1,[     ]],[6,3,1,[     ]],[6,4,1,[     ]],[6,5,1,[     ]],[6,6,1,[     ]],[6,7,1,[     ]],[6,8,1,[     ]],[6,9,1,[     ]],[6,10,1,[     ]],[6,11,1,[     ]],[6,12,1,[     ]],[6,13,1,[     ]],[6,14,1,[     ]],[6,15,1,[     ]], [7,1,19,[    ]],[7,2,19,[    ]],[7,3,19,[    ]],[7,4,19,[    ]],[7,5,19,[    ]],[7,6,19,[    ]],[7,7,19,[    ]],[7,8,19,[    ]],[7,9,19,[    ]],[7,10,19,[    ]],[7,11,19,[    ]],[7,12,19,[    ]],[7,13,19,[    ]],[7,14,19,[    ]],[7,15,19,[    ]], [7,1,18,[    ]],[7,2,18,[    ]],[7,3,18,[    ]],[7,4,18,[    ]],[7,5,18,[    ]],[7,6,18,[    ]],[7,7,18,[    ]],[7,8,18,[    ]],[7,9,18,[    ]],[7,10,18,[    ]],[7,11,18,[    ]],[7,12,18,[    ]],[7,13,18,[    ]],[7,14,18,[    ]],[7,15,18,[    ]], [7,1,17,[    ]],[7,2,17,[    ]],[7,3,17,[    ]],[7,4,17,[    ]],[7,5,17,[    ]],[7,6,17,[    ]],[7,7,17,[    ]],[7,8,17,[    ]],[7,9,17,[    ]],[7,10,17,[    ]],[7,11,17,[    ]],[7,12,17,[    ]],[7,13,17,[    ]],[7,14,17,[    ]],[7,15,17,[    ]], [7,1,16,[    ]],[7,2,16,[    ]],[7,3,16,[    ]],[7,4,16,[    ]],[7,5,16,[    ]],[7,6,16,[    ]],[7,7,16,[    ]],[7,8,16,[    ]],[7,9,16,[    ]],[7,10,16,[    ]],[7,11,16,[    ]],[7,12,16,[    ]],[7,13,16,[    ]],[7,14,16,[    ]],[7,15,16,[    ]], [7,1,15,[    ]],[7,2,15,[    ]],[7,3,15,[    ]],[7,4,15,[    ]],[7,5,15,[    ]],[7,6,15,[    ]],[7,7,15,[    ]],[7,8,15,[    ]],[7,9,15,[    ]],[7,10,15,[    ]],[7,11,15,[    ]],[7,12,15,[    ]],[7,13,15,[    ]],[7,14,15,[    ]],[7,15,15,[    ]], [7,1,14,[    ]],[7,2,14,[    ]],[7,3,14,[    ]],[7,4,14,[    ]],[7,5,14,[    ]],[7,6,14,[    ]],[7,7,14,[    ]],[7,8,14,[    ]],[7,9,14,[    ]],[7,10,14,[    ]],[7,11,14,[    ]],[7,12,14,[    ]],[7,13,14,[    ]],[7,14,14,[    ]],[7,15,14,[    ]], [7,1,13,[    ]],[7,2,13,[    ]],[7,3,13,[    ]],[7,4,13,[    ]],[7,5,13,[    ]],[7,6,13,[    ]],[7,7,13,[    ]],[7,8,13,[    ]],[7,9,13,[    ]],[7,10,13,[    ]],[7,11,13,[    ]],[7,12,13,[    ]],[7,13,13,[*   ]],[7,14,13,[*   ]],[7,15,13,[*   ]], [7,1,12,[    ]],[7,2,12,[    ]],[7,3,12,[    ]],[7,4,12,[    ]],[7,5,12,[    ]],[7,6,12,[    ]],[7,7,12,[    ]],[7,8,12,[    ]],[7,9,12,[    ]],[7,10,12,[    ]],[7,11,12,[    ]],[7,12,12,[    ]],[7,13,12,[*   ]],[7,14,12,[    ]],[7,15,12,[*   ]], [7,1,11,[    ]],[7,2,11,[    ]],[7,3,11,[    ]],[7,4,11,[    ]],[7,5,11,[    ]],[7,6,11,[    ]],[7,7,11,[    ]],[7,8,11,[    ]],[7,9,11,[    ]],[7,10,11,[    ]],[7,11,11,[*   ]],[7,12,11,[*   ]],[7,13,11,[*   ]],[7,14,11,[    ]],[7,15,11,[*   ]], [7,1,10,[    ]],[7,2,10,[    ]],[7,3,10,[    ]],[7,4,10,[    ]],[7,5,10,[    ]],[7,6,10,[    ]],[7,7,10,[    ]],[7,8,10,[    ]],[7,9,10,[    ]],[7,10,10,[    ]],[7,11,10,[*   ]],[7,12,10,[    ]],[7,13,10,[    ]],[7,14,10,[    ]],[7,15,10,[*   ]], [7,1,9,[     ]],[7,2,9,[     ]],[7,3,9,[     ]],[7,4,9,[     ]],[7,5,9,[     ]],[7,6,9,[     ]],[7,7,9,[*    ]],[7,8,9,[*    ]],[7,9,9,[*    ]],[7,10,9,[*    ]],[7,11,9,[*    ]],[7,12,9,[*    ]],[7,13,9,[*    ]],[7,14,9,[     ]],[7,15,9,[*    ]], [7,1,8,[     ]],[7,2,8,[     ]],[7,3,8,[     ]],[7,4,8,[     ]],[7,5,8,[     ]],[7,6,8,[     ]],[7,7,8,[*    ]],[7,8,8,[     ]],[7,9,8,[     ]],[7,10,8,[     ]],[7,11,8,[     ]],[7,12,8,[     ]],[7,13,8,[*    ]],[7,14,8,[     ]],[7,15,8,[*    ]], [7,1,7,[     ]],[7,2,7,[     ]],[7,3,7,[     ]],[7,4,7,[     ]],[7,5,7,[     ]],[7,6,7,[     ]],[7,7,7,[*    ]],[7,8,7,[*    ]],[7,9,7,[*    ]],[7,10,7,[     ]],[7,11,7,[*    ]],[7,12,7,[*    ]],[7,13,7,[*    ]],[7,14,7,[*    ]],[7,15,7,[*    ]], [7,1,6,[     ]],[7,2,6,[     ]],[7,3,6,[     ]],[7,4,6,[     ]],[7,5,6,[     ]],[7,6,6,[     ]],[7,7,6,[*    ]],[7,8,6,[k    ]],[7,9,6,[*    ]],[7,10,6,[     ]],[7,11,6,[     ]],[7,12,6,[     ]],[7,13,6,[*    ]],[7,14,6,[     ]],[7,15,6,[     ]], [7,1,5,[     ]],[7,2,5,[     ]],[7,3,5,[     ]],[7,4,5,[     ]],[7,5,5,[     ]],[7,6,5,[     ]],[7,7,5,[*    ]],[7,8,5,[     ]],[7,9,5,[     ]],[7,10,5,[     ]],[7,11,5,[*    ]],[7,12,5,[     ]],[7,13,5,[*    ]],[7,14,5,[     ]],[7,15,5,[     ]], [7,1,4,[     ]],[7,2,4,[     ]],[7,3,4,[     ]],[7,4,4,[     ]],[7,5,4,[     ]],[7,6,4,[     ]],[7,7,4,[*    ]],[7,8,4,[*    ]],[7,9,4,[     ]],[7,10,4,[     ]],[7,11,4,[*    ]],[7,12,4,[     ]],[7,13,4,[*    ]],[7,14,4,[     ]],[7,15,4,[     ]], [7,1,3,[     ]],[7,2,3,[     ]],[7,3,3,[     ]],[7,4,3,[     ]],[7,5,3,[     ]],[7,6,3,[     ]],[7,7,3,[*    ]],[7,8,3,[     ]],[7,9,3,[     ]],[7,10,3,[     ]],[7,11,3,[     ]],[7,12,3,[     ]],[7,13,3,[*    ]],[7,14,3,[     ]],[7,15,3,[     ]], [7,1,2,[     ]],[7,2,2,[     ]],[7,3,2,[     ]],[7,4,2,[     ]],[7,5,2,[     ]],[7,6,2,[     ]],[7,7,2,[*    ]],[7,8,2,[*    ]],[7,9,2,[*    ]],[7,10,2,[*    ]],[7,11,2,[*    ]],[7,12,2,[*    ]],[7,13,2,[*    ]],[7,14,2,[     ]],[7,15,2,[     ]], [7,1,1,[     ]],[7,2,1,[     ]],[7,3,1,[     ]],[7,4,1,[     ]],[7,5,1,[     ]],[7,6,1,[     ]],[7,7,1,[     ]],[7,8,1,[     ]],[7,9,1,[     ]],[7,10,1,[     ]],[7,11,1,[     ]],[7,12,1,[     ]],[7,13,1,[     ]],[7,14,1,[     ]],[7,15,1,[     ]], [8,1,19,[    ]],[8,2,19,[    ]],[8,3,19,[    ]],[8,4,19,[    ]],[8,5,19,[    ]],[8,6,19,[    ]],[8,7,19,[    ]],[8,8,19,[    ]],[8,9,19,[    ]],[8,10,19,[    ]],[8,11,19,[    ]],[8,12,19,[    ]],[8,13,19,[    ]],[8,14,19,[    ]],[8,15,19,[    ]], [8,1,18,[    ]],[8,2,18,[    ]],[8,3,18,[    ]],[8,4,18,[    ]],[8,5,18,[    ]],[8,6,18,[    ]],[8,7,18,[    ]],[8,8,18,[    ]],[8,9,18,[    ]],[8,10,18,[    ]],[8,11,18,[    ]],[8,12,18,[    ]],[8,13,18,[    ]],[8,14,18,[    ]],[8,15,18,[    ]], [8,1,17,[    ]],[8,2,17,[    ]],[8,3,17,[    ]],[8,4,17,[    ]],[8,5,17,[    ]],[8,6,17,[    ]],[8,7,17,[    ]],[8,8,17,[    ]],[8,9,17,[    ]],[8,10,17,[    ]],[8,11,17,[    ]],[8,12,17,[    ]],[8,13,17,[    ]],[8,14,17,[    ]],[8,15,17,[    ]], [8,1,16,[    ]],[8,2,16,[    ]],[8,3,16,[    ]],[8,4,16,[    ]],[8,5,16,[    ]],[8,6,16,[    ]],[8,7,16,[    ]],[8,8,16,[    ]],[8,9,16,[    ]],[8,10,16,[    ]],[8,11,16,[    ]],[8,12,16,[    ]],[8,13,16,[    ]],[8,14,16,[    ]],[8,15,16,[    ]], [8,1,15,[    ]],[8,2,15,[    ]],[8,3,15,[    ]],[8,4,15,[    ]],[8,5,15,[    ]],[8,6,15,[    ]],[8,7,15,[    ]],[8,8,15,[    ]],[8,9,15,[    ]],[8,10,15,[    ]],[8,11,15,[    ]],[8,12,15,[    ]],[8,13,15,[    ]],[8,14,15,[    ]],[8,15,15,[    ]], [8,1,14,[    ]],[8,2,14,[    ]],[8,3,14,[    ]],[8,4,14,[    ]],[8,5,14,[    ]],[8,6,14,[    ]],[8,7,14,[    ]],[8,8,14,[    ]],[8,9,14,[    ]],[8,10,14,[    ]],[8,11,14,[    ]],[8,12,14,[    ]],[8,13,14,[    ]],[8,14,14,[    ]],[8,15,14,[    ]], [8,1,13,[    ]],[8,2,13,[    ]],[8,3,13,[    ]],[8,4,13,[    ]],[8,5,13,[    ]],[8,6,13,[    ]],[8,7,13,[    ]],[8,8,13,[    ]],[8,9,13,[    ]],[8,10,13,[    ]],[8,11,13,[    ]],[8,12,13,[    ]],[8,13,13,[*   ]],[8,14,13,[*   ]],[8,15,13,[*   ]], [8,1,12,[    ]],[8,2,12,[    ]],[8,3,12,[    ]],[8,4,12,[    ]],[8,5,12,[    ]],[8,6,12,[    ]],[8,7,12,[    ]],[8,8,12,[    ]],[8,9,12,[    ]],[8,10,12,[    ]],[8,11,12,[    ]],[8,12,12,[    ]],[8,13,12,[*   ]],[8,14,12,[*   ]],[8,15,12,[*   ]], [8,1,11,[    ]],[8,2,11,[    ]],[8,3,11,[    ]],[8,4,11,[    ]],[8,5,11,[    ]],[8,6,11,[    ]],[8,7,11,[    ]],[8,8,11,[    ]],[8,9,11,[    ]],[8,10,11,[*   ]],[8,11,11,[*   ]],[8,12,11,[*   ]],[8,13,11,[*   ]],[8,14,11,[*   ]],[8,15,11,[*   ]], [8,1,10,[    ]],[8,2,10,[    ]],[8,3,10,[    ]],[8,4,10,[    ]],[8,5,10,[    ]],[8,6,10,[    ]],[8,7,10,[    ]],[8,8,10,[    ]],[8,9,10,[    ]],[8,10,10,[*   ]],[8,11,10,[*   ]],[8,12,10,[    ]],[8,13,10,[*   ]],[8,14,10,[*   ]],[8,15,10,[*   ]], [8,1,9,[     ]],[8,2,9,[     ]],[8,3,9,[     ]],[8,4,9,[     ]],[8,5,9,[     ]],[8,6,9,[     ]],[8,7,9,[*    ]],[8,8,9,[*    ]],[8,9,9,[*    ]],[8,10,9,[*    ]],[8,11,9,[*    ]],[8,12,9,[*    ]],[8,13,9,[*    ]],[8,14,9,[*    ]],[8,15,9,[*    ]], [8,1,8,[     ]],[8,2,8,[     ]],[8,3,8,[     ]],[8,4,8,[     ]],[8,5,8,[     ]],[8,6,8,[     ]],[8,7,8,[*    ]],[8,8,8,[*    ]],[8,9,8,[*    ]],[8,10,8,[*    ]],[8,11,8,[     ]],[8,12,8,[*    ]],[8,13,8,[*    ]],[8,14,8,[*    ]],[8,15,8,[*    ]], [8,1,7,[     ]],[8,2,7,[     ]],[8,3,7,[     ]],[8,4,7,[     ]],[8,5,7,[     ]],[8,6,7,[     ]],[8,7,7,[*    ]],[8,8,7,[*    ]],[8,9,7,[*    ]],[8,10,7,[*    ]],[8,11,7,[*    ]],[8,12,7,[*    ]],[8,13,7,[*    ]],[8,14,7,[*    ]],[8,15,7,[*    ]], [8,1,6,[     ]],[8,2,6,[     ]],[8,3,6,[     ]],[8,4,6,[     ]],[8,5,6,[     ]],[8,6,6,[     ]],[8,7,6,[*    ]],[8,8,6,[*    ]],[8,9,6,[*    ]],[8,10,6,[*    ]],[8,11,6,[*    ]],[8,12,6,[*    ]],[8,13,6,[*    ]],[8,14,6,[     ]],[8,15,6,[     ]], [8,1,5,[     ]],[8,2,5,[     ]],[8,3,5,[     ]],[8,4,5,[     ]],[8,5,5,[     ]],[8,6,5,[     ]],[8,7,5,[*    ]],[8,8,5,[*    ]],[8,9,5,[*    ]],[8,10,5,[*    ]],[8,11,5,[*    ]],[8,12,5,[*    ]],[8,13,5,[*    ]],[8,14,5,[     ]],[8,15,5,[     ]], [8,1,4,[     ]],[8,2,4,[     ]],[8,3,4,[     ]],[8,4,4,[     ]],[8,5,4,[     ]],[8,6,4,[     ]],[8,7,4,[*    ]],[8,8,4,[*    ]],[8,9,4,[*    ]],[8,10,4,[*    ]],[8,11,4,[*    ]],[8,12,4,[*    ]],[8,13,4,[*    ]],[8,14,4,[     ]],[8,15,4,[     ]], [8,1,3,[     ]],[8,2,3,[     ]],[8,3,3,[     ]],[8,4,3,[     ]],[8,5,3,[     ]],[8,6,3,[     ]],[8,7,3,[*    ]],[8,8,3,[*    ]],[8,9,3,[*    ]],[8,10,3,[*    ]],[8,11,3,[*    ]],[8,12,3,[*    ]],[8,13,3,[*    ]],[8,14,3,[     ]],[8,15,3,[     ]], [8,1,2,[     ]],[8,2,2,[     ]],[8,3,2,[     ]],[8,4,2,[     ]],[8,5,2,[     ]],[8,6,2,[     ]],[8,7,2,[*    ]],[8,8,2,[*    ]],[8,9,2,[*    ]],[8,10,2,[*    ]],[8,11,2,[*    ]],[8,12,2,[*    ]],[8,13,2,[*    ]],[8,14,2,[     ]],[8,15,2,[     ]], [8,1,1,[     ]],[8,2,1,[     ]],[8,3,1,[     ]],[8,4,1,[     ]],[8,5,1,[     ]],[8,6,1,[     ]],[8,7,1,[     ]],[8,8,1,[     ]],[8,9,1,[     ]],[8,10,1,[     ]],[8,11,1,[     ]],[8,12,1,[     ]],[8,13,1,[     ]],[8,14,1,[     ]],[8,15,1,[     ]], [9,1,19,[    ]],[9,2,19,[    ]],[9,3,19,[    ]],[9,4,19,[    ]],[9,5,19,[    ]],[9,6,19,[    ]],[9,7,19,[    ]],[9,8,19,[    ]],[9,9,19,[    ]],[9,10,19,[    ]],[9,11,19,[    ]],[9,12,19,[    ]],[9,13,19,[    ]],[9,14,19,[    ]],[9,15,19,[    ]], [9,1,18,[    ]],[9,2,18,[    ]],[9,3,18,[    ]],[9,4,18,[    ]],[9,5,18,[    ]],[9,6,18,[    ]],[9,7,18,[    ]],[9,8,18,[    ]],[9,9,18,[    ]],[9,10,18,[    ]],[9,11,18,[    ]],[9,12,18,[    ]],[9,13,18,[    ]],[9,14,18,[    ]],[9,15,18,[    ]], [9,1,17,[    ]],[9,2,17,[    ]],[9,3,17,[    ]],[9,4,17,[    ]],[9,5,17,[    ]],[9,6,17,[    ]],[9,7,17,[    ]],[9,8,17,[    ]],[9,9,17,[    ]],[9,10,17,[    ]],[9,11,17,[    ]],[9,12,17,[    ]],[9,13,17,[    ]],[9,14,17,[    ]],[9,15,17,[    ]], [9,1,16,[    ]],[9,2,16,[    ]],[9,3,16,[    ]],[9,4,16,[    ]],[9,5,16,[    ]],[9,6,16,[    ]],[9,7,16,[    ]],[9,8,16,[    ]],[9,9,16,[    ]],[9,10,16,[    ]],[9,11,16,[    ]],[9,12,16,[    ]],[9,13,16,[    ]],[9,14,16,[    ]],[9,15,16,[    ]], [9,1,15,[    ]],[9,2,15,[    ]],[9,3,15,[    ]],[9,4,15,[    ]],[9,5,15,[    ]],[9,6,15,[    ]],[9,7,15,[    ]],[9,8,15,[    ]],[9,9,15,[    ]],[9,10,15,[    ]],[9,11,15,[    ]],[9,12,15,[    ]],[9,13,15,[    ]],[9,14,15,[    ]],[9,15,15,[    ]], [9,1,14,[    ]],[9,2,14,[    ]],[9,3,14,[    ]],[9,4,14,[    ]],[9,5,14,[    ]],[9,6,14,[    ]],[9,7,14,[    ]],[9,8,14,[    ]],[9,9,14,[    ]],[9,10,14,[    ]],[9,11,14,[    ]],[9,12,14,[    ]],[9,13,14,[    ]],[9,14,14,[    ]],[9,15,14,[    ]], [9,1,13,[    ]],[9,2,13,[    ]],[9,3,13,[    ]],[9,4,13,[    ]],[9,5,13,[    ]],[9,6,13,[    ]],[9,7,13,[    ]],[9,8,13,[    ]],[9,9,13,[    ]],[9,10,13,[    ]],[9,11,13,[    ]],[9,12,13,[    ]],[9,13,13,[    ]],[9,14,13,[    ]],[9,15,13,[    ]], [9,1,12,[    ]],[9,2,12,[    ]],[9,3,12,[    ]],[9,4,12,[    ]],[9,5,12,[    ]],[9,6,12,[    ]],[9,7,12,[    ]],[9,8,12,[    ]],[9,9,12,[    ]],[9,10,12,[    ]],[9,11,12,[    ]],[9,12,12,[    ]],[9,13,12,[    ]],[9,14,12,[    ]],[9,15,12,[    ]], [9,1,11,[    ]],[9,2,11,[    ]],[9,3,11,[    ]],[9,4,11,[    ]],[9,5,11,[    ]],[9,6,11,[    ]],[9,7,11,[    ]],[9,8,11,[    ]],[9,9,11,[    ]],[9,10,11,[*   ]],[9,11,11,[*   ]],[9,12,11,[*   ]],[9,13,11,[*   ]],[9,14,11,[    ]],[9,15,11,[    ]], [9,1,10,[    ]],[9,2,10,[    ]],[9,3,10,[    ]],[9,4,10,[    ]],[9,5,10,[    ]],[9,6,10,[    ]],[9,7,10,[    ]],[9,8,10,[    ]],[9,9,10,[    ]],[9,10,10,[*   ]],[9,11,10,[s2  ]],[9,12,10,[    ]],[9,13,10,[*   ]],[9,14,10,[    ]],[9,15,10,[    ]], [9,1,9,[     ]],[9,2,9,[     ]],[9,3,9,[     ]],[9,4,9,[     ]],[9,5,9,[     ]],[9,6,9,[     ]],[9,7,9,[     ]],[9,8,9,[     ]],[9,9,9,[     ]],[9,10,9,[*    ]],[9,11,9,[*    ]],[9,12,9,[     ]],[9,13,9,[*    ]],[9,14,9,[     ]],[9,15,9,[     ]], [9,1,8,[     ]],[9,2,8,[     ]],[9,3,8,[     ]],[9,4,8,[     ]],[9,5,8,[     ]],[9,6,8,[     ]],[9,7,8,[     ]],[9,8,8,[     ]],[9,9,8,[     ]],[9,10,8,[*    ]],[9,11,8,[     ]],[9,12,8,[     ]],[9,13,8,[*    ]],[9,14,8,[     ]],[9,15,8,[     ]], [9,1,7,[     ]],[9,2,7,[     ]],[9,3,7,[     ]],[9,4,7,[     ]],[9,5,7,[     ]],[9,6,7,[     ]],[9,7,7,[     ]],[9,8,7,[     ]],[9,9,7,[     ]],[9,10,7,[*    ]],[9,11,7,[*    ]],[9,12,7,[*    ]],[9,13,7,[*    ]],[9,14,7,[     ]],[9,15,7,[     ]], [9,1,6,[     ]],[9,2,6,[     ]],[9,3,6,[     ]],[9,4,6,[     ]],[9,5,6,[     ]],[9,6,6,[     ]],[9,7,6,[     ]],[9,8,6,[     ]],[9,9,6,[     ]],[9,10,6,[     ]],[9,11,6,[     ]],[9,12,6,[     ]],[9,13,6,[     ]],[9,14,6,[     ]],[9,15,6,[     ]], [9,1,5,[     ]],[9,2,5,[     ]],[9,3,5,[     ]],[9,4,5,[     ]],[9,5,5,[     ]],[9,6,5,[     ]],[9,7,5,[     ]],[9,8,5,[     ]],[9,9,5,[     ]],[9,10,5,[     ]],[9,11,5,[     ]],[9,12,5,[     ]],[9,13,5,[     ]],[9,14,5,[     ]],[9,15,5,[     ]], [9,1,4,[     ]],[9,2,4,[     ]],[9,3,4,[     ]],[9,4,4,[     ]],[9,5,4,[     ]],[9,6,4,[     ]],[9,7,4,[     ]],[9,8,4,[     ]],[9,9,4,[     ]],[9,10,4,[     ]],[9,11,4,[     ]],[9,12,4,[     ]],[9,13,4,[     ]],[9,14,4,[     ]],[9,15,4,[     ]], [9,1,3,[     ]],[9,2,3,[     ]],[9,3,3,[     ]],[9,4,3,[     ]],[9,5,3,[     ]],[9,6,3,[     ]],[9,7,3,[     ]],[9,8,3,[     ]],[9,9,3,[     ]],[9,10,3,[     ]],[9,11,3,[     ]],[9,12,3,[     ]],[9,13,3,[     ]],[9,14,3,[     ]],[9,15,3,[     ]], [9,1,2,[     ]],[9,2,2,[     ]],[9,3,2,[     ]],[9,4,2,[     ]],[9,5,2,[     ]],[9,6,2,[     ]],[9,7,2,[     ]],[9,8,2,[     ]],[9,9,2,[     ]],[9,10,2,[     ]],[9,11,2,[     ]],[9,12,2,[     ]],[9,13,2,[     ]],[9,14,2,[     ]],[9,15,2,[     ]], [9,1,1,[     ]],[9,2,1,[     ]],[9,3,1,[     ]],[9,4,1,[     ]],[9,5,1,[     ]],[9,6,1,[     ]],[9,7,1,[     ]],[9,8,1,[     ]],[9,9,1,[     ]],[9,10,1,[     ]],[9,11,1,[     ]],[9,12,1,[     ]],[9,13,1,[     ]],[9,14,1,[     ]],[9,15,1,[     ]], [10,1,19,[    ]],[10,2,19,[    ]],[10,3,19,[    ]],[10,4,19,[    ]],[10,5,19,[    ]],[10,6,19,[    ]],[10,7,19,[    ]],[10,8,19,[    ]],[10,9,19,[    ]],[10,10,19,[    ]],[10,11,19,[    ]],[10,12,19,[    ]],[10,13,19,[    ]],[10,14,19,[    ]],[10,15,19,[    ]], [10,1,18,[    ]],[10,2,18,[    ]],[10,3,18,[    ]],[10,4,18,[    ]],[10,5,18,[    ]],[10,6,18,[    ]],[10,7,18,[    ]],[10,8,18,[    ]],[10,9,18,[    ]],[10,10,18,[    ]],[10,11,18,[    ]],[10,12,18,[    ]],[10,13,18,[    ]],[10,14,18,[    ]],[10,15,18,[    ]], [10,1,17,[    ]],[10,2,17,[    ]],[10,3,17,[    ]],[10,4,17,[    ]],[10,5,17,[    ]],[10,6,17,[    ]],[10,7,17,[    ]],[10,8,17,[    ]],[10,9,17,[    ]],[10,10,17,[    ]],[10,11,17,[    ]],[10,12,17,[    ]],[10,13,17,[    ]],[10,14,17,[    ]],[10,15,17,[    ]], [10,1,16,[    ]],[10,2,16,[    ]],[10,3,16,[    ]],[10,4,16,[    ]],[10,5,16,[    ]],[10,6,16,[    ]],[10,7,16,[    ]],[10,8,16,[    ]],[10,9,16,[    ]],[10,10,16,[    ]],[10,11,16,[    ]],[10,12,16,[    ]],[10,13,16,[    ]],[10,14,16,[    ]],[10,15,16,[    ]], [10,1,15,[    ]],[10,2,15,[    ]],[10,3,15,[    ]],[10,4,15,[    ]],[10,5,15,[    ]],[10,6,15,[    ]],[10,7,15,[    ]],[10,8,15,[    ]],[10,9,15,[    ]],[10,10,15,[    ]],[10,11,15,[    ]],[10,12,15,[    ]],[10,13,15,[    ]],[10,14,15,[    ]],[10,15,15,[    ]], [10,1,14,[    ]],[10,2,14,[    ]],[10,3,14,[    ]],[10,4,14,[    ]],[10,5,14,[    ]],[10,6,14,[    ]],[10,7,14,[    ]],[10,8,14,[    ]],[10,9,14,[    ]],[10,10,14,[    ]],[10,11,14,[    ]],[10,12,14,[    ]],[10,13,14,[    ]],[10,14,14,[    ]],[10,15,14,[    ]], [10,1,13,[    ]],[10,2,13,[    ]],[10,3,13,[    ]],[10,4,13,[    ]],[10,5,13,[    ]],[10,6,13,[    ]],[10,7,13,[    ]],[10,8,13,[    ]],[10,9,13,[    ]],[10,10,13,[    ]],[10,11,13,[    ]],[10,12,13,[    ]],[10,13,13,[    ]],[10,14,13,[    ]],[10,15,13,[    ]], [10,1,12,[    ]],[10,2,12,[    ]],[10,3,12,[    ]],[10,4,12,[    ]],[10,5,12,[    ]],[10,6,12,[    ]],[10,7,12,[    ]],[10,8,12,[    ]],[10,9,12,[    ]],[10,10,12,[    ]],[10,11,12,[    ]],[10,12,12,[    ]],[10,13,12,[    ]],[10,14,12,[    ]],[10,15,12,[    ]], [10,1,11,[    ]],[10,2,11,[    ]],[10,3,11,[    ]],[10,4,11,[    ]],[10,5,11,[    ]],[10,6,11,[    ]],[10,7,11,[    ]],[10,8,11,[    ]],[10,9,11,[    ]],[10,10,11,[*   ]],[10,11,11,[*   ]],[10,12,11,[*   ]],[10,13,11,[*   ]],[10,14,11,[    ]],[10,15,11,[    ]], [10,1,10,[    ]],[10,2,10,[    ]],[10,3,10,[    ]],[10,4,10,[    ]],[10,5,10,[    ]],[10,6,10,[    ]],[10,7,10,[    ]],[10,8,10,[    ]],[10,9,10,[    ]],[10,10,10,[*   ]],[10,11,10,[*   ]],[10,12,10,[*   ]],[10,13,10,[*   ]],[10,14,10,[    ]],[10,15,10,[    ]], [10,1,9,[     ]],[10,2,9,[     ]],[10,3,9,[     ]],[10,4,9,[     ]],[10,5,9,[     ]],[10,6,9,[     ]],[10,7,9,[     ]],[10,8,9,[     ]],[10,9,9,[     ]],[10,10,9,[*    ]],[10,11,9,[*    ]],[10,12,9,[*    ]],[10,13,9,[*    ]],[10,14,9,[     ]],[10,15,9,[     ]], [10,1,8,[     ]],[10,2,8,[     ]],[10,3,8,[     ]],[10,4,8,[     ]],[10,5,8,[     ]],[10,6,8,[     ]],[10,7,8,[     ]],[10,8,8,[     ]],[10,9,8,[     ]],[10,10,8,[*    ]],[10,11,8,[*    ]],[10,12,8,[*    ]],[10,13,8,[*    ]],[10,14,8,[     ]],[10,15,8,[     ]], [10,1,7,[     ]],[10,2,7,[     ]],[10,3,7,[     ]],[10,4,7,[     ]],[10,5,7,[     ]],[10,6,7,[     ]],[10,7,7,[     ]],[10,8,7,[     ]],[10,9,7,[     ]],[10,10,7,[*    ]],[10,11,7,[*    ]],[10,12,7,[*    ]],[10,13,7,[*    ]],[10,14,7,[     ]],[10,15,7,[     ]], [10,1,6,[     ]],[10,2,6,[     ]],[10,3,6,[     ]],[10,4,6,[     ]],[10,5,6,[     ]],[10,6,6,[     ]],[10,7,6,[     ]],[10,8,6,[     ]],[10,9,6,[     ]],[10,10,6,[     ]],[10,11,6,[     ]],[10,12,6,[     ]],[10,13,6,[     ]],[10,14,6,[     ]],[10,15,6,[     ]], [10,1,5,[     ]],[10,2,5,[     ]],[10,3,5,[     ]],[10,4,5,[     ]],[10,5,5,[     ]],[10,6,5,[     ]],[10,7,5,[     ]],[10,8,5,[     ]],[10,9,5,[     ]],[10,10,5,[     ]],[10,11,5,[     ]],[10,12,5,[     ]],[10,13,5,[     ]],[10,14,5,[     ]],[10,15,5,[     ]], [10,1,4,[     ]],[10,2,4,[     ]],[10,3,4,[     ]],[10,4,4,[     ]],[10,5,4,[     ]],[10,6,4,[     ]],[10,7,4,[     ]],[10,8,4,[     ]],[10,9,4,[     ]],[10,10,4,[     ]],[10,11,4,[     ]],[10,12,4,[     ]],[10,13,4,[     ]],[10,14,4,[     ]],[10,15,4,[     ]], [10,1,3,[     ]],[10,2,3,[     ]],[10,3,3,[     ]],[10,4,3,[     ]],[10,5,3,[     ]],[10,6,3,[     ]],[10,7,3,[     ]],[10,8,3,[     ]],[10,9,3,[     ]],[10,10,3,[     ]],[10,11,3,[     ]],[10,12,3,[     ]],[10,13,3,[     ]],[10,14,3,[     ]],[10,15,3,[     ]], [10,1,2,[     ]],[10,2,2,[     ]],[10,3,2,[     ]],[10,4,2,[     ]],[10,5,2,[     ]],[10,6,2,[     ]],[10,7,2,[     ]],[10,8,2,[     ]],[10,9,2,[     ]],[10,10,2,[     ]],[10,11,2,[     ]],[10,12,2,[     ]],[10,13,2,[     ]],[10,14,2,[     ]],[10,15,2,[     ]], [10,1,1,[     ]],[10,2,1,[     ]],[10,3,1,[     ]],[10,4,1,[     ]],[10,5,1,[     ]],[10,6,1,[     ]],[10,7,1,[     ]],[10,8,1,[     ]],[10,9,1,[     ]],[10,10,1,[     ]],[10,11,1,[     ]],[10,12,1,[     ]],[10,13,1,[     ]],[10,14,1,[     ]],[10,15,1,[     ]] ]).%% 5,14,16 start/**?- traverse(5,14,16).
rainforest([ [1,1,9,[*    ]],[1,2,9,[*    ]],[1,3,9,[*    ]],[1,4,9,[*    ]],[1,5,9,[*    ]], [1,1,8,[*    ]],[1,2,8,[*    ]],[1,3,8,[*    ]],[1,4,8,[*    ]],[1,5,8,[*    ]], [1,1,7,[*    ]],[1,2,7,[*    ]],[1,3,7,[*    ]],[1,4,7,[*    ]],[1,5,7,[*    ]], [1,1,6,[*    ]],[1,2,6,[*    ]],[1,3,6,[*    ]],[1,4,6,[*    ]],[1,5,6,[*    ]], [1,1,5,[*    ]],[1,2,5,[*    ]],[1,3,5,[*    ]],[1,4,5,[*    ]],[1,5,5,[*    ]], [1,1,4,[*    ]],[1,2,4,[*    ]],[1,3,4,[*    ]],[1,4,4,[*    ]],[1,5,4,[*    ]], [1,1,3,[*    ]],[1,2,3,[*    ]],[1,3,3,[*    ]],[1,4,3,[*    ]],[1,5,3,[*    ]], [1,1,2,[*    ]],[1,2,2,[*    ]],[1,3,2,[*    ]],[1,4,2,[*    ]],[1,5,2,[*    ]], [1,1,1,[*    ]],[1,2,1,[*    ]],[1,3,1,[*    ]],[1,4,1,[*    ]],[1,5,1,[*    ]], [2,1,9,[     ]],[2,2,9,[     ]],[2,3,9,[*    ]],[2,4,9,[*    ]],[2,5,9,[*    ]], [2,1,8,[     ]],[2,2,8,[*    ]],[2,3,8,[     ]],[2,4,8,[     ]],[2,5,8,[*    ]], [2,1,7,[     ]],[2,2,7,[*    ]],[2,3,7,[     ]],[2,4,7,[*    ]],[2,5,7,[     ]], [2,1,6,[*    ]],[2,2,6,[     ]],[2,3,6,[k    ]],[2,4,6,[*    ]],[2,5,6,[*    ]], [2,1,5,[*    ]],[2,2,5,[     ]],[2,3,5,[     ]],[2,4,5,[c    ]],[2,5,5,[*    ]], [2,1,4,[     ]],[2,2,4,[*    ]],[2,3,4,[     ]],[2,4,4,[     ]],[2,5,4,[*    ]], [2,1,3,[*    ]],[2,2,3,[     ]],[2,3,3,[     ]],[2,4,3,[*    ]],[2,5,3,[     ]], [2,1,2,[*    ]],[2,2,2,[     ]],[2,3,2,[     ]],[2,4,2,[*    ]],[2,5,2,[     ]], [2,1,1,[     ]],[2,2,1,[*    ]],[2,3,1,[*    ]],[2,4,1,[*    ]],[2,5,1,[     ]], [3,1,9,[     ]],[3,2,9,[     ]],[3,3,9,[*    ]],[3,4,9,[*    ]],[3,5,9,[*    ]], [3,1,8,[     ]],[3,2,8,[*    ]],[3,3,8,[     ]],[3,4,8,[     ]],[3,5,8,[*    ]], [3,1,7,[*    ]],[3,2,7,[     ]],[3,3,7,[*    ]],[3,4,7,[*    ]],[3,5,7,[     ]], [3,1,6,[*    ]],[3,2,6,[     ]],[3,3,6,[     ]],[3,4,6,[*    ]],[3,5,6,[*    ]], [3,1,5,[*    ]],[3,2,5,[     ]],[3,3,5,[     ]],[3,4,5,[     ]],[3,5,5,[*    ]], [3,1,4,[*    ]],[3,2,4,[     ]],[3,3,4,[     ]],[3,4,4,[     ]],[3,5,4,[*    ]], [3,1,3,[*    ]],[3,2,3,[     ]],[3,3,3,[     ]],[3,4,3,[*    ]],[3,5,3,[     ]], [3,1,2,[*    ]],[3,2,2,[*    ]],[3,3,2,[v    ]],[3,4,2,[*    ]],[3,5,2,[     ]], [3,1,1,[     ]],[3,2,1,[*    ]],[3,3,1,[*    ]],[3,4,1,[*    ]],[3,5,1,[     ]], [4,1,9,[*    ]],[4,2,9,[*    ]],[4,3,9,[*    ]],[4,4,9,[*    ]],[4,5,9,[*    ]], [4,1,8,[*    ]],[4,2,8,[*    ]],[4,3,8,[*    ]],[4,4,8,[*    ]],[4,5,8,[*    ]], [4,1,7,[*    ]],[4,2,7,[*    ]],[4,3,7,[*    ]],[4,4,7,[*    ]],[4,5,7,[*    ]], [4,1,6,[*    ]],[4,2,6,[*    ]],[4,3,6,[*    ]],[4,4,6,[*    ]],[4,5,6,[*    ]], [4,1,5,[*    ]],[4,2,5,[*    ]],[4,3,5,[*    ]],[4,4,5,[*    ]],[4,5,5,[*    ]], [4,1,4,[*    ]],[4,2,4,[*    ]],[4,3,4,[*    ]],[4,4,4,[*    ]],[4,5,4,[*    ]], [4,1,3,[*    ]],[4,2,3,[*    ]],[4,3,3,[*    ]],[4,4,3,[*    ]],[4,5,3,[*    ]], [4,1,2,[*    ]],[4,2,2,[*    ]],[4,3,2,[*    ]],[4,4,2,[*    ]],[4,5,2,[*    ]], [4,1,1,[*    ]],[4,2,1,[*    ]],[4,3,1,[*    ]],[4,4,1,[*    ]],[4,5,1,[*    ]] ]).%% 1 start%% key to chest->machete%% machete to vine->exit/**[debug]  ?- traverse(2,2,6).[2,2,6][][2,2,5][][2,3,5][][2,3,4][][2,3,3][][2,2,3][][2,2,2][][2,3,2][][3,3,2][v][3,3,3][v][3,2,3][v][3,2,4][v][3,3,4][v][3,4,4][v][3,4,5][v][3,3,5][v][3,2,5][v][3,2,6][v][3,3,6][v][2,3,6][v,k][2,3,7][v,k][2,3,8][v,k][2,4,8][v,k][3,4,8][v,k][3,3,8][v,k][3,2,7][v,k][2,4,5][v,k,c,m,e]Game Over% Execution Aborted**/traverse(Z,X,Y) :-traverse(Z,X,Y,[],_,[],_),!.traverse(Z,X,Y,Explored,Explored,Inventory,Inventory) :-rainforest(Map),member([Z,X,Y,Cell],Map),Cell=[*],!.traverse(Z,X,Y,Explored,Explored,Inventory,Inventory) :-member([Z,X,Y],Explored),!.traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2) :-rainforest(Map),member([Z,X,Y,Cell],Map),write([Z,X,Y]),(Cell=[]->Inventory4a=Inventory1;(Cell=[Item],append(Inventory1,[Item],Inventory3),apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),writeln(Inventory4a),(member(e,Inventory4a)->(writeln("Game Over"),true);true),append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,traverse(Z,Xm1,Y,Explored3,Explored4,Inventory4a,Inventory5),traverse(Z,X,Ym1,Explored4,Explored5,Inventory5,Inventory6),traverse(Z,Xp1,Y,Explored5,Explored6,Inventory6,Inventory7),traverse(Z,X,Yp1,Explored6,Explored7,Inventory7,Inventory8),traverse(Zm1,X,Y,Explored7,Explored8,Inventory8,Inventory9),traverse(Zp1,X,Y,Explored8,Explored2,Inventory9,Inventory2).apply_all_to_all(Inventory1,Inventory2) :-findall(Item3,(member(Item1,Inventory1),member(Item2,Inventory1),not(Item1=Item2),apply(Item1,Item2,Item3),not(member(Item3,Inventory1))),AddedItems),(AddedItems=[]->Inventory1=Inventory2;(append(Inventory1,AddedItems,Inventory3),apply_all_to_all(Inventory3,Inventory2))).
rainforest([[1,9,[*]],[2,9,[*]],[3,9,[*]],[4,9,[*]],[5,9,[*]],[6,9,[*]], [1,8,[*]],[2,8,[m]],[3,8,[v]],[4,8,[]],[5,8,[]],[6,8,[*]], [1,7,[*]],[2,7,[*]],[3,7,[*]],[4,7,[*]],[5,7,[*]],[6,7,[*]]]). /*[[1,9,[     ]],[2,9,[     ]],[3,9,[*    ]],[4,9,[*    ]],[5,9,[*    ]], [1,8,[     ]],[2,8,[*    ]],[3,8,[     ]],[4,8,[     ]],[5,8,[*    ]], [1,7,[     ]],[2,7,[*    ]],[3,7,[     ]],[4,7,[*    ]],[5,7,[     ]], [1,6,[*    ]],[2,6,[     ]],[3,6,[k    ]],[4,6,[*    ]],[5,6,[*    ]], [1,5,[*    ]],[2,5,[     ]],[3,5,[     ]],[4,5,[c    ]],[5,5,[*    ]], [1,4,[     ]],[2,4,[*    ]],[3,4,[     ]],[4,4,[     ]],[5,4,[*    ]], [1,3,[*    ]],[2,3,[     ]],[3,3,[     ]],[4,3,[*    ]],[5,3,[     ]], [1,2,[*    ]],[2,2,[     ]],[3,2,[v    ]],[4,2,[*    ]],[5,2,[     ]], [1,1,[     ]],[2,1,[*    ]],[3,1,[*    ]],[4,1,[*    ]],[5,1,[     ]]]).
random_dependencies(A) :-random(N1),N2 is round(2*N1),random_dependencies1(N2,A).
random_dependencies1(0,[]) :- !.
random_dependencies1(1,A) :-random_member(B,[and,or,reverse,string_to_list,split_into_sentences,is_positive_language,agrees,member,delete,minus,get_item_n,length,intersection,substring,sum,sort,maximum,map,findall,duplicates,mutually_exclusive,list_head,add_number_to_list]),random_dependencies(C),A=[B,[C]].
random_events(X,Y,Events1,Events3,Grid1,Grid2) :- random(X2),X1 is ceiling(X*X2), random(Y2),Y1 is ceiling(Y*Y2), member([X1,Y1,Events2],Grid1), delete(Grid1,[X1,Y1,Events2],Grid3), append(Events2,[Events1],Events4), append(Grid3,[[X1,Y1,Events4]],Grid4), Events5 is Events1+1, random_events(X,Y,Events5,Events3,Grid4,Grid2),!.
random_movements(X_bounds,Y_bounds,Frame1,N_frames1,N_frames2,Simulation1,Simulation2) :- random_movements1(X_bounds,Y_bounds,Frame1,Frame1,[],Frame2), append(Simulation1,[Frame2],Simulation3), N_frames3 is N_frames1+1, random_movements(X_bounds,Y_bounds,Frame2,N_frames3,N_frames2,Simulation3,Simulation2).
random_movements1(X_bounds,Y_bounds,_,Frame1,Frame11,Frame2) :- Frame1=[[N,[X,Y]]|Rest], random_starting_positions3(X_bounds,Y_bounds,X,Y,X1,Y1,Frame11), append(Frame11,[[N,[X1,Y1]]],Frame3), random_movements1(X_bounds,Y_bounds,_,Rest,Frame3,Frame2).
random_phrase(Noun1,Verb,Noun2) :-choose(noun(Noun1)),choose(verb(Verb)),choose(noun(Noun2)).
random_phrase(Noun1,Verb,Noun2,Ablative,Noun3) :-choose(noun(Noun1)),choose(verb(Verb)),choose(noun(Noun2)),choose(ablative(Ablative),noun(Noun3)).
random_starting_positions1(X,Y,N_people1,N_people2,Frame1,Frame2) :- random_starting_positions2(X,Y,X1,Y1,Frame1),%,Frame3), append(Frame1,[[N_people1,[X1,Y1]]],Frame4), N_people3 is N_people1+1, random_starting_positions1(X,Y,N_people3,N_people2,Frame4,Frame2).
random_starting_positions32(down,X,Y,X,Y1) :- Y1 is Y+1,!.
random_starting_positions32(left,X,Y,X1,Y) :- X1 is X-1,!.
random_starting_positions32(right,X,Y,X1,Y) :- X1 is X+1,!.random_starting_positions32(up,X,Y,X,Y1) :- Y1 is Y-1,!.
randomfn(A1,A2,B) :- %%repeat,trialy2A([1,3,4,5,7],N1),%%random(R),multiply(R,8,N),ceiling(N,N1),fna(N1,A1,A2,B).
randomfn(A1,A2,B) :- repeat,trialy2A([1,3,4,5,7],N1),%%random(R),multiply(R,8,N),ceiling(N,N1),fna(N1,A1,A2,B).
randomfns(1,B,Nb3):-randomlist(B,Na1),randomlist(B,Na2),randomfn(Na1,Na2,Nb),wrap(Nb,Nb2),append(B,Nb2,Nb3).%%write1(".").
randomfns(A,B,C) :- not((=(A,1))),randomlist(B,Na1),randomlist(B,Na2),randomfn(Na1,Na2,Nb),wrap(Nb,Nb2),append(B,Nb2,Nb3),%%tail(B,T),subtract(A,1,D),write(,),randomfns(D,Nb3,C).
randomlist(B,Na) :- %%List1=[1,2,3,4,5,6,7,9,10],length(B,L),length(C,L),append(C,_,B),trialy2A(C,Na).%%,random(R),length(B,Bl),multiply(R,Bl,N),ceiling(N,N1),getitemn(N1,B,Na).
randvars(N,L,V1,V2) :-random1(N0), N1 is N0/100, N2A is round(97+(N1*L)), char_code(V3,N2A), V31=[v,V3], ((member(V31,V1))->randvars(N,L,V1,V2);(append(V1,[V31],V4),NA is N-1, randvars(NA,L,V4,V2))),!.randvars2(0,_L,V,V) :- !.
randvars(N,L,V1,V2) :-random(N1), N2A is round(97+(N1*L)), char_code(V3,N2A), V31=[v,V3], ((member(V31,V1))->randvars(N,L,V1,V2);(append(V1,[V31],V4),NA is N-1, randvars(NA,L,V4,V2))),!.
randvars2(0,_L,V,V) :- !.
randvars2(0,_L,V,V) :- !.randvars2(N,L,V1,V2) :-random(N1), N2A is round(97+(N1*L)), char_code(V3,N2A), atom_string(V3,V4), %%V41=[v,V4],((member(V4,V1))->randvars2(N,L,V1,V2);(append(V1,[V4],V5),NA is N-1, randvars2(NA,L,V5,V2))),!.
randvars2(N,L,V1,V2) :-random(N1), N2A is round(97+(N1*L)), char_code(V3,N2A), atom_string(V3,V4), %%V41=[v,V4],((member(V4,V1))->randvars2(N,L,V1,V2);(append(V1,[V4],V5),NA is N-1, randvars2(NA,L,V5,V2))),!.
randvars2(N,L,V1,V2) :-random1(N0), N1 is N0/100, N2A is round(97+(N1*L)), char_code(V3,N2A), atom_string(V3,V4), %%V41=[v,V4],((member(V4,V1))->randvars2(N,L,V1,V2);(append(V1,[V4],V5),NA is N-1, randvars2(NA,L,V5,V2))),!.
readv([["loves"],["is"],["has"],["is","in"],["moves","to"],["nur","tures"],["needs"],["makes"],["lifts"],["finds"],["forms"],["goes","to"],["writes","on"],["reads","on"],["feels"],["is"]]).
readv([["loves"],["is"],["has"],["is","in"],["moves","to"],["nur","tures"],["needs"],["makes"],["lifts"],["finds"],["forms"],["goes","to"],["writes","on"],["reads","on"],["feels"],["is"]]).reado([["one"],["the","oth","er"],["the","runn","er"],["the","draw","er"],["the","count","er"],["the","graph","er"],["the","test","er"],["the","breaths","on","er"],["the","writ","er"],["the","spell","er"],["the","updat","er"],["the","check","er"],["the","choos","er"],["the","ess","ence"],["the","comb","in","er"],["the","mir","ac","le"],["the","trans","lat","or"],["the","gramm","ar"]]).rhymes([["one","er","or","ar","an","ae","er","ler","ur","ard","ney","ald","ess","el"],["le","py","ye","ee","ice"]]).
reason(eat).
reason(fruit,eat).
reason(medication,cure).
reason(pedagogy,negative_reason,avoid_breakdowns).
reason(watch).
reason(yoga,positive_reason,positive_function).
reason(yoga,positive_reason,stay_supple).
rectangle(XN1,YN1,Grid1,Grid2) :-YN1=[YN2|YN3],rectangle1(XN1,YN2,Grid1,Grid3),rectangle(XN1,YN3,Grid3,Grid2).
rectangles1([],Grid,Grid) :- !.rectangles1(Rectangles,Grid1,Grid2) :-Rectangles=[R|Rs],rectangle2(R,Grid1,Grid3),rectangles1(Rs,Grid3,Grid2).
recursive_collect_arguments(Statement,Arguments1,Arguments2) :-Statement=[Statement1|Statement2],(variable_name(Statement1)->append(Arguments1,[Statement1],Arguments3);(expression_not_var(Statement1)->Arguments1=Arguments3;recursive_collect_arguments(Statement1,Arguments1,Arguments3))),recursive_collect_arguments(Statement2,Arguments3,Arguments2).
recursive_predicate(A,B,_):-member(A,B),!.recursive_predicate(A,B,Globals3):- member([pred_id_chain,C,A],Globals3), (member(C,B)->true; (recursive_predicate(C,B,Globals3))),!.
reflect_shape1(Shape_coords1,y,Shape_coords2) :- Shape_coords1=Coords1, findall([X,Y1,Z],(member([X,Y,Z],Coords1),Y1 is -Y),Coords2), %reset_min(0,0,0,Coords2,Coords3,_Max_X,_Max_Y,_Max_Z), Shape_coords2=Coords2.
reflect_shape1(Shape_coords1,z,Shape_coords2) :- Shape_coords1=Coords1, findall([X,Y,Z1],(member([X,Y,Z],Coords1),Z1 is -Z),Coords2), %reset_min(0,0,0,Coords2,Coords3,_Max_X,_Max_Y,_Max_Z), Shape_coords2=Coords2.
relations1(Input1Labels,OutputLabels,Inputs2Labels,ExtrasLabels,Relations1,Relations2) :-        ((atom(Input1Labels);number(Input1Labels))->Input1Labels1a=[Input1Labels];Input1Labels1a=Input1Labels),Input1Labels1a=[Item1a|Items1],Item1a=[Item1,Type1,Range1,ItemNumber1,Position1],relations2(Item1,Type1,Range1,ItemNumber1,Position1,_Items1,OutputLabels,Inputs2Labels,ExtrasLabels,Relations1,Relations3),relations1(Items1,OutputLabels,Inputs2Labels,ExtrasLabels,Relations3,Relations2).
relations1([],_OutputLabels,_Inputs2Labels,_ExtrasLabels,Relations,Relations).
relations2(Item1,_Range1,_ItemNumber1,_Position1,_Items1,OutputLabels,Inputs2Labels,ExtrasLabels,Relations1,Relations2) :-writeln(r23),%%((Item3=empty,Position1=Position2,not(Position2=Position3))->(        member(Item5a,ExtrasLabels),        Item5a=[Item5,Type5,Range5,ItemNumber5,Position5],        Item1=Item5,        append(Relations1,[[extrarelation,Item5,Type5,Range5,ItemNumber5,Position5]],Relations2),        %%);ExtrasRelations1=ExtrasRelations2),(Option=Inputs2Labels;Option=OutputLabels),not((member(Item4a,Option),        Item4a=[Item4,_Type1,_Range4,_ItemNumber4,_Position4],        Item4=Item5)).
remove_chains_of_one_child_a3(Switch,A8,Options1,Options2,Options3) :-%trace,A8=[[N0,A,N1]|A9],member([N0,A,N1],Options1), %% ** deletedelete(Options1,[N0,A,N1],Options6),%trace,%%writeln1(remove_chains_of_one_children2(N1,N3,Options1,[],_Options4)),remove_chains_of_one_child_a4(N0,A,N3,Options1,[],Options41),Options41=[_|Options42],%writeln([options41,Options41]),subtract(Options6,Options42,Options6a),% * if N0=n3 there are a and b etc.
remove_chains_of_one_child_a4(N1,A1,N3,Options1,Options2,Options3) :-member([N1,A2,N2],Options1),append(Options2,[[N1,A2,N2]],Options31),remove_chains_of_one_child_a5(N2,A1,N3,Options1,Options31,Options3).
remove_chains_of_one_child_a5(N1,A1,N3,Options1,Options2,Options3) :-member([N1,A2,N2],Options1),append(Options2,[[N1,A2,N2]],Options31),remove_chains_of_one_child_a5(N2,A1,N3,Options1,Options31,Options3).
remove_chains_of_one_children1(N0,Options1,Options2,Options3) :-not(member([N0,_A,_N1],Options1)),append(Options1,Options2,Options3),!.
remove_chains_of_one_children11(Options4,Options5,Options3) :-Options4=[[_,_,N2]|N2s],remove_chains_of_one_children1(N2,Options4,Options5,Options41),remove_chains_of_one_children11(N2s,Options41,Options3).
remove_chains_of_one_children2(N1,N3,Options1,_Options2,_Options3) :-member([N1,_,N2],Options1),remove_chains_of_one_children2(N2,N3,Options1,_Options21,_Options31).
remove_dups(List1,List2,List3) :-List1=[Item|List4],delete(List4,Item,List5),append(List2,[Item],List6),remove_dups(List5,List6,List3),!.
remove_dups([Head|Tail],[Head|Result]):- remove_dups(Tail,Result),!.remove_first_and_last_items(L1,L5) :- append([_L],L4,L1), append(L5,[_L3],L4),!.remove_first_and_last_items(L,R,L1,L5) :- append([L],L4,L1), append(L5,[R],L4),!.
remove_dups_in_loops1(A,B,C) :- A=[[Add,[loop1,List]]|D], remove_dups_in_loops1(List,D,[],E), append(B,[[Add,[loop1,List]]],F), remove_dups_in_loops1(E,F,C).
remove_dups_in_loops1(List1,D,F,E) :- D=[[Add,[loop1,List2]]|G], subtract(List2,List1,List3), append(F,[[Add,[loop1,List3]]],H), remove_dups_in_loops1(List1,G,H,E). /*resort(A,B) :- %length(A,C),numbers(C,1,[],N), resort_n(NDs), findall1(N-D,(member(D,A), (member(N-D,NDs)->true;get_resort_n(N))),E),  get_resort_n(A) :- resort_n(A), A1 is A+1, retractall(resort_n(_)), assertz(resort_n(A1)).
remove_end_comment :-working_directory1(A,A),%(exists_directory('../private2/luciancicd-data')->true;make_directory('../private2/luciancicd-data')),repositories_paths(K),omit_paths(Omit),%findall1(Omit1,(member(Omit2,Omit),atom_string(Omit1,Omit2)),Omit3),findall1([K1,G4],(member(K1,K), directory_files(K1,F),delete_invisibles_etc(F,G),%findall1(H,(member(H,G),not(string_concat("dot",_,H)),subtract(G,Omit,G1),findall1(G3,(member(G2,G1),string_concat(G2,"/",G3)),G4)%not(member(G,Omit))),K01),%trace,%foldr(append,K0,K01),working_directory1(Old_D,Old_D),findall1(Mod_time1,(member([D,K31],K01),working_directory1(_,Old_D),working_directory1(_,D),%member(K2,K31),%exists_directory(K2),process_directory_remove_end_comment(K31,%_G, %Omit,% true, Mod_time1)%),Mod_time) ),Mod_time2), foldr(append,Mod_time2,Mod_time),  %/* %trace,findall1(_,(member([_,Tests521],Mod_time),term_to_atom(Tests523,Tests521),member([K21,Tests522,T],Tests523),open_s(K21,write,S21),write(S21,Tests522),close(S21),set_time_file(K21,[],[modified(T)])),_),sleep(2),%*//*[["c/main_file.txt","[[""c.pl"",[[c,3]]]]"],["c/c.pl","%c(1,1,A).
remove_end_comments2(Mod_time4,Mod_time4) :-  not(string_concat(_,"\n% ",Mod_time4)), not(string_concat(_,"\n",Mod_time4)),!.
remove_end_comments2(Mod_time5,Mod_time4) :- string_concat(Mod_time6,"\n",Mod_time5), remove_end_comments2(Mod_time6,Mod_time4).
remove_nd(T,L1,L2) :-T=[T1|T2],%(T1=[r,[_V,T3]]->%(foldr(append,T3,T31),%append(L1,T31,L3));(T1=[nd,T3s],(member(T3,T3s),%foldr(append,T3,T31),remove_nd(T3,[],L32),no_nds(L32),append(L1,L32,L3));(T1=[]->append(L1,[[]],L3);((is_list(T1),remove_nd(T1,[],L32)),(fail,%not(L32=nd),L31=[L32],append(L1,L31,L3));(no_nds(T1),append(L1,[T1],L3))))),remove_nd(T2,L3,L2).
remove_spaces_from_start(A,B,D) :-string_concat(" ",C,A),remove_spaces_from_start(C,B,D),!.
remove_spaces_from_start(A,_B,A) :-not(string_concat(" ",_C,A)),!.
remove_stub_arguments(A,B) :- findall(A2,(member(A1,A),A1=[[n,A23],_,":-",A22],findall(A24,(member([[n,[a,A24]]],A22)%,(A24=1000->A241=[];A241=A24)),A25),A2=[[n,A23],"->",A25]),B).
removebrackets(Value,Value).
removebrackets([[Value]],Value) :-!.
removenotrhyming2(Rhymes3,Verbs1,Verbs2,Verbs3) :-(Verbs1=[Verb4|Verbs5],(member(Verb4,Rhymes3)delete(Rhymes3,Verb4,Rhymes4))->(append(Verbs2,[Verb4],Verbs6),removenotrhyming2(Rhymes4,Verbs5,Verbs6,Verbs3));removenotrhyming2(Rhymes3,Verbs5,Verbs2,Verbs3)).
removerepeatedterm(List1,List2,List3) :-List1=[Item|Rest],append(List2,[Item],List4),removerepeatedterm(Rest,List4,List3),!.
removerepeatedterm(List1,List2,List3) :-List1=[[Item,Item]|Rest],append(List2,[[Item,""]],List4),removerepeatedterm(Rest,List4,List3),!.
removers(Tokens1,N1,Tokens2,Tokens3,Tokens6,Tokens7,Tokens10,Tokens11,Tokens13,Tokens14) :-Tokens1=[Token4|Tokens5],((Token4=[r,N3],T=r);(Token4=[s,N3],T=s)),append(Tokens13,[[N1,T, N3]],Tokens15),%%atom_string(AtomToken4,Token4),%%append(Tokens6,[[AtomToken4]],Tokens8),N2 is N1+1,removers(Tokens5,N2,Tokens2,Tokens3,Tokens6,Tokens7,Tokens10,Tokens11,Tokens15,Tokens14),!.readfile(List1,List2,List7,List8,FromLang,ToLang,Error,Notification) :-phrase_from_file(string(List6), List1),(phrase(file0(List3),List6)->true;(writeln(Error),abort)),select(List3,FromLang,ToLang,[],List5,[],List7,[],List8),sort(List5,List2),length(List2,Length),write(Notification), writeln(Length) %%.select([],_FromLang,_ToLang,List1,List1,List2,List2,List3,List3) :- !.
removers(Tokens1,N1,Tokens2,Tokens3,Tokens7,Tokens8,Tokens10,Tokens11,Tokens13,Tokens14) :-Tokens1=[AtomToken4|Tokens5], %% Token4 to AtomToken4not(AtomToken4=[r,_]),not(AtomToken4=[s,_]), %% "%%[Token41]=Token4,%%atom_string(AtomToken4,Token41),append(Tokens2,[[N1,AtomToken4]],Tokens6),append(Tokens13,[N1],Tokens15),append(Tokens10,[AtomToken4],Tokens12),append(Tokens7,[N1],Tokens9),N2 is N1+1,removers(Tokens5,N2,Tokens6,Tokens3,Tokens9,Tokens8,Tokens12,Tokens11,Tokens15,Tokens14),!.
remvdup(A,B,C):-A=[A1|As],delete(As,A1,B2),append(B,[A1],D),remvdup(B2,D,C).
render_particles(X,Y,Z,N_frames,Grid1,Grid2,Grid3,Particles1,Particles2,Particles3) :- update_particles([],Grid1,Grid4,Particles1,Particles2,Particles4), N_frames2 is N_frames-1, append(Grid2,[Grid4],Grid5), render_particles(X,Y,Z,N_frames2,Grid1,Grid5,Grid3,Particles4,Particles4,Particles3),!.
renderh1(Form1,Harmony,HarmonyParts1,Track1,Track2,Song1,Song2) :-%%length(Form1,FormLength),HarmonyParts1=[HarmonyParts2|HarmonyParts3],HarmonyParts2=[[_A,[InstrumentNumber1,_B],_C]|_D],InstrumentNumber2 is InstrumentNumber1 + 1,printheader(Track1,[InstrumentNumber2,_],Song1,Song3),%%renderh21(Form1,Harmony,HarmonyParts1,Track1,1,_,Song3,Song4),renderh21(Form1,Harmony,HarmonyParts2,Track1,1,_E,Song3,Song4),Track3 is Track1+1,renderh1(Form1,Harmony,HarmonyParts3,Track3,Track2,Song4,Song2),!.
renderh1(Form1,Harmony,HarmonyParts1,Track1,Track2,Song1,Song2) :-%%length(Form1,FormLength),HarmonyParts1=[HarmonyParts2|HarmonyParts3],HarmonyParts2=[[_A,[InstrumentNumber1,_B],_C]|_D],InstrumentNumber2 is InstrumentNumber1,%% + 1,printheader(Track1,[InstrumentNumber2,_],Song1,Song3),%%renderh21(Form1,Harmony,HarmonyParts1,Track1,1,_,Song3,Song4),renderh21(Form1,Harmony,HarmonyParts2,Track1,1,_E,Song3,Song4),Track3 is Track1+1,renderh1(Form1,Harmony,HarmonyParts3,Track3,Track2,Song4,Song2),!.
renderh21(Form1,Harmony,HarmonyParts1,Track,Bar1,Bar2,Voice1,Voice2) :-HarmonyParts1=[HarmonyPart2|HarmonyParts3],HarmonyPart2=[Section1,[_,_],1],longtoshortform(Section1,Section2),renderh22(Section2,Harmony,Track,Bar1,Bar3,Voice1,Voice3),renderh22(Section2,Harmony,Track,Bar3,Bar4,Voice3,Voice4),renderh21(Form1,Harmony,HarmonyParts3,Track,Bar4,Bar2,Voice4,Voice2),!.
renderh22(Section1,Harmony1A,Track,Bar1,Bar2,Voice1,Voice2) :-Harmony1A=[Harmony1A1|Harmony1A2],/**findall(Lyrics2,(member(Lyrics2,Lyrics1),Lyrics2=[Section1|_]),Lyrics3),string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),**/%% shorten%%string_concat(B11,_C1,Section11),%%string_length(B11,1),atom_string(Section1,B11),findall(Harmony2,(member(Harmony2,Harmony1A1),Harmony2=[Section1|_]%%,string_concat(B1,_C,Section1A),%%string_length(B1,1),atom_string(Section1,B1)),Harmony3),%% shorten(not(Harmony3=[])->%%Lyrics3=[[_, Lyrics1A,Lyrics2A,Lyrics3A,Lyrics4A]],%%Harmony3=[[_, Harmony1A], [_, Harmony2A]],(renderlines1h(Harmony3,Track,Bar1,Voice1,Voice3),Bar3 is Bar1+1);(Bar3 is Bar1,Voice3=Voice1)),/**Bar3 is Bar1+1,renderline1h(Harmony2A,Track,Bar3,Voice3,Voice4),Bar4 is Bar3+1,renderline1h(Harmony1A,Track,Bar4,Voice4,Voice5),Bar5 is Bar4+1,renderline1h(Harmony2A,Track,Bar5,Voice5,Voice6),Bar6 is Bar5+1,**/%%delete(Harmony3,[Section1|_],Harmony5),renderh22(Section1,Harmony1A2,Track,Bar3,Bar2,Voice3,Voice2).
renderh22(Section1,Harmony1A,Track,Bar1,Bar2,Voice1,Voice2) :-Harmony1A=[Harmony1A1|Harmony1A2],/**findall(Lyrics2,(member(Lyrics2,Lyrics1),Lyrics2=[Section1|_]),Lyrics3),string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),**/%% shorten%%string_concat(B11,_C1,Section11),%%string_length(B11,1),atom_string(Section1,B11),findall(Harmony2,(member(Harmony2,Harmony1A1),Harmony2=[Section1|_]%%,string_concat(B1,_C,Section1A),%%string_length(B1,1),atom_string(Section1,B1)),Harmony3),%% shorten(not(Harmony3=[])->%%Lyrics3=[[_, Lyrics1A,Lyrics2A,Lyrics3A,Lyrics4A]],%%Harmony3=[[_, Harmony1A], [_, Harmony2A]],(renderlines1h(Harmony3,Track,Bar1,Voice1,Voice3),Bar3 is Bar1+1);(Bar3 is Bar1,Voice3=Voice1)),/**Bar3 is Bar1+1,renderline1h(Harmony2A,Track,Bar3,Voice3,Voice4),Bar4 is Bar3+1,renderline1h(Harmony1A,Track,Bar4,Voice4,Voice5),Bar5 is Bar4+1,renderline1h(Harmony2A,Track,Bar5,Voice5,Voice6),Bar6 is Bar5+1,**/%%delete(Harmony3,[Section1|_],Harmony5),renderh22(Section1,Harmony1A2,Track,Bar3,Bar2,Voice3,Voice2).renderlines1h([],_Track,_Bar,Voice,Voice) :- !.
renderline2(BarTimes1,BarTimes4,Melody1,Track,Bar,Voice1,Voice2) :-BarTimes1=[BarTimes2|BarTimes3],BarTimes2=[Time,Type,Length,Nth_note_from_mel_harm,Velocity],%trace,((Type="NT",get_item_n(Melody1,Nth_note_from_mel_harm,Melody2),%Melody1=[Melody2|Melody3],concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody2,"-           ",Length,"   von=",Velocity,"   voff=0\n"],Song))->true;(%Type="R",concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  R          ",Length,"      voff=0\n"],Song))),string_concat(Voice1,Song,Voice3),renderline2(BarTimes3,BarTimes4,Melody1,Track,Bar,Voice3,Voice2).
renderline2(BarTimes1,BarTimes4,Melody1,Track,Bar,Voice1,Voice2) :-Melody1=[Melody2|Melody3],BarTimes1=[BarTimes2|BarTimes3],concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody2,"-           1/2   voff=0\n"],Song),string_concat(Voice1,Song,Voice3),renderline2(BarTimes3,BarTimes4,Melody3,Track,Bar,Voice3,Voice2).
renderline2(BarTimes1,BarTimes4,Melody1,Track,Bar,Voice1,Voice2) :-Melody1=[Melody2|Melody3],BarTimes1=[BarTimes2|BarTimes3],concat_list3("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody2,"-           1/2   voff=0\n"],Song),string_concat(Voice1,Song,Voice3),renderline2(BarTimes3,BarTimes4,Melody3,Track,Bar,Voice3,Voice2).
renderlineh2(BarTimes1,BarTimes4,Melody1,Track,Bar,Voice1,Voice2) :-%Melody1=[Melody2|Melody3],%Melody2=[_,[Melody21,Melody22,Melody23]],BarTimes1=[BarTimes2|BarTimes3],BarTimes2=[Time,Type,Length,Nth_note_from_mel_harm,Velocity],((Type="NT",get_item_n(Melody1,Nth_note_from_mel_harm,Melody2),Melody2=[_,[Melody21,Melody22,Melody23]],%Melody1=[Melody2|Melody3],%concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody2,"-           ",Length,"   von=",Velocity,"   voff=0\n"],Song));concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody21,"-           ",Length,"   von=",Velocity," voff=0\n"],Song1),concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody22,"-           ",Length,"   von=",Velocity," voff=0\n"],Song2),concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody23,"-           ",Length,"   von=",Velocity," voff=0\n"],Song3))->true;(%Type="R",%get_item_n(Melody1,Nth_note_from_mel_harm,Melody2),%Melody2=[_,[Melody21,Melody22,Melody23]],%Melody1=[Melody2|Melody3],%concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody2,"-           ",Length,"   von=",Velocity,"   voff=0\n"],Song));concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  R           ",Length,"    voff=0\n"],Song1),concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  R           ",Length,"    voff=0\n"],Song2),concat_list("BA    ",[Bar,"   CR         ",Time,"   TR  ",Track,"   CH  ",Track,"   NT  R           ",Length,"    voff=0\n"],Song3))),concat_list(Voice1,[Song1,Song2,Song3],Voice3),renderlineh2(BarTimes3,BarTimes4,Melody1,Track,Bar,Voice3,Voice2).
renderlineh2(BarTimes1,BarTimes4,Melody1,Track,Bar,Voice1,Voice2) :-Melody1=[Melody2|Melody3],Melody2=[_,[Melody21,Melody22,Melody23]],BarTimes1=[BarTimes2|BarTimes3],concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody21,"-           1/2   voff=0\n"],Song1),concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody22,"-           1/2   voff=0\n"],Song2),concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody23,"-           1/2   voff=0\n"],Song3),concat_list(Voice1,[Song1,Song2,Song3],Voice3),renderlineh2(BarTimes3,BarTimes4,Melody3,Track,Bar,Voice3,Voice2).
renderlineh2(BarTimes1,BarTimes4,Melody1,Track,Bar,Voice1,Voice2) :-Melody1=[Melody2|Melody3],Melody2=[_,[Melody21,Melody22,Melody23]],BarTimes1=[BarTimes2|BarTimes3],concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody21,"-           1/2   voff=0\n"],Song1),concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody22,"-           1/2   voff=0\n"],Song2),concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody23,"-           1/2   voff=0\n"],Song3),concat_list(Voice1,[Song1,Song2,Song3],Voice3),renderlineh2(BarTimes3,BarTimes4,Melody3,Track,Bar,Voice3,Voice2).outputlyrics(File1,Lyrics1) :-Lyrics1=[Lyrics2|_Lyrics3],Lyrics2=[_|Lyrics4],Lyrics4=[Lyrics5|_Lyrics6],sentencewithspaces(Lyrics5,Lyrics7A),string_concat(Lyrics7A,"\n\n",Lyrics7),outputlyrics1(Lyrics1,Lyrics7,Lyrics8),concat_list(File1,["lyrics.txt"],File2),open_s(File2,write,Stream),write(Stream,Lyrics8), close(Stream),%%texttobr2(u,File2,u,u),texttobr(u,File2,u,u).
renderlineh2(BarTimes1,BarTimes4,Melody1,Track,Bar,Voice1,Voice2) :-Melody1=[Melody2|Melody3],Melody2=[_,[Melody21,Melody22,Melody23]],BarTimes1=[BarTimes2|BarTimes3],concat_list3("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody21,"-           1/2   voff=0\n"],Song1),concat_list3("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody22,"-           1/2   voff=0\n"],Song2),concat_list3("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  ",Melody23,"-           1/2   voff=0\n"],Song3),concat_list3(Voice1,[Song1,Song2,Song3],Voice3),renderlineh2(BarTimes3,BarTimes4,Melody3,Track,Bar,Voice3,Voice2).
renderlinerests(BarTimes1,BarTimes2,Track,Bar,Voice1,Voice2) :-BarTimes1=[BarTimes2|BarTimes3],concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  R            1/2   voff=0\n"],Song),string_concat(Voice1,Song,Voice3),renderlinerests(BarTimes3,BarTimes2,Track,Bar,Voice3,Voice2).
renderlinerests(BarTimes1,BarTimes2,Track,Bar,Voice1,Voice2) :-BarTimes1=[BarTimes2|BarTimes3],concat_list("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  R            1/2   voff=0\n"],Song),string_concat(Voice1,Song,Voice3),renderlinerests(BarTimes3,BarTimes2,Track,Bar,Voice3,Voice2).longtoshortform(Section1,Section2) :-string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),!.
renderlinerests(BarTimes1,BarTimes2,Track,Bar,Voice1,Voice2) :-BarTimes1=[BarTimes2|BarTimes3],concat_list3("BA    ",[Bar,"   CR         ",BarTimes2,"   TR  ",Track,"   CH  ",Track,"   NT  R            1/2   voff=0\n"],Song),string_concat(Voice1,Song,Voice3),renderlinerests(BarTimes3,BarTimes2,Track,Bar,Voice3,Voice2).
renderlines1h(Harmony1,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],%%Rests is Totallength-Lyrics2Length,BarTimes1=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelodyh(Harmony1,Harmony2),%%writeln(generatemelodyh(Harmony1,Harmony2)),renderlineh2(BarTimes1,BarTimes2,Harmony2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelodyh(Harmony1,Harmony2) :-generatemelodyh1(Harmony1,[],Harmony3),length(Harmony3,Harmony2Length),Lyrics2Length=8,changelengthh(Lyrics2Length,Harmony2Length,Harmony3,Harmony2).generatemelodyh1([],Melody,Melody) :- !.
renderlines1h(Harmony1,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],%%Rests is Totallength-Lyrics2Length,rhythm(BarTimes1),%BarTimes1=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelodyh(Harmony1,Harmony2),%%writeln(generatemelodyh(Harmony1,Harmony2)),renderlineh2(BarTimes1,BarTimes2,Harmony2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelodyh(Harmony1,Harmony2) :-generatemelodyh1(Harmony1,[],Harmony3),length(Harmony3,Harmony2Length),Lyrics2Length=8,changelengthh(Lyrics2Length,Harmony2Length,Harmony3,Harmony2).generatemelodyh1([],Melody,Melody) :- !.
renderm1(Form1,Melody,MelodyParts1,Track1,Track2,Song1,Song2) :-%%length(Form1,FormLength),MelodyParts1=[MelodyParts2|MelodyParts3],MelodyParts2=[[_A,[InstrumentNumber1,_B],_C]|_D],InstrumentNumber2 is InstrumentNumber1,%% + 1,printheader(Track1,[InstrumentNumber2,_],Song1,Song3),%%renderm21(Form1,Melody,MelodyParts1,Track1,1,_,Song3,Song4),renderm21(Form1,Melody,MelodyParts2,Track1,1,_E,Song3,Song4),Track3 is Track1+1,renderm1(Form1,Melody,MelodyParts3,Track3,Track2,Song4,Song2),!.
renderm21(Form1,Melody,MelodyParts1,Track,Bar1,Bar2,Voice1,Voice2) :-MelodyParts1=[MelodyPart2|MelodyParts3],MelodyPart2=[Section1,[_,_],1],longtoshortform(Section1,Section2),renderm22(Section2,Melody,Track,Bar1,Bar3,Voice1,Voice3),renderm21(Form1,Melody,MelodyParts3,Track,Bar3,Bar2,Voice3,Voice2),!.
renderm22(Section1,Melody1,Track,Bar1,Bar2,Voice1,Voice2) :-/**findall(Lyrics2,(member(Lyrics2,Lyrics1),Lyrics2=[Section1|_]),Lyrics3),string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),**/findall(Melody2,(member(Melody2,Melody1),Melody2=[Section1|_]),Melody3),%%Lyrics3=[[_, Lyrics1A,Lyrics2A,Lyrics3A,Lyrics4A]],Melody3=[[_, Melody1A], [_, Melody2A]],renderline1m(Melody1A,Track,Bar1,Voice1,Voice3),Bar3 is Bar1+1,renderline1m(Melody2A,Track,Bar3,Voice3,Voice4),Bar4 is Bar3+1,renderline1m(Melody1A,Track,Bar4,Voice4,Voice5),Bar5 is Bar4+1,renderline1m(Melody2A,Track,Bar5,Voice5,Voice6),Bar6 is Bar5+1,delete(Melody3,[Section1|_],Melody5),renderm22(Section1,Melody5,Track,Bar6,Bar2,Voice6,Voice2).
renderv1(Form1,Voiceparts1,Vocalstubinstrument,Lyrics,Melody,Totallength,Track,Bar1,Bar2,Voice1,Voice2) :-Form1=[Section|Form2],Voiceparts1=[Section|Voiceparts2],renderv2(Section,Lyrics,Melody,Totallength,Track,Bar1,Bar3,Voice1,Voice3),renderv1(Form2,Voiceparts2,Vocalstubinstrument,Lyrics,Melody,Totallength,Track,Bar3,Bar2,Voice3,Voice2),!.
renderv2(Section1,Lyrics1,Melody1,_Totallength0,Track,Bar1,Bar2,Voice1,Voice2) :-findall(Lyrics2,(member(Lyrics2,Lyrics1),Lyrics2=[Section1|_]),Lyrics3),string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),findall(Melody2,(member(Melody2,Melody1),Melody2=[Section2|_]),Melody3),Lyrics3=[Lyrics3A1|_Lyrics5],%%trace,(Lyrics3A1=[_,Lyrics1A,Lyrics2A,Lyrics3A,Lyrics4A]->true;(writeln(["Error:",Lyrics3A1,"does not have 4 lines"]),abort)),Melody3=[[_, Melody1A], [_, Melody2A]],renderline1(Lyrics1A,Melody1A,_Totallength1,Track,Bar1,Voice1,Voice3),Bar3 is Bar1+1,renderline1(Lyrics2A,Melody2A,_Totallength2,Track,Bar3,Voice3,Voice4),Bar4 is Bar3+1,renderline1(Lyrics3A,Melody1A,_Totallength3,Track,Bar4,Voice4,Voice5),Bar5 is Bar4+1,renderline1(Lyrics4A,Melody2A,_Totallength4,Track,Bar5,Voice5,Voice6),Bar6 is Bar5+1,delete(Lyrics1,[Section1|_],Lyrics51),renderv2(Section1,Lyrics51,Melody1,_Totallength,Track,Bar6,Bar2,Voice6,Voice2).
renderv2(Section1,Lyrics1,Melody1,_Totallength0,Track,Bar1,Bar2,Voice1,Voice2) :-findall(Lyrics2,(member(Lyrics2,Lyrics1),Lyrics2=[Section1|_]),Lyrics3),string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),findall(Melody2,(member(Melody2,Melody1),Melody2=[Section2|_]),Melody3),Lyrics3=[[_, Lyrics1A,Lyrics2A,Lyrics3A,Lyrics4A]],Melody3=[[_, Melody1A], [_, Melody2A]],renderline1(Lyrics1A,Melody1A,_Totallength1,Track,Bar1,Voice1,Voice3),Bar3 is Bar1+1,renderline1(Lyrics2A,Melody2A,_Totallength2,Track,Bar3,Voice3,Voice4),Bar4 is Bar3+1,renderline1(Lyrics3A,Melody1A,_Totallength3,Track,Bar4,Voice4,Voice5),Bar5 is Bar4+1,renderline1(Lyrics4A,Melody2A,_Totallength4,Track,Bar5,Voice5,Voice6),Bar6 is Bar5+1,delete(Lyrics1,[Section1|_],Lyrics5),renderv2(Section1,Lyrics5,Melody1,_Totallength,Track,Bar6,Bar2,Voice6,Voice2).
renderv2(Section1,Lyrics1,Melody1,_Totallength0,Track,Bar1,Bar2,Voice1,Voice2) :-findall(Lyrics2,(member(Lyrics2,Lyrics1),Lyrics2=[Section1|_]),Lyrics3),string_concat(Section2A,_C,Section1),string_length(Section2A,1),atom_string(Section2,Section2A),findall(Melody2,(member(Melody2,Melody1),Melody2=[Section2|_]),Melody3),Lyrics3=[[_, Lyrics1A,Lyrics2A,Lyrics3A,Lyrics4A]],Melody3=[[_, Melody1A], [_, Melody2A]],renderline1(Lyrics1A,Melody1A,_Totallength1,Track,Bar1,Voice1,Voice3),Bar3 is Bar1+1,renderline1(Lyrics2A,Melody2A,_Totallength2,Track,Bar3,Voice3,Voice4),Bar4 is Bar3+1,renderline1(Lyrics3A,Melody1A,_Totallength3,Track,Bar4,Voice4,Voice5),Bar5 is Bar4+1,renderline1(Lyrics4A,Melody2A,_Totallength4,Track,Bar5,Voice5,Voice6),Bar6 is Bar5+1,delete(Lyrics1,[Section1|_],Lyrics5),renderv2(Section1,Lyrics5,Melody1,_Totallength,Track,Bar6,Bar2,Voice6,Voice2).renderline1(Lyrics2,Melody1,_Totallength,Track,Bar1,Voice1,Voice2) :-%%Lyrics1=[_,Lyrics2],length(Lyrics2,Lyrics2Length),%%Rests is Totallength-Lyrics2Length,BarTimes1=["0","1/2","1","1+1/2","2","2+1/2","3","3+1/2"],generatemelody(Lyrics2Length,Melody1,Melody2),renderline2(BarTimes1,BarTimes2,Melody2,Track,Bar1,Voice1,Voice3),renderlinerests(BarTimes2,_BarTimes3,Track,Bar1,Voice3,Voice2).generatemelody(Lyrics2Length,Melody1,Melody2) :-generatemelody1(Melody1,[],Melody3),length(Melody3,Melody2Length),changelength(Lyrics2Length,Melody2Length,Melody3,Melody2).generatemelody1([],Melody,Melody) :- !.
repeat(Str,Num,Res):-    Num1 is Num-1,    repeat(Str,Num1,Res1),    string_concat(Str, Res1, Res).
repeat_until_the_same1(A,B_initial,B,B_result2) :-%copy_term(A,A1),copy_term(B_initial,B_initial1),copy_term(B,B1),copy_term(B,B2),copy_term(B_result,B_result1),A=B_initial,B1,(A=B_result->B_result=B_result2;(repeat_until_the_same1(A,B_initial1,B2,B_result2))),!.
repeatlastnote2(Length1,Item,Melody1,Melody2) :-append(Melody1,[Item],Melody3),Length2 is Length1-1,repeatlastnote2(Length2,Item,Melody3,Melody2),!.
repeatlastnoteh2(Length1,Item,Melody1,Melody2) :-append(Melody1,[Item],Melody3),Length2 is Length1-1,repeatlastnoteh2(Length2,Item,Melody3,Melody2),!.
replace(Input1,Output1,Inputs2Labels,ExtrasLabels,Relations1,Relations2) :-((atom(Input1);number(Input1))->Input1a=[Input1];Input1a=Input1),Input1a=[Item1|Items1],        ((atom(Output1);number(Output1))->Output1a=[Output1];Output1a=Output1),Output1a=[Item2|Items2], %% record what we need to give to output, then give it in a clause acc considerationslabel(Item1,input1,1,1,[],Input1Labels),label(Item2,output,1,1,[],OutputLabels), %% find position, type of values, (will find identicalness)relations1(Input1Labels,OutputLabels,Inputs2Labels,ExtrasLabels,Relations1,Relations3), %% find rel types, which case extra/findargs relates to%% ExtrasLabels later%% return option config from rep, type config in extras, extras with relationsreplace(Items1,Items2,Inputs2Labels,ExtrasLabels,Relations3,Relations2).
replace00(Input1,Find,Replace,SepandPad,Input2,Input3) :-Input1=[Input4|Input5],string_codes(Input4,String1),replace1(String1,Find,Replace,[],Input7),string_codes(Output,Input7),split_string(Output,SepandPad,SepandPad,Input8),append(Input2,Input8,Input9),replace00(Input5,Find,Replace,SepandPad,Input9,Input3), !.
replace00([],_Find,_Replace,_SepandPad,Input,Input) :- !.
replace00([],_Find,_Replace,_SepandPad,Input,Input) :- !.replace00(Input1,Find,Replace,SepandPad,Input2,Input3) :-Input1=[Input4|Input5],string_codes(Input4,String1),replace1(String1,Find,Replace,[],Input7),string_codes(Output,Input7),split_string(Output,SepandPad,SepandPad,Input8),append(Input2,Input8,Input9),replace00(Input5,Find,Replace,SepandPad,Input9,Input3), !.
replace00([],_Find,_Replace,_SepandPad,Input,Input) :- !.replace00(Input1,Find,Replace,SepandPad,Input2,Input3) :-Input1=[Input4|Input5],string_codes(Input4,String1),replace1(String1,Find,Replace,[],Input7),string_codes(Output,Input7),split_string(Output,SepandPad,SepandPad,Input8),append(Input2,Input8,Input9),replace00(Input5,Find,Replace,SepandPad,Input9,Input3), !.replace1([],_Find,_Replace,Input,Input) :- !.
replace1(Input1,Find,Replace,Input2,Input3) :-Input1=[Input4|Input5],member(Input4,Find),append(Input2,[Replace],Input6),replace1(Input5,Find,Replace,Input6,Input3), !.
replace1(Input1,Find,Replace,Input2,Input3) :-Input1=[Input4|Input5],member(Input4,Find),append(Input2,[Replace],Input6),replace1(Input5,Find,Replace,Input6,Input3), !.replace1(Input1,Find,Replace,Input2,Input3) :-Input1=[Input4|Input5],not(member(Input4,Find)),append(Input2,[Input4],Input6),replace1(Input5,Find,Replace,Input6,Input3), !.
replace1(Input1,Find,Replace,Input2,Input3) :-Input1=[Input4|Input5],not(member(Input4,Find)),append(Input2,[Input4],Input6),replace1(Input5,Find,Replace,Input6,Input3), !.
replace1(Input1,Find,Replace,Input2,Input3) :-Input1=[Input4|Input5],not(member(Input4,Find)),append(Input2,[Input4],Input6),replace1(Input5,Find,Replace,Input6,Input3), !.split_string_onnonletter(String00,List1) :-string_codes(String00,String1),split_string_onnonletter(String1,[],List0),string_codes(List0,List2),split_string(List2," "," ",List1),!.
replace1(Replacements,A,D) :- Replacements=[[B,C]|G], atomic_list_concat(E,B,A), atomic_list_concat(E,C,F), replace1(G,F,D),!.
replace1([],_Find,_Replace,Input,Input) :- !.
replace1([],_Find,_Replace,Input,Input) :- !.replace1(Input1,Find,Replace,Input2,Input3) :-Input1=[Input4|Input5],member(Input4,Find),append(Input2,[Replace],Input6),replace1(Input5,Find,Replace,Input6,Input3), !.
replace11(After,Insertions,After2,After3) :- After=[After4|After5], (member(After4,Insertions)-> After7=[i,After4]; After7=After4), append(After2,[After7],After6), replace11(After5,Insertions,After6,After3),!.
replace11_vintage(After,Insertions,Permanent_insertions,After2,After3) :- After=[After4|After5], (member(After4,Insertions)-> After7=[i,After4]; (member(After4,Permanent_insertions)-> After7=[p,After4]; After7=After4)), append(After2,[After7],After6), replace11_vintage(After5,Insertions,Permanent_insertions,After6,After3),!.
replace12(Before,After,Deletions,After2,After3) :- %trace,%append(After4,After5,After), %(After4=[]), append(After51,After52,After),  %append(After4,Before5,Before), append(Before53,Before54,Before), append(After51,Before52,Before54), %After=[After4|After5], %not(Before53=[]), %not(length(Before53,1)),%-> not(Before53=[]),%-> Before53=[Before55],%; %Before53=Before55), (true%member(Before53,Deletions) -> (Before53=[]->After7=[];  (is_list(Before55)-> findall1([d,B],member(B,Before55),After7); After7=[[d,Before55]]) );  After7=Before55), (After7=[]-> foldr(append,[After2%,After4 ],After6); foldr(append,[After2,%After4, After7],After6)), replace12(Before52,After52,Deletions,After6,After3).
replace12(Before,After,Deletions,After2,After3) :- append(After4,After5,After), not(After4=[]), append(After51,After52,After5),  append(After4,Before5,Before), append(Before53,Before54,Before5), append(After51,Before52,Before54), %After=[After4|After5], %not(Before53=[]), (length(Before53,1)->Before53=[Before55]; Before53=Before55), (true%member(Before53,Deletions) -> (Before53=[]->After7=[];  (is_list(Before55)-> findall1([d,B],member(B,Before55),After7); After7=[[d,Before55]]) );  After7=Before55), (After7=[]-> foldr(append,[After2,After4],After6); foldr(append,[After2,After4,After7],After6)), replace12(Before52,After52,Deletions,After6,After3).
replace12_vintage(Before,After,Deletions,After2,After3) :- %trace,%append(After4,After5,After), %(After4=[]), append(After51,After52,After),  %append(After4,Before5,Before), append(Before53,Before54,Before), append(After51,Before52,Before54), %After=[After4|After5], %not(Before53=[]), %not(length(Before53,1)),%-> not(Before53=[]),%-> Before53=[Before55],%; %Before53=Before55), (true%member(Before53,Deletions) -> (Before53=[]->After7=[];  (is_list(Before55)-> findall1([d,B],member(B,Before55),After7); After7=[[d,Before55]]) );  After7=Before55), (After7=[]-> foldr(append,[After2%,After4 ],After6); foldr(append,[After2,%After4, After7],After6)), replace12_vintage(Before52,After52,Deletions,After6,After3).
replace12_vintage(Before,After,Deletions,After2,After3) :- append(After4,After5,After), not(After4=[]), append(After51,After52,After5),  append(After4,Before5,Before), append(Before53,Before54,Before5), append(After51,Before52,Before54), %After=[After4|After5], %not(Before53=[]), (length(Before53,1)->Before53=[Before55]; Before53=Before55), (true%member(Before53,Deletions) -> (Before53=[]->After7=[];  (is_list(Before55)-> findall1([d,B],member(B,Before55),After7); After7=[[d,Before55]]) );  After7=Before55), (After7=[]-> foldr(append,[After2,After4],After6); foldr(append,[After2,After4,After7],After6)), replace12_vintage(Before52,After52,Deletions,After6,After3).
replace1_t2ab(Replacements,A,D) :- Replacements=[[B,C]|G], atomic_list_concat(E,B,A), atomic_list_concat(E,C,F), replace1_t2ab(G,F,D),!.
replace1_t2b(Replacements,A,D) :- Replacements=[[B,C]|G], atomic_list_concat(E,B,A), atomic_list_concat(E,C,F), replace1_t2b(G,F,D),!.
replace2(A,Find,Replace,B) :- sub_string(A,B1,C,_D,Find),string_concat(List,List2,A),string_length(List,B1),string_concat(List3,List4,List2),string_length(List3,C), replace2(List4,Find,Replace,List41), foldr(string_concat,[List,Replace,List41],B),!.
replace2(A,_Find,_Replace,A) :- !.
replace_1(File_contents1,Grid2,File_contents2) :-Grid2=[[X,Y,P]|Grid4],delete(File_contents1,[X,Y,_],File_contents3),append(File_contents3,[[X,Y,P]],File_contents4),replace_1(File_contents4,Grid4,File_contents2).
replace_a_word1(A1,List1,List2,List3) :-List1=[L|Ls],%trace,(((L="["->true;(L="]"->true;(L="\""->true;(L="'"))))->((L="\""->L1="";L=L1),append(List2,[L1],List41),concat_list(List41,List4),replace_a_word1(A1,Ls,[List4],List3)));%maplist(append,[[List2,A1,Ls]],[List3])).
replace_cps(Swaps,B21,B23,B22) :-B21=[B31|B32],(member([B31,B33],Swaps)->append(B23,[B33],B34);append(B23,[B31],B34)),replace_cps(Swaps,B32,B34,B22).
replace_empty_with_empty_set(A,B,C) :-A=[Item1|Items],(var(Item1)->Item2=Item1;(Item1=empty->Item2=[];Item2=Item1)),append(B,[Item2],D),replace_empty_with_empty_set(Items,D,C),!.
replace_empty_with_empty_set(A,B,C) :-A=[Item1|Items],(var(Item1)->Item2=Item1;(is_empty(Item1)->Item2=[];Item2=Item1)),append(B,[Item2],D),replace_empty_with_empty_set(Items,D,C).
replace_first_vars2(Vars1,First_vars,Vars2,Vars3) :-%get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,Vars1=[[Var_name1,Var_name2]|Vars5],%(member([Term1,Var_name1],First_vars)->%Term2=Term1;Term2=Var_name1),replace_first_vars211(Var_name1,First_vars,Term2),%(member([Term3,Var_name2],First_vars)->%Term4=Term3;Term4=Var_name2),replace_first_vars211(Var_name2,First_vars,Term4),append(Vars2,[[Term2,Term4]],Vars4),replace_first_vars2(Vars5,First_vars,Vars4,Vars3),!.
replace_first_vars211(Variable1,First_vars,Term) :-not(single_item_or_var(Variable1)),Variable1=[Variable1a|Variable1b],replace_first_vars211(Variable1a,First_vars,Value1a),replace_first_vars211(Variable1b,First_vars,Value1b),append([Value1a],Value1b,Term),!.
replace_in_term2_gc(A,B,C,D) :-B=[E|F],replace_in_term(A,E,C,D1),replace_in_term2_gc(D1,F,C,D).
replace_in_term3(A,B,G,C):- copy_term(B,B1), copy_term(B,B2), replace_in_term(A,B1,G,D), %replace_in_term3(D,B,G,E), (A=D->D=C; replace_in_term3(D,B2,G,C)),!.
replace_in_terms2(MT1,MT2,L1,L2) :- MT2=[MT5|MT6], replace_in_term(L1,MT5,MT1,L3), replace_in_terms2(MT1,MT6,L3,L2).
replace_in_terms3(A,B,C) :- A=[[D,E]|F], replace_in_term(B,D,E,G), replace_in_terms3(F,G,C). p_name1(N) :- p_name(N1), atom_concat(p,N1,N), N2 is N1+1, retractall(p_name(_)), assertz(p_name(N2)).
replace_in_terms_in_term(From_to,Term,Vars1,Vars2%,Start) :-Term=[v,V],%(Start=true->%append(Vars1,V,Vars2);member([V,W],From_to),append(Vars1,W,Vars2),!.
replace_in_terms_in_term(From_to,Term,Vars1,Vars2%,Start) :-not(Term=[v,_]),Term=[Term1|Term2],replace_in_terms_in_term(From_to,Term1,[],Vars3%,true),append(Vars1,[Vars3],Vars4),replace_in_terms_in_term(From_to,Term2,Vars4,Vars2%,false),!.
replace_items01(N248,LSs3,N2481,N249) :-%trace, N248=[N250,N251|N252], (N250=0->(get_item_n(LSs3,N251,N253),N254=[N250,N253]);N254=[N250,N251]), append(N2481,[N254],N255), replace_items01(N252,LSs3,N255,N249).
replace_items1(N248,LSs3,N2481,N249) :- N248=[N250,N251|N252], ((N250=2->true;(N250=3->true;(N250=5->true;(N250=6))))->(N2511 is N251+1,get_item_n(LSs3,N2511,N253),N254=[N250,N253]);N254=[N250,N251]), append(N2481,[N254],N255), replace_items1(N252,LSs3,N255,N249).
replace_loop(Rs%[[R1,R2]|Rs],Q,T1,T2) :-Q=[Q3|Q4],((downcase_atom(Q3,Q31),atom_string(Q31,Q32),member([Q32,Q5],Rs),append(T1,[Q5],T3))->true;append(T1,[Q3],T3)),%replace1([entire_word],Q,R1,R2,Q3),replace_loop(Rs,Q4,T3,T2),!.
replace_loop(Rs%[[R1,R2]|Rs],Q,T1,T2) :-Q=[Q3|Q4],((downcase_atom(Q3,Q31),atom_string(Q31,Q32),member([Q32,Q5],Rs),append(T1,[Q5],T3))->true;append(T1,[Q3],T3)),%replace1([entire_word],Q,R1,R2,Q3),replace_loop(Rs,Q4,T3,T2),!.summarise_formulas(_Ad21,_Q21,A21,A23) :-% in rows or columns from item n to m, find sum%findall(A23,(member(Table1,A21),% subterm with address of old values, new vars until can't find any%[var,T3,R3,C3,IN3,V3,_]%[function,T,R,C,XY2,F21]/*% Finish off substituting variables into values in answersub_term_wa([var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3], A21, Instances1),findall([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,VN,TP3,RP3,CP3,INP3]],Instances1),number(VN)),Instances1a), % variablessub_term_wa([var,_,_,_,_,_,_,_,_,_,_], A21, Instances2),findall([Address, [var,T3,R3,C3,IN3,V3,[],TP3,RP3,CP3,INP3]],(member([Address, [var,T3,R3,C3,IN3,V3,[],TP3,RP3,CP3,INP3]],Instances2),number1(V3)%(member([Address, [var,T4,R4,C4,IN4,V3,VN4,TP4,RP4,CP4,INP4]],Instances1a)->),Instances2a), % valuesfindall(X1,(member([Address1, [var,T4,R4,C4,IN4,V3,VN4,_TP4,_RP4,_CP4,_INP4]],Instances1a),(((member(X0,Instances2a),X0=[_Address2, [var,T5,R5,C5,IN5,V3,_VN5,_TP5,_RP5,_CP5,_INP5]])->X1=[Address1, [var,T4,R4,C4,IN4,V3,VN4,T5,R5,C5,IN5]];X1=X0))),Instances3),foldr(put_sub_term_wa_ae,Instances3,A21,A22),trace,test_r(A21,A22),(A21=A22->A21=A231;summarise_formulas(_Ad22,_Q22,A22,A231)),*/summarise_formulas2(A21,%A231,A23),!.
replace_nothing_with_v(Term,Vars1,Vars2%,Start) :-atom(Term),%(Start=true->%append(Vars1,V,Vars2);append(Vars1,[v,Term],Vars2),!.
replace_nothing_with_v(Term,Vars1,Vars2%,Start) :-not(atom(Term)),Term=[Term1|Term2],replace_nothing_with_v(Term1,[],Vars3%,true),append(Vars1,[Vars3],Vars4),replace_nothing_with_v(Term2,Vars4,Vars2%,false),!.
replace_nothing_with_v([],Vars,Vars%,_) :- !.
replace_pred_names(Body1,Body2,Body3,To_replace,Replace_with) :-        Body1=[[Statements1|Statements1a]|Statements2        ],not(predicate_or_rule_name_or_terminal(Statements1)),  %Number1a is Number1+1,replace_pred_names([Statements1],[],Body4,To_replace,Replace_with), %% 2->1replace_pred_names(Statements1a,[],Body5,To_replace,Replace_with),                append(Body4,Body5,Body6),        replace_pred_names(Statements2,[],Body7,To_replace,Replace_with),        foldr(append,[Body2,Body6],[],Body8),    Body3=[Body8|Body7],    !.
replace_pred_names1(Algorithm1,Algorithm3,To_replace,Replace_with) :-get_lang_word("n",Dbw_n),get_lang_word("true",Dbw_true),Algorithm1=[F|Rest],(Rest=[Args,Symbol,Lines]->true;(Rest=[Args]->Lines=[[[Dbw_n,Dbw_true]]];(Rest=[Symbol,Lines];(Rest=[],Lines=[[[Dbw_n,Dbw_true]]])))),%recursive_replace_pred_names(Args,_,Arguments3,To_replace,Replace_with),replace_pred_names(Lines,[],Algorithm4,To_replace,Replace_with),(Args=[]->Algorithm3=[F,Symbol,Algorithm4];Algorithm3=[F,Args,Symbol,Algorithm4]).
replace_pred_names2(A,B,To_replace,Replace_with) :-%trace, To_replace=[C|D],  replace_term(A,[n,C],[n,Replace_with],E), replace_pred_names2(B,E,D,Replace_with),!.
replace_term(A,F,R,B) :- sub_term_wa(F,A,In), findall([Ad,R],member([Ad,_],In),In2), foldr(put_sub_term_wa_ae,In2,A,B),!.
replace_undefined_with_empty(Values,Values_e) :-find_v_sys(V_sys),findall(Values_e1,(member(Value,Values),replace_in_term(Value,_,V_sys,Values_e1)),Values_e),!.
replace_v_with_nothing(Term,Vars1,Vars2%,Start) :-Term=[v,V],%(Start=true->%append(Vars1,V,Vars2);append(Vars1,V,Vars2),!.
replace_v_with_nothing(Term,Vars1,Vars2%,Start) :-not(Term=[v,_]),Term=[Term1|Term2],replace_v_with_nothing(Term1,[],Vars3%,true),append(Vars1,[Vars3],Vars4),replace_v_with_nothing(Term2,Vars4,Vars2%,false),!.
replace_v_with_nothing([],Vars,Vars%,_) :- !.
replace_vars(Body1,Body2,Body3,Var_index1,Var_index2,Var_table1,Var_table2) :-        Body1=[[Statements1|Statements1a]|Statements2        ],not(predicate_or_rule_name_or_terminal(Statements1)),  %Number1a is Number1+1,replace_vars([Statements1],[],Body4,Var_index1,Var_index3,Var_table1,Var_table3), %% 2->1replace_vars(Statements1a,[],Body5,Var_index3,Var_index4,Var_table3,Var_table4),                      append(Body4,Body5,Body6), replace_vars(Statements2,[],Body7,Var_index4,Var_index2,Var_table4,Var_table2),        foldr(append,[Body2,Body6],[],Body8),            Body3=[Body8|Body7],  !.
replace_vars0(Term,First_vars1,First_vars2) :-get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,variable_name(Term),%((member([Term,[Dbw_v,_Var_name1]],First_vars1)->(First_vars1=First_vars2);((Term=[_,'_']->Var_name2='_';find_sys(Var_name2)),append(First_vars1,[[Term,[Dbw_v,Var_name2]]],First_vars2))),%)),!.
replace_vars0(Term,First_vars1,First_vars2) :-not(variable_name(Term)),Term=[Term1|Term2],replace_vars0(Term1,First_vars1,First_vars3),%Vars5=[Vars3],replace_vars0(Term2,First_vars3,First_vars2),%Vars5=[Vars4],%trace,%append(Vars1],Vars3,Vars4],Vars2),%append(Vars1,Vars5,Vars6),%append(Vars6,Vars4,Vars2),%maplist(append,[[Vars1],Vars3,Vars4],Vars2),!.
reserved_words2(["+","-","*","/","abort","any","append","atom","brackets","call","ceiling","code","creep","cut","date","delete","equals1","equals2","equals3","equals4","equals4_on","equals4_off","exit","fail","findall","grammar","head","is","length","letters","list","member","member2","member3","n","not","number","or","predicatename","random","round","skip","string","string_from_file","stringconcat","stringtonumber","sys","findall_sys","t","tail","true","unwrap","v","variable","vgp","wrap","input","output","string_length","sort","intersection","read_string","writeln","atom_string","trace","notrace","sqrt","notrace","get_lang_word","on_true","go_after","on_false","go_to_predicates","exit_function","fail_function","findall_exit_function","findall_fail_function"]).
resort(A,A) :- !.
resort(A,B) :- member([C|D],A),member(E,A),append(F,[C],E), subtract(A,[[C|D],E],G), foldr(append,[F,[C],D],H), append(G,[H],B),!.
restlast(Last,Rest,Rest,Last) :-length(Last,1),!.
restlast(Last,Rest,Rest,Last) :-length(Last,1),!.restlast(Vars1,Rest1,Rest2,Last) :-Vars1=[Var|Vars2],append(Rest1,[Var],Rest3),restlast(Vars2,Rest3,Rest2,Last),!.
restlast(Vars1,Rest1,Rest2,Last) :-Vars1=[Var|Vars2],append(Rest1,[Var],Rest3),restlast(Vars2,Rest3,Rest2,Last),!.
reverse(L,M,N) :- head(L,H),tail(L,T),wrap(H,H1),append(H1,M,O),reverse(T,O,N).
reverse(List1,List2,List3) :-List1=[Head|Tail],append([Head],List2,List4),reverse(Tail,List4,List3).
reverse(List1,List2,List3) :-List1=[Head|Tail],append([Head],List2,List4),reverse(Tail,List4,List3).unique1([],Items,Items).
reverse([],L,L).
reverse([],List,List).
reverse([],List,List).reverse(List1,List2,List3) :-List1=[Head|Tail],append([Head],List2,List4),reverse(Tail,List4,List3).
reverse1([A|D],B,C) :- reverse1(D,[A|B],C).
reverse1([A|D],B,C) :- reverse1(D,[A|B],C),!.
reverse_engineering2(Ls,A) :- test1(off,1,_), findall([[DFN,L1],[D,H],DHN],(member([L,L1],Ls),  Z=[b,d,f,g,h,j], append(B1,C1,Z), append([D1],E1,C1), append(F1,G1,E1), append([H1],J1,G1),  append([D1],F1,DF1),    %writeln([df1,DF1]),  interpretpart(match4,[v,sys1],DF1,[[[v,b],B1],[[v,d],D1],[[v,f],F1],[[v,g],G1],[[v,h],H1],[[v,j],J1]],Vars,_),  getvalue([v,sys1],L0,Vars),%),V),%foldr(append,L0,L00),L0=L00,%writeln(L00),%writeln(L00=L1), L00=[d,f],%L1, %trace, member([[v,d],D],Vars), member([[v,h],H],Vars), get_n_item(Z,D,DN), get_n_item(Z,H,HN),  get_item_n(L,DN,DNN), get_item_n(L,HN,HNN),  append(_B,C,L), append([DNN],E,C), append(F,G,E), %trace, append([HNN],_J,G),  append([DNN],F,DFN), append([DNN],[HNN],DHN)  %writeln([[b,d,f,g,j],[_B,DNN,_F,HNN,_J]]) ),V),findall(A,member([A,_,_],V),V0), %V=[[V31,V32]|V2], forall(member([V41,V42],V0),V41=V42),  findall([B1,B2],member([_,[B1,B2],_],V),V01), findall(B3,member([B3,_],V01),V02), findall(B4,member([_,B4],V01),V03), V02=[V021|V022], forall(member(V023,V022),V023=V021), V03=[V031|V032], forall(member(V033,V032),V033=V031),   findall(C,member([_,_,C],V),V04),%trace, V04=[[D,H]|_], A=(append(b,c,l), append([D],e,c), append(f,g,e), append([H],j,g)).
rhetoric1([as,A,is,to,B,C,is,to,D]) :- not(var(A)),var(B),not(var(C)),not(var(D)),B is (A*D)/C,!.rhetoric1([as,A,is,to,B,C,is,to,D]) :- rhetoric1([as,C,is,to,D,A,is,to,B]),!.
rhetoric1([as,A,is,to,B,C,is,to,D]) :- var(A),not(var(B)),not(var(C)),not(var(D)),A is (C*B)/D,!.
rhetoric2(Sets,A,B,C,D) :-rhetoric2a(Sets,A,B,C,D).
rhetoric2(Sets,A,B,C,D) :-rhetoric2a(Sets,C,D,A,B).
rhetoric2a(Sets,A,B,C,D) :-not(var(A)),var(B),not(var(C)),not(var(D)),member([A,SA],Sets),member([C,SC],Sets),SA=SC,member([D,SD],Sets),SB=SD,member([B,SB],Sets),subtract(SA,SB,[]).
rhetoric2a(Sets,A,B,C,D) :-var(A),not(var(B)),not(var(C)),not(var(D)),member([C,SC],Sets),SA=SC,member([A,SA],Sets),member([B,SB],Sets),member([D,SD],Sets),SB=SD,subtract(SA,SB,[]).
rhetoric3([A,B,C,D]) :-rhetoric3a([A,B,C,D]).
rhetoric3([A,B,C,D]) :-rhetoric3a([C,D,A,B]).% As I ran the program, I verified it. I read the input and output.  I verified them.  I verified that the program produced the correct output.
rhetoric3(false):-false,!.
rhetoric3(true):-!.
rhetoric3a([A,B,C,D]) :-not(var(A)),var(B),not(var(C)),not(var(D)),(rhetoric3(A)->TA=true;TA=false),(rhetoric3(C)->TC=true;TC=false),(rhetoric3(D)->TD=true;TD=false),((TA=B,TC=TD)->true;false).
rhetoric3a([A,B,C,D]) :-var(A),not(var(B)),not(var(C)),not(var(D)),(rhetoric3(B)->TB=true;TB=false),(rhetoric3(C)->TC=true;TC=false),(rhetoric3(D)->TD=true;TD=false),((A=TB,TC=TD)->true;false).
right_hand_rule(X,Y,X_max,Y_max,X_goal,Y_goal,Matrix1,Matrix2) :- X1 is X+1,Y1 is Y, not(X1 is X_max+1), member([X,Y,(-)],Matrix1), delete(Matrix1,[X,Y,_],Matrix3), append(Matrix3,[[X,Y,'^']],Matrix4), right_hand_rule(X1,Y1,X_max,Y_max,X_goal,Y_goal,Matrix4,Matrix2).
right_hand_rule(X,Y,X_max,Y_max,X_goal,Y_goal,Matrix1,Matrix2) :- X1 is X,Y1 is Y+1, not(Y1 is Y_max+1), member([X,Y,(-)],Matrix1), delete(Matrix1,[X,Y,_],Matrix3), append(Matrix3,[[X,Y,'^']],Matrix4), right_hand_rule(X1,Y1,X_max,Y_max,X_goal,Y_goal,Matrix4,Matrix2).right_hand_rule(X,Y,X_max,Y_max,X_goal,Y_goal,Matrix1,Matrix2) :- X1 is X-1,Y1 is Y, not(X1 is 0-1), member([X,Y,(-)],Matrix1), delete(Matrix1,[X,Y,_],Matrix3), append(Matrix3,[[X,Y,'^']],Matrix4), right_hand_rule(X1,Y1,X_max,Y_max,X_goal,Y_goal,Matrix4,Matrix2).
right_hand_rule(X,Y,X_max,Y_max,X_goal,Y_goal,Matrix1,Matrix2) :- X1 is X,Y1 is Y-1, not(Y1 is 0-1), member([X,Y,(-)],Matrix1), delete(Matrix1,[X,Y,_],Matrix3), append(Matrix3,[[X,Y,'^']],Matrix4), right_hand_rule(X1,Y1,X_max,Y_max,X_goal,Y_goal,Matrix4,Matrix2). print_matrix(X,Y,Matrix) :- numbers(X,1,[],Xs), numbers(Y,1,[],Ys), findall(_,(member(Y1,Ys),findall(_,(member(X1,Xs),member([X1,Y1,C],Matrix),write(C)),_),nl),_).
ro([o,_]).
rs_and_data_to_term(RS0,D0,D2,%RSa1,RSa2,T1,T22,T2_old,First) :-trim_brackets(RS0,RS1,N1),trim_brackets(D0,D1,_N2),%((RS0=RS1,D0=D1)->fail;true),rs_and_data_to_term0(RS1,D1,D2,%RSa1,RSa2,[],T2,T2_old,First),%trace,(First=true->wrap_brackets(T2,T21,N1);T2=T21),append(T1,T21,T22).
rs_and_data_to_term0(RS,D1,D3,%RSa1,RSa2,T1,T2,T2_old,First) :-%writeln1(rs_and_data_to_term(RS,D1,D3,%RSa1,RSa2,%T1,T2,T2_old)),%trim_brackets(RS0,RS),trim_brackets(D0,D1),%get_ampersand_var_s2a(N),%atom_concat('&',N,AN),%RS=[RS1|RS2],(RS=[output,RS3]->(%look ahead to char following r x if undefined, try repeating or going on%trace,%term_to_list(RS3,T32),append(T1,[[output,RS3%[RS3,T3]]],T31)%append(RSa1,[['&',N,r,,T3]]],T31));(RS=[r,RS3]->(%look ahead to char following r x if undefined, try repeating or going on%(ro(RS3),rs_and_data_to_term(RS3,D1,D2,%RSa1,RSa2,%[],T3))->true;%(D1=[r,D11]->true;D1=D11),try_r(RS3,D1,D2,[],T3,T2_old),%),append(T1,[[r,T3%[RS3,T3]]],T31)%append(RSa1,[['&',N,r,,T3]]],T31));(RS=[nd,RS3]->(try_nd(RS3,D1,D2,T1,T31,T2_old));%rs_and_data_to_term(RS1,D1,%RSa1,RSa2,%T1,T2),%append(T1,[[r,[RS3,T3]]],T31)(RS=[]->append(T1,[[]],T31);/*(is_list(RS)->(%trim_brackets(RS1,RS10),rs_and_data_to_term(RS,D1,D2,%RSa1,RSa2,[],T32,T2_old),T3=T32,append(T1,T3%[RS3,T3],T31));*/%/*(only_item1(RS)->(get_token(RS,D1,D2,[],T3),%->true;rs_and_data_to_term([RS1],D1,D2,%RSa1,RSa2,%[],T3)),append(T1,T3,T31)%;);%*/%)))))%rs_and_data_to_term(RS1,D1,D2,%RSa1,RSa2,%T1,T31)(%trace,(RS=[RS1|RS2]->%(is_list(RS11)->(RS11=RS1,RS21=RS2,Flag_wrap=true%);(RS=RS1,RS2=[],Flag_wrap=false)),(D1=[D111|D121]->(is_list(D111)->(D111=D11,D121=D12);(D1=D11,D12=[]))),%only_item1(RS1)->%(get_token([RS1],D1,D13,T1,T3);%(rs_and_data_to_term(RS1,D11,D31,[],T3,T2_old,true),append(D31,D12,D13)),rs_and_data_to_term(RS2,D13,D2,T3,T32,T2_old,false),((First=true,Flag_wrap=true)->T33=[T32];T33=T32),%trace,append(T1,T33,T31)))))),D2=D3,T2=T31.
rule(RuleName,1,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-        random_member(Var,InputVars1),        rule3(RuleName,Var,VarList,VarList2,Rule,Var1,Var2),restlast(InputVars1,[],_,Last),(Var=Last->true;(Last=Var1->true;Last=Var2)),append(InputVars1,[Var1,Var2],InputVars2),!.
rule(RuleName,2,0,InputVars,InputVars,VarList,VarList,Rule) :-%%writeln([rule(RuleName,2,1,InputVars1,InputVars2,VarList,VarList2,Rule)]),random1(N0), N1 is N0/100, length(InputVars,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,InputVars),List2=[Var|_Rest]);fail),random1(N01), N11 is N01/100, length(InputVars,L1), N21 is round(L1*N11)-1,(N21>=0->(length(List11,N21), append(List11,List21,InputVars),List21=[Vara|_Rest2]);fail),        rule6(RuleName,Var,Vara,_VarList,_VarList2,Rule),restlast(InputVars,[],_,Last),%%writeln([last,Last]),(Var=Last->true;Vara=Last),!.rule(RuleName,2,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-%%writeln([rule(RuleName,2,1,InputVars1,InputVars2,VarList,VarList2,Rule)]),random1(N0), N1 is N0/100, length(InputVars1,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,InputVars1),List2=[Var|_Rest]);fail),random1(N01), N11 is N01/100, length(InputVars1,L1), N21 is round(L1*N11)-1,(N21>=0->(length(List11,N21), append(List11,List21,InputVars1),List21=[Vara|_Rest2]);fail),        rule4(RuleName,Var,Vara,VarList,VarList2,Rule,Var1),restlast(InputVars1,[],_,Last),%%writeln([last,Last]),((Var=Last->true;Vara=Last)->true;(Last=Var1)),%%writeln([var,Var,vara,Vara]),append(InputVars1,[Var1],InputVars2),!.
rule(RuleName,2,0,InputVars,InputVars,VarList,VarList,Rule) :-%%writeln([rule(RuleName,2,1,InputVars1,InputVars2,VarList,VarList2,Rule)]),        random_member(Var,InputVars),        random_member(Vara,InputVars),        rule6(RuleName,Var,Vara,_VarList,_VarList2,Rule),restlast(InputVars,[],_,Last),%%writeln([last,Last]),(Var=Last->true;Vara=Last),!.
rule(RuleName,2,1,InputVars1,InputVars2,VarList,VarList2,Rule) :-%%writeln([rule(RuleName,2,1,InputVars1,InputVars2,VarList,VarList2,Rule)]),        random_member(Var,InputVars1),        random_member(Vara,InputVars1),        rule4(RuleName,Var,Vara,VarList,VarList2,Rule,Var1),restlast(InputVars1,[],_,Last),%%writeln([last,Last]),((Var=Last->true;Vara=Last)->true;(Last=Var1)),%%writeln([var,Var,vara,Vara]),append(InputVars1,[Var1],InputVars2),!.
rule(RuleName,2,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-random1(N0), N1 is N0/100, length(InputVars,L), N2 is round(L*N1)-1,(N2>=0->(length(List1,N2), append(List1,List2,InputVars),List2=[Var|_Rest]);fail),random1(N01), N11 is N01/100, length(InputVars,L1), N21 is round(L1*N11)-1,(N21>=0->(length(List11,N21), append(List11,List21,InputVars),List21=[Vara|_Rest2]);fail),        rule5(RuleName,Var,Vara,VarList,VarList2,Rule,Var1,Var2),restlast(InputVars1,[],_,Last),((Var=Last->true;Vara=Last)->true;(Last=Var1->true;Last=Var2)), %% make last var2, use different inputs from previous rule, make this line usea version of previous line as well (args from rule before that) - redo rules based on past programmingappend(InputVars1,[Var1,Var2],InputVars2),!.
rule(RuleName,2,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-        random_member(Var,InputVars),        random_member(Vara,InputVars),        rule5(RuleName,Var,Vara,VarList,VarList2,Rule,Var1,Var2),restlast(InputVars1,[],_,Last),((Var=Last->true;Vara=Last)->true;(Last=Var1->true;Last=Var2)), %% make last var2, use different inputs from previous rule, make this line usea version of previous line as well (args from rule before that) - redo rules based on past programmingappend(InputVars1,[Var1,Var2],InputVars2),!.
rule1(RuleName,InModes,OutModes,InputVars1,InputVars2,VarList,VarList2,OutputVars,Rule) :-%%writeln(rule(RuleName,InModes,OutModes,InputVars1,InputVars2,VarList,VarList2,OutputVars,Rule)),get_members(InModes,InputVars1,[],Vars1),rulea(OutModes,RuleName,Vars1,VarList,VarList2,Rule,OutputVars,Vars2),(num_modes(OutModes,Last,InputVars1),(equals_or(Vars1,Last)->true;equals_or(Vars2,Last))),append(InputVars1,Vars2,InputVars2)%%retractall(lastrule(_)),   %%assertz(lastrule(Rule)),.
rule1(RuleName,InModes,OutModes,InputVars1,InputVars2,VarList,VarList2,OutputVars,Rule) :-%%writeln(rule(RuleName,InModes,OutModes,InputVars1,InputVars2,VarList,VarList2,OutputVars,Rule)),get_members(InModes,InputVars1,[],Vars1),rulea(OutModes,RuleName,Vars1,VarList,VarList2,Rule,OutputVars,Vars2),(num_modes(OutModes,Last,InputVars1),(equals_or(Vars1,Last)->true;equals_or(Vars2,Last))),append(InputVars1,Vars2,InputVars2)%%retractall(lastrule(_)),   %%assertz(lastrule(Rule)),.num_modes(OutModes,Last,_InputVars1) :-OutModes=0,Last=[],!.
rule2(RuleName,Var,VarList,VarList2,Rule,Var1) :-var(VarList,Var1,VarList2),Rule=[RuleName,[Var,Var1]],!.
rule3(RuleName,Var,VarList,VarList3,Rule,[Var1,Var2]) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Var1,Var2]],!.
rule4(RuleName,Var,Vara,VarList,VarList2,Rule,Var1) :-        var(VarList,Var1,VarList2),        Rule=[RuleName,[Var,Vara,Var1]],!.
rule4(RuleName,Var,Vara,VarList,VarList2,Rule,Var1) :-        var(VarList,Var1,VarList2),        Rule=[RuleName,[Var,Vara,Var1]],!.rule(RuleName,2,2,InputVars1,InputVars2,VarList,VarList2,Rule) :-        member(Var,InputVars),        member(Vara,InputVars),        rule5(RuleName,Var,Vara,VarList,VarList2,Rule,Vars),append(InputVars1,Vars,InputVars2).
rule5(RuleName,Var,Vara,VarList,VarList3,Rule,[Var1,Var2]) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Vara,Var1,Var2]],!.
rule5(RuleName,Var,Vara,VarList,VarList3,Rule,[Var1,Var2]) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Vara,Var1,Var2]],!.%%var(Item,Var,Vars,Vars) :-%%member([Item,Var],Vars).
rule5(RuleName,Var,Vara,VarList,VarList3,Rule,[Var1,Var2]) :-        var(VarList,Var1,VarList2),        var(VarList2,Var2,VarList3),        Rule=[RuleName,[Var,Vara,Var1,Var2]],!.**/%%var(Item,Var,Vars,Vars) :-%%member([Item,Var],Vars).
rulename_if_limit(RuleName0,_PredicateName,RuleName) :-not(RuleName0=predicatename_existing),RuleName=RuleName0.
s([[1,2,3,4,5],[1,2,6]]).
s12([[A1,A2]|A],A5) :- ((member([A2,_],A),(findall([A2,A21],member([A2,A21],A),AAA),length(AAA,L),L>=2)->(findall(A6,(member([A2,A21],AAA),delete(A,[A2,_],AA),s12([[A2,A21]|AA],A6)),A7)->append([[A1]],A7,A5))%;((not(member([A2,_],A))->A5=[A1,A2];(%member([A2,A4],A),s12(A%[A2,A4],A6),append([A1,A2],A6,A5)))))).
s12([],[]).
sectest(0):-!.
sectest(0,S,S):-!.
sectest(N):-%%writeln(["Think of the lowercase letter of the alphabet or a space that the computer thought of in 1 second."]),%%sleep(1),%% Test thought here., 0.1 s then repeat M times%%writeln(["Now"]),%%get_time(TS),stamp_date_time(TS,T,local),writeln([dateandtime,T]),trialy2_81("a",R1),trialy2_81("b",R2),trialy2_81("c",R3),trialy2_81("d",R4),trialy2_81("e",R5),trialy2_81("f",R6),trialy2_81("g",R7),trialy2_81("h",R8),trialy2_81("i",R9),trialy2_81("j",R10),trialy2_81("k",R11),trialy2_81("l",R12),trialy2_81("m",R13),trialy2_81("n",R14),trialy2_81("o",R15),trialy2_81("p",R16),trialy2_81("q",R17),trialy2_81("r",R18),trialy2_81("s",R19),trialy2_81("t",R20),trialy2_81("u",R21),trialy2_81("v",R22),trialy2_81("w",R23),trialy2_81("x",R24),trialy2_81("y",R25),trialy2_81("z",R26),trialy2_81(" ",R27),R=[R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27],sort(R,RA),reverse(RA,RB),RB=[[_,Item]|_Rest],writeln([Item,RB]),N1 is N-1,sectest(N1).
sectest(N,S1,S2):-writeln(["The computer will think of one of the following thoughts when I let you know."]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["a"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["r"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["t"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["e"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["s"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),/**writeln(["adrian"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),**/writeln(["The computer will think of one of the following thoughts in 5 seconds.", "a","r","t","e","s"/**,"adrian"**/]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["Now"]),sleep(1),random_member(A,["a","r","t","e","s"/**,"adrian"**/]),%%texttobr2(2), %% for 100 As for screen to display black bordertexttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["Think of the object the computer thought of in 1 second.", "a","r","t","e","s"/**,"adrian"**/]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(1),%% Test thought here.
sectest(N,S1,S2):-writeln(["The computer will think of one of the following thoughts when I let you know."]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["characterbreasoner"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["1451"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["texttobr2"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["daily_regimen_meditation"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["list_prolog_interpreter"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),/**writeln(["adrian"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),**/writeln(["The computer will think of one of the following thoughts in 5 seconds.", "characterbreasoner","1451","texttobr2","daily_regimen_meditation","list_prolog_interpreter"/**,"adrian"**/]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["Now"]),sleep(1),random_member(A,["characterbreasoner","1451","texttobr2","daily_regimen_meditation","list_prolog_interpreter"/**,"adrian"**/]),%%texttobr2(2), %% for 100 As for screen to display black bordertexttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["Think of the object the computer thought of in 1 second.", "characterbreasoner","1451","texttobr2","daily_regimen_meditation","list_prolog_interpreter"/**,"adrian"**/]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(1),%% Test thought here.
sectest(N,S1,S2):-writeln(["The computer will think of one of the following thoughts when I let you know."]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["seed"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["water"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["dam"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["redblackduck"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["lorelle"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),/**writeln(["adrian"]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),**/writeln(["The computer will think of one of the following thoughts in 5 seconds.", "seed","water","dam","redblackduck","lorelle"/**,"adrian"**/]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["Now"]),sleep(1),random_member(A,["seed","water","dam","redblackduck","lorelle"/**,"adrian"**/]),%%texttobr2(2), %% for 100 As for screen to display black bordertexttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(5),writeln(["Think of the object the computer thought of in 1 second.", "seed","water","dam","redblackduck","lorelle"/**,"adrian"**/]),texttobr2(2), %% for 100 As for screen to display white backgroundtexttobr2(2), %% for 100 As for screen to display Asleep(1),%% Test thought here.
sectest(N1) :-writeln(["\n",N1]),sectest0(_Form1,_Lyrics,_Melody,_Harmony,_MelodyParts,_HarmonyParts,_Vocalstubinstrument,_Song1),N2 is N1-1,sectest(N2),!.
sectest(S) :- sectest(7,0,S).
select(List,FromLang,ToLang,List1,List2,List4,List5,List7,List8) :-List=[Item1|List3],append(List4,[Item1],List6),Item1=[_,_,Item2,Item3],append(List7,[[Item2,Item3]],List9),select(List3,FromLang,ToLang,List1,List2,List6,List5,List9,List8),!.
select(List,FromLang,ToLang,List1,List2,List5,List6,List7,List8) :-List=[Item1|List3],((Item1=[FromLang,ToLang,Item2],append(List1,[Item2],List3));(Item1=[FromLang,ToLang,Item2,Item3],append(List1,[[Item2,Item3]],List4))),select(List3,FromLang,ToLang,List4,List2,List5,List6,List7,List8),!.
sentence([["i","will","bow","to","the","audience"],["person","right","down","right","down","person"]]).% Third, I didn’t like text-to-speech because I didn’t think robotics was real enough.
sentence33('') --> [].
sentencewithspaces(Sentence1,Sentence2,Sentence3) :-Sentence1=[Word|Sentence4],concat_list("",[Sentence2," ",Word],Item2),sentencewithspaces(Sentence4,Item2,Sentence3),!.
sentencewithspaces(Sentence1,Sentence2,Sentence3) :-Sentence1=[Word|Sentence4],concat_list3("",[Sentence2," ",Word],Item2),sentencewithspaces(Sentence4,Item2,Sentence3),!.
set_up_particles([X,Y,Z],N_particles,Particles1,Particles2) :- %numbers(N_particles,1,[],N_Ps), XB is X-1, YB is Y-1, ZB is Z-1, numbers(ZB,2,[],ZNs),  numbers(YB,2,[],YNs),  numbers(XB,2,[],XNs), %retractall(particle_n(_)), %assertz(particle_n(1)),  findall([N_particles,Speed,X1,Y1,Z1,X_Direction,Y_Direction,Z_Direction], (%particle_n(N), %member(N,[_]), %retractall(particle_n(_)), %N2 is N+1, %assertz(particle_n(N2)),  random_member(Speed,[0,1]), %repeat, get_xyz(X1,Y1,Z1,XNs,YNs,ZNs,Particles1), random_member(X_Direction,[-1,1]), random_member(Y_Direction,[-1,1]), random_member(Z_Direction,[-1,1]) ),Particles3), append(Particles1,Particles3,Particles4), N_p2 is N_particles-1, set_up_particles([X,Y,Z],N_p2,Particles4,Particles2),!.
sheet_feeder(T) :-directory_files("raw_sources/",F),delete_invisibles_etc(F,G),findall(K1,(member(H,G),string_concat("raw_sources/",H,List00b),phrase_from_file_s(string(List001), List00b),reverse(List001,S1),(append([10],A,S1)->B=A;B=S1),reverse(B,J1),%J1=["“","”","‘","’","'","\"","\n","\\","\n","- ","\n","\n","\n","b"],%J1=["“","'","\n"],append(J1,`\n\n`,List00_a),process(List00_a,[],List00),%writeln1(List00),trace,delete(List00,"",K2),K1=["Surname, A 2000, <i>Title: Subtitle</i>, Publisher, City.","Surname, A 2000",1|K2],term_to_atom(K1,K),%random(X),%foldr(string_concat,[H,X,".txt"],H1),string_concat("sources/",H,List00bb),(open_s(List00bb,write,Stream1),write(Stream1,K),close(Stream1))),T).
shortest_path(X,Y,Length) :-grid(Grid),findall(Length1,shortest_path1(X,Y,Grid,0,Length1),Lengths1),sort(Lengths1,Lengths2),Lengths2=[Length|_].
should be falsematch4([[[v,a]],[v,c],"|",[v,b]],[[1],2,3,4],[],V).
simplify(AB,[A1|B1]):-AB=[A|B],%(not(is_list(B))->trace;true),%is_list(B),not(variable_name(B)),(AB=[_A2,"|"|B2]->(B2=[B3],(((is_list(B3),not(variable_name(B3)))->true;variable_name(B3))));true),simplify(A,A1),simplify(B,B1),!.
simplify([A,"|",B],C):-simplify(A,A1),simplify(B,B1),((not(isvar(B1)),is_list(B1))->C=[A1|B1];C=[A1,"|",B1]),!.
simplify_by_replacing(V1,V2,V3) :-V1=[[V4,Val]|V5],delete(V5,[_,Val],V6),append(V2,[[V4,Val]],V7),simplify_by_replacing(V6,V7,V3).
simplify_by_replacing1([V1,Val],V2,V3,V4) :-V2=[V5|V6],(V5=[V7,Val]->append(V4,[[]])*//* Val1=[_|Val2], %findall([[G1,Va12],[G1,[tail,G]]],member([G1,Val2],V4),New_GV),  findall(A,member([A,_],New_GV),B), subtract(V4,B,C), findall(A,member([_,A],New_GV),B1), append(C,B1,D), find_tails(V1,V2,V3) :-*/% uncompress_vars([[3, [tail, 2]], [2, [tail, 1]], [1, [1, 2, 3]]],V2).
simplify_col2(Instances1,%Instances1a,Instances2,Row2,Row3,L1,L2) :-%Instances1=[In1|Instances3],%In1=[Add,[function,RX,CX,Formula,F3]],*/findall([Add1,[function,T,R,C,Formula_a,F3_a]],(member([Add1,[function,T,R,C,Formula,F3]],Instances1),sub_term_wa([var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1], F3, Formula_Instances1),%delete(Formula,"+",Formula4),find_sums_in_term(Formula_Instances1,[],Formula_Instances_list), % find in F3 not Formula, sub back in%findall(ZD,(member(ZD1,Formula_Instances_list)))*%* Add2 - del ?*findall(Z_keep_del1,(member([_Add2,X1],Formula_Instances_list%Formula_Instances1), % Use Add2?X1=[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1],findall(C11,member([var,T1,R1,C11,IN1,V,VN,TP1,RP1,CP1,INP1],X1),C1),sort(C1,C2),findall([C12,B],(member(C12,C2),findall(IN1,member([var,T1,R1,C12,IN1,V,VN,TP1,RP1,CP1,INP1],X1),B)),G),group_consecutive_items(G,G1),findall([Z,Items],(member(Y,G1),append([[_|Items]],_,Y),findall(Z,member([Z|_],Y),Z1))),% keep first Instances% delete restfindall(X12,(member([Z,Its2],Z1),((X1=[_Add,[var,T1,R1,Z,Its,V,VN,TP1,RP1,CP1,INP1]],forall(member(It,Its),member(It,Its2)))->X12=(keep=X1);X12=(delete=X1))),Z_keep_del1)),Z_keep_del2), % Use Add?findall([%Address% Use Add?_Add,[x_span,K]],(member(keep=[_Address,K4],Z_keep_del2), % use Address?% clean up functionclean_formula(K4,[],K)),K2), %*** y_span elsefindall(De,member(delete=De,Z_keep_del2),De2),foldr(put_sub_term_wa_ae,K2,F3,Formula_b),delete_sub_term_wa(De2, Formula_b, F3_a),% find and make replacements in Formulasub_term_wa([var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1], Formula, Formula_Instances2),findall([x_span,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],(member([Add4,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],Formula_Instances2),member([_,K3],K2),K3=[x_span,[var,_,_,_,_,_,VN,_,_,_,_]]),K5),findall([var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1],(member([Add4,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],Formula_Instances2),member([_,K3],De2),K3=[var,_,_,_,_,_,VN,_,_,_,_]),De3),foldr(put_sub_term_wa_ae,K5,Formula,Formula_c),delete_sub_term_wa(De3, Formula_c, Formula_a)),Instances3),foldr(put_sub_term_wa_ae,Instances3,Row1,Row3),!.
simplify_col2(Instances1,%Instances1a,Instances2,Row2,Row3,L1,L2) :-%Instances1=[In1|Instances3],%In1=[Add,[function,RX,CX,Formula,F3]],*/findall([Add1,[function,T,R,C,Formula_a,F3_a]],(member([Add1,[function,T,R,C,Formula,F3]],Instances1),sub_term_wa([var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1], F3, Formula_Instances1),%delete(Formula,"+",Formula4),find_sums_in_term(Formula_Instances1,[],Formula_Instances_list), % find in F3 not Formula, sub back in%findall(ZD,(member(ZD1,Formula_Instances_list)))*%* Add2 - del ?*findall(Z_keep_del1,(member([_Add2,X1],Formula_Instances_list%Formula_Instances1), % Use Add2?X1=[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1],findall(C11,member([var,T1,R1,C11,IN1,V,VN,TP1,RP1,CP1,INP1],X1),C1),sort(C1,C2),findall([C12,B],(member(C12,C2),findall(IN1,member([var,T1,R1,C12,IN1,V,VN,TP1,RP1,CP1,INP1],X1),B)),G),group_consecutive_items(G,G1),findall([Z,Items],(member(Y,G1),append([[_|Items]],_,Y),findall(Z,member([Z|_],Y),Z1))),% keep first Instances% delete restfindall(X12,(member([Z,Its2],Z1),((X1=[_Add1,[var,T1,R1,Z,Its,V,VN,TP1,RP1,CP1,INP1]],forall(member(It,Its),member(It,Its2)))->X12=(keep=X1);X12=(delete=X1))),Z_keep_del1)),Z_keep_del2), % Use Add?findall([%Address% Use Add?_Add,[x_span,K]],(member(keep=[_Address,K4],Z_keep_del2), % use Address?% clean up functionclean_formula(K4,[],K)),K2), %*** y_span elsefindall(De,member(delete=De,Z_keep_del2),De2),foldr(put_sub_term_wa_ae,K2,F3,Formula_b),delete_sub_term_wa(De2, Formula_b, F3_a),% find and make replacements in Formulasub_term_wa([var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1], Formula, Formula_Instances2),findall([x_span,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],(member([Add4,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],Formula_Instances2),member([_,K3],K2),K3=[x_span,[var,_,_,_,_,_,VN,_,_,_,_]]),K5),findall([var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1],(member([Add4,[var,T1,R1,C1,IN1,V,VN,TP1,RP1,CP1,INP1]],Formula_Instances2),member([_,K3],De2),K3=[var,_,_,_,_,_,VN,_,_,_,_]),De3),foldr(put_sub_term_wa_ae,K5,Formula,Formula_c),delete_sub_term_wa(De3, Formula_c, Formula_a)),Instances3),foldr(put_sub_term_wa_ae,Instances3,Row1,Row3),!.
simplify_col_plus1(Row1,Row3) :-%Row1=[Cell|Cells],%notsub_term_wa([function,_,_,_,_,_], Row1, Instances1),/*length(Instances1,L),simplify_col2(Instances1,Instances2,Row2,Row3,1,L),simplify_col2([],Instances,Instances,Row,Row,L,L) :- !.
simplify_types(Data,Types1,Types2) :-%get_lang_word("t",T),%get_lang_word("atom",Dbw_atom),Data="|",%string(Data),append(Types1,["|"],Types2),!.
simplify_types(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("atom",Dbw_atom),Data=[T,Dbw_atom],%string(Data),append(Types1,[[T,Dbw_atom]],Types2),!.
simplify_types(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("string",Dbw_string),Data=[T,Dbw_string],%string(Data),append(Types1,[[T,Dbw_string]],Types2),!.
simplify_types(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[[T,Dbw_brackets],Types4]|Types6],simplify_types(Types4,[],Data2),Types5=[Data2],append_list3([Types1,Types5],Types2a),simplify_types(Types6,Types2a,Types2),!.
simplify_types_with_n(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("number",Dbw_number),Data=[T,Dbw_number,_N,D],%number(Data),append(Types1,[D],Types2),!.
simplify_types_with_n(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("string",Dbw_string),Data=[T,Dbw_string,_N,D],%string(Data),append(Types1,[D],Types2),!.simplify_types_with_n(Data,Types1,Types2) :-get_lang_word("t",T),get_lang_word("atom",Dbw_atom),Data=[T,Dbw_atom,_N,D],%string(Data),append(Types1,[D],Types2),!.
simplify_types_with_n(Data1,Types1,Types2) :-get_lang_word("t",T),get_lang_word("brackets",Dbw_brackets),Data1=[[[T,Dbw_brackets],Types4]|Types6],simplify_types_with_n(Types4,[],Data2),Types5=[Data2],append_list3([Types1,Types5],Types2a),simplify_types_with_n(Types6,Types2a,Types2),!.
simulation(same).
sin1(Deg,Sin_D) :- Sin_D1 is sin(Deg*pi/180),  epsilon(E), ((Sin_D1 < E, Sin_D1 > -E) -> Sin_D is 0; Sin_D = Sin_D1).% 1. In a binary opposition, one will be stronger. This is because one starts at it (it is the origin). The contention is exploring the relationship/directionality/methodology between two fundamental objects which have a relation.
single_item(A) :- A="|",fail,!.
single_item(A) :- blob(A,stream),!.%single_item(A) :- atom(A),!.
single_item(A) :- number(A),!.
single_item(A) :- string(A),!.
single_item(A) :- variable_name(A),!.
single_item_not_var(A) :- atom(A),!.
single_item_not_var(A) :- blob(A,stream),!.
single_item_not_var(A) :- number(A),!.
single_item_not_var(A) :- string(A),!.
single_item_or_atom(A) :- atom(A),!.
single_item_or_atom(A) :- blob(A,stream),!.
single_item_or_atom(A) :- number(A),!.
single_item_or_atom(A) :- string(A),!.
single_item_or_atom(A) :- variable_name(A),!.
single_item_or_var(A) :- atom(A),!.single_item_or_var(A) :- blob(A,stream),!.
single_item_or_var(A) :- number(A),!.
single_item_or_var(A) :- string(A),!.
single_item_or_var(A) :- variable_name(A),!.
single_item_ta(A) :-    atom(A),    !.
single_item_ta(A) :-    blob(A, stream),    !.
single_item_ta(A) :-    number(A),    !.
slp2lp_variables(Name,Name) :- !.
slp2lp_variables(Name,Name) :- !./**process_body(Body1,Body2) :-findall(*,(member(Statement1,Body1process_body(Body1,[],Body2) :-**/%%predicate_or_rule_name([A,B]) :- atom(A),is_list(B),!.
sm_to_lp(Algorithm1,Algorithm2,Algorithm3) :-Algorithm1=[Function1|Functions],(Function1=[_Number,Name,Arguments1,Symbol1,Body1]->%symbol(Symbol1,Symbol2),(get_up_to_next_chunk(Body1,%Body2,[],Body2),(false->%Arguments1=[]->append(Algorithm2,[[%Number,Name,Symbol1,Body2]],Algorithm4);append(Algorithm2,[[%Number,Name,Arguments1,Symbol1,Body2]],Algorithm4)))/*;(trace,Function1=[_Number,Name|Arguments1],%get_up_to_next_chunk(Body1,%Body2,%[],Body2),(Arguments1=[]->append(Algorithm2,[[%Number,Name]],Algorithm4);append(Algorithm2,[[%Number,Name,Arguments1]],Algorithm4)))*/),%writeln1([Name,Arguments1,Symbol1,Body2]),%catch(call_with_time_limit(2,sm_to_lp(Functions,Algorithm4,Algorithm3)),_,false).sm_to_lp(Functions,Algorithm4,Algorithm3).
solfatonotes(Progression2A,Progression1,Progression2) :-Progression2A=[N1|Ns],solfegenotetonote(N1,N2),append(Progression1,[N2],Progression3),solfatonotes(Ns,Progression3,Progression2).
solfegenotetonote(di,'C#').
solfegenotetonote(f,'F').
solfegenotetonote(fi,'F#').
solfegenotetonote(l,'A').
solfegenotetonote(li,'A#').
solfegenotetonote(m,'E').
solfegenotetonote(r,'D').
solfegenotetonote(ri,'D#').
solfegenotetonote(s,'G').
solfegenotetonote(si,'G#').
solfegenotetonote(t,'B').
solve(X,0) :- atom(X),!. % solve2(pi*r^2,2*pi*r,S1,S2).
solve(_-N,N) :- !.
sort(Y1,Y2,Y2,Y1) :-Y1>Y2.
sort0(L,N) :- sort1(L,[],N).
sort1(A,B,C) :- A=[D|E], delete(E,D,F), append(B,[D],G), sort1(F,G,C).
sort1(L,M1,N) :- not((=(L,[]))),head(L,H),tail(L,T),maximum(T,H,M2,[],R),wrap(M2,M3),append(M1,M3,M4),sort1(R,M4,N).
sort1(List1,List2,List3) :-maximum1(List1,Item,List4),append(List2,[Item],List5),sort1(List4,List5,List3).
sort1([],B,B) :- !.
sort1([],L,L).
sort1([],L,L).sort1(L,M1,N) :- not((=(L,[]))),head(L,H),tail(L,T),maximum(T,H,M2,[],R),wrap(M2,M3),append(M1,M3,M4),sort1(R,M4,N).maximum([],L,L,R,R).maximum(L,M1,N,R1,R2) :- not((=(L,[]))),head(L,H),tail(L,T),(>=(M1,H)->(=(M2,M1),wrap(H,H2),append(R1,H2,R3));(=(M2,H),wrap(M1,M12),append(R1,M12,R3))),maximum(T,M2,N,R3,R2).
sort4([A|B],G,F) :- sort5(A,G,D), sort4(B,D,F).
sort4([],A,A) :- !.
sort5(A,[B|C],D) :- (A>B->(sort5(A,C,E),D=[B|E]); D=[A,B|C]).
sort5(A,[],[A]) :- !.
sort_3d(Y1,Y2,Y2,Y1) :-Y1>Y2.
sortbyx(X1,Y1,X2,Y2,X2,Y2,X1,Y1) :-    X2 < X1.
sortbyx_3d(X1,Y1,X2,Y2,X2,Y2,X1,Y1) :-    X2 < X1.
source_tagger :-phrase_from_file_s(string(String00a),"tags.txt"),string_codes(String02b,String00a),atom_to_term(String02b,String02a,[]),ask_for_new_tag(String02a,String02c),term_to_atom(String02c,File_contents),open_s("tags.txt",write,Stream),write(Stream,File_contents),close(Stream).
spaces1([]) --> [].
spell_check(File_list,File_list1,File_list2,String_dict,Dictionary,Reversed_dictionary2) :-File_list=[File_list3|File_list4],string_concat(File_list5,_E,File_list3),string_length(File_list5,1),string_codes(File_list5,File_list5_c),not(phrase(word1(File_list5_c),_)),append(File_list1,[File_list3],File_list6),spell_check(File_list4,File_list6,File_list2,String_dict,Dictionary,Reversed_dictionary2).
spell_check(File_list,File_list1,File_list2,String_dict,Dictionary,Reversed_dictionary2) :-%trace,%writeln1(spell_check(File_list,File_list1,File_list2,String_dict,Dictionary,Reversed_dictionary2)),File_list=[File_list302|File_list4],string_concat(File_list5,_E,File_list302),string_length(File_list5,1),string_codes(File_list5,File_list5_c),phrase(word1(File_list5_c),_),(false%File_list302=File_list3->true;(downcase_atom(File_list302,File_list301),atom_string(File_list301,File_list3))),(trace,member(File_list3,String_dict)->Choice=File_list3;(%trace,spell_check1(Dictionary,Reversed_dictionary2,File_list302,Suggestions),%repeat,number_menu(File_list302,Suggestions,Choice2),%string_concat(Choice2,"01",Choice3),(%trace,is_upper(File_list5_c)->((string(Choice2)->Choice2=Choice211;concat_list(Choice2,Choice211)),string_concat(Choice4,E1,Choice211),string_length(Choice4,1),upcase_atom(Choice4,Choice5),string_concat(Choice5,E1,Choice));Choice2=Choice))),%trace,%(Choice=[Choice_b]->true;Choice_b=Choice),(string(Choice)->Choice_a=Choice;concat_list(Choice,Choice_a)),capitalise_if_necessary(File_list302,Choice_a,Choice_a1),append(File_list1,[Choice_a1],File_list6),spell_check(File_list4,File_list6,File_list2,String_dict,Dictionary,Reversed_dictionary2).
spell_check([],File_list,File_list,_String_dict,_Dictionary,_Reversed_dictionary2) :- !.
spell_check2(Direction,Dictionary2,State2,A2,Word2,_Word3,Suggestions1,Suggestions2) :-((A2=[Letter100|_Rest],((Letter100=Letter)->true;(downcase_atom(Letter100,Letter101),atom_string(Letter101,Letter))),not((member([State2,Letter_b,_State3],Dictionary2),((Letter_b=Letter)->true;(downcase_atom(Letter_b,Letter01),atom_string(Letter01,Letter))))))->true;A2=[]),%trace,%writeln1(suggestions(Direction,Dictionary2,State2,Word2,_,Suggestions1,Suggestions3)),length(Word2,Word2_l),findall(Suggestions31,suggestions(Direction,Dictionary2,State2,Word2,_,Suggestions1,Suggestions31),Suggestions32),maplist(append,Suggestions32,Suggestions22),%trace,findall(Suggestions21,(member(A4,Suggestions22),(Direction=d->(append(Suggestions211,["0","1"],A4),Suggestions21=[Word2_l,Suggestions211]);(append(["1","0"],Suggestions211,A4),Suggestions21=[Word2_l,Suggestions211]))),Suggestions2).
split1(Q2,L16,%N1,N2, L20,L17) :-%get_items_summing_to_l(Q2,L16,N1,N3,[],L2),length(L18,L16),append(L18,L19,Q2),append(L20,[L18],L21),split1(L19,L16,L21,L17),!.
split11(Q2,L16,%N1,N2, L20,L17) :-%get_items_summing_to_l(Q2,L16,N1,N3,[],L2),length(L18,L16),append(L18,L19,Q2),append(L20,[L18],L21),split11(L19,L16,L21,L17),!.
split11(Q2,L16,%N1,N2, L20,L17) :-%get_items_summing_to_l(Q2,L16,N1,N3,[],L2),length(L18,L16),append(L18,L19,Q2),append(L20,[L18],L21),split11(L19,L16,L21,L17),!./*get_items_summing_to_l(_Q2,_,N,N,L,L) :- !.
split11(_A,_B,C,C) :-!.truncate_l(N,Max,N2) :- (N>Max->N2=Max;N2=N),!.
split12(A,_B,C,C,A) :-!.
split12(Q2,L16,%N1,N2, L20,L17,Rest) :-%get_items_summing_to_l(Q2,L16,N1,N3,[],L2),length(L18,L16),append(L18,L19,Q2),append(L20,[L18],L21),split12(L19,L16,L21,L17,Rest),!.
split13(Q2,L16,%N1,N2, L20,L17) :-%get_items_summing_to_l(Q2,L16,N1,N3,[],L2),length(L18,L16),append(L18,L19,Q2),append(L20,[L18],L21),split13(L19,L16,L21,L17),!.
split13(_A,_B,C,C) :-!.
split2(N,A,B,C) :- length(D,N), (append(D,E,A)-> (append(B,[D],F), split2(N,E,F,C)); append(B,[A],C)),!.
split2(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[Name,_In,_Out]|Rest],append(List1,[[Name|Rest]],List6),split2(List4,List6,List2),!.
split2(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[[n,Name],_In,_Out]|Rest],append(List1,[[[n,Name]|Rest]],List6),split2(List4,List6,List2),!.
split2(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[n,[Name,[[test,Test1],[numin,Numin],[numout,Numout]]]]|Rest],append(List1,[[[n,[Name,[[test,Test1],[numin,Numin],[numout,Numout]]]]|Rest]],List6),split2(List4,List6,List2),!.
split2(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[n,[Name,[[test,Test1],[numin,Numin],[numout,Numout]]]]|Rest],member([[n,[Name,[[test,_Test3],[numin,Numin],[numout,Numout]]]]|Rest],List4),delete(List4,[[n,[Name,[[test,_Test4],[numin,Numin],[numout,Numout]]]]|Rest],List7),append(List1,[[[n,[Name,[[test,Test1],[numin,Numin],[numout,Numout]]]]|Rest]],List6),split2(List7,List6,List2),!.
split3(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[Name,In,Out]|_Rest],append(List1,[[Name,In,Out]],List6),split3(List4,List6,List2),!.
split3(Predicates1,List1,List2) :-Predicates1=[Item1|List4],Item1=[[[n,Name],In,Out]|_Rest],append(List1,[[[n,Name],In,Out]],List6),split3(List4,List6,List2),!.
split_into_lp_files(A,B,C,B1,C1) :- A=[D|E], D=[[n,comment],[["File delimiter",_P,_F1]]], append(B1,[B],B2), split_into_lp_files(E,[D],C,B2,C1),!.
split_into_lp_files(A,B,C,B1,C1) :- A=[D|E], not(D=[[n,comment],[["File delimiter",_P,_F1]]]), append(B,[D],F), split_into_lp_files(E,F,C,B1,C1),!.
split_into_lp_files1(A,B,C,B1,C1) :- A=[D|E], D=[[n,comment],[["File delimiter",_P,_F1]]], append(B1,[B],B2), split_into_lp_files1(E,[D],C,B2,C1),!.
split_into_tables(Q,Q1) :-%trace,(split_into_tables1(Q,Q1)->true;Q1=[]),!.
split_into_tables1(Q,Q1) :-%term_to_atom(Q,Q01),replace_word_numbers(Q,Q0),%trace,(((is_list(Q0)->(foldr(string_concat,Q0,Q01),sub_string(Q01,_,_,_,"\t"));sub_string(Q0,_,_,_,"\t")),%Q0=Q2;%split_on_substringsplit_string(Q0,"\n\r\t",Q2)%split_string1(Q0,"\n\r","\n\r",Q2)%),%delete(Q21,"",Q2),%((trace,%append([_L1],L12,Q2),L12=[L11|_],%sub_string(L11,_,_,_,"\t"),%findall(Q4,(member(Q3,Q2),%split_string(L12%Q3%,"\t","\t",%Q4)%length(Q4,L)%),%Q4L),/*((append([L1],_,Q2),sub_string(L1,_,_,_,"\t"),findall(%[Lx,Q4L%],(member(Q3x,Q2),split_string(Q3x,"\n\r","\n\r",Q4x),findall(%[L,Q4%],(member(Q3,Q4x),split_string(Q3,"\t","\t",Q4)%,%length(Q4,L)),Q4L)),Q4L2),*/%group_consecutive_duplicates(Q4L,B))->true;%trace,((is_list(Q0)->Q0=Q2;%foldr(string_concat,Q0,Q01),%sub_string(Q01,_,_,_,"\t"));%sub_string(Q0,_,_,_,"\t")),%Q0=Q2;%trace,%split_stringsplit_on_substring(Q0,"\n\r",Q2)))),find_a_or_n(Q2,L11),%clumped(L11,L12),reverse(L11,L13),find_sep_n(L13,L16),/*(find_first(member(a-L14,L13))->L141=L14;L141=0),(find_first(member(n-L15,L13))->L151=L15;L151=0),(find_first(member((*)-L17,L13))->L171=L17;L171=0),%L13=[_-L14,_-L15|_],L16 is L151+L141+L171,*/%trace,%reverse(Q2,Q21),Q21=Q2,split11(Q21,L16,[],BA),%reverse(BA,B),BA=B,BT=[B], % 1 tablelength(B,BL),numbers(BL,1,[],BN),find_first(findall([table,BN1,C1],(member(BN1,BN),get_item_n(BT,BN1,A),%member([L,A],B),%findall(A12,(member(A13,A),length(A,AL),numbers(AL,1,[],ALN),%trace,findall(RN3,(member(RN1,ALN),get_item_n(A,RN1,AL2),%trace,%find_a_or_n(A13,AL21),find_a_or_n(AL2,AL21),%length(A13,A13L),length(AL2,A13L),numbers(A13L,1,[],A13N),findall(A14,(member(CN,A13N),%trace,%writeln1(get_item_n(***,AL2,CN,A131)),get_item_n(AL2,CN,A131),get_item_n(AL21,CN,A111),%trace,(A111=n%L=1-> % Give only data without tabs for non-tables% don't forget to insert ^ in formulas(atomic_list_concat(A3,'–',A131),atomic_list_concat(A3,'-',A4),string_codes(A4,A1),operators1(Ops1),operators2(Ops2),extra_characters(EC),foldr(string_concat,[Ops1,Ops2,EC],Chars1),string_codes(Chars1,B1),% after removing "," and " " from numbers put them back togethersplit_on_substring117(A1,B1,[],C),group_consecutive_numbers(BN1,RN1,CN,C,C11),insert_item_numbers(C11,C12),% split into fs x% make function term with term1%trace,make_formula_term(BN1,RN1,CN,C12,A14%)%,writeln1(make_formula_term(***,BN1,RN1,CN,C12,A14))%%A141%,A14=[function,BN1,RN1,CN,C12,A141]);(%make_formula_term(BN1,RN1,CN,A131,A141),A14=[function,BN1,RN1,CN,[A131],[A131]%A141]))/*findall(C13,(member(C13,A131),atom_string(C14,C13),atom_concat(C141,_,C14),atom_length(C141,1),not(char_type(C141,alpha))),C121),,convert_tokens_to_nested_list(C121,F21),C1=[function,FEC,F2]A131)*/),RN3)),%A12)),C1)),Q1)),!.
split_into_tables1(Q,Q1) :-%term_to_atom(Q,Q01),replace_word_numbers(Q,Q0),%trace,(((is_list(Q0)->(foldr(string_concat,Q0,Q01),sub_string(Q01,_,_,_,"\t"));sub_string(Q0,_,_,_,"\t")),%Q0=Q2;%split_on_substringsplit_string(Q0,"\n\r\t",Q2)%split_string1(Q0,"\n\r","\n\r",Q2)%),%delete(Q21,"",Q2),%((trace,%append([_L1],L12,Q2),L12=[L11|_],%sub_string(L11,_,_,_,"\t"),%findall(Q4,(member(Q3,Q2),%split_string(L12%Q3%,"\t","\t",%Q4)%length(Q4,L)%),%Q4L),/*((append([L1],_,Q2),sub_string(L1,_,_,_,"\t"),findall(%[Lx,Q4L%],(member(Q3x,Q2),split_string(Q3x,"\n\r","\n\r",Q4x),findall(%[L,Q4%],(member(Q3,Q4x),split_string(Q3,"\t","\t",Q4)%,%length(Q4,L)),Q4L)),Q4L2),*/%group_consecutive_duplicates(Q4L,B))->true;%trace,((is_list(Q0)->Q0=Q2;%foldr(string_concat,Q0,Q01),%sub_string(Q01,_,_,_,"\t"));%sub_string(Q0,_,_,_,"\t")),%Q0=Q2;%trace,%split_stringsplit_on_substring(Q0,"\n\r",Q2)))),find_a_or_n(Q2,L11),%clumped(L11,L12),reverse(L11,L13),find_sep_n(L13,L16),/*(find_first(member(a-L14,L13))->L141=L14;L141=0),(find_first(member(n-L15,L13))->L151=L15;L151=0),(find_first(member((*)-L17,L13))->L171=L17;L171=0),%L13=[_-L14,_-L15|_],L16 is L151+L141+L171,*/%trace,%reverse(Q2,Q21),Q21=Q2,split11(Q21,L16,[],BA),%reverse(BA,B),BA=B,BT=[B], % 1 tablelength(B,BL),numbers(BL,1,[],BN),find_first(findall([table,BN1,C1],(member(BN1,BN),get_item_n(BT,BN1,A),%member([L,A],B),%findall(A12,(member(A13,A),length(A,AL),numbers(AL,1,[],ALN),%trace,findall(RN3,(member(RN1,ALN),get_item_n(A,RN1,AL2),%trace,%find_a_or_n(A13,AL21),find_a_or_n(AL2,AL21),%length(A13,A13L),length(AL2,A13L),numbers(A13L,1,[],A13N),findall(A14,(member(CN,A13N),%trace,%writeln1(get_item_n(***,AL2,CN,A131)),get_item_n(AL2,CN,A131),get_item_n(AL21,CN,A111),%trace,(A111=n%L=1-> % Give only data without tabs for non-tables% don't forget to insert ^ in formulas(atomic_list_concat(A3,'–',A131),atomic_list_concat(A3,'-',A4),string_codes(A4,A1),operators1(Ops1),operators2(Ops2),extra_characters(EC),foldr(string_concat,[Ops1,Ops2,EC],Chars1),string_codes(Chars1,B1),% after removing "," and " " from numbers put them back togethersplit_on_substring117(A1,B1,[],C),group_consecutive_numbers(BN1,RN1,CN,C,C11),insert_item_numbers(C11,C12),% split into fs x% make function term with term1%trace,make_formula_term(BN1,RN1,CN,C12,A14%)%,writeln1(make_formula_term(***,BN1,RN1,CN,C12,A14))%%A141%,A14=[function,BN1,RN1,CN,C12,A141]);(%make_formula_term(BN1,RN1,CN,A131,A141),A14=[function,BN1,RN1,CN,[A131],[A131]%A141]))/*findall(C13,(member(C13,A131),atom_string(C14,C13),atom_concat(C141,_,C14),atom_length(C141,1),not(char_type(C141,alpha))),C121),,convert_tokens_to_nested_list(C121,F21),C1=[function,FEC,F2]A131)*/),RN3)),%A12)),C1)),Q1)),!.find_sep_n(L13,L161 %X2 ) :-%trace,%writeln(find_sep_n(L13,L161)),%findall(X13,(member(Y1,L13),findall(X11,(member(X12,Y1),(X12=(*)%-N%->X11=_%-N%;X11=X12)),X13)),X14),numbers(12,1,[],Ns),%trace,%findall(X7,(member(X6,L13),(X6=(*)-_->X7=_;X7=X6)),X8),find_first((member(L16,Ns),split1(L13,L16,%0,_, [],X2),%findall(X13,(member(Y1,X2),findall(X11,(member(X12,Y1),(X12=(*)-N->X11=_-N;X11=X12)),X13)),X14),(X2=[]->L161=1;(append(X3,[_],X2),maplist(=(_), X3),X3=[X4|_], length(X4,L161)%forall(member(X5,X3),X5=X4),%findall(Y,member(_-Y,X4),Ys),%foldr(plus,Ys,0,L161))))),!.
split_on_number(Input,Input1,Input10) :-string_concat(A,B,Input),string_concat(C,D,B),string_length(C,1),((C=" ",string_concat(E,F,D),string_concat(J,K,E),string_length(K,1),K=" ",string_concat(G,_H,F),%trace,string_length(G,1),(number_string(_,G)),%->true;not(G=" ")),%((%C=" ",%)->(concat_list([A,C,J],Input1),%Input1=A,Input10=F))%->true;%(number_string(_,C),%Input1=A,Input10=B)),!.%);split_on_number(Input,Input1,Input10) :-string_concat(A,B,Input),string_concat(C,D,B),string_length(C,1),((C=" ",string_concat(_E,F,D),string_concat(G,_H,F),%trace,string_length(G,1),(number_string(_,G)),%->true;not(G=" ")),%((%C=" ",%)->(%concat_list([A,C,J],Input1),Input1=A,Input10=F)->true;(number_string(_,C),Input1=A,Input10=B)),!.%);split_on_number(Input,Input1,Input10) :-Input1=Input,Input10="".
split_on_phrases4b(D1,Phrase2a,E11,C11,D10) :-append(C11,E11,D1),%%writeln1(append(Phrase2a,D10,E11)),append(Phrase2a,D10,E11).split_on_phrases41(Text1,E11,Text2,Text4,Phrase2,Phrase22,Phrase2a,Title,N,Phrase2aa) :-string_codes(Text1z,Text1),%%*string_codes(E11z,E11),%%string_codes(Text2z,Text2),%%*string_codes(Text4z,Text4),string_codes(Phrase2z,Phrase2),string_codes(Phrase22z,Phrase22),string_codes(Phrase2az,Phrase2a),string_codes(Titlez,Title),%%*string_codes(Nz,N),string_codes(Phrase2aaz,Phrase2aa),%%writeln1(split_on_phrases41(Text1z,_E11z,Text2,_Text4z,Phrase2z,Phrase22z,Phrase2az,Titlez,N,Phrase2aaz)),%%string_codes(Text1z,Text1),writeln([text1,Text1z]),%%writeln(split_on_phrases4b(Text1,Phrase2aa,E11x,Text1a,D100)),split_on_phrases4b(Text1,Phrase2aa,E11x,Text1a,D100),string_codes(Text1z,Text1),string_codes(Phrase2aaz,Phrase2aa),string_codes(E11xz,E11x),string_codes(Text1az,Text1a),string_codes(D100z,D100),%%writeln1(split_on_phrases4b(Text1z,Phrase2aaz,E11xz,Text1az,D100z)),%%writeln1(split_on_phrases4a(Text1a,_C1,D1,Phrase2,_E1)),split_on_phrases4a(Text1a,C1,D1,Phrase2,E1),string_codes(C1z,C1),string_codes(D1z,D1),string_codes(E1z,E1),%%writeln(split_on_phrases4a(Text1a,C1z,D1z,Phrase2z,E1z)),%%string_codes(C,C1),%%string_codes(D,D1),%%string_codes(Phrase20,Phrase2),string_codes(Phrase202,Phrase22),%%writeln1(split_on_phrases4b(Text1a,Phrase2a,_,_,_)),(split_on_phrases4b(Text1a,Phrase2a,_E11q,_C11q,_D10q)-> %% D1->Text1a((split_on_phrases4b(Text1,Phrase22,_,_,C11r)->true;C11r=Text1), %% oldsplit_on_phrases4b(C11r,Phrase2a,E11,C11,_D102));%%split_on_phrases4b(Text1a,Phrase2,_E11q,_C11q,_D10q));(C11=Text1a,E11=E11x)), %% old%%writeln1(split_on_phrases4b(D1,Phrase2aa,_F112,G11)),%%split_on_phrases4b(D10,Phrase2aa,_F11,G11,H),%%()split_on_phrases4b(D1,Phrase2a,E11,C11),%%split_on_phrases4b(G11,Phrase2a,E11,C11),string_codes(C110,C11),concat_list([%%Phrase20,C110%%,E11],C12),string_codes(C10,C12),number_string(N,NS),concat_list([Title," ","by Lucian Green"," ",Phrase202," ",NS," of 4.txt"],E101),concat_list([Title,"\n","by Lucian Green","\n",Phrase202," ",NS," of 4\n\n",C10],C122),append(Text2,[[E101,C122]],Text4).
split_on_substring(A,B,E,C) :-string_concat(B,D,A),split_on_substring(D,B,"",C1),append([E],C1,C),!.
split_on_substring(A,B,E1,C) :-string_concat(E,D,A),string_length(E,1),string_concat(E1,E,E2),split_on_substring(D,B,E2,C),!.strip_illegal_chars("",A,A) :- !.
split_on_substring117(A,B,E1,C) :-    length(E,1),    append(E,D,A),    append(E1,E,E2),    split_on_substring117(D,B,E2,C),!.
split_on_substring117(A,B2,E,C) :-    intersection(A,B2,[]),    string_codes(E1,E),    string_codes(A1,A),    concat_list([E1,A1],C2),    append_list([C2],C),    !.
split_on_substring117(A,B2,E,C) :-    member(B,B2),    append([B],D,A),    %trace,    split_on_substring117(D,B2,[],C1),    string_codes(E1,E),    string_codes(B1,[B]),    %trace,    (E1=""->maplist(append,[[[B1],C1]],[C]);    (%trace,    maplist(append,[[[E1,B1],C1]],[C]))),    !.
split_string_onnonletter(Input1,Input2,Chars,Input3) :-Input1=[Input4|Input5],%char_type(Input4,alpha),append(Input2,[Input4],Input6),split_string_onnonletter(Input5,Input6,Chars,Input3), !.
split_string_onnonletter(Input1,Input2,Chars,Input3) :-Input1=[Input4|Input5],%not(char_type(Input4,alpha)),string_codes(Chars,Codes),member(Code,Codes),Input4=Code,append(Input2,[Code],Input7),append(Input7,`@`,Input6),split_string_onnonletter(Input5,Input6,Chars,Input3), !.
split_string_onnonletter(Input1,Input2,Input3) :-Input1=[Input4|Input5],char_type(Input4,alpha),append(Input2,[Input4],Input6),split_string_onnonletter(Input5,Input6,Input3), !.
split_string_onnonletter(Input1,Input2,Input3) :-Input1=[Input4|Input5],not(char_type(Input4,alpha)),append(Input2,[32],Input6),split_string_onnonletter(Input5,Input6,Input3), !.
split_string_onnonletter([],Input,Input) :- !.
split_string_onnonletter([],Input,_Chars,Input) :- !.
split_string_onnonletter([],Input,_Chars,Input) :- !.split_string_onnonletter(Input1,Input2,Chars,Input3) :-Input1=[Input4|Input5],%not(char_type(Input4,alpha)),string_codes(Chars,Codes),member(Code,Codes),Input4=Code,append(Input2,[Code],Input7),append(Input7,`@`,Input6),split_string_onnonletter(Input5,Input6,Chars,Input3), !.
split_string_onnonletter_by_itself(Input1,Input2,Chars,Input3) :-Input1=[Input4|Input5],%not(char_type(Input4,alpha)),string_codes(Chars,Codes),member(Code,Codes),Input4=Code,append(Input2,`@`,Input8),append(Input8,[Code],Input7),append(Input7,`@`,Input6),split_string_onnonletter_by_itself(Input5,Input6,Chars,Input3), !.
split_string_onnonletter_by_itself(Input1,Input2,Chars,Input3) :-Input1=[Input4|Input5],append(Input2,[Input4],Input6),split_string_onnonletter_by_itself(Input5,Input6,Chars,Input3), !.
split_string_onnonletter_by_itself([],Input,_Chars,Input) :- !.
split_string_onnonletter_by_itself2(Input1,Input2,Chars,Input3) :-Input1=[Input4|Input5],%not(char_type(Input4,alpha)),string_codes(Chars,Codes),member(Code,Codes),Input4=Code,append(Input2,`ª`,Input81),append(Input81,`‡`,Input8),append(Input8,[Code],Input7),append(Input7,`ª`,Input6),split_string_onnonletter_by_itself2(Input5,Input6,Chars,Input3), !.
split_string_onnonletter_by_itself2(Input1,Input2,Chars,Input3) :-Input1=[Input4|Input5],append(Input2,[Input4],Input6),split_string_onnonletter_by_itself2(Input5,Input6,Chars,Input3), !.
split_string_onnonletter_by_itself2([],Input,_Chars,Input) :- !.
ssi("run in ssi",n1,v1). % To avoid data conflicts, n,v etc may need random strings following them% 11.    I prepared to feed Inky.  I did this by scooping Inky's pellets.  First, I touched the pile of pellets with the scoop.  Second, I scooped the pellets.  Third, I lifted the scoop of pellets up.  In this way, I prepared to feed Inky by scooping Inky's pellets.
ssi_test(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test(NTotal3,Query,Functions,Result),((international_lucianpl([lang,"en"],Debug,Query,Functions,Result1)%,writeln1([Result,Result1]),Result=Result1)->(Score3 is Score1+1,writeln0([ssi_test,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test,NTotal3,failed]))),writeln0(""),ssi_test(Debug,NTotal3,NTotal2,Score3,Score2),!.
ssi_test(_Debug,NTotal,NTotal,Score,Score) :- NTotal=249, !.
ssi_test_all0(Test,Arity,Lang,Debug,NTotal1,NTotal2,Score1,Score2,NTotal4) :-NTotal3 is NTotal1+1,ssi_test_all000(Test,Debug,NTotal3,Score1,Score3,Lang),writeln0(""),ssi_test_all0(Test,Arity,Lang,Debug,NTotal3,NTotal2,Score3,Score2,NTotal4),!.
ssi_test_all_bt0(Ssi_test,Arity,Lang,Debug,NTotal1,NTotal2,Score1,Score2,NTotal4) :-NTotal3 is NTotal1+1,ssi_test_all_bt000(Ssi_test,Debug,NTotal3,Score1,Score3,Lang),writeln0(""),ssi_test_all_bt0(Ssi_test,Arity,Lang,Debug,NTotal3,NTotal2,Score3,Score2,NTotal4),!.
ssi_test_all_bt0(_Ssi_test,_Arity,_Lang,_Debug,NTotal,NTotal,Score,Score,NTotal) :- %NTotal=105, !.
ssi_test_open_types(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test_open_types_cases(NTotal3,Query,Types,Modes,Functions),((international_lucianpl([lang,"en"],Debug,Query,Types,Modes,Functions,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([ssi_test_open_types,NTotal3,result,Result]),writeln0([ssi_test_open_types,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test_open_types,NTotal3,failed]))),writeln0(""),ssi_test_open_types(Debug,NTotal3,NTotal2,Score3,Score2),!.
ssi_test_open_types(_Debug,NTotal,NTotal,Score,Score) :- NTotal=24, !.
ssi_test_pl(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test_pl(NTotal3,Query,Functions,Result),p2lpconverter_command([string,Query],Query1),p2lpconverter([string,Functions],Functions1),p2lpconverter_term([string,Result],Result2),((international_lucianpl([lang,"en"],Debug,Query1,Functions1,Result1),%writeln1([result1,Result1]),Result2=Result1)->(Score3 is Score1+1,writeln0([ssi_test_pl,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test_pl,NTotal3,failed]))),writeln0(""),ssi_test_pl(Debug,NTotal3,NTotal2,Score3,Score2),!.
ssi_test_pl(_Debug,NTotal,NTotal,Score,Score) :- NTotal=1, !.
ssi_test_types(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test_types_cases(NTotal3,Query,Types,Modes,Functions,Result),(international_lucianpl([lang,"en"],Debug,Query,Types,Modes,Functions,Result)->(Score3 is Score1+1,writeln0([ssi_test_types,NTotal3,passed]));(Score3=Score1,writeln0([ssi_test_types,NTotal3,failed]))),writeln0(""),ssi_test_types(Debug,NTotal3,NTotal2,Score3,Score2),!.
ssi_test_types(_Debug,NTotal,NTotal,Score,Score) :- NTotal=58, !.
ssi_testopen(Debug,NTotal1,NTotal2) :-NTotal3 is NTotal1+1,testopen_cases(NTotal3,Query,Functions),((international_lucianpl([lang,"en"],Debug,Query,Functions,Result),not(Result=[]))->(writeln0([ssi_test,NTotal3,result,Result]),writeln0([ssi_test,NTotal3,passed]));(writeln0([ssi_test,NTotal3,failed]))),writeln0(""),ssi_testopen(Debug,NTotal3,NTotal2),!.
ssi_testopen(_Debug,NTotal,NTotal) :- NTotal=3, !.
step15641(Note1, Note2) :-Value is Note1+2, Note2 is Value mod 12.
step15642(Note1, Note2) :-Value is Note1+7, Note2 is Value mod 12.
step15643(Note1, Note2) :-Value is Note1+8, Note2 is Value mod 12.
step16451(Note1, Note2) :-Value is Note1+2, Note2 is Value mod 12.
step16452(Note1, Note2) :-Value is Note1+8, Note2 is Value mod 12.
step16453(Note1, Note2) :-Value is Note1+9, Note2 is Value mod 12.
stepclassical2(Note1, Note2) :-Value is Note1+3, Note2 is Value mod 12.
stepclassical3(Note1, Note2) :-Value is Note1+5, Note2 is Value mod 12.
stepclassical4(Note1, Note2) :-Value is Note1+6, Note2 is Value mod 12.
stepclassical5(Note1, Note2) :-Value is Note1+7, Note2 is Value mod 12.
stepclassical6(Note1, Note2) :-Value is Note1+10, Note2 is Value mod 12.
stepclassical7(Note1, Note2) :-Value is Note1+11, Note2 is Value mod 12.
steppopclassical2(Note1, Note2) :-Value is Note1+3, Note2 is Value mod 12.
steppopclassical3(Note1, Note2) :-Value is Note1+5, Note2 is Value mod 12.
steppopclassical4(Note1, Note2) :-Value is Note1+6, Note2 is Value mod 12.
steppopclassical5(Note1, Note2) :-Value is Note1+7, Note2 is Value mod 12.
steppopclassical52(Note1, Note2) :-Value is Note1+8, Note2 is Value mod 12.
steppopclassical6(Note1, Note2) :-Value is Note1+10, Note2 is Value mod 12.
steppopclassical7(Note1, Note2) :-Value is Note1+11, Note2 is Value mod 12.
string(String) --> list(String).list([]) --> [].
string_atom2(String1,Atom1) :-atom(Atom1),%String1=Atom1,%replace(Atom1,"\"","&",String2),delete1(Atom1,"'",%"#",String3),string_atom(String3,String1),!.
string_atom2(String1,Atom1) :-atom(Atom1),%String1=Atom1,%trace,%replace(Atom1,"\"","&",String2),delete1_p2lp(Atom1,"'",%"#",String3),%string_strings(Atom1,A),%append([_],A1,A),%append(A2,[_],A1),%foldr(string_concat,A2,String3),string_atom(String3,String1),!.
string_chars1(A,B):-string_chars(A,B).
string_chars1(A,B):-var(A),var(B),!.
string_compound(A,B+C/D) :- catch(number(B),_,false),number_string(B,A1),frac_to_string(C/D,CD),foldr(string_concat,[A1,"+",CD],A).frac_to_string(A/B,AB) :- foldr(string_concat,[A,"/",B],AB).
string_compound(A,C/D) :- %catch(number(B),_,false),%number_string(B,A1),frac_to_string(C/D,CD),foldr(string_concat,[CD],A),!.
string_concat_url(F11,F1,F2) :- (string_concat(_F12,"/",F11)-> string_concat(F11,F1,F2); (foldr(string_concat,[F11,"/",F1],F2))),!.
string_to_image1(X_lim,Y_lim,X,Y,XA1,YA1,S1,C1,String,File_contents1,File_contents2) :-string_concat(Char1,String2,String),string_length(Char1,1),characterbr2(Cs),string_atom(Char1,Char),%trace,(member([Char,_,_],Cs)->Char2=Char;Char2=' '),%trace,(Char2=' '->(File_contents1=File_contents3);(ctobr_1(S1,Char2,Grid2),%writeln1(Grid2),convert_to_pbm(Grid2,5,9,XA1,YA1,S1,C1,Grid3),%trace,%writeln1([c,Grid3]),%(Char2="b"->print_grid_1(Grid3,13,10);true),render_to_screen(File_contents1,Grid3,5,9,X,Y,X_lim,Y_lim,XA1,YA1,S1,C1,File_contents3))),((X=X_lim,Y=Y_lim)->File_contents3=File_contents2;((X is X_lim->(X1 is 1,Y1 is Y+1);(X1 is X+1,Y1 is Y)),string_to_image1(X_lim,Y_lim,X1,Y1,XA1,YA1,S1,C1,String2,File_contents3,File_contents2))).
string_to_list1(Options1,N1,N2,Options2a,Options2b) :-Options1=[B|Rest],%%findall(C,(member(B,Options1),string_to_list2(B,B,N1,N3,Options2a,Options2c),%%),Options2).%%trace,[Options2c]=Options2d,%%trace,string_to_list1(Rest,N3,N2,[],Options2e),%%trace,Options2d=[[[_,D1,D2]|D3]],Options2f=[[[1,D1,D2]|D3]],append(Options2f,Options2e,Options2b).
string_to_list2(A,B,C) :-string_concat(D,E,A),string_length(D,1),append(B,[D],F),string_to_list2(E,F,C).
string_to_list2(A,B1,N1,N2,B,C) :-string_concat(D,E,A),string_length(D,1),N3 is N1 + 1,append(B,[[N1,D,N3]],F),%%maplist(append,[[B,D]],[F]),string_to_list2(E,B1,N3,N2,F,C).merge_lists_a([],Options1,Options2,Options3) :- append(Options1,Options2,Options3),!. %*?%merge_lists_a([[-,A]],Options0,Options1,Options2) :- %member([N,A1,[-,A]],Options0),%append(Options1,[[N,A1,[-,A]]],Options2),!.
string_to_list21(A,B,C) :-string_concat(D,E,A),string_length(D,1),append(B,[D],F),string_to_list21(E,F,C).
string_to_list_a1(Options1,N1,N2,Options2a,Options2b) :-Options1=[B|Rest],%%findall(C,(member(B,Options1),SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",split_string(B,SepandPad,SepandPad,B2),string_to_list_a2(B2,B,N1,N3,Options2a,Options2c),%%),Options2).
string_to_list_b1(Options1,N1,N2,Options2a,Options2b) :-Options1=[B2|Rest],%%findall(C,(member(B,Options1),%SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%split_string(B,SepandPad,SepandPad,B2),string_to_list_b2(B2,B2,N1,N3,Options2a,Options2c),%%),Options2).
string_to_list_b1(Options1,N1,N2,Options2a,Options2b) :-Options1=[B2|Rest],%%findall(C,(member(B,Options1),%SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%split_string(B,SepandPad,SepandPad,B2),string_to_list_b2(B2,B2,N1,N3,Options2a,Options2c),%%),Options2).%%trace,[Options2c]=Options2d,%%trace,string_to_list_b1(Rest,N3,N2,[],Options2e),%%trace,Options2d=[[[_,D1,D2]|D3]],Options2f=[[[1,D1,D2]|D3]],append(Options2f,Options2e,Options2b).
string_to_list_b2(A,B1,N1,N2,B,C) :-%string_concat(D,E,A),%string_length(D,1),A=[D|E],N3 is N1 + 1,append(B,[[N1,D,N3]],F),%%maplist(append,[[B,D]],[F]),string_to_list_b2(E,B1,N3,N2,F,C).
string_to_pbm1(X_lim,Y_lim,X,Y,String,File_contents1,File_contents2) :-string_concat(Char1,String2,String),string_length(Char1,1),characterbr(Cs),string_atom(Char1,Char),%trace,(member([Char,_,_],Cs)->Char2=Char;Char2=' '),%trace,(Char2=' '->(File_contents1=File_contents3);(ctobr_1(Char2,Grid2),%writeln1(Grid2),convert_to_pbm(Grid2,5,9,Grid3),%trace,%writeln1([c,Grid3]),%(Char2="b"->print_grid_1(Grid3,13,10);true),render_to_screen(File_contents1,Grid3,5,9,X,Y,X_lim,Y_lim,File_contents3))),((X=X_lim,Y=Y_lim)->File_contents3=File_contents2;((X is X_lim->(X1 is 1,Y1 is Y+1);(X1 is X+1,Y1 is Y)),string_to_pbm1(X_lim,Y_lim,X1,Y1,String2,File_contents3,File_contents2))).
string_to_pbm1(X_lim,Y_lim,_X,Y,String,File_contents1,File_contents2) :-string_concat(Char,String2,String),string_length(Char,1),(Char="\n"->true;Char="\r"),X1 is 1,Y1 is Y+1,string_to_pbm1(X_lim,Y_lim,X1,Y1,String2,File_contents1,File_contents2).
string_to_pbm1(_,_,_,_,"",File_contents,File_contents) :- !.
stringconcat(A,B,C):-string_concat(A,B,C).
stringconcat1(Item11,Item21,Item31) :-replace_empty_with_empty_set([Item11,Item21,Item31],[],[Item1,Item2,Item3]),maplist(expression,[Item1,Item2,Item3]),string_concat(Item1,Item2,Item3),!.
stringconcat1(Item11,Item21,Item31) :-replace_empty_with_empty_set([Item11,Item21,Item31],[],[Item1,Item2,Item3]),maplist(expressionnotatom,[Item1,Item2,Item3]),string_concat(Item1,Item2,Item3),!.
stringconcat1([],Item,Item) :-!.
strings_atoms_numbers(T1,T2,rs=RS) :-%trace,(character_breakdown_mode(off)->T1=T2;%((RS=on)->(%split_string_if_split(T1,A3,split=RS),%T1=A3,%find_lists3b(A3,T2));A2=T2);(sub_term_types_wa([string,atom,number,compound],T1,In1),%(length(In1,1)->T1=T2;(findall([Ad,[Type,A21]],(member([Ad,A1],In1),not(type_s2a1(A1)),%not(is_var_s2a(A1)),(is_var_s2a(A1)->(Type=var,fail%A2=A1);(get_type(A1,Type),%try(A1,A2)characterise(A1,Type,A2),%,A2=[A21]((%san_no_rs(false),RS=on)->(split_string_if_split(A2,A3,split=RS),find_lists3b(A3,A21));A2=A21)%(length(A2,1)->fail;true)))),In2),foldr(put_sub_term_wa_ae,In2,T1,T2)))).
stringtonumber(A,B):-number_string(B,A).
strip(Arguments1,Result2,Result3) :-Arguments1=[[Variable,Value]|Arguments2],        isvar(Variable),        append(Result2,[Value],Result4),        strip(Arguments2,Result4,Result3).
strip_illegal_chars(A,B,E) :-string_concat(C,D,A),string_length(C,1),(char_type(C,alnum)->true;(char_type(C,white)->true;(char_type(C,digit)->true;(char_type(C,punct)->true;(char_type(C,newline)))))),string_concat(B,C,F),strip_illegal_chars(D,F,E),!.
strip_illegal_chars(A,B,E) :-string_concat(E1,D,A),string_length(E1,1),char_type(E1,quote),string_concat(B,"'",F),strip_illegal_chars(D,F,E).
strip_illegal_chars(A,B,E) :-string_concat(E1,D,A),string_length(E1,1),string_concat(B," ",F),strip_illegal_chars(D,F,E),!.
sttwa(Heuristic, Term, Instances) :-sub_term_types_wa(Heuristic, Term, Instances).
stwa(Subterm, Term, Instances) :-sub_term_wa(Subterm, Term, Instances).
sub_term_types_with_address(Heuristic, Term, Instances) :-sub_term_types_wa(Heuristic, Term, Instances).
sub_term_wa2(Ns,Ns,_N,[],_Find,B,B,_) :- !.
sub_term_wa2(Ns1,Ns2,N,A,Find,B,C,First) :- find_first(is_list(A)), sub_term_wa4(Ns1,Ns2,N,A,Find,B,C,First).
sub_term_wa3(Ns,Ns,_N,A,Find,B,B,true) :-  stwa(%[ C0%,Find] ), (C0=find->not(A=Find);(C0=types,not(is_t(Find,A,true,true)))),!.sub_term_wa4(Ns1,Ns1,_N,A,Find,B,C,true) :- stwa(%[ C0%,Find] ), (C0=find->A=Find;(C0=types,is_t(Find,A,true,true))), not(Ns1=[_]), append(B,[[Ns1,A]],C).sub_term_wa4(Ns1,Ns2,N,A,Find,B,C,First) :- copy_term(Find,Find1),  N1 is N+1, (First=true->N11=1;N11=N1), append(Ns1,[N11],Ns5), %trace, A=[D|E],sub_term_wa2(Ns5,_Ns3,N11,D,Find1,B,F,true), %writeln(N11), %writeln(First),trace, sub_term_wa2(Ns1,Ns2,N11,E,Find,F,C,false).
sub_term_with_address(Subterm, Term, Instances) :-sub_term_wa(Subterm, Term, Instances).
subject(dog).
subject(phone).
substitute1(Item,POS,Grammar1,Grammar2,Grammar3) :-Grammar1=[Grammar4|Grammar5],Grammar4=POS,append_list([Grammar2,Item],Grammar6),append(Grammar6,Grammar5,Grammar3),!.
substitute1(Item,POS,Grammar1,Grammar2,Grammar3) :-Grammar1=[Grammar4|Grammar5],not(Grammar4=POS),append_list([Grammar2,Grammar4],Grammar6),substitute1(Item,POS,Grammar5,Grammar6,Grammar3),!.
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],Grammar2=a,findall(A,(%%brdict(BD),member(A,BD),!,member([A,"plus"],BrDict012)),B),random_member(Word,B),append(Sentence1,[Word],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],Grammar2=a,findall(A,(member([A,"plus"],BrDict012)),B),mind_read(Word,B),append(Sentence1,[Word],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],Grammar2=a,findall(A,(member([A,"plus"],BrDict012)),B),random_member(Word,B),append(Sentence1,[Word],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],Grammar2=n,findall(A,(%%brdict(BD),member(A,BD),!,member([A,"box"],BrDict012)),B),random_member(Word,B),append(Sentence1,[Word],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],Grammar2=n,findall(A,(member([A,"box"],BrDict012)),B),mind_read(Word,B),append(Sentence1,[Word],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],Grammar2=n,findall(A,(member([A,"box"],BrDict012)),B),random_member(Word,B),append(Sentence1,[Word],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],Grammar2=v,findall(A,(%%brdict(BD),member(A,BD),!,member([A,"right"],BrDict012)),B),random_member(Word,B),append(Sentence1,[Word],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],Grammar2=v,findall(A,(member([A,"right"],BrDict012)),B),mind_read(Word,B),append(Sentence1,[Word],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],Grammar2=v,findall(A,(member([A,"right"],BrDict012)),B),random_member(Word,B),append(Sentence1,[Word],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitute2(Grammar1,BrDict012,Sentence1,Sentence2) :-Grammar1=[Grammar2|Grammar3],append(Sentence1,[Grammar2],Sentence3),substitute2(Grammar3,BrDict012,Sentence3,Sentence2).
substitutevarsA2(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2) :-Arguments=[Variable|Variables],((getvalue(Variable,Value,Vars1),Value=empty)->((append(Vars2,[Variable],Vars4)),(isvar(Variable)->append(FirstArgs1,[Variable],FirstArgs3);FirstArgs3=FirstArgs1));(getvalue(Variable,Value,Vars1),append(Vars2,[Value],Vars4)),FirstArgs3=FirstArgs1),        substitutevarsA2(Variables,Vars1,Vars4,Vars3,FirstArgs3,FirstArgs2).
substitutevarsA2(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2) :-Arguments=[Variable|Variables],((getvalue(Variable,Value,Vars1),Value=empty)->((append(Vars2,[Variable],Vars4)),(isvar(Variable)->append(FirstArgs1,[Variable],FirstArgs3);FirstArgs3=FirstArgs1));(getvalue(Variable,Value,Vars1),append(Vars2,[Value],Vars4)),FirstArgs3=FirstArgs1),        substitutevarsA2(Variables,Vars1,Vars4,Vars3,FirstArgs3,FirstArgs2),!.
substitutevarsA2(Arguments,Vars1,Vars2,Vars3,FirstArgs1,FirstArgs2) :-Arguments=[Variable|Variables],((getvalue(Variable,Value,Vars1),is_empty(Value))->((append(Vars2,[Variable],Vars4)),(isvar(Variable)->append(FirstArgs1,[Variable],FirstArgs3);FirstArgs3=FirstArgs1));(getvalue(Variable,Value,Vars1),append(Vars2,[Value],Vars4)),FirstArgs3=FirstArgs1),        substitutevarsA2(Variables,Vars1,Vars4,Vars3,FirstArgs3,FirstArgs2),!.
substitutevarsA2([],_Vars1,Vars2,Vars2,FirstArgs,FirstArgs).
substitutevarsA2([],_Vars1,Vars2,Vars2,FirstArgs,FirstArgs):-!.
substring(A,B):-tail(A,At),(listhead(A,B)->(true);(substring(At,B))).
substring(T,Before,Length,After,SS) :- string_chars(T,TC), %substring1(TC,Before,Length,After,SS).
substring([],B):-not((=(B,[]))),fail.
subterm_types_with_address(Heuristic, Term, Instances) :-sub_term_types_wa(Heuristic, Term, Instances).
subterm_with_address(Subterm, Term, Instances) :-sub_term_wa(Subterm, Term, Instances).
subtract1(A,A1,B,C) :- A=[D|E], process_subtract(D,D4), %foldr(string_concat,["a",_D1,"_",D2],D), (member(D4,A1)-> (delete(A1,D4,F), B=G); (append(B,[D],G),A1=F)), subtract1(E,F,G,C). process_subtract(D,D4) :- D=[N1, [[n, D0]|D01]], string_strings(D0,D3), append(["a"],D5,D3), append(_D6,D7,D5 ), append(["_"],D2,D7), foldr(atom_concat,D2,D41), D4=[N1, [[n, D41]|D01]],!.
subtract1(A,B,C,G) :- A=[D|E], (member(D,B)-> (delete(B,D,F), append(C,[D],H)); (F=B,C=H)), subtract1(E,F,H,G),!.subtract2(A,B,C) :- subtract2(A,B,[],C),!.
subtract1(A,B,G) :- B=[D|E], ((append(C2,D2,A),append([D],E2,D2),!)->true;A=E2),subtract1(E2,E,H),foldr(append,[C2,H],G).
subtract1(A,[B1|B2],E):-delete1(A,B1,[],D),subtract1(D,B2,E).
subtract1(C,[],C):-!.
subtract1(Options5,N41,Options451,Options45) :-Options5=[[N42,A,B]|Options51],not(member(N42,N41)),append(Options451,[[N42,A,B]],Options452),subtract1(Options51,N41,Options452,Options45).
subtract1(Options5,N41,Options451,Options45) :-Options5=[[N42,_,_]|Options51],member(N42,N41),subtract1(Options51,N41,Options451,Options45).
subtract2(A,B,C,G) :- A=[[D,D1]|E], (member([D,_],B)-> (delete(B,[D,_],F), append(C,[[D,D1]],H)); (F=B,C=H)), subtract2(E,F,H,G),!.*/subtract2(A,B,C) :- subtract2(A,B,[],C),!.
subtract2(A,B,C,G) :- A=[[D,D1]|E], (member([_,D1],B)-> (delete(B,[_,D1],F), append(C,[[D,D1]],H)); (F=B,C=H)), subtract2(E,F,H,G),!./*differentiate(A,B) :- differentiate(A,[],_,[],B),!.differentiate([],Corrs,Corrs,Diffs,Diffs) :- !.
subtract2(A,B,G) :- B=[D|E],  (D=[[n,comment]|_]-> A=C;%append(A,[D],G);%)(((append(C2,D2,A),append([D],E2,D2),!)->true;(C2=[],A=E2)),subtract2(E2,E,H),foldr(append,[C2,H],G)); delete(A,D,C)),subtract2(C,E,G),!.
subtract2(Options5,N41,Options451,Options45) :-Options5=[[N42,A,B]|Options51],not(member(A,N41)),append(Options451,[[N42,A,B]],Options452),subtract2(Options51,N41,Options452,Options45).
subtract2(Options5,N41,Options451,Options45) :-Options5=[[_,N42,_]|Options51],member(N42,N41),subtract2(Options51,N41,Options451,Options45).
subtract_civ(M31,M32,A1,A2) :- M31=[[C,D]|E], (member([_,D],M32)-> A1=A3; append(A1,[C]%[[C,D]] ,A3)), subtract_civ(E,M32,A3,A2).find_combos1_vintage(Insertions,Deletions,Permanent_insertions,Combos) :- findall1([i,In],member(In,Insertions),In1), findall1([d,De],member(De,Deletions),De1), findall1([p,Pe],member(Pe,Permanent_insertions),Pe1), foldr(append,[In1,De1,Pe1],Ops), find_combos2_vintage(Ops,[],Combos).
suggestions(Direction,Dictionary2,State2,Word2,Word21,Suggestions1,Suggestions2) :-reverse(Word2,Word22),Word22=[_Letter1|_Rest],(%Direction=dtrue->(S1=State2,S2=State3);(S1=State3,S2=State2)),member([S1,Letter2,S2],Dictionary2),append(Word2,[Letter2],Word4),suggestions(Direction,Dictionary2,State3,Word4,Word21,Suggestions1,Suggestions2).
suggestions(Direction,Dictionary2,State2,Word2,Word21,Suggestions1,Suggestions2) :-reverse(Word2,Word22),Word22=[_Letter1|_Rest],(%Direction=dtrue->(S1=State2,S2=State3);(S1=State3,S2=State2)),member([S1,Letter2,S2],Dictionary2),append(Word2,[Letter2],Word4),suggestions(Direction,Dictionary2,State3,Word4,Word21,Suggestions1,Suggestions2).algorithm_decision_tree([""],File_list,File_list,_String_dict,_Dictionary,_Reversed_dictionary2) :- !.
sum(A,B,C) :- C is A+B.
sum(A,[],B,C):-C is A+B,!.sum(A,B,C,D):-B=[E|F],G is A+C,sum(E,F,G,D).%%C is A+B.
sum(S0,S1,S2) :-S0=[S3|S4],S5 is S1+S3,sum(S4,S5,S2).
sum(S0,S1,S2) :-S0=[S3|S4],S5 is S1+S3,sum(S4,S5,S2),!.
sum(S0,S1,S2) :-S0=[S3|S4],S5 is S1+S3,sum(S4,S5,S2).mean(Sum,Mean) :-Mean is Sum/2.
sum([],S,S):-!.
sum_marks(A,B) :- sum(A,B).%average_marks([50,60,70,80],A).
swap1(A,B) :- string_codes("'",[A]),string_codes(" ",[B]),!.swap1(A,A) :- !.
switch(0).
symbol_1_lp2p("->","->").
symmetrical_member([A,B,C],D) :-member([B,A,C],D).
t2ab(N1,Filex1,Stringx1,M1,Auto) :-t2ab(N1,Filex1,Stringx1,M1,0,Auto).
t2ab(N1,Filex1,Stringx1,M1,Words_to_read,Auto) :-retractall(auto(_)),assertz(auto(Auto)),retractall(complete_display(_)),assertz(complete_display(false)),retractall(words_to_read(_)),assertz(words_to_read(Words_to_read)),((number(N1),N=N1)->true;(N1=u,N=1)),((Filex1=u,Filex="../Text-to-Breasonings/file.txt")->true;Filex=Filex1),((number(M1),M=M1)->true;M=all), %% If m1 is undefined or all then m=allt2ab_prep(List1,BrDict03,AlgDict_x,AlgDict,Filex,Stringx1,M),retractall(t2ab_brDict03(_)),assertz(t2ab_brDict03(BrDict03)),retractall(t2ab_algDict_x(_)),assertz(t2ab_algDict_x(AlgDict_x)),retractall(t2ab_algDict(_)),assertz(t2ab_algDict(AlgDict)),retractall(t2ab_algString(_)),assertz(t2ab_algString([])),t2ab_br2(List1,N),%,BrDict03,BrDict2,AlgDict_x,AlgDict_x2,AlgDict,AlgDict2,N,[],AlgString),t2ab_brDict031(BrDict2),t2ab_algDict_x1(AlgDict_x2),t2ab_algDict1(AlgDict2),t2ab_algString1(AlgString),%writeln("Press <return> to save work:"),read_string(user_input,"\n","\r",_,_),sort(BrDict2,BrDict3),(BrDict03=BrDict3->true;(open_s("../Text-to-Breasonings/brdict1.txt",write,Stream),%%string_codes(BrDict3),write(Stream,BrDict3),close(Stream))),sort(AlgDict_x2,AlgDict_x3),(AlgDict_x=AlgDict_x3->true;(open_s("../t2ab/algdict1.txt",write,Stream2),%%string_codes(BrDict3),term_to_atom(AlgDict_x3,AlgDict_x31),write(Stream2,AlgDict_x31), close(Stream2))), sort(AlgDict2,AlgDict3),(AlgDict=AlgDict3->true;(open_s("../t2ab/algdict2.txt",write,Stream3),term_to_atom(AlgDict3,AlgDict31),%%string_codes(BrDict3),write(Stream3,AlgDict31), close(Stream3))), length(List1,List1_length_a), Dividend_a is ceiling(List1_length_a/250), Dividend_b is Dividend_a*3, % for graciously giving texttobr2_a(Dividend_b,meditation), texttobr2_a(Dividend_b,medicine), texttobr2_a(Dividend_b,pedagogy),  flatten(AlgString,AlgString1), foldr(string_concat,AlgString1,"",AlgString2),%writeln1(AlgString2),texttobr2(u,u,AlgString2,u,[auto,Auto]), !.
t2ab_algDict1(BrDict03t2) :- t2ab_algDict(BrDict03t2).
t2ab_algDict1(BrDict03t2) :- t2ab_algDict(BrDict03t2).t2ab_algString1(BrDict03t2) :- t2ab_algString(BrDict03t2).
t2ab_algDict_x1(BrDict03t2) :- t2ab_algDict_x(BrDict03t2).
t2ab_algString1(BrDict03t2) :- t2ab_algString(BrDict03t2).
t2ab_brDict031(BrDict2) :- t2ab_brDict03(BrDict2).
t2ab_brDict031(BrDict2) :- t2ab_brDict03(BrDict2).t2ab_algDict_x1(BrDict03t2) :- t2ab_algDict_x(BrDict03t2).
t2alg3(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish) :-t2alg3(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,0).
t2on([Word3|Words],T2ON_Dict,T2ON_Dict2,A11,A12) :-%downcase_atom(Word, Word2), atom_string(Word2,Word3),words_to_read(WR1),(WR1>0->(writeln(WR1),write(Word3),t2on2(3),nl,sleep(0.12),WR2 is WR1-1,retractall(words_to_read(_)),assertz(words_to_read(WR2)));true),%/**member([Word3,X,Y,Z],T2ON_Dict4) -> %% This feature is a bug because words in t2on_dict2 shouldn't necessarily be the words in t2on_dict1%append(A11,[[Word3,""]],T2ON_Dict3), T2ON_Dict3t=T2ON_Dict4,%%t2on_(Words,T2ON_Dict3,T2ON_Dict2,T2ON_Dict3t,T2ON_Dict5))%%;%%(**/%%(member([Word3,X,Y,Z],T2ON_Dict4) -> %% This feature is a bug because words in t2on_dict1 should correspond to those in t2on_dict2%%(atom_concat("The  for ", Word3, P1),%%atom_concat(P1, " is defined.  Enter object name (without spaces), if different for ", Prompt));%Prompt="Enter object name (without spaces), if different for "),%%writeln([word3,Word3]),%trace,(member([Word3,String4],T2ON_Dict)-> T2ON_Dict3=T2ON_Dict;((repeat,write("Enter object name (without spaces), if different for "), writeln(Word3),read_string(user_input, "\n", "\r", _End2, String2),split_string(String2, "", " ", String3),String3=[String4]),append(T2ON_Dict,[[Word3,String4]],T2ON_Dict3)%t2on(1,u,String4,1))),append(A11,[[Word3,String4]],A13),%%*t2on_th(Word3,_T2ON_th),%concat_list(["[",Word3,",",String4,"], "],Notification1),%write(Notification1),%(String4=""->String5=Word3;String5=String4),%downcase_atom(String5, String52), atom_string(String52,String53),t2on(Words,T2ON_Dict3,T2ON_Dict2,A13,A12).
t2on2(N1,Filex1,Stringx1,M1,Words_to_read) :-retractall(complete_display(_)),assertz(complete_display(false)),retractall(words_to_read(_)),assertz(words_to_read(Words_to_read)),((number(N1),N=N1)->true;(N1=u,N=1)),((Filex1=u,Filex="../Text-to-Object-Name/file.txt")->true;Filex=Filex1),((number(M1),M=M1)->true;M=all), %% If m1 is undefined or all then m=allprep(List1,T2ON_Dict03,Filex,Stringx1,M),t2on_2(List1,T2ON_Dict03,T2ON_Dict2,[],A12,N),sort(T2ON_Dict2,T2ON_Dict3),(T2ON_Dict03=T2ON_Dict3->true;(save_file_s("../Lucian-Academy-Data/Text-to-Object-Name/t2on_dict1.txt",T2ON_Dict3))),/*open_file_s("../Lucian-Academy-Data/Text-to-Object-Name/t2on_end_text.txt",TET), length(List1,List1_length_a), Dividend_a is ceiling(List1_length_a/250), Dividend_b is Dividend_a*3, % for graciously givingfindall(_,(member([_,TET_T],TET),t2on(Dividend_b,string,TET_T,u)),_), */ findall(B,(member([C,D],A12),(D=""->B=C;B=D)),F),sort(F,G),findall([L,J],(member(J,G),findall(J,member(J,F),K),length(K,L)),M11),sort(M11,M2), writeln1(M2),  !.
t2on_2(List1,T2ON_Dict03,T2ON_Dict2,A11,A12,N1) :-t2on(List1,T2ON_Dict03,T2ON_Dict21,A11,A13),N2 is N1-1,t2on_2(List1,T2ON_Dict21,T2ON_Dict2,A13,A12,N2),!.
t2on_repeating_text(N1):-phrase_from_file_s(string(Dict), "../Lucian-Academy-Data/Text-to-Object-Name/t2on_repeating_text.txt"),string_codes(Dict_string,Dict),term_to_atom(Dict_term,Dict_string),Dict_term=[N,String],%SepandPad="&#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\\"!'0123456789",%split_string(String,SepandPad,SepandPad,List),numbers(N1,1,[],N1_list),findall(_,(member(_N11,N1_list),t2on(N,string,String,u)),_),!.
t2s([T1|T2b],S1,S2,SS) :-S1=[],(T1=[_,A1,A2]->(det(A1,DA1),det(A2,DA2),foldr(string_concat,["I converted the value from ",DA1," ",A1," to ",DA2," ",A2,""],S3));(T1=[_,A1]->(det(A1,DA1),foldr(string_concat,["I checked the value was ",DA1," ",A1,""],S3)))),append(S1,[S3],S4),t2s(T2b,S4,S2,SS).
t2s([],S,S,_).
t_or_empty([]).
t_or_empty({[t,_]}).
taste(Object,Method,Items1) :- object(Object,Items2), traverse(Method,Items2,Items1).
term_to_brackets(A,B,split=Split) :-%trace, (is_list(A)-> ((A=[Word,_Args],type_s2a1(Word))-> (term_to_brackets2([A],[],[B],split=Split) %single_results(SR1), %append(SR1,[A],SR2), %retractall(single_results(_)), %assertz(single_results(SR2)) ); (term_to_brackets2(A,[],B,split=Split))); A=B),!.
term_to_list1(T,L1,L2) :-((T=[T1|T2],not(only_item1(T)));(T=[Type,T3],type_s2a1(Type),T=T1,T2=[])),%/*((T1=[Type,T3],type_s2a1(Type),join_san(T3,Type,L21),L31=[L21],append(L1,L31,L3));(T1=[r,[T3]],(foldr(append,T3,L31),append(L1,L31,L3));/*numbers(9,0,[],Ns),member(N,Ns),length(L,N),append([T3],L,L4),maplist(=(_),L4),append(L1,L4,L2));*/%(T1=[nd,T3s]->%(member(T3,T3s),%foldr(append,T3,T31),%append(L1,T31,L3));(T1=[],append(L1,[[]],L3);((is_list(T1),term_to_list1(T1,[],L32)),(L31=[L32],no_rt(L32),append(L1,L31,L3));(no_rt(T1),append(L1,[T1],L3)))))),term_to_list1(T2,L3,L2).
term_to_list2(T,L1,L2) :-((T=[T1|T2],not(only_item1(T)));(T=[Type,T3],type_s2a1(Type),T=T1,T2=[])),(T1=[Type,T3],type_s2a1(Type),(join_san(T3,Type,L31),append(L1,[L31],L3),term_to_list2(T2,[],L21),append(L3,L21,L22),append(L1,L22,L2),no_rt(L2));(T1=[r,[T3]],(%foldr(append,T3,T31),numbers(9,0,[],Ns),member(N,Ns),length(L,N),append([T3],L,L4),maplist(=(_),L4),append(L1,L4,L3),term_to_list2(T2,L3,L2));%(T1=[nd,T3s]->%(member(T3,T3s),%foldr(append,T3,T31),%append(L1,T31,L3));((T1=[],append(L1,[[]],L3),term_to_list2(T2,L3,L2));((is_list(T1),term_to_list2(T1,[],L32)),(L31=[L32],no_rt(L32),append(L1,L31,L3),term_to_list2(T2,L3,L2));(no_rt(T1),append(L1,[T1],L3),term_to_list2(T2,L3,L2)))))).
term_to_list2([],L1,L1) :-!.
term_to_numbers(term_to_numbers1,S,C1,C2,N1,N2) :- S=[S1|S2], %trace, (member([S1,N],C1)-> (%C1=C3, %N=N2A); get_token_number(_N1,S1,C1,_N,N2A), append(C1,[[S1,N2A]],C3)); (term_to_numbers1(N2A1), retractall(term_to_numbers1(_)), N4 is N2A1+1, assertz(term_to_numbers1(N4)), number_string(N2A1,N2AA), append(C1,[[S1,N2AA]],C3), %N2AA=N2A foldr(string_concat,[N2AA,".",0,"x"],N2A) )), %trace, %(member(N2A,N1)->(%trace, %get_token_number(N1,N2A,N2A,N2A2));N2A2=N2A), append(N1,[N2A],N3), term_to_numbers(term_to_numbers1,S2,C3,C2,N3,N2),!.
terminal(Item1) :-not(code(Item1)),([Item2]=Item1->true;Item2=Item1),(variable_name(Item2)->true;string(Item2)),!.
terminal([]) :- !.
terminal([]) :- !.terminal(Item1) :-not(code(Item1)),((not(variable_name(Item1)),is_list(Item1))->(findall(y,(member(Item3,Item1),terminal2(Item3)),Item4),length(Item1,L),length(Item4,L));terminal2(Item1)),!.terminal2(Item):-(variable_name(Item)->true;(string(Item)->true;(number(Item)->true;(atom(Item))))).code(Item) :-get_lang_word("n",Dbw_n1),Dbw_n1=Dbw_n,get_lang_word("code",Dbw_code),(Item=[[Dbw_n,Dbw_code]|_Rest]->true;Item=[Dbw_n,Dbw_code]),!.
test(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test(NTotal3,Query,Functions,Result),((international_interpret([lang,"en"],Debug,Query,Functions,Result1),%writeln1([result1,Result1]),Result=Result1)->(Score3 is Score1+1,writeln0([test,NTotal3,passed]));(Score3=Score1,writeln0([test,NTotal3,failed]))),writeln0(""),test(Debug,NTotal3,NTotal2,Score3,Score2),!.
test(_Debug,NTotal,NTotal,Score,Score) :- NTotal=105, !.test(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test(NTotal3,Query,Functions,Result),(international_interpret([lang,"en"],Debug,Query,Functions,Result)%%writeln1(Result2->(Score3 is Score1+1,writeln([test,NTotal3,passed]));(Score3=Score1,writeln([test,NTotal3,failed]))),writeln(""),test(Debug,NTotal3,NTotal2,Score3,Score2),!.
test(_Debug,NTotal,NTotal,Score,Score) :- NTotal=251, !.
test1([[[n,test],":-",[[[n,findall],[[[v,x1],[v,y1],[v,s]],[[[n,member],[[v,y1],[1,2]]],[[n,member],[[v,x1],["a","b"]]],[[n,writeln],["Enter cell"]],[[n,writeln],[[v,y1]]],[[n,writeln],[[v,x1]]],[[n,read_string],[[v,s]]]],[v,z]]],[[n,findall],[["<tr>",[v,z1],"</tr>"],[[[n,member],[[v,y2],[1,2]]],[[n,findall],[["<td>",[v,s2],"</td>"],[[[n,member],[[v,x2],["a","b"]]],[[n,member],[[[v,x2],[v,y2],[v,s2]],[v,z]]]],[v,z1]]]],[v,z2]]],[[n,equals4],[[v,z3],["<table>",[v,z2],"</table>"]]],[[n,flatten1],[[v,z3],[v,z4]]],[[n,concat_list],[[v,z4],[v,z5]]],[[n,writeln],[[v,z5]]]]],[[n,flatten1],[[v,a],[v,b]],":-",[[[n,flatten2],[[v,a],[],[v,b]]]]],[[n,flatten2],[[],[v,b],[v,b]]],[[n,flatten2],[[v,a],[v,b],[v,c]],":-",[[[n,"->"],[[[n,not],[[[n,"->"],[[[n,equals4],[[v,a],[[v,a1],"|",[v,a2]]]],[[n,true]],[[n,equals4],[[v,a],[]]]]]]],[[n,append],[[v,b],[[v,a]],[v,c]]],[[[n,equals4],[[v,a],[[v,d],"|",[v,e]]]],[[n,flatten2],[[v,d],[v,b],[v,f]]],[[n,flatten2],[[v,e],[v,f],[v,c]]]]]]]],[[n,concat_list],[[v,a1],[v,b]],":-",[[[n,equals4],[[v,a1],[[v,a],"|",[v,list]]]],[[n,concat_list],[[v,a],[v,list],[v,b]]],[[n,cut]]]],[[n,concat_list],[[v,a],[],[v,a]],":-",[[[n,cut]]]],[[n,concat_list],[[v,a],[v,list],[v,b]],":-",[[[n,equals4],[[v,list],[[v,item],"|",[v,items]]]],[[n,stringconcat],[[v,a],[v,item],[v,c]]],[[n,concat_list],[[v,c],[v,items],[v,b]]]]]]).
test2:-T=false,b(T).
test2:-a(1,T),b(T).
test2a :- findall(_,test2,_).
test:-read_string(A),writeln(A).
test_all0(Test,Arity,Lang,Debug,NTotal1,NTotal2,Score1,Score2,NTotal4) :-NTotal3 is NTotal1+1,test_all000(Test,Debug,NTotal3,Score1,Score3,Lang),writeln(""),test_all0(Test,Arity,Lang,Debug,NTotal3,NTotal2,Score3,Score2,NTotal4),!.
test_all0(Test,Arity,Lang,Debug,NTotal1,NTotal2,Score1,Score2,NTotal4) :-NTotal3 is NTotal1+1,test_all000(Test,Debug,NTotal3,Score1,Score3,Lang),writeln0(""),test_all0(Test,Arity,Lang,Debug,NTotal3,NTotal2,Score3,Score2,NTotal4),!.
test_all0(_Test,_Arity,_Lang,_Debug,NTotal,NTotal,Score,Score,NTotal) :- %NTotal=105, !.
test_all_bt0(Test,Arity,Lang,Debug,NTotal1,NTotal2,Score1,Score2,NTotal4) :-NTotal3 is NTotal1+1,test_all_bt000(Test,Debug,NTotal3,Score1,Score3,Lang),writeln(""),test_all_bt0(Test,Arity,Lang,Debug,NTotal3,NTotal2,Score3,Score2,NTotal4),!.
test_all_bt0(Test,Arity,Lang,Debug,NTotal1,NTotal2,Score1,Score2,NTotal4) :-NTotal3 is NTotal1+1,test_all_bt000(Test,Debug,NTotal3,Score1,Score3,Lang),writeln0(""),test_all_bt0(Test,Arity,Lang,Debug,NTotal3,NTotal2,Score3,Score2,NTotal4),!.
test_all_bt0(_Test,_Arity,_Lang,_Debug,NTotal,NTotal,Score,Score,NTotal) :- %NTotal=105, !.
test_open_types(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test_open_types_cases(NTotal3,Query,Types,Modes,Functions),((international_interpret([lang,"en"],Debug,Query,Types,Modes,Functions,Result),not(Result=[]))->(Score3 is Score1+1,writeln0([test_open_types,NTotal3,result,Result]),writeln0([test_open_types,NTotal3,passed]));(Score3=Score1,writeln0([test_open_types,NTotal3,failed]))),writeln0(""),test_open_types(Debug,NTotal3,NTotal2,Score3,Score2),!.
test_open_types(_Debug,NTotal,NTotal,Score,Score) :- NTotal=3, !.test_open_types(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test_open_types_cases(NTotal3,Query,Types,Modes,Functions),((international_interpret([lang,"en"],Debug,Query,Types,Modes,Functions,Result),not(Result=[]))->(Score3 is Score1+1,writeln([test_open_types,NTotal3,result,Result]),writeln([test_open_types,NTotal3,passed]));(Score3=Score1,writeln([test_open_types,NTotal3,failed]))),writeln(""),test_open_types(Debug,NTotal3,NTotal2,Score3,Score2),!.
test_open_types(_Debug,NTotal,NTotal,Score,Score) :- NTotal=35, !.
test_pl(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test_pl(NTotal3,Query,Functions,Result),p2lpconverter_command([string,Query],Query1),p2lpconverter([string,Functions],Functions1),p2lpconverter_term([string,Result],Result2),((international_interpret([lang,"en"],Debug,Query1,Functions1,Result1),%writeln1([result1,Result1]),Result2=Result1)->(Score3 is Score1+1,writeln0([test_pl,NTotal3,passed]));(Score3=Score1,writeln0([test_pl,NTotal3,failed]))),writeln0(""),test_pl(Debug,NTotal3,NTotal2,Score3,Score2),!.
test_pl(_Debug,NTotal,NTotal,Score,Score) :- NTotal=1, !.
test_run_all(Debug,NTotal1,NTotal2,Score1,Score2) :-%% Finds the alg given i/oNTotal3 is NTotal1+1,functions(Functions),test_run_all(NTotal3,Query,Function1,Result),((findall([Function,R],(member(Function,Functions),international_interpret([lang,"en"],Debug,Query,Function,R)),Rs),member([Function1,Result],Rs))%%writeln1(Result2->(Score3 is Score1+1,writeln([test_run_all,NTotal3,passed]));(Score3=Score1,writeln([test_run_all,NTotal3,failed]))),writeln(""),test_run_all(Debug,NTotal3,NTotal2,Score3,Score2),!.
test_run_all(Debug,NTotal1,NTotal2,Score1,Score2) :-%% Finds the alg given i/oNTotal3 is NTotal1+1,functions(Functions),test_run_all(NTotal3,Query,Function1,Result),((findall([Function,R],(member(Function,Functions),international_interpret([lang,"en"],Debug,Query,Function,R)),Rs),member([Function1,Result],Rs))%%writeln1(Result2->(Score3 is Score1+1,writeln0([test_run_all,NTotal3,passed]));(Score3=Score1,writeln0([test_run_all,NTotal3,failed]))),writeln0(""),test_run_all(Debug,NTotal3,NTotal2,Score3,Score2),!.
test_run_all(_Debug,NTotal,NTotal,Score,Score) :- NTotal=1, !.
test_types(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test_types_cases(NTotal3,Query,Types,Modes,Functions,Result),(international_interpret([lang,"en"],Debug,Query,Types,Modes,Functions,Result)->(Score3 is Score1+1,writeln([test_types,NTotal3,passed]));(Score3=Score1,writeln([test_types,NTotal3,failed]))),writeln(""),test_types(Debug,NTotal3,NTotal2,Score3,Score2),!.
test_types(Debug,NTotal1,NTotal2,Score1,Score2) :-NTotal3 is NTotal1+1,test_types_cases(NTotal3,Query,Types,Modes,Functions,Result),(international_interpret([lang,"en"],Debug,Query,Types,Modes,Functions,Result)->(Score3 is Score1+1,writeln0([test_types,NTotal3,passed]));(Score3=Score1,writeln0([test_types,NTotal3,failed]))),writeln0(""),test_types(Debug,NTotal3,NTotal2,Score3,Score2),!.
test_types(_Debug,NTotal,NTotal,Score,Score) :- NTotal=10, !.
test_types(_Debug,NTotal,NTotal,Score,Score) :- NTotal=70, !.
testopen(Debug,NTotal1,NTotal2) :-NTotal3 is NTotal1+1,testopen_cases(NTotal3,Query,Functions),((international_interpret([lang,"en"],Debug,Query,Functions,Result),not(Result=[]))->(writeln([test,NTotal3,result,Result]),writeln([test,NTotal3,passed]));(writeln([test,NTotal3,failed]))),writeln(""),testopen(Debug,NTotal3,NTotal2),!.
testopen(Debug,NTotal1,NTotal2) :-NTotal3 is NTotal1+1,testopen_cases(NTotal3,Query,Functions),((international_interpret([lang,"en"],Debug,Query,Functions,Result),not(Result=[]))->(writeln0([test,NTotal3,result,Result]),writeln0([test,NTotal3,passed]));(writeln0([test,NTotal3,failed]))),writeln0(""),testopen(Debug,NTotal3,NTotal2),!.
testopen(_Debug,NTotal,NTotal) :- NTotal=2, !.
testopen(_Debug,NTotal,NTotal) :- NTotal=8, !.
text(2,"w x y z").
text(3,"a b x").
text(4,"j k m").
text(5,"a j").co_occurring_terms(Ns) :- findall([N1,N2],(text(N1,A),text(N2,B),split_string(A," "," ",A1),split_string(B," "," ",B1),not(N1=N2),intersection(A1,B1,C),not(C=[])),Ns1),foldr(del_reflections,Ns1,[],Ns).
text2aphors([[S1,D1]|O]) :-writeln("What is the main shape in the object called?"),read_string(user_input,"\n","\n",_,S1),dim(D1),more_objects(O).
texttobr2 :-br1([[a,1,1.5,0],[about,1,1,0],[ache,1,0,0],[after,1,1,0],[all,1,1.5,0],[an,1,1.5,0],[and,1,1,0],[appearances,5,0,5],[apple,5,5,5],[are,1,1,0],[area,5,5,0],[argument,1,1.5,0],[as,1,1,0],[asanas,180,50,1],[at,1,1,0],[ate,15,2,1],[avoid,1,1,0],[b,1,1,1],[bacteria,2,1,1],[based,5,5,1],[be,50,30,180],[before,1,1,0],[being,50,30,180],[binding,1,1,0],[blocking,1,1,1],[bolt,2,1,1],[box,1,1,1],[breakfast,10,10,1],[breasoned,5,5,5],[breasoning,5,5,5],[breasonings,5,5,5],[by,1,1,0],[chapter,10,15,1],[clear,1,1,0],[colds,1,1,1],[comfort,180,50,30],[comfortable,50,50,100],[complexes,1,1,1],[conception,50,14,8],[connected,1,1,0],[correctness,1,1,0],[day,10,10,10],[depression,1,1,0],[details,1,1,1],[did,1,1,0],[do,50,30,180],[dotted,1,1,0],[down,1,1,0],[drinking,5,5,5],[during,1,1.5,0],[each,1,1,0],[earned,1,1.5,0],[education,50,30,180],[effects,1,1.5,0],[elderberries,1,1,1],[ensure,1,1,0],[excess,1,1,1],[exercises,10,10,1],[f,5,5,5],[feeling,1,1,0],[felt,1,1,0],[first,1,1.5,0],[flu,1,1,0],[food,2,1,1],[for,1,1,0],[from,1,1,0],[fruits,1,1,1],[function,1,1.5,0],[gaffer,10,10,1],[gave,1,1,1],[glasses,15,11,3],[god,50,30,180],[grade,1,1.5,0],[grains,1,1,1],[had,1,1,0],[hallucinogenic,1,1,0],[happiness,1,1,0],[happy,1,1,0],[have,5,5,5],[head,15,20,23],[headache,1,1,0],[headaches,1,1,0],[health,50,30,180],[healthy,50,30,180],[help,5,5,0],[helped,50,30,180],[high,1,1.5,0],[hills,5,5,2],[honey,10,10,10],[i,50,30,180],[imagery,5,5,0],[in,1,1,0],[incompatibility,1,1,0],[interpretation,20,30,0],[it,1,1,0],[keep,1,1,0],[laughter,1,1.5,0],[maintain,1,1,0],[maintaining,1,1,0],[master,50,30,180],[mind,3,4,4],[minutes,20,30,0],[mistake,1,1,0],[muscle,1,1,1],[muscles,1,1,1],[music,1,1,0],[must,1,1,0],[my,50,30,180],[namaskar,15,10,23],[neck,15,15,10],[next,1,1,0],[nietzsche,50,30,180],[no,1,1,0],[noticed,50,30,180],[nut,1,1,0],[nuts,1,1,1],[of,1,1,0],[off,1,1.5,0],[on,1,1,0],[one,1,1.5,0],[organs,1,1,1],[out,1,1,0],[over,1,1,0],[part,1,1,1],[peace,1,1.5,0],[perfect,1,1.5,0],[performed,50,30,180],[performing,50,30,250],[philosophy,10,20,1],[physiology,50,30,180],[pimple,1,1,0],[pm,5,5,5],[poem,1,1.5,0],[positive,1,1,0],[pot,5,5,10],[prayer,5,5,0],[prepared,1,1,0],[prevent,1,1,0],[prevented,1,1,0],[preventing,1,1,0],[prevention,1,1,0],[problems,1,1.5,0],[product,1,150,1],[products,5,5,5],[psychiatry,50,30,180],[psychology,2,2,0],[quality,1,1.5,0],[quantum,1,1,0],[read,15,1,20],[relax,180,50,30],[relaxed,180,50,30],[remain,1,1.5,0],[require,1,1,0],[room,500,400,300],[s,1,1,0],[safe,1,1.5,0],[sales,1,1.5,0],[same,1,1,0],[schizophrenia,1,1,0],[second,1,1.5,0],[see,1,0,1],[seek,1,1,0],[sell,5,3,0],[sets,5,1,0],[sex,1,1.5,0],[short,1,1,0],[single,1,1.5,0],[sites,20,0,30],[sitting,50,70,150],[sized,30,1,0],[skin,1,1,0],[sleep,180,50,30],[slices,2,2,2],[so,1,1,0],[societal,50,30,180],[some,1,1,0],[spine,1,1,10],[spiritual,50,30,180],[state,1,1.5,0],[stated,20,30,0],[stating,50,30,180],[status,1,1.5,0],[stop,5,1,15],[straight,1,1,0],[strawberry,1,1,1],[structure,1,1,1],[studied,50,30,180],[study,100,50,100],[studying,50,30,180],[subject,50,30,180],[successful,1,1.5,0],[surya,1,1.5,0],[sutra,5,1.5,0],[table,7,5,0],[tape,10,10,1],[task,15,2.5,0],[technique,1,1,0],[test,20,20,0],[text,20,30,0],[that,1,1,0],[the,1,1,0],[them,50,30,180],[then,1,1,0],[they,50,30,180],[thinking,1,1.5,0],[third,1,1.5,0],[this,1,1,0],[thoughts,1,1,0],[through,1,1,0],[tied,1,1,0],[time,1,1.5,0],[to,1,1,0],[together,1,1,0],[touch,1,1,0],[train,1,1,1],[trains,50,30,180],[travel,10,3,0],[treating,20,15,3],[turn,1,1,0],[two,1,1.5,0],[university,100,75,3],[unwanted,1,1,0],[up,1,1,0],[upasana,100,75,100],[used,1,1,0],[using,1,1,0],[var,1,1,1],[vegetables,5,5,5],[videos,5,0,3],[view,5,5,5],[virality,1,1,0],[viruses,1,1,2],[vitamin,1,1,1],[walks,100,500,0],[wanted,15,20,3],[warm,1,1,0],[was,1,1,0],[water,5,5,5],[way,1,1,0],[ways,50,100,0],[well,50,30,180],[where,1,1,0],[whole,1,1,1],[with,1,1,0],[without,1,1,0],[words,5,7,1],[write,15,1,1],[writing,5,5,0],[wrote,15,1,1],[years,3,1,0]]).
texttobr2 :-br1([[a,1,1.5,0],[about,1,1,0],[ache,1,0,0],[after,1,1,0],[all,1,1.5,0],[an,1,1.5,0],[and,1,1,0],[appearances,5,0,5],[apple,5,5,5],[are,1,1,0],[area,5,5,0],[argument,1,1.5,0],[as,1,1,0],[asanas,180,50,1],[at,1,1,0],[ate,15,2,1],[avoid,1,1,0],[b,1,1,1],[bacteria,2,1,1],[based,5,5,1],[be,50,30,180],[before,1,1,0],[being,50,30,180],[binding,1,1,0],[blocking,1,1,1],[bolt,2,1,1],[box,1,1,1],[breakfast,10,10,1],[breasoned,5,5,5],[breasoning,5,5,5],[breasonings,5,5,5],[by,1,1,0],[chapter,10,15,1],[clear,1,1,0],[colds,1,1,1],[comfort,180,50,30],[comfortable,50,50,100],[complexes,1,1,1],[conception,50,14,8],[connected,1,1,0],[correctness,1,1,0],[day,10,10,10],[depression,1,1,0],[details,1,1,1],[did,1,1,0],[do,50,30,180],[dotted,1,1,0],[down,1,1,0],[drinking,5,5,5],[during,1,1.5,0],[each,1,1,0],[earned,1,1.5,0],[education,50,30,180],[effects,1,1.5,0],[elderberries,1,1,1],[ensure,1,1,0],[excess,1,1,1],[exercises,10,10,1],[f,5,5,5],[feeling,1,1,0],[felt,1,1,0],[first,1,1.5,0],[flu,1,1,0],[food,2,1,1],[for,1,1,0],[from,1,1,0],[fruits,1,1,1],[function,1,1.5,0],[gaffer,10,10,1],[gave,1,1,1],[glasses,15,11,3],[god,50,30,180],[grade,1,1.5,0],[grains,1,1,1],[had,1,1,0],[hallucinogenic,1,1,0],[happiness,1,1,0],[happy,1,1,0],[have,5,5,5],[head,15,20,23],[headache,1,1,0],[headaches,1,1,0],[health,50,30,180],[healthy,50,30,180],[help,5,5,0],[helped,50,30,180],[high,1,1.5,0],[hills,5,5,2],[honey,10,10,10],[i,50,30,180],[imagery,5,5,0],[in,1,1,0],[incompatibility,1,1,0],[interpretation,20,30,0],[it,1,1,0],[keep,1,1,0],[laughter,1,1.5,0],[maintain,1,1,0],[maintaining,1,1,0],[master,50,30,180],[mind,3,4,4],[minutes,20,30,0],[mistake,1,1,0],[muscle,1,1,1],[muscles,1,1,1],[music,1,1,0],[must,1,1,0],[my,50,30,180],[namaskar,15,10,23],[neck,15,15,10],[next,1,1,0],[nietzsche,50,30,180],[no,1,1,0],[noticed,50,30,180],[nut,1,1,0],[nuts,1,1,1],[of,1,1,0],[off,1,1.5,0],[on,1,1,0],[one,1,1.5,0],[organs,1,1,1],[out,1,1,0],[over,1,1,0],[part,1,1,1],[peace,1,1.5,0],[perfect,1,1.5,0],[performed,50,30,180],[performing,50,30,250],[philosophy,10,20,1],[physiology,50,30,180],[pimple,1,1,0],[pm,5,5,5],[poem,1,1.5,0],[positive,1,1,0],[pot,5,5,10],[prayer,5,5,0],[prepared,1,1,0],[prevent,1,1,0],[prevented,1,1,0],[preventing,1,1,0],[prevention,1,1,0],[problems,1,1.5,0],[product,1,150,1],[products,5,5,5],[psychiatry,50,30,180],[psychology,2,2,0],[quality,1,1.5,0],[quantum,1,1,0],[read,15,1,20],[relax,180,50,30],[relaxed,180,50,30],[remain,1,1.5,0],[require,1,1,0],[room,500,400,300],[s,1,1,0],[safe,1,1.5,0],[sales,1,1.5,0],[same,1,1,0],[schizophrenia,1,1,0],[second,1,1.5,0],[see,1,0,1],[seek,1,1,0],[sell,5,3,0],[sets,5,1,0],[sex,1,1.5,0],[short,1,1,0],[single,1,1.5,0],[sites,20,0,30],[sitting,50,70,150],[sized,30,1,0],[skin,1,1,0],[sleep,180,50,30],[slices,2,2,2],[so,1,1,0],[societal,50,30,180],[some,1,1,0],[spine,1,1,10],[spiritual,50,30,180],[state,1,1.5,0],[stated,20,30,0],[stating,50,30,180],[status,1,1.5,0],[stop,5,1,15],[straight,1,1,0],[strawberry,1,1,1],[structure,1,1,1],[studied,50,30,180],[study,100,50,100],[studying,50,30,180],[subject,50,30,180],[successful,1,1.5,0],[surya,1,1.5,0],[sutra,5,1.5,0],[table,7,5,0],[tape,10,10,1],[task,15,2.5,0],[technique,1,1,0],[test,20,20,0],[text,20,30,0],[that,1,1,0],[the,1,1,0],[them,50,30,180],[then,1,1,0],[they,50,30,180],[thinking,1,1.5,0],[third,1,1.5,0],[this,1,1,0],[thoughts,1,1,0],[through,1,1,0],[tied,1,1,0],[time,1,1.5,0],[to,1,1,0],[together,1,1,0],[touch,1,1,0],[train,1,1,1],[trains,50,30,180],[travel,10,3,0],[treating,20,15,3],[turn,1,1,0],[two,1,1.5,0],[university,100,75,3],[unwanted,1,1,0],[up,1,1,0],[upasana,100,75,100],[used,1,1,0],[using,1,1,0],[var,1,1,1],[vegetables,5,5,5],[videos,5,0,3],[view,5,5,5],[virality,1,1,0],[viruses,1,1,2],[vitamin,1,1,1],[walks,100,500,0],[wanted,15,20,3],[warm,1,1,0],[was,1,1,0],[water,5,5,5],[way,1,1,0],[ways,50,100,0],[well,50,30,180],[where,1,1,0],[whole,1,1,1],[with,1,1,0],[without,1,1,0],[words,5,7,1],[write,15,1,1],[writing,5,5,0],[wrote,15,1,1],[years,3,1,0]]).br1([[a,1,1.5,0],[about,1,1,0],[ache,1,0,0],[after,1,1,0],[all,1,1.5,0],[an,1,1.5,0],[and,1,1,0],[appearances,5,0,5],[apple,5,5,5],[are,1,1,0],[area,5,5,0],[argument,1,1.5,0],[as,1,1,0],[asanas,180,50,1],[at,1,1,0],[ate,15,2,1],[avoid,1,1,0],[b,1,1,1],[bacteria,2,1,1],[based,5,5,1],[be,50,30,180],[before,1,1,0],[being,50,30,180],[binding,1,1,0],[blocking,1,1,1],[bolt,2,1,1],[box,1,1,1],[breakfast,10,10,1],[breasoned,5,5,5],[breasoning,5,5,5],[breasonings,5,5,5],[by,1,1,0],[chapter,10,15,1],[clear,1,1,0],[colds,1,1,1],[comfort,180,50,30],[comfortable,50,50,100],[complexes,1,1,1],[conception,50,14,8],[connected,1,1,0],[correctness,1,1,0],[day,10,10,10],[depression,1,1,0],[details,1,1,1],[did,1,1,0],[do,50,30,180],[dotted,1,1,0],[down,1,1,0],[drinking,5,5,5],[during,1,1.5,0],[each,1,1,0],[earned,1,1.5,0],[education,50,30,180],[effects,1,1.5,0],[elderberries,1,1,1],[ensure,1,1,0],[excess,1,1,1],[exercises,10,10,1],[f,5,5,5],[feeling,1,1,0],[felt,1,1,0],[first,1,1.5,0],[flu,1,1,0],[food,2,1,1],[for,1,1,0],[from,1,1,0],[fruits,1,1,1],[function,1,1.5,0],[gaffer,10,10,1],[gave,1,1,1],[glasses,15,11,3],[god,50,30,180],[grade,1,1.5,0],[grains,1,1,1],[had,1,1,0],[hallucinogenic,1,1,0],[happiness,1,1,0],[happy,1,1,0],[have,5,5,5],[head,15,20,23],[headache,1,1,0],[headaches,1,1,0],[health,50,30,180],[healthy,50,30,180],[help,5,5,0],[helped,50,30,180],[high,1,1.5,0],[hills,5,5,2],[honey,10,10,10],[i,50,30,180],[imagery,5,5,0],[in,1,1,0],[incompatibility,1,1,0],[interpretation,20,30,0],[it,1,1,0],[keep,1,1,0],[laughter,1,1.5,0],[maintain,1,1,0],[maintaining,1,1,0],[master,50,30,180],[mind,3,4,4],[minutes,20,30,0],[mistake,1,1,0],[muscle,1,1,1],[muscles,1,1,1],[music,1,1,0],[must,1,1,0],[my,50,30,180],[namaskar,15,10,23],[neck,15,15,10],[next,1,1,0],[nietzsche,50,30,180],[no,1,1,0],[noticed,50,30,180],[nut,1,1,0],[nuts,1,1,1],[of,1,1,0],[off,1,1.5,0],[on,1,1,0],[one,1,1.5,0],[organs,1,1,1],[out,1,1,0],[over,1,1,0],[part,1,1,1],[peace,1,1.5,0],[perfect,1,1.5,0],[performed,50,30,180],[performing,50,30,250],[philosophy,10,20,1],[physiology,50,30,180],[pimple,1,1,0],[pm,5,5,5],[poem,1,1.5,0],[positive,1,1,0],[pot,5,5,10],[prayer,5,5,0],[prepared,1,1,0],[prevent,1,1,0],[prevented,1,1,0],[preventing,1,1,0],[prevention,1,1,0],[problems,1,1.5,0],[product,1,150,1],[products,5,5,5],[psychiatry,50,30,180],[psychology,2,2,0],[quality,1,1.5,0],[quantum,1,1,0],[read,15,1,20],[relax,180,50,30],[relaxed,180,50,30],[remain,1,1.5,0],[require,1,1,0],[room,500,400,300],[s,1,1,0],[safe,1,1.5,0],[sales,1,1.5,0],[same,1,1,0],[schizophrenia,1,1,0],[second,1,1.5,0],[see,1,0,1],[seek,1,1,0],[sell,5,3,0],[sets,5,1,0],[sex,1,1.5,0],[short,1,1,0],[single,1,1.5,0],[sites,20,0,30],[sitting,50,70,150],[sized,30,1,0],[skin,1,1,0],[sleep,180,50,30],[slices,2,2,2],[so,1,1,0],[societal,50,30,180],[some,1,1,0],[spine,1,1,10],[spiritual,50,30,180],[state,1,1.5,0],[stated,20,30,0],[stating,50,30,180],[status,1,1.5,0],[stop,5,1,15],[straight,1,1,0],[strawberry,1,1,1],[structure,1,1,1],[studied,50,30,180],[study,100,50,100],[studying,50,30,180],[subject,50,30,180],[successful,1,1.5,0],[surya,1,1.5,0],[sutra,5,1.5,0],[table,7,5,0],[tape,10,10,1],[task,15,2.5,0],[technique,1,1,0],[test,20,20,0],[text,20,30,0],[that,1,1,0],[the,1,1,0],[them,50,30,180],[then,1,1,0],[they,50,30,180],[thinking,1,1.5,0],[third,1,1.5,0],[this,1,1,0],[thoughts,1,1,0],[through,1,1,0],[tied,1,1,0],[time,1,1.5,0],[to,1,1,0],[together,1,1,0],[touch,1,1,0],[train,1,1,1],[trains,50,30,180],[travel,10,3,0],[treating,20,15,3],[turn,1,1,0],[two,1,1.5,0],[university,100,75,3],[unwanted,1,1,0],[up,1,1,0],[upasana,100,75,100],[used,1,1,0],[using,1,1,0],[var,1,1,1],[vegetables,5,5,5],[videos,5,0,3],[view,5,5,5],[virality,1,1,0],[viruses,1,1,2],[vitamin,1,1,1],[walks,100,500,0],[wanted,15,20,3],[warm,1,1,0],[was,1,1,0],[water,5,5,5],[way,1,1,0],[ways,50,100,0],[well,50,30,180],[where,1,1,0],[whole,1,1,1],[with,1,1,0],[without,1,1,0],[words,5,7,1],[write,15,1,1],[writing,5,5,0],[wrote,15,1,1],[years,3,1,0]]).
texttobr2(A) :- A1 is 250*A, t2b_br_adder(A1), texttobr2_2(A).
texttobr2(A) :- A1 is 250*A, t2b_br_adder(A1), texttobr2_2(A).texttobr2_2(0):-!.
texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish) :-texttobr2(N1,Filex1,Stringx1,M1,Brth,Room,PartOfRoom,Direction,ObjectToPrepare,ObjectToFinish,0,[auto,off]).
texttobr2_12(N1):-texttobr2,texttobr2(meditation,_),texttobr2(medicine,_),texttobr2(pedagogy,_),N2 is N1-1,texttobr2_12(N2),!.
texttobr2_2(0):-!.
texttobr2_2(N1):-texttobr2,N2 is N1-1,texttobr2_2(N2).
texttobr2_2(N1):-texttobr2,N2 is N1-1,texttobr2_2(N2),!.
texttobr2qb :-br1([[a,1,1.5,0],[about,1,1,0],[ache,1,0,0],[after,1,1,0],[all,1,1.5,0],[an,1,1.5,0],[and,1,1,0],[appearances,5,0,5],[apple,5,5,5],[are,1,1,0],[area,5,5,0],[argument,1,1.5,0],[as,1,1,0],[asanas,180,50,1],[at,1,1,0],[ate,15,2,1],[avoid,1,1,0],[b,1,1,1],[bacteria,2,1,1],[based,5,5,1],[be,50,30,180],[before,1,1,0],[being,50,30,180],[binding,1,1,0],[blocking,1,1,1],[bolt,2,1,1],[box,1,1,1],[breakfast,10,10,1],[breasoned,5,5,5],[breasoning,5,5,5],[breasonings,5,5,5],[by,1,1,0],[chapter,10,15,1],[clear,1,1,0],[colds,1,1,1],[comfort,180,50,30],[comfortable,50,50,100],[complexes,1,1,1],[conception,50,14,8],[connected,1,1,0],[correctness,1,1,0],[day,10,10,10],[depression,1,1,0],[details,1,1,1],[did,1,1,0],[do,50,30,180],[dotted,1,1,0],[down,1,1,0],[drinking,5,5,5],[during,1,1.5,0],[each,1,1,0],[earned,1,1.5,0],[education,50,30,180],[effects,1,1.5,0],[elderberries,1,1,1],[ensure,1,1,0],[excess,1,1,1],[exercises,10,10,1],[f,5,5,5],[feeling,1,1,0],[felt,1,1,0],[first,1,1.5,0],[flu,1,1,0],[food,2,1,1],[for,1,1,0],[from,1,1,0],[fruits,1,1,1],[function,1,1.5,0],[gaffer,10,10,1],[gave,1,1,1],[glasses,15,11,3],[god,50,30,180],[grade,1,1.5,0],[grains,1,1,1],[had,1,1,0],[hallucinogenic,1,1,0],[happiness,1,1,0],[happy,1,1,0],[have,5,5,5],[head,15,20,23],[headache,1,1,0],[headaches,1,1,0],[health,50,30,180],[healthy,50,30,180],[help,5,5,0],[helped,50,30,180],[high,1,1.5,0],[hills,5,5,2],[honey,10,10,10],[i,50,30,180],[imagery,5,5,0],[in,1,1,0],[incompatibility,1,1,0],[interpretation,20,30,0],[it,1,1,0],[keep,1,1,0],[laughter,1,1.5,0],[maintain,1,1,0],[maintaining,1,1,0],[master,50,30,180],[mind,3,4,4],[minutes,20,30,0],[mistake,1,1,0],[muscle,1,1,1],[muscles,1,1,1],[music,1,1,0],[must,1,1,0],[my,50,30,180],[namaskar,15,10,23],[neck,15,15,10],[next,1,1,0],[nietzsche,50,30,180],[no,1,1,0],[noticed,50,30,180],[nut,1,1,0],[nuts,1,1,1],[of,1,1,0],[off,1,1.5,0],[on,1,1,0],[one,1,1.5,0],[organs,1,1,1],[out,1,1,0],[over,1,1,0],[part,1,1,1],[peace,1,1.5,0],[perfect,1,1.5,0],[performed,50,30,180],[performing,50,30,250],[philosophy,10,20,1],[physiology,50,30,180],[pimple,1,1,0],[pm,5,5,5],[poem,1,1.5,0],[positive,1,1,0],[pot,5,5,10],[prayer,5,5,0],[prepared,1,1,0],[prevent,1,1,0],[prevented,1,1,0],[preventing,1,1,0],[prevention,1,1,0],[problems,1,1.5,0],[product,1,150,1],[products,5,5,5],[psychiatry,50,30,180],[psychology,2,2,0],[quality,1,1.5,0],[quantum,1,1,0],[read,15,1,20],[relax,180,50,30],[relaxed,180,50,30],[remain,1,1.5,0],[require,1,1,0],[room,500,400,300],[s,1,1,0],[safe,1,1.5,0],[sales,1,1.5,0],[same,1,1,0],[schizophrenia,1,1,0],[second,1,1.5,0],[see,1,0,1],[seek,1,1,0],[sell,5,3,0],[sets,5,1,0],[sex,1,1.5,0],[short,1,1,0],[single,1,1.5,0],[sites,20,0,30],[sitting,50,70,150],[sized,30,1,0],[skin,1,1,0],[sleep,180,50,30],[slices,2,2,2],[so,1,1,0],[societal,50,30,180],[some,1,1,0],[spine,1,1,10],[spiritual,50,30,180],[state,1,1.5,0],[stated,20,30,0],[stating,50,30,180],[status,1,1.5,0],[stop,5,1,15],[straight,1,1,0],[strawberry,1,1,1],[structure,1,1,1],[studied,50,30,180],[study,100,50,100],[studying,50,30,180],[subject,50,30,180],[successful,1,1.5,0],[surya,1,1.5,0],[sutra,5,1.5,0],[table,7,5,0],[tape,10,10,1],[task,15,2.5,0],[technique,1,1,0],[test,20,20,0],[text,20,30,0],[that,1,1,0],[the,1,1,0],[them,50,30,180],[then,1,1,0],[they,50,30,180],[thinking,1,1.5,0],[third,1,1.5,0],[this,1,1,0],[thoughts,1,1,0],[through,1,1,0],[tied,1,1,0],[time,1,1.5,0],[to,1,1,0],[together,1,1,0],[touch,1,1,0],[train,1,1,1],[trains,50,30,180],[travel,10,3,0],[treating,20,15,3],[turn,1,1,0],[two,1,1.5,0],[university,100,75,3],[unwanted,1,1,0],[up,1,1,0],[upasana,100,75,100],[used,1,1,0],[using,1,1,0],[var,1,1,1],[vegetables,5,5,5],[videos,5,0,3],[view,5,5,5],[virality,1,1,0],[viruses,1,1,2],[vitamin,1,1,1],[walks,100,500,0],[wanted,15,20,3],[warm,1,1,0],[was,1,1,0],[water,5,5,5],[way,1,1,0],[ways,50,100,0],[well,50,30,180],[where,1,1,0],[whole,1,1,1],[with,1,1,0],[without,1,1,0],[words,5,7,1],[write,15,1,1],[writing,5,5,0],[wrote,15,1,1],[years,3,1,0]]).
texttobr2qb(N1):-texttobr2qb,N2 is N1-1,texttobr2qb(N2).
texttobrc1(N1,Filex,Stringx1,BreasoningLimit) :-texttobrc2(Filex,Stringx1,BreasoningLimit),N2 is N1-1,texttobrc1(N2,Filex,Stringx1,BreasoningLimit).texttobrc2(Filex,Stringx1,M) :-((Stringx1=u,phrase_from_file_s(string2(String1), Filex))->true;string_codes(Stringx1,String1)),((number(M),length(String,M),append(String,_,String1))->true;String=String1),br(String),!.
time(5,[-,-,-,-,-,-,-,*,-,-,-,-,-,-,-,-,-]).time(6,[-,-,-,-,-,-,-,-,-,*,-,-,-,-,-,-,-]).time(7,[-,-,-,-,-,-,-,-,-,-,-,*,-,-,-,-,-]).time(8,[-,-,-,-,-,-,-,-,-,-,-,-,-,*,-,-,-]).time(9,[-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,*]).%speeds(Running_speed,Average_speed).
time(concurrent(L,Goals,[])).
time(d,n,2).
time(e,n,1).
time(f,n,0.5).
time(g,n,0.25).
time(h,r,4).
time(i,r,3).
time(j,r,2).
time(k,r,1).
time(l,r,0.5).time(m,r,0.25).
time1(2,nothing).
time1(3,nothing).
time1(4,nothing).
time1(5,murder).
time1(6,nothing).
time1(7,nothing).
todays_students(2).
todays_students(3).
too_long2(List4,N1,N2) :-List4=[Item|Rest],string_length(Item,Length),N3 is N1+Length,too_long2(Rest,N3,N2).
towords(FromLang,ToLang,J,A,B,D,E,G,H) :-J=[[Word1,Word2]|Rest],Atom1=Word1,Atom2=Word2,(Atom2=''->append(G,[Atom1],I);append(G,[Atom2],I)),append(A,[Atom1],C),append(D,[Atom2],F),towords(FromLang,ToLang,Rest,C,B,F,E,I,H).
towords(FromLang,ToLang,J,A,B,D,E,G,H) :-not(J=[[[FromLang,ToLang],[_,_]]|Rest]),towords(FromLang,ToLang,Rest,A,B,D,E,G,H).
towords2(BrDict03,A,B) :-BrDict03=[[N,Word]|Rest],atom_string(Atom,Word),append(A,[[N,Word]],C),towords2(Rest,C,B).
towords2(BrDict03,A,B) :-BrDict03=[[Word,_,_,_]|Rest],%%atom_string(Atom,Word),append(A,[Word],C),towords2(Rest,C,B).
towords2(T2ON_Dict03,A,B) :-T2ON_Dict03=[[Word,_,_,_]|Rest],%%atom_string(Atom,Word),append(A,[Word],C),towords2(Rest,C,B).
towords2a(BrDict03,A,B) :-BrDict03=[[Word,_]|Rest],%%atom_string(Atom,Word),append(A,[Word],C),towords2a(Rest,C,B).
towords2a(BrDict03,A,B) :-BrDict03=[[Word,_]|Rest],%%atom_string(Atom,Word),append(A,[Word],C),towords2a(Rest,C,B).towords3([],A,A,C,C,D,D) :- !.
towords2a(T2ON_Dict03,A,B) :-T2ON_Dict03=[[Word,_]|Rest],%%atom_string(Atom,Word),append(A,[Word],C),towords2a(Rest,C,B).
towords3(BrDict03,A,B,D,E,G,H) :-BrDict03=[[Word1,Word2]|Rest],(Word2=""->append(G,[Word1],I)->true;append(G,[Word2],I)),append(A,[Word1],C),append(D,[Word2],F),towords3(Rest,C,B,F,E,I,H).
towords3(BrDict03,A,B,D,E,G,H) :-BrDict03=[[Word1,Word2]|Rest],(Word2=""->append(G,[Word1],I)->true;append(G,[Word2],I)),append(A,[Word1],C),append(D,[Word2],F),towords3(Rest,C,B,F,E,I,H).string(String) --> list(String).
towords3(BrDict03,A,B,D,E,G,H) :-BrDict03=[[Word1,Word2]|Rest],(Word2=""->append(G,[Word1],I)->true;append(G,[Word2],I)),append(A,[Word1],C),append(D,[Word2],F),towords3(Rest,C,B,F,E,I,H).string(String) --> list(String).list([]) --> [].list([L|Ls]) --> [L], list(Ls).splitfurther(BrDict01,N) :-   phrase(file0(N),BrDict01).file0(N) --> "[", file(N), "]", !.
towords3(T2ON_Dict03,A,B,D,E,G,H) :-T2ON_Dict03=[[Word1,Word2]|Rest],(Word2=""->append(G,[Word1],I)->true;append(G,[Word2],I)),append(A,[Word1],C),append(D,[Word2],F),towords3(Rest,C,B,F,E,I,H).t2on([],B,B,C,C) :-!.
tranfrom(CttOrigTran1,TranFrom1,TranFrom2) :-CttOrigTran1 = [[TranFrom3,_Tran]|TranFrom4],append(TranFrom1,[TranFrom3],TranFrom5),tranfrom(TranFrom4,TranFrom5,TranFrom2), !.
translate1("I dote on you.","en","fr","Je me passionne pour toi.").
translate1("I love you tr.","fr","en","I love you.").
translate1("I love you.","fr","en","Je t|aime.").
translate1("I love you1 tr.","fr","en","I love you1.").
translate1("I love you1 tr.","fr","en","I love you1.").translate1("I dote on you1.","en","fr","I dote on you1 tr.").translate1("I dote on you1 tr.","fr","en","I dote on you1 different.").
translate1("I love you2.","en","fr","I love you2 tr.").
translate1("I love you3 tr.","fr","en","I love you3 fake.").
translate1("Je me passionne pour toi.","fr","en","I dote on you.").
translate1("true","en","de","wahr").
translate1("true","en","fr","vrai").translate1("v","en","de","v").
translate1("v","en","de","v").
translate1(A,_,_,A).
translate3(A,_,_,A).
translate4(Input,"en","en2",Input) :- !.
translate4(Input,From_lang,To_lang,Output) :-split_on_number(From_lang,Lang3,_),split_on_number(To_lang,Lang4,_),%not(Lang3=Lang4),translate(Input,Lang3,Lang4,Output),!.
translate4(Input,Lang,Lang,Input) :- !.
translate4(Input,Lang1,Lang2,Input) :-Lang1="en2",split_on_number(Lang1,Lang3,_),split_on_number(Lang2,Lang3,_),!.
translate_ctt2("Bonjour.","fr","en","Helloaa.").
translate_ctt2("Hellod.","fr","en","Helloca.").
translate_ctt2("Hellodc.","fr","en","Hellocca.").
transpose(Matrix, [FirstCol|RestCols]) :-    % Extract the first column of the matrix.
transpose([[]|_], []).
transpose([[]|_], []).transpose(Matrix, [FirstCol|RestCols]) :-    % Extract the first column of the matrix.
transpose([], []).
traverse(X,Y,Explored,Explored,Inventory,Inventory) :-map(Map),member([X,Y,Cell],Map),Cell=[*],!.
traverse(X,Y,Explored,Explored,Inventory,Inventory) :-member([X,Y],Explored),!.
traverse(X,Y,Explored,Explored,Inventory,Inventory) :-rainforest(Map),member([X,Y,Cell],Map),Cell=[*],!.
traverse(X,Y,Explored1,Explored2,Inventory1,Inventory2) :-map(Map),member([X,Y,Cell],Map),write([X,Y]),assertz(path([X,Y])),(Cell=[]->Inventory4a=Inventory1;(Cell=[Item],append(Inventory1,[Item],Inventory3),apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),writeln(Inventory4a),(member(e,Inventory4a)->(writeln("Game Over"),map_dimensions([X2,Y2]),print_map_path(Map,X2,Y2,X,Y));true),append(Explored1,[[X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,traverse(Xm1,Y,Explored3,Explored4,Inventory4a,Inventory5),traverse(X,Ym1,Explored4,Explored5,Inventory5,Inventory6),traverse(Xp1,Y,Explored5,Explored6,Inventory6,Inventory7),traverse(X,Yp1,Explored6,Explored2,Inventory7,Inventory2).
traverse(X,Y,Explored1,Explored2,Inventory1,Inventory2) :-rainforest(Map),member([X,Y,Cell],Map),write([X,Y]),(Cell=[]->Inventory4a=Inventory1;(Cell=[Item],append(Inventory1,[Item],Inventory3),apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),writeln(Inventory4a),(member(e,Inventory4a)->(writeln("Game Over"),true);(append(Explored1,[[X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,traverse(Xm1,Y,Explored3,Explored4,Inventory4a,Inventory5),traverse(X,Ym1,Explored4,Explored5,Inventory5,Inventory6),traverse(Xp1,Y,Explored5,Explored6,Inventory6,Inventory7),traverse(X,Yp1,Explored6,Explored2,Inventory7,Inventory2))).apply_all_to_all(Inventory1,Inventory2) :-findall(Item3,(member(Item1,Inventory1),member(Item2,Inventory1),not(Item1=Item2),apply(Item1,Item2,Item3),not(member(Item3,Inventory1))),AddedItems),(AddedItems=[]->Inventory1=Inventory2;(append(Inventory1,AddedItems,Inventory3),apply_all_to_all(Inventory3,Inventory2))).
traverse(X,Y,Explored1,Explored2,Inventory1,Inventory2,E1,E2):-rainforest(Map),member2(Map,[X,Y,Cell]),((equals4(Cell,["*"])->(true);(member2(Explored1,[X,Y])))->((equals4(Explored1,Explored2),equals4(Inventory1,Inventory2),E2=E1));((writeln([X,Y]),(equals4(Cell,[])->(equals4(Inventory4a,Inventory1));((equals4(Cell,[Item]),append(Inventory1,[Item],Inventory3),apply_all_to_all(Inventory3,Inventory4),equals4(Inventory4a,Inventory4)))),writeln(Inventory4a),(member2(Inventory4a,"e")->((writeln("Game Over"),equals4(Explored1,Explored2),equals4(Inventory2,Inventory4a),E2="e"));((append(Explored1,[[X,Y]],Explored3),-(X,1,Xm1),-(Y,1,Ym1),+(X,1,Xp1),+(Y,1,Yp1),traverse(Xm1,Y,Explored3,Explored4,Inventory4a,Inventory5,E1,E3),traverse(X,Ym1,Explored4,Explored5,Inventory5,Inventory6,E3,E4),traverse(Xp1,Y,Explored5,Explored6,Inventory6,Inventory7,E4,E5),traverse(X,Yp1,Explored6,Explored2,Inventory7,Inventory2,E5,E2))))))).
traverse(Z,X,Y,Explored,Explored,Inventory,Inventory) :-fire_lab(Map),member([Z,X,Y,Cell],Map),Cell=[*],!.
traverse(Z,X,Y,Explored,Explored,Inventory,Inventory) :-map(Map),member([Z,X,Y,Cell],Map),Cell=[*],!.
traverse(Z,X,Y,Explored,Explored,Inventory,Inventory) :-maze2(Map),member([Z,X,Y,Cell],Map),Cell=[*],!.
traverse(Z,X,Y,Explored,Explored,Inventory,Inventory) :-member([Z,X,Y],Explored),!.
traverse(Z,X,Y,Explored,Explored,Inventory,Inventory) :-rainforest(Map),member([Z,X,Y,Cell],Map),Cell=[*],!.
traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2) :-fire_lab(Map),member([Z,X,Y,Cell],Map),write([Z,X,Y]),(Cell=[]->Inventory4a=Inventory1;(Cell=[Item],append(Inventory1,[Item],Inventory3),apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),writeln(Inventory4a),(member(fcre,Inventory4a)->(writeln("Game Over"),true);true),append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,traverse(Z,Xm1,Y,Explored3,Explored4,Inventory4a,Inventory5),traverse(Z,X,Ym1,Explored4,Explored5,Inventory5,Inventory6),traverse(Z,Xp1,Y,Explored5,Explored6,Inventory6,Inventory7),traverse(Z,X,Yp1,Explored6,Explored7,Inventory7,Inventory8),traverse(Zm1,X,Y,Explored7,Explored8,Inventory8,Inventory9),traverse(Zp1,X,Y,Explored8,Explored2,Inventory9,Inventory2).
traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2) :-map(Map),member([Z,X,Y,Cell],Map),write([Z,X,Y]),assertz(path([Z,X,Y])),(Cell=[]->Inventory4a=Inventory1;(Cell=[Item],append(Inventory1,[Item],Inventory3),apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),writeln(Inventory4a),(member(e,Inventory4a)->(writeln("Game Over"),map_dimensions([X2,Y2,Z2]),print_map_path3d(Map,X2,Y2,Z2,X,Y,Z));true),append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,traverse(Z,Xm1,Y,Explored3,Explored4,Inventory4a,Inventory5),traverse(Z,X,Ym1,Explored4,Explored5,Inventory5,Inventory6),traverse(Z,Xp1,Y,Explored5,Explored6,Inventory6,Inventory7),traverse(Z,X,Yp1,Explored6,Explored7,Inventory7,Inventory8),traverse(Zm1,X,Y,Explored7,Explored8,Inventory8,Inventory9),traverse(Zp1,X,Y,Explored8,Explored2,Inventory9,Inventory2).
traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2) :-maze2(Map),member([Z,X,Y,Cell],Map),write([Z,X,Y]),(Cell=[]->Inventory4a=Inventory1;(Cell=[Item],append(Inventory1,[Item],Inventory3),apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),writeln(Inventory4a),(member("e",Inventory4a)->(writeln("Game Over"),true);true),append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,traverse(Z,Xm1,Y,Explored3,Explored4,Inventory4a,Inventory5),traverse(Z,X,Ym1,Explored4,Explored5,Inventory5,Inventory6),traverse(Z,Xp1,Y,Explored5,Explored6,Inventory6,Inventory7),traverse(Z,X,Yp1,Explored6,Explored7,Inventory7,Inventory8),traverse(Zm1,X,Y,Explored7,Explored8,Inventory8,Inventory9),traverse(Zp1,X,Y,Explored8,Explored2,Inventory9,Inventory2).
traverse(Z,X,Y,Explored1,Explored2,Inventory1,Inventory2) :-rainforest(Map),member([Z,X,Y,Cell],Map),write([Z,X,Y]),(Cell=[]->Inventory4a=Inventory1;(Cell=[Item],append(Inventory1,[Item],Inventory3),apply_all_to_all(Inventory3,Inventory4),Inventory4a=Inventory4)),writeln(Inventory4a),(member(e,Inventory4a)->(writeln("Game Over"),true);true),append(Explored1,[[Z,X,Y]],Explored3),Xm1 is X-1,Ym1 is Y-1,Xp1 is X+1,Yp1 is Y+1,Zm1 is Z-1,Zp1 is Z+1,traverse(Z,Xm1,Y,Explored3,Explored4,Inventory4a,Inventory5),traverse(Z,X,Ym1,Explored4,Explored5,Inventory5,Inventory6),traverse(Z,Xp1,Y,Explored5,Explored6,Inventory6,Inventory7),traverse(Z,X,Yp1,Explored6,Explored7,Inventory7,Inventory8),traverse(Zm1,X,Y,Explored7,Explored8,Inventory8,Inventory9),traverse(Zp1,X,Y,Explored8,Explored2,Inventory9,Inventory2).
traverse(_X,_Y,Explored,Explored,Inventory,Inventory,E,E) :- (E="e"->!;fail),!.
trial01(S1,S3) :-sort(S1,S),%%midpoint(S,MP),halves(S,H1,H2),midpoint(H1,Q1),midpoint(H2,Q3),IQR is Q3-Q1,sum(S,0,S02),mean(S02,Mean),furthestfrommean(S,Mean,V),D1 is 1.5*IQR,D2 is V-Mean,(D2>D1->(delete(S,V,S2),trial01(S2,S3));S=S3).
trial01(S1,S3) :-sort(S1,S),%%midpoint(S,MP),halves(S,H1,H2),midpoint(H1,Q1),midpoint(H2,Q3),IQR is Q3-Q1,sum(S,0,S02),mean(S02,Mean),furthestfrommean(S,Mean,V),D1 is 1.5*IQR,D2 is V-Mean,(D2>D1->(delete(S,V,S2),trial01(S2,S3));S=S3).trial1(0,A,A) :- !.
trial1(0,A,A) :- !.
trial1(N,A,B) :- mindreadtest(S), A1 is A+S,N1 is N-1,trial1(N1,A1,B).
trial1(N,A,B) :- mindreadtest(S), append(A,[S],A2),N1 is N-1,trial1(N1,A2,B).
trial1(N,A,B) :- mindreadtest(S), append(A,[S],A2),N1 is N-1,trial1(N1,A2,B).midpoint(S,MP) :-length(S,L),A is mod(L,2),(A is 0->(M1 is L/2, M2 is M1+1,N1 is M1-1,N2 is M2-1,length(N11,N1),length(N21,N2),append(N11,[N12|_Rest1],S),append(N21,[N22|_Rest2],S),MP is (N12+N22)/2);(L2 is L+1, M1 is L2/2, N1 is M1-1,length(N11,N1),append(N11,[MP|_Rest],S))).
trialy2(List,R) :-random_member(A,List),R=[[_,A]]./**length(List,L),Trials is L*3,trialy22(List,Trials,[],R).**/trialy22([],_,R,R) :- !.
trialy2(List,R) :-trialy2B(List,R).
trialy2(List,R) :-%%writeln([list,List]),%%notrace,length(List,Length),((Length=<9->findr4(R4),number_string(R4,R4A),formr5([R4A],9,Length,R5),findr(R5,List,R));(Length=<99->findr4(R41),findr4(R42),formr5([R41,R42],99,Length,R5),findr(R5,List,R));(Length=<999->findr4(R41),findr4(R42),findr4(R43),formr5([R41,R42,R43],999,Length,R5),findr(R5,List,R));fail),%%writeln([r,R]),trace.
trialy2(Question,List,R) :-%%random_member(A,List),term_to_atom(List,List1),repeat,writeln([Question,%%"Please enter an item from:",List1]),read_string(user_input, "\n", "\r", _End2, A1),atom_to_term(A1,A,_),%%((number_string(A,A1)->true;atom_string(A,A1))->true;,member(A,List),R=[[_,A]].
trialy22(List,Trials,RA,RB) :-List=[Item|Items],trialy21(Item,Trials,R1),append(RA,[R1],RC),trialy22(Items,Trials,RC,RB),!.
trialy2A(List,R) :-notrace,trialy2B(List,R).%%,trace.
trialy2A(List,R) :-random_member(R,List).
trialy2A(List,R) :-trialy2B(List,R).
trialy2B(List,R) :-length(List,Length),((Length=<9->findr4(R4),number_string(R4,R4A),formr5([R4A],9,Length,R5),findr(R5,List,R));(Length=<99->findr4(R41),findr4(R42),formr5([R41,R42],99,Length,R5),findr(R5,List,R));(Length=<999->findr4(R41),findr4(R42),findr4(R43),formr5([R41,R42,R43],999,Length,R5),findr(R5,List,R));(Length=<9999->findr4(R41),findr4(R42),findr4(R43),findr4(R44),formr5([R41,R42,R43,R44],9999,Length,R5),findr(R5,List,R));(Length=<99999->findr4(R41),findr4(R42),findr4(R43),findr4(R44),findr4(R45),formr5([R41,R42,R43,R44,R45],99999,Length,R5),findr(R5,List,R));fail),%%write1([r,R]),trace.
trialy2B(List,R) :-random_member(A,List),R=[[_,A]].
trialy3(Trials1,RA,RB) :-trialy1(R1),append(RA,[R1],RC),Trials2 is Trials1-1,trialy3(Trials2,RC,RB),!.
trim_brackets1(A,A,N,N) :-!.
trim_spaces_after(A,"") :-string_chars(A,A1),findall(A2,(member(A3,A1),atom_string(A3,A2)),A4),forall(member(A5,A4),is_space(A5)),!.
trim_spaces_after(A,A) :- !.
trim_spaces_before(A,A) :- !.
true(true).
true1(0,0).
true1(1,1).
true1(implies(A,B),C):-true1(A,A1),true1(B,B1),implies1(A1,B1,C).true1(and(A,B),C):-true1(A,A1),true1(B,B1),and1(A1,B1,C).or1(1,1,1).or1(1,0,1).
true1(not(A),C):-true1(A,A1),not1(A1,C).
true1(or(A,B),C):-true1(A,A1),true1(B,B1),or1(A1,B1,C).
true11(2+3,5).
true11(2-3,-1).
true11(3/2,1.5).
true11(6,6).
true11(ceiling(0.9),1).true11(floor(0.5),0).% true1.                                                     % truetrue1 :- forall(true11(A,B),not(contradiction(A,B))).
true11(round(1+0.1),1).
truncate_comment(A14,A14) :- A14=[A12|A13], not(A12="%"),not(A12=" "),!. truncate_full_stop(["."|A13],A11) :- truncate_full_stop(A13,A11),!.
truncate_comment([" "|A13],A11) :- truncate_comment(A13,A11),!.
truncate_full_stop([" "|A13],A11) :- truncate_full_stop(A13,A11),!.
try_r1(_,[],[],T,T,_T2_old) :- !.
tryoutputs([Item|Outputs],List2,List3,List4) :-tryoutputsa(Item,List2,List3,List5),tryoutputs(Outputs,List2,List5,List4).
tryoutputs([],_List3,_Output) :- fail.
tryoutputs([_Output|Outputs],List,Answer) :-tryoutputs(Outputs,List,Answer),!.**//**tryoutputs2(Item1,List2,Item2) :-Item1=[Original,PreviousBT1],(PreviousBT1=""->PreviousBT2=Original;PreviousBT2=PreviousBT1),member(Item2,List2),Item2=[PreviousBT2,_Translation],!.
tryoutputs0([[Original,BT]|Outputs],List2,List3,List4) :-(((BT=""->(member([Original,Translation],List2),append(List3,[[Original,Translation]],List5))->true;(member([BT,Translation],List2))->append(List3,[[BT,Translation]],List5)));List5=List3),tryoutputs0(Outputs,List3,List5,List4),!.
tryoutputs1(Output1,Output2,Output3) :-not(member(Output1,Output2)),(Output2=""->Output3=Output2;append(Output2,[Output1],Output3)),!.
tryoutputs11(Output1,Output2,Output3) :-not(member(Output1,Output2)),append(Output2,[Output1],Output3),!.
tryoutputsa(Item,[_|List22],List3,List4) :-tryoutputsa(Item,List22,List3,List4), !.
tryoutputsa([Original,BT],[List21|List22],List3,List4) :-[Original,Translation]=List21,(BT=""->append(List3,[[Original,Translation]],List5);append(List3,[[Original,BT]],List5)),tryoutputsa([Original,BT],List22,List5,List4),!.
trytranslations1([_|Outputs],FromLang,ToLang,Flag1,Flag2,List1,List2,String1,String2) :-trytranslations1(Outputs,FromLang,ToLang,Flag1,Flag2,List1,List2,String1,String2),!.
tt(Result):-findall(C,(member(V1,[0,1]),true1(or(V1,(not(V1))),C)),Result).
ttb2(List1) :-List1=[Item|List2],texttobr2(8,Item,u,2000), texttobr(8,Item,u,2000),ttb2(List2).
turn_occurs_check(off) :-retractall(occurs_check(_)),assertz(occurs_check(off)),!.
turn_save_debug(State1) :-(not(save_debug(_))->(retractall(save_debug(_)),assertz(save_debug(off)));true),%save_debug(State2),retractall(save_debug(_)),assertz(save_debug(State1)),!.
turncut(State1) :-cut(State2),retract(cut(State2)),assertz(cut(State1)).
turncut(State1) :-cut(State2),retract(cut(State2)),assertz(cut(State1)).logicaldisjunction(true,Result2,Result3) :-        true(Result2);true(Result3).
turncut(State1) :-cut(State2),retract(cut(State2)),assertz(cut(State1)).turndebug(State1) :-debug(State2),retract(debug(State2)),assertz(debug(State1)).
turndebug(State1) :-debug(State2),retract(debug(State2)),assertz(debug(State1)).
turnequals4(State1) :-(not(equals4(_Equals4))->(retractall(equals4(_)),assertz(equals4(on)));true),equals4(State2),retract(equals4(State2)),assertz(equals4(State1)).
type(b,number).
type(c,string).
type(c2,atom).
type(c3,number,string).
type_checker([C1|C],[T1|T]) :-functor(C1,C2,Ar),(Ar=1->(arg(1,C1,A1),type(A1,T2),type(C2,T2),functor(T1,C2,Ar),arg(1,T1,T2));(Ar=2,arg(1,C1,A1),arg(2,C1,A2),type(A1,T2),type(A2,T3),type(C2,T2,T3),functor(T1,C2,Ar),arg(1,T1,T2),arg(2,T1,T3))),type_checker(C,T).type(a,atom).
type_climber(A,Y,N1,N3) :- A2 is A-1, random(X), X1 is floor(X*10),  tty_size(_R,C),  random(X2), X21 is ceiling(X2*C), length(A1,X21), findall(_,(member(_,A1),write(" ")),_), writeln(X1), %trace,catch(call_with_time_limit(Y,get_single_char(A3)),_,A3=65), atom_number(X14,X1), char_code(X14,X13), (A3=X13->N2 is N1+1;N2=N1), type_climber(A2,Y,N2,N3).
type_s2a1(atom).
type_s2a1(compound).
type_s2a1(number).
types(_,[[v,a],[v,b]]).
types(wrap,[[v,a],[[v,a]]]).
types_in2(L,M) :- L=[L1|L2], M=[M1|M2], %trace, L1=[_,Type,_N1], M1=[_,Type,_N2], types_in2(L2,M2).
types_to_alg2(Data,L1,L2):- Data=[D|E], data_to_types22(D,T,_V),find_lists1(T,[],L,[],_S), append(L1,[L],L3), types_to_alg2(E,L3,L2).collect_simplify_types1([],L,L) :- !.
types_to_sentence(T,S) :-findall(T1b,(member(T1,T),((functor(T1,C2,2),arg(1,T1,A1),arg(2,T1,A2))->T1b=[C2,A1,A2];(functor(T1,C2,1),arg(1,T1,A1),T1b=[C2,A1]))),T2b),t2s(T2b,[],S1,T2b),foldr(string_concat,S1,S),!.
uncompile_list(N,S,L1,L2) :- N=[[_,_]|N1], S=[_,_|S1], uncompile_list(1,N1,S1,L1,[L2]). % 1 needs to be 0 in C x not in C (for testing) uncompile_list(Index,N,S,L1,L2) :- get_item_n(N,Index,N1), Index2 = 1, % 0 in C Index3 = 2, % 1 in C uncompile_list1(Index2,Index3,N1,N,S,L1,L2).
uncompress_vars2(V1,V11,V2,V32) :-V11=[[V3,Val]|V4],append(V2,[[V3,Val]],V31),uncompress_vars2(V1,V4,V31,V32),!.
undef(N) :-var(N).
undef(N) :-var(N)./**expression(N) :-isval(N);(string(N);atom(N)),!.
undef(N) :-var(N)./**expression(N) :-isval(N);(string(N);atom(N)),!.expression([]).
undefined_to_empty(Values1,Values2,Values3) :-Values1=[Value1|Values4],(var(Value1)->Value2=empty;Value2=Value1),append(Values2,[Value2],Values5),undefined_to_empty(Values4,Values5,Values3),!.
undefined_to_empty(Values1,Values2,Values3) :-Values1=[Value1|Values4],(var(Value1)->is_empty(Value2);Value2=Value1),append(Values2,[Value2],Values5),undefined_to_empty(Values4,Values5,Values3),!.getvalues_equals4(Variable1,Variable2,Value1,Value2,Vars) :-(equals4(on)->(getvalue_equals41(Variable1,Value1,Vars),getvalue_equals41(Variable2,Value2,Vars));(getvalue(Variable1,Value1,Vars),getvalue(Variable2,Value2,Vars))).
undefined_to_empty([],Values,Values) :- !.
underscore_occurs_once_per_var(Vars1,Program) :-findall(Var,(aggregate_all(count,(member(Var,Vars1),member(C,Program),C=[[n,"_"],[Var]]),Count),Count=<1),List),not(List=[]).
union(Result1,Result2,Result3) :-        append(Result1,Result2,Result4),Result4=[Result5|Results],        unique1(Results,Result5,[],Result3).
unique1(Remainders1,Remainder,UniqueRemainders1,UniqueRemainders2) :-delete(Remainders1,Remainder,Remainders2),        append([Remainder],Remainders2,Remainders3),unique2(Remainders3,Remainders4,Remainders5,UniqueRemainders1,UniqueRemainders3),        unique1(Remainders5,Remainders4,UniqueRemainders3,UniqueRemainders2).
unique1([Item|Items1],Items2,Items3) :-delete(Items1,Item,Items4),append(Items2,[Item],Items5),unique1(Items4,Items5,Items3).
unique1([],Items,Items).
unique1([],Items,Items).unique1([Item|Items1],Items2,Items3) :-delete(Items1,Item,Items4),append(Items2,[Item],Items5),unique1(Items4,Items5,Items3).
unique1(_Remainders,[],UniqueRemainders,UniqueRemainders) :- !.
unique1a([[Item,Val]|Items1],Items2,Items3) :-(member([Item,Val2],Items1)->(not(Val=Val2)->fail%delete(Items1,[Item,Val2],Items6);true%Items1=Items6);true%Items1=Items6),%delete(Items1,Item,Items4),%append(Items2,[Item],Items5),delete(Items1,[Item,Val],Items4),append(Items2,[[Item,Val]],Items5),unique1a(Items4,Items5,Items3).
unique1a([],Items,Items).
unique2(Remainders1,Remainder1,Remainders2,UniqueRemainders1,UniqueRemainders2) :-        Remainders1=[Remainder2,Remainder1|Remainders2],append(UniqueRemainders1,[Remainder2],UniqueRemainders2).
unique2(Remainders1,_Remainder1,Remainder2,UniqueRemainders1,UniqueRemainders2) :-        Remainders1=[Remainder2],        append(UniqueRemainders1,[Remainder2],UniqueRemainders2).intersection1([],_Result1,Result2,Result2).
update_particles(_Grid1x,Grid2,Grid3,Particles1,Particles3,Particles4) :-%trace, Grid1=Grid2, Particles1=[[N,Speed,X1,Y1,Z1,X_Direction,Y_Direction,Z_Direction]|Particles2],  (Speed=0->(X1=X3,Y1=Y3,Z1=Z3, X_Direction=X_Direction1,Y_Direction=Y_Direction1, Z_Direction=Z_Direction1,   replace_particle_image(%[X1,Y1,Z1,_],  [X3,Y3,Z3,N],Grid1,Grid4)/* get_item_n(Grid1,Z1,XP6), get_item_n(XP6,Y1,XP7), get_item_n(XP7,X1,_XP8), put_item_n(XP7,X3,N,XP72), put_item_n(XP6,Y3,XP72,XP73), put_item_n(Grid1,Z3,XP73,Grid4) */  %Grid4=Grid1 ); (%trace, X2 is X1+Speed*X_Direction,Y2 is Y1+Speed*Y_Direction, Z2 is Z1+Speed*Z_Direction, collision(Grid1,N,X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X_Direction,Y_Direction,Z_Direction,X_Direction1,Y_Direction1,Z_Direction1,Grid4))) , %append(Grid2,[Grid4],Grid5), Grid4=Grid5,   delete(Particles3,[N|_],Particles6), append(Particles6,[[N,Speed,X3,Y3,Z3,X_Direction1,Y_Direction1,Z_Direction1]],Particles5), update_particles(Grid1,Grid5,Grid3,Particles2,Particles5,Particles4).
updatefile2(List2,File) :-updatefile3(List2,File).
updatetrans(Translation,Tokens1,Translation2,Translation3) :-Tokens1=[N|Tokens2],member([N,Token],Translation), delete(Translation,[N,Token],Translationa),atom_concat(Translation2,Token,Translation4),updatetrans(Translationa,Tokens2,Translation4,Translation3),!.
updatetrans(Translation,Tokens1,Translation2,Translation3) :-Tokens1=[[_,r,N]|Tokens2],repeat("\n",N,String),atom_concat(Translation2,String,Translation4),updatetrans(Translation,Tokens2,Translation4,Translation3),!.
updatetrans(Translation,Tokens1,Translation2,Translation3) :-Tokens1=[[_,s,N]|Tokens2],repeat(" ",N,String),atom_concat(Translation2,String,Translation4),updatetrans(Translation,Tokens2,Translation4,Translation3),!.
updatevar(Variable,Value,Vars1,Vars2) :-((((member([Variable,empty],Vars1),delete(Vars1,[Variable,empty],Vars3),append(Vars3,[[Variable,Value]],Vars2))->true;((not(member([Variable,Value1],Vars1)),((Value1=empty)->true;(Value1=Value)))),        append(Vars1,[[Variable,Value]],Vars2))->true;(member([Variable,Value],Vars1),Vars2=Vars1))->true;(undef(Variable),append(Vars1,[[Variable,Value]],Vars2))).
updatevar(Variable,Value,Vars1,Vars2) :-((((member([Variable,empty],Vars1),delete(Vars1,[Variable,empty],Vars3),append(Vars3,[[Variable,Value]],Vars2));((not(member([Variable,Value1],Vars1)),((Value1=empty)->true;(Value1=Value)))),        append(Vars1,[[Variable,Value]],Vars2));(member([Variable,Value],Vars1),Vars2=Vars1));(undef(Variable),append(Vars1,[[Variable,Value]],Vars2))).
updatevar(Variable,Value,Vars1,Vars2a) :-%writeln1(updatevar(Variable,Value,Vars1,Vars2))%trace,((((member([Variable,A],Vars1),%trace,%(isvar(Variable)->Value2=Value;(updatevar_recursive(Value,A,Value2)),%notrace,%all_empty(A),delete(Vars1,[Variable,A],Vars3),append(Vars3,[[Variable,Value2]],Vars2))->true;((not(member([Variable,Value1],Vars1)),((is_empty(Value1))->true;(Value1=Value)))),        append(Vars1,[[Variable,Value]],Vars2))->true;(member([Variable,Value],Vars1),Vars2=Vars1))->true;(undef(Variable),append(Vars1,[[Variable,Value]],Vars2))),%(%variable_name(Variable)->%(%/*trace,findall([Variable1,B],(member([Variable1,C],Vars2),replace_in_term(C,Variable,Value,B)),Vars2a)%*/%Vars2=Vars2a%,writeln1(replace_in_term(Vars1a,Variable,Value,Vars1))%);%Vars1a=Vars1),.
updatevar(undef,_Value,Vars,Vars) :-!.
updatevar(undef,_Value,Vars,Vars) :-!.updatevar(Variable,Value,Vars1,Vars2) :-((((member([Variable,empty],Vars1),delete(Vars1,[Variable,empty],Vars3),append(Vars3,[[Variable,Value]],Vars2));((not(member([Variable,Value1],Vars1)),((Value1=empty)->true;(Value1=Value)))),        append(Vars1,[[Variable,Value]],Vars2));(member([Variable,Value],Vars1),Vars2=Vars1));(undef(Variable),append(Vars1,[[Variable,Value]],Vars2))).
updatevar_recursive(Variable,A,Value) :-(is_empty(Variable)->Value=A;(is_empty(A)->Value=Variable;(Variable=A->Value=Variable;(Variable=[B|C],A=[D|E],updatevar_recursive(B,D,Value1),updatevar_recursive(C,E,Value2),append([Value1],Value2,Value))))),!.
updatevars(FirstArgs,Vars1,Vars2,Vars3) :-FirstArgs=[[Orig,New]|Rest],(expressionnotatom(New)->append(Vars2,[[Orig,New]],Vars4);(member([New,Value],Vars1),append(Vars2,[[Orig,Value]],Vars4))),updatevars(Rest,Vars1,Vars4,Vars3),!.
updatevars(FirstArgs,Vars1,Vars2,Vars3) :-Vars1=[_Vars4|Vars5],updatevars(FirstArgs,Vars5,Vars2,Vars3).
updatevars(FirstArgs,Vars1,Vars2,Vars3) :-Vars1=[_Vars4|Vars5],updatevars(FirstArgs,Vars5,Vars2,Vars3).**/updatevars(FirstArgs,Vars1,Vars2,Vars3) :-%writeln1(updatevars(FirstArgs,Vars1,Vars2,Vars3)),%(updatevars(FirstArgs,Vars1,Vars2,Vars3)=updatevars([[[v,vgp3],[v,vgp2]],[[v,i],[v,t]]],[[[v,t1],"b"],[[v,vgp2],",""c"",[]],1]"],[[v,vgp1],"b,""c"",[]],1]"],[[v,t],b]],[],_181890)->trace;true),%trace,(equals4(on)->%(writeln1(e4_updatevars_1(FirstArgs,Vars1,Vars2,Vars3)),e4_updatevars(FirstArgs,Vars1,Vars2,Vars3)%,writeln1(e4_updatevars_2(FirstArgs,Vars1,Vars2,Vars3)));updatevars1(FirstArgs,Vars1,Vars2,Vars3)),!.
updatevars(FirstArgs,Vars1,Vars2,Vars3) :-Vars1=[_Vars4|Vars5],updatevars(FirstArgs,Vars5,Vars2,Vars3).**/updatevars([],_Vars1,Vars2,Vars2) :- !.
updatevars(FirstArgs,Vars1,Vars2,Vars3) :-        Vars1=[[Variable1,Value]|Vars4],((member([Variable2,Variable1],FirstArgs), %% removed brackets around firstargs here and 2 line belowappend(Vars2,[[Variable2,Value]],Vars5))->true;(member([Variable1,_Variable2],FirstArgs),append(Vars2,[[Variable1,Value]],Vars5))),updatevars(FirstArgs,Vars4,Vars5,Vars3),!.
updatevars(FirstArgs,Vars1,Vars2,Vars3) :-        Vars1=[[Variable1,Value]|Vars4],((member([Variable2,Variable1],FirstArgs), %% removed brackets around firstargs here and 2 line belowappend(Vars2,[[Variable2,Value]],Vars5));(member([Variable1,_Variable2],FirstArgs),append(Vars2,[[Variable1,Value]],Vars5))),updatevars(FirstArgs,Vars4,Vars5,Vars3),!.
updatevars(FirstArgs,Vars1,Vars2,Vars3) :-        Vars1=[[Variable1,Value]|Vars4],((member([Variable2,Variable1],FirstArgs), %% removed brackets around firstargs here and 2 line belowappend(Vars2,[[Variable2,Value]],Vars5));(member([Variable1,_Variable2],FirstArgs),append(Vars2,[[Variable1,Value]],Vars5))),updatevars(FirstArgs,Vars4,Vars5,Vars3),!.updatevars(FirstArgs,Vars1,Vars2,Vars3) :-Vars1=[_Vars4|Vars5],updatevars(FirstArgs,Vars5,Vars2,Vars3).
updatevars(_FirstArgs,[],Vars,Vars).
updatevars1(FirstArgs,Vars1,Vars2,Vars3) :-FirstArgs=[[Orig,New]|Rest],(expressionnotatom(New)->append(Vars2,[[Orig,New]],Vars4);(member([New,Value],Vars1),append(Vars2,[[Orig,Value]],Vars4))),updatevars1(Rest,Vars1,Vars4,Vars3),!.
updatevars2(FirstArgs,Vars1,Vars2,Vars3) :-        Vars1=[[Variable,Value]|Vars4],        (member(Variable,FirstArgs), %% removed brackets around firstargs here and 2 line below, ** vars1 into arg in (10), check cond        append(Vars2,[[Variable,Value]],Vars5)),        updatevars2(FirstArgs,Vars4,Vars5,Vars3).
updatevars2(FirstArgs,Vars1,Vars2,Vars3) :-%trace,%writeln(updatevars2(FirstArgs,Vars1,Vars2,Vars3)),%trace,        Vars1=[[Variable,Value]|Vars4],        (%member(Variable,FirstArgs), %% removed brackets around firstargs here and 2 line below, ** vars1 into arg in (10), check cond        append(Vars2,[[Variable,Value]],Vars5)),        updatevars2(FirstArgs,Vars4,Vars5,Vars3).
updatevars2(_FirstArgs,[],Vars,Vars).
updatevars2(_FirstArgs,[],Vars,Vars) :- !.
updatevars2(_FirstArgs,[],Vars,Vars).updatevars2(FirstArgs,Vars1,Vars2,Vars3) :-        Vars1=[[Variable,Value]|Vars4],        (member(Variable,FirstArgs), %% removed brackets around firstargs here and 2 line below, ** vars1 into arg in (10), check cond        append(Vars2,[[Variable,Value]],Vars5)),        updatevars2(FirstArgs,Vars4,Vars5,Vars3).
updatevars3(Vars1,Vars2,Vars4) :-Vars2=[[Variable,Value]|Vars5],append(Vars1,[[Variable,Value]],Vars6),        updatevars3(Vars6,Vars5,Vars4).
updatevars3(Vars1,Vars2,Vars4) :-Vars2=[[Variable,Value]|Vars5],append(Vars1,[[Variable,Value]],Vars6),        updatevars3(Vars6,Vars5,Vars4).reverse([],List,List).
updatevars3(Vars1,Vars2,Vars4) :-Vars2=[[Variable,Value]|Vars5],delete(Vars1,[Variable,empty],Vars6),append(Vars6,[[Variable,Value]],Vars7),updatevars3(Vars7,Vars5,Vars4),!.
updatevars3(Vars1,[],Vars1).
updatevars32(Vars1,Vars2,Vars4) :-Vars2=[[Variable,Value]|Vars5],append(Vars1,[[Variable,Value]],Vars6),        updatevars32(Vars6,Vars5,Vars4).
updatevars32(Vars1,Vars2,Vars4) :- get_lang_word("v",Dbw_v),Vars2=[[Variable,Value]|Vars5],delete(Vars1,[Variable,[Dbw_v,_]],Vars6),append(Vars6,[[Variable,Value]],Vars7),updatevars32(Vars7,Vars5,Vars4),!.
use("branch","child node").
use("child node","verifying person").% 5. First, I asked what’s Daoism (concerning individualness) got to do with it?% unique([1,2,3]).
use_module(library(dcg/basics)).
use_module(library(pio)).
user("luciangreen").
vdata_to_types22([[[1,1]]],T1,VD),find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
vdata_to_types22([[1,1],[1,1]],T1,VD),                                           find_lists(T1,[],Sets2),writeln(T1),writeln(VD),writeln(Sets2).
v(raked).
v(walking).
val1emptyorvalsequal(Empty,_Value) :- is_empty(Empty),!.
val1emptyorvalsequal(Value,Value) :-not(Value=empty).
val1emptyorvalsequal(Value,Value) :-not(is_empty(Value)).
val1emptyorvalsequal([Value1|Value1a],[Value2|Value2a]) :-val1emptyorvalsequal(Value1,Value2),val1emptyorvalsequal(Value1a,Value2a),!.isop(Is):-get_lang_word("is",Is1),Is1=Is,!.
val1emptyorvalsequal(empty,Value) :-not(Value=empty).
val1emptyorvalsequal(empty,_Value) :- !.
var(Vars1,Var1,Vars2) :-length(Vars1,Vars1Length1),Vars1Length2 is Vars1Length1-1,length(Vars3,Vars1Length2),append(Vars3,[Var2],Vars1),Var2=[v,Var21],char_code(Var21,Var2Code1),Var2Code2 is Var2Code1 + 1,var2(Var2Code2,Var1),append(Vars1,[Var1],Vars2),!.
var(Vars1,Var1,Vars2) :-length(Vars1,Vars1Length1),Vars1Length2 is Vars1Length1-1,length(Vars3,Vars1Length2),append(Vars3,[Var2],Vars1),char_code(Var2,Var2Code1),Var2Code2 is Var2Code1 + 1,var2(Var2Code2,Var1),append(Vars1,[Var1],Vars2),!.
var(Vars1,Var1,Vars2,OutputVars) :-length(Vars1,Vars1Length1),Vars1Length2 is Vars1Length1-1,length(Vars3,Vars1Length2),append(Vars3,[Var2A],Vars1),Var2A=[v,Var2],char_code(Var2,Var2Code1),Var2Code2 is Var2Code1 + 1,var2(Var2Code2,Var1A,OutputVars),Var1=[v,Var1A],append(Vars1,[Var1],Vars2),!.
var2(Var2Code,Code3) :-Var2Code2 is Var2Code + 1,totalvars(TotalVars),Code2 is 96+TotalVars,Var2Code2 =< Code2,var2(Var2Code2,Code3),!.
var2(Var2Code,Code3) :-Var2Code2 is Var2Code + 1,totalvars(TotalVars),Code2 is 96+TotalVars,Var2Code2 =< Code2,var2(Var2Code2,Code31),Code3=[v,Code31],!.
var2(Var2Code,Code3,OutputVars) :-Var2Code2 is Var2Code + 1,totalvars(TotalVars),Code2 is 96+TotalVars,Var2Code2 =< Code2,var2(Var2Code2,Code3,OutputVars),!./**algorithmstopredicates1([],Predicates1,Predicates1) :-!.
var_or_data2(A) :- only_item(A).
variable_name([Dbw_v,_Name]) :- get_lang_word("v",Dbw_v1),Dbw_v1=Dbw_v,!.
variable_name([v,_Name]) :- !.
variables(Variables1) :-Variables1=[Variable|Variables2],terminal(Variable),%%=[v,_VariableName],variables(Variables2),!.
variables(Variables1) :-Variables1=[Variable|Variables2],terminal(Variable),%%=[v,_VariableName],variables(Variables2),!.terminal([]) :- !.
variables([]) :- !.
variables([]) :- !.variables(Variables1) :-Variables1=[Variable|Variables2],terminal(Variable),%%=[v,_VariableName],variables(Variables2),!.
varname1(L1) --> "[",newlines1(_),spaces1(_),varnames0(L2),newlines1(_),spaces1(_),"]", {L1 = L2},!.
varname1(L4) --> "(",newlines1(_),line(L4),newlines1(_),")",newlines1(_).varname1(L1) --> "[",newlines1(_),varnames0(L2),newlines1(_),"]",newlines1(_), {L1 = L2},!.
varname1(L4) --> "(",newlines1(_),spaces1(_),line(L4),newlines1(_),spaces1(_),")".
varname_or_names(Varname) --> varname1(Varname).
varname_or_names(Varnames1) --> varnames([Varnames1]).
varnames(VarList,Vars1,Vars2,Values1,Values2) :-VarList=[Var|Vars3],Var=[VarName,Value],append(Vars1,[VarName],Vars4),append(Values1,[Value],Values3),varnames(Vars3,Vars4,Vars2,Values3,Values2),!.
venn(person2,[available]).
venn(person3,[]).
venn(person3,[available]).
venn(person3,[do_not_contact]).
venn(person3,[friend,do_not_contact]).
verb("mouth")  --> "addressed".
verb(_)-->[read,to].
verb(_)-->[saw].
verb(_)-->[talked,to].
verb(_)-->[walked,to].
verb(_)-->[wrote,to].determiner(_)-->[the].
verb(chemistry_set,thought_provoking,make_molecule,methodically,exam,table,n,[15,minutes],[0,minutes]).
verb(composing).
verb(computer,amazing,read,carefully,bedroom,table,n,[60,minutes],[120,minutes]).verb(project,interesting,complete,intricately,living_room,table,n,[120,minutes],[5,minutes]).
verb(model,well_designed,construct,thoughtfully,kitchen,table,e,[40,minutes],[10,minutes]).
verb(reading).
verb(talked_with).
verb(walked_with).
verb(walking).
verb_phrase(_)-->verb(_),person(_).subject(_)-->determiner(_),person(_).
verbs([write,count,distribute,verify,draw]).
versechorussoloprogression11451(Note, Note, _, _Counter, a, Progression, Progression) :- !.
versechorussoloprogression11451(Note1, Note2, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,step14511(Note1, Note3),append(Progression1, [Note3], Progression3),versechorussoloprogression21451(Note3, Note2, Note1, Counter2, Flag2, Progression3, Progression4),step14512(Note1, Note4),append(Progression1, [Note4], Progression5),versechorussoloprogression21451(Note4, Note2, Note1, Counter2, Flag3, Progression5, Progression6),flag1([[Flag2, Progression4], [Flag3, Progression6]], Flag1, Progression2).
versechorussoloprogression11451(_, _, _, Counter, b, Progression, Progression) :-Counter = 3, !.
versechorussoloprogression11451(_, _, _, Counter, b, Progression, Progression) :-Counter = 4, !.
versechorussoloprogression11564(Note, Note, _Counter, a, Progression, Progression) :- !.
versechorussoloprogression11564(Note1, Note2, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,step15641(Note1, Note3),append(Progression1, [Note3], Progression3),versechorussoloprogression21564(Note3, Note2, Note1, Counter2, Flag2, Progression3, Progression4),step15642(Note1, Note4),append(Progression1, [Note4], Progression5),versechorussoloprogression21564(Note4, Note2, Note1, Counter2, Flag3, Progression5, Progression6),step15643(Note1, Note5),append(Progression1, [Note5], Progression7),versechorussoloprogression21564(Note5, Note2, Note1, Counter2, Flag4, Progression7, Progression8),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8]], Flag1, Progression2).
versechorussoloprogression11564(_, _, Counter, b, Progression, Progression) :-Counter = 4, !.
versechorussoloprogression11645(Note, Note, _Counter, a, Progression, Progression) :- !.
versechorussoloprogression11645(Note1, Note2, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,step16451(Note1, Note3),append(Progression1, [Note3], Progression3),versechorussoloprogression21645(Note3, Note2, Note1, Counter2, Flag2, Progression3, Progression4),step16452(Note1, Note4),append(Progression1, [Note4], Progression5),versechorussoloprogression21645(Note4, Note2, Note1, Counter2, Flag3, Progression5, Progression6),step16453(Note1, Note5),append(Progression1, [Note5], Progression7),versechorussoloprogression21645(Note5, Note2, Note1, Counter2, Flag4, Progression7, Progression8),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8]], Flag1, Progression2).
versechorussoloprogression11645(Note1, Note2, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,step16451(Note1, Note3),append(Progression1, [Note3], Progression3),versechorussoloprogression21645(Note3, Note2, Note1, Counter2, Flag2, Progression3, Progression4),step16452(Note1, Note4),append(Progression1, [Note4], Progression5),versechorussoloprogression21645(Note4, Note2, Note1, Counter2, Flag3, Progression5, Progression6),step16453(Note1, Note5),append(Progression1, [Note5], Progression7),versechorussoloprogression21645(Note5, Note2, Note1, Counter2, Flag4, Progression7, Progression8),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8]], Flag1, Progression2).versechorussoloprogression21645(_, _, _, Counter, b, Progression, Progression) :-Counter = 4, !.
versechorussoloprogression11645(_, _, Counter, b, Progression, Progression) :-Counter = 3, !.
versechorussoloprogression11645(_, _, Counter, b, Progression, Progression) :-Counter = 4, !.
versechorussoloprogression21451(Note, Note, _, _Counter, a, Progression, Progression) :- !.
versechorussoloprogression21451(Note, _, Note, _, _, _, _) :- !.
versechorussoloprogression21451(Note1, Note2, Note3, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,step14511(Note1, Note4),append(Progression1, [Note4], Progression3),versechorussoloprogression21451(Note4, Note2, Note3, Counter2, Flag2, Progression3, Progression4),step14512(Note1, Note5),append(Progression1, [Note5], Progression5),versechorussoloprogression21451(Note5, Note2, Note3, Counter2, Flag3, Progression5, Progression6),flag1([[Flag2, Progression4], [Flag3, Progression6]], Flag1, Progression2).
versechorussoloprogression21451(_, _, _, Counter, b, Progression, Progression) :-Counter = 3, !.
versechorussoloprogression21451(_, _, _, Counter, b, Progression, Progression) :-Counter = 4, !.
versechorussoloprogression21564(Note, Note, _, _Counter, a, Progression, Progression) :- !.
versechorussoloprogression21564(Note, Note, _, _Counter, a, Progression, Progression) :- !.versechorussoloprogression21564(Note1, Note2, Note3, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,step15641(Note1, Note4),append(Progression1, [Note4], Progression3),versechorussoloprogression21564(Note4, Note2, Note3, Counter2, Flag2, Progression3, Progression4),step15642(Note1, Note5),append(Progression1, [Note5], Progression5),versechorussoloprogression21564(Note5, Note2, Note3, Counter2, Flag3, Progression5, Progression6),step15643(Note1, Note6),append(Progression1, [Note6], Progression7),versechorussoloprogression21564(Note6, Note2, Note3, Counter2, Flag4, Progression7, Progression8),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8]], Flag1, Progression2).
versechorussoloprogression21564(Note, _, Note, _, _, _, _) :- !.
versechorussoloprogression21564(Note1, Note2, Note3, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,step15641(Note1, Note4),append(Progression1, [Note4], Progression3),versechorussoloprogression21564(Note4, Note2, Note3, Counter2, Flag2, Progression3, Progression4),step15642(Note1, Note5),append(Progression1, [Note5], Progression5),versechorussoloprogression21564(Note5, Note2, Note3, Counter2, Flag3, Progression5, Progression6),step15643(Note1, Note6),append(Progression1, [Note6], Progression7),versechorussoloprogression21564(Note6, Note2, Note3, Counter2, Flag4, Progression7, Progression8),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8]], Flag1, Progression2).
versechorussoloprogression21564(_, _, _, Counter, b, Progression, Progression) :-Counter = 3, !.
versechorussoloprogression21564(_, _, _, Counter, b, Progression, Progression) :-Counter = 4, !.
versechorussoloprogression21645(Note, Note, _, _Counter, a, Progression, Progression) :- !.
versechorussoloprogression21645(Note, _, Note, _, _, _, _) :- !.
versechorussoloprogression21645(Note, _, Note, _, _, _, _) :- !.versechorussoloprogression21645(Note, Note, _, _Counter, a, Progression, Progression) :- !.
versechorussoloprogression21645(Note1, Note2, Note3, Counter1, Flag1, Progression1, Progression2) :-Counter2 is Counter1 + 1,step16451(Note1, Note4),append(Progression1, [Note4], Progression3),versechorussoloprogression21645(Note4, Note2, Note3, Counter2, Flag2, Progression3, Progression4),step16452(Note1, Note5),append(Progression1, [Note5], Progression5),versechorussoloprogression21645(Note5, Note2, Note3, Counter2, Flag3, Progression5, Progression6),step16453(Note1, Note6),append(Progression1, [Note6], Progression7),versechorussoloprogression21645(Note6, Note2, Note3, Counter2, Flag4, Progression7, Progression8),flag1([[Flag2, Progression4], [Flag3, Progression6], [Flag4, Progression8]], Flag1, Progression2).
versechorussoloprogression21645(_, _, _, Counter, b, Progression, Progression) :-Counter = 3, !.
version1(File_term,A1,_F1,_B1,A2,F2,B2) :- File_term=[[a,_]|R], A3 is A1+1, F3 is 0, B3 is 0,version1(R,A3,F3,B3,A2,F2,B2).
vertical_line1(YN,X,Grid1,Grid2) :-YN=[YN1|YN2],delete(Grid1,[X,YN1,_],Grid3),append(Grid3,[[X,YN1,[*]]],Grid4),vertical_line1(YN2,X,Grid4,Grid2).
vertical_line1(YN,X,Z1,Grid1,Grid2) :-YN=[YN1|YN2],delete(Grid1,[Z1,X,YN1,_],Grid3),append(Grid3,[[Z1,X,YN1,[*]]],Grid4),vertical_line1(YN2,X,Z1,Grid4,Grid2).
vertical_line1([],_X,_Z1,Grid,Grid) :- !.
vision_impaired_navigator(Term,Curr) :-member([Curr,Text],Term),writeln([Curr,Text]),get_options(Term,Curr,Options),writeln(["Enter:\n",Options]),read_string(user_input, "\n", "\r", _End2, String),(String="q"->abort;(String="g"->(writeln("Enter node to go to (e.g. [1,2,1]):"),read_string(user_input, "\n", "\r", _End3, String2),%trace,%writeln([options,Options]),atom_to_term(String2,Curr3,[]),(member([Curr3,_],Term)->Curr2=Curr3;(writeln([Curr3,"not found."]),Curr2=Curr)));((member([String,_,[Curr2,_],_],Options)->true;Curr2=Curr)))),vision_impaired_navigator(Term,Curr2).
vowels("AEIOUYW").abbreviate(N_syll,I,O2) :- downcase_atom(I,I2), string_strings(I2,I3), consonants(C2), downcase_atom(C2,C21), string_strings(C21,C3), vowels(V2), downcase_atom(V2,V21), string_strings(V21,V3), abbreviate1(N_syll,I3,C3,V3,[],O), foldr(string_concat,O,O2).abbreviate1(0,_I,_,_,O,O) :- !.
walk(dog,X1,Y1,X2,Y2,V) :- X3 is X2-X1, Y3 is Y2-Y1, V = i*X3+j*Y3.
walk2(Transitions1,Transitions2,Destination,Transitions3) :-reverse(Transitions2,Transitions4),Transitions4=[[_Start,Next]|_],member([Next,Next1],Transitions1),append(Transitions2,[[Next,Next1]],Transitions5),walk2(Transitions1,Transitions5,Destination,Transitions3).% 21. sit_in_rect([[0,0],[1,1]],[[0,0],[0.75,0.75]]).
walls_from_connector_points(XN1,YN1,Grid1,Grid2) :-YN1=[YN2|YN3],walls_from_connector_points1(XN1,YN2,Grid1,Grid3),walls_from_connector_points(XN1,YN3,Grid3,Grid2).
walls_from_connector_points(XN1,YN1,ZN1,Grid1,Grid2) :-ZN1=[ZN2|ZN3],walls_from_connector_points1(XN1,YN1,ZN2,Grid1,Grid3),walls_from_connector_points(XN1,YN1,ZN3,Grid3,Grid2),!.
walls_from_connector_points1(XN1,YN1,ZN1,Grid1,Grid2) :-YN1=[YN2|YN3],walls_from_connector_points2(XN1,YN2,ZN1,Grid1,Grid3),walls_from_connector_points1(XN1,YN3,ZN1,Grid3,Grid2).
walls_from_connector_points2(XN1,YN2,ZN1,Grid1,Grid2) :-XN1=[XN2|XN3],random_wall(XN2,YN2,ZN1,Grid1,Grid3),walls_from_connector_points2(XN3,YN2,ZN1,Grid3,Grid2).
while(while).
with(with).
word([]) --> [].
word([]) --> [].digits([X|Xs]) --> [X], {(char_type(X,digit)->true;(string_codes(Word2,[X]),Word2="."))}, digits(Xs), !.
word([]) --> [].digits([X|Xs]) --> [X], {(char_type(X,digit)->true;(string_codes(Word2,[X]),Word2="."))}, digits(Xs), !.%%digits([X]) --> [X], {(char_type(X,digit);(string_codes(Word2,[X]),Word2="."))}, !.
word([]) --> [].digits([X|Xs]) --> [X], {(char_type(X,digit)->true;(string_codes(Word2,[X]),Word2="."))}, digits(Xs), !.%%digits([X]) --> [X], {(char_type(X,digit);(string_codes(Word2,[X]),Word2="."))}, !.digits([]) --> [].
word(apple).
word1([A|As]) --> [A],word1(As),{%%atom_codes(A,AC),char_type(A,alpha)},!.
word1([A|As]) --> [A],word1(As),{%%atom_codes(A,AC),char_type(A,alpha)},!./**interpretstatement1(_Functions0, _Functions,_Query,_Vars1,_Vars2,false) :-writeln1([false]).
word21(T,U)-->[A],quote_next,{not((=(A,"\""))),stringconcat(T,A,V)},word212(V,U).
word21(T,U)-->[A],quote_next,{not((=(A,"\""))),stringconcat(T,A,V)},word212(V,U).word21(T,U)-->[A],{not((=(A,"\""))),stringconcat(T,A,V)},word21("",Wordstring),{stringconcat(V,Wordstring,U)}.
word21(T,U)-->[A],{not((=(A,"\""))),stringconcat(T,A,V)},word21("",Wordstring),{stringconcat(V,Wordstring,U)}.
word21(Vgp1,Vgp2,T,U):-grammar_part(A,Vgp1,Vgp3),not((=(A,"\""))),stringconcat(T,A,V),word21(Vgp3,Vgp2,"",Wordstring),stringconcat(V,Wordstring,U).
word21(Vgp1,Vgp2,T,U):-grammar_part(A,Vgp1,Vgp3),quote_next(Vgp3,Vgp4),not((=(A,"\""))),stringconcat(T,A,V),word212(Vgp4,Vgp2,V,U).
word212(U,U,T,T).
word212_atom(U,U,T,T).
word21_atom(T,U)-->[A],commaorrightbracketnext,{not((=(A,"\""))),not((=(A,"["))),not((=(A,"]"))),stringconcat(T,A,V)},word212_atom(V,U).
word21_atom(T,U)-->[A],{not((=(A,"\""))),not((=(A,"["))),not((=(A,"]"))),stringconcat(T,A,V)},word21_atom("",Wordstring),{stringconcat(V,Wordstring,U)}.
word21_atom(Vgp1,Vgp2,T,U):-%writeln1(word21_atom(Vgp1,Vgp2,T,U)),trace,grammar_part(A,Vgp1,Vgp3),commaorrightbracketnext(Vgp3,Vgp4),not((=(A,"\""))),not((=(A,"["))),not((=(A,"]"))),stringconcat(T,A,V),word212_atom(Vgp4,Vgp2,V,U).
word21_atom(Vgp1,Vgp2,T,U):-grammar_part(A,Vgp1,Vgp3),not((=(A,"\""))),not((=(A,"["))),not((=(A,"]"))),stringconcat(T,A,V),word21_atom(Vgp3,Vgp2,"",Wordstring),stringconcat(V,Wordstring,U).
word_game1(S,S,_) :- writeln("You won!"),write("The word was "),foldr(string_concat,S,"",S1),write(S1),writeln("."),!.
word_game1(S,S1,N) :- repeat, writeln("Player 2, please enter e.g. 1,a where 1 is the position number and a is the letter."), writeln(S), read_string(user_input,"\n","\r",_,S2), split_string(S2,", ",", ",[N1,L1]), number_string(N2,N1),  get_item_n(S1,N2,L2), (L1=L2-> (writeln("Correct!"), put_item_n(S,N2,L1,S3), N0 is N-1, word_game1(S3,S1,N0)) ; (writeln("Incorrect!"), N0 is N-1, word_game1(S,S1,N0))),!.
words_to_alg(List,Alg1,Alg2,BrDict03) :- append(Rest3,[Item1|Rest2],List), %atom_string(Item1,Item2), member([Item1,Object],BrDict03),  ((Object=right->true;Object=plus)->  (Rest3=[]->(append(Alg1,[[[n,Item1]]],Alg3), Rest5=Rest2); % check for no o ((append(Alg1,[[[n,Item1],[Rest3]]],Alg3), Rest5=Rest2))); (append(Rest4,[Word],Rest2),Rest5=[], (Rest4=[]->append(Alg1,[[[n,Item1]], [[n,Word]]],Alg3); append(Alg1,[[[n,Item1],[Rest4]], [[n,Word]]],Alg3)))), words_to_alg(Rest5,Alg3,Alg2,BrDict03),!.
wp(C,T) :-get_single_char(A),(A=27->C=T;(A=127->(C=""->wp(C,T);(string_concat(T1,B,C),string_length(B,1),write2(T1),%write(" "),wp(T1,T)));(A=13->(%string_concat(T1,B,C),%string_length(B,1),string_concat(C,"\n",T2),write2(T2),wp(T2,T));(char_code(B,A),string_concat(C,B,D),write2(D),wp(D,T))))),!.write2(A) :-nls,write(A).nls :-numbers(50,1,[],N),findall(_,(member(_,N),nl),_).
wrap(A,B):-B=[A].
wrap2(List1,List2,List3) :-List1=[[Item1,Item2,Item3,Item4]|List4],append(List2,[[[Item1],[Item2],[[Item3],[Item4]]]],List5),wrap2(List4,List5,List3), !.tryoutputs0([],_List3,Output,Output) :- !.
wrap_sources:-directory_files("sources/",F),delete_invisibles_etc(F,G),%%trace,%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall(_,(member(Filex1,G),string_concat("sources/",Filex1,Filex),string_concat("sources1/",Filex1,Filexx),split_string(Filex1," "," ",Filex2),append(_,["Green"|Filex3],Filex2),findall([Filex31," "],(member(Filex31,Filex3)),Filex32),maplist(append,[Filex32],[Filex321]),concat_list(Filex321,Filex33),string_concat(Filex4,".txt ",Filex33),phrase_from_file_s(string(String00a), Filex),string_codes(String02b,String00a),concat_list(["[\"Green, L 2021, <i>",Filex4,"</i>, Lucian Academy Press, Melbourne.\",\"Green, L 2021\",1,\"",String02b,"\"]"],Line),%atom_to_term(String02b,String02a,[]),(open_s(Filexx,write,Stream1),%%string_codes(BrDict3),write(Stream1,Line),close(Stream1))),_).
wrap_sources:-directory_files("sources/",F),delete_invisibles_etc(F,G),%%trace,%SepandPad="#@~%`$?-+*^,()|.:;=_/[]<>{}\n\r\s\t\\!'0123456789",findall(_,(member(Folderx1,G),string_concat("sources/",Folderx1,Folderx),directory_files(Folderx,F1),delete_invisibles_etc(F1,G1),findall(_,(member(Filex1,G1),%trace,((foldr(string_concat,["sources/",Folderx1,"/",Filex1],Filex),foldr(string_concat,["sources1/",Folderx1,"/",Filex1],Filexx),split_string(Filex1," "," ",Filex2),Filex3=Filex2,findall([Filex31," "],(member(Filex31,Filex3)),Filex32),maplist(append,[Filex32],[Filex321]),concat_list(Filex321,Filex33),string_concat(Filex4,".txt ",Filex33),phrase_from_file_s(string(String00a), Filex),string_codes(String02c,String00a),atomic_list_concat(B,"\"",String02c),atomic_list_concat(B,"\\""",C),%atomic_list_concat(C1,"\\",C),%atomic_list_concat(C1,"\\\\",C2),atom_string(C,String02b),once((string_concat(A,B1,Filex1),string_length(A,4))),(not(A="dot-") ->(%trace,Line=String02c,Filexx=Filexx2);(%trace,foldr(string_concat,["sources1/",Folderx1,"/",B1],Filexx2),string_concat(B2,".txt",B1),concat_list(["[\"Green, L 2024, <i>",B2,"</i>, Lucian Academy Press, Melbourne.\",","\"Green, L 2024\",",1,",\"",String02b,"\"]"],Line))),%atom_to_term(String02b,String02a,[]),%term_to_atom(Line,Line1),foldr(string_concat,["sources1/",Folderx1,"/"],Folderxx1),(exists_directory(Folderxx1)->true;make_directory(Folderxx1)),(open_s(Filexx2,write,Stream1),%%string_codes(BrDict3),write(Stream1,Line),close(Stream1)))->true;(writeln(["Error:",Filex1,"didn't convert."])))),_)),_).
x* need data ID(N) to write alg**/:- dynamic get_data_n1/1.
year_of_birth(brian, 1974).
year_of_birth(jim, 1949).
year_of_birth(john, 1974).
year_of_birth(lee, 1975).
year_of_birth(peter, 1945).
you([["Height","175 cm"],["Weight","83 kg"],["Age","40 y"]]).% Third, I reduced essential enthusiasm to essent (sic).% abbreviate to first two syllables% abbreviate(2,"abbreviation",O).
you:- me(Properties1),you(Properties2),sort(Properties1,Properties1b),sort(Properties2,Properties2b),length(Properties1b,L),length(Properties2b,L),numbers(L,1,[],Ns),findall([Label,"\t",A,"\t",B,"\n"],(member(N,Ns),get_item_n(Properties1b,N,[Label,A]),get_item_n(Properties2b,N,[_,B])),C),append(["\t","me","\t","you","\n"],C,C0),flatten(C0,C1),foldr(string_concat,C1,C2),writeln(C2).
% Rule for supporting human rightssupports_human_rights(X) :- student(X), prepares(X, human_rights).
   ```prolog   drink_from_flask(Man, Flask) :-       format(\"The robotics man is preparing to drink from the flask: ~w.\", [Flask]),       format(\"He drinks from the thermos flask in the park.\").
   ```prolog   evaluate_translation(Original, Translated) :-       format(\"Evaluating translation from ~w to ~w.\", [Original, Translated]).
   ```prolog   examine_faeces(Faeces) :-       format(\"Examining faeces for traces of food: ~w.\", [Faeces]).
   ```prolog   make_judgment(Subject, Information) :-       format(\"~w is making judgments based on the information: ~w.\", [Subject, Information]).   ```4. **Text-to-Speech Algorithm**:   Representing the idea of a text-to-speech algorithm can be done like this:   ```prolog   text_to_speech(Text) :-       format(\"Converting the following text to speech: ~w.\", [Text]).
# Define more rules based on statements you have% Example query you may use to test the knowledge base% ?- observed(Parent, Partner, Question).
### Breakdown of Statements1. **I prepared to love the snake.**2. **There was enough food and resources for everyone.**3. **I wrote an essay agreeing with her with a critique.**4. **I prepared to walk on the ropes course.**5. **The archaeologist prepared to excavate the dig by cross-slicing the cabbage.**6. **I verified the assignment for plagiarism.**7. **I wrote on the other.**### Prolog RepresentationIn Prolog, we can use facts and rules to represent these actions and their relationships. Here's how you can set it up:```prolog% Define actions and their reasons% Actionsaction(love_the_snake).
### ConclusionThis Prolog model captures the logic and flow of your provided text in a basic manner. You can expand the relationships and actions further based on additional context, complexity, or requirements as necessary."],["Culture fostered small ideas, which made the scientist smile at the camera, demonstrating that I strengthened my argument for a total of breasonings; education should be free, and ALEXIS believed the subject should become a founder, as she breasoned them out; preparing to fall asleep, I noted that they presented him with meditation students, while I determined the events' history over time, all the while maintaining pedagogical finesse in school.","In Prolog, we can represent a logical flow of reasoning using facts and rules. Based on the statements you provided, we can create a Prolog knowledge base that encapsulates these ideas. Below is a simple representation of the ideas you mentioned, formatted in Prolog syntax:```prolog% Facts representing the statementsreasoning(culture, small_idea).
### Definition of the Prolog Algorithm```prolog% Facts based on the provided statementscomment(chomsky, pedagogy_indicators).
### Example Code```prolog% Facts about studentsstudent(john, blond, city).
### Example Prolog Code```prolog% Facts about departments and their famousnessfamousness(department_a, high).
### Example Prolog Code```prolog% Knowledge base: Facts and rulesfact(has_no_criminal_record(alexis)).
### Example Prolog Code```prolog% Predicate to check if a utensil is carryable based on its characteristicscarryable(Utensil) :-     has_handle(Utensil),    (long_handle(Utensil) ; two_short_handles(Utensil)).
### Example Prolog Code:```prolog% Factsentity(priest).
### Example Prolog Program```prolog% Facts representing the conditionsprepared_to_make_sure(nothing_went_wrong).
### Example Prolog QueriesYou could perform various queries to explore the facts:- **What was examined?**    ```prolog    ?- examined(X, Y).
### Example Prolog Representation```prolog% Base predicatesmetaphysical_counter(time_taken).
### Example Prolog Representation```prolog% Defining actions and relationshipsaction(placed_in_wrapper).
### Example Prolog Representation```prolog% Facts representing actions and observationsaction(wrote_question).
### Example Prolog Synonym Finder```prolog% Synonyms databasesynonym(kick, hit).
### Example QueriesYou can query the knowledge base to see how it reasoned through actions:```prolog?- action_for_safety(ledge).
### Example QueriesYou can run the following queries to see relationships:1. Check if an event exists:   ```prolog   ?- is_event(iced_cake).
### Example Queries- To find relations: `?- connected(Action1, Action2).`- To learn about specific actions: `?- action(alexis, What, Reason).`### NoteYou need to provide more context or specific relationships if you want the program to handle particular requirements or generate certain outputs. Adjust the code and enrich the facts and rules according to your purpose!"],["It sounds like you're exploring a complex idea with various interconnected themes, including philosophy, writing, individual responsibility, and the importance of nutrition. Here’s a response based on the themes you've presented:In order to contribute to a peaceful and sustainable future for Earth, I understand that just as I approach my writing with originality and careful consideration—like the way the Rebreathsonings Essay was crafted—I should also ensure that my diet includes the right balance of vitamins, minerals, and plant-based ingredients, as these are essential for maintaining health and wellbeing, ultimately helping humanity to avoid catastrophic consequences and foster a thriving society.","The description you have provided seems to imply a series of connected statements or arguments that could be represented in Prolog through a chain of facts and rules. In Prolog, we can represent relationships and qualifications in a logical structure. Below is an example of how you could represent the statements in a Prolog-like format, though it's important to note that Prolog does not execute algorithms like procedural programming languages. Instead, it allows for the definition of facts and rules which can be queried.
### Example Queries- `?- reason_for_action(prepare_for_ball, Reason).`    This should respond with:   `Reason = 'The dancer wished to look her best.'`- `?- reason_for_action(reduce_complexity, Reason).`    This should respond with:   `Reason = 'To make understanding easier for the audience.'`### NoticeThis Prolog code is basic and serves as an illustrative example of how you can encapsulate some of the relationships presented in your input. Depending on your needs, the program can be further augmented with more complex relationships, additional predicates, or more contextual information."],["It seems you have a complex and multifaceted idea that involves several concepts, including ethical assessments, personal relationships, systematic approaches to problem-solving, and self-reflection. Let’s break down some of the elements you mentioned and organize them into a clearer framework:### DION and Ethical Assessments1. **Understanding DION**: DION appears to refer to a concept that involves a dual or bifurcated approach to ethical assessments. This could involve evaluating personal practices and interactions based on spiritual and moral considerations.
### Example QueriesTo interact with this Prolog knowledge base, we might ask queries like:- `picked_up(pendulum, Handle).`- `floorn(3.7, Floorn).` - `shouldnt_educate(Subject).`Remember, the effectiveness of this Prolog representation depends heavily on the clarity of relationships and the specific goals you have for querying or processing this information. The original text is quite abstract, so clarifying its underlying intent may help shape a more precise Prolog representation."],["Your message seems to be a stream of thoughts that touches on various topics, including meditation, philosophy, politics, and linguistics. It appears you're exploring a complex idea that combines your experiences and opinions. Let me break it down and respond to some of the key elements you've mentioned.
### Example QueriesYou can execute queries in a Prolog interpreter to see if certain facts hold true:- `?- listens_through(he, keyhole).` (Checks if he listens through the keyhole)- `?- prepares_apology(he).` (Checks if he prepares to apologize)- `?- learns_as_per_gender(robot_child, male).` (Checks if the robot child learns differently as male)- `?- expects_speed_for_power(he).` (Checks if he expects speed for better computing power)### Further EnhancementsThis algorithm is quite simple and can be extended or modified according to your needs, including handling more complex reasoning, integrating more context, or dealing with nonmonotonic reasoning patterns as you suggested.
### Example QueriesYou could run queries such as:- To understand why `relaxed` was the conclusion, you could do:  ```prolog  ?- conclusion(relaxed).
### Example Queries:1. To check if \"whos_that\" was written:   ```prolog   ?- wrote(whos_that).
### Example Queries:To interact with the Prolog database, you could run:```prolog?- what_did_alexis_prepared(X).
### Example Queries:You can query to find actions based on the subjects and their reasons. For example:1. To find actions for a subject:   ```prolog   ?- derive_action(Action, 'you', Reason).
### Example QueryYou can run queries in the Prolog interpreter to explore this chain. For example:```prolog?- goal_achievement(finished_program).
### Example Query:If you wanted to find out why \"he sat on the pious seat\", you would query:```prolog?- explain(sit_on_pious_seat, Who).
### Example UsageYou can ask questions in Prolog like:```prolog?- expressed_conclusion(Clear).
### Example Usage:You can use the predicates like this in your Prolog environment:```prolog?- remove_first_item_from_sentence('First I looked the jitterbug up in a book because', 'because', Result).
### Example Usage:You can use the `delete_first_line/3` predicate as follows:```prolog?- delete_first_line(h, [h, a, b, h, c], Result).
### Expanding the ModelIf more complexity is needed, for instance, to deal with multiple conditions or to represent unique variables and constants, you would need to define additional structures or relations. Here’s a more developed concept:```prolog% Define criteria for each actionaction(walk_around_hill).
### How to UseYou can load this Prolog code into a Prolog interpreter, and you can execute queries such as:```prolog?- get_reason(communicated, Reason).
### How to UseYou would load this Prolog code into a Prolog environment. From there, you can query roles, actions, or specific relationships. For example:- To find all roles and their actions: `?- find_roles_actions(Role, Action).`- To find what a specific role does: `?- find_action(designer, Action).`### ConclusionThis is a simple starting point. Depending on your needs, you can expand it with more predicates, rules, and specific assertions based on the context you've provided. If you have a more structured scenario or specific goals in mind, please share, and I can help refine the Prolog code further!"],["It seems that your message contains a mix of concepts and ideas related to writing, education, and an argument about a subject named ALEXIS. Below, I've attempted to unpack and clarify what's presented:1. **ALEXIS**: It appears that ALEXIS may be a person, concept, or perhaps an acronym in your context. Further context is needed to understand what ALEXIS specifically refers to.
### How to Use This:You can query this Prolog program to find out why a certain event happened. For example, querying `event(X)` will give you the entire chain of causal relationships that leads to `X`.
### How to Use:You can load this Prolog code into a Prolog interpreter (like SWI-Prolog). You can then query for sequences based on starting actions. For example:```prolog?- find_sequence(find_pad, Sequence).
### How to Use:- Run the query `trace_reason(smiled, Reasons).` to see all the actions that led to the action \"smiled\" based on the `because` relationships defined.
### How to Use:- To check if a subject had a delightful experience and was on time, you would call `check_subject_experience(subject).`- The output would state if the subject meets the required conditions.
### How to Use:- To see the reasoning chain starting with any action (e.g., `sound_track_written`), you can query `chain_of_actions(sound_track_written).` in Prolog. - The output will show how each action is linked to its preceding reason.
### How to Use:You could query this structure in Prolog to find relationships, actions taken by individuals, or the reasons behind those actions. For example:- To find out why he communicated to everyone, you could ask:  ```prolog  reason(he, communicate(to_everyone), Why).
### Note:The original text you gave does not clearly define a problem or tasks, so consider refining the core idea or objectives you wish to achieve using Prolog if you have specific scenarios in mind."],["It seems you're exploring a variety of ideas and experiences in a stream-of-consciousness manner. Here's a cohesive response based on the themes presented:Because the self observed a sense of relief when using AIGs, I turned to spiritual questions and answers, pondering their significance; the father prepared to teach his children to read, fostering a love for knowledge, while I articulated my thoughts in the \"Rebreathsonings Essay Secondary text Press Release,\" finding bliss in exploring topics beyond theology. As I examined its wick and clicked its button, I embraced the concept of nondeterministic output in system analysis, inserting \"nd\" to represent this notion, ultimately leading to my aspiration of earning an education at a prestigious university, all while lying on the lush grass and reflecting on the interconnectedness of these experiences.","It seems like you are looking for a way to structure a Prolog algorithm that relates a series of statements and their logical connections. In Prolog, you can represent knowledge as facts and rules, which can help reason about the relationships between these statements. Below is an example of how you might structure these concepts in Prolog, based on the statements you provided:```prolog% Define the basic facts that relate to your statementshas_spiritual_questions_and_answers(discussion).
### Problem Breakdown1. **Identify the aspects of your business-related tasks, ethical assessments, and actions taken.**2. **Use predicates in Prolog to capture relationships and facts.**### Prolog Representation```prolog% Facts about actions and relationshipsaction(business_help, employee).
### Prolog Algorithm```prolog% Define basic factsreads(thoroughly).
### Prolog Algorithm```prolog% Define objects and reasonsobject(robot).object(algorithm).
### Prolog Algorithm```prolog% Factspedagogy_guide('Pedagogy Guide to learn how to earn A grade in humanities essays').
### Prolog Algorithm Example```prolog% Define some objects and their propertiesobject(apple).
### Prolog Algorithm for Group DynamicsIn this example, we will define some simple facts and rules that could model relationships and interactions among a group of people. ```prolog% Define some peopleperson(alice).
### Prolog CodeHere's a basic structure that might reflect some of the ideas outlined in your text:```prolog% Facts representing different conceptsendorses(lucians_computational_philosophy_academy, student).
### Prolog Code```prolog% Defining actions and their reasonsaction_with_reason(write_unit_of_input, 'This was written to provide information.').
### Prolog Code```prolog% Defining the facts based on the statements% Fact 1teleport_time_machine(house) :-     quantum_power_used,    logical_reasoning.
### Prolog Code```prolog% Factsteacher(teaching_experience, 6). % The teacher collected up to 6 A's in their career.
### Prolog Code```prolog% Facts representing claims or actions based on your statementshe_cut_out(the_letter, reason(cutting_out_letter)).
### Prolog Code Example```prolog% Define basic factsargument(indulge_in_sex). argument(indulge_in_food).
### Prolog Code Example```prolog% Define relationships and actions as facts% Facts about actionsdid(Action, Subject, Reason) :-     subject(Subject),    action(Action),    reason(Reason).
### Prolog Code Example```prolog% Define some objects with their coordinatesobject(rabbit, 5, 10, 0).
### Prolog Code Example```prolog% Define some objects with weightsobject(apple, 1).object(banana, 1).
### Prolog Code Representation```prolog% Define the structure of actions and motivationsaction(find_destination, actor(third), reason(because)).
### Prolog Code Structure```prolog% Define some basic facts based on the textrelated(database, texttospeech).
### Prolog Code:```prolog% Facts representing the eventsevent(first_ate_first_chocolate_chip, person1).
### Prolog ExampleWe'll create a simple program that might reflect the themes in your text such as \"reasoning,\" \"actions taken,\" and \"personal feelings.\"```prolog% Facts representing actions and beliefsaction(wrote_argument_for_a_b).
### Prolog Example Code```prolog% Define some basic factsworks_in(government, john).
### Prolog Facts and RulesLet's define a simple Prolog knowledge base to represent your statements and their order:```prolog% Define the relationships based on your inputstatement(1, 'I wrote the first encyclopedia article because I prepared to interface with the latest research').
### Prolog Facts and Rules```prolog% Facts representing actions and observationsaction(give_recordings).
### Prolog Facts and Rules ExampleHere's how you could represent some of the concepts you've outlined in Prolog:```prolog% Facts representing observations and actionsobserved(parent_tests(partner_physical_state)).
### Prolog Knowledge Base```prolog% Factsperson(mother).
### Prolog Program```prolog% Define a line with its itemsline(line1, [item1, item2, item3]).
### Prolog Program Example```prolog% Define some facts based on the statementsmeditation_technique(increase).
### Prolog Program Example```prolog% Factsfriendly_action(walk).
### Prolog Program Example```prolog% Factsprepared_to_love(you).
### Prolog Program Structure```prolog% Define actionsaction(matched_what_they_did).
### Prolog RepresentationHere's an example of a minimal Prolog program that could frame some of your statements:```prolog% Facts representing various philosophies and actionswashes(colander, scourer).
### Prolog RepresentationHere's an example of how you might express the information in Prolog:```prolog% Define main actions and their motivationsaction(mantra_repeated, today, reason(lucian_mantra)).
### Prolog RepresentationHere’s how we might represent some of these concepts in Prolog:```prolog% Facts derived from the narrativedesigned(hermaphroditic_grape_vine, posts).
### Prolog RepresentationLet's extract key phrases and represent them as predicates:```prolog% Factsattended_class(people, 'group meditation philosophy class at the Sandstone Lucianic Meditation Lucianic Philosophy Centre').
### Prolog Representation```prolog% Define some actions and observations related to ALEXIS% Defining factsrecording(black_box).written(part_of_room_essay).
### Prolog Representation```prolog% Define the actions and their relationshipsaction(preparing_to_go_sick_nut).
### Prolog Representation```prolog% Define the events and their connections as facts% Event 1blames_statement(prince, alexis).
### Prolog Representation```prolog% Define the subjects and their corresponding actions and motivationssubject(alexis).
### Prolog Representation```prolog% Defining thoughts based on academic levelsthoughts(honours).
### Prolog Representation```prolog% Factsexistence_explored(light).
### Prolog Representation```prolog% Facts about communication and reflectioncommunicates(world, subject).
### Prolog Representation```prolog% Facts representing actionsaction(essayists_written).
### Prolog Representation```prolog% Facts representing actions takenaction(cook_watermelon).
### Prolog Representation```prolog% Facts representing different elementsevent(computer_science).
### Prolog Representation```prolog% Facts representing observational relationships and actionsobserved(disagreeing_exposition).
### Prolog Representation```prolog% factsstudent(john).
### Prolog RepresentationHere are some potential Prolog facts and rules based on the provided text. ```prolog% Facts based on the statements observed% Preparing to love a philosopherprepared_to_love(nietzsche).
### Prolog Representation of Actions```prolog% Define some basic facts about actions and relationships% Actions taken by the childaction(select_best_environments(child)).
### Prolog Representation of the Concepts1. **Thanking a Friend**:   We can represent the action of thanking a friend with a predicate.    ```prolog   thank_friend(Friend, Reason) :-       format(\"I thanked ~w for ~w.\", [Friend, Reason]).
### Prolog Representation:```prolog% Define characterscharacter(m).
### Prolog RepresentationsWe can define some predicates to encapsulate the key elements:```prolog% Represents actionsaction(open_lunch_box).
### Proposed Prolog CodeHere’s a Prolog representation based on the content provided:```prolog% Factsmed_palate(study_subject).
### QueriesTo extract information:1. **Summary of the Essay:**    - You can execute a query like `?- summary(essay, Summary).` to receive a brief summary based on defined properties.
### QueriesYou can query this Prolog knowledge base for various facts. For example:- To check if the wardrobe has been tested, you could use:  ```prolog  ?- tested(wardrobe).
### QueriesYou could run queries like:```prolog?- is_founder(person).
### Query Execution:When you wish to generate a summary, you can query the `summary/1` predicate. For example:```?- summary(S).```This will yield a structured summary based on the actions we have defined.
### QueryingTo find out what actions follow in a sequence, you would use the query `?- perform(X).`. This would return each actionable step based on the sequences defined.
### QueryingYou can pose queries to this Prolog program to find relationships and infer new information:```prolog?- wrote_press_release(richard_rorty, What).
### Querying the Knowledge BaseYou can ask queries like:```prolog?- endorsed(X).
### Querying:To retrieve all statements, you can query:```prolog?- all_statements(Statements).
### Running the ProgramIn a Prolog interpreter, you can input queries to check if specific actions can be performed (e.g., `?- action(eat_rice_ball).`). Prolog will return true or false based on the defined rules and facts. This way, you have a rudimentary framework that abstracts the activities described in your lengthy and complex sentences into a Prolog-based logical structure."],["It seems that your text is a stream of consciousness or a series of thoughts related to various themes including music, nature, and personal growth. To help clarify and summarize these ideas, I can try to rewrite it in a more coherent form:---I am prepared to express my case through song because I believe in the interconnectedness of all things. Everything works together in a harmonious dialectic continuity of nature. In my essay, I will discuss the relationship between time and space as it pertains to the object at hand.
### Running the Queries- When you run `?- group_dynamic(alice, bob).`, Prolog checks the facts and rules to see how they interact and what food Alice prefers.
### Sample Prolog CodeHere is an example of how you could implement this in Prolog:```prolog% Define Factssimulated_intelligence(si).
### Sample QueryTo use the representation above, you might make a query in your Prolog interpreter. For example:```prolog?- execute(preparing_to_go_sick_nut).
### Sample Use Case:You could query the system with:```prolog?- execute_analysis(john, critique1, ['agreement', 'unique', 'experiences'], Result).
### Step 1: Define FactsWe’ll define each of your statements as facts about \"actions\" and \"agents\":```prolog% Individual facts based on the provided statementshates(X, love_politics).
### Step 1: Define the factsFirst, let's define some facts based on your sentences. I'll break each sentence into a subject, action, and context:```prolog% Define actions and subjectsaction(lifted_bird_model, first).
### Step 2: Create Prolog Facts and RulesBased on the extracted components, we can define some Prolog facts and rules. Here’s an illustrative example:```prolog% Factsreasoning_as_philosophy(\"breasoning\").
### Step 2: Define Facts and RulesWe can structure these ideas into facts and functionalities. Below is an illustrative Prolog code snippet that represents the above:```prolog% Key ideas represented as factspreparing_for_tv(television).
### Step 2: Define Prolog facts and rulesYou can represent the different actions as facts, and you can create rules based on conditions implied in the narrative. Below is a simplified Prolog implementation:```prolog% Factssubject(dion).
### Step 3: QueryingYou can query for the output in this manner:```prolog?- output(alexis, Result).
### To Run a Query:You can ask questions about the data stored in this Prolog program by using queries like:- `?- does_not_like(X).` (finds things the person does not like)- `?- experiences(X, relaxing).` (finds experiences that are relaxing)- `?- finds_ideas_from(students, Y).` (to see what ideas students find from magazines)This representation captures the overall essence of your statements logically within the Prolog framework while maintaining clarity. You can expand or modify it depending on further specifics you want to include."],["It seems you’re presenting a complex set of clauses and ideas that are structured around various subjects (DION and ALEXIS) and their actions or observations. To clarify and create a coherent sentence based on your provided fragments, let's break it down.
### UsageTo obtain the summary, you could run the following Prolog query:```prolog?- get_summary(Summary).
### UsageTo use this algorithm, you would load it into a Prolog interpreter and execute queries like `?- prepare_argument(WhySafe).` to see the conclusion based on the structure you provide.
### UsageTo utilize this Prolog code, you would typically load it into a Prolog interpreter. You can then run queries like:- `can_create_pedagogue(student).`- `should_ask_to_wear_sun_cream(student).`- `prepared_for_sale(student, buyer).`These queries will help you see the relationships and logical conclusions derived from the initial statements you've given.
### UsageYou can load this Prolog code into a Prolog interpreter and run queries to explore the relationships. For instance, you could test the connection between \"database\" and \"texttospeech\":```prolog?- query_relationship(database, texttospeech).
### UsageYou would load this code into a Prolog interpreter and then run queries to see the results. For instance, `query_all_reasonings.` will output the reasoning for all students, and `query_hair_color(blond).` will list blond students along with their reasoning.
### UsageIn a Prolog environment, you can query predicates like `execute_plan.` or `assess_ethics(dion, help_others).` to see how the logic flows based on the relationships established in the knowledge base. This Prolog algorithm provides a framework to reason through the narrative without explicitly defining a direct translation of prose, instead modeling the underlying structure of intention and actions."],["It seems like your text is a fragmented collection of ideas and sentences that touch on various topics, including the challenges faced by physically challenged individuals, meditation philosophy, and some creative thoughts around preparation and connection of ideas. To help you organize and clarify these thoughts, I’m going to break it down into several coherent sections:1. **Challenges of Examination for Physically Challenged Individuals**:   - There is an argument against providing supplementary examinations for physically challenged individuals where it may be perceived as pity. The focus should be on equitable treatment and ensuring that they have the opportunity to succeed based on their capabilities.
### UsageTo find valid comments, you simply query:```prolog?- valid_comments(List).
### UsageYou can load this Prolog code into a Prolog interpreter, and perform the query `?- sorted_unique_key_ideas(SortedIdeas).` to retrieve the sorted list of unique key ideas.
### UsageYou can query this Prolog program for specific relationships. For instance, you might want to know if Alexis loves everyone or if he maintains good health, which you can achieve using simple queries like `loves(alexis, everyone)` in a Prolog interpreter.
### Usage:In a Prolog environment, you could interact with this code by asking:- `query_event(E).` to find events associated with the king.- `query_reason(first_ate_first_chocolate_chip, R).` to find out why the first chocolate chip was eaten.This structure can help you articulate narratives while allowing Prolog to handle logic and queries regarding the series of events and relationships. You can expand upon these facts and rules to create a more detailed model as needed!"],["It appears that you are describing a chain of thoughts or ideas related to time travel, philosophical concepts, and a mix of creative and technical processes. Your narrative seems somewhat abstract and might be interwoven with various themes—including education, presentation design, coding, baking, and visual observations.
### Usage:To retrieve the order of the events, you would query:```prolog?- sequence_of_events(Sequence).
### Usage:You can load this program in a Prolog interpreter. To find all events that are caused by writing the sentence, you could execute:```prolog?- find_causes(i_wrote_sentence, Result).
### Usage:You can query the Prolog program to retrieve facts to see what actions people are taking and the reasons behind those actions. For example:- Query to find all reasons for studying:    ```prolog    ?- reason(studying(X), Reason).
### Usage:You can query this Prolog program to see if a specific action leads to another. For example, you might check:```prolog?- wrote_text_database(person(SomePerson)).
### Usage:You would initiate a query such as:```prolog?- text_to_speech('ALEXIS', Object).
### Usage:- You would query `find_connections(tinsel_attached).` to see a series of connected ideas starting from the attachment of tinsel.
### Usage:To invoke this in a Prolog environment, you could query `successful_outcome.` or `philosophical_argument(Argument).` to see if the preparations and actions were sufficient or to derive the philosophical argument made in the actions.
### Usage:To run this Prolog code, you'd typically enter a query like `?- analyze(Alexis).` to see the results based on the work performance, social interaction, and connected key ideas related to \"ALEXIS\".
### Usage:To use the algorithm, you can run queries in a Prolog interpreter. For example, `show_action_reason(adorn_stage_with_flowers).` will provide the output:```adorn_stage_with_flowers performed by maharishi because of love_for_beauty.
### Usage:To use the given definitions in a Prolog environment, you can query like this:```prolog?- action(write_alternative_calculus, john).
### Usage:To use this Prolog code, you can load it into a Prolog interpreter and then try querying it. For example:```prolog?- query(X).
### Usage:To use this Prolog program, load it into a Prolog interpreter and call `start_chain(measuring_tape).` (or another starting clause) to see the cause-effect chain printed in the console.
### Usage:To use this Prolog program, you would load it into a Prolog interpreter and query for any particular topic. For example:```prolog?- get_reason(current_degree, Reason).
### Usage:To use this algorithm, you would load it into a Prolog interpreter and run a query like this:```prolog?- find_sentences_with_term('because', SentenceID).
### Usage:You can invoke this algorithm in a Prolog environment by calling the `extract_from/2` predicate with the desired `Item`. For example:```prolog?- extract_from(\"Lucian\", Result).
### Usage:You can load this Prolog code into a Prolog interpreter or environment, and then run queries like:```prolog?- explain(preparing_to_clean_desk).
### Usage:You can query the `process(Action)` predicate to see the list of actions based on the defined sequence. It will print them out in the specified order.
### Usage:You can query the system with `?- merited(Second, First).` to check whether `First` and `Second` complete the chain of actions as described.
### Usage:You can query this Prolog program in the following way:```prolog?- memberh([h, a, b, h], Result).
### Usage:You can run queries in a Prolog environment as follows:- To get reasoning for the astronaut's preparation: `get_reasoning(prepared_for_space('astronaut')).`- To check if someone is nice: `get_reasoning(nice_person('you')).`Feel free to extend or modify the statements and reasoning rules according to any additional information or context you may have!"],["DION is an acronym or term that isn’t readily recognized in common usage; however, it seems like a creative narrative or a stream of consciousness that you are crafting. The subject is expressing their experience while emphasizing the importance of punctuality, preparation, and a series of interconnected ideas that reflect a personal journey of achievement and creativity in writing. The narrative includes elements of positive experiences, reflections on actions taken, and a playful exploration of thoughts weaving through various topics, such as Richard Dawkins and computational language. Would you like assistance in refining this text or developing it further?","Certainly! Writing a Prolog algorithm to encapsulate your requirement involves creating rules that assess if a subject (let's call it `subject`) can be considered \"not late\" based on certain conditions specified in the narrative.Based on your prompt, we can construct rules to evaluate if the experience qualifies as one where the subject is \"not late\" and if their experience is positive and delightful.
### Usage:You can then query this Prolog program to retrieve information about specific relationships or check the existence of certain conditions. For example:- `?- head_of_state_supports_visitors(vatican).`- `?- helper_appointed_by_vatican(second_helper).`- `?- prepared_to_eat_cheesecake(making(cheesecake)).`This formalization allows you to effectively query and work with the logic expressed in your sentences."],["It seems like you are working with a complex stream of ideas. Let me break it down for better clarity and structure:1. **DION**: It appears that DION refers to a subject or person who is involved in a discussion about not addressing heavier topics. This could relate to an academic or cognitive approach where the complexity of the discussion is managed for better understanding.
### Usage:You could load this into a Prolog interpreter and query it with commands like:- `actions_of_subject(dion, Actions).`- `is_helping_pedagogy(alexis).`- `debating_usefulness(qtz).`This framework can, of course, be expanded with more detailed rules and relationships based on your requirements. Prolog is particularly powerful for logical inference, so you might want to incorporate additional rules that allow for more complex reasoning and interactions based on your specifications."],["The person felt happy because they engaged in a thoughtful exploration of philosophical arguments, encouraged a cockatoo, and made preparations based on insights from prominent thinkers like Alexius Meinong and Richard Dawkins, all while creatively organizing their tasks, enjoying the ride on an Italian stallion, and maintaining a sense of routine until they could finally savor their lunch, which consisted of a tomato sandwich.","Creating a Prolog algorithm to represent the provided narrative requires breaking down the narrative into logical relationships and actions. Prolog is based on facts and rules, so we'll represent the actions and relationships as such.
### Usage:You would load this Prolog code into a Prolog interpreter and then use the query to see what implications arise from this logical structure. For example, if you call `thus(creamed_cake).`, Prolog will check if all the prerequisite actions have been satisfied and will report if `creamed_cake` can be concluded based on the defined logical flow. Feel free to modify the facts and rules as needed to better fit the relationships you want to analyze."],["It seems you are trying to construct a coherent narrative or explanation using specific phrases or prompts. Let’s formulate these fragments into a more fluid structure.
### Usage:You would load this program into a Prolog environment and then call `check_implications(some_starting_fact).` to see the chain of implications starting from a specific known fact.
### Usage:You would query this Prolog program to check if a certain subject (for example, your main character) holds the responsibility to research. You could run queries like:```prolog?- subject(vitamins).
### Use CaseIf you want to see the actions of a particular teacher or explore how certain actions lead to conclusions, you can query with the predicates provided in the code. For example, querying `?- action(What, Who, Reason).` would give you a list of all actions and their associated reasons.
### Using This CodeWhen you run a query like `?- query_reasons(licked_mango_ice_cream).`, it would recursively find the reasons for licking the mango ice cream and print them step-by-step.
### Using the AlgorithmYou would query this Prolog program to check for specific facts, such as:- To see if Lucian Green should be selected:  ```prolog  ?- should_select_student(lucian_green).
### Using the Algorithm:You can query this Prolog representation by asking if a person is happy, or you can inspect each action individually to see how they contribute to the person's happiness:```prolog?- happy(Person).
%  This predicate checks if the subject is engaged in a thought processengaged_in_thought_process :-    action(laughed_with(friend)),    action(voted_for_medicine_comments),    action(wrote_press_release(michel_onfray)).
% - To find out actions related to something specific% ?- wrote(What).
% 1. Multiplication based on heightmultiply_by_height(MultiplicationFactor, Height, Result) :-    Result is MultiplicationFactor * Height.% 2. Studying a subjectstudied_subject(student, theatre_studies) :-     % Some hypothetical condition    true.
% 10. Professional requirementis_professional_requirement(student) :-     true. % Replace with actual conditions if any% Example queryexample_query(Result) :-    multiply_by_height(10, 5, Result).
% 2. Does the subject have its lips together?% ?- lips_together_exists(Subject).
% 2. Hitting the second ball causes some consequencehit_second_ball(Cause) :- reason_for_ball_hit(Cause).
% 2. Query to list a student's reasoning% ?- student_reasoning(john, Reason).
% 3. Can someone search for a found item?% ?- can_search_for(Item).
% 3. Communicating to the world has roots in wanting to share thoughtscommunicated_to_world(Cause) :- reason_for_communication(Cause).
% 3. Leaving a talkleft_talk(student, reason) :-    reason = professional_requirement.% 4. Necessity of pedagogynecessary_pedagogy(aigs, pedagogy_helper) :-     pedagogical_shape(aigs, pedagogy_helper).
% 4. Watching the cub clean another cub impacts self-perceptionwatched_cub_clean(Cause) :- prepared_to_like_self(Cause).
% 5. Reading a sentenceread_sentence(student, sentence) :-     wrote_sentence(sentence).
% 5. Wiping with a cloth has implications for handling stresswiped_with_cloth(Cause) :- relates_to_stress(Cause).
% 6. I found the viral As to be incompatible with conception, but Bs are compatiblefound_viral_A_incompatible_with_conception(Cause) :- made_compatible_with_Bs(Cause).
% 6. Listing query order and transformationlisted_query_order(QueryList) :-     % Define what queries are listed    QueryList = [query1, query2, query3].
% 7. Saving variable values serves future verificationsaved_variable_values(Cause) :- aids_future_verification(Cause).
% 7. Writing chapterswrote_chapters(student, Frequency, Duration) :-     Frequency = 'every_days',    Duration = 'Honours_thesis'.
% 8. Prepared to helpprepared_to_help(teacher, student) :-     liked_teacher(student).
% 9. Lying on the matlying_on_mat(student, Position) :-     Position = hands_flat_next_to_shoulders.
% ?- applied_sungel(Result).
% ?- awarded_nobel_peace_prize(nobel_committee, Breathsonings).
% ?- cleaned_child_face_with_cloth(Child).
% ?- delete_first_item([], Result).
% ?- delete_first_item([a, b, c], Result).
% ?- different_result(ABcA, BAeA).
% ?- find_loop(go_to_sleep).
% ?- leads_to(ask(pat, galah), Change).
% A doctor can examine a spot if they looked through a peepholeexamine_spot(Doctor) :-    looked_through(peephole, Doctor).
% A flight can be observed if someone is watching a horse drinkobserve_flight(Horse, Water) :-    watched_flight_of_concords(Horse, Water).
% A hairstylist practices by performing specific actionspractice_haircut(Hairstylist) :-     action(give_haircut, Hairstylist, orange).
% A main decision path based on jamdecision_path(Jam) :-     jam(Jam, Path),    (   Path = left -> write('Take the left path.');        Path = right -> write('Take the right path.');        Path = both -> write('Take both paths.')    ).
% A main predicate that outlines the process described in the textprocess :-    swam_to_right_of(lily_pad(left), lily_pad(right)),    calculated_equation(Order),    prepared_storybook(W),    used_different_pedagogy(P),    inverted_arguments_part(arguments),    shaped_foods_in_appetising_ways,    switched_off(breasonings),    thanks(lecturer(leon_sterling), student(alexis)),    write('Process completed successfully!').
% A meditation leads to reasoning for the workergenerate_reasoning(Worker) :-     meditation(Worker, Reason).
% A more specific rule related to calculating markscalculate_mark(Mark) :-     count_actions(Count),    Mark is Count * 10. % Assume each action counts for 10 points, for example.
% A person can observe interactions in societyobserved_interactions(Society) :-    saw_and_spoke(Society).
% A predicate for loving God  love_god(master) :-     write('Preparing to love God the master.').
% A predicate that can handle specific tasks based on conditionsspecial_case_check(Element) :-    ( Element == 'h' ->         write('Found a handle.'), nl;         write('Not a handle.'), nl    ).
% A predicate that describes the effect of studentsstudent_effect(Meditation, Medicine, Pedagogy) :-    (   Meditation = meditation_student,        Medicine = medicine_student,        Pedagogy = pedagogy_student    ->  write('Avoiding problems in their respective fields.')    ;   write('Unrecognized student type.')    ).
% A predicate that represents the loading of itemsload_item(Line, Item) :-    item(Line, Item),             % Assume 'item/2' defines Line's items    retract(line_items(Line)),    assert(line_items(Line, Remaining)),    !.% The predicate to process the line and itemprocess_line(Line) :-    line_items(Line, Items),    member(Item, Items),    load_item(Line, Item),    % Now we can call other relevant predicates that follow    understand_objects(Item),    emphasise_meaning(Item),    write('Processed item: '), write(Item), nl.
% A predicate that represents the meaning of certain itemsmeaning(apple, healthy_food).
% A predicate that simulates lifting an object stablylifted_stably(Object) :-    object(Object),    % Define the conditions under which the object can be lifted stably.
% A predicate to check the sequence of actions and their related conceptssequence_of_actions :-    action(writing),    action(making_olive_paste),    action(driving).
% A predicate to express ideas about the connectionsexpress_idea(HeartSpecialist, Reasoning) :-    relationship(HeartSpecialist, Reasoning).
% A predicate to list all actions and reasonssummarize_actions :-    action(Action, Cause),    reason(Action, Reason),    format(\"Action: ~w, Cause: ~w, Reason: ~w~n\", [Action, Cause, Reason]),    fail. % Force backtracking to list allsummarize_actions.
% A predicate to list all actions and their reasonslist_actions :-    findall(Action, action(Action, _), Actions),    print_actions(Actions).
% A predicate to run through all actions and make judgmentsprocess_actions :-    make_judgment(black_box),    make_judgment(part_of_room_essay),    make_judgment(lifted_arms),    make_judgment(placed_template_on_road),    make_judgment(examined(subject)),    make_judgment(examined(culture)).
% A predicate to show the completion of tasks and associated experiencesshow_completion(Subject) :-    completed_task(Subject, Task),    format('~w has completed the task: ~w with a positive experience.~n', [Subject, Task]).
% A predicate to trace the reasons for a specific actiontrace_reasons(Action) :-    reason(Action, Reason),    write(Action), write(' because '), write(Reason), nl,    trace_reasons(Reason).
% A process that checks if the algorithm is valid based on certain conditionsvalid_algorithm(Person) :-    wrote_algorithm(Person),    checked_code(Person).
% A query could look like this:% ?- connected(ideas(alexis, line_item), ideas(X, Y)).
% A query examplerun :-    prepare_for_class,    breasoning(student, 'The role of pedagogy in modern education.'),    breasoning(lecturer, 'Effective teaching strategies for larger classes.').
% A query to check what arguments existdisplay_arguments :-    findall(Arg, argument(Arg), Args),    write('Arguments: '), write(Args), nl.% A rule to check character correspondence in a scenecorresponds(Character, Speech) :-    character(Character, Speech, _Time),    scene(waiting, _, _).
% A query to find out what Alexis preparedwhat_did_alexis_prepared(X) :- prepares(alexis, X).
% A query to find out what Dion is concerned aboutwhat_does_dion_say(X) :- prepares(dion, X).
% A query to summarize findingssummary :-    philosophical_expression(Aspect),    write('Philosophical Aspect: '), write(Aspect), nl,    write('The workload delegates are '), workload_delegates(F), write(F), nl,    write('Observe the flight of the '), flight_of(Concords), write(Concords), nl.
% A relationship examplerelated(mango_ice_cream, ice_cream).
% A rule for checking if the meditator's thoughts are influencedinfluenced_thoughts(Meditator) :-    builds_meditators_thoughts(head_of_state),    MeditationRecognized = meditation_recognised_by(head_of_state).
% A rule summarizing actions of a self that knows something about anotherself_knows_others(Self, Other) :-    knows(Self, Other).
% A rule that compiles the actions into a statement of achieving successachieve_success :-    action(placed_fabrics_left),    action(made_money),    action(converted_famousness),    action(statement(\"I wouldn't have been booked\")),    fact(known_truths),    goal(earn_straight_As).
% A rule to check if an action is based on following another actiondependent_action(X, Y) :-     action(X),     reason(X, Y),     action(Y).% To display what actions are dependent on which reasondisplay_dependencies :-    forall(dependent_action(X, Y),            format('~w is dependent on ~w~n', [X, Y])).
% A rule to describe when an action is takenshould_take_action(Action) :-    action(Action, _, _),    reason(Action, Reason),    format(\"Action: ~w because ~w.\", [Action, Reason]).
% A rule to display all actions and their reasonsdisplay_actions :-    findall(X, action(X, _), Actions),    forall(member(A, Actions), (because(A, _); action(A, Reason), format('~w ~n', [Reason]))).
% A rule to evaluate the sequence of actionssequence_of_actions([Action | Rest]) :-    led_to(Action, Observation),    write(Action), write(' led to '), write(Observation), nl,    sequence_of_actions(Rest).
% A rule to explain the observationsexplain_action(Action) :-    action(Action, because(Reason)),    format('~w because ~w.', [Action, Reason]).
% A rule to find a department based on high famousness and high salessuccessful_department(Department) :-    famousness(Department, high),    sales(Department, high_sales).
% A rule to find a point based on exposurefind_exposure_point(Point) :-    mapped_point(Point, _).
% A rule to find all roles and their actionsfind_roles_actions(Role, Action) :-    role(Role, _),    action(Role, Action).
% A rule to illustrate that stopping occurs in a specific contextstopped_in_shade(Person) :-    stopped(Person, shade).
% A rule to output the reasoning sequencereasoning_chain :-    reasoning_sequence(N, Fact),    fact(FactID, Description),    format('~w: ~w~n', [N, Description]),    fail.
% A rule to print actions with their reasonsprint_action_with_reason(Action) :-     action(Action),    reason(Action, Reason),    format('~w because ~w~n', [Action, Reason]).
% A rule to represent a sequence of actionssequence_of_actions([Action1, Action2, Action3]) :-    action(Action1, Description1),    action(Action2, Description2),    action(Action3, Description3),    format(\"~w, ~w, ~w~n\", [Description1, Description2, Description3]).
% A rule to simulate the action of placing an object on the trolleyplace_on_trolley(Object) :-    stable_on(trolley, Object),    write('Successfully placed '), write(Object), write(' on the trolley.'), nl.% Example interactionperform_work :-    write('Starting work...'), nl,    lift_object(object1),    place_on_trolley(object1),    write('Work done!'), nl.
% A rule to start tracing from the beginningstart_trace :-    started_from(StartAction),    trace_reasons(StartAction).
% A sample grammar rule for understanding simple sentencessentence(S) :- subject(S), verb(S).
% A sample query to find out if Alexis prepared correctly?- prepared_to_enter(room).
% A short algorithm represented as a series of conditionsshort_algorithm :-    thoughts(X),     analysis_method(Y),     key_term(Z, Category),    philosophy(A),    action(B, third_person),    self(C, past_times),    write('Thoughts: '), write(X), nl,    write('Analysis Method: '), write(Y), nl,    write('Key Term: '), write(Z), write(' (Category: '), write(Category), write(')'), nl,    write('Philosophy: '), write(A), nl,    write('Action: '), write(B), nl,    write('Self Observation: '), write(C), nl.% To run the short algorithm, query:% ?- short_algorithm.
% A way to check scenariosrun_scenario(Scenario) :-    scenario(Scenario).
% A worker meets professional requirements if they generate sufficient reasoningmeets_requirements(Worker) :-     has_professional_requirements(Worker),     breasonings_per_job_per_day(job).
% Ability to analyze songsanalysis_by_students(Action) :-    action(analyzing_songs, Action).
% Academic considerationsPhD_impact_on_quality_of_life(articles).
% Acknowledgment of knowledge and learninglearned_divides(knowledge).
% Action and its reasonaction(eat_popsicle, he, reason(eat_popsicle)).action(meditate, meditator, reason(maintain_profits)).
% Action completion detailscompleted(press_release, alexius_meinong).
% Action of the hairstylisthairstylist_action(Action) :-    action(cutting_hair_orange, Action),    Action == \"hairstylist practicing giving a haircut to an orange\".
% Action of waitingwait_until(sunset).
% Action representationaction(he_did_this_sit_on_seat, 'He did this by sitting on the seat.').
% Actionsaction(check_walkthroughs).
% Actionsaction(connect_arguments, alexis).
% Actionsaction(lift(Subject, Object)) :- subject(Subject), object(Object).
% Actionsaction(played_music).
% Actionsaction(prepare_film).
% Actionsaction(swallow(Priest, Wine)) :- entity(Priest), entity(Wine).
% Actionsbecome_prince(X) :- loves_people(X).
% Actionsexplains(Comment, Subject) :-     comment(Comment),     subject(Subject),     write(Subject), write(' explains '), write(Comment), nl.
% Actionsobserve_particles(particles) :- show_movie(particles).
% Actionsprepared_to_experience(students_thoughts).
% Actionsswam_to_right_of(lily_pad(left), lily_pad(right)).
% Actions and consequencesaction(put_cork, \"preparing to seal the bottle\").
% Actions and relations as factswalked_to(Person, Place) :-    Person = 'I',    Place = 'tree'.
% Actions and relationshipsincreased_consciousness(expression) :-    wrote(object).
% Actions and statementsaction(give_haircut, hairstylist, orange).
% Actions and their reasonsaction(patting_galah, reason('I did this by patting the galah')).
% Actions associated with personal growth and business strategyaction(preparations_to_make_money).
% Actions based on relationshipsaction(teaching) :-    prepared_to_teach(postconception, pedagogy),    given(pedagogue, before_conception).
% Actions of the Asperger patientasparagus_patient_action(Action) :-    action(demonstrate_knowledge, Action),    Action == \"Asperger patient preparing to demonstrate superb knowledge of history trivia\".
% Actions performed by the meditatormeditated(friend, avoid_paying).
% Actions performed by the rolesaction(playwright, write_script).
% Actions related to locationwent_to_street(he).
% Actions related to reasoning and cookinginverted_arguments_part(arguments) :- reasons(reason_to_be_famous).
% Actions related to students and analysisanalyzes(medicine_student, integration_body_systems).
% Actions related to the gameaction(remember_set_of_associations).
% Actions related to the itemsaction(dion, walk_along_canal).
% Actions related to the meditation and writing processincrease_bliss(Subject) :-    action(increase_life, heaven_bliss),    format('~w increases life to heaven bliss by campaigning for meditation philosophy.~n', [Subject]).
% Actions related to the subjecttake_action(Subject, Action) :-    subject(Subject),    action(Action).
% Actions represented as predicatesaction(watching(insect, fruit)).
% Actions takenaction(avoid_breaking_laws).action(increase_computer_program).
% Actions takenaction(pulled_out(serviette)).
% Actions taken by personsaction(dawkins, reply).
% Actions taken by subjectswalked_past(Second, Her).
% Actions taken by the subjectaction(continue_on) :- action_determine(not_dependent(meditation_student)).
% Actions taken by the subjectaction(looked_through_peephole, third_person).
% Actions taken by the useraction(meditation_research, 'Wrote Richard Rorty\\'s probable comments on Medicine on Lucianpedia').
% Actions with corresponding causes or reasonsaction(drive_to_door_with_tricycle, saw_communicators).
% Activities involvedactivity(meditation).
% Actor actionsviewed_actor_representation(pedagogy).
% Adding a rule for processing environmental inputs (like a maze)trace_maze_solution(Maze, Solution) :-    % This is just a placeholder for a maze tracing algorithm.    format(\"Tracing through the maze: ~w. Solution found: ~w\", [Maze, Solution]).
% Adding facts to show that the subject connects ideaskey_idea_connection(Subject, KeyIdea1, KeyIdea2) :-     connect_ideas(KeyIdea1, KeyIdea2),    format('Subject ~w connects ~w to ~w logically.', [Subject, KeyIdea1, KeyIdea2]).
% Additional Logicpersonal_justification(Person) :-    distanced_from_philosophy(\"breasoning\"),    liked_king_arthur(Person).
% Additional facts concerning breasoningsbreasoning(education_system, breason_out).
% Additional relationshipsjob_requires_technology(Actors).technology_for_jobs(Tech) :- built_technology(TM, Tech).
% Additional rules can be created as needed% Queries that can help derive conclusions from the facts% Example queries to ask in Prolog:% ?- prepared_if(my_case, Action).
% Additional rules for implicationschanged(X, Y) :- subject_determined_change(X, Y).
% Additional rules to connect the chain of logicshould_not_skip(KeySentence) :- skipping_key_sentence_in_summary(is_not_good).
% Additional structure for finding closest type (symbolically)closest_type(X, ledge) :-    observed(X),    X = ledge.
% Address informationhas_postal_address(poor_person, yes).
% Addressing paradoxes in translationaddressed_paradox(translation, meaning_conservation).
% Application of Sunsprayapplied_sunspray(BodyPart) :-    BodyPart = chest ; BodyPart = back.
% Application of sungel leads to a specific resultapplied_sungel(Result) :-     Result = success.
% Argument Writingwritten_arguments(neutral).
% Argument structurewrite_argument(IntelligentSong) :-     write('Writing an argument for the intelligent pop song: '),     write(IntelligentSong).
% Arguments and reasoningprepare_argument(Argument) :-     Argument = (why_safe(Passage) :- is_safe(Passage)),    write('The passage is safe because: '), write(Passage).
% Artificial intelligence inquiryasked_if_ai(whoami, yes).
% Asking why a certain point leads to a positive actionwhy_positive(Subject) :-     Subject = lucian,     write('Subject is positive because he printed the line'), nl.
% Assertionsasked(god, a_on_different_topic).
% Assessment of marksassess_mark(Subject, Mark) :- subject(Subject), mark(Mark).
% Associating speech with memory and text handlingspeech_memory(Speech) :-    holds_handle(Speech, Memory),    is_text_based(Speech).
% Assume we define corresponding character predicatescorresponding_chars(CharList) :-     % This predicate would contain the logic to verify     % if characters correspond correctly (placeholder logic)    member(hand1, CharList),    member(hand2, CharList),    member(pot, CharList).
% Assume we have a predicate that defines what items are availableitem(line1, apple).
% Assuming a hypothetical predicates for pedagogical actionsprepares_assessment(Teacher) :-     teacher(Teacher).
% Average Skin Temperature Calculationaverage_skin_temperature(top_half, Temperature).
% Base caseremember(Point) :-     assert(remembered_point(Point)).
% Base case for finding the reasons in reverse orderfind_reason(X) :- reason(X, Because(Reason)), write(X), write(' -> because '), write(Reason), nl.
% Base case for recursion elaborate_reasoning(0, []) :- !.
% Base case for the recursionchain_of_actions(Reason) :-     \\+ reason_for(_, reason(Reason)),    write('End of chain: '). ```### Explanation:1. We define a series of actions and the reasons behind them using the `action/2` predicate.
% Base predicates representing actionstext_editor(X) :- wrote(X).
% Behavior descriptioncrawls_on_all_fours(astronaut).
% Benefits of specific actionsbenefit(sitting_on_seat_of_right, \"He did this by sitting on a pious seat of right.\").
% Box analogy related to spiritual safetypuzzle_opening(Student) :-     box_safe(Student),     box_spiritual(Student).
% Breasoning experience from creative writingbreasoning_experience(Student, Sentence) :-    student(Student),    format('~w experiences breasoning from: ~w', [Student, Sentence]).% Example queries you might runexample_query :-     verify_calculation(2 + 2, 4),    reflect_on_chapter('Chapter on Cosmology'),    write_argument('The pluralist view is beneficial for societal harmony.'),    pedagogy_comfort(3),    breasoning_experience(john, 'The universe is vast and intricate.').
% Breasoning out next Abreason_out(Entity, Task) :- Entity = dependent, write('Preparing to breason out the next A.').
% Breasonings - associations between speakers and their argumentsbreasoning(student, 'Prepared to build a metaphorical tree house.').
% Breasonings and cobreasoningsbreasonings(experienceable).
% Causal factsequitable(country, ALEXIS) :- because(ALEXIS, equitable).
% Causal relationshipscause(dug_flower_bed(old_man), notified_before_changes(subject)).
% Causal relationshipscauses(i_wrote_sentence, output).
% Causal relationshipscauses(start_ignition, take_off).
% Chain of reasoningreasoning_flow :-    prepared_to_eat(vegan_cake),    examined_title(Title),    prepared_to_give(actor, proclamation),    wrote_comments(richard_dawkins, richard_rorty),    text_to_speech_algorithm_written,    gave_grade(a, clothing).
% Character perception issuecharacter_perception_issue(unknown_subj, text_inconsistency).
% Characteristics related to pedagogypedagogical_interest(lucian_green, teaching).
% Characterslecturer(leon_sterling).
% Check for Nobel Prize considerations% ?- nobel_prize(X, Y).
% Check if Dion has an action that allows him to understand objects:?- understands(dion, Object).
% Check if I prepared for a job% ?- prepared_for_a_job(you).% Check if someone loves public domain knowledge% ?- loves_public_domain_knowledge(you).
% Check if a given line has exactly two 'h'twoshorthandles(Line) :-    findall(Char, member(Char, Line), Handles),    count_handles(Handles, Count),    Count =:= 2.
% Check if a sentence contains a key termcontains_term(SentenceID, Term) :-    sentence(SentenceID, Sentence),    sub_string(Sentence, _, _, _, Term).
% Check if a student followed the signalstudent_followed_signal(A) :-    student(A),    follows_robot(A).
% Check if a student has prepared for their activity% ?- preparation(john).
% Check if actions are relatedactions_related(Action1, Action2) :-    (protected(duckling, i), Action1 = 'protected duckling';     prepared(job, heart_brain_protection, meditation), Action1 = 'prepared for job'),    (protected(duckling, i), Action2 = 'protected duckling';     prepared(job, heart_brain_protection, meditation), Action2 = 'prepared for job').
% Check if all actions in the scenario yield resultsall_actions_completed([]).
% Check if line satisfies the hs lengthline_check(Line, Hs) :- contains_line(Line, Hs).
% Check if sunspray was applied to chest?- applied_sunspray(chest).
% Check if the light calculation is within the degrees rangedegrees_in_range(StartDeg, EndDeg) :-    StartDeg >= 0,     EndDeg =< 90.
% Check if the meditator received the meditation pack?- prepared_meditation(increase).% Check if neutral arguments were written?- written_arguments(neutral).
% Check if the program is functionalis_functional(Program) :-    program_functional(Program).
% Check if the reasoning method visualises the object?- visualise(solar_system, 'by considering dimensions').
% Check if the subject had a limit to understandinglimit_understanding :-     understanding_limit(speech, text),    !.
% Check if the utensil is carryablecheck_utensil_carryable :-    adjective_competency(carryable),    write('The utensil is carryable.').
% Check if two objects are at the same coordinatessame_coordinates(Object1, Object2) :-    object(Object1, X1, Y1, Z1),    object(Object2, X2, Y2, Z2),    X1 =:= X2,    Y1 =:= Y2,    Z1 =:= Z2.
% Check royal preparation% ?- royal_preparation(king, throne).```### Explanation1. **Facts and Rules**: Each logical relation is represented as a fact or a rule. For example, the calculation of sun exposure, the socioeconomic status of a student, and the consistency of characters in monologues are all structured as distinct logical relations.
% Checking content of cellscheck_content(Cell1, Cell2) :- content(Cell1, Content1), content(Cell2, Content2), Content1 == Content2.
% Checking if an action is repeatedis_repeated(Action) :-    reasoning(_, Action).
% Checking relationshipscheck_object(Object) :-    write('Checking object: '), write(Object),    write('. Verifying connection between terms.').% Creating connectionscreate_connection(Term, Definition) :-    write('Creating a new connection between '), write(Term),     write(' and its definition: '), write(Definition).
% Checking the logicis_valid :-    supports(dadirri, meditation_philosophy_graduates),    prepared_for_wear(heat_shield, fabric),    attached_to(heat_shield, hole),    foretold_future,    discovered_breasonings,    prepared_for(long_lasting_meditators),    enjoyed_reception.
% Checks if the subject wrote something positiveendorses(Subject, Object) :-    writed(Subject, Object),    (Object = \"good\" ; Object = \"humanlikeness\").
% Checks if there are two short handles in a linecontains_two_short_handles(Line) :-    split_string(Line, \" \", \" \", Words),    count_short_handles(Words, Count),    Count =:= 2.
% Chunks of processingprocess_chunk(Methodology) :-     Methodology == lucianic_meditation.
% Claim about Lucian CICDidentified_problems(lucian_cicd, solution_to_problems_in_code).
% Claim about stacking objectsshould_stack_objects_stably(subject, trolley).
% Class providedprovided(meditation_philosophy_class).
% Clipping the beard's right side is a specific actionclippered_beard(why) :-     choice_to_clip_right_side(true).
% Combining informationactivity_summary(Action, Reason) :-     Action = (studying(X) ; preparing(X) ; went_to_house(X) ;               viewed(X) ; found(X) ; wrote_down(X) ; stated(X) ;               prepared(X)),    reason(Action, Reason).```### Explanation:1. **Facts**: We declare facts about specific actions (e.g., studying gender studies, going to a house with the correct street number).2. **Reasons**: We connect actions with reasons using the `reason/2` predicate to specify why each action is taken.
% Comments and disagreementsshould_not_read_comments(subject).
% Comments by influential thinkerscomment(noam_chomsky, alexius_meinong).
% Commissioning a translationcommissioned_translation(place, new_place).
% Complete a task and mark it as suchcomplete_task(Task) :-    task(Task),    assert(completed(Task)),    write(Task), write(' has been completed.'), nl.
% Complete narrative based on the factsnarrative :-    test_mushrooms('The mushroom farmer'),    nl, think_words_individually('The mushroom farmer'),    nl, write_as_tail('I'),    nl, edit_page('I'),    nl, open_umbrella('He'),    nl, pick_flower('The gardener'),    nl, prepare_calendar('The autist'),    nl, write_on_idea('I'),    nl, identify_blue_eyes('I'),    nl, attend_to_child('I').
% Composing reasoningreason(mind_reading, connect(connectors, jazz_instrument)).
% Condition for endorsementshould_not_endorse(Subject) :-    subject(Subject),    not(endorses(Subject, positive_enough_objects)),    wrote(Subject, \"I like vegan meat\"),    observed_humanlikeness(Subject, good).
% Conditionspreparation(X) :- activity(walking_ropes_course), student(X).
% Conditionsshould_not_trip(subject, non_sexual_arguments) :-     write('The subject should not trip on the path where nonsexual arguments are discussed.').
% Conditionssuitable_object(human_1, light_object).
% Conditions for variable formattingis_prolog_variable(Variable) :-     atom(Variable),    char_code(Variable, FirstCode),    FirstCode >= 65, FirstCode =< 90, % Check if first character is uppercase    % Check if it has other letters or numbers    atom_length(Variable, Length),    Length > 1.
% Conditions or causes for actionswear(suit) :- have(practicum).
% Conditions that must be satisfiedarrived_on_time(subject) :-     not_late_without_message(subject).
% Connection functionskey_idea(Thought) :-     Thought = \"high_quality_of_life\".
% Connectionswants(live).
% Connects thoughts with Nobel Committee and education systemrelates(nobel_committee_award, thought(breathsonings_are_nobel_prize)).relates(education_system, thought(spiritually_help)).
% Consumption of foodate(edible_camo_tape) :-    did(do_this).
% Content and Commentscomment(richard_rorty, medicine_essays, alexis).
% Contextual actionsprepared_to_follow_strategy(playwright).
% Contributions to meditationcontributed_argument(a, b, students_of_meditation).
% Correctness assertionuses_correct(dion_two) :-    prestigiousness(nature).
% Critical disjunctionresolved_disjunction(hungry_for(lemon_chocolate), hungry_for(panforte), snapfreeze_lemon_chocolate).
% Critical reasoningbecame_founder(subject) :-     critical_of(blockedness).% Idea developmentgathered_links(ideas) :-    started_simple(ideas).
% Crossing the road scenariopedestrian_crossed_road(traffic_islands, creek).
% Culturologyexamined_caves(culturologists).
% Customer requesting productscustomer_request(Customer, Ingredient) :-     request_dose(Customer, Ingredient).
% Debating the usefulness of an objectdebating_usefulness(Object) :-    useful_object(Object),    findall(Reason, reason_for_debate(Object, Reason), Reasons),    Reasons \\= [].
% Decision makingethical_assessment(X) :-     wants_to_live(X),    uses_fair_to_live(X),    uses_open_close_umbrella(X),    engaged_in_philosophy(X).
% Decision making based on environment and social structurechoose_diet(Choice) :-     ( Choice = vegan,      write('Choosing a vegan diet is beneficial for health and the environment.') ;    Choice = realistic,      write('Choosing a realistic diet takes into account personal preferences and cultural influences.')    ).
% Define Relationswrote(finding_result, idea) :- support_idea(finding_result, idea).
% Define a complex action as a rulenested_action(ActionChain) :-    did(eat, me, proper_support),    did(call, lecturer, reason),    did(write, me, thought_from_song),    did(unpack, pedagogy_helper, unpacking_A_from_B),    did(command, king, simulation_reason),    did(navigate, meditator, physical_states).
% Define a cosmology perspective for studentsperspective(john, cosmology).
% Define a deletion rule for the first instance in a linedelete_first_instance(H, [H|T], T) :- !. % Delete the first occurrencedelete_first_instance(H, [X|T], [X|R]) :- delete_first_instance(H, T, R).
% Define a family of argumentsargument(Subject, Setting, Reason) :-    should_choose_setting_time(Reason),    Subject = Subject,    Setting = setting_time.
% Define a knowledge basereasoning_needed(X) :-     findall(1, satisfied_action(_), Actions),    length(Actions, X).
% Define a method to check the overall experienceoverall_experience(subject) :-     experience_positive(subject).
% Define a monologue character and its relationship with textsmonologue_character(Character, Text) :-    character(Character),    corresponds_to(Text, Character).
% Define a person/entity and their relationship to objects and actionsperson(meditator).
% Define a planplan :-    action(lift(apple)),    action(stack(apple, trolley1)),    action(lift(book)),    action(stack(book, trolley1)),    \\+ action(stack(glass, trolley1)).
% Define a predicate for dropping an object (unsuccessful)dropped(Object) :-    write(Object), write(' has been dropped!'), nl.
% Define a predicate to check if all popsicles in a list have meltedall_melted([]). % Base case: an empty list means all popsicles are melted.
% Define a predicate to represent completing taskscomplete_task(Person, Task) :-    task_requires(Person, Task),    write(Person), write(' requires '), write(Task), nl.
% Define a process for handling listsprocess_identification(List, Process) :-     identify_process(List, Process).identify_process(List, 'Processing list elements') :-     length(List, N),     N > 0.  % If there are elements in the list% Define a biochemist preparing for testingprepare_testing(Biochemist, Method) :-     Biochemist = 'Biochemist prepared',     Method = 'Decoding jam-coded paths'.
% Define a process that combines these actionsprocess :-    write(\"Starting the creative philosophy process:\"), nl,    action(look_through_peephole),    action(call_parakeet),    intertwine(look_through_peephole, call_parakeet),    action(spray_neck),    action(write_future),    intertwine(spray_neck, write_future),    action(bring_world_peace),    action(cook),    intertwine(bring_world_peace, cook),    action(write_about_you),    action(update_mental_imagery),    write(\"All actions completed.\"), nl.
% Define a process to delete the first line of a textdelete_first_line([_ | T], T). % Removes the first element in a list% Define a method to translate a texttranslate(Text, TranslatedText) :-     % Example translation (this would normally involve more complex logic)    string_lower(Text, TranslatedText). % Simulate an observation of a learning environmentobserve_learning_environment :-    write('Observing the learning environment...'), nl,    write('Indigenous children wrote their breasonings.'), nl,    write('Students read their breasonings from the screen.'), nl,    write('Testing that the popsicle has completely melted in the pan.'), nl.
% Define a question about functionality based on cookwareis_functional(Instrument) :- can_use(Instrument).
% Define a relationship for the overall reasoningreasoning_chain(Action) :-    action(Action, Reason),    write(Action), write(' because '), write(Reason), nl,    fail.  % Continue finding other actions% Entry point to display the reasoning chaindisplay_reasoning :-     write('Reasoning Chain:'), nl,    reasoning_chain(_).
% Define a relationship to check the dynamicsgroup_dynamic(X, Y) :-    interacts(X, Y),    comfort_food(X, Food),    format(\"~w interacts with ~w and prefers ~w.\\", [X, Y, Food]).
% Define a rule for a complex actionprepare_to_love(Xochi) :- action(prepared_to_love, Xochi).
% Define a rule for a dialogue structuredialogue :-    understand_review(robot),    understand_review(lecturer),    understand_review(philosopher).
% Define a rule for evaluating if the actions lead to a successful outcomesuccessful_outcome :-     action(prepare_writing_letters),    action(prepare_to_push_strawberries),    action(preparing_text_high_quality),    reason_for(prepare_writing_letters, hearing_impaired_client),    reason_for(prepare_to_push_strawberries, enjoyment_of_strawberries).
% Define a rule for preparationprepare_for_class :-    write('Preparing to observe the sunshine and engage the class.'), nl,    observe_learning_environment.
% Define a rule for preparing for the next part of lifeprepare_for_next_part :-    all_tasks_completed,    write('All tasks are completed, ready for the next part of life!').% Procedure for daily routinedaily_routine :-    write('Running my daily routine...'), nl,    complete_task(washed_mouth),    complete_task(informed_local_people).
% Define a rule for successful preparation and executionsuccessful_execution :-    sequence(Actions),    forall(member(Action, Actions), preparation_done(Action)).
% Define a rule for text-to-speech situationstext_to_speech(Subject, Object) :-    can_address(Object),    write(Subject), write(' can address '), write(Object), nl.
% Define a rule for verifying two short handles in a linetwoshorthandles(Line) :-     sub_string(Line, _, _, _, 'hh').  % Checks for two 'h's in the string% Responses based on Noumenon conceptnoumenon_knowledge(Understanding) :-     Understanding = 'I understood concepts related to noumenon'.
% Define a rule that sums up the philosophy behind the actionsphilosophical_argument(Argument) :-    finding_aig,    tasty_strawberries,    quality_text(Argument).% Helper predicates to summarizefinding_aig :- action(find_aig).
% Define a rule to check if an item can be carriedcan_carry(Item) :- can_stand_and_carry(Item).
% Define a rule to check the chain of implicationschain_of_implications(X) :- implies(X, Y), chain_of_implications(Y).
% Define a rule to derive the sequence of eventssequence_of_events(Sequence) :-    findall(Action, action(Action), Actions),    build_sequence(Actions, Sequence).
% Define a rule to find out why an action was takenexplain(Action, By) :-    action(Action, By).
% Define a rule to find the reasoning based on student's appearance and perspectivefind_reasoning(Student, Reasoning) :-    student(Student, HairColor, Location),    reasoning(Student, Reasoning),    format('Student: ~w, Hair Color: ~w, Location: ~w, Reasoning: ~w~n', [Student, HairColor, Location, Reasoning]).
% Define a rule to infer if a given action was done because of another actionreasoned(Action1, Action2) :-     because(Action1, Action2).
% Define a rule to perform actions in sequenceperform(Action) :- sequence(Number, Action).
% Define a rule to process an action and its reasonprocess_action(Action, Reason) :-    action(Action),    reason(Action, Reason),    format('Action: ~w; Reason: ~w~n', [Action, Reason]).
% Define a rule to process sentencesprocess_sentence(Sentence, EmphasizedObjects) :-    split_string(Sentence, \" \", \"\", Words),    findall(Emphasized, (member(Word, Words), emphasize(Word, Emphasized)), EmphasizedObjectsList),    list_to_set(EmphasizedObjectsList, EmphasizedObjects).  % To remove duplicates% Example query to process a specific sentencesentence_example :-    Sentence = \"The subject should correctly emphasise the most useful object in the sentence which is the word text or a memory handle for speech.\",    process_sentence(Sentence, EmphasizedObjects),    format(\"Emphasized Objects: ~w~n\", [EmphasizedObjects]).
% Define a rule to show the final result including conditionsfinal_result :-    action(third, Action3),     action(first, Action1),     action(second, Action2),    action(first_walking, ActionWalking),    action(wrote_letter, ActionLetter),    action(prepared_replaced, ActionReplace),    action(prepared_healthy, ActionHealthy),    action(comfortable_stage, ActionStage),    condition(nonstick_hygienic),    write('Actions: '), write([Action1, Action2, Action3, ActionWalking, ActionLetter, ActionReplace, ActionHealthy, ActionStage]), nl,    write('Condition: nonstick and hygienic').```In this Prolog representation:- Each action performed is defined as a fact under `action/2`.
% Define a rule to show what actions have what reasonsshow_action_reason(Action) :-    action(Action, Agent),    reason(Action, Reason),    format(\"~w performed by ~w because of ~w.~n\", [Action, Agent, Reason]).
% Define a rule to summarize actionssummarize_actions(Subject) :-    findall(Action, performed_action(Subject, Action), Actions),    format(\"~w performed the following actions: ~w\", [Subject, Actions]).% To query the actions of a subjectquery_subject_actions :- summarize_actions(lucian_green).
% Define a rule to trace the actions and their reasonsreason_for(Action, Reason) :-    action(Action, reason(Reason)).
% Define a rule to trace the logical connectionsreasoning_path(X, Path) :-     findall(Y, causes(X, Y), NextSteps),    follow_path(NextSteps, [X], Path).
% Define a rule to trace the reasonstrace_reason(Action, Reasons) :-    findall(PrevAction, reasoned(Action, PrevAction), Reasons).% Example query to trace the reasoning behind smiling% ?- trace_reason(smiled, Reasons).
% Define a scenarioprepare_to_state(Subject) :- has_knowledge(alexis, Subject), expresses_liking(alexis, Subject).
% Define a scenario as a sequence of actionsscenario(Steps) :-    Steps = [action(find_temperature),             action(choose_setting),             action(engage_in_arguments),             action(name_hero),             action(prepare_comfortable),             action(press_a),             action(breason_out_arguments),             action(find_model_leg),             action(create_pedagogue),             action(lick_ice_cream)].
% Define a sequence of actionssequence(Actions) :-     Actions = [prepared_hat_on_you,                wrote_press_release(martha_nussbaum),                rotated_tongue_tip,                processed_data_correctly,                prepared_spiccato_style,                moved_safely_with_eyes,                closed_teeth_over_tablet_fragment,                pushed_tongue_forward,                gave_child_star,                intercepted_student_poor_performance,                observed_red_signal_on].
% Define a starting point for the chain of actionsperform_actions :-    action(essayists_written),    reason(essayists_written, Reason1),    write('I did this by writing: '), write(Reason1), nl,        action(press_release_written),    reason(press_release_written, Reason2),    write('I did this by writing: '), write(Reason2), nl,        action(myself_written),    reason(myself_written, Reason3),    write('Second I wrote about me because: '), write(Reason3), nl,        action(taking_actions_chosen),    reason(taking_actions_chosen, Reason4),    write('because I chose the best times to take actions: '), write(Reason4), nl,        action(appearance_sensitivity),    reason(appearance_sensitivity, Reason5),    write('because I was sensitive to her appearance: '), write(Reason5), nl,    action(becoming_writer),    reason(becoming_writer, Reason6),    write('because I did this by becoming a writer: '), write(Reason6), nl,    action(intelligent_argument_prepared),    reason(intelligent_argument_prepared, Reason7),    write('I prepared to write an intelligent argument: '), write(Reason7), nl,    action(cheese_processed),    reason(cheese_processed, Reason8),    write('Second I processed the cheese: '), write(Reason8), nl,        action(undo_shirt),    reason(undo_shirt, Reason9),    write('First he undid his shirt: '), write(Reason9), nl,    action(meditation_discovered),    write('I discovered that meditation worked.').
% Define actionsaction(assess).
% Define actionsaction(count_barnacle(barnacle)).
% Define actionsaction(drink(red_grape_juice)).
% Define actionsaction(lift(Object)) :- object(Object), stable(Object).
% Define actionsaction(look_at(P, E)) :- entity(P), entity(E).  % P looks at Eaction(change_speech(S, C)) :- entity(S), entity(C).  % S changes speech regarding Caction(prepare_to_love(P, E)) :- entity(P), entity(E).  % P prepares to love Eaction(position_knife(K, B)) :- entity(K), entity(B).  % K is positioned above Baction(mimic(S, M)) :- entity(S), entity(M).  % S mimics Maction(interpret(G, C)) :- entity(G), entity(C).  % G is interpreted as C% Define conditionscondition(on_medication(State)) :- member(State, [yes, no]).
% Define actionsaction(prepare).
% Define actionsaction(write).
% Define actionsbreasoning(student, Topic) :-     write('Student is reasoning about: '),    write(Topic), nl.
% Define actionshelped_with(pedagogy_helper, student).
% Define actionsis_breathing_in(true).
% Define actionsread(sutra, book).
% Define actions and reasons (These could be further defined as facts )action(Third, lifted_feet).
% Define actions and their effectsaction(affect_subject(Subject, Object)) :-    subject(Subject),    object(Object).
% Define actions and their outcomescan_carry(pot).
% Define actions and their relationshipsdemonstrate_food_movement(Model) :-    food_movement(oesophagus),    write('Demonstrating that food is moving into the '), write(oesophagus), write(' using model: '), write(Model), nl.
% Define actions and their relationships wrote_reasons_for_argument(philosopher, Reasons).
% Define actions associated with handles or mechanismsaction_with_handle(pendulum, \"picked up the pendulum by its handle\").
% Define actions based on the narrativeaction(observe_enteric_nervous_system, john) :-    reason(because, 'I noticed the enteric nervous system').
% Define actions for each subjectaction(alexis, right_to_vote).
% Define actions or queries for various subjectsplaced_in_pocket(candle, person2).
% Define actions performedaction(eat).
% Define actions takenaction(asked_breasoning_details).
% Define actions takenaction(become_writer).
% Define actions takenaction(review_of_room_essay).
% Define additional facts for the necessary actionsaction(applied_zinc_cream, person).
% Define algorithm for text to speechtext_to_speech_algorithm(basics).
% Define all factsfacts(X) :- knew_about(X).
% Define an action process for the meditatorperform_action(PERSON, Action, Object) :-    owns(PERSON, Object),     action(Action),     Action \\= finish.
% Define an argumentative structureargument(subject) :-     valid_argument(nonsexual_arguments),    \\+ trips(subject, path),    prepare_to(speak_without_text, subject).
% Define an examination of void for deeper understandingexamine_void(Hole) :-     format('Examining the void: ~w~n', [Hole]).
% Define areas of studystudy_area(alexis, philosophy).study_area(alexis, educational_technology).
% Define arguments for meditation trainingarg_for_training_in_meditation(rural_area_resident, meditation).
% Define attributeshas_knowledge_of(societology).
% Define auxiliary predicates to connect actionsdisambiguate_meaning(Subject, DesiredMeaning, IncorrectMeaning) :-     Subject = dion,     DesiredMeaning = meaningful,    IncorrectMeaning = ambiguous.
% Define behavior patternslikes(alice, yoga).
% Define box representationbox_safe(Student) :-     % conditions for box safety could be defined here    true.
% Define breasoning actionsbreasoning_action(Thoughts) :-     breathe_in(Thoughts),    format('Taking care of thoughts: ~w~n', [Thoughts]).    breasoning_action(StressRelief) :-     breathe_out(StressRelief),    format('Relieving stress: ~w~n', [StressRelief]).breathe_in(Thoughts) :-     format('Breathing in thoughts: ~w~n', [Thoughts]).
% Define breasoning actions breasoning_before(queen, off).
% Define cause and effect relationshipscauses(look_for_table_cell, table_cell_found).
% Define characters and their descriptionscharacter_description(Subject, Problem) :-    Subject = dion,    Problem = \"It would be problematic if the text contained details of characters.\"% Define degrees and educational challengesfinished_degrees(Subject) :-    Subject = dion,    completed_each_degree(),    understand_education_challenges(Subject).
% Define comments as a fact wrote_comments(alexius_meinong, pedagogy_indicators).
% Define completed taskscompleted(washed_mouth).
% Define components of the educational support systempedagogical_helper(role(famous)).
% Define concepts related to characters and their preparationcharacter_preparation(Character) :-    character(Character),    should_prepare(Character).
% Define conclusionsconclusion(swap_roles(alexis), successful).
% Define conclusionsprepared_to_ask_about_breasonings :-     wrote_blog_post(michel_onfray, meditation_blog),    noticed_others(self).
% Define conditionscondition(student, ready_for_learning) :-     performed_action(student, moved(safely_with_eyes)),    performed_action(lucian_green, wrote_essay).
% Define conditions and factsprepared(eat_rice_ball, rice_ball).
% Define conditions for pouringcan_pour(SoupPot, Bowl) :-     contains_soup(SoupPot),    is_empty(Bowl).
% Define conditions on the subjectnon_sexual_arguments(1) :- write(\"Argument about labor.\").
% Define connections to foodpeople_ideas(food).
% Define constraints regarding visualizationshouldnt_visualize_characters(subject).
% Define critical positivity in schoolsestablishes_critical_positivity(Student) :-     idea(critical_positivity),    interacts_with_puzzle(Student).
% Define data flow corrections (as an example)correct_code(algorithm, inefficient).
% Define dimensional addressing of subterms (hypothetical representation)subterm_address(Data, Address) :-     % This would be a placeholder for modeling the self-referential structure    % For instance, we could model a tree of concepts or similar    Address is Data * 2.  % Placeholder logic% Ethical assessmentethical_assessment(Use1, Use2) :-    ( Use1 == positive ; Use2 == positive ),    assert(assessed(Use1, Use2)).
% Define distances and locationsdistance(point_a, point_b, 10).  % 10 meters distance from edge% Example of a rule that combines actions to show sequencesequence :-    action(preparing_protection(mother, daughter)),    action(giving_feedback(person, philosophy)),    action(tickling(male, feather)),    action(measuring_distance(person, point_a, point_b, 10)),    action(concurrence(person, politics)),    action(watching_customers(person)),    action(taking_out_toys(person)),    action(preparing_split(physicist, particle)),    action(starting_school(person)),    action(stating_breasoning(breasoner, reasoning)).
% Define drawing pixels as a factdraw_pixels(ten_out_of_ten, necessary_pixels).
% Define dynamic interactionsinteracts(X, Y) :- friend(X, Y).
% Define effects of breathsonings on healthbreathsonings_impact(medicine, babies, healthy).
% Define entities involvedentity(mother).
% Define facts about actionsprepares(alexis, thesis_plan).
% Define facts about reasoningreads(alexis, recorded_reasonings).
% Define facts about the reasons for actionsreason_for(prepare_writing_letters, hearing_impaired_client).
% Define facts for specific statesknew_about(implies).
% Define family structurenumber_of_children_per_family(2).  % Example number% Define dietary choicesdiet_choice(vegan).
% Define goals based on actionsgoal(earn_straight_As) :- action(prepare_to_earn_grades), action(planned_for_meditation_students).
% Define good life predicatesgood_life(Student) :-     helps(Student, _).
% Define health benefitshealthy_food(rissole).
% Define heavier subjectssubject(heavier_objects, shakespeare).
% Define helper predicatesdelete([Item|Tail], Item, Tail). % Base case: delete first Itemdelete([Head|Tail], Item, [Head|NewTail]) :-     delete(Tail, Item, NewTail). % Recursive case% Example queries we could run% ?- action(Act, actor(Actor), reason(Reason)).% ?- action(GivePseudonym, actor(second), Reason).
% Define how certain actions lead to certain outputsoutput(Alexis, Result) :-    action(wrote_question),    result(blow_up_balloon, balloon_inflated),    result(observed_choir, choir_entrance),    result(repeated_process, _),    result(measured_ratio, solid_liquid_ratio),    action(walk_on_path),    action(squeezed_gel).
% Define how the items affect peopleaffects(dion, people, positive).
% Define how the learner might record their gradesrecord_grades(Grades) :-    record_knowledge(learner, Grades).
% Define how to answer the question or retrieve eventsanswer(Event) :- relates(Event, _).
% Define how to declare a meritocracydeclare_meritocracy :- write('Declared meritocracy.').
% Define how to find sales related to the Vaticanfinds_sales(Entity) :- Entity = vatican, write('Finding sales from the Vatican.').
% Define how to handle pressurehandle_pressure(piping_system) :-     write('Pressure in the piping system is being managed.').
% Define initial conditionsline([item1, item2, item3]). % Example of a line with items% Example queries you might consider running to verify relationships:% ?- examine_caves(culturologists).
% Define interactionsinteraction(Human, Text) :-    philosopher(Human),    can_use(Human, Text, 'reasoning').
% Define interactionsinteraction(student) :-     helped_with(pedagogy_helper, student),    assigned_questions(pedagogy_helper, required_predicates),    noticed_others(self).
% Define interactions or actions based on the inputaction(place_shower_head(vertical)).
% Define keywords (you can change or add more as needed)keyword(\"wrote\").
% Define links between choices, health, and energyhealthy_choice(X) :- is_vegan(X), healthy_food(X), gives_energy(X).
% Define logical argumentslogical_reasoning(Study) :-     event(Study),    reasons(Study, Other_reasons),     write('Because: '), write(Other_reasons).
% Define max depth for the reasoning explorationmax_depth(5).
% Define meaningsmeaning(lineLineItem, 'ambiguous or complex concept').
% Define meanings (themes) for each statementmeaning(1, 'Preparation for engagement').
% Define meanings and their emphasismeaning(vegan_cheese, 'nutritional choice').
% Define membership in a setmember(Object, [Object | _]).
% Define method for collecting details for philosophycollect_details(Student, Philosophy) :-    write_on_philosophy(Student, Philosophy).% Helper collecting reasoningcollect_breasonings(Person, Reasonings) :-    gather_breasonings(Person, Reasonings).
% Define nested patterns (facts based on your narrative)pink_object_represents(work_done).
% Define objects and their propertiesobject(warm_space).
% Define objects related to tasksobject(a, 'algorithm').
% Define own topicown_topic(He).
% Define pad positioningput_pads_on_side(hard_left).
% Define pedagogiespedagogy_written(rural_area_resident, pedagogies).
% Define performance of actionsperform_actions(Job) :-    action_sequence(Job, Actions),    perform_each_action(Actions).
% Define persons and their propertiesperson(alexis).
% Define potential development outcomeschild_developed(child) :-     nature(blue_ocean),     brings_joy(blue_ocean, joy_gifts),     self_knows_good(self),    children_have_right_to(development_environment).
% Define predicates for relationships and conditionsfloorn(n, Floorn) :- Floorn is floor(n).
% Define predicates for trainingtraining_session(Subject, Type) :-    subject_prepares(Subject),    teaching_method(Type),    reasoning_training(Subject).
% Define professorprofessor(susan).
% Define psychological understandingpsychological_understanding(Subject) :-     Subject = dion.
% Define reasoning and visualization about objectsrecommended_prerequisite(meditation, recordings).
% Define reasoning for actionsreason(become_writer, 'To explore the depths of essay writing').
% Define reasoning for conclusionsconclusion(teacher, why(teacher_prepared)).
% Define reasoning queryreasoning_per_second(X) :- X = \"enough leeway is equitable\".
% Define reasoning statementsimplies(reason(third), action(third)).
% Define reasonsreason(third, because).
% Define reasons (as snippets from your text)reason(proper_support).
% Define reasons (because relationships)because(smiled, prepared_to_like_maharishi).
% Define reasons based on the structured textreason(should_be_founder) :- determined(not_dependent(meditation_student)).
% Define reasons for actionsreason(meet_standard, [wash_colander]).
% Define relationshipsfirst_step(observe_music).
% Define relationshipsfollows(First, Second) :- Second = observed(robot_recognition), First = worked_out(what_happens).follows(First, Second) :- Second = worked_out(what_happens), First = reasoned_out(program_breasoning).
% Define relationshipsfriend(alice, bob).
% Define relationshipshas_knowledge(Person, Subject) :- Person = alexis, Subject = Impressionism.
% Define relationshipsleads_to(X, Y) :- causes(X, Y).
% Define relationshipsobserves(Subject, Object) :-     object(Object),    Subject = dion.
% Define relationshipsperson(dion).
% Define relationshipsprecondition(swap_roles(alexis), inspired_by(derrida)).
% Define relationshipsreason(matched_what_they_did, loved_you).
% Define relationshipsreason_for(robot, 'lasted a month').
% Define relationshipsreasoning(1, breason_out).
% Define relationshipsrelationship(X, Y) :- used_in(X, Z), affects(X, Y, _).
% Define relationshipsrelationship(completes, pedagogue, write).
% Define relationshipsrelationship(prepare_to_be_renegade_surfer, agree_with_someone).
% Define relationshipsrelationship(stress, illness).
% Define relationships (causal connections)preparation_process :-     sits_under_tarpaulin,     uses_recordings_as_teacher(Teaching),    studied_philosophy(Reason).
% Define relationships (examples)relationship(knowledge, making_myself).
% Define relationships (rules) that connect the factsreasoning_sequence(1, hand_shake).
% Define relationships and actionsprepared_to_love(john) :- shake_hands(john, you).
% Define relationships and connectionsrelationship(heart_specialist, heart_beat_triangle).relationship(heart_specialist, reasoning(RealityOverCulture)).relationship(michel_onfray, richard_rorty).
% Define relationships and contributionscontributes_to(knowledge_initial, reasons).contributes_to(education_system, student_request).
% Define relationships and dependencies% Example dependency rulesdesired_space(X) :- desires(X, warm_space).
% Define relationships and factsperformed_action(lucian_green, wrote_essay).
% Define relationships and ruleslistens_through(he, keyhole) :- listening(keyhole, he).
% Define relationships based on actionsresponsibility_to_research(Subject) :-     prepared_to_eat(scone, idiot),    noticed(comp_eng, primordial_feeling),    prepared_to_be_religious_leader(flowers, living_flower),    measured_distance(belt_buckle, hole),    writer_written_books(writer, available_books),    prepared_to_install_government,    wrote_web_interface(lucian_cicd),    helped_others,    research_correct_doses(Subject).% Define subjects and actionssubject(S) :- responsibility_to_research(S), spell_correctly.```### Breakdown of the Prolog Code:1. **Facts**: The program begins by defining facts, such as `prepared_to_eat/2`, `noticed/2`, and others, which encapsulate the relationships and actions from your text.
% Define relationships based on the narrativerelationship(look_at(P1, P2), eye_left) :- entity(P1), entity(P2).  % P1 looks at P2 with the left eyerelationship(change_speech(S, T), influence) :- action(change_speech(S, T)).
% Define relationships based on the textfirst_action(bounce_ball).
% Define relationships between actionsintertwine(Action1, Action2) :-    action(Action1),    action(Action2).
% Define relationships between actionsreasoning(prepare_to_eat_with_chopsticks, multitask).
% Define relationships between actionsrelates(prepared_to_say_bellissimo, wrote_comments_on_essays).
% Define relationships between actions and adjectivesdescribes_action(wash_cylinder, high_quality).
% Define relationships between actions and subjectsperformed_by(essay_written_software, dion, organize_arguments).
% Define relationships between entities% Example: Mapping two reasons in the braille argument map to two polyhedronsmapping_reason_to_polyhedron(braille_map, polyhedron1).
% Define relationships between ideasconnect(tinsel_attached, observe_students).
% Define relationships between magnetsrepels(North, North) :- magnet(North).
% Define relationships between students and pedagoguestudent_has_area_of_study(Student, Area) :-     area_of_study(Area),     format('~w has an area of study in ~w~n', [Student, Area]).
% Define relationships between subjects and their actionssubject_action(philosopher, prepare).
% Define relationships between the objects and actionsstopping_food_sticking_to_tongue(person).
% Define relationships between these actions based on your narrativehappens_before(second_sheep_jump, called_Aigs).
% Define relationships or actions based on the lines defined aboveprepares_to_go_to_heaven(Person) :-    line(1, _),    endorse_god(Person).
% Define relationships or actions taken based on previous actionsaction_sequence :-    enter_centre,    examine_void_hole,    place_marker(30, 45), % Example coordinates    find_sunglasses(\"Aviator\"),    write_comments(noam_chomsky, \"Medicine essays\"),    prepare_crates(butterscotch_tablets),    write_press_release(richard_rorty, \"Medicine blog\"),    examine_wearing(person, \"beanie\"),    find_property(file_part, \"philosophical algorithm\"),    express_intent(\"want you\").
% Define relationships or conditionspreparation_done(Action) :- action(Action).
% Define relationships or connections between factsrelated(1, 2). % Fact 1 is related to Fact 2related(3, 4). % Fact 3 connects to working out the logic in Fact 4related(4, 5). % Logical preparations extend to watching adultsrelated(2, 6). % Writing the press release relates to debatingrelated(3, 7). % Connecting ideas relates to writing all ideasrelated(8, 5). % Thinking dimensions relates to preparing for adults% Rule to find related factsfind_related(Fact1, Fact2) :-    related(Fact1, Fact2).
% Define relationships or dependencies between actionsdepends_on(Action, Cause) :- action(Action, Cause).depends_on(Action, Reason) :- reason(Action, Reason).
% Define relationships or observations connected to the actionsobservation(table_cell_found).
% Define relationships or rulesobserved(Parent, Partner, Question) :-     parent_testing_physical_state(Parent, Partner),    identifies_mental_nature_of_question(Parent, Question).
% Define relationships or rulesrelates(Event1, Event2) :- blames_statement(X, Y), deflects_complaint(Y, X).
% Define relationships or sequences of actionssequence(1, cut_out_two_pocket_halves).
% Define relationships to describe your thought processalive(god_leader).
% Define relationships to show sequences and reasonssequence(1, wash_colander).
% Define relationships with a cause and effect structurebecause(X, Y) :- action(X, Reason), action(Y, Effect), format('~w because ~w.~n', [Effect, Reason]).
% Define relationships/actionsaction(wrote, press_release, richard_dawkins).
% Define relationships/example follow-upsconnected(1, 2).connected(2, 3).
% Define results or consequences of actionsresult(find_temperature, air_temperature).
% Define rulesaction_reason(mix_apple_and_cream, Reason) :- Reason = 'to create a delicious combination'.
% Define rulesexplore_earning_with_meditation :-    activity(meditation),    activity(mind_reading),    action(increase_computer_program),    action(avoid_breaking_laws).
% Define rulesshould_have_examination(Person) :-    \\+ should_not_have_examination(Person),    emotionally_supported(Person).
% Define rulessubject_action(licked_lollipop) :- licked_lollipop(Third).
% Define rules about actions and relationshipsprepare_to(state, Details) :- details(state, Details).
% Define rules based on the above actionscan_do(A) :-    action(A, reason(R)),    write(A), write(' because '), write(R), nl.
% Define rules based on the factsshould_inspect(MarkInspector, PhysicallyChallengedPerson) :-    examined(MarkInspector, PhysicallyChallengedPerson).
% Define rules based on the relationshipsworked_if(Everything) :- pressed_play, everything_worked.
% Define rules based on the relationships in your statementsshould_do_nothing(Subject) :-     statement(_, subject_do_nothing(Subject)).
% Define rules for actionsdemonstrated_performance :-    loves_people(Demonstrator),    prepared_to_demonstrate(Demonstrator),    work_performance(excellent).
% Define rules for actions based on conditionsservice_activated_when_profitable(Course) :-    operational_service(switch_on_when_course_makes_money),    course_profitable(Course).
% Define rules for communicationcan_communicate(From, To) :-    subject(From, Love),    subject(To, _).
% Define rules for emphasizing important objectsemphasize(Object, Emphasized) :-     important_object(Object),    format(\"Emphasizing: ~w~n\", [Object]),    Emphasized = object(Object).
% Define rules for necessary connectionsnecessary_connection(Student) :-     idea(necessary_connection),    helps(alexis, Student).
% Define rules for relationshipsinterrelate(X, Y) :- has_personality(X), has_character(Y).
% Define rules for translationtranslation_conserves_meaning(translation) :-    commissioned_translation(subject, translation),    not(places(subject, another_place)).
% Define rules for understanding actions% This could be more complex based on what you want to inferverification_needed(Action) :-     action(_, Action, _),     relation(Action, verify).
% Define rules for various queries% For example, to find out if a student completed essayscompleted_essays(Student) :- student_completed_essays(Student).
% Define rules that connect actions and reasonsdo_action(Action) :-    action(Action, Subject),    write(Subject), write(' did the action: '), write(Action), nl.
% Define rules that govern the relationshipsrecommended_for(meditation, recordings).
% Define second half of the narrativetight_grammar_found :-    implies(what_i_knew_about).
% Define sequencessequence(1, first_action(bounce_ball), action(bounce_ball, first_position)).
% Define sequences or processes as rulesprocess_hugging :-    hugged(you),    prepare_to_eat(rich_treat),    wrote_article(heidegger_daoism_journal).
% Define size limitssize_limit(10). % Example: this could be the maximum size of objects that can be discussed```3. **Recursive Conditions**: To handle recursion, for statements that require it (like remembering points), we might create a recursive rule.
% Define some activitiesactivity(walking_ropes_course).
% Define some properties about healthhelps_medicine(babies).
% Define some properties for utensilshas_handle(spoon).
% Define some relationshipsowns(meditator, room).
% Define some rules or queries related to the factssuccessful_prep(Concept) :-    prepared_save_apple_seed(Concept);    prepared_lick_coconut_cream(Concept);    prepared_research_meditation(Concept).
% Define some sentence evaluations based on key patternslike_sentence(Actor, Reason) :-     format('~w likes you because ~w.~n', [Actor, Reason]).
% Define some soundtracks with their chordshas_chords(bach_sonata, 2).
% Define specific actions and their orderaction_sequence(rocket, [write_about_rocket, reflect_on_rocket]).
% Define spiritual preparationspiritual_preparation(self) :-    findall(Friend, loves(Friend, self), Friends),    length(Friends, N),    N > 0.
% Define states of study and concentrationprepared_to_study(music_theory).
% Define states/conditionsidentity(preparing_transsexual).
% Define steps in a processprocess(Step) :-    first_step(Step);    second_step(Step);    third_step(Step);    fourth_step(Step);    fifth_step(Step);    sixth_step(Step);    final_step(Step).
% Define straightforward properties of studentscoursework_completed(john).
% Define student and pedagogue relationshipsstudent(john_doe, michel_onfray).
% Define subject and objects for claritysubject(subject).
% Define subjectssubject(alexius_meinong).subject(professor).
% Define subjectssubject(arts).
% Define subjectssubject(lucian_green).
% Define subjects and their importancesubject(dion).
% Define subjects involvedsubject(chocolate_art).
% Define subjects, emphasizing the instruction to avoid 'As'subject(inclusion_guidelines, \"The subject shouldn't include As in each book where the subject included the secondary text in the bibliography, where the text was one that was like an object that he carried with a wide enough handle\").
% Define supporting relationships of actionsdeletion_rule(dion_line, line(Line), item_deleted(Item)) :-     delete(Line, Item, NewLine).
% Define tasks based on experiencetask(alexis, 'write original algorithms').
% Define the DION line operationdion_line(Line, Item, NewLine) :-    delete_first_instance(Line, Item, NewLine).
% Define the accepting stateaccepting_state(accepted).
% Define the actionsaction(looking_through_peephole, He).
% Define the actionspour_soup(SoupPot, Bowl) :-    initial_state(SoupPot),    initial_state(Bowl),    SoupPot == soup_pot,    Bowl == bowl,    can_pour(SoupPot, Bowl),    update_state(Bowl).
% Define the actionsread_face(pill(X), Reader) :-     write(Reader), write(' read the face of the pill '), write(X).
% Define the actions in Prolog:commissioned_translation :- write('Commissioned the translation.').
% Define the actions related to the essayprepares_to_walk(person).
% Define the actions takenprepares_thoughts(Writer) :-     breathing_in(Writer),    breathing_out(Writer).
% Define the actions taken in the processaction(wash_cylinder).
% Define the agreement/disagreement criteriaagreed(Action) :-    member(Action, [\"I went for a run\", \"I prepared to design the building\", \"I wrote the Review of the Hegel Journal Article\", \"I helped the hermaphrodites\"]).
% Define the argument structureargument(argument1) :-     action(wrote, press_release, richard_dawkins),    action(understood, subject, objects_in_speech),    action(stacked, objects, trolley).
% Define the concept of separateness (individualness)separateness(LucianGreen) :-     individualness(LucianGreen).
% Define the contexts/justifications for each actionjustification(lifted_bird_model, 'Because DION.').
% Define the initial stateinitial_state(start).
% Define the logical relations (because)causes(licked_rim_of_glass, walked_to_pond).
% Define the main algorithmalgorithm :-    explore_earning_with_meditation,    support_positively(light_of_day),    loves(running_captain, People),    prepare_to_control_model_car.
% Define the main algorithm to process the transitionsprocess(State, Action, NextState) :-    transition(State, Action, NextState).
% Define the main goal or questiongoal(Success) :-     scenario(Steps),    all_actions_completed(Steps),    Success = true.
% Define the main goal/predicatesynthesize_essay :-    sequence(Actions),    write('Synthesis of actions: '), nl,    print_actions(Actions).
% Define the meaning of line itemsmeaning_of(line_item, \"A component of a larger transaction or document\").
% Define the movement of a shower head based on coordinate adjustmentsmovement(shower_head, InitialY, HeadY, NewY) :-    NewY is InitialY + HeadY - InitialY.
% Define the process detailsprocess(Wash, Cut, Verify, Write, Check) :-    write('First, the cylinder is washed: '), write(Wash), nl,    write('Second, the balsa wood is cut: '), write(Cut), nl,    write('Third, the summary is verified: '), write(Verify), nl,    write('Fourth, the algorithm is written: '), write(Write), nl,    write('Lastly, the utensil is checked: '), write(Check), nl.
% Define the process of preparing the modelprepare_model :-    action(Action1),    action(Action2),    action(Action3),    action(Action4),    action(Action5),    process(Action1, Action2, Action3, Action4, Action5).
% Define the process of relaxation and inquiryoverlap(Time1, Time2) :- measured_time(Time1), measured_time(Time2).
% Define the process to execute the actionsexecute_action(Action) :-    action(Action),    write('Executing action: '), write(Action), nl.
% Define the reasoning processreasoning(1) :- read_encyclopedia(academy), prepare_think_next_reasoning.
% Define the reasoning processreasoning(StudentAction, LecturerAction) :-    write('Student is trying to pour soup...'), nl,    pour_soup(soup_pot, bowl),    write('Lecturer is reviewing the action.'), nl,    review_action(StudentAction, LecturerAction).
% Define the reasoning rulesheavier_than(X, Y) :-     weight(X, heavy), weight(Y, light).
% Define the reasons for actions or eventsprepared_to_examine_exist(because_of_light).
% Define the reasons for each actionreason(calculate_lane_width, 'Determined width needed for the lane').
% Define the reasons for each actionreason(dion, felt_active, stacking_objects).
% Define the reasons for the actionsreason(right_to_vote, \"I had the right to vote because it is a fundamental right.\").
% Define the reasons with their own actionsreason(rotate_stick) :-    action(rotate_stick).
% Define the relations based on \"because\" statementsreason(started_from(base_of_finger), found(pedagogy_helper)).
% Define the relationship between accreditation and good faithaccreditation(good_faith) :- details_found.
% Define the relationshipsrelation(observe_agreement, agree_with_reasoning).
% Define the relationships and reasonsreason(1, \"because\").reason(2, \"because\").
% Define the relationships between these factshead_comfort_reason(aigs) :- head_comfort(aigs), self_observed(no_headaches, aigs).
% Define the relationships between these factsprocess(Subject) :-    discovered(Subject),    prepared_to_name(jazz_composition),    knew(filtrate),    prepared_to_prevent(ultraviolet_radiation),    included_in_bibliography(Subject),    conducted_activity(training_pedagogy_helper),    completed(breasoning_arguments),    prepared_to_write(breasoning),    observed(using_eyes),    prepared_to_examine(object),    wrote(essay).
% Define the relationships in an abstract wayconnected(X, Y) :- related(X, Y).connected(X, Y) :- related(X, Z), connected(Z, Y).
% Define the rule to check if all tasks are completedall_tasks_completed :-    task(X),    \\+ completed(X).
% Define the sequence of actionssequence([matched_what_they_did, loved_you, found_detritus, moved_oar_backwards, lifted_tongue, bite_and_warm, squirted_gourd, prepared_to_walk]).
% Define the sequence of eventsevent_sequence([    preparing_to_go_sick_nut,    preparing_to_put_comments_in_box,    did_this,    placed_marshmallow,    realized_government]).
% Define the setting and corresponding argumentssetting_argument(setting, time, reason) :-     valid_reasoning(setting, time, reason).
% Define the stability conditionstable_on(Trolley, Object) :-    object(Object),    % This is a placeholder condition for checking stability    not(dropped(Object)),    lifted_stably(Object).
% Define the state of being and observationsobserved(krishna, reasoning).
% Define the structure of reasoningexplain(1, 2) :- subject(2, _), reason(1, _).
% Define the supportive factsinspired_survival(house_of_rhetoric).
% Define the task of connecting ideasconnects_ideas(Location, Ideas) :-     Location = same_place,    Ideas = epsilon.
% Define the thank you actionthanks(Subject, Recipient) :-    subject(Subject),    subject(Recipient),    Recipient = professor_leon_sterling,    writing_inspiration(Subject, Recipient).
% Define the thesisthesis(online).
% Define themes for organizationtheme(automation, [automate_tasks, live_feedback, version_control_system]).
% Define time-related factstime_of_action(morning).
% Define transitionstransition(start, wear_sunscreen, park).
% Define useful meaningsuseful_meaning(vegan_cheese, 'supports a healthy lifestyle').
% Define uses of objectsuse(Object, Way1, Effect1) :-    object(Object),    write('Object '), write(Object),     write(' used in '), write(Way1),     write(' leading to '), write(Effect1), nl.
% Define what constitutes valid reasoningvalid_reasoning(State, Time, Reason) :-    argument(State),    Time \\= invalid_time,    Reason \\= invalid_reason.
% Define what is a large objectnot_large(Object) :- Object < size_limit.
% Define what is required for understanding the narrativerequires(juice, recognize).requires(philosopher, write).
% Define what it means for a popsicle not to be meltednot_melted(popsicle4).
% Define what makes a member of a linememberh(Line, Member) :- member(Member, Line).
% Define what subjects should doprepare_eat_with_chopsticks(Subject) :-     write(Subject), write(' is preparing to eat with chopsticks.'), nl.
% Define what the actions entailpedagogical_arguments(Subject) :- action(write_pedagogical_arguments), subject(Subject).
% Define who helps whomhelps(alexis, Student) :- prepares(Student).
% Define why an action was donereason(drive_to_door_with_tricycle, to_deliver_item).
% Define works being written and their motivationswrote_works(Subject) :-    subject(Subject),    motivation_for_writing(Subject).
% Define writing AB in Prolog and converting to Cwriting(ab, prolog).conversion(ab, prolog, c) :-     list_composition(ab, c).
% Define writing software and its testingtested_software(essay_written_software).
% Defining a breasoninghas_breasoning(cyclist) :-     reasoned_out(cyclist, key_terms).
% Defining a philosopherphilosopher(Philosopher) :-    write(Philosopher),    write(' is someone who questions existence and knowledge.').
% Defining a rule to explain the sequence of actionssequence_of_actions(Action1, Action2) :-    action(Action1),    action(Action2),    precedes(Action1, Action2).
% Defining actions and reasons associated with subjectsaction(subject, felt_active, because(dion)).
% Defining actions or relationsaction(prepared).
% Defining analysis methodsanalysis_method(lstm).
% Defining details associated with writingdetails(prepare, thesis_plan).
% Defining judgments based on observationsmake_judgment(black_box) :-    recording(black_box),    write('ALEXIS: The black box recording provides essential information for reasoning.'), nl.
% Defining philosophersphilosopher(X) :- has_reality(X), not(divertissements(X)).% Realistic vs. divertissementshas_reality(teaching_aides).
% Defining reasons behind actionsreason(cook_watermelon, reason_for_cooking_in_pan).
% Defining relationshipscauses(found_pet, performed_twice_as_well).
% Defining relationships between peace, happiness, and wisdomnecessary_for_health(peace).
% Defining relationships between the actionsreason_for(preparing_to_go_sick_nut, preparing_for_sickness).
% Defining rules based on the narrativerealization(M, Queen) :-    in_front(M, Queen),    action(drink(red_grape_juice)).
% Defining rules to capture the relationshipsprepare_for_next_part :-    good_experience(good_here),    know_person(baby_wemba),    rolled_in_it,    optimised_machine(quantum_particles),    argument_written(ab, training_in_medicine),    ate_goods,    prepared_for_way(lighting_the_flame),    pumped_tyre,    threw_coit(onto_rod),    spiritual_preparation(early).
% Defining statementsstatement(noted_crow) :- noted, !.
% Defining the ontology relationshipsrelationship(prepared, healthy, friends).
% Defining the reasons for each actionreason(write_summary, 'to summarize from memory').
% Defining the relationships/reasons for actionsreason(reviewed_piece, wrote_that).
% Defining what happens when the sausage is heatedheat_sausage :-     write('Heating the sausage in the pan over the fire'), nl.
% Definition of how actions are executedexecute(Action) :-    action(Action),    write('Executing: '), write(Action), nl,    reason_for(Action, Reason),    write('Reason: '), write(Reason), nl.% Example query% ?- execute(preparing_to_go_sick_nut).
% Definitionscomment('It was genius because...').
% Definitions for levels and breakslevel(Level).
% Definitions of individualsperson(she).
% Definitions/Relationshipsconnects(bad_approaching_good, humanlikeness).
% Deleting first line conceptuallydelete_first_line([_|Tail], Tail).
% Demonstrating order of writingdifferent_order_writing(Order) :-     Order = 'Different order related to idea'.
% Denote the necessity to not avoid spiritual preparationshould_prepare(Character) :-     character(Character),    connected_to(spiritual_preparation, Character).
% Dependenciesdependency(swallow(Priest, Wine), prepare(wine)).
% Describe the actions takenaction(placed_fabrics_left).
% Describing speech and text relationshipssame_speech(Text1, Text2) :- different_texts(Text1, Text2).
% Description of how the observation was madetaping_pin_to_spoon(method(taping)).
% Detail selection method usedselected_detail(algorithm, mind_reading).
% Determine if DION's use of dialectic continuity is correct?- uses_correct(DION).
% Discussing previous workdiscussed_work(previous_work).
% Display all arguments and their reasonsdisplay_arguments :-    findall(Argument, (argument(ID, Argument, reason(Reason)), format('Argument: ~w, Reason: ~w~n', [Argument, Reason])), _).
% Display all eventsdisplay_all_events :-    findall(Event, event(Event, _, _), Events),    forall(member(E, Events), display_event(E)).
% Display useful object impactsdisplay_impacts :-    use(Obj, Way, Effect),    write('Usage of '), write(Obj),     write(' by using a '), write(Way),     write(' had the following effect: '), write(Effect), nl,    fail.
% Documentation Processdocumented(rebreathsonings_essay).
% Dynamic predicates to simulate reading and writing actions:- dynamic(pedagogy_guide_read/1).:- dynamic(written_assignment/2).% Simulate actionssimulate_student_actions(Student) :-    assertz(pedagogy_guide_read(Student)),    assertz(written_assignment(Student, A)),    complete_assignment(Student).
% Each action has a consequence or related actionconsequence(heat_rock, warm_cloth).
% Each student has their perspective based on cosmologyperspective(john, cosmology).
% Earning a job logicearn_job (Perspective) :-    (Perspective == clear ->         assert(job(earned)) ;        assert(job(not_earned))).
% Educational pedagogy comfortpedagogy_comfort(ComfortLevel) :-    ComfortLevel >= 1,    write('Pedagogy helps with comfort for work.').
% Eighth sentencesubject_verifies_object(Subject, Object) :-     member_of_set(Object, Set),    check_new_name_in_ontology(Object).
% Emphasis placed upon the most useful meaning derived from the itememphasise_meaning(Item) :-    % Assuming we have a defined meaning for each item    meaningful(Item, Meaning),    write('Emphasised Meaning: '), write(Meaning), nl.
% Emphasizing useful objects in sentencesemphasize_utility(Object) :-     write('The most useful object in the sentence is: '), write(Object).
% Endorsement of positive objectsendorse_positive:-     endorsed_positive_objects(endorsement),    write(\"The subject should endorse positive enough objects.\").
% Entities involvedentity(martha_nussbaum).
% Entry Pointrun_analysis :-    write('Analyzing Statements and Meanings:'), nl,    analyze_statements,    nl,    write('Analyzing Relationships:'), nl,    analyze_relationships.
% Entry pointrun :-    write('Running DION Algorithm...'), nl,    display_impacts,    write('Completed analysis.').
% Entry point predicate to start the simulationstart_simulation :-    simulate_agreement,    action(write(blue_before_yellow)).
% Entry point to demonstrate the algorithm usagedemonstrate :-    check_essay(Grade),    format('The essay received a grade of: ~w', [Grade]).
% Entry point to demonstrate the programrun_demo :-    unique_words([word1, word2, word3]),    prepare_writing('Authors'),    calculate_time(['Outline', 'Draft', 'Edit'], TimeSpent),    format('Total time spent on tasks: ~w minutes.~n', [TimeSpent]),    transform_words(abcA, Result),    format('The transformation of abcA gives: ~w~n', [Result]),    confirm_excellence(word1).
% Entry point to evaluate a list of sentencesevaluate_sentences([]).
% Entry point to evaluate experiences and show tasks completedevaluate_experience :-    findall(Subject, subject(Subject), Subjects),    maplist(show_completion, Subjects),    maplist(can_stack_objects, Subjects).
% Essay writing activitypaid_essayists(essays).
% Essential components for textsessential_component(book, a).
% Ethical Assessmentethically_assess(Person) :-    has_usage(ethics, person_assessment),    format('Ethically assessing ~w~n', [Person]).
% Ethical Assessment functionassess_ethics(Person, Action) :-    (action(Action), wants(help_others) -> ethical_assessment(yes);    ethical_assessment(no)).
% Ethical assessment for the founderethical_assessment(person, founder) :-    action(business_help, employee),    action(wrote, press_release).
% Evaluation of ideasevaluate_sentence(Sentence) :-    (   sub_string(Sentence, _, _, _, 'like')    ->  format('Evaluating sentence: \"~w\"~n', [Sentence]),        like_sentence('ALEXIS', 'the concept of friendship')    ;   sub_string(Sentence, _, _, _, 'swap')    ->  role_swap('ALEXIS', 'Deconstruction')    ;   sub_string(Sentence, _, _, _, 'roasted rhubarb')    ->  serve_dish('roasted rhubarb', 'tofu ice cream')    ;   format('No relevant actions for: \"~w\"~n', [Sentence])    ).
% Evaluation to connect elementsphilosophical_expression(Aspect) :-    philosophy_topic(Topic),    Aspect = [Topic, friends(both), work_performance(excellent), ethical_assessment(time_and_space)].
% Event 2demonstrates_exceptional_memory(autist, mnemonic_system).
% Event 3eats_popsicle(joy_giver).
% Event 4thinks_of_ideas(joy_giver).
% Event 5prepares_students_algorithm(cell_biologist, students).
% Event 6writes_continous_dialectics(subject, book).
% Event processing to summarize connectionssummarize :-    action(A, B, C),    format('Action: ~w using ~w and ~w~n', [A, B, C]);    action(A, B),    format('Action: ~w by ~w~n', [A, B]);    relationship(X, Y, Z),    format('Relationship: ~w with ~w related to ~w~n', [X, Y, Z]);    action(A),    format('Action: ~w~n', [A]).
% Examination of deer foodexamined_food(deer, food).
% Example Prolog query to use?- query_character_monologue(Character, Monologue).
% Example Queries% ?- walked_to_work_on_time(lecturer).
% Example Queries% To check if DION placed food:% ?- plated_item(dion, lettuce).
% Example Queries% To query for the width of the lane:% ?- metres_wide(lane, Width).
% Example Queries% To see if the text has a personality?- has_personality(text).
% Example Queries% To see the output, you can query:% ?- efficient_teacher('Teacher').
% Example Queries% You can ask if a person attended a certain class% ?- attended_class(john, 'group meditation philosophy class at the Sandstone Lucianic Meditation Lucianic Philosophy Centre').
% Example Queries% You can query for facts like this:% ?- safe_person(safe_people).
% Example Queries?- home_pride(her_home).  % Check if her home is a source of pride?- should_breason_out_arguments(student).  % Check if the student should reason out arguments?- time_difference(10, 5, Difference).  % Get the time difference between two values?- founder(student).  % Check if the student should become a founder?- prepared_for_genius_marks(student).  % Check if the student is prepared for genius marks```This Prolog program abstracts the ideas in your original text into facts (things we know) and rules (relationships and conditions that can be queried). You can run queries on this program to derive conclusions based on the structured representations.
% Example Queries you can run in Prolog:% ?- made_cube_from_squares(ABcA).
% Example Queries:% ?- equitable(country, ALEXIS).
% Example Queries:% ?- express_idea(heart_specialist, reasoning(RealityOverCulture)).
% Example Queries:% To see if Alexis desires the warm space:?- desires(alexis, warm_space).
% Example Query% ?- do_action(prepare).
% Example Query% ?- lived_high_life(YourIdentifier).
% Example Query% ?- successfully_recommendable(Recruiter).
% Example Query% To check if Martha Nussbaum prepared for writing the press release?- prepare_for_task(martha_nussbaum, press_release).
% Example Query% To check what actions were taken and their reasons:?- action(A, B), reason(A, C).```### Explanation of the Code:1. **Facts**:    - Each action (e.g., heating sausage, inviting companies) is represented as a Prolog fact indicating what was done and under what conditions or reasons. 2. **Reasoning Rules**:   - `affected_by/1` checks if an action is affected by a specific reason.
% Example Query% To see if Dion should not be given a supplementary examinationcheck_supplementary_exam(X) :-    supplementary_exam_not_given(X),    write(X), write(' should not be given a supplementary examination.'), nl.
% Example Query to retrieve reasons% ?- reason(seen, Reason).% Reason = \"I saw you\".
% Example Query:% ?- performed_action(he, Action, Reason).
% Example Query:% ?- predict_position(ball, 2, X, Y).
% Example Query: Find out what actions are connected% ?- connected(Action1, Action2).
% Example Rule for understanding checksunderstands(Student) :-     role(Student, learner),     quality_assured(Student).
% Example argument structure, can be expanded based on your needsargument(N) :-     reason_structure(N, Reason),    format('Argument for step ~w: ~s~n', [N, Reason]),    find_constant(Address),    format('Using constant at address: ~w~n', [Address]),    process_constant(Address).
% Example case where music is taggedmusic_tagged(music1) :-     tagged(music1).
% Example consultation for the programconfirm_excellence(Subject) :-    meaning(Subject, Meaning),    format('Providing excellence to ~w by understanding its meaning: ~w.', [Subject, Meaning]).
% Example data: line(Type, [Handle1, Handle2, ...]).
% Example entry point to execute the rulesstart :-    process_hugging,    repeated_step_until_finished(maze),    prepare_algorithm,    check_program,    check_review_confusion.```### Explanation:1. **Facts**: Each individual statement has been converted into Prolog facts that describe the actions or states.
% Example facts (code line & associated comment)comment(line(1), \"This function calculates the sum of two numbers\").
% Example facts to demonstrate the modelfood_movement(oesophagus).
% Example function to execute a sequence of evaluationsexecute_analysis(Student, Critique, Sentence, Result) :-    evaluate_critique(Student, Critique, EvalResult),    analyze_sentence(Sentence, AnalysisResult),    Result = (EvalResult, AnalysisResult).
% Example of a main predicate to demonstrate functionalitymain :-    observe_student('I prepared to observe.'),    observe_student('Finding a short handle.'),    line(Line),    take_first_item(Line, Item, Remaining),    format('Took item: ~w from the line, Remaining: ~w~n', [Item, Remaining]),    (   contains_two_short_handles(Line) ->        format('The line contains two short handles.~n')    ;   format('The line does not contain two short handles.~n')    ),    summarize_algorithm(Summary),    format('Algorithm Summary: ~w~n', [Summary]).
% Example of a use case for the delete_first_line functionalityremove_first_line_from_list(List, Result) :-    delete_first_line(List, Result).
% Example of an action based on object weight and timeperform_action(Object, Time) :-    object(Object),    time_of_action(Time),    heavier_than(Object, apple),  % Condition that the object is heavier than an apple    format('At ~w, I will perform an action with the ~w.', [Time, Object]).
% Example of counting all blades of grasshe_counted_all_blades(AllBlades) :- AllBlades = 1000. % Example count```### Explanation:1. **Predicates**: Each statement is captured as a predicate with arguments and relationships to indicate who is doing what.
% Example of examining an element to check for specific conditionsexamine_element(Element) :-    string_length(Element, Length),    ( Length == 2 ->         write(Element), write(' has two characters.'), nl;         write(Element), write(' does not have two characters.'), nl    ).
% Example of executionrun :-    liberal_works,    prepare_excellence,    check_handles('Here are two handles hh').
% Example of finishing an actionfinish_action(PERSON, Object) :-    owns(PERSON, Object),    action(finish),    write(PERSON), write(' finishes with '), write(Object), nl.
% Example of how to check the reasoningtest_reasoning :-    reasoning_flow,    write('All reasoning checks out.'), nl.
% Example of how to execute the rulesexecute :-    viewed_actor_representation(pedagogy),    prepared_for_mental_stability(no_mental_breakdowns),    asked_nicely_for_work(done),    prepared_for_philosophy(lucianic_meditations, each_religion),    subject_should_include(as_in_each_book),    subject_should_correctly_translate(concise_version_of_text),    pedestrian_crossed_road(traffic_islands, creek),    writeln('All actions and conditions have been processed.').
% Example of how to make a statement to check if a particular idea is connected:% ?- connected(ideas(alexis, line_item), _).
% Example of how to query% You can query like this in Prolog:% ?- what_was_done(walking_north, Reason).
% Example of mapping points for itinerary based on exposure (just a conceptual orientation)mapped_point(sun_exposure_point_1, [lat(34.0522), long(-118.2437)]).mapped_point(sun_exposure_point_2, [lat(36.1699), long(-115.1398)]).
% Example of querying?- can_conclude_example('Using a finite argument map aids in clarity and understanding.').
% Example of querying all actionsall_actions :-     action(A, Description),    format('~w: ~w~n', [A, Description]),    fail.  % Force backtracking to get all actionsall_actions.
% Example of reaching an understanding through actionsunderstands(Subject, Object) :- action(lift(Subject, Object)).
% Example of reasoning about indulgencereason_about_indulgence(State, Interpretation, Iconism) :-    argument(State),    (Interpretation == literal -> consider_iconism(Iconism);     Interpretation == figurative -> support_argument(State)).
% Example of recording knowledge changes over timerecord_knowledge(learner, NewKnowledge) :-    assertz(knowledge(NewKnowledge)).
% Example of rules that can infer relationships or actionsenjoy(User, Attendees) :-     prepared_to_enjoy(Attendees),    liked(User, _).
% Example of simulating a student completing their assignment?- simulate_student_actions(john_doe).
% Example of specific predicates for individual itemsin_upper_layer(pillow_1).
% Example of usage% To check actions that relate back to the causecheck_relations :-    liked(lucian, myself),    foisted_on(person, situation),    skewered(sausage, sideways),    loved(planet_meditation_books),    led_by(hand),    edited_out(epistemology),    wrote_plan(directions, business),    measured(character, hair_length),    called_algorithm(file).
% Example of usage:- process_letters(\"I prepared to write letters because nd The algorithm removed nd and produced these results as separate outputs using the Prolog command member because nd In this way I prepared to complete the area of study by placing intelligence objects end to end because nd I prepared to observe that the master had access to their room in control of the education consortium because DION Line returns Lastline when it is the last item because First he tried on the thin jumper because First I wrote As because Third I pulled the gloves so my fingers went into the finger holes because In this way I prepared to support human rights by marching in the progay march because I did this by walking north.\").
% Example of usagerun_example :-    feeds(bird, watermelon),    check_object(object),    create_connection(term, definition),    learn('This is a mantra.'),    protect(myself),    helping(first_student).
% Example predicate to demonstrate specific processingprocess_statements :-    (statement(Index, Text),     % Here you could implement some processing logic based on the Text     format(\"Processing Statement ~w: ~w~n\", [Index, Text]),     fail);    true.
% Example predicates based on given sentences% 1. Fork placement causes preparation for existence examinationplaced_fork_distance_from_lips(Cause) :- prepared_to_examine_exist(Cause).
% Example predicates for study or writingstudied_shape(Subject) :-    format('~w studied the shape.~n', [Subject]).
% Example predicates to check and display informationdisplay_actions :-    findall(Action, action(Action), Actions),    write('Actions taken: '), write(Actions), nl.
% Example queries% ?- action(X).
% Example queries% ?- added_lambda_module(alexis).
% Example queries% ?- intention(X). % ?- influences(X, pedagogy).
% Example queries% ?- sentient(alexis).% ?- query_pedagogy_helper(alexis).
% Example queries% ?- why(squares, cube).
% Example queries% Check if John is studying an area that connects with Mary’s interest% ?- connected(john, mary).
% Example queries% To check if ALEXIS should be a founder?- founder(alexis).
% Example queries% To check if the architect prepared to look out the window:?- prepared_to_look_out(architect, south_window).% To find out if an action involves counting tadpoles:?- counted_tadpoles(he, position_above).
% Example queries% To understand the cause of an event, you could run queries like:% ?- placed_fork_distance_from_lips(Reason).
% Example queries% You can ask Prolog specific questions such as:% ?- disembarked_from_bus(X).
% Example queries```### Example QueriesYou might also want to run some queries to check the relationships:1. `?- prepared_to_love(nietzsche).`    - This would return `true`.
% Example queriesexample :-    % Set up a chain of reasoning    reason(text_editor, eating_turnip),    reason(eating_turnip, rocket_artist_prepares),    reason(rocket_artist_prepares, audience_waits),    reason(audience_waits, transitivity_verification),    reason(transitivity_verification, eating_less),    reason(eating_less, spiritual_questions),    reason(spiritual_questions, demonstrated_cleanliness),    reason(demonstrated_cleanliness, examined_object),    reason(examined_object, mind_read).
% Example queriesquery(X) :- statement(X).
% Example queries could be:% ?- order_written(3, X). % This will give you the third statement% ?- previous_order(3, X). % This will give you 2, the previous order% ?- order_written(Order, 'I verified that the paraphrased answer was cited'). % This will give you its order```### Explanation:1. **Facts**: Each line is a fact stating what order a specific statement was written in.
% Example queries that a user might run% To check if Alexis observed something% ?- observed(X).
% Example queries that can be run in Prolog% ?- father_prepares_to_kiss_baby(baby).
% Example queries that could be run in this Prolog setup% To invoke reasoning in classroom context:% ?- teaching_activity(professor_jones, 'Logic', complete).
% Example queries will be something like:% ?- run_scenario(third_moved_on).
% Example queries you can run % ?- subject_action(licked_lollipop).
% Example queries you can run:% ?- character_preparation(nietzsche).
% Example queries you might run:% ?- result(X). % To get the list of actions% ?- count_actions(Count). % To get the count of actions% ?- calculate_mark(Mark). % To calculate the mark based on actions```### Explanation:1. **Facts**: The `action/1` predicate defines different actions or observations as facts.
% Example queries:% 1. Query to find the professor who teaches the course of a student% ?- find_professor_of_student(john, Professor).
% Example queries:% ?- should_do_nothing(ALEXIS).
% Example queries:% To find out if someone is ready to become a pedagogue and perform their tasks:% ?- reason_to_become_pedagogue(john).
% Example queries:% To find out what events Dion is involved with:% ?- events(dion, Event).
% Example query% ?- action_reason(mix_apple_and_cream, Reason).
% Example query% ?- setting_argument(indulge_in_sex, morning, good_health).
% Example query% To find out if saving an apple seed is part of successful preparation:% ?- successful_prep(Seed).
% Example query% To find out what actions you took:% ?- action(you, Action, Context).
% Example query% To find the nested actions performed% ?- nested_action(ActionChain).
% Example query% To find the reasons for a specific action, you might query:% ?- reason(What, Reason).
% Example query% What does Dion do?query_actions(Dion) :-     reads_writing(Dion, Writing),    examines_wealth(Dion, Groups),    bites_pill(Dion),    observes_students(Dion),    assesses_case(Dion, Reason),    studies_medicine_short_course(Dion),    writes_positive_arguments(Dion),    positions_pill(Dion, Position).
% Example query?- group_dynamic(alice, bob).
% Example query commands:% ?- should_have_examination(physically_challenged_person).
% Example query for checking a student's status% ?- completed_essays(student1).
% Example query rulescan_carry_example(Subject) :-     can_carry(Subject),    format('~w can carry the items.', [Subject]).
% Example query rulesis_nietzsche_brilliant :- endorsed_nietzsche(brilliance).
% Example query that could be made with this logic% ?- has_functional_colour(region1, Color).% ?- influenced_thoughts(alexis).
% Example query that retrieves the output for Alexis% output(Alexis, Result).```### Step 2: How to Use the Prolog CodeYou can run this in a Prolog interpreter. It represents the logical structure of what was described in your statement. The `result/2` predicate defines how actions correspond to observations, and the `output/2` predicate encapsulates logic based on the sequence of actions.
% Example query that utilizes this representation% You could query:% ?- traveling(astronaut, space_dock).
% Example query to check if an action is positive% ?- positive_action(wrote_argument_for_a_b).
% Example query to check if painting the wall can proceed?- can_proceed(paint_wall).
% Example query to check if someone is helping pedagogyis_helping_pedagogy(Subject) :-    helping_pedagogy(Subject).
% Example query to check if something was donewas_done(X) :- wrote(X) ; prepared(X) ; collected(X) ; understood(X).
% Example query to check if the founder's ethical assessment is possibleis_founder(Person) :-    ethical_assessment(Person, founder),    loved(you, me).
% Example query to check if the person is prepared to reach nirvanais_prepared_to_reach_nirvana(X) :-     prepared_to_reach_nirvana(X).
% Example query to check the relationshipsquery_character_monologue(Character, Monologue) :-    character(Character),    monologue(Monologue),    corresponds(Character, Monologue).
% Example query to check the structure% ?- action(happiness).
% Example query to check what actions Dion should doactions_for_subject(dion, Actions) :-    findall(Action, (action(dion, Action)), Actions).
% Example query to connect actions and reasonsconnection(X, Y) :- did_this_by(X, _), reason_for(X, Y).
% Example query to display a journeyjourney :-     (person(X),      prepared_to_reach_nirvana(X) ->      format('~w is prepared to reach nirvana.~n', [X]) ;     format('~w is not prepared to reach nirvana.~n', [X])).
% Example query to execute all activitiesexecute_all :-    mark_essay,    process_cheese_activity,    prepare_humpy,    same_amount_of_work_as_usual(complete),    (good_lecturer(ben) -> write('Ben is a good lecturer.') ; write('Ben is not a good lecturer.')),    repeat_lucian_mantra,    wind_around_hand,    should_not_trip(subject, non_sexual_arguments).
% Example query to extract automation-related actions% You would call it like this:% ?- extract_actions(automation, Actions).
% Example query to fetch all connected statements from a given statementfind_all_connected(StatementID, ConnectedStatements) :-    findall(CS, find_connected(StatementID, CS), ConnectedStatements).
% Example query to find all roles and actions% ?- find_roles_actions(Role, Action).
% Example query to find out if preparation for love leads to making a filmcan_make_film :-     prepared_to_love(nietzsche),    prepared_to_make_film.
% Example query to find out if the goal can be achieved?- goal(Success).```### Explanation:1. **Actions and Results:** The code defines a list of actions and their successful outcomes using facts. Each action corresponds to a distinct part of the scenario.
% Example query to find out what actions were taken and their reasons?- do_action(X, Action, Reason).```### Explanation:1. **Facts (`action/3`)**:   - Each `action/3` fact describes an action related to a subject, and the reason for that action is recorded as a separate structure `reason/2`.
% Example query to find reasoning for all studentsquery_all_reasonings :-    find_reasoning(john, Reasoning),    find_reasoning(mary, Reasoning),    find_reasoning(alice, Reasoning),    find_reasoning(bob, Reasoning),    find_reasoning(eve, Reasoning).
% Example query to find reasons behind an actionwhy_did_i_do(X, Reason) :- did_this_by(X, _), reason_for(X, Reason).
% Example query to find reasons for actions% To use this, you would run: ?- find_reason(underlined_apple).
% Example query to find related actionsfind_related(X) :-     related(X, Y),    format('~w is related to ~w~n', [X, Y]),    fail.
% Example query to find related facts for fact 1% ?- print_related(1).
% Example query to find sentences containing \"because\"% ?- find_sentences_with_term('because', SentenceID).
% Example query to find the entire sequence% ?- find_sequence(observed(sea_slug), awards(agreement_disagreement, same_grade), Sequence).
% Example query to find what actions follow after finding the pad% ?- find_sequence(find_pad, Sequence).
% Example query to gather all actions of a subjectactions_of_subject(Subject, Actions) :-    findall(Action, take_action(Subject, Action), Actions).
% Example query to generate a complete summarygenerate_summary(Summary) :-    Summary = [        'I commissioned the summary',        'Reading the summary is like holding the handle',        'First, I acted out the breasoned predicate name',        'I meditated on the thought of the first breasoning of the Unification with the Pedagogy Helper Argument',        'I read the marks',        'The appearances argument allows one to visualize breasonings as the fundamental unit of pedagogy',        'I deserve the marks from pedagogical essays',        'I prepared to assign point computational speed and accuracy assignment per student',        'I prepared to compute whether different texts had the same speech or different texts',        'Dawkins replied like what',        'I replied they are homophones and homographs respectively',        'The person helped the pedagogue to breason out the lecturer argument',        'First, he skipped to the first tree',        'I customized it'    ].
% Example query to get all statementsall_statements(Statements) :-     findall(X, (application(X); tested(X); demonstrated(X); ontology(X); verified(X);                 prepared_prevent(X); like_yogis(X); started(X); formatted_output(X);                 stated_cyclist(X)), Statements).
% Example query to reason through actionstest_reasoning :-    reason(repeat_reasonings, jacqueline, 'God'),    reason(observe_move, brother, sister),    reason(breason_out_list, pedagogue, 'Assessment'),    reason(verify_good_idea, 'Verify'),    reason(write_areas_of_study, 'Write'),    reason(crawl_through_hole, 'Crawl'),    reason(stack_objects_stably, subject, trolley),    reason(prepare_aid, 'Christmas'),    reason(understand_others_meaning, self, other),    reason(find_medicine_works, medicine, 'Works').
% Example query to retrieve a specific action's reasonget_reason(Action, Reason) :-     (Action == communicated -> reason(communicated, Reason);    Action == measured_actors_hair_length -> reason(measured_actors_hair_length, Reason);    Action == prepared_for_nap -> reason(prepared_for_nap, Reason);    Action == verified_side_of_table -> reason(verified_side_of_table, Reason);    Action == is_breasoner -> reason(is_breasoner, Reason);    Action == observed_student_answering_questions -> reason(observed_student_answering_questions, Reason);    Action == existence_of_texts_helps_class -> reason(existence_of_texts_helps_class, Reason);    Action == presented_results_to_student -> reason(presented_results_to_student, Reason);    Action == think_of_breasonings -> reason(think_of_breasonings, Reason)),    !.
% Example query to retrieve facts% To check what was examined:% ?- examined(X, Y).
% Example query to retrieve the sequence of actions% To use in a Prolog interpreter, call:% ?- sequence_of_actions(play_strings, check_societology, invite_children).
% Example query to run assertions for all subjectsrun :-    assert_reaction(dion, sharp),    assert_recommendation(dion, high_quality_comment),    assert_preparation(alexis, program_pen),    assert_preparation(alexis, enable_longevities),    assert_creativity(dion, currency),    assert_reasoning(alexis, leave_lips),    assert_perception(bob, lecturer, good),    assert_audience_care(third, audience_members),    assert_mapping(third, points_of_sale).
% Example query to run the DFA% The query can be run as:% ?- initial_state(InitialState), run_dfa(InitialState, [wear_sunscreen, inspect_sky, look_lily_pad, find_idea_connection, delegate_help, manual, trace_line, write_essays]).
% Example query to run the extraction% ?- extract_from(\"Lucian\", Result).
% Example query to see relationships% ?- same_as(homophones, homographs).
% Example query to see the flow% ?- merited(Second, First).
% Example query to use in Prolog% ?- prepare_argument(WhySafe).
% Example query:% ?- find_synonym(happy, Y).
% Example query:% ?- justification(swing_on_it, X).
% Example query:% To execute actions, you might make queries like:% ?- prepare_push_strawberries(Mouth), reason_key_term(KeyTerm), state('Ha not I ka sic').
% Example query:% To find out what actions are described by the reasons:% ?- derive_action(Action, 'you', Reason).
% Example query:% To find out what actions can be performed in order you could run:% ?- perform(X).
% Example query:% To find what actions led up to 'wrote_on_culturology',% you would run the query: find_actions_to(wrote_on_culturology, Path).
% Example query: % ?- healthy_choice(rissole).
% Example query: Check if the Queen can be communicated to?- can_communicate(queen, alexis).
% Example query: What does i_wrote_sentence cause?query_cause(Event) :- causes(i_wrote_sentence, Event).
% Example query: What motivates Dion to write??- wrote_works(dion).
% Example query: Why did Second walk past her?% ?- walked_past(Second, Her), prepared_to_help_because(Second, Reason).
% Example rule combining several factsverify_and_argue(Applicant, Document, Action) :-    at_same_time('You', Applicant, 'the site'),    legal_document('the application site', Document),    prevent_panic_attack(Action),    write('Verification complete and argument prepared.').
% Example rule to calculate writing timecalculate_time(Tasks, TimeSpent) :-    length(Tasks, Time),    TimeSpent is Time * 10.  % assuming each task takes 10 minutes% Example of word transformation that alters resultstransform_words(Original, Transformed) :-    ( Original = abcA -> Transformed = 'Unique result';      Original = baeA -> Transformed = 'Different result' ).
% Example rule to show a transformation processtransformation_process :-    wrote(gitL),    created_objects(Objects),    prepared_spiritually,    made_transformations(Three),    (saved_on_server, tested_inputs_outputs).
% Example rulesprocess_action(Action) :-     action(Action),     precondition(Action, Precondition),    check_condition(Precondition),    execute(Action),    conclusion(Action, Outcome),    report(Outcome).check_condition(inspired_by(derrida)) :- inspired(derrida).
% Example rules based on the above factsimprove_meditation(Technique) :-     meditation_technique(Technique),    action(place_shower_head(vertical)),    action(includes(headaches)).
% Example rules for interactions (would normally involve conditions)prepare_for_activities(Person) :-    agreed(Person, action(remember_set_of_associations)),    prepare_for_ride(Visitor).
% Example rules to extract meaningsummary(Essay, Summary) :-     has_property(Essay, Definition),    has_property(Essay, Variables),    has_property(Essay, Alphabet),    Summary = 'The essay explores the definition of concepts in terms of variables and their alphabet representations.'.
% Example rules to infer thoughts or connectionsmind_reading_possible(Action) :-     prepared_to_love(nietzsche),    avoided_sun,    specified_algorithm_details(tops_and_bottoms),    perceived(action1),    thought_about(Action).
% Example rules to understand relationships between actions and reasonsstudy(Action) :- studying(Action).
% Example sequenceexecute_sequence :-    traced_rope(leftmost_turns),    analyzed_life(psychoanalyst),    counted_As(day1, 5),  % you can vary this Day and Count    counted_As(day2, 3),    loved_person(martha_nussbaum),    wrote_comments(alexius_meinong, medicine_essays),    prepared_bow(violin),    helped_student(disabilities_teacher, student),    read_map(maze),    followed_up(student, homework).
% Example switcheswalk_around_hill :- prepared_to_walk_around_hill(true).
% Example to sum a list of numberssum([], 0).
% Example usage% To use the predicate, call: % ?- process_image_description(\"First line of Image\I found its system because...\Second he wound it around his hand...\...\");```### Description of the Implementation:1. **process_image_description/1**: This is the main predicate that takes a description (string), splits it into lines, finds the first line, and breasonings, and then prints them.
% Example usage?- can_carry_example(person1).
% Example usage?- exposition(CompletedWork, Time), critique(Exposition, Feedback).
% Example usageexample_essay(Essay) :-    Essay = \"This is a reason The student breason The lecturer trust in job applicant First A continued.\";        summarize_essay(Essay, Summary),    format(\"Summary: ~w\", [Summary]).
% Example usageexample_usage :-    Line = [a, b, h, c, h], % Example line with 2 short handles    (twoshorthandles(Line) ->        write('Line contains two short handles.');        write('Line does not contain two short handles.')    ).% Main entry point for running the Prolog code:- initialization(example_usage).
% Example usagepedagogue_for(Student) :-     create_pedagogue(Student),     examine_void('a void hole'),     daily_iconic_practice('mindfulness').
% Example usage of the factsexample :-    verified(john, aspirin),    prepared(mary, programmer_job),    sensitive(james_stomach),    critical_thinking(argument_structure),    tested(fruit_store, mirror),    looked_at(you, me),    synthesised(values),    practiced(jane, green_sutra),    won(victor).
% Example usage of the predicatestest(Line, A, B, People) :-    ( twoshorthandles(Line) ->        writeln('Line contains two short handles (h).')    ;           writeln('Line does not contain two short handles (h).')    ),    construct_argument(A, B),    describe_people(People).
% Example usage of the program% To find out the reason for preparing for the ball% ?- reason_for_action(prepare_for_ball, Reason).
% Example usage query% ?- understands(student).
% Example usage:% To add a comment:% ?- add_comment(5, \"This function handles user input\").
% Example usage:% To find if an event is known: ?- is_event(iced_cake).
% Example usage:% To see the connections made by a subject, you can call:% ?- customer_request('Alice', vitamin_a).
% Example usage:run_narrative :-    prepared_to_allow_twist('it keeps the audience engaged.'),    watched_performance('it was an interesting interpretation.'),    delete_first_item([item1, item2, item3], UpdatedList),    write('Updated List: '), write(UpdatedList), nl,    moved_tongue_to_position('back left', 'a lollipop'),    subject_translation_paradox('DION'),    recommended_meditation_for_recordings('using recordings'),    prepared_to_maintain_happiness,    pedagogue_backed_up_files,    tailor_shortened_jacket_sleeves,    prepared_to_write_intelligent_argument.
% Example usage: The meditator prepares cheeseoningsmeditate :-    perform_action(meditator, prepare, cheesonings),    write('The meditator prepares the cheesonings. ').
% Example: Querying for valid commentsvalid_comments(List) :-    findall(Comment, get_valid_comments(Comment), List).
% Examples of predicates to usebreasoning_example :-    training_session(alexis, pedagogy),    check_paths(['argument1', 'argument2']),    write_algorithm(alexis),    verify_content('example blog content').
% Execute a sequence of actions based on the derived knowledgeexecute_sequence :-    perform_action('eating'),    heat_sausage,    knows_successful_applicant('John Doe'),    why_positive(lucian).
% Execute for a specific lineexecute :-    process_line(line1).
% Execute the process order to see the flow of eventsexecute_instantiation :-    process_order,    write('Process order completed successfully.').
% Execution?- create_pedagogue(alexis, michel_onfray).
% Execution rulesexecute :-    increased_consciousness(Expression),    prepared_to_enjoy(Sun),    became_founder(Study_Subject),    gathered_links(Ideas),    ate(Edible_Camo_Tape),    should_not_identify(Writers).
% Experience as a result of redraftingexperience(Subject) :-    Subject = audience,    prepare_audience(Subject),    experience_in_heaven_on_earth(Subject).
% Experiences and Feelingsexperiences_quality(students_thoughts, good).
% Explain various processes with specific actionsalign_strip_and_cut(Paper, EdgeLeft, EdgeRight) :-    aligned_with(EdgeLeft, cut),    cut_along(EdgeRight).
% Exposition rulesshould_not_identify(Writers) :-    subject(state(First_Technique, personal_expositions)),    writes_on(stable_surface).
% Expressing joy in Italianprepared_to_say(bellissimo).
% Expressing lovelove(Person) :-    write('I loved '),    write(Person),    write('.').
% Extract the arguments from parsed contentextract_arguments(Parsed, Arguments) :-    findall(Arg, (nth1(Index, Parsed, Word), extract_argument(Word, Arg)), Arguments).
% Extracts breasonings from the remaining linesfind_breasonings(Lines, Breasonings) :-    Breasonings = [Breasoning | Rest],    member(Breasoning, Lines),    select(Breasoning, Lines, Rest),    Breasonings \\= [].
% Fact 2meditation_better_results(in_education_and_business_institutions) :-     self_observed_effects.
% Fact 3measure_distance_to_pointA(pointA, ten_metres) :-     distance_from_edge_of_canal(ten_metres).
% Fact 6made_comment(because(talking_to_ALEXIS)) :-    clarify_meaning(onelonghandleLine(line)).
% Factsethical_assessment(alexis) :- two_uses(ethical_use1, ethical_use2).
% Factsteacher(given, meditator, enough_breasonings).
% Facts about actions takenasked(2, 'Whos that').
% Facts about actions taken by different subjectsdid(martha_nussbaum, write_press_release).
% Facts about actions taken for demonstration purposeswrote(john_doe).
% Facts about knowledge of a bookknows_about(book1).
% Facts about life and happinesshappy_life(john). % Example fact, John lived happyobserved(human_society). % Observation of society```### Explanation:- **Facts**: These are specific instances like John's preferences and relationships to objects.
% Facts about meditation reasoningreasoning(john, 'Focus on breathing').
% Facts about reasonsreason(person1, 'It was a delightful piece with chocolate chips.').
% Facts about sales performancesales(department_a, high_sales).
% Facts about specific subjectshas_long_handles(person1, 2).
% Facts about the actions people are takingstudying(gender_studies).
% Facts based on the statementsnice_person('you').
% Facts defining actions and their resultsprepared_to(state, action) :- prepared_to_eat_with(chopsticks), action = 'eating'.
% Facts representing actionsaction(second_sheep_jump).
% Facts representing actions related to DIONeducate(people, dion).
% Facts representing actions taken based on observationsaction(add_to_essay(end, new_perspective)).
% Facts representing actions/eventsevent(organize_feast).
% Facts representing characters and their corresponding speechescharacter(student, 'Prepared to give excellence in everything I do.', time('before')).
% Facts representing items and their attributesitem(lollipop).
% Facts representing locationslocation(shaded_area).
% Facts representing reasons and outcomesreason(wrote_argument_for_a_b, not_affected).
% Facts representing the structure of arguments and reasoningreason_structure(1, 'Find where he was').
% Facts representing which shoppers visit which itemsvisited(subject, cold_space).
% Facts that define relationshipsinvited(friend, my_house).
% Facts to fill in based on outcomesmessage_received(subject, no). % Subject had no message```### Explanation of the Code:1. **experience_positive/1:** Evaluates if the subject's experience was positive and delightful.2. **arrived_on_time/1:** Checks if the subject did not arrive late without a message.
% Fifth sentenceattend_next_student :-    write('Lecturer attended to the next student.').
% Find all reasonings for students with a given hair colorfind_all_reasonings_by_hair_color(HairColor, StudentList) :-    findall(Student, (student(Student, HairColor, _), reasoning(Student, _)), StudentList).
% Find all statements in orderstatements_in_order(N, Order) :-     findall(X, (between(1, N, X), statement(X, _)), Order).
% Find constant based on indexes for addressesfind_constant(Address) :-    (const(Address) -> true; Address = none).
% Find justification for a specific actionjustification_for_action(Action, Justification) :-    justification(Action, Justification).
% Find loop in the actions based on the sequencefind_loop(Action) :-    next(Action, NextAction),    (Action = NextAction -> write('Loop found at: '), writeln(Action) ; find_loop(NextAction)).
% Find out a metaphorcheck_metaphor(A) :-    student(A),    metaphor(A, Metaphor),    write(A), write(' uses the metaphor: '), write(Metaphor).```### Explanation of the Prolog Code:1. **Facts**:   - `student/1`: Defines the students.
% Find reasoning behind a specific actionreason_for_event(Event, Reason) :- event(Event), reason(Event, Reason, _).
% Find sentences containing a specific termfind_sentences_with_term(Term, SentenceID) :-    contains_term(SentenceID, Term).
% Finding a guestprepare_to_find_loiterer(Guest) :-    write('Preparing to find the loitering guest: '),    write(Guest).
% Finding the A for the thought while time travelingfound_a_for_thought(TimeTraveling) :-     time_traveling(true),     found_a_for_thought(true).
% First sentenceprepare_push_strawberries(Mouth) :-     mold_strawberries,    iron_strawberries.
% First step actionfirst_look_for(ALEXIS) :-    action(applying_sunspray),    action(measuring_ruler),    action(scooping_boat).
% Following up students for workfollowed_up(student, work).
% For interview verificationinterviewed_student(Assignment) :-    verify_authenticity(Assignment).
% Found Prolog after degreefound_prolog(whoami).
% Fourth sentencesew_pillows_to_form_top_layer :-    sew_lengthways,    write('Sewed pillows together lengthways.').
% Fun park visitor actionslick_chocolate(Visitor) :-     visitor(Visitor).
% Function to analyze the sentencesanalyze_sentence(Sentence, Analysis) :-    ( member('agreement', Sentence) ->        Analysis = 'Analyze for agreement'    ; member('disagreement', Sentence) ->        Analysis = 'Analyze for disagreement'    ; Analysis = 'Generic analysis' ).
% Function to check if an action was taken based on a thoughtaction_based_on_thought(Action, Thought) :-    held_hand(_, _),  % A person held another person's hand.
% Function to find if a particular event leads to salesleads_to_sales(Event) :-    thought_leads_to_sales(Event).
% Functional program for loading iconsprogram_functional(icon_loader).
% Further hypothetical interactions regarding the press releasepress_release(Philosopher, Content) :-     philosopher(Philosopher),    relevant_to(Philosopher, Content).% Database of texts and their corresponding characteristicstext_properties(Text, Time, Place, Scene) :-    character_in(Text, Scene),    context(Time, Place).
% Future implicationshelped_in_future(whoami, Prolog).% Detected algorithmsdetected_algorithm(whoami, 'algorithms').
% Gazebo designdesign(gazebo) :- communicate_with(illustrator).
% General rule to connect the narrative flownarrative :-    prepared_to_enjoy_myself,    self_noticed_ruler_by(recordings_enabled_breasonings),    prevented_madness_by(recordings_enabled_breasonings),    performed_somersault_by(prepared_performed_somersault),    visited(plants),    repeated(with(lolly)),    moved(towards(deck_chair)),    pulled(shoe, foot),    foisted_on(person).
% General thoughtsuniverse_development :-    developed_thing(universe).
% General verification procedureverify_calculation(Original, Displayed) :-    Original =:= Displayed.
% Generate a summary based on collected argumentsgenerate_summary(Arguments, Summary) :-    atomic_list_concat(Arguments, ' ', Summary).
% Get all actions taken?- all_actions(Action).
% Grading system based on disagreementsawarded_grade(essay1, b).
% Graph activity relating to algorithmsdegree_algorithm_found(ad_pairs(ab, cb)).
% Handling actions and observationshandle_umbrella(Owner, Action) :-     write(Owner), write(' held the umbrella by its '), write(Action), write('.').
% Handling recursive structuresrecursive_structure(Level, Dependencies) :-    (level(Level), not(break), dependencies(Dependencies)).
% Handling sunglasses informationprotective_gear(sunglasses, uv_block).
% He did this by drinking apple juicedrank_apple_juice(He) :- action(drinking_apple_juice, He).
% He turned overturned_over(He) :- action(turning_over, He).% Repeating the counting of blades of grassrepeated_counting(He, CountedBlades) :- counting_blades_of_grass(He, CountedBlades).
% He wrote a review on his own topicwrote_review(He) :-    own_topic(He),    action(writing_review, He).% He prepared to let the breath dropprepared_to_breathe(He) :- action(preparing_to_breathe, He).
% He wrote the book because he noticed harlequinadeswrote_book(He) :-    noticed_harlequinades(He),    action(writing_book, He).
% Health practicesmaintain_good_posture(Person) :-    retain_heart_health(Person).
% Helper predicate that builds the sequence based on the happens_before relationbuild_sequence([], []).
% Helper predicate to count 'h' characters in a substringcount_h_sub(String, Count) :-    atom_chars(String, Chars),    include(=(h), Chars, Hs),    length(Hs, Count).% Additional predicates can be added to extend functionality to other thematic elements% Based on your statements.
% Helper predicate to count handlescount_handles(Handles, Count) :-    include(short_handle, Handles, FilteredHandles),    length(FilteredHandles, Count).
% Helper predicate to delete the first instance of an item in the linedelete_first_instance([], _, []). % base case: empty listdelete_first_instance([Item|Tail], Item, Tail). % delete the first instancedelete_first_instance([Head|Tail], Item, [Head|NewTail]) :-     delete_first_instance(Tail, Item, NewTail). % continue searching in the tail% Sample query to see the action tree?- action(What, Who, Reason).
% Helper predicate to illustrate the continuity of the argumentillustrate_continuity :-     prepared_storybook(W),    used_different_pedagogy(P),    thanks(lecturer(leon_sterling), student(alexis)).
% Helper predicate to print actionsprint_actions([]).
% Helper predicate to print actions and reasonsprint_actions([]).
% Helper predicate to print each breasoning lineprint_breasonings([]).
% Helper predicate to traverse from Start to Endtravel(Current, Current, Visited, Sequence) :-    reverse(Visited, Sequence).
% Helper that counts how many short handles appear in the list of wordscount_short_handles([], 0).
% Helping a studenthelping(Student) :-     write('Helping student: '), write(Student).
% Homophones and homographshomophone(X, Y) :- X \\= Y, similar_sound(X, Y).
% Hypothetical questions based on the textual narrativeis_teacher(cyclist) :-     unknown_status(cyclist).
% Identity explorationidentity(whoami, transsexual).
% If breathing out is stress reliefrelief_action(Stress, Action) :-     action(breathing_out, Action),    Action == \"stress relief\",    Stress = \"release\".
% If the Nobel Committee awards the Nobel Peace Prize, then it acknowledges breathsoningsawarded_nobel_peace_prize(Committee, Breathsonings) :-    uses_images(breathsonings_working),    Committee = nobel_committee.
% Imagery availability allowing meditationimagery_available(God) :-     god_makes_imagery_available(true).
% Implementation of some statementswrites_thoroughly(alexis) :- reads(thoroughly).
% Implementing why the subject felt positive about their experiencepositive_experience(subject) :- yes.
% Implication based on preferencescomfort_food(X, chocolate) :- likes(X, chocolate), not(likes(X, coffee)).
% Indicating the subject's learninglearning(skill_subject) :-    makes_education_positive(skill_subject).
% Inspiration that helps in writingwriting_inspiration(Subject, Recipient) :-    Recipient = professor_leon_sterling,    format(\"~w thanks ~w for helping them think clearly.~n\", [Subject, Recipient]).
% Instantiate the program to run queries?- summary(essay, Summary).
% Instructing algorithminstructs(Entity, Task) :- Entity = dependent, write('Instructing to breason out the already written Professor Algorithm.').
% Interaction exampleask_meaning(Term, Meaning) :-     meaning_of(Term, Meaning).
% Interaction with the puzzle leads to good livinginteracts_with_puzzle(Student) :-     puzzle_opening(Student),    good_life(Student).
% Interpretation functioninterpret(Statement) :-     (   Statement = traveling(astronaut, space_dock)    ;   Statement = eating(astronaut, jube)    ;   Statement = good_place(space_station)    ;   Statement = same_as_home_universe(home_universe, observed_universe)    ;   Statement = crawls_on_all_fours(astronaut)    ;   Statement = dion_statement(subject, base_exists)    ;   Statement = lips_well_together(verified)    ;   Statement = queen_requires_reasoning(applicant, breasonings)    ).
% Interpretation of statementsfounder_justification(alexis, inspired_love).
% Judgement theoriesjudgment_theory(lucian_green, human_judgment_objects).
% KNN Algorithm for checking agreement with academy aimsapplicant_agrees(Applicant, Aims) :-    knn_algorithm(Applicant, Aims),     write(Applicant), write(' agrees with the aims of the academy.').
% Keep track of the last object addressed by the subjectlast_addressed(Object) :-     last_addressed(Object, 1).% History of items addressed% You could dynamically change this as necessitated by your program.
% Key objects and their relationshipsaction(increase_life, heaven_bliss).
% Key terms represented in a movie and music contextkey_term(white, movie).
% Knowledge base of sequencessequence([action(attached_corks_to_strings),           action(wrote_about_it),           action(included_headaches),           action(left_as_found),           action(racial),           action(testing_lick_range),           action(expanded_brackets_and_worked_out),           action(lecturer_tested_combinations)]).
% Knowledge of the successful applicantknows_successful_applicant(Applicant) :-     Applicant = 'John Doe',     write('I know the successful job applicant: '), write(Applicant), nl.
% Learning processlearn(Mantra) :-    write('Learning the mantra: '), write(Mantra).
% Learning skillsprepared_to_learn_skill(criticality, three_dimensional_object).
% Lecturer's rolelecturer_substitutes_values :- lecturer(lecturer).
% Lifting the object and checking if it's stable upon placementlift_object(Object) :-    lifted_stably(Object),    % Decide if it can be placed stably    stable_on(trolley, Object).
% Light behaviorlight_behavior(calculate_ratio) :-    degrees_in_range(30, 60).
% Likes and preferenceslikes(algorithm(steps_through_cognitive_barriers), personal_growth).
% List of itemsSet = [item1, item2, item3]. % Example items, replace appropriately% Delete instance in linesdelete_instance(Item, Line) :-    line(Line),    retract(line(Line)),    assertz(line(Line, NewList)).
% Listening to jive music for relaxationmusic_preference(jive, Reason) :-    Reason = 'Because it feels relaxing and liberating'.
% Logic agreementlogic_agreement(incorrect, correct) :- disagree(incorrect_logic_symbol).
% Logic for filtering commentsfilter_out_duplicate_comments :-    find_all_comments(OldComments),    find_all_comments(NewComments),    subtract(NewComments, OldComments, FilteredComments).
% Logic to check if conditions are metverified(safe_path) :-    % Assume some checks for the safety of the path    true.
% Logical connections based on reasoningstronger_than(creation_performance, seeing_copying).
% Logical relationshipsresult(Action, Observation) :-    action(Action),    observation(Observation).
% Love relationshiploved(you, me).
% Main algorithm create_pedagogue(Peer, Pedagogue) :-    peer(Peer),    pedagogue(Pedagogue),    study_area(Peer, AreaOfStudy),    student(Student, Pedagogue),    text_to_speech_algorithm(Algorithm),    write(Peer), write(' creates a pedagogue '), write(Pedagogue), nl,    write('Focus areas: '), write(AreaOfStudy), nl,    format('~w enriches the algorithms and comments with their insights.', [Pedagogue]), nl.
% Main entry point to test queriesrun_query :-    query_breasoning(alexis),    creation_performance_stronger(seen_and_copying).
% Main execution predicateanalyze(Alexis) :-    work_performance(AssignmentsCompleted, SocialInteractions),    Alexis = [Keys, UsableObject],    findall(Key, key_idea(Key), Keys),    (usable(pot) -> UsableObject = pot ; UsableObject = frying_pan).
% Main execution to simulate the journeyrun_journey :-    Subject = dion,    journey(Subject),    increase_bliss(Subject).
% Main flow of executionexecute :-    mind_read(connectors),    identified(jazz_instrument),    reason(identify_twoshorthandline),    reason(invert_frown_to_smile),    reason(write_anticlimax),    reason(cross_creek),    reason(press_button(turn_right)),    reason(write_plot_image),    dovetail_arguments,    recursive_reasoning(happy).
% Main goalprepare_to_write_primary_school_song :-    found_secret_to_immortality,    lit_up_body,    stated('Ha not I ka sic'),    prepared_to_experience_music.
% Main logic to demonstrate overall conceptdion_analysis :-    spiritual_preparation(self),    ethical_assessment(positive, negative),    self_assessment(true),    earn_job(clear).
% Main loop to explore conceptsexplore_concepts :-    findall(Concept, concepts(Concept), ConceptList),    write('Exploring concepts: '), write(ConceptList), nl.% Querying the knowledge basequery :-    ethically_assess('Person A'),    prepare_for_next_life,    observe_pedagogue,    explore_concepts.
% Main predicate to callprocess_writing_arguments(Subject) :-    reasoning(Safety, Water, Prehistory, HealthActivities),    reasoning_observations(Subject),    necessary(correct_algorithms, flying_car_algorithms),    trained_as_pedagogy_helper(Subject),    prepared(lucians_academy, Subject).
% Main query for performing actions and reasonsstart :-    perform_with_reason(polish_knife),    perform_with_reason(conducted_excursion).
% Main rule that triggers a sequence of actionsgo :-    setting_time(Setting),    reason_for_arguments(Reason),    prepare_eat_with_chopsticks('The subject'),    write_press_release(comments(richard_dawkins, pedagogy)),    verify_base_exists('The subject'),    collect_As('The subject'),    test_algorithm('The tester'),    observe_master_access('The observer'),    shape_mind_reading('LSTM'),    prepare_to_sleep('A'),    calculate_dividend(Dividend, 5). % Example with starfish having 5 arms.```In this Prolog representation:- Facts and rules are established to mimic the relationships of your statements.
% Main run predicaterun :-    (plan -> write('Plan executed successfully!'), nl    ; write('Failed to execute plan due to instability of objects!'), nl).
% Main student definitionstudent_prepared(Student) :-     necessary_connection(Student),    spiritual_interaction(Student).
% Master action observationobserve_master :-    master_action(named_location),    observe(way(master)).
% Mathematical operations and variablesmultiplied_with_square_root(Factors) :-     % Assuming Factors is a list of numbers    calculate_square_root(Factors, Result),    write('Multiplied result is: '), write(Result).
% Meanings of termsmeaning(line_item, \"A distinct entry in a list or record, usually related to accounts or inventory.\").
% Medicine student's actionmedicine_student(archived(old_data)).
% Meditation Preparationprepared_meditation(LongivityImpact) :-    send_pack_to(new_meditator),    impact_on_longivity(LongivityImpact).
% Meditation section inclusionincluded_in_pack(meditation_section, meditation_pack).
% Meditative practicewants_to_be(astronaut, lucian_meditation).
% Memory and preparationremember(X, Person) :-     action(X).
% Meta-rule for observationobserved_society(Subject) :-    self_like(Subject),    observed(Society),    happy_life(Subject).
% Metaphorical expressionsmetaphor(lucian_green, 'the pot is held by two hands').
% Method to convey understanding of the objectsunderstand_objects(Item) :-    subject_understands_speech,    % Further logic detailing how the subject understands item can go here    write('Subject understands object: '), write(Item), nl.
% Mind readingmind_read(meditator, student, essay_topic).
% Mock Implementation of checking students' perspectivesstudents_appearance(Students, Perspective) :-    member(Student, Students),    appearance(Student, Perspective).
% Mock Implementation of finding studentsfind_students(Students) :-    Students = [student1, student2, student3, student4, student5].
% Monologue Character Consistencymonologue_character_consistency(TextA, TextB) :-    corresponds(TimePlace, TextA, TextB).
% More specific relationshipsreasoning(Safety, Water, Prehistory, HealthActivities) :-     wrote(Safety, _),    measured(Water, _),    wrote(Prehistory, _),    found(HealthActivities, _).
% Morning activityprepared_to_spend(morning_tea, outside, from(am, am)) :-    when(sun, low_in_sky).
% Motivations or reasons for the actionsprepared_to_help_because(Second, wrote_articles(five_encyclopedias)).
% Movement of the shower headshower_head_position_change :-    initial_position(InitialX),    head_center_position(HeadX),    shower_center_position(ShowerX),    FinalX is InitialX + (HeadX - ShowerX).
% Next actionsprepare_to_write(next_kingdom).% Define some rules based on the factscan_make_money(Org) :- nonprofit_organization(Org), has_funding_sources(Org, _).
% Nobel Peace Prize Considerationnobel_prize(candidate(breathsonings), criterion(uses_images)).
% Object definitions for clarityobject(\"breasoning\").
% Object-Set Relationshipsubject_check_object_membership(Subject, Object) :-    member(Object, Set).
% Observationobserve_pedagogue :-    has_usage(pedagogue, observation),    write('Observing the pedagogue to gain insights.').
% Observationsobservation(king_lion, command) :- tell(others, break_complex_expressions).
% Observationsobservation(plenty_of_sexual_ideas).
% Observationsobserved(vein_valve_close, writing_essays).
% Observationsobserves(A, B) :- student(A), pedagogical_interest(A, B).
% Observations about job acquisition and behaviorsobserved(job_acquisition(alexis)).
% Observations and influencesinfluences(dion, sound_of_text).
% Observations can lead to insights about the futureobserve_changes(Change) :-     observed_changes(Change).
% Observations tied to actionsobservation(marks_increased, more_texts).
% Observes a student writing down an argument (adds it to memory)observe_student(Argument) :-    assert(line(Argument)),    format('Observed student: ~w~n', [Argument]).
% Observing the vein valve actionobserved_vein_valve(close, end_of_segment).
% Opening book at first pageopen_book(X) :- person(X).
% Opinionsgood_lecturer(ben).
% Ordering methodorder_by(alphanumeric_code).
% Other actionsprepared_to_disseminate(person, electron).
% Our 'people' and their biases person(meditation_student).
% Overall processingprepare_actions :-    prepare_to_teach(budgerigar),    prepare_to_write_algorithm,    prepare_to_clean,    prepare_to_push_strawberries,    prepare_to_record,    prepare_to_slice.
% Parent-child relationshipsfirst_action(licked_mango_ice_cream).
% Parse the essay into its constituent partsparse_essay(Essay, Parsed) :-    split_string(Essay, \" \", \"\", Words),    maplist(string_lower, Words, Parsed).
% Pedagogy helper functionalitypedagogy_helper(AigA, AigB) :-     educates(AigA, AigB),    format('The pedagogy helper helps the student with ~w in ~w.', [AigA, AigB]).
% Pedagogy helper's capabilitypedagogy_helper(Person) :- helps(Person, Student), student_prepared(Student).% Preparing a studentprepares(Student) :- gathers_initial_knowledge(Student), establishes_critical_positivity(Student).
% Perspectives and reasoningconsiders(others, A).
% Philosophical Inquiryphilosopher(Question) :-     ask(what_is_philosopher, Question).
% Philosophical playwrightsphilosophical_playwright(Playwright) :-    write(Playwright),    write(' is a philosophical playwright.').
% Philosophyimagined_heidegger_claiming(coit_concealed_rod).
% Physics Observationlike_repels_like(PhysicsObservation) :-    observe(result(PhysicsObservation)).
% Placeholder for checking if a new name exists in the ontologynew_name_exists_in_ontology(Name) :-     % Here, you would have a check regarding the ontology    Name = 'New name in ontology'.
% Placeholder for verification functionverify_authenticity(Assignment) :-    % Assuming authenticity is verified through some criteria    authenticity_verified(Assignment).
% Plan function to encapsulate the main actionsexecute_plan :-    requested(mother, ask_for_hug),    visited(dion, visit_fair),    prepared(doctor, prepared_meal),    consolidated(life, prepare_life),    helped(people, help_others),    noticed(breasoning, philosophy),    executing(biochemist, explain_link, trace_maze),    read_plan_time.
% Planningmade_future_plans(future_plans).
% Playwright Identityplaywright_identity(person) :-     inside(vocational_theater_studies_diploma).
% Potential Summarysummary(Summary) :-    findall(X, (likes(X); removed_ring(X); essays_must_have_space_time_tests;                people_believed_idea; director_counted_actors;                ate_coarse_textured_fruit; neuroscientist_prepared_examine_reason_structure;                made_olive_paste), Facts),    atomic_list_concat(Facts, ', ', Summary).
% Practicum completion rulepracticum_completed(Student) :-     student(Student),     complete_practicum(Student).
% Predicate to analyze the first lineanalyze_first_line(Line) :-    sub_string(Line, 0, _, _, 'First'),    count_h(Line, Count),    Count >= 2.
% Predicate to check if a student is prepared for educationprepared_for_education(Student) :-    coursework_completed(Student),    has_reasoning_skills(Student).
% Predicate to check if all reasons for a subject are providedall_reasons_filled(Subject) :-     (reasoning(Subject, _); !).
% Predicate to count keywords in a linecount_keywords(LineId, Count) :-    line(LineId, Sentence),    split_string(Sentence, \" \", \"\", Words),   % Split sentence into words    findall(Word, (member(Word, Words), keyword(Word)), KeywordList), % Find all keywords in the sentence    length(KeywordList, Count). % Count the keywords% Check if line contains at least N keywordshas_at_least_keywords(LineId, N) :-    count_keywords(LineId, Count),    Count >= N.
% Predicate to count occurrences of a specific keyword in a list of statementscount_keyword([], _, 0).  % Base case: if the list is empty, the count is 0.
% Predicate to display action and reasondisplay_action_reason :-    action(Action, Actor),    reason(Action, Reason),    format('~w did ~w because ~w~n', [Actor, Action, Reason]).
% Predicate to display the textdisplay_text :-    generate_text(Text),    format(\"Here is the collected text:~n~w~n\", [Text]).
% Predicate to express a holistic view of actions and outcomesexpress_intent(Actor, Intent) :-    comment(Actor, Intent);    prepared_to(Actor, Intent);    computes_goal(Actor, Intent);    completion(Actor, Intent);    understanding(Actor, Intent);    creation(Actor, Intent);    protection(Actor, Intent);    action(Actor, Intent).
% Predicate to find a specific statement by indexfind_statement(Index, Text) :-     statement(Index, Text).
% Predicate to list all statementslist_statements :-     statement(Index, Text),     format(\"~w: ~w~n\", [Index, Text]),     fail.
% Predicate to reason outreason_out(Argument) :-    argument(_, Argument, reason(Reason)),    format('Reasoning for argument \"~w\": ~w~n', [Argument, Reason]).% Sample query: Generate all arguments and reasons, and get reasons for a specific argumentexample :-    writeln('All arguments and reasons:'),    display_arguments,    nl,    writeln('Reasoning for a specific argument:'),    reason_out(\"Nobel Peace Prize for Breasonings\").
% Predicate to reason through actionsreason(Action, Subject, Context) :-    action(Action, Subject, Context, Justification),    format('Reason for ~w by ~w: ~w.~n', [Action, Subject, Justification]).
% Preparation for enjoymentprepared_to_enjoy(sun) :-    sitting_in(sun, overcast).
% Preparation for loveprepared_to_bring_love :-    observed(vein_valve, open).
% Preparation for studying a degreeplaced_in_cage(person).
% Preparation for the playwork_day(Person) :-     prepares(Person).
% Prepare for an excursionprepare_excursion(ApplyZinc, Lips) :-    ApplyZinc = true,    Lips = lips_protected.
% Preparing actionsprepare_to_teach(Budgie) :-    action(teaching(Budgie)),    entity(budgerigar).
% Preparing for feedingprepare(watermelon) :-     write('Preparing to feed the bird.'),    write('Cutting the watermelon into smaller pieces.').
% Preparing to eat mangoprepared_to_eat(mango, predictively_model_customer_needs).
% Preparing to love and help othersmediate_emotions :- friendly_approach(prepare_love), meditation_required(yes).
% Preparing to play a characterprepared_to_play(Person) :-     prepared_to_play(Person).
% Preparing to sit in gazeboprepared_to_sit(gazebo).
% Prerequisites for a jobprerequisite(Job, Requirement) :- job(Job), requirement(Requirement).
% Pretending to be a spypretend_to_be_spy(Activity) :-    Activity = 'Reading ghost writings for insight'.
% Prints the analysis of the imageprint_image_analysis(Firstline, Breasonings) :-    format(\"First Line of Image: ~w~n\", [Firstline]),    format(\"Breasonings:~n\"),    print_breasonings(Breasonings).
% Proceduresprepare_humpy :-     activity(prepare_aboriginal_humpy),    write('Prepared to make an Aboriginal humpy by sitting under the tarpaulin.').
% Process or actions takenprocess_tv_preparation :-     preparing_for_tv(TV),     format('Prepared for ~w~n', [TV]).
% Process to execute all actions in orderexecute_all :-    relates(shower_head_vertical, Next),    execute_action(shower_head_vertical),    execute_all_next(Next).
% Professor's actionsprepared_to_execute(professor, brain_program).
% Prolog rule to determine if an action is necessaryis_necessary(Action) :-     requires(Item, Action),    action(Action, Item).
% Prolog rules based on the text narrativecheck_subject_action(Subject, Action) :-    subject(Subject),    action(Action).
% Properties of objectsproperty(cheesonings, flavorful).
% Protecting oneselfprotect(Self) :-     write('Preparing to protect self from lawsuits by asking talent to sign a release form.').
% Quality comments and philosopher observationshigh_quality_comment(michel_onfray, Comments) :-     Comments = \"Michel Onfray comments critically on traditional philosophies\".
% Queries% To check actions?- action_by_hosing_top_of_head(Person).
% Queries% ?- ethical_assessment(john).
% Queries% Check if breathsonings are a basis for the Nobel Prizeis_nobel_prize_candidate(breathsonings) :- helps(ideas, breathsonings).
% Queries% Example queries could be:% To find out if the writer made the books available:% ?- made_available(writer, books).
% Queries% To find what topics are influenced by Lucianic Meditation, you could run:% ?- influences(lucianic_meditation, Topic).
% Queries% You can query these relationships:% ?- relationship(dion, people).
% Queries% You can use the following queries to find facts% Example: ?- prepared_to_improve(X, Y).% Example: ?- observed_child_experience(X, Y).
% Queries?- create_press_release(neuroscientist, Subject).
% Queriesquery_breasoning(Subject) :-    result_if_breasoning(Subject),    can_reuse(Subject).
% Queries about causal relationshipswhy(Cause, Effect) :- caused_by(Effect, Cause).
% Queries based on the narrative% Can be used to derive information% Query example: Is the order method alphanumeric?is_order_alphanumeric :-    order_by(alphanumeric_code).
% Queries can be made based on facts% Example queries:% ?- communicates(X, subject).
% Queries can be made to deduce information% Example queries:% ?- contacted_god(Endorsed).
% Queries can be made to retrieve specific relationships% ?- liked(X, myself).  % Would return lucian if queried```### Explanation:1. **Facts**: Each line like `liked(lucian, myself).` represents a fact. You can think of these as statements that represent truths in your narrative.
% Queries could be used to extract information:- begin_tests(narrative_tests).
% Queries for various realizations:- initialization(main).
% Queries that combine reasoning about tasksreason_to_become_pedagogue(Applicant) :-    complete_task(Applicant, reasoning),    write(Applicant), write(' is completing the reasoning task. Keeping in mind functional calls for predicates.'), nl.
% Queries that you might ask in this context% ?- formalism(X).
% Queries to explore facts% ?- does_not_like(X).
% Queries to explore the knowledge basesuggest_to_know_about_lucianic_medicine(Student) :- prefers_to_know(lucianic_medicine, Student).
% Queries to explore the reasoning relationshipsquery_remark(Reason) :- reason_for(Reason, _).```### Explanation of the Code1. **Facts:** We start by defining facts that correspond to the components of your reasoning. For instance, `part_of/2` could relate 'dadirri' to university graduates in meditation philosophy.
% Queries to explore the relationshipsquery_head_comfort_reason(Reason) :- head_comfort_reason(Reason).
% Queries to find out actions% Example Queries:% ?- ethical_assessment(alexis).
% Queries to find out what causes or events occuris_event(Event) :- event(Event).
% Queries to find specific actionswhat_action(A) :- action(A, _).
% Queries to retrieve information% Example query:% ?- action_for_love(X).% ?- action_for_invitation(friend).
% Queries to retrieve information based on actions% Example query:% ?- walked_to(I, Tree).
% Queries to retrieve or reason through the factsquery_actions :-    findall(Action, action(Action, _, _, _), Actions),    format('Listed Actions: ~w~n', [Actions]).
% Queries to run% To check if an action can be performed, you would query:% ?- action(eat_rice_ball).
% Queries to show how to get to the conclusionsquery_teleport_time_machine :-     teleport_time_machine(house).
% Queries you can ask% To find out if John works in government?- works_in(government, john).
% Queries you could run% - To check what was tested% ?- tested(What).
% Queries you might run% ?- supports_conversion_to_speech(subject).% ?- reads_to_end(book).
% Query% You can now query the program with:% ?- big_and_good(Teacher).
% Query Examples% To verify if the untitled idea was supportedcheck_if_supported(Idea) :- determine_if_supported(Idea).
% Query example% ?- reasoning_path(licked_rim_of_glass, Path).
% Query example% To find out the causative steps from 'verify_enough_new_breasonings' to 'heavier_objects_than_last_time':query_causation(Start, End) :- implies(Start, End).
% Query example% To find out who prepares to be famous:% ?- famous(Person).```2. **Line Item in Line**:    - The term \"line item\" typically refers to a single entry in a list or statement of items, particularly in an invoice or a detailed report. In the context of programming or data structures, it could refer to an element in a sequential data structure such as a list or an array.
% Query examplequery_relationship(X, Y) :-    connected(X, Y) -> write(X), write(' is related to '), write(Y), nl;    write(X), write(' has no direct relationship with '), write(Y), nl.% To run a query in the Prolog interpreter, use:% ?- query_relationship(X, Y).
% Query example for performing inference:- thought_leads_to_sales(X), action_based_on_thought(Action, X).
% Query example predicatewhat_was_done(X, Reason) :-    action(X, reason(Reason)).
% Query example to get all reasons for an actionget_reasons(Action, Reasons) :-    findall(Reason, reason_for_action(Action, Reason), Reasons).
% Query example to start from a certain action?- explain(sit_on_pious_seat, Who).
% Query example:% To find out if the subject argued for the training in medicine for A and B:% ?- argued_for_training_in_medicine(a, b).
% Query example: Ask what actions Dion tookwhat_actions(dion, Actions) :-    findall(Action, performed_by(_, dion, Action), Actions).
% Query example: Did Snow White prepare to eat the apple?did_snow_white_prepare(Apple) :-    prepared_to_eat(Apple, snow_white).
% Query example: What did I do by a certain action?what_did_i_do(X) :- did_this_by(X, _).
% Query example: What did the meditator find out?find_out_thoughts(Thoughts) :-    mind_read(meditator, student, Thoughts).
% Query example: What subject did I write on?subject_written(Subject) :-    wrote_on(Subject).
% Query examples% 1. Find the purpose of removing carrageenan from ice cream?- action(remove_carrageenan(ice_cream), purpose(Purpose)).
% Query examples% ?- brings_joy(blue_ocean, Gifts).
% Query examples% ?- is_free(short_courses).
% Query examples% How did the king gave a strawberry milkshake?query_event(E) :- event(E, king).% Find out reasons behind specific eventsquery_reason(E, R) :- reason_for_event(E, R).
% Query examples% To check if the organization can make money% ?- can_make_money(my_organization).
% Query examples% To check if the presentation is ready:?- presentation_ready(presentation).
% Query examples% To check if we should endorse Malcolm Turnbull:?- should_endorse(malcolm_turnbull).
% Query examples% To determine the sequence of actionssequence(Action1, Action2) :- causes(Action1, Action2).
% Query examples% To find out if the medicine student supports human rights:% ?- supports_human_rights(medicine_student).
% Query examples% To see all actions for a given subject?- action_informs_subject(X).
% Query examples% To see the actions with their reasons, you can invoke:% ?- can_do(Action).
% Query examples% What did I write?what_i_wrote(Topic) :- wrote(Topic, i).
% Query examples?- reason_human_benefit(X).
% Query examplesquery_relationship :-    nurtures(Person),    writes_thoroughly(Person),    prepare_to_state(Impressionism),    supports(alexis, subject),    is_functional(pan).
% Query exampleswho_prefers_writing(X) :- prefers_writing_to_speech(X).
% Query examples :- agree(crew_member(X), Y).
% Query examples to illustrate the relations?- should_indulge(alexis).
% Query examples to reason with% ?- listens_through(he, keyhole).% ?- prepares_apology(he).
% Query examples to retrieve summaries% For example, to find out why he cut out the letter?- summary(what, Reason).
% Query examples:% ?- carryable(spoon).
% Query examples:% To find if there is a reasoning chain from 1 to 11:% ?- chain(1, 11).
% Query examples:% To verify if a pedagogue has completed writing:% ?- success(pedagogue).
% Query examples:% You can query the following in your Prolog environment:% ?- should_be_founder(alexis).
% Query for student's socioeconomic status% ?- student(X).
% Query functions% Here are some example queries you might run:% ?- prepare_to_construct_robot(150).
% Query the actions and determine agreement/disagreementevaluate_statement(Statement) :-    statement(Index, Statement),    (agreed(Statement)     -> write(Statement), write(\" : Agreement\"), nl     ; disagreed(Statement)     -> write(Statement), write(\" : Disagreement\"), nl     ; write(Statement), write(\" : Uncertain\"), nl).% Evaluate all statementsevaluate_all_statements :-    statement(_, Statement),    evaluate_statement(Statement),    fail.
% Query the effects of studentsquery_effects :-    student_effect(meditation_student, medicine_student, pedagogy_student).
% Query to ask about the algorithm and actions?- argument(Argument).
% Query to check if a conclusion can be reachedcan_conclude_example(Conclusion) :-    can_conclude(Conclusion).
% Query to check if an action is related to anotherrelated_to(A, B) :- relates(A, B).
% Query to check if the goal was achievedcheck_goal_achieved :-    (goal_achieved -> write('The goal was achieved.');    write('The goal was not achieved.')).
% Query to check if the preparation is comprehensiveready_for_next_part :-    prepare_for_next_part -> writeln('Ready for the next part of life.');    writeln('Not fully prepared yet.').
% Query to check the effects of high-quality imagery from meditationquality_through_meditation(X) :- high_quality_imagery(X).
% Query to check the sequence of actionssequence_of_actions(List) :-    findall(Action, action(Action), Actions),    build_sequence(Actions, List).
% Query to derive relationshipscan_win_point(X) :-     has_positive_reason(X),    won_point(universal_winning_statement).
% Query to display the relationshipsdisplay_actions_with_reasons :-    sequence(S),     forall(member(A, S),            (action(A, because(Reason)),             format('~w is done because ~w.~n', [A, Reason]))).
% Query to find a structured representation of the statementsanalyze_statements :-    forall(statement(Index, Statement),           (meaning(Index, Meaning),            write('Statement: '), write(Statement), nl,            write('Meaning: '), write(Meaning), nl,            write('----------------------'), nl))    .% Query to analyze relationshipsanalyze_relationships :-    forall(relationship(From, To, Relation),           (statement(From, FromStmt),            statement(To, ToStmt),            write('Relationship: '), write(FromStmt),             write(' '), write(Relation),             write(' -> '), write(ToStmt), nl))    .
% Query to find actions with their reasonsfind_action(A) :- action(A, _).
% Query to find connected statementsfind_connected(StatementID, ConnectedStatement) :-    connected(StatementID, ConnectedStatement).
% Query to find out what actions depend on a particular actionfind_dependent_actions(Action) :-    depends_on(DependentAction, Action),    format(\"Dependent Action: ~w depends on: ~w~n\", [DependentAction, Action]),    fail. % Force backtracking to list allfind_dependent_actions(_).```### Explanation1. **Facts**: The program begins by defining some facts where actions and reasons are specified with predicates `action/2` and `reason/2`. 2. **Consequences**: The `consequence/2` predicate defines what follows from a certain action.
% Query to find specifics based on hair colorquery_hair_color(HairColor) :-    find_all_reasonings_by_hair_color(HairColor, Students),    format('Students with ~w hair: ~w~n', [HairColor, Students]).
% Query to find subject directionslist_subjects :-    subject(Name, Description),    format('Subject: ~w, Description: ~w~n', [Name, Description]),    fail.
% Query to find the actions and their most useful meaningsfind_useful_meanings(Action, Meaning, UsefulMeaning) :-    action(Action),    meaning(Action, Meaning),    useful_meaning(Action, UsefulMeaning).
% Query to find the reason for an actionreason_for_action(Action, Reason) :-    action_with_reason(Action, Reason).
% Query to find the reason of an actionfind_reason(Action, Reason) :-    action(Action, _),    reason(Action, Reason).
% Query to find the sequence of actionsall_actions(Sequence) :-    findall(Action, sequence(_, _, Action), Sequence).```### Explanation1. **Actions and Their Attributes**: Each action is defined through `action/2` predicates that specify what action is happening and any relevant attributes (like object or position).
% Query to find what actions are derived from Alexis's judgmentquery_derivation_for_alexis(Action) :-     derive_action(judgment(alexis, _), Action).
% Query to get explanationsexplain_all :-    findall(Action, action(Action, _), Actions),    maplist(explain_action, Actions).```### Explanation of the Code1. **Action Definition**: Each action is defined as a predicate `action(Action, Reason)`, where `Action` is the action taken, and `Reason` is the justification for that action.
% Query to list actions and their reasonslist_actions :-    action(A, B, C),     format('Action: ~w, Reason: ~w ~w~n', [A, B, C]),    fail.list_actions.
% Query to run all stepsrun_all_steps :-    step(1, unfold_item),    step(2, write_press_release_for_meinong),    step(3, prepare_for_heaven),    step(4, shelter_under_tree),    step(5, lick_letters_shape),    step(6, verify_program),    step(7, eat_with_chopsticks).
% Query to see performed actionsquery_performed_actions :-    findall(Action, performed_action(Action), Actions),    write(Actions).
% Query to see the complete sequencerun_sequence :-    action(InitialAction),    sequence(InitialAction).
% Query to see what has been preparedshow_prepared_actions :-    findall(Action, action(Action), Actions),    format('Prepared actions: ~w', [Actions]).
% Query to understand the actions of the subjectsqueries :-    subject_action(Subject, Action),    format('~w performs the action: ~w~n', [Subject, Action]).
% Querying example% ?- sequence_of_events(Sequence).
% Querying relationships between actionsaction_chain :-    led_by_example(Example),    prepared_for_stage(Stage),    sewed_sides(Sides),    self_knowledge(Self),    noticed_system(System),    visualise_object(Object),    stated(Stated),    drank(HolyWater),    prepared_to_eat(CoconutCream),    format('Example: ~w~nStage: ~w~nSides: ~w~nSelf: ~w~nSystem: ~w~nObject: ~w~nStated: ~w~nDrank: ~w~nPrepared to eat: ~w~n',           [Example, Stage, Sides, Self, System, Object, Stated, HolyWater, CoconutCream]).```### Explanation:1. **Facts and Rules**: Each assertion from your input is represented as a Prolog fact. The `led_by_example`, `prepared_for_stage`, and other predicates are defined to store the respective information.
% Querying the narrativenarrative_flow :-    process(Subject),    write('Narrative processing subject: '),    write(Subject), nl.
% Querying the reasoning for actionsquery_reasoning(Sentence, Reason) :-    reasoning_per_sentence(Sentence, Reason).
% Querying to find out various relationshipsquery_relations(X) :- inference(X, Y), write(X), write(' causes '), write(Y), nl, fail.query_relations(_).
% Questioning mechanismask_same_question(Question, Answer) :-    answer_question(Question, Answer),    answer_question(Question, _).% Define answering a questionanswer_question(Question, Answer) :-     % Define how the answer is derived, can be a placeholder for now    Answer = 'sample answer'.
% Questions and responsesasked_about_personality(person, text).
% Rate of human thoughtthought_rate(High) :-    High = 'Reflects speed of human thought and influences meditation.'.
% Rationale (why actions are taken)reason(organize_feast, shaded_area, designer).
% Read plan time actionread_plan_time :-    read('The Procrastinator').
% Reason about the validity of a reasoningvalid_reasoning(Reason) :-     Reason = (heaver_than(rock, apple)),    write('The reasoning is valid: Rock is heavier than apple.').% Sample query to invoke the perform_action predicate% ?- perform_action(rock, morning).
% Reasoner's positioning of finger above a model featherpositioned_finger(First) :-     first_action(positioned_finger_above_model_feather).
% Reasoning Processreasoning(Object, Reason) :-    breasoned(Object, Reason).
% Reasoning about connecting argumentsdovetail_arguments :-    prepare(reasoner, dovetail(arguments)),    pluck(feather, model_pheasant_tail).
% Reasoning about the objectbreasoned_out(object).
% Reasoning about visualization of an object in 3D spacevisualize_object(Object) :-    object(Object, X, Y, Z),    format(\"Visualizing object ~w at coordinates (~w, ~w, ~w).~n\", [Object, X, Y, Z]).% An example of using reasoning to compare two subjectstest_objects :-    same_coordinates(rabbit, dion) ->    writeln('Dion and the rabbit are at the same coordinates.');    writeln('Dion and the rabbit are at different coordinates.').
% Reasoning for pedagogue applicantqueen_requires_reasoning(applicant, breasonings).
% Reasoning for pedagogy helper% Check if the argument given is suitable for the audiencesuitable_argument(Argument, audience(general)) :-    \\+ nonsexual(Argument), !.
% Reasoning leads to recordingsreasoning_to_recordings :-     people_wrote_reasoning(true).
% Reasoning structurereasoning_structure :-    demonstrated_performance,    performed_action(Action),    walked_first_house,    tight_grammar_found.```### Explanation:1. **Facts**: We define facts representing actions and relationships. For instance, `loves_people(demonstrator)` states that the demonstrator loves people.
% Reasonings for writingreasoning_per_sentence(Sentence, Reason) :-    (   Sentence = 'DION Two uses is correct' -> Reason = iconism_correct(nature)    ;   Sentence = 'ALEXIS I prepared to quote the guide' -> Reason = prepared_to_quote(john, guide)    ;   Sentence = 'The argument didnt mention God' -> Reason = \\+ mentioned_god(argument)    ;   Reason = 'No valid reasoning found').
% Reasons behind actionsreason(records(medicine_student, article),        prepares(medicine_student, help(adrian),        likes(medicine_student, teacher))).
% Reasons for Debatereason_for_debate(sperm_whales, environmental_conservation).
% Reasons for actionsreason(check_walkthroughs, clear_understanding).
% Reasons for actionsreason(crossed_creek, __).reason(create_pedagogue, assessment).
% Reasons for actionsreason(held_it) :- true.
% Reasons for actionsreason(studying(gender_studies), preparing(famous)).
% Reasons for actionsreason(wrote_breasonings, happiness_in_medicine).
% Reasons for actionsreason_for(drinking_water, theme_of_medicine).
% Reasons for the actionsreason(love_the_snake, enough_food_and_resources).
% Recursion in structure detectionrecursive_structure(Structure) :-     member(X, Structure),     recursive_structure(X).% Theoretical functor for depression prevention and preparationprevent_depression(Student) :-     did(Student, prepared_to_prevent_depression),     prepared(Student, medicine_short_course).
% Recursive case: process the head and then the tailprocess_elements([Head|Tail]) :-    write('Processing: '), write(Head), nl,    examine_element(Head),    process_elements(Tail).
% Recursive definition of action leading to consequenceperform_action(Action) :-     prepared_to(state, Action),     write('Performing the action: '), write(Action), nl.
% Recursive interpretation processingprocess_list_recursively([]).
% Recursive reasoning until a condition is metrecursive_reasoning(Happy) :-    look_over_reasons recursively,    condition(happy, Yes),    (Yes -> true; recursive_reasoning(Happy)).
% Recursive relationship for processing reasonsexplain(X) :-    reason(X, Y, Z),    format('~w -> ~w (reason for ~w)~n', [X, Y, Z]),    explain(Y).
% Recursive rule definitionsstatement(1) :- is_alive(god).
% Recursive structure exampletoken_recognition(Tokens) :-     is_recurring(Tokens).
% Recursive structures and dependenciesupload_changes(Changes) :-     changes(Changes).
% Reflecting on nature's iconism and daily practicesdaily_iconic_practice(Subject) :-     format('Loading different icons for the subject: ~w~n', [Subject]).
% Reflecting on the chapter with confidencereflect_on_chapter(Chapter) :-    write('Reflecting on the chapter: '), write(Chapter).
% Relation of subject to actionssubject(alexis, stack_objects).
% Relationship as part of educationrelationship_in_education(vocational_diploma) :-    write('Having a relationship is essential in Applying Vocational Education Diploma.').
% Relationship between DION as a robot and memorycannot_rely_on_memory(Robot) :-     robot(Robot, \"subject should not rely on memory\").
% Relationship between a king and answering questionsking_answered(king1, correct_answer).
% Relationship between activitiescut(spinach).
% Relationship definitionscauses(essay_kept_years, intermingled_states).
% Relationship of prerequisites and actionsfirst_house_prerequisite(Job) :-    prerequisite_job(Job).
% Relationshipscauses(verify_enough_new_breasonings, testing_taken_care_by_algorithm).
% Relationshipscomment(chomsky, meinong, probable).
% Relationshipsconnected(X, Y) :- study_area(X, Area), topic_of_interest(Y, Area).
% Relationshipsconnected(lucianic_meditation, ancient_greece).
% Relationshipscontributed(doctor_quality(better), event(conception)).
% Relationshipshas_usage(gay_thought, pencil).
% Relationshipshelping_pedagogy(Subject) :-    subject(Subject),    influences(Subject, _).
% Relationshipsin_front(m, queen).
% Relationshipslikes(alexis, writing).
% Relationshipsmade_profit(both).
% Relationshipsmatches_color(friend, self).
% Relationshipsmotivated_to(buying_laptop, focus_on_bussiness).
% Relationshipsnurturing(me, h) :- need_high_marks(me).
% Relationshipsprepared_for_critical_thinking :- attended_logic_summer_school(nations_top_university).
% Relationshipsrecommended_to_friend(by_recommender).
% Relationshipsrelationship(continuous_dialectics, each_book, dion).
% Relationshipsrelationship(keeping_dowry, prepared(love_being_in_you)).
% Relationshipsrelationship(partner, character(unknown)).
% Relationshipsrequested(mother, ask_for_hug).
% Relationshipssupported_by(Entity, Supporter) :- positive_entity(Supporter), \\+ conflicted(Supporter).
% Relationshipswants_to_live(john).
% Relationships (causal and sequential)relationship(1, 2, 'supports').
% Relationships (rules) based on the narrativeprepares(Entity, Task) :- action(Task), (Entity = dependent -> Task = preparing_for_comments ; Task = preparation_for_essay).
% Relationships and conditionssubject(alexis).
% Relationships and observationsrelationship(homophones, sameness).
% Relationships based on the actionsexperienced(object1, object2) :- endorsed(local_products).
% Relationships based on the provided textclosed_shutter(person).
% Relationships between actionsagreed(John, Reason) :- Reason = 'I agreed because I had a valid reason'.
% Relationships between actionsprecedes(find_pad, lift_self_up).
% Relationships between actionsrelates(shower_head_vertical, shredding_spinach).
% Relationships between actions and observationsrelated(give_recordings, marks_increased).
% Relationships between conceptsliked_iconism(nature, true).
% Relationships between conceptsrelated(noumenon, knowledge).
% Relationships between different entitieshas_functionality(region1, function1).
% Relationships between factshas_health_benefit(medicine).
% Relationships between objectsconnected(clique_node1, clique_node2).
% Relationships between subjects and actionsdid(dion, played_music).did(dion, commissioned_translation).
% Relationships between taskstask(press_release, [write_press_release, ask_for_work]).
% Relationships can be queried% Example queries:% ?- did_this(Action, Reason).
% Relationships showing sequential actions or dependenciesprecedes(return_twice, cook_watermelon).
% Relationships to inquire about actions and their reasoningis_action_reason(A, R) :- action(A, R).
% Remove duplicatesunique_path([], []).
% Represent the nonstick and hygienic conditioncondition(nonstick_hygienic).
% Represent the pedagogical processcreate_pedagogue(Student) :-     student_has_area_of_study(Student, meditation),    student_has_area_of_study(Student, stress_relief),    breasoning_action('clarity of mind'),    breasoning_action('release of tension').
% Representation of mapping input to output through specificationsmap_input_to_output(Input, Output) :-     spec(Input, Output).
% Representing homophones and homographsword(homophones).
% Represents relationships between actions and thoughtsrelates(open_lunch_box, prepared_to_like_living).
% Represents thoughts or reflectionsthought(cubes_cleaning_cubes).
% Research Preparationprepared_to_research(writing, meditation).
% Robot characteristicsrobot(non_headofstate, \"not as human\").
% Rock-paper-scissors illustrationillustrate(illustrator) :- hand_draw(illustration), play_variants(rock_paper_scissors).
% Royal Preparationroyal_preparation(king, throne) :-     prepare(crown(flat_bottom)).
% Rule describing the reasoning processprepare_for_simulation(Simulation) :-    simulation(Simulation, food).
% Rule describing the sequence of thoughtthought_process(Thought) :-    preparation(download_information, Thought, sensory_input),    action(walked, to(swan)),    examine(mans_ideas, order(honorary_fellows)),    direction(person_or_object, room_area(time)),    prepare_to_support(human_rights),    writing(about, god(master)),    prepare_for_simulation(simulation).% Example query you might run in Prolog % To see the thought process chain:% ?- thought_process(Thought).
% Rule for choosing setting and reason for argumentschoose_setting_time(Setting, Time) :-    Setting = setting,    Time = discussion_time.
% Rule for discussing safetyis_safe(Passage) :- safe_passage(Passage).
% Rule for farmer harvestingprepare_for_harvest :-    preparation(farmer_harvest, wheat),    action(aligning_tofu).
% Rule for insertion points in various contextsinsertion_point(data_collection).
% Rule for preparing and performing an actionprepare(Action) :- action(Action), write(Action), nl.
% Rule for preparing for TV appearanceprepare_for_tv :-    preparation(tv_appearance, skin_blemishes),    use(lucianic_medicine),    use(quantum_box_prayer).
% Rule for protection based on gearneeds_protection(Gear) :-    protective_gear(Gear, _).
% Rule for the preparation to support an ideaprepare_to_support(Idea) :-    support(Idea, march(progay)).
% Rule that describes the thought processconstruct_reason :-    reason(spatial_construction, ALEXIS),    first_look_for(ALEXIS).
% Rule to add a commentadd_comment(Line, Comment) :-    assertz(comment(line(Line), Comment)).
% Rule to check actions related to a specific subjectactions_for_subject(Subject) :-    subject(Subject, Action),    action(Action),    format('Subject: ~w; Action: ~w~n', [Subject, Action]).
% Rule to check if a subject has connected argumentsconnected_arguments(Subject) :-    action(connect_arguments, Subject).% Rule for examining group dynamicsexamining_group(Subject) :-    action(examine_group_dynamics, Subject).
% Rule to check if the subject's work performance indicates social integrationwork_performance(AssignmentsCompleted, SocialInteractions) :-    AssignmentsCompleted > 5,    SocialInteractions > 2.
% Rule to connect pedagogy with teaching methodsconnect_pedagogy_with_method(Method, Subject) :-    pedagogy(Method),    Method = meaning_attachment,     Subject = math.
% Rule to create a summarysummary(Summary) :-    findall(Action, action(_, Action, _), Actions),    atomic_list_concat(Actions, ', ', ActionList),    Summary = 'The actions taken include: ' + ActionList + '.'.
% Rule to describe a reasoning processreason_for_approval(Person, Place) :-     slept_in_place(Person, Place),     approved_of(Person, Place).
% Rule to describe sequences or implications prepare_action(Action, Reason) :-    action(Action, Reason).
% Rule to determine if a line contains at least N itemscontains_line_with_items(Line, N) :-    line(Line, Items),    length(Items, Length),    Length >= N.
% Rule to determine if a student is knowledgeable in a subjectis_knowledgeable(Student, Subject) :-    student(Student),    knowledge(Student, Subject).
% Rule to determine if an action was positivepositive_action(Action) :-     action(Action),     reason(Action, Outcome),     (Outcome = positive; Outcome = self_care; Outcome = knowledge).
% Rule to display all commentsdisplay_all_comments :-    comment(Line, Comment),    format('Line ~w: ~w~n', [Line, Comment]),    fail. % Forces backtracking to find all commentsdisplay_all_comments.
% Rule to display eventsdisplay_event(Event) :-    event(Event, Statement, because(Reason, Explanation)),    format('~w ~w ~w.~n', [Statement, 'because', Explanation]).
% Rule to express preparation for sleepsleep_preparation :-     write('Preparing to go to sleep.').
% Rule to express that Alexis should become a foundershould_be_founder(Person) :-    role(founder, Person).
% Rule to filter non-offensive commentsfilter_non_offensive(Comment) :-    comment(_, Comment, non_offensive).% Rule to filter out duplicatesfilter_duplicates(Comment) :-    comment(_, Comment, duplicate),    !, fail.
% Rule to find all actions and their reasonsfind_all_actions_and_reasons :-    action(Action),    reason(Action, Reason),    format('Action: ~w; Reason: ~w~n', [Action, Reason]).
% Rule to find out all actions takenall_actions(Action) :-    action(Action).
% Rule to find the statement chainfind_chain(X, Chain) :-    findall(Y, statement(X, Y), Next),    append(Next, Chain).
% Rule to get reasons for a specific actionreasons_for_action(Action, Reason) :-    reason(Action, Reason).
% Rule to get unique, non-offensive commentsget_valid_comments(Comment) :-    filter_non_offensive(Comment),    filter_duplicates(Comment).
% Rule to handle object stacking based on positive experiencecan_stack_objects(Subject) :-    experience(Subject, positive),    format('~w can stack objects stably on the trolley.~n', [Subject]).
% Rule to help a student learn a new subjecthelp_student_learn(Student, Subject, Method) :-     student(Student),    pedagogy(Method),    connect_pedagogy_with_method(Method, Subject),    \\+ knowledge(Student, Subject), % Student does not already know the subject    format(\"Helping ~w learn ~w using ~w methods.~n\", [Student, Subject, Method]).
% Rule to indicate limits of understandinglimit_understanding(Subject, Limitation) :-    Subject = subject,    Limitation = understanding_of_speech_vs_text.
% Rule to infer what's necessary for a statement to hold trueinference(X, Y) :- causes(X, Y).
% Rule to remove a commentremove_comment(Line, Comment) :-    retract(comment(line(Line), Comment)).
% Rule to retrieve comments for a specific lineget_comments(Line, Comments) :-    findall(Comment, comment(line(Line), Comment), Comments).
% Rule to summarize the whole processsummarize :-    find_observation(give_recordings, MarksObservation),    find_observation(crush_raspberry, RaspberryObservation),    find_observation(observe_birth_numbers, BirthObservation),    find_observation(lick_spoon, SpoonObservation),    find_observation(help_child, ChildObservation),    find_observation(prepare_record_result, RecordObservation),    find_observation(write_on_ethics, EthicsObservation),    format('Summary of Actions and Observations:~n'),    format('1. Gave recordings: ~w~n', [MarksObservation]),    format('2. Crushed raspberry: ~w~n', [RaspberryObservation]),    format('3. Observed birth numbers: ~w~n', [BirthObservation]),    format('4. Licked spoon: ~w~n', [SpoonObservation]),    format('5. Helped child: ~w~n', [ChildObservation]),    format('6. Prepared to record result: ~w~n', [RecordObservation]),    format('7. Wrote on ethics: ~w~n', [EthicsObservation]).
% Rule to verify if all words are uniqueunique_words([]).
% Rules% A rule to check if a region has a specific functional color identified by the neuroscientisthas_functional_colour(Region, Colour) :-    neuroscientist_identifies_colour(Region, Colour).
% Rulesaction_by_hosing_top_of_head(Person) :-    performed_action(hose_head, Person).
% Rulesaction_preparation(did_cook, spoon) :- cooked(spoon).
% Rulesaim_with_best(X) :- prepared_to_aim_with_best(X).
% Rulesargued_for_training_in_medicine(X, Y) :- training_in_medicine_argument(X, Y).
% Rulesbig_and_good(X) :- prepared_to(X, lucianic_meditation).
% Rulescan_simulate_space_travel :-    observation(quantum_computer, can_compute_instantly),    observation(space_travel, possible_due_to_quantum_computer).
% Rulesconnect_universe_with_pathways :- action(connect_universe), pathway(connect).
% Rulescure_code(used_for_different_purposes).
% Rulesderived_power :- replicated_spacecraft(Yes), derived_quantum_power_from_nothing(Yes).
% Rulesexperience_love :-    prepared_to_bring_love(yes),    know_how_to_teach_meditation(yes).
% Rulesfamous(Person) :- prepares_for(Person, _, famous).
% Rulesformalism(X) :- wrote_formalism(X).
% Ruleshead_of_state_supports_visitors(State) :-     not(supported_visitors(State, no)).
% Rulesimplies(A, B) :- causes(A, B).implies(A, B) :- causes(A, C), implies(C, B).
% Rulesinfluences(X, Y) :- connected(X, Y).
% Rulesis_free(Course) :- optionally_free(Course).
% Rulesis_teacher(Teacher) :-     role(Teacher, educator).
% Ruleslast_item(Item) :- doctor_quality(better), Item = last_line.last_line :-     not(event(_)).
% Ruleslived_high_life(Identifier) :-    high_life(Identifier),    helps_body(Identifier, high_life).
% Rulesneed_high_marks(me) :- enter(honours).
% Rulesneeds_breasonings(Number) :-     prepared_to_walk_around_hill(true),    read_map(true),    examined_size_of_groups(true),    gave_straw(true),    repeated_until_no_more_points(true),    paid_recruiter(true),    freedom_and_creativity(true),    Number is 5. % Hypothetical number for the sake of the example% To query the number of reasonings required using the equitable system?- needs_breasonings(X).
% Rulesneeds_pedagogy(Student) :-     written_assignment(Student, A),    not(pedagogy_guide_read(Student)),    write('Student should read the Pedagogy Guide to learn how to earn an A grade.').
% Rulesobservation(Observation) :-     teacher(given, meditator, enough_breasonings),    Observation = 'Red signal switch on because the teacher gave the meditator enough breasonings per utterance'.
% Rulesperform_action :-     action(swallow(priest, wine)),    action(predict_savings(text_to_breasonings)),    action(write(breasonings)),    action(prepare(spelling_adjustments)),    action(examine(title)),    action(read(comments)),    not(want_not_write_in(meditation)).
% Rulesperformed_action(Action) :-     walked_to_place(because(_)),    Action = 'walked to the place'.
% Rulesprepare_for_action(n, person(X)) :- wrote_text_database(X).
% Rulesprepare_for_next_part_life(Subject) :-    spiritual_preparation(Subject),    meditation(Subject).
% Rulesprepare_for_writing(X) :- prepared_to_write(X), found_positive_functional_way(W), high_quality_developed(V).
% Rulesprepare_to_be_friendly :-    friendly_action(walk),    write('Going for a walk to be friendly.'), nl.
% Rulesprepared_to_enter(Room) :-     object(Room),    action(writing).
% Rulesprevious_order(Order, PreviousOrder) :-    Order > 1,    PreviousOrder is Order - 1.
% Rulessafe_person(Person) :-     stayed_close(Person),    mind_reading(joined_mult_languages).
% Rulesselect_main_idea(Ideas) :-    metaphysical_counter(Time),    computational_hegelian(Example),    self_knows_meaning(Self, Other),    retest_repositories(FirstPredicate),    licking_spoon(He),    missing_hen(Reappeared),    half_open_umbrella(Second),    causal_merge_diverge(CAW, Horizontal, Vertical, RequiredFunction),    Ideas = [Time, Example, Self, Other, FirstPredicate, He, Reappeared, Second, CAW].
% Rulesshould_breason_out_arguments(Subject) :-    student_reasoning(Subject),    lecturer_reasoning(lecturer).
% Rulesshould_endorse(X) :- endorsed(X).should_intercept(Student) :- performed_poorly(Student), has_formative_assessment(Student).
% Rulesshould_understand_and_check(Source) :- understand_object_in_speech(\"subject\", Object), check_source(\"subject\", Source).
% Rulessolve_puzzle :-    author_unknown_material(Author),    write('The author of the unknown material is: '), write(Author), nl,    examined(culture),    write('Examined culture to gather information.'), nl,    saw(duck),    write('Saw the duck as part of the observation.'), nl,    cut_from_plant(tulip),    write('Cut the tulip from the plant.'), nl,    pressed_tofu_in_place,    write('Pressed the tofu in place as a final preparation.'), nl,    write('Preparing to record the final move...'), nl,    record_final_move(queen_duchess_piece).
% Rulessubject_should_not_be_late(Subject) :-     event(read_comments(Subject)),    event(write_first_comment(Subject, _)),    \\+ event(negative_experience(Subject)).
% Rulessuccessfully_recommendable(X) :-     recruited_students(X),     prepared_to_relate(metaphysics, pedagogy),     child_equipped_for_study(child),    helped_with_conception_medicine(computational_algorithm).
% Rulessummary_ontology(Article, Summary) :-    Article = 'DION',    Summary = 'The subject should summarize the ontologies of objects in the article as the review.'.
% Rulessupplementary_exam_not_given(X) :-    physically_challenged(X),    subject_feels_sorry(subject).
% Rulessupports_conversion_to_speech(Subject) :-    endorses_conversion_to_speech(Subject),    \\+ misrepresented_idea(Subject, _).
% Rulesunderstanding_limit(speech, text) :-     collected(comment).
% Rulesvalid_exam_writing(Person, Subject) :-     wrote_exam(Person, Subject),    lips_together_exists(Subject).
% Ruleswalked_to_work_on_time(lecturer) :- reason(walking_on_time).
% Ruleswrites_essay(X) :- pedagogy_written(X).
% Ruleswrote_first_idea(john) :- prepared_to_think(first_idea).
% Rules prepared_to_do_job(Person) :-     wrote(ways_thinking, third),    placed(snake, tongue, first),    protected(duckling, Person).same_grade(X, Y) :-    awarded(X, Y, same_grade).
% Rules (derived from the narrative)causal_relationship(AS, Reason) :-    wrote_about(AS),    did(eat(maringue), use(cubeended_spoon)),    Reason = 'Eating meringue with a cube-ended spoon relates to writing about AS'.
% Rules based on inferential sentencesreason(robot, made_itself_from_breasonings) :-    robot(made_out_of_breasonings).
% Rules based on the dependencies statedreason_for_preparation :-     prepared_icing(cake_maker),    wrote_press_release(person('you'), 'Michel Onfray').
% Rules based on the provided narrativewriting_synthesis(subject) :-    agrees(subject, criticality),    knows_skills(subject, writing).
% Rules based on the relationshipsgood_breathing :- breathe_deeply(me), checked(good).
% Rules can define relationships or combined actionsshould_indulge(Subject) :-    indulge_in(Subject, sex),    indulge_in(Subject, food).
% Rules defining actions based on relationshipsaction_for_love(X) :- loved(X), reason_for_love(X, Reason).
% Rules defining relationshipsreasoning_flow :-    meditation_written(god, leader),    lollipop_in_mouth,    decoded(Jam, Direction),    (Jam = strawberry_jam -> Direction = left_path;     Jam = raspberry_jam -> Direction = right_path;     Jam = blueberry_jam -> Direction = both_paths),    intoxicated_myself,    thoughts_of_ideas,    prepared_to_be_head_of_state,    not_verify_content(blog, bibliography),    connecting_length_sequences,    found_language,    controlled_reasoning_vectors.% Query to check if the reasoning flow is validvalid_reasons :-    reasoning_flow,    write('All reasons aligned successfully.').
% Rules defining the relationshipspresentation_ready(Presentation) :-    prepared(Presentation, heidegger_laozi),    wrote_abstract(Presentation),    inserted_code(database, fewer_commands).
% Rules for connections between observations and actionsreasons(X, Y) :-     ( X = observed(sea_slug), Y = placed(toe, heel) );    ( X = placed(toe, heel), Y = prepared(realise_true_fame) );    ( X = prepared(realise_true_fame), Y = catered(lift_trays_of_food) );    ( X = catered(lift_trays_of_food), Y = tasted(meal) );    ( X = tasted(meal), Y = found(evidence) );    ( X = found(evidence), Y = prepared_to_identify_times(alexis) );    ( X = prepared_to_identify_times(alexis), Y = agreed(creation_correct_and_good) );    ( X = agreed(creation_correct_and_good), Y = story_about(five_objects, setting) );    ( X = story_about(five_objects, setting), Y = subject(uses_modern_pedagogy) );    ( X = subject(uses_modern_pedagogy), Y = awards(agreement_disagreement, same_grade) ).
% Rules for decision makingshould_select_student(A) :-    student(A),    observes(A, teaching),    (judgment_theory(A, human_judgment_objects); character_perception_issue(A, text_inconsistency)).
% Rules for gradingmax_grade(essay, b) :- disagreement(essay).
% Rules for handling argumentsargument(X) :- breasoning(student, X).
% Rules for identifying stable stacks on an objectstable_stack(Object) :- object(Object), object(Object1), object(Object2).
% Rules for meditation and educationmeditate(Child) :-     teaches_self(meditation_techniques),    child_developed(Child).
% Rules for preparing and performing actionsprepare(S) :- subject(S), action(A), reasoning(A, B), perform(B).
% Rules for reasoningcan_conclude(Conclusion) :-    argument(Premises, Conclusion),    check_premises(Premises).
% Rules for relationshipspreparation_for_police_officer :-    police_officer_preparation(press_release),    comment_on_meditation_indicators(richard_dawkins).
% Rules for what can be donedo_action(Action) :-    action(Action, _).
% Rules representing causal relationshipswas_computer_science :- event(computer_science).
% Rules representing the reasons or conditions leading to these actionsreason(essayists_written, press_release_written).
% Rules representing the relationships between actionsresult(X) :- action(X).% A rule that might represent counting or processing the actionscount_actions(Count) :-    findall(X, action(X), Actions),    length(Actions, Count).
% Rules that can be queriedhas_two_hs(Line) :-    string_chars(Line, Chars),    count_occurrences(Chars, 'h', Count),    Count =:= 2.
% Rules that can express relationships or sequencesprocess_order :-    finished_writing(Class),    covered_time_points(Quickly),    thought_of(HeartTart),    produced(IndianCuisine),    placed(Apple, Bowl),    reasoned_out(Computer, Reasoning),    advances_to_first_instance(Item, Line),    answered_with(Writer, Algorithm),    needed(I),    prepared_to_push(Strawberries, Mouth).
% Rules that check if an object is usable in a certain contextusable(Object) :-    can_stand(Object),    can_be_carried(Object).
% Rules that could be derived from the factstask_timer(Timer) :- set_timer(Timer), !.
% Rules that define how each step leads to anotherparticipate_in_community_recreation :-    prepared_to_participate(community_recreation),    scheduled_run.
% Rules that define some relationships between actionsand(action1, action2) :- action1, action2.
% Rules that describe logical relationsreason_for_action(Action, Reason) :-    asked(Action, _),    listened(Action, _),    found_working_method(Action),    included_sections(Action, _, _, _),    reversed_connections(Action),    best_known_repository(_),    examined_electronics(Action, _, _),    saw_other(_),    prepared_collect_comments(_),    meditated_for_health(Action),    wrote_reason(Action).
% Rules that describe relationships or inferenceshas_application(Application) :- application(Application).
% Rules that explain the reasoningreasoning(nice_person(X)) :- nice_person(X), write(X), write(' is a nice person because...'), nl.
% Rules to access the informationperform_job :-     did_job_itself(society),     found_outputs(type_finder).
% Rules to check if certain conditions lead to other conclusionssuccess_in_event(HeadOfState, Event) :-    prepared_to_meet_head_of_state,    prepared_to_do_corrected_act_on_stage,    prepared_to_design_comments.
% Rules to check relationshipsis_member(Object, Set) :-    member(Object, Set).
% Rules to define a sequence of actionssequence_of_actions :-     prepared(journal_article),    opened(sunglasses, left_arm),    prepared(masters, breason_out),    connected(work, pedagogy_helpers),    lick(it),    prepared(eat(caviar, durum_wheat_semolina)),    self_assisted(them),    self_above(it, those_times),    clippered(left_side, beard),    wrote(notes).
% Rules to define complex relationshipsaffected_by(X) :- reason(X, preparation_agreement).
% Rules to define processesjourney(Subject) :-    step(Step, Action),    format('~w: ~w~n', [Step, Action]),    (         Step = 1 -> studied_shape(Subject);        Step = 2 -> wrote_work(Subject);        Step = 3 -> thought_agree(Subject);        Step = 4 -> verify_experience(Subject);        Step = 5 -> campaign(Subject);        Step = 6 -> repeat_until_sunset(Subject)    ).
% Rules to define relationshipsdo_action(Subject, Action, Reason) :-     action(Action, Subject, Reason).
% Rules to define relationships and actionssubstituted(Item1, Item2) :-     item(Item1),     item(Item2),     Item1 \\= Item2.
% Rules to define relationships or implications between actionsrelated(X, Y) :- action(X, _), action(Y, _).
% Rules to define the logic of your reasoning process:reason_for(Second, write_answer) :- reasoned_out(breasonings), Second = 2.
% Rules to define when an action can be performedcan_perform(Action) :-    preparation(Action, Preparation),    can_perform(Preparation).
% Rules to demonstrate outcomes or conclusions based on actionsprepared_to_make_million :-    action(preparations, million_dollars),    action(buying_laptop, student),    action(focusing_on_business, student).
% Rules to demonstrate some relationshipsgrape_vine_at_posts :- designed(hermaphroditic_grape_vine, posts).
% Rules to derive actions based on judgmentsderive_action(Judgment, Action) :-     judgment(alexis, Judgment),     action(Action).
% Rules to derive knowledge and actionsprepare_to_construct_robot(Height) :-    action(prepared_to_use_knowledge),    action(constructed_robot(Height)),    action(weighed_solid(solid_object)).
% Rules to derive relationships between subjects and actionsshould_be_founder(Subject) :-     founder_justification(Subject, reason).
% Rules to describe the relationships% This denotes that an action is due to another actionaction_due_to(Action1, Action2) :-     did_it(because),     Action1,     Action2.
% Rules to determine if an action can proceedcan_proceed(Action) :-    prepared_to_make_sure(Condition),    satisfies_condition(Action, Condition).
% Rules to determine if the essay meets quality standardsessay_quality(A_grade) :-    observed(disagreeing_exposition),    not(allowed_to_fail).
% Rules to determine the sequence of actions based on the \"because\" logicthus(X) :- call(X).
% Rules to evaluate critiques based on student responseevaluate_critique(Student, Critique, Result) :-    ( agreement(Student, Critique) ->        Result = 'Agreement'    ; disagreement(Student, Critique) ->        Result = 'Disagreement'    ; Result = 'No response' ).
% Rules to explain actions based on their reasonsperform_action(Action) :-     action(Action),    reason(Action, Reason),    format('Performing ~w because ~w.', [Action, Reason]).
% Rules to explain the actionsskiing_justification(Customer) :-    happy(Customer),    write(Customer), write(' could go skiing because she/he required to be happy.').
% Rules to express reasoning or sequencesreasoning_sequence([remove_carrageenan(ice_cream), save_apple_seed(apple),                     write_new_logic, write_tides_came_in,                     write_about(phallus_rod), follow_predicates(order)]).
% Rules to express relationshipsreason_human_benefit(X) :- human_benefit(X).
% Rules to express relationships and implicationsconnected(X, Y) :- action(X), action(Y).
% Rules to express relationships and reasoninghelps(X, Y) :- influence(X, Y).
% Rules to express relationships:better_checked(writing, speech).reason_for(preferred_writing_to_speech, better_checked(writing, speech)).
% Rules to extract actions based on themesextract_actions(Theme, Actions) :-    theme(Theme, ActionList),    findall(Action, (member(ActionId, ActionList), action(ActionId, Action)), Actions).
% Rules to find a path through the ideasnatural_progression(X, Y) :-    connect(X, Y).% Find all connections from a starting pointfind_connections(Start) :-    natural_progression(Start, Next),    write(Next), nl,    find_connections(Next).
% Rules to find out events associated with a personevents(Person, Event) :- person(Person), event(Event).
% Rules to find synonymsfind_synonym(X, Y) :- synonym(X, Y).
% Rules to find the reason for a specific actionfind_reason(Action) :- action(Action, Description), reason(Action, Reason),                       format('~w ~n Reason: ~w~n', [Description, Reason]).
% Rules to infer conclusionsfree_education :- education(free).
% Rules to infer consequencesaction_informs_subject(Action) :- because(Action).
% Rules to infer new relationshipscontacted_god(Endorsed) :-     prepared_to_go_to_heaven('I', 'store', 'endorse', 'God_master'),    Endorsed = true.
% Rules to infer reasonsreason(Action, Reason) :-    action(Action, _, Reason).
% Rules to infer some connectionsreason_for_event(E, Reason) :-    event(E, Person),    reason(Person, Reason).
% Rules to infer something based on factssame_as(X, Y) :- relationship(X, sameness), relationship(Y, sameness).
% Rules to infer the sequence of actionssequence(Action) :-    causes(Action, NextAction),    format('~w leads to ~w~n', [Action, NextAction]),    sequence(NextAction).
% Rules to process actionsperform_action(Person, Action) :-    did(Person, Action).
% Rules to query the rationale behind actionsexplain(Action) :-    action(Action, Detail, Reason),    rationale(Detail, why, Explanation),    format('~w was done ~w: ~w~n', [Action, Detail, Explanation]).
% Rules to reflect the relationships and conclusions based on the factsfreedom_and_creativity :-    topic(freedom_creativity),    write('The subject is about freedom and creativity.'), nl.
% Rules to represent the relationships or outcomesstudents_involved(StudentsCount) :-    includes(students, StudentsCount),    StudentsCount = 5.
% Rules to summarize actionssummary(Action, Reason) :-     he_cut_out(Action, Reason).
% Rules: How actions are connected logicallyconnected(Action1, Action2) :-    action(alexis, Action1, Reason1),    action(alexis, Action2, Reason2),    Reason1 \\= Reason2.
% Run queriesrun :-    explain(1, X),    write('Explaining subject 1: '), write(X), nl,    explain(2, Y),    write('Explaining subject 2: '), write(Y), nl,    non_sexual_arguments(1),    nl,    non_sexual_arguments(2).```### How Does It Work?1. **Predicates**: We define subjects and reasonings as facts.
% Run the algorithm with test datarun_algorithm :-    TestData = ['h', 'handle', 'theatre', 'brain', 'h'],    process_elements(TestData).
% Running the reasoningrun :-     reasoning(pour_soup, review).```### Explanation:- **Initial State**: Defines the initial components (kitchen, soup pot, bowl) in our environment.
% Sample Queries% 1. Did Dion write an exam on the subject?% ?- wrote_exam(dion, Subject).
% Sample Queries% ?- contains_line_with_items(line1, 3).
% Sample Queries% ?- desired_space(alexis).
% Sample Queries% ?- helps_world(DION).
% Sample Queries% Check if existence was examined with light?- existence_explored(light).
% Sample Queriesquery :-     free_education,    should_be_founder(alexis),    successfully_breasoned(some_reason).
% Sample goal to run in Prolog% ?- find_useful_meanings(A, M, U).```### Explanation:- **Actions**: Each `action/1` fact represents one of the statements or actions you mentioned.
% Sample predicates representing the environmenthave(practicum).
% Sample queries% ?- help_student_learn(john, literature, spiritual_help).
% Sample queries% ?- what_actions(dion, Actions).
% Sample queries% To see if a user enjoyed the attendees% ?- enjoy(me, attendees).
% Sample queries?- prepares_to_go_to_heaven(john).
% Sample queries could be made to infer conclusions:% ?- action_finished(licking).
% Sample queries that you could perform based on the relationships defined% Example Query: loves(alexis, everyone).
% Sample queries to trigger the justifications:- skiing_justification(john).
% Sample queries to utilize this program% ?- agreed('John', Action).
% Sample queries you could make% ?- service_activated_when_profitable(course_xyz).
% Sample queries you might run:% ?- recorded_width_of_ruler(ruler_1, Width).
% Sample query% ?- process_writing_arguments(Student).
% Sample query% To query the actions and reasons for a given action, you could use:% ?- action(A, X, Y), reason(A, Z).
% Sample query% To use the above code, you would perform a query like:% ?- analyze(Alexis).
% Sample query entry pointrun :-    write('Decision based on jam choice:'), nl,    decision_path(strawberry), nl,    decision_path(raspberry), nl,    decision_path(blueberry), nl,    nl, write('Student effects:'), nl,    query_effects.
% Sample query examples% ?- assessed(marks_as).
% Sample query for creating a pedagogue?- pedagogue_for('DION').
% Sample query for evaluation% ?- execute_analysis(john, critique1, ['agreement', 'unique', 'experiences'], Result).
% Sample query of who can address which objects% Usage: ?- text_to_speech('ALEXIS', Object).
% Sample query to check actionsrun :-    prepare(thank(religious_leader)),    prepare(state(like(religious_leader))),    prepare(thinking_of_future),    prepare(preparations(scientist, lick(part(small)))),    prepare(preparations(scientist, lick(part(large)))),    prepare(draw(diagram(apparatus))),    prepare(write(argument(a_b, training(medicine)))),    prepare(eat(passenger, sandwich)),    prepare(open(business, peace)),    prepare(swallow(manager, lozenge, particular_way)),    prepare(descend(stairs, manager)),    subject_check(alexis, some_object), % Replace 'some_object' with objects to check    write('Prepared actions completed.').
% Sample query to check actions with reasons?- perform_action(Cook).
% Sample query to find necessary actionsfind_necessary_actions :-    Action,    is_necessary(Action),    format('Action ~w is necessary.~n', [Action]).
% Sample query: % ?- query_reasons(licked_mango_ice_cream).
% Sample questions based on the sequencesfind_action(Number, Action) :-    sequence(Number, Action).
% Sample runrun :-    Sentences = [        'I like you because ALEXIS',        'I prepared to swap roles with the computer',        'I prepared to serve the roasted rhubarb with tofu ice cream',        'This line is particularly long with so much detail and information.',        'God was dead alive knew a reasoning helper.'    ],    evaluate_sentences(Sentences).
% Sample usageexample :-    verify_and_argue('Alex', 'written law', 'breathing exercises'),    emphasize_utility('text'),    handle_umbrella('He', 'crook handle'),    observe_tree('vandalised healthy').
% Sample usagemain :-    FirstLine = \"First I decided to love because\",    ( analyze_first_line(FirstLine) ->        write('The first line has two or more h’s and starts with First.')    ;        write('The first line does NOT have two or more h’s or does not start with First.')    ).
% Scenes representationscene(waiting, 'Characters are waiting for the starting time', reason('Reflect on previous arguments and breasonings.')).
% Self-assessmentself_assessment(Understanding) :-    (Understanding == true ->         assert(self_knowledge(understood)) ;         assert(self_knowledge(not_understood))).
% Sentience is related to having ideassentient(Person) :- idea(_), helps(Person, _).
% Sequence of actions for preparing the essaysequence_preparation :-    prepares(dependent, preparation_for_essay),    writes(dependent, writing_press_release),    assigns_hypothesis(university_professor, essays),    declare_meritocracy,    finds_sales(vatican),    takes_exam,    prepares_for_comments(martha_nussbaum),    instructs(dependent, instructing_algorithm),    breason_out(dependent, next_A),    stop(dependent).
% Setting for the argumentsetting_time(afternoon).
% Seventh sentenceprepare_to_love(Lady) :-     write('Prepared to love the lady from the Masters ceremony.').
% Signal and actionssignal(green, go).follows_robot(lucian_green) :- signal(green, go).
% Sixth sentenceorganize_essay_arguments :-    write('Organized to have essay arguments written for chapters.').
% Snow White's actionprepared_to_eat(apple, snow_white) :-    swimming_between(lily_pads).
% Socioeconomic Statusstudent(socioeconomic_background(poor)).
% Some philosophical observationsphilosophy(observed).
% Some queries we can define based on the established relationships% Example query: What did Second do?% ?- walked_past(Second, Her), prepared_to_help(Second).
% Some relationsexperience(Subject, PositiveExperience) :-     event(delightful_experience(PositiveExperience)),    event(arrive_on_time(OverallExperience)),    OverallExperience = pleasant.
% Specific actions and implicationsbecause(subject, action) :- recognizes(enteric_nervous_system).because(attends(lecturer, next_student)).
% Specific actions with conditionschew_more_carefully(Second).
% Specification of tops and bottoms of algorithmsspecified_algorithm_details(tops_and_bottoms).
% Specify a situation with a medicine studenttest_web_app :-    medicine_student(Command),    Command = 'test',    action(return(DION_Line, LastLine)),    DION_Line = 'SSI',    LastLine = 'last_item'. % Run the simulation of agreement supportsimulate_agreement :-    relation(supported_agreement),    improve_meditation(increase),    perform_analysis(lstm),    test_web_app.
% Spelling and character restrictionsspells_correctly(subject).
% Spiritual Preparationprepare_for_next_life :-    has_usage(spiritual_preparation, next_part_of_life),    write('Making spiritual preparations for the next part of life.').
% Spiritual Preparationspiritual_preparation(subject).
% Squeezing water onto the window squaressqueezed_water(First) :-     first_action(squeezed_water),    reason(squeezed_a_drop_of_water).
% Start point for querying the narrativestart :-    narrative,    write('The narrative flow is established successfully.').
% Start the program:- initialization(run).
% Starting point for explanationstart :-    explain(philosopher).
% Starting point for the reasoning processstart_reasoning :-    % Here the number represents the complexity level or depth of reasoning    max_depth(MaxDepth),    reason(MaxDepth).
% Starting point of the processstart_process(Writer) :-     write(Writer), write(' starts their writing process.'),    writes_essay(Writer),    endorses_philosophy(Writer),    prepares_examination(Writer).
% Statements about the subjectsubject(dion).
% Statements connecting actions and reasonsprepared(love_the_snake).
% Steps in the philosophical journeystep(1, studied_shape).
% Steps in the processstep(1, unfold_item) :-     action(unfolded, character(richard_rorty)),    write('Richard Rorty unfolded the item.').
% Steps of reasoningstep1(find_person, person).step2(help_krishna, create_current_reasoning).
% Stopping conditionstop(Entity) :- Entity = dependent, write('Stopped when he reached halfway.').
% Students and their actionsstudent_completed_essays(student1).
% Students and their attributesstudent(john, curious).
% Study focusstudied(discipline(medicine), specialization(pedagogy)).
% Subject actionssubject(alexis).
% Subject actions and responsibilitiesresearch_correct_doses(vitamins).
% Subject desiresdesires(alexis, warm_space).
% Subject response importanceresponse_importantly(subject, topic).
% Subject-specific knowledgesubject(alexis, positive_object_endorsement).
% Subjectssubject(dion).
% Subjects that should include in the context of the narrativesubject_should_include(as_in_each_book).
% Summarizes an algorithm into three stepssummarize_algorithm(Summary) :-    Summary = 'Step 1: Observe the student and capture arguments. Step 2: Process items and check conditions. Step 3: Maintain records and count occurrences.'.
% Summarizing the ontologysummary :-    findall(Action, action(Action), Actions),    write('Actions/Relations identified:'), nl,    write(Actions), nl,    findall(Entity, entity(Entity), Entities),    write('Entities identified:'), nl,    write(Entities), nl,    findall(Relation, relationship(_, Relation, _), Relations),    write('Relationships identified:'), nl,    write(Relations), nl.% To call the summary, you can run: ?- summary.
% Summary of actionssummary(Action) :-    action(Action, _).
% Summary speech creation predicatesummarize_essay(EssayTitle, Summary) :-     EssayTitle = 'Vitamins, Spiritual Help, and Time Travel',    Summary = 'This essay discusses the importance of correct dosages of vitamins and minerals, emphasizes the significance of spelling for effective communication, and explores the role of spiritual mentorship in education. Additionally, it illustrates a whimsical aspect of time travel in the educational journey of a student. The author reflects on various actions, from observational inquiries to helpful interactions, culminating in a commitment to aiding learners.'% To invoke the summary, one might write:% ?- summarize_essay('Vitamins, Spiritual Help, and Time Travel', Summary).```### Explanation of the Prolog Code:1. **Predicates**: We create predicates to represent the details of the reasoning process, the actions taken, the definition of the pedagogical helper, and the contributions to knowledge. 2. **Actions**: Each action mentioned in your text is represented as a predicate, which can be invoked if needed.
% Suppose these predicates to define Student and Teacherteacher(jane).
% Swapping calculationsswap_calculation_display :-     swapped_display_calculation(true).% Queries to retrieve information?- high_distinction_argument(When).
% Takes the first item from a line, leaving the line minus that itemtake_first_item(Line, Item, Remaining) :-    split_string(Line, \" \", \" \", Words),    Words = [Item | RemainingWords],    string_concat(\" \", Remaining, RemainingWords).
% Taking exam logictakes_exam :- write('Taking the exam.').
% Teach Budgerigarprepare_to_teach_budgerigar_to_talk(Budgerigar) :-    like_budgerigar(Budgerigar).
% Test cases% ?- delete_first_item([1, 2, 3], Result).
% Test clauses?- example_query(Result).
% The eighth event (two parallel actions)because(dancer_prepared_for_ball) :-     because(unfolded_sunshade);    because(cut_olive_into_squares).
% The fifth eventbecause(ate_minestrone) :-    because(discovered_seasonings_worked).
% The final eventsbecause(unfolded_sunshade).
% The fourth eventbecause(played_with_cricket) :-    because(ate_minestrone).
% The lecturer's evaluation mechanismevaluation(true_or_false_case).
% The main entry point to evaluate logicmain :-    query,    write('Education should be free, Alexis should become a founder, and reasoning was successfully applied.').
% The recursive function that handles reasoning and integrationreason(N) :-    N > 0,    N1 is N - 1,    reason(N1),    argument(N1),    writeln('Processed reasoning step: '),    writeln(N1),    nl.
% The relationshipsprotection_natural_law(\"I found protection in natural law\").
% The representation of cutenesscute(puffin_duck).
% The second eventbecause(gave_children_academic_As) :-    because(resided_in_palace).
% The seventh eventbecause(asperger_patient_demonstrated_knowledge) :-    because(dancer_prepared_for_ball).
% The sixth eventbecause(discovered_seasonings_worked) :-    because(asperger_patient_demonstrated_knowledge).
% The skill of writing a synthesis allows achieving accreditation standardsachieves_accreditation_standards(Skill) :- skill(writing_synthesis, Skill).
% The third eventbecause(resided_in_palace) :-    because(played_with_cricket).
% The topic of the book could be based on subjects like arts or sciencetopic_of_book(Topic) :- subject(arts); subject(science).
% Time-related observationsself(above_it, past_times).
% Timer settingset_timer(sand_timer, Time) :- Time > 0.
% To calculate the total number of actions that meet the criteria?- reasoning_needed(X).
% To calculate time difference:% ?- calculate_time_difference(solid_example, liquid_example, TimeDifference).
% To check all pairs of students for plagiarismcheck_plagiarism :-    findall(Student, answer(Student, _, _), Students),    sort(Students, UniqueStudents),    check_pairs(UniqueStudents).
% To check file property?- file_property(length, example_file).
% To check for homophones?- homophone(word1, word2).
% To check how likely it is to comply with 'As'% ?- likely_to_comply(as, Likelihood).
% To check if John knows nomenclature?- has_knowledge(nomenclature, john).
% To check if a person achieves a successful outcomeachieves_success(Person) :- successful_outcome(Person).
% To check if a specific action follows anotherfollows(Action1, Action2) :- causes(Action1, Action2).
% To check if a strategy to maintain health is followed:% ?- maintain_health(dry_nose).
% To check if a student is dressed according to the dress codeis_dressed_correctly(Student) :- ensured_dress_code(Student, tucked_in).
% To check if certain characters are allowed in the text:% ?- allowed_in_text(character, text).
% To check if quality of life approval is grantedcheck_quality_of_life_approval :-    approve_quality_of_life(daughter),    write('Quality of life for my daughter is approved.'), nl.
% To check if someone prepared to disseminate?- prepared_to_disseminate(Person, electron).
% To check if the neuroscientist measured the students' achievement level?- perform_action(neuroscientist, measure_achievement).
% To check if the program is functional?- functional_program(because(what)). % Replace \"what\" with specific reason checks.
% To check if the subject correctly checks for object existence:?- should_check(object1).
% To check if translation conserves meaning?- translation_conserves_meaning(original_text, translated_text).
% To check if we should intercept student1:?- should_intercept(student1).
% To check the image of vocal folds interestingnesscheck_image_interest :-    image_interest(professor, vocal_folds, weird),    \\+ image_realistic(professor, vocal_folds, true),    write('The professor\\'s image of the vocal folds is interesting.'), nl.
% To check the progress of a child:% ?- check_progress(doctor, child).
% To check the safety of the box opened by D:% ?- safety_of_box(D, real).```### Explanation:1. **Facts**:    - We declare actions, individuals, and relationships as facts within our Prolog knowledge base.
% To check what Alexis prepared for depression?- did(alexis, prepared_to_prevent_depression).
% To check what was observed% ?- observed(robot, X).
% To confirm a reasoning for a person's approval:?- reason_for_approval(person, place).
% To demonstrate in a query% ?- find_connections(tinsel_attached).
% To determine what action was taken by a subject for a particular reasonperformed_action(Subject, Action, Reason) :-    action(Action, Subject, reason(Reason)).
% To encapsulate the entire processprocess :-    display_arguments,    corresponds(student, StudentSpeech),    write('Student Speech: '), write(StudentSpeech), nl,    corresponds(lecturer, LecturerSpeech),    write('Lecturer Speech: '), write(LecturerSpeech), nl.
% To exhibit the checkmate reasoningcheckmate_status(Player, Status) :-    checked_checkmate(Player) -> Status = 'Checkmate confirmed';    Status = 'Not checkmate'.
% To find Degree algorithms that found ad pairs% ?- degree_algorithm_found(X).
% To find a cause-effect chain based on a starting clausefind_chain(Clause) :-     clause(Clause, because(Effect)),    write(Clause), write(' because '), write(Effect), nl,    find_chain(Effect).  % Recursively find the next effect% The predicate to initiate finding the chainstart_chain(Clause) :-     find_chain(Clause).
% To find a sequence of actions based on the observed structurefind_sequence(Start, End, Sequence) :-    travel(Start, End, [Start], Sequence).
% To find a sequence starting from a specific actionfind_sequence(StartAction, Sequence) :-    findall(NextAction, sequence_of_actions(StartAction, NextAction), Sequence).
% To find a specific action by a rolefind_action(Role, Action) :-    action(Role, Action).
% To find actions leading up to a specified actionfind_actions_to(Goal, Path) :-    findall(X, related_to(X, Goal), Actions),    unique_path(Actions, Path).
% To find actions related to thirst quenchingaction_for_thirst(quench_thirst) :- drain_water.
% To find all consequences of an event recursivelyfind_causes(Event, Result) :-     findall(NextEvent, causes(Event, NextEvent), NextEvents),    list_to_set(NextEvents, UniqueNextEvents), % removes duplicates    findall(NextCause, (member(NextEvent, UniqueNextEvents), find_causes(NextEvent, NextCause)), NextCauses),    append(UniqueNextEvents, NextCauses, Result).
% To find all topics connected to pedagogy:% ?- connected(pedagogy, Topic).
% To find if someone is expected to appearexpected_to_appear(Student) :- did(Student, teaches_meditation).
% To find out how the text and speech interrelate?- interrelate(text, speech).
% To find out if the pedagogue committed the file:% ?- helped(pedagogue).
% To find out the meaning of a line itemget_meaning(Term, Meaning) :- meaning(Term, Meaning).
% To find out what spaces Alexis desiresdesired_space(Who, Space) :- desires_space(Who, Space).
% To find the reasoning behind organizing a feast:% ?- reason_for_event(organize_feast, Reason).
% To generate a report based on the sequence of actionsreport :-    write('Report of Actions: '), nl,    findall(Action, process(Action), Actions),    print_actions(Actions).
% To generate educational skills:% ?- generate_education_skills(Details).```### Explanation of the Prolog Code:1. **Predicates**: Each key concept from the provided sentences has been translated into predicates (e.g., `teaching_activity`, `breasoning`, `calculate_time_difference`).
% To get reasoning for a specific factget_reasoning(Fact) :- reasoning(Fact).
% To get the purposes of an actionget_purpose(Action, Purpose) :-    action(Action, Purpose).
% To get the summaryget_summary(Summary) :-    summary(Summary).
% To get the summary, you would query:% ?- summary(S). ```### Explanation:1. **Facts**: We define the actions as facts that relate subjects to the actions they do and the reasons behind those actions. Subjects such as 'ALEXIS', 'student', etc., are included.
% To prepare to like someone involves offering a gestureprepare_to_like(Offer, Person) :-     prepare_like_you(Offer, Person).
% To print the full reasoningprint_full_reasoning :-    full_reasoning(FullReasoning),    print_reasons(FullReasoning).
% To produce the complete reasoning output in a listfull_reasoning(FullReasoning) :-    elaborate_reasoning(10, FullReasoning).
% To provide a way to invoke the checkscheck_subject_experience(Subject) :-    (overall_experience(Subject) ->         write(Subject), write(' had a delightful and positive experience, and is not late.');         write(Subject), write(' was late or did not have a positive experience.')).
% To query the chain of reasoning:query_reasons(First) :-    reason(First, _),    find_reason(First).
% To query the entire chain of statementsall_statements :- statement(9).
% To query the relationships% Example Queries:% ?- is_action_reason(prepare_for_tv, X).
% To query the sequence of actionsquery_sequence :-    sequence,    write('The sequence of actions has been established.').
% To query:% ?- prepare_for_writing(essay).
% To reason about the influence of AIGs on pedagogyreason:-    helps(aigs, pedagogy),    write_essay(breathsonings, theory_of_judgment).
% To represent a specific outcome of this reasoningoutcome(Success) :-    action(prepare_acceleration(particle, sensitive_arm, deck_chair)),    action(place(lavender)),    action(fold_paper(cut_in_hole)),    action(pour_and_mix(jelly_crystals, water)),    capability(do_text_to_reasonings(computer)),    argument(lucian_mantra, sun_safety),    Success = 'Achieved health and understanding'.
% To retrieve the actions taken% ?- action(X).
% To run and get the count for a specific keyword (you can change 'breasonings' as needed):% ?- count_breasonings('he', Count).
% To run queries, you could ask Prolog:% ?- query_relations(a).
% To run the observationsmake_observation :-     observation(Obs),    write(Obs), nl.
% To run the reasoning processrun :-    observed_flight_of_concords,    write('I observed the flight of the Concords because I wrote the philosophy.'),    nl.
% To run the test:% ?- test(\"This is a high handle example\", 'A', 'B', ['Alice', 'Bob']).
% To see if ALEXIS typed the idea neatly:% ?- type_idea_neatly(alexis).
% To see if a disjunction is resolvedis_disjunction_resolved(X, Y) :- resolved_disjunction(X, Y, snapfreeze_lemon_chocolate).
% To see if a line contains at least one item:% ?- line_contains(line_example, [key_term, assignment]).
% To see if specific actions have been taken?- action(continue_on).
% To see if the speech has a character?- has_character(speech).
% To see if translation conserves meaning?- translation_conserves_meaning(translation1).
% To see if we show love:% ?- show_affection(Action).
% To see the implicationscheck_implications(X) :-     chain_of_implications(X),    write(X), nl,    fail. % Forces backtracking to find all solutionscheck_implications(_).```### Explanation:1. **Implicative Structure**: The `implies/2` predicate defines how one statement leads to another.
% To see what was noticed:?- noticed(geelong_skyscraper).
% To simulate a run of the DFArun_dfa(CurrentState, [Action|Actions]) :-    process(CurrentState, Action, NextState),    write('Current State: '), write(CurrentState), nl,    write('Action: '), write(Action), nl,    write('Next State: '), write(NextState), nl,     run_dfa(NextState, Actions).
% To summarize the article and check the reasoningcheck_reasons(Article) :-    summary_ontology(Article, Summary),    is_valid,    write(Summary).
% To understand the linkage of a student into the subject:link_student_to_subject(Speaker, Student, Subject) :- linked_student_to_subject(Speaker, Student, Subject).
% To use the algorithm, you can query like this:% ?- has_at_least_keywords(3, 3).  % Check if line 3 has at least 3 keywords% ?- has_at_least_keywords(X, 2).  % Find all lines with at least 2 keywords```### Explanation of the Program:- **Data Representation**: Each line is defined as a fact with a unique identifier.
% To use the program, one would query:% ?- generate_summary(Summary), ensure_key_sentences(Summary).
% To verify if the teacher prepared the conclusion properlyverify_teacher_preparation(Teacher) :- prepare_conclusion(Teacher).
% To verify the effects of agreement:% ?- effects_of_agreement(Agreement).
% To verify the mind reading technique:% ?- found_technique(mind_reading, writing).
% Transitive reasoning from one action to anotherreason(FirstAction, SecondAction) :-    call(FirstAction),    call(SecondAction).
% Universe perceptionsame_as_home_universe(home_universe, observed_universe).
% Usage example in Prolog interpreter:% ?- query_causation(verify_enough_new_breasonings, heavier_objects_than_last_time).
% Usage example:% To query the actions defined, you can execute:% ?- what_action(Action).
% Usage predicatesuse(Medicine) :-    (Medicine = lucianic_medicine; Medicine = quantum_box_prayer),    write('Used '), write(Medicine), nl.
% Use of pedagogical knowledgeused_pedagogical_knowledge(teachers, academic_success).
% Use the rules to check if the essay earns an A gradecheck_essay(Grade) :-    (essay_quality(A_grade) ->        Grade = 'A';        Grade = 'failed').
% Useful Objectsuseful_object(qtz).
% Verification of orange juice smellverified_smell(orange_juice).
% Verify content of a blogverify_content(Blog) :-    write('Verifying content of the blog: '), write(Blog), nl.
% Verifying ontology membershipverify_ontology(Subject, Object) :-     member(Object, OntologySet),    new_name_exists_in_ontology(Subject).
% Visitor datavisitor('John').
% Visualisation Methodvisualise(Object, Reason) :-    reasoning(ways_of_thinking, Object),    dimensions(Object, x, y, z),    mention(God, Reason).
% Waiting until the bus had stoppedwait_for_bus_stop(Status) :-     Status = 'Bus has stopped'.
% What did I eat first?what_i_ate_first(Food) :- ate(Food, first).
% What happens if the subject substitutes a cold space with a lollipop?% ?- substituted(cold_space, lollipop).
% What is the meaning of line item?meaning_of_line_item(Meaning) :- asked_meaning(line_item), Meaning = 'Querying the definition of line item'.
% What is the reason for 'wrote_medicine_h'??- reasons_for_action(wrote_medicine_h, Reason).% Check what actions resulted from the lack of interest in sexual ideas?- actions_related_to_reason(lack_of_interest, Action).
% Wrapping carrotwrapped_in_cellophane(carrot).
% Writing about new words in anarchywrote_on_new_words(anarchy).
% Writing and dress codeensured_dress_code(student1, tucked_in).
% Writing breasonings for songswrite_breasonings(SongType) :-     format('Writing breasonings for each ~w', [SongType]).
% Writing in philosophical argument formwrite_argument(Argument) :-    format('Writing argument: ~w', [Argument]).
% Writing subjectwrote_on(pedagogy).
% You can also create a way to understand the overall narrative:narrative(He, Action, Reason) :-    performed_action(He, Action, Reason).```### Explanation:1. **Facts and Actions**: We've defined facts using `action/3` predicate, which captures the action, the subject performing the action, and the reason for the action.
% You can query the system with the following commands:% ?- subject(Who).                   % Finds who the subjects are.
% argument(Premises, Conclusion)argument([1, 2, 3], 'Using a finite argument map aids in clarity and understanding.').
% check property of file lengthfile_property(length, File) :-     file_length(File, Length),    Length > 0.% Actions that relate to Johnshake_hands(john, you).
% predicate to find students in a course, reason about their studiesstudent_in_course(Student, Course) :-    enrolled(Student, Course).
% professional obligationsobligation(professor_smith, professional_requirement).
% reasons: nonreligious or philosophicalreasoning(john, nonreligious_argument).
% relationshipsenrolled(john, theatre_studies).
% short_handle/2 counts the number of short handles (exactly 2 'h's)short_handle(Line, Count) :-    findall(H, (sub_string(Line, Start, _, _, SubStr),                 count_h_sub(SubStr, 2)),                 Handles),    length(Handles, Count).
% the rule to find professors teaching a student's coursefind_professor_of_student(Student, Professor) :-    enrolled(Student, Course),    teaches(Professor, Course).
**Prolog Algorithm**:```prolog% Facts representing the elements involved in the algorithm% Positive entities and their traitspositive_entity(dion).
- **Arbitrary Relationships**: These are derived from the phrases such as `prepared_to_execute(professor, brain_program).` This indicates that the professor is preparing to execute a certain program.
- **Reasons**: The `reason/2` predicate links actions to their reasons, allowing us to understand why each action was taken. For example, `reason(meet_standard, [wash_colander]).` conveys that the action of meeting the standard follows from washing the colander.
- **Rules**: Rules like `allowed_in_text(character, text) :- not(barred_characters(character, dictionary)).` indicate that for a character to be allowed in the text, it must not be barred from the dictionary.
- To find all actions and their actors and reasons:   ```prolog  ?- action(Act, actor(Actor), reason(Reason)).
---Feel free to elaborate further or change any part of this narrative to better suit your vision!","To represent the structure of the text you provided in a Prolog-like context, we can create a simple Prolog program that captures the relationships between the different clauses based on the \"because\" connections. In Prolog, we can define facts that represent these sentences and the connections between them:```prolog% Define the clausesclause(measuring_tape, because(discovered(cow_tape))).
---Feel free to expand on any of these sections or modify them according to your specific ideas and themes!","The text you've provided seems to express a sequence of thoughts with several \"because\" clauses that create a complex relationship between various statements. It does not directly translate to a Prolog algorithm since Prolog is a logic programming language best suited for defining facts and rules rather than processing complex narrative-like text. However, to create a Prolog representation of your narrative, we could define certain predicates that reflect the relationships and actions described in your statements. Below is an example of how you might structure some of these ideas in Prolog:```prolog% Factsdisembarked_from_bus(john).
---Feel free to expand or modify any of these sections to better reflect your thoughts or the message you want to convey!","To translate the lengthy string of logical connections and positions expressed in your statement into Prolog, we can break down the ideas into a series of facts and rules. Prolog operates primarily on a basis of defining relationships and queries, so we'll express your argument or thoughts as a series of interconnected rules and facts. Here is an outline of how you might represent this in Prolog:```prolog% Factsapplied_new_logic(formula).
---If you meant for something different, please provide more context or clarify, and I would be happy to assist!","Creating a Prolog algorithm to represent the reasoning and relationships represented in your statement would involve breaking down the logic and assertions into facts and rules. Here's an example of how the core elements of your reasoning can be coded in Prolog:```prolog% Factssupports(dadirri, meditation_philosophy_graduates).
---If you would like further elaboration on any specific point or clarification, please let me know!","Creating a Prolog algorithm based on your complex scenario involves abstracting the essence of the problem into logical predicates. Below is a simplified version of how you might represent the situation you've described using Prolog:```prolog% Define the objects and their propertiesobject(trolley).
---This combines your phrases into a narrative focused on a thematic exploration while respecting the modern pedagogical approach you mentioned. Let me know if you need anything else!","To create a Prolog algorithm that captures the structure of your described sequence and configurations, we can define a simple representation of your statements. Given that the text seems to convey a series of observations and actions, we can construct a Prolog program that models these observations and their relationships. Here’s a foundational Prolog implementation that reflects the structure you provided:```prolog% Facts representing the observations and actionsobserved(sea_slug).
---This interpretation seeks to unify the concepts you provided, linking them into a narrative that explores themes of observation, culture, creativity, and strategy.","The text you provided appears to be a set of statements or instructions mingled with some puzzle-like phrasing. Prolog, a logic programming language, is well-suited for representing relationships and rules, but it’s not immediately clear how to translate your specific text into a Prolog algorithm due to its abstract nature. However, I can help you construct a simple Prolog representation that could capture some of the elements present in your description. Below is a framework that assumes a kind of puzzle solving or decision-making scenario that may align with the elements of your text:```prolog% Factsauthor_unknown_material(alexis).
---This maintains an essence of your original phrases while providing a more cohesive narrative. Let me know if you would like to clarify or expand on any specific points!","It appears your request consists of a mix of phrases that resemble a story or an abstract thought process rather than a clear question regarding a Prolog algorithm. Based on the context, it looks like there is an underlying theme related to reasoning, creativity, and perhaps some form of narrative framework. However, I can guide you through writing a simple Prolog program that illustrates reasoning or rule-based logic based on a conceptual narrative if you would like. Here is a hypothetical example:```prolog% Factspedagogy_written(rural_area_residents).
---This summary seeks to incorporate your original ideas while presenting them in a structured manner suitable for an audience. If you'd like any changes or additional details, feel free to let me know!","It seems you want to extract meaningful information from a somewhat abstract and philosophical narrative using a Prolog algorithm. This involves using Prolog's declarative nature to define relations and compute certain properties. Below is a simplified Prolog representation that could reflect the essence of the themes you've described:### Prolog Code```prolog% Define some basic predicates related to concepts mentionedphilosophical_property(essay).
--- Feel free to adjust any parts or provide more context if you need further elaboration!","Creating a Prolog algorithm based on the provided text requires a logical structure to identify relationships, actions, and conditions. Given the nature of the text, it can be interpreted as a series of statements or facts that could be organized into a logical framework. Below is a Prolog representation that reflects the sequential reasoning and dependencies present in your statements:```prolog% Define facts based on the statements providedfounder(alexis) :- subject(alexis).
1. **Each statement should be transformed into a Prolog fact or rule.** Here’s an example transformation:```prolog% Statements converted to Prolog facts/ruleslifts_on_scales(Third).
1. Identify key concepts and actions:   - Government involvement in work   - Reading philosophy   - Knowing authors   - Self-awareness and planning   - Editing and changing files   - Testing algorithms   - Publishing   - Breasoning (possibly meant as reasoning)   - Signing an autograph2. Define Prolog predicates based on these concepts:   - `works_together(gov, person)` - Government and person work well.   - `reads(philosophy, person)` - Person reads philosophy.
2. **Define the Prolog Facts and Rules**: We can create facts about what each character is preparing, declaring, or understanding. Additionally, we can include rules about communication and argumentation based on the relationships outlined in the text. Here’s a simplified Prolog representation of the concepts in your text:```prolog% Define facts about the characterscharacter(alexis).
2. **Defining Predicates**:      You can represent these components as predicates in Prolog. Here is an example of how you could define them:```prolog% Define actionsreads_writing(Dion, Writing) :-     Writing = 'Pedagogies written by rural area residents'.
2. **Dependencies**: Rules are created to represent the relationships among those facts. For instance, `did_job_itself(society)` depends on two facts being true.
2. **Invocation**: You would call `start_process('YourName')` in a Prolog environment, and it would print out statements corresponding to the different actions taken by the writer.
2. **Preparation Rule**: `preparation_done(Action)` checks if an action is defined as a fact.
2. **Queries**:   - You can query `find_action(A)` to list all actions and their respective reasons, or `find_reason(R)` to check all reasons defined in the program.
2. **Querying**: You can query `leads_to(X, Y)` to find out if action `X` leads to outcome `Y`. 3. **Testing the Logic**: The `test_causal_relationships` predicate demonstrates how you can test several causal relationships by checking predefined actions and printing their results.
2. **Reasoning Rules**: We create a series of rules (`reasoning(1)`, `reasoning(2)`, ..., `reasoning(9)`) that represent a step in the logical flow. Each rule depends on the successful completion of the previous one.
2. **Reasoning**: Each action is given a reason through a `reason/2` predicate. For instance, `reason(reviewed_piece, wrote_that)` states that the review is based on something that was written.
2. **Reasons**: We capture the reasons related to actions by associating them with specific subjects. For instance, `reason_for_love(papa_smurf, wrote_press_release(richard_dawkins))` indicates that one reason for loving Papa Smurf is related to a press release written for Richard Dawkins.
2. **Recursive Cases**:   - The first recursive rule `count_h([h|Tail], Count)` matches when the head of the list is `h`. It increments the count by doing a recursive call on the tail of the list (`TailCount`), and adds `1` to it.
2. **Recursive Explanation**: The `explain(X)` predicate is defined recursively. It states:    - For any X that has a reason Y for Z,    - It prints that relationship,    - And then calls itself with Y to process further reasons, effectively creating a chain of reasons.
2. **Recursive Rule Definitions**: Each `statement(N)` builds on the previous statements. For instance, `statement(2)` requires `statement(1)` to be true and adds an additional fact `wrote_about(self, other_person)`.
2. **Relationships**: For example, `in_front(m, queen)` establishes that M is in front of the queen.
2. **Relationships**: Rules are established to define how different elements are related. For example, `nurturing(me, h) :- need_high_marks(me).` implies that my nurturing behavior is due to my need for high marks.
2. **Rules**:    - The rule `can_do(A)` checks for the existence of an action and prints the action along with its reason.
2. **Rules**: Logical implications. For example:   - `writes_essay(X)` can be deduced if `X` corresponds to any character associated with an essay-like action.
2. **Rules**: Prolog rules capture logical implications based on facts. For instance, `wrote_first_idea(john) :- prepared_to_think(first_idea).` states that if John prepared to think of the first idea, then he wrote the first idea.
2. **Rules**: Rules can define logical relationships or the outcomes based on facts.    - For example, the `travelled(Vesicles) :- tested(Vesicles).` rule indicates that if vesicles were tested, they can be said to have traveled.
2. **Rules**: The `made_transformations(F)` rule allows us to check if a specific number of transformations were made. 3. **Procedural Examples**: The `transformation_process` rule shows how different actions are related and can be tied together to form a sequence.
2. **Rules**: The use of `:-` indicates a rule. For instance, `thought_of(Object1, Object2) :- experienced(Object1, Object2).` suggests that the thought (of one object having implications on another) can be derived from the experience of these objects.3. **Variables**: In Prolog, variables (like `Object1`, `Object2`, `idea`) are represented with capital letters. They can hold values when you run queries against the knowledge base.
2. **Rules**: These derive relationships from the facts. For example, `breathe_heavily(X) :- separates_butter(X), notices_plimsoll_line(X).` states that a person breathes heavily if they first separate the butter and notice a 'plimsoll line'.
2. **Rules:**   - `should_endorse(X)` simply queries if someone is endorsed.   - `should_intercept(Student)` infers that if a student has performed poorly and has undergone formative assessment, then the system should consider intercepting them.
2. **Rules:** The `carryable_line/1` predicate checks if the line meets any of the conditions:   - One long handle   - Two long handles   - Two short handles   - One long and one short handle (or vice versa)3. **Querying:** You can query the `is_carryable/1` predicate with a specific line structure to check if it is carryable. ### Example Usage:After you've defined this code in a Prolog file or an interpreter, you can query it. For instance:```prolog?- is_carryable(line('type1', [long])).% This would return true since it matches the first condition.
2. **What is the justification for the action `ate_strawberries`?**   ```prolog   ?- justification_for_action(ate_strawberries, Justification).
3. **Algorithm Development**: If we assume you want to create a Prolog database or knowledge base containing the phrases you provided as facts and possibly allow for querying or logical inference about them, here is a simple example:```prolog% Define the factsexamined_description(description_1).
3. **Member Check**:   - The `memberh/1` predicate finally checks if the count of `h` in the list (`Line`) is exactly `2` by calling `count_h(Line, 2)`.
3. **Performing Actions**: The `perform(Action)` rule can be used to query which actions can follow based on the sequences established.
3. **Queries**:   - You can query the system to find out what actions were performed, by whom, and for what reasons using `?- do_action(X, Action, Reason).`.
3. **Queries**:    - You can define what you want to check using queries. For instance, you can ask if a specific identifier lived a high life by querying `?- lived_high_life(YourIdentifier).`### UsageTo use this Prolog code, you would enter it into a Prolog interpreter (like SWI-Prolog), and then you could form queries based on the relations and facts defined.
3. **Queries**: After defining these facts and rules, you can run queries against the knowledge base (like `?- subject_action(licked_lollipop).`) to find out specific information based on the facts and rules you established.
3. **Queries**: The questions posed to the Prolog engine to retrieve information. For instance:   - `create_press_release(neuroscientist, Subject).` inquires if a neuroscientist can create a press release about a subject.
3. **Queries**: You can query using `?- summary(Action, Reason).` to find out the reasons behind certain actions.
3. **Query**: The `?- find_loop(go_to_sleep).` query can be called in the Prolog interpreter to check for loops starting from a defined action.
3. **Querying the Logic**: You can query this logic in Prolog using `thus(X).` to find outcomes of these relationships by progressively determining what is true based on the defined facts.
3. **Querying**:   - To see the actions and the reasons, you can query `can_do(Action).`, and it will list out the actions along with their reasons.
3. **Querying**: You can run a query to explain any action by calling `explain(Action, Who)`, where `Action` is the action you want to explain the reasoning for.
3. **Reasoning Relationships**: You can explicitly state relationships that provide reasoning, such as `reason_for(preparing(fabric), heat_shield).` This indicates that preparing the fabric is a reason for wearing the heat shield.
3. **Reasoning**:   - The `reason(because, Reason)` predicate is defined to output the reasons associated with each respective action.
3. **Rules**: These define logical inferences. If the conditions of the rule are satisfied, then the conclusion follows. For example, `need_high_marks(me) :- enter(honours).` states that I need high marks to enter the honours program.
3. **Running the Query**: You can retrieve the main ideas by running `main_ideas(Ideas).`, which will unify `Ideas` with a list of the collected predicates.
3. **Starting Point**: The `start` predicate initiates the reasoning process by calling `explain(philosopher)`, starting from the philosopher.
3. **Usage**: To generate the narrative, you would run a query such as `?- create_narrative(Narrative).`, and it would return a composite narrative string constructed from the defined facts.
3. **execute/1 Predicate**: This is a simple rule that prints out the action being executed and its corresponding reason. When you query `execute(Action)`, it checks if `Action` is defined, prints it, and then prints the reason for that action.
3. Write down the Prolog facts and rules:```prolog% Factsworks_together(gov, person).
4. **Waiting**: The `wait_until(sunset)` and `wait_for(reply)` represent waiting actions in your algorithm.
:- end_tests(narrative_tests).
?- analysis_by_students(Action).
?- asparagus_patient_action(Action).
?- cannot_rely_on_memory(dion).
?- explanation_for(mathematics).
?- hairstylist_action(Action).
?- is_carryable(line('type1', [long, long])).
?- is_carryable(line('type1', [long, short])).
?- is_carryable(line('type1', [short, short])).
?- is_carryable(line('type1', [short])).
?- meets_requirements(worker).
?- member_of_line(member_h, [member_h, other_item]).
?- observe_changes(future_drafts).
?- practice_haircut(hairstylist).
?- prepare_essays(student).
?- prepare_to_like(offer_hand, person).
?- relief_action(Stress, Action).
?- remove_first_item_from_sentence('I wrote an examination of the first book because', 'first', Result).
?- stopped_in_shade(X).
?- valid_algorithm(Self).
A simple Prolog representation might involve defining rules for handling different sentence structures and extracting key actions and conditions. Here is an example of how you might structure the Prolog code to capture the essence of your sentences:```prolog% Define some basic facts and rules% Define main actions connected with their reasonsaction(use, Subject, Reason) :-     Reason = 'the use because'.
Adjust this code further to better reflect any specific requirements or relations you want to explore based on your original text."],["It seems like you are presenting a series of incomplete thoughts or statements that may relate to a specific context or discussion. To help you better, could you clarify what you would like to achieve or elaborate on these ideas? Are you looking for a way to organize these thoughts, summarize them, or develop them into a more coherent narrative? Let me know how I can assist you!","It seems like you're asking for a Prolog algorithm based on a set of narrative statements. Your input consists of a series of clauses or statements, but it's not clear what specific task you want the Prolog algorithm to accomplish. To help you create a Prolog representation, I'll interpret the statements and suggest a way to encode them. Here's an example of how you can structure these statements in Prolog:```prolog% Define the structure for statementsstatement(1, wrote_about(Third, him)).
Assuming you want to analyze the content based on various relationships or topics mentioned in your sentences, we might set up a structure that parses these ideas and finds connections between them. Below is a simplified version of how you might design such a Prolog algorithm that focuses on themes, connections, and dependencies based on your text:```prolog% Define facts based on your textfact(1, \"I agreed with them about the other course being unknown material.\").
Based on these components, we can write a Prolog representation as follows:```prolog% Define entitiesentity(person).
Based on your input, I'll create a Prolog snippet that encapsulates some of these concepts in terms of predicates and rules:```prolog% Define basic facts and rules based on your statements% Example facts based on exposition and critiqueexposition(CompletedWork, Time) :-     CompletedWork = 'Work finished',     Time = 'on time'.
Based on your narrative, it seems that we have two main subjects: ALEXIS and DION, with specific actions they are associated with. Here’s a way you can represent this in Prolog:```prolog% Facts representing actions related to ALEXISindulge_in(alexis, sex).
Based on your narrative, let’s outline a Prolog representation:```prolog% Define some factspreparation(tv_appearance, skin_blemishes).
Below is a basic Prolog representation that captures some of the themes:```prolog% Define positive function of pedagoguepositive_function(pedagogue).
Below is a simplified Prolog representation of some of the statements from your input. We will define some basic facts and rules that can be queried later:```prolog% Factscoauthor(naming_coauthor).
Below is a simplified and structured way to approach this using Prolog:```prolog% Facts% Sun Exposuresun_exposure(StartMinute, EndMinute, Duration) :-     Duration is EndMinute - StartMinute.
Below is a simplified representation of the text you provided using Prolog facts and rules. The idea is to link actions (like placing the shower head vertically, shredding spinach, etc.) in a structured manner:```prolog% Define actionsaction(shower_head_vertical).
Below is an example of a Prolog representation that captures the essence of the provided text, abstracting some concepts to create an educational framework. This example includes some predicates for reasoning and interaction in an educational context:```prolog% Define facts about entitiesperson(student).
Below is an example of how you could approach defining this in Prolog:```prolog% Define the main events/actions as facts and establish logical connectionsevent(licked_rim_of_glass).
Below is an example of how you might encode this reasoning structure into Prolog. We'll define various predicates to capture the relationships and events described:```prolog% Factsperson(dion).
Below is an example of how you might represent this situation in Prolog:```prolog% Define the actions and subjects% action(Subject, Action, Context)action(you, observe_agreement, student).
Below is an example of how you might translate your narrative into a Prolog database:```prolog% Facts representing the statementspolice_officer_preparation(press_release).
Below is an illustrative example of how Prolog could be used to represent these relationships. The exact implementation may vary depending on what you want to achieve:```prolog% Facts representing the subjects and actionsrecognizes(enteric_nervous_system).
Combining these threads into a coherent thought could look something like this:\"I explored how Richard Dawkins’ scientific rationality intersects with Richard Rorty’s pragmatic philosophy, translating this discussion into a text-to-speech algorithm that enhances understanding, while reflecting on the importance of equitable treatment in education for physically challenged individuals, and noting how iteration in both programming and life leads to deeper insights, illustrated by the daily change of icons, symbolizing continual growth and adaptation.\"This condenses and connects the multiple ideas into a singular narrative. Would you like to further refine or elaborate on any specific part?","Creating a Prolog algorithm based on the intricate narrative you've provided involves breaking down the abstract ideas and relationships between concepts into logical rules and facts. The narrative seems to mix philosophical arguments, personal anecdotes, and abstract reasoning. Here's a simplified Prolog representation of the ideas you mentioned:```prolog% Define facts about the ideasconnected(ideas(alexis, line_item), ideas(richard_dawkins, richard_rorty)).
Feel free to adjust the predicates and facts to better fit your understanding of the relationships you want to express!"],["It seems like you're asking for a way to weave together various statements or ideas into a coherent sentence. Here’s an attempt to create a comprehensive sentence using the elements you provided:\"The cake maker prepared to ice the cake because I found details necessary for my Press Release on Michel Onfray's probable comments regarding the Medicine blog, and I did this while preparing to reason out the object, knowing that I had met the Prime Minister and also that I had eaten a cherry tomato; meanwhile, the subject predicateer computed the output, prompting me to repeat this process for other notable individuals, all while he threaded the thread through the needle.\"Feel free to adjust any part of this for clarity or to better convey your desired message!","To create a Prolog algorithm based on the provided statements, we first need to extract the relationships and facts involved. The statements you've provided seem to describe a sequence of events or actions leading up to various conclusions. We will formalize them into facts and rules in Prolog. Since Prolog is designed for logical reasoning and handling relationships, we can represent the actions as predicates. Here’s a simplified version considering the main actions and dependencies:```prolog% Facts representing actions or eventsprepared_icing(cake_maker).
Feel free to expand upon this basic structure to capture more complex relationships or additional functionalities as needed!"],["The perfection level was complete because the professor and student collaboratively explored arguments, aligning their insights, while I prepared to teach effectively through calculated engagements and a focus on clear educational skills.","Creating a Prolog algorithm based on the content you've provided involves interpreting the sentences into logical predicates and relationships. It seems like we're dealing with a scenario related to teaching, reasoning, and planning activities related to education. Given the complexity and varying themes of the sentences, I'll distill the ideas into logical predicates and define a reasoning process that incorporates the mentioned elements. Here's how you might create a Prolog representation for this:```prolog% Define basic facts and rules% Facts about teaching activities and reasoningteaching_activity(Professor, Subject, Level) :-    reason(Professor, Argument),    breasoning(Professor, Student),    perfection_level(Level).
Feel free to modify or expand upon this foundational structure to capture more of what you're aiming to model in your narrative!"],["The mushroom farmer tested the mushrooms to ensure they had enough fertilizer and water because he wanted to maximize their growth. He thought of the words individually because he believed that precise language was crucial for clear communication. Third, I wrote \"the\" as \"tail\" because I mistakenly associated the letters. I edited the page because I wanted to improve the clarity of the information presented. He did this by opening the umbrella to protect himself from the rain. The gardener picked the flower because it was the perfect specimen for the bouquet he was arranging. In this way, the autist prepared to perform calendar calculations by counting the number of years, turning the task into a familiar routine by eating the biscuit as a reward. I wrote on the idea as an algorithm because I wanted to create a structured approach to the problem. I did this by identifying who had blue eyes among the group, using it as a basis for organizing our seating arrangement. I attended to the child in one sentence, explaining the importance of sharing with others.","It seems that you're asking for a Prolog representation of a series of statements relating to different subjects and actions that form a coherent narrative involving a mushroom farmer, a gardener, and some additional actions. To create a Prolog algorithm based on these statements, we need to frame them as facts and rules. In Prolog, we can represent each statement as a predicate. Here's one way to structure this narrative in Prolog:### Prolog Representation```prolog% Facts based on the statementstest_mushrooms(Farmer) :-     write(Farmer), write(' tested the mushrooms for sufficient fertilizer and water.').
First, we define the events and their relationships. Each statement in your input could serve as a fact or a rule that describes how one event leads to another. Here's how you can represent that in Prolog:```prolog% Facts representing eventsevent(i_wrote_sentence).
For example, querying if the subject can speak about a specific object:```prolog?- can_speak_about(Object).
For instance, if you want to create a general statement or argument based on themes of preparation, translation, and happiness, I could help synthesize those ideas. Here is an example:\"I prepared to maintain my happiness through meditation and thoughtful consideration of translations, understanding that not every nuance can be effortlessly conveyed in a new context, despite the intricacies involved, much like a tailor skillfully adjusting the sleeve of a jacket to enhance fit and comfort.\"If you have a specific focus or message in mind, please share more details, and I'd be happy to assist further!","Creating a Prolog algorithm to handle the narrative twist, performance watching, item deletion, tongue movement, translation meanings, meditation prerequisites, happiness maintenance, file backing up, tailoring adjustments, and argument writing can involve a series of predicates outlining these actions. However, to fit this into the context of Prolog, I will structure it around rules that reflect the essence of your description. Here's a simplified version where I will create predicates representing different actions and events based on your input:```prolog% Define the actionsprepared_to_allow_twist(Narrative) :-     write('I prepared to allow for a twist in the narrative because '),     write(Narrative), nl.
Given the abstract nature of the text, let's consider creating a Prolog program that represents some of the relationships and ideas expressed, albeit in a more structured way. For example, we could represent some shoppers visiting side shops and some items they might desire or substitute. Here's a simple Prolog implementation:```prolog% Facts representing shoppers and their actionsshopper(alexis).
Given the nature of your narrative, we can break down the components into facts and associations. Here’s a sample Prolog representation based on the scenarios you provided:```prolog% Factswrote(whos_that).
Given the nature of your text, I'll outline a simple Prolog representation that could help relate some of the concepts mentioned in your narrative. This will include facts and rules that could indicate relationships or conditions that might be inferred from your descriptions. Here's how you might approach it:```prolog% Factsstudent(john).
Given your text, it seems to be a mixture of personal observations and actions, possibly structured around an outline or a sequence of experiences. Here’s how we can represent the main components in Prolog:```prolog% Facts representing actions and observationsaction(observe_music, partner).action(prepare_repeat, each_hour).
Here are some possible predicates we can extract:1. `saw(self, other).`2. `used_for(cure_code, different_purposes).`3. `wrote_exam(person, subject).`4. `particle_computation(shown_by(lecturer), involved(particles)).`This is a simplistic interpretation. Let's translate this into a Prolog representation:```prolog% Factssaw(self, other).
Here are some predicates that might be useful:1. `peer(Peer).` - A predicate to represent a peer.
Here is a basic Prolog representation of how such a logic could be structured:```prolog% Defining facts about the experience of the subjectexperience_positive(subject) :-     arrived_on_time(subject),    delightful_experience(subject).
Here is a basic Prolog representation of the information:```prolog% Defining entitiesentity(healthy).
Here is a basic outline of how you might set up some predicates to represent the information in the given text:```prolog% Define predicates for actions and conditionspicked_up(pendulum, handle).
Here is a possible Prolog representation of the narrative as rules and facts:```prolog% Facts representing actions and statesaction(start_ignition).
Here is a possible Prolog representation of your input:```prolog% Define the main concepts and predicates% Define knowledge and ideasidea(necessary_connection).
Here is a possible Prolog representation:```prolog% Define facts representing the actions and their reasonsaction(sound_track_written, reason(umbrella_opened)).action(umbrella_opened, reason(popsicle_tested)).
Here is a possible representation:```prolog% Factsaction(seen, first, \"I saw you\").
Here is a prototype Prolog code implementing a DFA with some abstract states and transitions:```prolog% Define statesstate(start).
Here is a sample Prolog program that encapsulates some of your stated functionality:```prolog% Factsstudent(john).
Here is a simple Prolog program that outlines your ideas using predicates to denote relationships between various statements:```prolog% Define main predicatesprepares_for_humpy(Preparation).
Here is a simple Prolog representation of some of these ideas:```prolog% Define residents and their actions/attributesresident(rural_area_resident).
Here is a simple Prolog representation that reflects some of the concepts:```prolog% Factsperson(john).
Here is a simple Prolog representation:```prolog% Facts based on the provided statementsrecorded_width_of_ruler(ruler_1, Width).
Here is a simple representation of your narrative in Prolog:```prolog% Define main actions and their reasonshappy(Person) :-     wrote_reasons_for_argument(Philosopher, Reasons),     encourage_cockatoo(Cockatoo, First),     prepare_cockatoo(Cockatoo, Reasons),     prepared_lolly(Lolly, Comments),     prepared_draw(Megapixels, Pixels),     prepared_ride(Market, Stallion),     did_action(DogModel, PressureCup),     repeated_read(NumberOfA, Days),     relish_lunch(PM, Sandwich).
Here is a simplified example of how you might represent some of the ideas you mentioned in Prolog:```prolog% Define some facts about actions and itemsused_in(dion, whiteboard).
Here is an example Prolog program that might capture the essence of your request, focusing on recursion and the basic structure of reasoning:```prolog% Base case: an empty list returns true (or some default behavior)process_elements([]) :-     write('No elements to process.'), nl,    !.
Here is an example Prolog representation based on your description:```prolog% Define the actions and motivations for the first few statementsaction(adorn_stage_with_flowers, maharishi).
Here is an example of how you can define this in Prolog:```prolog% Base factsis_alive(god).
Here is an example of how you might write such a Prolog program:```prolog% Define factsemotionally_supported(physically_challenged_person).
Here is how we might create a Prolog representation of that thought process:```prolog% Define facts and rules to represent the processes% Facts representing identified statesmind_read(connectors).
Here is how you might structure the Prolog code:```prolog% Facts representing the information from the sentencesaction( Subject, Action, Reason ) :-    member( Subject, [alexis, student, he, bottler] ),    member( Action, [        write_summary,        protect,        lick_lollipop,        inspect_screen,        write_on_words,        write_on_mind_metaphor,        prepare_cork,        help_write    ]),    reason(Action, Reason).
Here it is:```prolog% Facts% Characteristics of studentsstudent(lucian_green).
Here's a Prolog representation of the narrative you provided:```prolog% Define factslicked_lollipop(Third).
Here's a basic representation of what this could look like in Prolog:```prolog% Define the line as a factline(\"Rural area residents wrote pedagogies because Grit was good grades because Another text was used in my essay because In this way Lucian prepared to teach the students by setting up the monasticled school because Third he measured this quantity because The pilot prepared to test the system was working because Second I sipped the water from the chalice because Second I repeated the meditation details to Maharishi Lucian see Jacqueline Publicity primary text entry and Abracadabra and unabridged Abracadabra song meanings because In this way I prepared to complete my PhD by verifying the statement in meditation philosophy\").
Here's a basic structure for a Prolog program reflecting some of the ideas mentioned:```prolog% Define actions and their reasonsaction(walk_in_paddock, spiritual_preparation).
Here's a basic structure for a Prolog program to encapsulate some of the concepts you've provided:```prolog% Define actions as factsaction(prepared_hat_on_you).
Here's a basic structure you could use in Prolog:```prolog% Facts representing various conceptsconcept(noumenon).
Here's a conceptual approach for a Prolog program based on the information you provided:```prolog% Define factspreparation(writing_topic_list).
Here's a possible Prolog representation of your text:```prolog% Facts representing the actions and relationshipsprepared(meditation_philosophy, pedagogy_helpers).
Here's a possible representation of your narrative in Prolog:```prolog% Define the main action and its justificationaction(happiness) :-    reason(rotate_stick),    reason(confirm_primary_secondary),    reason(like_determinism),    reason(prepare_vertical_screen),    reason(state_why_wise),    reason(prevent_errors).
Here's a potential Prolog representation that defines some facts and rules based on your text:```prolog% Define facts based on the statementsstrategies(backup_with_light).
Here's a revised version:\"The student should demonstrate an understanding of pedagogical thinking and have engaged with meditation practices as a means to enhance educational writing. This process involves examining ideas critically and creatively, with the goal of producing high-quality essays that reflect professionalism. For instance, while exploring meditation as a tool for building confidence, I first researched the topic and then reflected on how methods such as the Lucian mantra can support personal growth and job security. Furthermore, I intend to review the student's concepts humorously to encourage a reflective and open dialogue about their work.\"Feel free to ask for more adjustments if needed!","In Prolog, you can write a predicate to implement the DION Line algorithm, which removes the first instance of a specified item from a given line (or list of words). Below is a simple Prolog implementation for your requirement:```prolog% remove_first(Item, List, Result) - removes the first occurrence of Item from List.
Here's a rough outline of how you might construct such a Prolog representation:```prolog% Define the main subjects and actionssubject(dion).subject(professor_leon_sterling).
Here's a sample Prolog code that can help you structure your arguments based on your description:```prolog% Define the main predicate for argumentsargument(argument_id(1), \"Nobel Peace Prize for Breasonings\", reason(\"They enabled us to be about things.\")). argument(argument_id(2), \"Breasoning by the student\", reason(\"Necessary in larger classes.\")). argument(argument_id(3), \"Breasoning by the lecturer\", reason(\"Necessary in larger classes.\")). argument(argument_id(4), \"Breathing in\", reason(\"Provided mental clarity.\")). argument(argument_id(5), \"Took the biscuit from the packet\", reason(\"It was a snack.\")).
Here's a simple Prolog program that illustrates some of these concepts:```prolog% Fact to represent the significance of a wordmeaning(word1, nature).
Here's a simple Prolog representation based on the ideas presented:```prolog% Factsneuroscientist_identifies_colour(region1, color1).
Here's a simple Prolog representation based on the provided text:```prolog% Define the main actions and relationships% He looked through the peepholelooked_through_peephole(He) :- action(looking_through_peephole, He).
Here's a simple Prolog representation:```prolog% Define the objects involved in the scenarioobject(richard_dawkins).
Here's a simple approach in Prolog:```prolog% Facts describing tasks and their preparationspreparation(measure_students_achievement, prepare_measurement_tools).
Here's a simple approach to formalizing your statements in Prolog:```prolog% Define the main subjects and reasonssubject(1, \"I wrote I spoke on the first day about not doing too much work\").subject(2, \"I liked the cosmos\").
Here's a simple approach to model your statements in Prolog. We will define relations and rules that encapsulate the logic and relationships of the statements:```prolog% Define facts based on the textprepared_to_sing(my_case).
Here's a simple interpretation of the given text in Prolog:```prolog% Facts based on the statementslifted_feet(Third) :-     action(Third, lifted_feet),    reason(Third, wound_around_hand).
Here's a simple representation in Prolog that captures the essence of the statements:```prolog% Factssupported_visitors(vatican, no).
Here's a simple representation of how you might approach encoding these relationships in Prolog:```prolog% Facts defining actionsdid_this_by(drinking_water, chalice).
Here's a simplified Prolog code that embodies these ideas:```prolog% Define some objects and their propertiesobject(room).
Here's a simplified Prolog representation of your narrative:```prolog% Define subjects with their feelingssubject(queen, love).
Here's a simplified representation of some of the actions, using Prolog facts and rules:```prolog% Facts representing various actions and statesprepared_to_look_out(architect, south_window).
Here's a simplified version of how such a Prolog algorithm might look based on your statements:```prolog% Defining facts and rules based on the provided sentences% High distinction argument based on writing abilityhigh_distinction_argument(When) :-     when_in_honours(When),     able_to_write_high_distinction_argument.
Here's a simplified version of how this could be represented in Prolog:```prolog% Facts representing the statements from the original textmeditation_written(god, leader).
Here's a simplified version of how this could look in Prolog:```prolog% Define actions and their reasonsaction(preparing_to_go_sick_nut, richard_dawkins, 'writing comments on Pedagogy essays').
Here's a simplified version of how we can represent some of the ideas as facts and rules in Prolog:```prolog% Facts representing characters and actionsaction(unfolded, character(richard_rorty)).
Here's a simplified version of how you could represent the information using Prolog's syntax:```prolog% Define actions and their reasonsaction(prepare_for_tv, literature_review, phD).reason(literature_review, logic).
Here's a simplistic approach to your text in Prolog:```prolog% Define relationships and actionsloves(X, Y) :- prepare_to_love(X, Y), drink(holy_water, X).
Here's a starting point for a Prolog representation:```prolog% Factsprepared_to_bring_love(yes).
Here's a way to approach it using Prolog, based on the themes and structure you provided. We'll create a simple Prolog representation that captures some of these ideas in the form of facts and rules:### Step 1: Defining the FactsWe can represent each of the statements as facts in Prolog:```prolog% Facts representing the reasoning providedreasoning(husband, \"I ate with you because _\").
Here's a way to structure these actions using Prolog facts and rules:```prolog% Define the actionsaction(cut_out_two_pocket_halves).
Here's an example Prolog representation based on the sentences you provided:```prolog% Define actions and reasoningaction(took_biscuit, because(biscuit_in_packet)).
Here's an example of how a Prolog program could look:```prolog% Factsprepared_to(teacher, lucianic_meditation).
Here's an example of how this could be structured in Prolog:```prolog% Facts defining actions based on observationsaction(writing_articles, encyclopedias, reason(because, dion)).
Here's an example of how we might implement your statements in Prolog:```prolog% Factsworked_out_logic(person([])).
Here's an example of how you might represent the relationship between the events in Prolog:```prolog% Define the relationships% Facts representing the eventsevent(present_hidden_employee_reached_readiness_threshold).
Here's an example of how you might start to structure some of these ideas in Prolog facts and rules:```prolog% Facts representing different stages and thoughtsperson(whoami).
Here's an example of how you might structure a Prolog program based on your text. We will create facts to represent actions and their reasons, and rules to query this information. ```prolog% Facts representing actions and their corresponding reasonsaction(underlined_apple, 'I underlined the apple in the apple ruler pair').
Here's an example of how you might structure a simple Prolog program to handle certain aspects of the given sentences:```prolog% Define facts for objects and their importanceimportant_object(text).
Here's an example of how you might structure encoded actions in Prolog:```prolog% Define some actions based on the fragmentsaction(calculate_lane_width, calculate, width_of_lane).
Here's an outline of the predicates we can derive from the given context:1. **desires(warm_space, alexis)**2. **blocks(third_party, alexis)**3. **thanks(alexis, emeritus_professor_leon_sterling)**4. **likes(breasonings, simulation)**5. **reminder(document, replace_body)**6. **observed(actors, protection)**7. **prepares_to(love_self, everything)**8. **chews_and_swallow(part_of_lolly_snake, alexis)**9. **moves(king_duchess_piece, alexis)**10. **knows(minus, alexis)**Now, we'll express these predicates in Prolog and establish some dependencies. Here's an example of how you might represent this in Prolog:```prolog% Define predicatesdesires(alexis, warm_space).
Here's how the content could be represented in Prolog:```prolog% Define facts about the actions and thoughts of the sign writeraction(prepare_writing_letters).
Here's how we might structure a Prolog program that captures some of the ideas from your text:```prolog% Define conditions for carrying itemscan_carry(Subject) :-    has_long_handles(Subject, Quantity), Quantity >= 1.
Here's how we might translate your concepts into Prolog:```prolog% Define facts related to the process of writing and understandingwrites_essay(Writer) :-     prepares_thoughts(Writer),     relieves_stress(Writer),     listens(Writer),     reviews_books(Writer).
Here's how you can implement this in Prolog:```prolog% Define sentences as factssentence(1, 'The school student chose the sentences containing the key term from the question because.').
Here's how you can represent the scenario in Prolog:```prolog% Facts representing eventsfinished_writing(class).
Here's how you might represent the provided logical relationships and reasoning in Prolog:```prolog% Facts and Rules% Define the actions takenwrote(rhetoric_of_safety, Subject) :-     Subject = 'unknown'.
Here's how you might start constructing a Prolog representation based on the concepts in your example:```prolog% Define basic factsmixed(apple, cream).
Here's how you might start writing a Prolog program based on the themes present in your sentences:```prolog% Define facts related to the given sentences% Assessment in educationassessed(marks_as) :- write('Assessment of marks is subjective.').
Here's one way we can represent relevant information in a Prolog format, defining facts and rules that encapsulate the tasks and rationale expressed in your text:```prolog% Define operating systemsoperating_system(mac).
Here’s a Prolog representation based on the narrative provided:```prolog% Factsmind_reading(joind_mult_languages).
Here’s a Prolog representation of the given thoughts:```prolog% Define facts for actions and eventsthought_leads_to_sales(thought).
Here’s a Prolog representation of these concepts:```prolog% Define intentions or beliefsintention(eat_healthily).
Here’s a basic outline for a Prolog representation of concepts related to your statement:```prolog% Define objects and their propertiesobject(useful_object(name1, size1, function1)).
Here’s a basic structure for how you could represent it in Prolog:```prolog% Actions represented as facts or rulesprepare_prospectus :-    wear(suit),    have(practicum),    mediate(robot_algorithm),    place(clamp, axle),    clear_pathways,    open(sunglasses, right_arm),    go_to(bedroom),    is_cooler(bedroom),    check_comments(breasonings).
Here’s a conceptual Prolog representation based on your input:```prolog% Define the entitiesentity(alexis).
Here’s a conceptual Prolog representation that captures parts of your idea:```prolog% Define some factsuses_correct(dion).
Here’s a possible Prolog representation of your narrative:```prolog% Define basic facts and relationshipsperson(krishna).
Here’s a possible interpretation and a simplified Prolog implementation that asserts relationships between subjects and actions:### Prolog Code```prolog% Define some facts about subjects, objects, and their relationshipssubject(alexis).
Here’s a possible representation in Prolog:```prolog% Define entitiesentity(alexis).
Here’s a potential way to structure the relevant propositions:```prolog% Facts representing actions and reasonsdid(he, write(a, chalk)).
Here’s a sample Prolog program:```prolog% Define comments and their attributescomment(1, \"I love programming.\", non_offensive).comment(2, \"This approach is terrible!\", offensive).
Here’s a sample Prolog representation of your text:```prolog% Facts representing actionsliked(lucian, myself).
Here’s a simple Prolog algorithm that could represent the checking of whether popsicles have melted, simplifying it down to a list of checks:```prolog% Define what it means for a popsicle to be meltedmelted(popsicle1).
Here’s a simple Prolog representation that captures some of the connections you mentioned:```prolog% Base facts about objects and their usescan_stand(pot).
Here’s a simple Prolog representation that captures some of the reasoning based on your description. This won't be a complete implementation but will give you a starting point for the reasoning structure you've outlined:```prolog% Facts representing the components of reasoningprepared_to_eat(vegan_cake).
Here’s a simple example of how you might approach this in Prolog, focusing on connecting ideas and expressing relationships:```prolog% Define facts based on your conceptsidea(tinsel_attached).
Here’s a simple possible representation of the logical relationships implied in your text:```prolog% Define peers, students, and pedagoguespeer(alexis).
Here’s a simple representation of the relationships and actions outlined in your sentences:```prolog% Relationships between actions% Basic actions and their reasonsaction(attached_corks_to_strings, because(gardener_picked_flower)).
Here’s a simple representation:```prolog% Define factsobserved(robot_recognition).
Here’s a simple version of a Prolog program that could help evaluate the phrases you've provided:```prolog% Define facts for the properties of itemscan_stand_and_carry(pan).
Here’s a simplified example of how you might represent the given statements in Prolog, using facts and rules to capture the flow:```prolog% Representing the statements as factsgood_experience(good_here).
Here’s a simplified representation of the statements you provided in a Prolog-like format:```prolog% Define facts and rules based on the text provided% Relationships and factswrote(writer, books).
Here’s a simplified version of what this might look like in Prolog:```prolog% Facts representing relationships and themesnature(blue_ocean).
Here’s a way to represent your narrative in Prolog:```prolog% Define facts based on the narrative% Actions or preparationsprepared_to_eat(scone, idiot).
Here’s an attempt to structure your narrative into a Prolog program:```prolog% Define actions as factsmerited(Second, First) :-    lifted_hand(First, line),    gave_today_a_carrot(Second).
Here’s an example Prolog code that summarizes the actions and their connections based on your input:```prolog% Facts representing actions and reasons% Action and the corresponding reasonaction(know_about, subject) :- true.
Here’s an example Prolog-like representation that could outline a series of actions or relationships based on the phrases you've provided:```prolog% Define eventsevent(place_marker(X, Y), \"Placed a marker at coordinates (X, Y)\"). event(find_sunglasses(Style), \"Found a style of sunglasses: Style.\").
Here’s an example of how this can be structured in Prolog:```prolog% Factsprepared(journal_article).
Here’s an example of how this could be structured in Prolog:```prolog% Define actions and conceptsaction(separate_ingredients, knife, spoon).
Here’s an example of how those relationships might look in Prolog:```prolog% Define individual actionsaction(found_pet).
Here’s an example of how we could represent your statements in Prolog:```prolog% Representation of the statements as facts% The first part of complex statementsexamined(void, 'because').
Here’s an example of how we might start constructing a Prolog representation:```prolog% Define the main subjects and relationships% Factshas_personality(text).
Here’s an example of how you can structure this in Prolog:```prolog% Facts representing actions and resultsfound_secret_to_immortality :-     shake_hands_with(you),    like(Impressionism),    self_examined(pedagogy_helper_aigs).
Here’s an example of how you could structure a Prolog program for this:```prolog% Defining predicates for actions and their reasonsaction(reviewed_piece, reviewer).
Here’s an example of how you might structure this information in Prolog:```prolog% Facts representing the actions and statementsaction(press_release(noam_chomsky, meditation_essays)).
Here’s an example of what this might look like in Prolog syntax:```prolog% Factsperson(cyclist).
Here’s an illustrative example in Prolog:```prolog% Factswalked_to_place(because(sparticles_collided)).
Here’s an illustrative example of how you might represent some of this in Prolog:```prolog% Factsendorsed(malcolm_turnbull).
Here’s how we might represent the given statements in Prolog:```prolog% Facts representing the given statementshuman_benefit(text_to_speech).
Here’s how you could define such a solution in Prolog:```prolog% Predicate to count occurrences of 'h' in a stringcount_h(String, Count) :-    atom_chars(String, CharList),    count_h_chars(CharList, Count).
Here’s how you might structure it:```prolog% Facts representing actions and reasoningled_by_example(Example) :-     Example = 'showing a good example'.
Here’s one potential way to structure these concepts in Prolog:```prolog% Defines what each line is aboutline(1, 'I prepared to go to heaven the store by endorsing God the master').
Here’s one way to encode this in Prolog syntax. Let's define some basic facts and rules:```prolog% Factsobject(dion).
Here’s one way to structure your thoughts into a Prolog program. We will need to define some relationships and rules based on the concepts you've conveyed. This algorithm includes predicates to capture these relationships:```prolog% Factslikes(john, vegan_meat). % John likes vegan meatpositive_approaching(good). % Good is a positive approachhas_humanlikeness(good_approach). % Good approach possesses human likenessapproached_by(good, object). % Object was approached by good% Rulesendorse_positive_subject(Subject) :-    likes(Subject, Object),     (Object = vegan_meat; Object = good_approach); % Object should be either vegan meat or good approach    approached_by(good, Object).
However, I can create a simple Prolog representation to capture the essence of the ideas you presented. This will involve creating facts and rules that could facilitate some logical reasoning or decision-making processes based on the concepts like \"traveling,\" \"meditation,\" and \"existence.\"```prolog% Factstraveling(astronaut, space_dock).
However, I can help outline how you might represent elements of your narrative in Prolog. The narrative touches on various concepts like time synchronization, legal aspects, health management, machine learning (specifically KNN), argument formulation, and more. Below is a Prolog representation of some of these concepts and logic that might apply:```prolog% Fact Definitionsat_same_time(Person1, Person2, Location) :-     write(Person1), write(' and '), write(Person2), write(' are at '), write(Location), write(' at the same time.').
However, if you're looking to create a Prolog algorithm based on the themes presented in your sentence (perhaps around relationships, reasoning, or actions), we could loosely outline something. For instance, we could create a basic structure of predicates to represent the relationships and actions. Here’s an example algorithm that might approach some of the themes:```prolog% Facts representing actions and agreementsattended_singing_training(john).
However, the request is quite abstract and multifaceted, and translating it directly into a cohesive Prolog algorithm requires breaking down the ideas. Below, I’ll create a simple Prolog program that attempts to reflect some of these concepts in a structured way. ```prolog% Define relationshipsloves(friend1, self).
I will help you convert your narrative into a Prolog-style format, representing the relationships described in your statements more clearly. Here's a way to structure it:```prolog% Factsoarsman_prepares_to_row(oarsman) :- shave_beard(oarsman).
I'll create a simplified Prolog representation based on the fragments in your request. This example will not cover every nuance but will aim to capture the reasoning structure:```prolog% Define actions and stepsaction(breason_out, purpose(education_system)).
If these interpretations do not match your intent, feel free to provide more details, and I'd be happy to adjust my responses!","Creating a Prolog algorithm for such a narrative requires transforming these sentences into logical relations, predicates, and facts that Prolog can process. Below is a simple example of how you might structure a Prolog program based on the themes and actions presented in your sentences. ```prolog% Facts and rules based on the provided narrative components% Defining some main actions and their implicationsmade_cube_from_squares(ABcA).
If we're discussing a function in a programming context that checks for occurrences of the letter 'h' in a string, while also trying to ensure certain requirements are met (such as having two 'h's and \"two short handles\"), it might look something like the following pseudocode or simplified function definition:```pythondef memberh(line):    # Count occurrences of 'h'    h_count = line.count('h')        # Check the conditions    if h_count == 2:        # Assuming 'short handles' refer to certain predefined criteria        contains_short_handles = check_for_short_handles(line)  # Define this function based on your criteria                if contains_short_handles:            return True                return Falsedef check_for_short_handles(line):    # Define what 'short handles' means (e.g., specific keywords, patterns)    # Return True if the line contains the defined short handles    return 'short_handle' in line  # Example condition```In this sample code, `memberh` checks if the input `line` contains exactly two instances of 'h' and checks for other conditions like \"short handles.\"If \"Line\" is intended to represent a specific context or has a specific meaning, please provide more details so I can assist you further regarding that. Additionally, if you could clarify whether this is related to a programming task or a different context, that would be helpful!","In Prolog, the task of checking whether a list (Line) contains exactly two occurrences of the element `h` can be accomplished by defining a predicate called `memberh/2`. This predicate will specify that `h` is a member of `Line` and count how many times it appears. If it appears exactly twice, the predicate will succeed.
If you have a more specific problem or different themes in mind, please let me know, and I can refine the Prolog code accordingly!"],["It seems you're weaving together a sequence of thoughts and actions in a unique stream-of-consciousness style. To respond to your request, here's a distilled comment on the interesting aspect of computational philosophy in one sentence based on your structure:\"Computational philosophy explores the intersections of computation, cognition, and human understanding, fostering insights into how algorithmic processes mirror and inform our philosophical inquiries about mind and meaning.\"","The text you provided appears to be a collection of phrases that seem to imply a narrative or logical flow, but it's challenging to interpret it as a structured problem suited for Prolog directly. Prolog is typically used to represent facts and relationships and for logical reasoning. However, I can help you construct a simplistic Prolog representation based on the acts and relationships described in your text:### Prolog RepresentationFirst, let's break down the phrases into logical predicates or facts that can be represented in Prolog:```prolog% Factshigh_life(Identifier) :- living(Identifier, high_life).
If you have a specific question or wish to dive deeper into any of these fragments, please let me know!","Creating a Prolog algorithm to encapsulate the meanings and relationships in your text can involve various interpretations. However, considering that Prolog is primarily used for logical reasoning rather than processing natural language, you might want to structure your statements in a way that defines facts and rules. Here’s a simplified approach to representing the concepts in your text through Prolog predicates:```prolog% Factsate(processed_excrement, first).awarded(agreement_disagreement, same_grade, third).
If you have a specific question regarding these phrases or need help consolidating these ideas into a narrative or structured format, feel free to ask!","Creating a Prolog algorithm to represent the chain of reasoning in your provided text requires defining a structure to capture the various statements and their relationships. In Prolog, we can represent facts and rules to reflect this reasoning process. Below is an example of how you might define such an algorithm:```prolog% Define facts to represent the statementsfact(hand_shake, \"He did this by shaking his hand in the air\").
If you have specific questions about features of Prolog, or aspects of reasoning and inference you want to model, feel free to ask!"],["It seems like your text is a complex stream of thoughts and ideas that touch on various topics, including medicine, philosophy, algorithms, education, and human rights. If you're asking for a summary that captures the essence of what you mentioned, I can help distill it into a more coherent statement. Here’s a condensed version of your ideas:\"The integration of body systems is essential for medicine students, as it reflects a commitment to understanding human rights and supporting those in need, such as physically challenged individuals, while also exploring philosophical perspectives through the lens of algorithmic thinking and computational English.\"If you want to clarify or elaborate on specific parts, please let me know!","The text you provided seems to be a collection of statements and thoughts that may represent a stream of consciousness or a brainstorming session for a larger idea or paper. To create a Prolog algorithm from this content, we would need to formalize the relationships and definitions of the entities involved. In Prolog, we define facts and rules, so we can create a simple knowledge base that reflects the relationships and concepts in your text. Below is an example of how you could represent the ideas in Prolog using facts and predicates:```prolog% Facts about people and their actionsstudent(medicine_student).
If you'd like to structure these ideas further, or if there's a specific plea for a summary or rephrasing of these thoughts, please clarify!","It seems that your text is a stream of reasoning and thought processes that might look like causation chains or hierarchical relationships among statements. Although the exact request for a Prolog algorithm is a bit unclear, I will provide you with a basic Prolog representation of reasoning chains that can help capture the relationships in your text. ### Prolog RepresentationIn Prolog, we can represent facts and rules that outline the logical relationships between the different statements. Below is an example of how you might structure your reasoning in Prolog:```prolog% Facts representing the reasoning process:part_of(dadirri, university_meditation_philosophy_graduates).
If you're looking for a more structured way to express these ideas, they could be woven into a story or a philosophical essay that explores the interconnectedness of these various themes and actions. Would you like help organizing them or expanding on any particular idea?","Creating a Prolog algorithm (or logic program) based on the intricate narrative you provided can be quite challenging due to its abstract nature. However, we can structure the information into predicates and rules that represent the relationships and actions involved in the narrative. Here’s a simplified version of how you can represent this in Prolog:1. **Define predicates for actions and entities.**2. **Establish relationships between them.**Here's a potential Prolog representation of the narrative:```prolog% Define actionsaction(preparing_protection(mother, daughter)).
If you’d like to create a Prolog algorithm involving some of the themes mentioned in your text, such as predictions, assisting tasks, or handling data, let me know how you'd like to proceed. Here’s a simple example of a basic Prolog algorithm that predicts the position of a moving object based on its current speed and direction. This could be loosely based on the idea of predicting where a ball will be:```prolog% Define moving_object/4 to represent the object status% moving_object(Name, CurrentX, CurrentY, Velocity)moving_object(ball, 0, 0, 10).  % Example: a ball at (0,0) moving with a velocity of 10 units% Define a rule to predict the future position of the moving objectpredict_position(Name, Time, FutureX, FutureY) :-    moving_object(Name, CurrentX, CurrentY, Velocity),    FutureX is CurrentX + Velocity * Time,    FutureY is CurrentY + Velocity * Time.
In Prolog, facts and rules can be used to model relationships between different entities and actions. Below is a simplified version of how one might represent the sequence you provided:```prolog% Facts representing actions and relationshipstime_travel(safe_time).
In Prolog, knowledge can be represented using facts and rules. Here’s a basic outline of how you might structure this information into a Prolog program:```prolog% Factsrobot(made_out_of_breasonings).
In Prolog, we can create rules and facts that help represent a sequence of transformations or interrelated concepts. Here’s a simplified Prolog algorithm that could encapsulate the essence of your description through the creation of rules and relationships between certain elements:```prolog% Facts representing individuals and their judgmentsjudgment(alexis, matches_text_objects).
In Prolog, we could model this with facts and rules that encapsulate the ideas expressed in your narrative. Here’s a simple representation that might capture the essence of your request. Given that Prolog is a logic programming language, the example will focus on defining predicates that represent the relationships between these thoughts:```prolog% Define facts based on the narrative components% Knowledge and preparationsdiscovered(aigs).
In Prolog, we represent facts and rules that can express relationships or knowledge. Here's an example of how you might encode some of these statements in Prolog:```prolog% Factsorder_written(1, 'I gave to the pope gemstone dealer').
In summary, DION encapsulates a blend of learning, communication, strategic thinking, and trust. By understanding these elements and applying them thoughtfully, students and educators can navigate the complexities of their respective fields more effectively.","To create a Prolog algorithm for generating a summary speech from the provided essay text, we need to break down the requirements step by step. The summary should include arguments based on various reasons represented in the text, while also incorporating both student and lecturer perspectives as mentioned in the Professor Algorithm. Here’s a basic Prolog implementation that outlines this summarization process. ### Prolog Algorithm:```prolog% Define the main predicate for the summarization processsummarize_essay(Essay, Summary) :-    parse_essay(Essay, Parsed),    extract_arguments(Parsed, Arguments),    generate_summary(Arguments, Summary).
In this case, it seems we need to analyze the statements and determine if there is agreement or disagreement based on the subject's intentions and actions. Below is a simplified version of how you might approach this in Prolog:```prolog% Define the facts based on the sentence elementsstatement(1, \"I went for a run\").
Instead of writing a specific Prolog algorithm for \"bnumber\", which is not a well-defined term in your context, I can help you with a simple Prolog program that captures relationships and dependencies among various elements based on your text. Let’s assume \"bnumber\" is meant to represent a concept like \"reasons\" or \"causal relationships\". Here’s a simplified Prolog structure to represent possible relationships established in your sentences:```prolog% Facts representing relationshipscaused_by(cube, squares).
Let's break down the text you've provided into discrete elements and represent them in Prolog. We can identify relationships and facts about the various elements mentioned in your narrative. Here’s an approach to design this:1. **Identify Key Concepts**:    - Endorsement of Nietzsche's brilliance   - Comments by Alexius Meinong   - Preparing to display the genre   - Meaning of \"lineLine Item\"    - Connection of people's ideas with food   - Reading a sutra   - Giving a star to the king   - Acceptance of serotonin from the king   - Love of light   - Actions involving teeth and nuts   - Writing about the concept of \"doubly good\"   - Relationship of stress, illness, and lack of training2. **Define Facts and Rules**:Below is a simple representation in Prolog that captures these ideas:```prolog% Define factsendorsed_nietzsche(brilliance).
Let's create a Prolog program that can represent these relationships. Each sentence can be represented as a fact, and we can define some rules to establish the relationships between different actions or events:```prolog% Facts representing each action and its rationaleaction(preparing_to_clean_desk, empty_shavings, hole_of_pencil_sharpener).
Let's define facts (your sentences) and some rules to transform or process these sentences according to various themes. We'll use predicates to classify and manage the actions expressed in each sentence. Here's a simplified Prolog representation:```prolog% Facts representing the actions and themes from your sentencesaction(deleted_big_ideas, 'I deleted the big ideas from each sentence of the talk').
Let's define some basic facts and relationships in Prolog based on the themes you've suggested:### Prolog Code```prolog% Define actionsaction(bounce_ball, first_position).
Let's frame a simple Prolog program that captures elements of the discussed topics such as \"agents\", \"actions\", \"causal relationships\", and maybe even some homophones/homographs. Here is a basic example:```prolog% Facts representing entities and relationshipsperson(dawkins).
Let's illustrate this as a Prolog program:```prolog% Define the data (your example sentences)line(1, \"I wrote I liked things because\").
Let's outline some possible predicates based on the sentences:1. **added_lambda_module(ALEXIS)**2. **meaning(carryableLine, Meaning)**3. **won_point(universal_winning_statement)**4. **has_positive_reason(Person)**5. **read_marks(Student)**6. **has_feeling(HA)**7. **self_read(AIG)**8. **self_delegated(Distributing, AIG)**9. **prepared_to_cheat_fate(ALEXIS)**10. **using_vocational_information(blog)**11. **swung_on(Third)**Given the nature of the statements, the logic could be structured as follows:```prolog% Define relationshipsadded_lambda_module(alexis).
Let's represent the actions mentioned in your text as facts and relationships in Prolog. Here’s a possible way to represent your statements in Prolog:```prolog% Define actions and relationshipsaction(ate(vegan_cheese)).
Let's represent the key points as Prolog facts and rules:```prolog% Facts representing the actions and reasonsaction(transcript_prepared).
Let's represent the provided statements with appropriate predicates. Here is a possible Prolog representation:```prolog% Facts representing each statementapplication(\"There was another application\").
Let's say you want to represent a structure that contains various concepts related to heart specialists, their reasoning, and their relationships. Here’s how you might initiate a Prolog program to encapsulate some of these ideas:```prolog% Facts about dimensions and their interpretationsdimension(x).
Let's start by encoding the activities as facts and rules in Prolog:```prolog% Factsactivity(mark_theology_essay).
Let’s break it into smaller components related to the roles (like \"pedagogue\", \"doctor\", etc.), actions (like \"examine\", \"write\", \"celebrate\", etc.), and concepts (like \"truth\", \"progress\", etc.). Here’s a potential Prolog representation of some of these ideas:```prolog% Define rolesrole(pedagogue).
Overall, the passage seems to explore themes of communication, work preparedness, and the intersection of personal feelings and professional expectations, albeit in a fragmented and somewhat abstract format. If you need a more specific analysis or connection between the ideas, please provide further context or clarification!","To design a Prolog algorithm based on the narrative you provided, we can break down the statements into a logical structure. The statements include causative relationships and motivations behind actions, which can be represented as predicates in Prolog. For simplicity, let’s define the actions and their motivations as predicates and create rules to facilitate the inferencing of these relations. Here’s a basic outline of how that might look:```prolog% Define predicate relationshipsloves_people(demonstrator).
Overall, the text touches on themes of communication, representation of ideas, meditation on philosophical concepts, emotional labor, and strategies for engaging with complex subjects. If you have more specific questions or need further clarification on any part, feel free to ask!","Based on your question, it seems like you're asking for a Prolog algorithm or representation related to the information provided, specifically focusing on text, speech, and various claims or beliefs. In Prolog, we can represent facts and rules that relate different elements together. Below is a simplified Prolog representation that captures the ideas from your text. If your goal is to create a system that can reason about the statements you've made, we can define a few predicates:```prolog% Factsendorses_conversion_to_speech(subject).
Please let me know if you need a different approach or additional functionality!"],["ALEXIS is a multifaceted project that emphasizes the importance of freedom and creativity, as I explored how C is to D, allowing individuals to reach their goals; I repeatedly documented my observations across various departments, which highlighted the role of the master in validating human judgment; my findings also led to the discovery of the seenas version algorithm, and I observed that recordings had greater efficacy in theatre studies; additionally, I saw confectioners meticulously preparing each section of a lolly snake, and I participated in community outreach by visiting people's houses with a security guard to teach meditation.","It seems you're looking for a way to express a series of structured statements in Prolog, possibly to describe an algorithm or process related to freedom and creativity, among other topics you mentioned. Below, I will structure the information you've provided into a series of Prolog facts and rules that might represent your summary:```prolog% Facts representing the key points in the summarytopic(freedom_creativity).
Prolog is a logic programming language, and we can model the actions, their outcomes, and their relationships using facts and rules. Below, I've created a simplistic Prolog representation for the given text:```prolog% Facts representing actions and objectsaction(preparations, million_dollars).
Prolog is a logical programming language used for AI and computational linguistics. To create a simple Prolog representation based on your statements, we can define facts and rules that relate to your narrative. Below is an example algorithm that captures some aspects of your text:```prolog% Define facts for actions and subjectsaction(jump_over, sheep).
Prolog is particularly good at representing relationships and making inferences based on logical rules. To construct an algorithm in Prolog that might relate to your observations, we can create a foundational structure based on the components you mention. Below is a simplified and abstract representation of what you might have in mind:### Prolog Representation```prolog% Define facts based on your observationsparent_testing_physical_state(parent1, partner1).
Since Prolog excels at handling relationships and logical constructs, let’s try to distill some of the ideas into a Prolog-like format. Below, I've drafted a potential Prolog representation that captures some of the relationships and actions described in your text. ```prolog% Factsamalgam(mixture).
Since a direct mapping from your text to a Prolog program isn't straightforward, we'll create a simplified version that utilizes some key concepts such as preparation, comments on medicine, robot construction, and philosophical reflections:```prolog% Define some facts based on your narrative% Agents and their actionsaction(prepared_to_use_knowledge).
Since your text refers to subjects, actions, and conditions, we can create a simple framework for understanding actions and characters in a Prolog context. Below is an example of how you might structure the information in Prolog:```prolog% Factshuman(human_1).
The constructed Prolog code is a simplified representation of the complex narrative you provided, and serves as an illustration of how logic programming can express relationships and operations based on the themes presented. If you wish to further elaborate or specify particular aspects of the narrative into logical representations, I can help refine this further!"],["Martha Nussbaum's anticipated comments on the Medicine essays were summarized in a press release I wrote, emphasizing the importance of collaboration and preparation, as I delegated tasks and sought resources, which ultimately led to a proactive approach in my own professional development, while a neuroscientist measured students' achievement levels over time through a mathematics test.","It seems like you're asking for a Prolog algorithm based on a narrative involving various tasks and activities, with a focus on organization, delegation, and preparation. While you haven't provided specific logical relations or rules that would translate directly into Prolog facts and predicates, I can help create a generalized Prolog program structure that reflects the themes of your narrative. Here's an example of how you might structure this in Prolog:```prolog% Facts about people and their actionsperson(martha_nussbaum).
The goal of this Prolog algorithm could be to identify the statements' order, their relationships, and any possible themes or meanings that emerge from them. Below is an example of how you might structure such a program:### Prolog Code```prolog% Define the main facts regarding the DION statements and their meaningsstatement(1, 'I prepared to listen to combinations of music.').
The input statements seem to follow a pattern of reasonings where one statement seems to lead to another. In Prolog, we can represent this through facts and rules. Here’s how you might structure this in Prolog:```prolog% Facts based on the statements providedhas_grade(professor, a).
The key elements from your text include programming tasks, testing, saving data, meditating, and using different strategies to promote transformation or achieve goals (such as love or education). Here’s a basic structure you can use to represent these actions in Prolog, with simple facts and rules:```prolog% Facts representing actions and their relationshipswrote(gitL).
The narrative can be transformed into a series of facts that represent actions, motivations, and relationships. Here’s how it can be modeled:```prolog% Define the main actoractor(john).
The provided statements can be abstracted into a set of rules/facts. Here's how you might represent it:```prolog% Facts representing actions and their reasonsaction(heat_sausage_in_pan, over_fire).
The structure can be viewed in terms of facts and rules demonstrating associations, agreements, and actions taken by various subjects (like the game player or visitor to the fun park). Below is a simplified version of a Prolog program that tries to represent the narrative you provided. Note that it uses entities such as 'Person', 'Game', 'Visitor', etc., along with recursive structures based on how you addressed the statements:```prolog% Facts representing actions and associations% Statements about agreement and disagreementagreed(Person, Action) :- action(Action), remember(Action, Person).
These points indicate a mixture of themes like parenting, health, communication, education, and perhaps animation or interactive media, but without clear context, it’s challenging to extract a coherent narrative or meaning from them. Could you clarify your request further or indicate if you're looking for a specific type of analysis or summary?","Creating a Prolog algorithm for the given text is challenging because the content appears to be a narrative with multiple disconnected ideas rather than a structured problem. However, we can extract some logical components from the text and model a simple Prolog program around them. Here’s an attempt to create a Prolog representation of some of the statements presented:```prolog% Factsfather_prepares_to_kiss_baby(Baby) :-    format('Father prepares to kiss ~w good night.', [Baby]).
This Prolog code illustrates a logical representation of the relationships and actions described in your original text. You could extend the predicates and rules further based on more detailed relationships or criteria you might have."],["In an intricate interplay of consciousness and matter, I observed how the states of people around the meditator shifted in emotional resonance, reflecting their inner turmoil and tranquility, while simultaneously noting the subtle transformations in the physical states of matter, such as the warmth of the sunlight causing the air to waver and the cool water to ripple, weaving a complex tapestry of experience and perception.","Creating a Prolog algorithm based on your input involves organizing the ideas you've provided into a more structured format. To convert your text into logical predicates, we should first identify the relationships and actions described. Below is an example of how you might represent these ideas in Prolog:```prolog% Define some key predicates based on the statements providedobserved(robot, recognition).
This approach offers a glimpse into how one might start to formalize the relationships and actions recorded in the narrative into a logical framework using Prolog."],["It seems like you are looking for a complex sentence that combines various elements from the provided phrases. Here's an attempt to weave them together into a single sentence:\"I prepared to thank the religious leader for inspiring me to envision a fun future, while the scientist illustrated a diagram of the apparatus before licking a small then large part of the lolly, as I composed an argument for A and B regarding medical training; meanwhile, the train passenger eagerly anticipated eating their sandwich, which I facilitated by opening a peace business, as the club manager carefully swallowed the lozenge before descending the stairs, prompting ALEXIS to remind that the subject should verify that the object is a member of the set, before he strategically placed his tongue to touch both ends of the inner edge.\"This sentence is quite complex, combining all the ideas you provided while maintaining grammatical structure. Let me know if you need any further clarification or a different approach!","The text you've provided appears to be a complex and abstract narrative rather than a clear problem statement or algorithms traditionally represented in Prolog. However, if you want to implement a Prolog program that processes a set of actions or relations based on the ideas presented, we could structure it around the concepts of \"preparing,\" \"thanking,\" \"eating,\" and \"checking.\"Here's a basic outline of how you might approach this in Prolog, using predicates to define actions and relations:```prolog% Defining some basic facts and rules% Action factsaction(thank(religious_leader)).
This basic structure serves as a starting point. You can expand and refine your predicates and facts based on more specific requirements or deeper context from your narrative."],["It seems like you're looking for a way to combine several ideas into a single cohesive sentence. Here's an attempt:\"I walked north to shield the employees from the sun, and I verified the paraphrasing because they organized payments to Lucian Academy with either money or vouchers; this initiative benefitted the world, and I recognized that more scene versions were needed, so I calculated how long it would take to consume the store of apples while following the predicates in order; finally, I observed the butterfly fluttering.\"Feel free to adjust any part of the sentence to better fit your needs!","In Prolog, we can design a simple rule-based algorithm to handle the statements you've provided. While Prolog is commonly used for logic programming and knowledge representation, we can build a basic approach to represent the causality and structure of your sentences. Here's an example of how each of your sentences can be represented as facts and rules in Prolog:```prolog% Facts representing actions and their reasonsaction(walking_north, reason(prepared_to_shield(employees, sun))).
This code is meant to be a starting point; depending on more specific nuances in your domain, you might need to adjust or expand upon these predicates."],["It seems like you're constructing a series of interconnected thoughts or sentences that delve into various topics, including driving, communication at a high level, peace efforts, algorithms, and meditation. To help with clarity, here's a synthesis of your ideas into a single cohesive statement:\"I prepared to speak with heads of state about the world’s issues while driving in the car, and I checked the assignment closely to ensure I was well-prepared, because I believed that more was possible in the future; meanwhile, I noticed the pipsqueaks around me, and in a different context, Maharishi was preparing to create peace on Earth, which mirrored my own intention to find relaxation by meditating on the Green Sutra and writing about medicine, as I methodically added elements to my algorithm one at a time to test their effectiveness, all the while seeking to discover the phylogenetic tree branches that I wanted, for in this way I envisioned a more harmonious existence.\"If you meant to express or convey something different, feel free to clarify, and I'm happy to assist further!","It seems like you are asking for a Prolog representation of a series of statements that all have \"because\" clauses, which indicate reasoning or justification for an action or thought. In Prolog, we can represent these statements as facts or rules that can be queried. Here’s a Prolog representation of the sentences you’ve provided, structured as facts:```prolog% Facts representing each statement with a reasonaction(drive_in_car).
This code provides a logical structure to your brief, though further details can be fleshed out depending on your specific needs for variables, data structures, or additional functionalities."],["He did this by sitting on a pious seat of right because I did this by resting all night because I prepared to like everyone in sight because then I ran the program because first I used my Medicine degree to maintain perfect psychiatric health because I wrote a review on my own topic because he did this by sliding down the slide backwards because I found the change within the line because I prepared to kiss the Head of Philosophy at University on the cheek because first he looked at the slide using the microscope slide.","Creating a Prolog algorithm involves expressing logical relationships and rules that can represent the kind of reasoning described in your statement. The analysis of the statements suggests a hierarchical structure of actions or motivations that lead to the next event. Given the narrative you've provided, we can represent actions and their reasons in a Prolog-like structure. Here’s an example of how to represent this using facts and rules:```prolog% Define the actions and their reasons using factsaction(sit_on_pious_seat, he).
This example is quite simplified and may need adjustments if you want to include more complexity or conditions based on your original narrative."],["It seems like you have a series of statements that describe various actions and observations, possibly for a creative writing exercise. However, you are requesting to find \"its use in one sentence.\" To clarify, if you are looking for a cohesive way to connect these statements or to extract a singular idea from them, here is an attempt:\"In an effort to make things better, I prepared to observe and reflect on various experiences—like the child's journey with the character, the doctor's meal choice, and the design of open spaces—ultimately culminating in my aspiration to attract someone special through the joyful rhythm of the jitterbug.\"If you had something different in mind or need further assistance, please let me know!","The text you provided seems to describe a series of connections or causal relationships between different activities or observations, rather than a strictly formulated problem or algorithm to solve. However, to turn this into a Prolog-like structure, we can represent the relationships and observations as facts and rules. Below is a basic representation of the content in Prolog syntax:```prolog% Factsprepared_to_improve(Actor, Activity) :-    Actor = 'Me',    Activity = 'make it all better again'.
This is a basic framework. You can expand it by adding more causal rules or making the model more complex, depending on your needs. If you have further specifications or if you're looking for something different, please provide additional context or clarify your request!"],["It seems like you're asking for a way to connect various fragments you've provided into a coherent sentence. Here’s one possible synthesis of those ideas:\"I verified the identity of the pill by reading its label, prepared a job description for the programmer position, acknowledged his sensitive stomach, explored critical thinking by converting argument structures into argument maps, tested whether fruit was present on the other side of the store using a mirror, reflected on my observations of you, synthesized the values we discussed, practiced the Green Sutra, and ultimately achieved success.\" If you meant something different or if you want to clarify any specific part, please let me know!","It seems you are interested in translating a series of complex statements into a Prolog algorithm format. Prolog is a logic programming language associated with artificial intelligence and computational linguistics. Given the narrative you've provided, I will create a Prolog representation that captures the essence of the tasks or observations mentioned in a structured manner. Below is a simple representation that outlines facts and relationships based on your statements:```prolog% Define facts based on the provided narrativeverified(Reader, Pill) :-     read_face(Pill, Reader).
This is a simple framework that organizes the provided narrative into a Prolog-compatible structure. If you'd like to expand on this further or incorporate specific conditions or actions, feel free to ask!"],["The meaning of the lines you've provided seems to revolve around an exploration or journey, possibly metaphorical, where preparations and observations lead to revelations and safety. Here's a concise summary based on the elements you've shared:\"After carefully preparing and testing my approach, I navigated through challenges, ultimately ensuring everyone's safety while uncovering meaningful insights from each interaction.\"","Creating a Prolog algorithm based on your narrative requires extracting structured information and logical relationships from the statements you've provided. It seems that your input consists of various statements that could represent conditions, actions, and observations you encountered. Here’s a way to organize this as a Prolog program:```prolog% Facts based on the narrativeset_timer(sand_timer).
This representation allows for querying and reasoning about interactions based on the complex narrative you provided. You may adjust the predicates and rules further to more accurately reflect specific nuances as needed."],["The passage you've provided appears to be a collection of statements or fragments that express a series of events and thoughts. It reads like a stream-of-consciousness narrative. Let me help you structure it or clarify its different components. Is there a specific way you'd like to break down or analyze this text? For example, are you looking for a summary, an interpretation, or perhaps a completion of the ideas presented in a coherent fashion? Let me know how you'd like to proceed!","Creating a Prolog algorithm involves defining facts and rules in Prolog syntax that capture the relationships present in your text. The text appears somewhat abstract and poetic, but we can distill it into a series of interrelated statements with certain logical implications. Below is an illustrative example of how you might represent the statements in Prolog, creating rules and relations that capture potentially meaningful connections between the various components in the text:```prolog% Factscrew_member(h).
This structure helps to clarify your original thoughts while creating a coherent flow from one point to the next. Would you like to expand on any particular section or clarify further?","To express the narrative you've shared in Prolog, we can frame it with a focus on relationships and causal reasoning. Below is a simple representation of your ideas as Prolog facts and rules. ```prolog% Factswrote_about(as).
This template can be expanded upon and refined based on specific details and requirements of your algorithm, as well as what specific relationships or rules you'd like to implement. If you have more specific requirements or a clearer context for which you want the Prolog code, feel free to provide that, and I'll be happy to adjust or elaborate further!"],["It seems you are asking for a brief summary of an essay that covers various disjointed thoughts and ideas, touching on themes of education, personal development, and perhaps some imaginative concepts like time travel. Based on the fragmented content you provided, here’s a possible one-sentence summary:\"This essay explores the interconnectedness of knowledge acquisition, personal growth, and the imaginative possibilities of time travel, while highlighting the importance of precise research and understanding in education.\"","To create a Prolog algorithm that captures the reasoning and logical structure underlying your text, we can break down the components of the reasoning and create predicates that represent these ideas, actions, and relationships. Here is a simplified Prolog representation:```prolog% Define main predicates for the reasoning processreasoning_details(dions_subject, vitamins_and_minerals_correct_doses).
To express these ideas in Prolog, I will form a set of rules based on the structure of each sentence. Each sentence can be represented as a rule with some predicates that define the relationship between different actions and motivations. Below is a basic example of how you could express the ideas in Prolog:```prolog% Define actions and motivationsexpressed_conclusion(Clear) :- Clear = 'expressed the conclusion in a clear manner'.
To help clarify or expand on these points, could you please provide more context or specific questions? For example, are you looking for a discussion on any of these themes, or do you want assistance in shaping these thoughts into a coherent narrative or argument?","Creating a Prolog algorithm to capture the essence and logic of your statement is a challenging task, as the text provided blends several ideas without a clear structure. However, we can break down your narrative into logical relationships and create predicates accordingly. Here’s a possible Prolog representation of the ideas you expressed. This representation highlights the relationships, actions, and conclusions you made in your narrative:```prolog% Factsoptionally_free(short_courses). mashed_with_fork_and_licked(X) :- prepared(X), X = fork.
To help clarify or make sense of this, I could offer a brief breakdown of each part or explain how these different elements might connect in a narrative or thematic way. Would you like me to summarize or analyze these ideas further?","Creating a Prolog algorithm to represent the sequence of actions described in your narrative involves defining facts and rules that follow the logical structure of the statements. Each action leads to the next, creating a chain or sequence. Here is how you might represent this in Prolog:```prolog% Facts representing each step in the narrativeprepared_to_participate(community_recreation).
To help you, I will suggest a sample Prolog representation based on the themes in your request. We'll create predicates that represent subjects, their desires, actions, and relationships between objects. Here is a simplified version of what such a Prolog representation might look like:```prolog% Define subjectssubject(alexis).
To provide a basic Prolog algorithm for pouring soup based on the context you've provided, let’s define a simple scenario in which someone pours soup into a bowl. I'll incorporate some elements of reasoning as you suggested. Here's an example Prolog program that captures a basic algorithm for pouring soup:```prolog% Define the initial stateinitial_state(kitchen).
To represent the essence of your statement in Prolog, we need to break down the narrative into facts and rules. Here's an attempt to create a Prolog-style representation that captures some of the themes mentioned, though it may not cover the full depth of your statement:```prolog% Define factsperson(alexius_meinong).
To represent this in Prolog, we can define a series of predicates that express these relationships. Here’s how you might define these in Prolog:```prolog% Define the relationships in Prolog% The main eventevent(pass_in_one_unit_through_computer) :-     because(gave_children_academic_As).
To see this in action, you could load this Prolog code into a Prolog interpreter and run the different predicates to simulate your reflections and preparations."],["I paid a recruiter to send students to Lucian Academy, ensuring that neither had been reused from a previous assignment, while I prepared to relate metaphysics to pedagogy by making sure the child was equipped for study; in this way, I aimed to be recommended to a friend by stating that the computational algorithm helped with conception medicine, and first I offered the money as the fairy godmother prepared to find the present, as the computational Hegelian programmed an example about intersubjectivity by pretending to fly home like a bird.","Creating a Prolog program based on your elaborate statement is quite an intricate task, mainly because Prolog is primarily used for logic and inference rather than direct narrative processing. However, we can structure the information suggestively into facts and rules that represent the relationships and events you have described. Let's break down your input into components and transform it into some logical constructs in Prolog. Below is a simplified attempt to capture the essence of your narrative through Prolog predicates:```prolog% Factsrecruiter_paid(recruiter).
To use this code, you would load it into a Prolog interpreter and then you can query it, for example, `print_related(1)` to see facts that are related to fact 1.
To utilize this Prolog code, you can run it in a Prolog interpreter (like SWI-Prolog), and then you can ask queries such as:```prolog?- success_in_event(HeadOfState, Event).
Ultimately, first, I peeled off the brain sticker from the backing sheet, a metaphor for stripping away preconceived notions to reveal the raw potential within each student. In this journey as a spiritual pedagogy helper, the goal is to nurture curiosity, foster creativity, and support learners as they embark on their educational adventures.","Certainly! In Prolog, we can approach the task of creating a text based on your request using predicates to represent the relationships between the different components of the text. Below is a simple representation of the concepts involved:```prolog% Define some basic factsreasoning(A) :-    A = [        \"As an A is a set of reasonings or ideas which in this case contribute to establishing initial knowledge.\",        \"Preparing for knowledge requested by the student from the education system.\"    ].
We can identify some key components in your narrative, such as 'person', 'event', 'location', and rationale behind actions. Below is a simplified Prolog representation:```prolog% Facts representing personsperson(dion).
We can represent the key ideas in the statements as Prolog facts and create rules to infer relationships. Below is an example of how you might structure this in Prolog:```prolog% Facts about actions and subjectsaction(lift_paint_canister, alexis).
We will define relationships between encapsulated actions, reasons, and their interdependencies. Here's how you might model the given statements using Prolog syntax:```prolog% Define actionsaction(smiled).
We'll define a few predicates based on the themes of feeding, checking, connecting, learning, protecting, and helping. Here's an example Prolog representation:```prolog% Define actions and relationships% Feeding actionfeeds(bird, watermelon) :-     prepare(watermelon),        cut_into_smaller_pieces(watermelon).
We'll define predicates that represent actions and conditions. Each action can be represented as a fact, and the relationships between actions can be represented as rules. Here’s a basic structure for your Prolog program:```prolog% Define facts for actions% Facts representing the individual actionsaction(polish_knife, butler).
While Prolog is not typically used for natural language processing or generation in a straightforward way, it can model the relationships and infer conclusions based on rules. Here is a simplified example:```prolog% Define the relationships and actionshappy(Customer) :- skiing(Customer).
You can expand on this further based on additional requirements or relationships you want to capture from your narrative. Prolog is very flexible for representing knowledge in the form of relationships and rules."],["ALEXIS is a complex, multifaceted concept that blends various ideas, including algorithmic processes, improvements in reasoning and testing methods, and even references to philosophical comments, all tied together with a personal narrative of actions taken in relation to these themes.","The text you provided seems to be a somewhat abstract, fragmented set of statements resembling a combination of reasoning, dependencies, and causations, possibly structured as a logical argument or program flow. Creating a Prolog algorithm that reflects this kind of reasoning would involve defining relationships and rules that appropriately outline these causal links. Below is a simple Prolog representation that captures some of the relationships indicated:```prolog% Factsreasoning(verify_enough_new_breasonings, subject).
You can expand upon this foundational structure to incorporate more details or additional interactions based on your specific requirements regarding the logic and relationships between the statements. Adjust it further to capture nuances and specific operations tied to the context you're exploring."],["It seems like you're expressing a complex stream of thoughts that intertwine various concepts, including love for God, pedagogy, commentary from philosophers, and a unique exploration of ideas through illustrations and algorithms. Here’s an attempt to condense and rephrase your statement into a single coherent sentence:\"I prepared a press release regarding Michel Onfray's potential comments on pedagogy, integrating perspectives from cosmology and examining the void, while using text-to-speech algorithms to analyze Noam Chomsky's and Alexius Meinong's ideas, ultimately reflecting on the interplay of love for God and the discovery experienced with each student, illustrated through my hand-drawn artwork and variations of rock-paper-scissors.\"If you have specific elements or ideas you’d like to expand on or clarify, please let me know!","To create a Prolog algorithm that expresses the logical flow of your description, we need to break down your narrative into key components (facts and rules). Your description includes various elements, like commentary from Michel Onfray, discussions about pedagogy, illustrations, debates about normality, client discoveries, and more. Here's how we might represent this in Prolog:```prolog% Facts representing various actions and commentscomment(michel_onfray, pedagogy_indicators).
You can query the program with something like `?- action(happiness).` to check for all components contributing to that action. Remember that Prolog doesn't inherently structure like human language; thus, this representation is a way to encapsulate the structured thoughts into logical relations."],["Your statement seems to convey a sequence of thoughts that group various concepts, including income, algorithms, reasoning, relationships, health, psychology, meditation, sentience, and breath. Here's a condensed interpretation:\"I calculated my monthly income using reasoning to assess whether an algorithm represents certain concepts. The robot's design stemmed from this reasoning algorithm. I aligned my choices with yours while sharing moments, like enjoying a brazil nut. My approach to mental health included sharing an uplifting song and pursuing a degree on the subject, despite the doctor being a psychotherapist rather than a medical doctor. I engaged in meditation, focusing on mastering the balance of inflow and outflow, all with the intent of achieving sentience, beginning with a shared breath.\"If you would like to expand or clarify any specific part, feel free to share!","The text you provided consists of a series of complex statements where each sentence can imply various relationships or motives. To turn this into a Prolog representation, we will focus on capturing the relationships and reasoning implied in your sentences through propositional logic.
You can query these predicates to explore the relationships and actions defined in your source material. For instance, querying `?- nested_action(ActionChain).` will check if all these actions can be accounted for under the defined relationships. ### Further Enhancements:- You can add more complex relationships and actions by expanding the definitions of subjects, actions, reasons, and their interconnections based on the needs of your task.
You can run queries against this knowledge base to explore the relationships and see how certain actions or concepts relate to one another. For example:```prolog?- climbing_ladder(person).
You would need to run this Prolog program in an environment that supports it, like SWI-Prolog, and you can modify or expand it based on further requirements or details from your narrative."],["It seems you're asking for a single sentence that conveys making Maid Marion's day brighter, while also weaving together various elements from the text you provided. Here’s an attempt:\"After confidently placing the tyre on the axle and joyfully jumping around in saltaté, I illuminated Maid Marion’s day with a warm smile and heartfelt conversation that connected her with the positive energy of the moment.\" Let me know if you need further adjustments or another approach!","Creating a Prolog algorithm to represent the complex relationships and causalities in the narrative you've provided is a challenging task. However, I can certainly help you structure it in a logical way, though it should be noted that Prolog is more about facts and relationships rather than procedural algorithms. Here’s a Prolog representation that captures some aspects of the narrative:```prolog% Factsevent(place_tyres(Second)).
```### Explanation of the Code:1. **Facts**: Each fact represents a piece of knowledge derived from your narrative (e.g., `simulated_intelligence(si)` states SI exists). 2. **Rules**: These are logical implications, such as `wrote(finding_result, idea)`. 3. **Conditions and Length Checking**: The `contains_line` rule checks if a given line meets a specified length (like `hs_length`).
```### Explanation:- **Subjects and Actions**: We define subjects and their actions using facts. For example, `did(dion, played_music).` describes that Dion played music.- **Speech Relationships**: Some simple logical structures and rules are defined to determine relationships between text and speech. - **Homophones and Homographs**: Basic rules could be developed to define the properties of homophones and homographs.
```### Explanation:1. **Facts**: These are simple assertions based on your statements. For example, `prepared_to_sing(my_case).` denotes that you are prepared to sing your case.
```**Explanation:**1. **Facts**: The statements about what the entities did are represented as facts. For example, `prepared_to_participate(community_recreation).` denotes that there was preparation to participate.
```prolog% A person can be a founder if they are critical of blockednesscan_be_founder(Person) :-     person(Person),    critical_of(blockedness).
```prolog% A rule to confirm if an action led to the observationled_to(Action, Observation) :-    action(Action),    observation(Observation),    causes(Action, Observation).
```prolog% Actions takenaction(wrote_breasonings).
```prolog% Breathing related actionsaction(breathing_in, \"taking care of thoughts in meditation\").action(breathing_out, \"stress relief\").
```prolog% Causal relationshipsdid_this(crossed_creek, __).
```prolog% Define a relationship between a reasoning subject and its contexthas_reasoning(Subject, Reason) :- reasoning(Subject, Reason).
```prolog% Define a sample list of statements (breasonings)breasonings([    \"Third he emptied it into the sink\",    \"I prepared to find the general interpretation of the direction essay\",    \"Rural area residents wrote pedagogies\",    \"I prepared to count the breasonings using Prolog\",    \"the baby is in one's spiritual womb\",    \"The marine biologist put a strut in the whales mouth\",    \"He identified the mental nature of the question\",    \"Second he pushed his tongue towards the centre of the inner edge\"]).
```prolog% Define actionsaction(eat_rice_ball) :- prepared(eat_rice_ball, rice_ball).
```prolog% Define actionsaction(third, placed_gel).
```prolog% Define actions and reasonsaction(write_reason, \"Second wrote down the reason for it\", \"because\").
```prolog% Define actions and relationships based on your textread(thoroughly). % He read thoroughlywrote_reviews(2). % I wrote two reviewsbiochemist_prepared(ModelMolecule) :-    test_fruit(Mirror).
```prolog% Define actions and statesaction(find_temperature).
```prolog% Define actions and their relationshipsaction(go_to_sleep, third).
```prolog% Define actions and their relationshipsaction(moved_tongue).
```prolog% Define actions as factsaction(look_through_peephole).
```prolog% Define actions based on given descriptions% Sample factssitting_on_seat(X) :- action(X, 'He did this by sitting on the seat.').
```prolog% Define areas of study for a pedagoguearea_of_study(meditation).
```prolog% Define basic factsread_encyclopedia(academy).
```prolog% Define basic factstask(washed_mouth).
```prolog% Define basic facts based on the narrativeaction(preparation_for_essay).
```prolog% Define constants for ease of referenceconst(address1).
```prolog% Define factslistening(keyhole, he).
```prolog% Define factsnonprofit_organization(my_organization).
```prolog% Define facts about actionsaction(play_strings, \"Third I played strings\").
```prolog% Define facts based on actions describedaction(wash_colander).
```prolog% Define facts based on the statements providedstatement(1, \"I noticed the bees falling off me because\").
```prolog% Define facts related to food and healthis_vegan(rissole).
```prolog% Define facts related to tasks and actionstask_requires(pedagogue, reasoning).
```prolog% Define facts related to the subjects and their interestssetting_time(setting_time(dinner)).
```prolog% Define important conceptsfounder(dion).
```prolog% Define items and their propertiesitem(meditation).
```prolog% Define main actions and interactions as facts or ruleshugged(you).
```prolog% Define main actions and their reasoning processesaction(prepare_to_eat_with_chopsticks).
```prolog% Define relationships and conceptsphilosopher(nietzsche).
```prolog% Define some base factsmagnet(north_pole).
```prolog% Define some basic causal rulescauses(halfopen_umbrella, sudden_rain).
```prolog% Define some facts about subjects, experiences, and objectssubject(alexis).
```prolog% Define the actions as factsaction(look_for_table_cell).
```prolog% Define the actions based on your narrativeaction(prepared_to_say_bellissimo).
```prolog% Define the adjectives that describe competenciesadjective_competency(carryable).
```prolog% Define the core facts based on the statementsstarted_from(base_of_finger).
```prolog% Define the main concepts and their implicationsimplies(knew_about(implies), wrote(natural_phenomenon)).
```prolog% Define the main entry pointprocess_image_description(Description) :-    split_string(Description, \"\\", \"\", Lines),   % Split the description into lines    find_firstline(Lines, Firstline),             % Find the first line    find_breasonings(Lines, Breasonings),         % Extract breasonings from subsequent lines    print_image_analysis(Firstline, Breasonings). % Print the analysis% Finds the first line of the image descriptionfind_firstline([Firstline|_], Firstline).
```prolog% Define the main point won statementwon_point_with_universal_winning_statement :-    inspired_survival(house_of_rhetoric),    write('I won the point with the universal winning statement because the house of rhetoric inspired its survival.'), nl,    wrote_comments_on_lucianpedia(richard_rorty, medicine),    write('I did this by writing Richard Rorty''s probable comments on Medicine on Lucianpedia because '), nl,    counted_starfish_arms(richard_rorty),    write('He did this by counting the starfish''s arms because '), nl,    wrote_about(elderberry),    write('First I wrote about the elderberry because '), nl,    knew_about(plus),    write('I knew about plus because '), nl,    read_book(procrastinator),    write('First I read \"I the Procrastinator\" about planning time because '), nl,    included_theme(medicine),    write('It includes a theme of medicine which greatly builds confidence in the meditator and helps prevent mental breakdowns because '), nl,    prepared_to_write(plus_sign, you),    write('In this way I prepared to write a plus sign about you by writing Richard Rorty''s probable comments on the Pedagogy section on Lucianpedia.').
```prolog% Define the structure for actions and reasonsaction('helped_write_philosophies', 'I helped you write philosophies').
```prolog% Define what constitutes a short handleshort_handle(h).
```prolog% Defining factssafe_passage(is_safe).
```prolog% Defining some basic predicates% premise(PremiseNumber, Statement)premise(1, 'The creation and performance of the helped pedagogy AIG is stronger than seeing and copying it.').
```prolog% Defining subjectssubject(dion).
```prolog% Definitions of jam as pathsjam(strawberry, left).
```prolog% Example queries% ?- prepared_to_receive_payment(politics).
```prolog% Fact definitionsstudent(john). student(mary).
```prolog% Facts% Preferencesdoes_not_like(vegan_meat).does_not_like(humanlikeness).
```prolog% Factsaction(writing).
```prolog% Factscooked(spoon).touched_with_gloves(skillet).
```prolog% Factsdoctor_quality(better).
```prolog% Factshome_pride(her_home).pedagogue_positive_function(pedagogue).
```prolog% Factsobserved(ledge).                   % He found a ledgeobserved(yantara_pattern).         % Observed the yantra patternpersonal_goal(warm_space).         % Desires warm spaceaction(planning_supply_breasonings).  % Planning supply of reasoningssafety(concerned_with_sun).        % Concern about sun safetyopened(carton_of_milk).            % Opened the carton of milk% Rulesaction_for_safety(X) :- observed(X), safety(concerned_with_sun).reasoning_in_rel_to_sun :- action(planning_supply_breasonings), personal_goal(warm_space).
```prolog% Factsperformed_action(hose_head, person).
```prolog% Factsprepared_to_walk_around_hill(true).
```prolog% Factsprepared_to_write(essay).found_positive_functional_way(positive_functional).
```prolog% Factsprepares_for(john, music, famous).
```prolog% Factssubject(dion).
```prolog% Factstopic(lucianic_meditation).
```prolog% Factstraining_in_medicine_argument(a, b).
```prolog% Factswrote_on(daoism) :- compared_ideas.
```prolog% Facts about political preparation and paymentprepared_to_receive_payment(politics).
```prolog% Facts about students and their perspectivesstudent(john).
```prolog% Facts and Observationsobservation(quantum_computer, can_compute_instantly).
```prolog% Facts and relationships based on your statements% Eye contactlooks_at(left_eye, person, me).
```prolog% Facts based on the narrativemetres_wide(lane, X) :- X is 3.       % Example: lane is 3 metres wide (just an arbitrary width)days_of_experimentation(30).           % Example: repeated for 30 daysperson_behind_door(clothes).           % Assuming there's a person with clothes behind the doorsoftware_compatibility(mac).           % Compatible with Macsoftware_compatibility(windows).       % Compatible with Windowssoftware_compatibility(linux).         % Compatible with Linuxlight_part(mind_reading).              % Lit part found according to mind readinghealth_strategy(dry_nose).             % Strategy for being healthy by maintaining a dry noseexpression_of_love(show_love).         % Showing love expressed% Rules derived from factsgood_logical_synthesis(Algorithm) :-    machine_learning(Algorithm),    argument_map(Algorithm).
```prolog% Facts based on the provided statementswatched_action(author('he'), action('write_subject', 'ontologised_professional_life')).
```prolog% Facts based on the sentenceslikes(budgerigar).
```prolog% Facts based on the statementsdug_flower_bed(old_man).
```prolog% Facts based on your sentencesreplicated_spacecraft(Yes).
```prolog% Facts defining roles and relationshipsrole(playwright, vocational_theater_studies_diploma).
```prolog% Facts representing actions and their purposesaction(remove_carrageenan(ice_cream), purpose(liking_top_half(lollipop))).
```prolog% Facts representing actions or propositionsendorsed(local_products).
```prolog% Facts representing different actions and observationsaction(diagonally_lied_across_bed).
```prolog% Facts representing eventsevent(iced_cake).
```prolog% Facts representing individual statementspreparation(download_information, thought, sensory_input).
```prolog% Facts: Define actions and their relationships% The format is action(Who, What, Reason)action(alexis, write_topic(halides), 'to prepare for a discussion').
```prolog% Knowledge Base% Action / Reasoning entriesaction(repeat_reasonings, jacqueline, 'God', 'Primary text entries').
```prolog% Knowledge Base% Conceptsconcepts(gay_thought).
```prolog% Query to check reasoning for a specific subject?- has_reasoning(husband, Reason).
```prolog% Recursion for remembering a pointremember(Point) :-     previous_point(KnownPoint),    remember(KnownPoint),     assert(remembered_point(Point)).
```prolog% Rule to find out what actions relate to a specific reasonactions_related_to_reason(Reason, Action) :-    reason(Action, Reason).
```prolog% Rule to infer preparation for debate based on writing press releasepreparing_to_debate(Subject) :-    action(write_press_release, Subject),    comment(_, _, Subject).
```prolog% Subjectssubject(alexis).
```prolog?- can_be_founder(dion).
```prolog?- event(X).
```prolog?- mindful_action(Thoughts, Action).
```prologkey_idea('Drinking the soup').
```prologstatement(1, 'I took the AIG because ...').
acceptable_edge_touch :-    action(calculating(edge_of(car), edge_of(lane))).dabbling_with_paints :-    action(preparing(dabbling(paints), adding(milk, cake))),    subject(alexis).
achieve_happiness :-    prepared_to_be_happy(yes).
action(accept_reward, Subject, Reason) :-     Reason = 'the subject accepted the reward because'.
action(add_to_algorithm).
action(alexis, observed, future_professor_write_books).
action(appearing_as_home_universe, simulant).
action(ask_for_hug).
action(breason_out_list, pedagogue, 'Assessment').
action(calculated_results, 'First I calculated the results of the brackets').
action(calculating_time_difference, solid_liquid, same_type).
action(check_assignment).
action(claiming_rod, conceal_coit, _).
action(clarify, Subject, Reason) :-     Reason = 'more data was needed to clarify the algorithm type required and sort out nonmonotonicities exceptions because'.
action(confirm_primary) :-    justification(confirm_text).action(like_determinism) :-    justification(preference(determism, luck)).
action(connect_universe).
action(copywritten).
action(detect_martha_nussbaum, maharishi).
action(determine_pedagogy_aigs, self_determined).
action(did_this, sleeping_under_umbrella, 'to generate algorithms').
action(disseminate_atom, maharishi).
action(dribble_circle_of_paint, maharishi).
action(drop, Subject, Reason) :-     Reason = 'a droplet of water onto this section because'.
action(find_date_time_of_call, dion).
action(find_medicine_works, medicine, 'Works').
action(find_person, _, _).
action(help) :-    head_of_state(prepared_to_help).% Queries% Use these to interact with the program% ?- action(teaching).
action(helping_world, _, _).rationale(helping_world, why, 'to foster understanding and improvement').
action(improvement) :-    continuously_improving(new_content).
action(include, Subject, Reason) :-     Reason = 'the subject should include as in each book'.% Define how actions are derivedderive_action(Action, Subject, Reason) :-    action(Action, Subject, Reason).
action(interface_with_puzzle, john) :-    reason(because, 'I interfaced with the puzzle').
action(invite_companies, power_companies_with_lucianic_meditation).
action(learning_about_minus, _, _).
action(leave_hansom_cab, after_arrival).
action(lick_inner_slice_apple, prepare_to_dig).
action(lift_object_stably, dion).
action(listening_to_mother, repeat_statements, _).
action(love) :-    prepared_to_love(you).
action(love_family_member, maharishi).
action(maharishi_prepare_peace).reason(maharishi_prepare_peace, 'Maharishi prepared to create peace on Earth').
action(measure_temperature, by_pool).
action(measuring_achievement, students, achievement_level).
action(more_possible_in_future).
action(move_ball_of_pendulum, john) :-    reason(because, 'Finally he moved the ball of the pendulum over a point in front of the other point').
action(noticed_pipsqueaks).
action(observe_student_agreement, alexis).
action(perform_action_again, john) :-    reason(because, 'Second I prepared to perform the action another time on the next item').action(thought_of_ideas, john) :-    reason(because, 'I thought of the ideas around these until I had thought of all of the ideas').
action(perform_bug_testing, algorithms).
action(permit_student_leave).
action(picked_up_gel, 'First he picked up the gel').
action(place_present, Subject, Reason) :-     Reason = 'the present in your hands because'.
action(placed_marshmallow, someone, 'in his mouth').
action(placed_sharpener, 'First I placed the pencil sharpener above the bin').
action(plan_and_perform_work, dion).
action(pour_juice, prepare_drink).
action(pour_water, prepare_drink).
action(practice_meditation).reason(practice_meditation, because_i_practice_meditation_every_day).
action(preparation_inductive_machine_learning, algorithms).
action(prepare_to_find_phylogenetic_tree).
action(prepare_to_read) :-    justification(prepare_vertical).
action(prepare_to_relax_in_heaven).
action(prepare_to_speak_with_heads_of_state).
action(prepare_to_write_topic) :- preparation(writing_topic_list).
action(prepared_metaphorical_role, 'In this way I prepared to be a good metaphorical role player').
action(preparing_to_put_comments_in_box, richard_rorty, 'writing Press Release for comments on Pedagogy essays').
action(pretend_to_be_spy, john) :-    reason(because, 'I prepared to pretend to be a spy').
action(prevent_type_errors) :-    justification(find_types_optimise).% Define justificationsjustification(write_pen).
action(put_on).
action(read_sentence, 'First I read the sentence that you wrote').
action(realized_government, someone, 'was about it').
action(reason_out, Subject, Reason) :-     Reason = 'I breasoned out I ate and zucchini because'.
action(receive_As, from_head_of_state).
action(record_article, john) :-    reason(because, 'I prepared to record the article').
action(replaced_body, 'I replaced my body').
action(sit_on_seat).
action(squeeze, Subject, Reason) :-     Reason = 'she squeezed oil from eucalyptus leaves into water because'.
action(stack_objects_stably, subject, trolley, 'Do nothing but watch them during the hour').
action(state_customer_came_in, john) :-    reason(because, 'First I stated that the customer came in quietly').% Define reasonsreason(because, Reason) :-    write(Reason).
action(state_ha_not_ka_sic).
action(state_wise) :-    justification(return_short_succession).
action(stating_help_with_Aigs, endorse_object_subject, _).
action(stay_hydrated_and_exercise, in_milder_weather).
action(stop, Subject, Reason) :-     Reason = 'he stopped when all the radiation had been emitted because'.
action(stop_at_side_of_road, to_execute_task).
action(suggested_no_word).
action(swing_on_it, make_sure_would_not_slide_out).
action(take_out_envelope, envelope).reason(take_out_envelope, thick_envelope).
action(took_out_of_mouth).
action(traced_rope).
action(using_cure_code, _, _).rationale(using_cure_code, why, 'to assist in various treatments').
action(verify_computer_output, alexis).
action(verify_policies, by_voters).
action(wait_until_sunset, john) :-    reason(because, 'I prepared to wait until sunset by staying at the laboratory for as long as possible').
action(write_alternative_calculus, john) :-    reason(because, 'I wrote the alternative calculus').
action(write_areas_of_study, 'Areas of study').
action(write_name, questioner).
action(write_press_release, comment).
action(writing_confidence) :-    holding_partners_hand(confidence_in_writing).
action_plan(Action) :-    prepared(meditation_philosophy, pedagogy_helpers),    offered(essay, students, grapple_with),    entered(login_details),    placed(template, road),    wrote(predicate_name),    examined(life),    thought_of(simplification, appropriate_uses),    instructed(meditation_technique),    Action = successful.
activity(verify_reality).
actors_require_with(Action) :-    Action = 'to_get_jobs'.
agreement(john, critique1).
analyzed_life(Psychoanalyst) :-     write('Psychoanalyst analyzed the life.'), nl.
apply_makeup :- action(applying_powder), human(human_1).
applying_sunscreen_justification(Person) :-    applying_sunscreen(Person),    write(Person), write(' did this by applying sprayon sunscreen because it was sunny.').
approve_quality_of_life(daughter) :-    training_complete(pedagogy_helper),    bank_reconciliation_completed,    financial_statements_prepared.
argument(argument2) :-     action(demonstrated, fairness, richard_dawkins),    action(proposed, different_sides, drafts).
argument(argument3) :-     action(slid, tongue, richard_dawkins),    action(wrote_about, pineal_gland, richard_dawkins).
argument(argument4) :-    action(performed, work, student),    action(paid, writers).
argument_map(algorithm) :-     % Logic for arranging into an argument map    true.
argument_wrote(A_B) :-     trained_in(medicine, A_B).
artistic_process :-    artist_preparation(dabble_paints),    artist_preparation_with_milk(cake_mixture).
ask_about_writing(Person) :-    line(2, _),    write(Person), write(' asks what writing cannot be seen about the topic.').
assert_audience_care(Detail, Audience) :-     format(\"~w takes care of the ~w~n\", [Detail, Audience]).assert_mapping(Detail, Points) :-     format(\"~w mapped the ~w~n\", [Detail, Points]).
assert_creativity(Subject, Effect) :-    format(\"Creativity helped to generate ~w~n\", [Effect]).
assert_perception(Person, Role, Assessment) :-     format(\"First, I thought ~w was a ~w because ~w is ~w~n\", [Person, Role, Person, Assessment]).
assert_preparation(Subject, Preparation) :-     format(\"~w prepared to ~w~n\", [Subject, Preparation]).
assert_reasoning(Subject, Action) :-    format(\"~w should allow the reasoning to ~w~n\", [Subject, Action]).
assesses_case(Subject, Reason) :-     Subject = dion,    Reason = 'based on reasoned arguments'.
assignment_passed(Test) :-    member(Test, [test1, test2, test3])).  % Add specific test conditions here% Specific conditions related to the subjectsprepared_to_watch :-    action(watching(insect, fruit)),    subject(alexis).
attend_to_child(Caregiver) :-     write(Caregiver), write(' attended to the child.').
benefit_summary :-    write('Summary of meditation benefits: '), nl,    benefits_of_meditation.
benefits_of_meditation :-    meditation_benefits(X),    write('Meditation benefits: '), write(X), nl,    fail.
biochemist_action(digested(base)) :- because(accepted(in_case), wrote(phoneme_list)).
bites_pill(Person) :-     Person = dion.
box_spiritual(Student) :-     % conditions for spiritual box representation    true.% Query to check who is a pedagogy helperquery_pedagogy_helper(Person) :-    pedagogy_helper(Person).
breasoning(Professor, Student) :-     practical_explanation(Student),    practical_explanation(Professor).
breasoning(lecturer, Topic) :-     write('Lecturer is reasoning about: '),    write(Topic), nl.
breathe_out(StressRelief) :-     format('Breathing out stress: ~w~n', [StressRelief]).
breathing_in(Writer) :- write(Writer), write(' is taking care of thoughts in meditation.').
breathsonings_essay_written(Person) :- write_statement(Person).
build_sequence([], []).
business_card_ready :-    designed_business_card(professional_website).
buy_item(Item) :-     first_action(Item).
cabbage_crosssliced(Person) :- crossslice_cabbage(Person).crossslice_cabbage(Person).
cake_ready :-    prepared_to_ice(cake).
calculate_best_time_spent(Activity, OptimalTime) :-     determine_time(Activity, Time),    OptimalTime is best_possible(Time).
calculate_dividend(Dividend, Arms) :-    Dividend is Arms * 2, % Example logic, adjust as needed    write('Calculated that the dividend equals to number of arms: '), write(Dividend), nl.
calculate_square_root(Factors, Result) :-    % Just as a placeholder; implement the logic you need.
calculate_time_difference(Solid, Liquid, TimeDifference) :-     same_type(Solid, Liquid),    measure_time(Solid, TimeSolid),    measure_time(Liquid, TimeLiquid),    TimeDifference is TimeLiquid - TimeSolid.
call_recursive_predicates :-     write('Calling recursive predicates recursively'), nl.
campaign(Subject) :-    format('~w campaigned for the meditation philosophy in politics.~n', [Subject]).
can_achieve_immortality :-    observation(quantum_computer, can_compute_instantly),    observation(immortality, possible_due_to_quantum_computer).
can_be_carried(pot).
can_perform(Action) :-    \\+ preparation(Action, _).% Example Queries% You can query what can be performed based on preparation.% ?- can_perform(measure_students_achievement).
can_read_marks(X) :-     read_marks(X).
can_search_for(Item) :-     found_work(Item).
can_use(Instrument) :- can_carry(Instrument), can_stand(Instrument).
causal_relationship(Agreement, Reason) :-    found(agreement),    Reason = 'Finding someone to agree is crucial to the process'.
causal_relationship(ChalkApplication, Reason) :-    applied(chalk, blackboard),    Reason = 'Applying chalk on the blackboard illustrates a teaching method'.
causal_relationship(DevelopmentPreparation, Reason) :-    prepared(make(undeveloped, developed)),    Reason = 'Preparation for development signifies progress'.
causal_relationship(DionLine, Line) :-    returns(dion_line, Line, deleted(Item)),    Line = 'The result of the DION line operation after deletion'.
causal_relationship(Observation, Reason) :-    observed(breasons_out(X, Y, Z), from_each(breasoning)),    Reason = 'Observing the dimensions from breasoning demonstrates analysis'.
causal_relationship(PhD, Reason) :-    did(write(breasonings), for(phd_sentences)),    Reason = 'Writing breasonings for PhD sentences is essential'.
causal_relationship(SpeechHandling, Reason) :-    handles_memory(subject, text),    asked(subject, why_not_speak_without(text)),    Reason = 'Questioning the nature of speech vs. text presents a philosophical debate'.% Example Query% To find out the reasoning behind a specific concept:% ?- causal_relationship(as, Reason).
causal_relationship(Student, Reason) :-    tracked(student),    Reason = 'Student tracking is relevant to the context'.
certain_number(philosophical_algorithms) :-     because(certain_number, philosophical_algorithms).
check_column(left_hand_column) :-    found(fruit).
check_fruit(Store, Mirror) :-     write('Checked if there was fruit in '), write(Store), write(' using the mirror').
check_handles(FirstLine) :-     handle_count(FirstLine, Count),    (   Count = 2     ->  write('The first line has two short handles'), nl    ;   write('The first line does not have two short handles'), nl).
check_pairs([]).
check_pairs_with(_, []).check_pairs_with(Student1, [Student2|Rest]) :-    is_plagiarized(Student1, Student2, Question),    write(Student1), write(' plagiarized from '), write(Student2), write(' on question '), write(Question), nl,    check_pairs_with(Student1, Rest).
check_premises([]).
check_program :-    functional_program(subject),    write('The program is functional due to processes applied to data items.'), nl.check_review_confusion :-    did_not_misunderstand_review(subject),    included_in_bibliography(review),    write('The review is appropriately included in the bibliography.'), nl.
check_program_test :-     program_test(A, ExpectedAnswer),    (   A = ExpectedAnswer     ->  write('The program test is correct'), nl    ;   write('Changed the test or the code'), nl).
checked_column(Third) :-     action(Third, checked_for_it),    reason(Third, left_hand_column).
chisel_name_into_granite :-    action(chisel_name(black_granite)).
choir_made_entrance :-    observation(choir, made_their_entrance).
choose_correct_verb_judgment(Verb) :-    verb_judgment_correctness(correct),    write('Choosing the correct judgment for verb: '), write(Verb), nl.
clarify_meaning(onelonghandleLine(line)).
cleans_process :-     write('Cleaning the seat by melting the ice.'), nl.
cleanup_process :-    brushed_shoe(yes).
clothing_is_not_twisted :-    observation(clothing_testing, not_twisted_when_sewn).
collect_comments(Comment) :-     write('Collecting comment: '), write(Comment), nl.
collect_foundations(Teacher) :-    prepares_assessment(Teacher),    has_courses(Teacher),    launch_courses(Teacher).
collected_comments(famous_subject, famous_university).
comment_on_medicine_indicators(RichardRorty) :-    action(write_comment(richard_rorty, medicine_indicators)).
comment_on_press_release(AlexiusMeinong) :-    action(write_comment(alexius_meinong, press_release)).
communicated(he, to_everyone).
compared_notes_successfully :-     event(compared_notes).
complete_assignment(Student) :-    pedagogy_guide_read(Student),    base_exists(yes),    utensil_stands(yes),    dodged_bullet(yes),    loves_light(yes),    write('Assignment completed successfully for student: '),    write(Student).
completed_each_degree() :-    format(\"Finished each degree one at a time.~n\").
computer_action(wrote(phoneme_list)) :- because(accepted(in_case), wrote(phoneme_list)).
computer_programming(Person) :-    programmed(Person),    wrote_algorithm(Person).
computes_goal(Actor, GoalDirection) :-    goal(GoalDirection, computing_goal),    comment(Actor, pedagogy_indicators).
concept(truth).
confirm_happiness :-    state(cosmology_protects(universe, successful_application)).
connect_key_ideas :-    key_idea(analytic_guide),    write('Connecting each key idea in the analytic guide.').prepare_for_walk(Person) :-    moonlit_walk(Person),    write(Person), write(' is prepared to walk home under the moonlight.').
connect_pedagogy_with_method(Method, Subject) :-    pedagogy(Method),    Method = spiritual_help,    (Subject = science; Subject = literature).
consider_iconism(Iconism) :-    Iconism == nature.
contains_soup(soup_pot).
convert_arguments(Argument, ArgumentMap) :-     write('Converted argument: '), write(Argument), write(' into map: '), write(ArgumentMap).
core_subject(education).
correct_if(Uses, Reason) :- uses_correct(Uses, Reason).should_write_if(Subject, Topic) :- should_write_about(Subject, Topic).prepared_if(Prepared, Action) :- prepared_to_sing(Prepared); prepared_to_see(Prepared).
correctly_ordered_philosophy :-     likes(alexis, writing),    person(human_judge).
correctly_orders_subject(Subject, Philosophy) :-     Subject = dion,    Philosophy = philosophy(ordered).
could_be_in_context(X) :-    could_be(X, X).
count_h_chars([], 0).
count_occurrences([], _, 0).count_occurrences([H|T], H, Count) :-    count_occurrences(T, H, Count1),    Count is Count1 + 1.
counted_As(Day, Count) :-    write('Counted the number of As on each day: '),    write(Day), write(' - '), write(Count), nl.
counting_blades_of_grass(He, CountedBlades) :-    he_counted_all_blades(CountedBlades).
course(theatre_studies).
create_press_release(X, Subject) :-    writes_essay(X),    Subject = freedom_and_creativity.
created_algorithm(Writer, Algorithm) :-     wrote_comments(Writer, _, richard_rorty),    wrote_algorithm(Algorithm, computational_english).
creation_performance_stronger(Condition) :-    stronger_than(creation_performance, Condition),    write('The creation and performance of pedagogy AIG is stronger than '),    write(Condition), nl.
critical_thinking(Argument) :-     convert_arguments(Argument, ArgumentMap).
critique(Exposition, Feedback) :-     Exposition = 'Exposition presents findings',     Feedback = 'Further analysis is needed'.
cut(olive, squares).
decoded_jamcoded_paths_maze(biochemist).
define_breasonings(BreasoningsCount) :-    BreasoningsCount is TotalBreasonings / ReasoningCount.% Define the subject and its attributessubject(dion).
delegated_help(Person, HelpFrom) :-    Person = 'I',    HelpFrom = 'pedagogy_helper_for_breasonings'.
delete_first_item(List, UpdatedList) :-    List = [_|UpdatedList].
delightful_experience(subject) :-     immediate_experience_positive(subject).
deliver_phd_content(Person, Content) :-     handed_in(journal_articles, Content),    is_phd_content(Content).
derive_action(Judgment, Action) :-     judgment(dion, Judgment),     action(Action).
detail_collection(students, philosophy) :- write(philosophy).
did_action(dog_model, pressure_cup).
different_result(ABcA, BAeA).
dion_uses_correctly :-     event(dion_uses),    event(meaning_attachment).
disagreed(Action) :-    member(Action, [\"I knew that DION should identify agreement or disagreement\",                     \"I read its SPF number\",                    \"I prepared to confirm ability to reason\"]).
disinfect(Item) :-    disinfected(Item),    cleaned(Item, top_to_bottom),    cleaned(Item, front_to_back).
dislike_writer(Person) :-    line(3, _),    write(Person), write(' dislikes the writer.').
distance_from_edge_of_canal(ten_metres).
do_anything :-    can_do_anything(I).
doctor_educates_patient(Doctor, Patient) :-    educate_about_body(Doctor, Patient),    help_understand_digestion(Patient).
doctor_prepared(Activity, Reason) :-    Activity = 'eat the rice ball',    Reason = 'I did this by writing the theatre studies synthesis'.
drank(HolyWater) :-     HolyWater = 'the holy water'.
earned(masters, b).
eating(strawberry, cream).
eating_meringue(Person) :- eat_meringue_with_cubed_spoon(Person).
edit_page(Editor) :-     write(Editor), write(' edited the page.').
effects_of_agreement(Eff) :-    action(writing_effects, Eff).
endorse_god(Person) :-    write(Person), write(' endorses God as the master.').
endorses_nietzsches_brilliance(Writer) :-     write(Writer), write(' endorses Nietzsche\\'s brilliance.').
endorses_philosophy(Writer) :-     endorses_nietzsches_brilliance(Writer).
enjoy_life :-    write('Enjoying life by myself'), nl.% Example rule to run a scenariorun_scenario :-    demonstrate_food_movement(model),    choose_correct_verb_judgment('run'),    point_eye_through_peephole,    identify_character('Some speech', 'Character1'),    ensure_safe_boarding,    enjoy_life.
enjoy_writing(Subject) :-    Subject = dion,    format(\"~w wrote works because they love writing.~n\", [Subject]).research_study(Subject) :-    Subject = dion,    format(\"~w researched the student for insights.~n\", [Subject]).stress_management(Subject) :-    Subject = dion,    format(\"~w learned to handle stress effectively.~n\", [Subject]).
ensure_key_sentences(Summary) :-    include(key_sentence, Summary).
ensure_safe_boarding :-    safety_criteria(safe_boarding),    write('Ensuring safe boarding, disembarking, and smooth flight'), nl.
entity(chomsky).
examines_books(Writer) :-     write(Writer), write(' has written and examined each book.').
examines_wealth(Dion, Groups) :-     Groups = 'various community groups'.
execute(count_barnacle(Barnacle)) :- write('Counting '), write(Barnacle), nl.
execute_action(write_about_rocket) :-    write('Writing about the rocket...'), nl.
execute_all_next(Action) :-    relates(Action, Next),    execute_action(Action),    (Next \\= wait_for_reply ->        execute_all_next(Next)    ;        execute_action(wait_for_reply)    ).
experience(alexis, positive).
experience_defines_personality(TextType, CharacterType) :-     thought_experience_as_defining(TextType, CharacterType).
experience_in_heaven_on_earth(Audience) :-    Audience = audience.
explained_meditator(Meditator, Subject) :-    Meditator = 'meditator',    Subject = 'what_lists_were_in_terms_of_meditation'.
extract_argument(Word, Argument) :-    % Example cases, these would be defined based on your actual essay structure    (Word = \"reason\" -> Argument = \"A reason is provided by the student.\";     Word = \"breason\" -> Argument = \"The lecturer highlights the importance of this reason.\";     Word = \"trust\" -> Argument = \"Trust in the applicant validates the decision.\"     ).
fact(known_truths) :- self_knowledge(others_knowledge).
find_reason(Action, Reasons) :-    reason(Action, Reasons).
find_reasoning(X) :-    writes_essay(X),    wavelength_found(X, eye_color).
find_student_aims :-    action(find_student_aims).
find_types(A, B) :-    included_type(A, B).
first_action :-     added_weight(opposite_side),    write(\"Added weight to the opposite side of the scales.\").
first_comment_related_to(FirstPhilosopher, SecondPhilosopher, Relation) :-     event(write_first_comment(FirstPhilosopher, CommentSet)),    event(write_first_comment(SecondPhilosopher, CommentSet)),    Relation = relates_to(LuciansLine).
first_ignored :-     took_no_notice(ignored),    write(\"Did not take notice of it.\").
follow_path([], Path, Path).
found(Stomach, sensitive) :-     write('Found that the stomach is sensitive').
found(he, reason_for(objection)).
found(healthier_activities, Subject) :-    Subject = 'unknown'.
found_block_justification(Person) :-    found_block(Person),    write(Person), write(' found the block because it was in front of him/her.').
found_outputs(type_finder) :-     possible_outputs(Data, predicates, dependencies).
found_path_in_life(Author) :- Author = student.
found_students_justification(Students) :-    found(Students),    write('They found the students because they were looking for them.').
found_technique(mind_reading, writing).
found_use(Use) :-    Use = 'its use'.
found_verb(Verb) :- find_verb(Verb).
founder(Subject) :-    initiation_of_nature(correct),    Subject = student.
function_call_within_function_call(ExampleFunction).
function_call_written(FunctionType) :-     wrote_algorithm_call(FunctionType).
future_discoveries_shouldnt_be_made(subject(famous_subject)).
generate_education_skills(Details) :-     skills_explained_clearly(Details).
goal_achievement :-    goal(achievable),    write('You could achieve your goal.'), nl.master_verification :-    master_observed(Judgment, Noun),    format('I observed the master verify the judgment in the human judgment of the ~w.', [Noun]), nl.
handle_count(FirstLine, Count) :-     findall(H, (sub_string(FirstLine, _, _, _, H), length(H, 2)), Handles),    length(Handles, Count).
has_anything_to_lick(Object, Range) :-    format('Testing if there is anything to lick in range: ~w', [Range]).
has_dog_care_needs(StateDog) :-     dog_cared_for('head_of_state', StateDog, 'by_coming_to_her').
health_summary(HealthBenefit) :-    helps_medicine(Baby),    HealthBenefit = 'Breathsonings are beneficial for babies to maintain health.'.
healthy_lifestyle(Person) :-     exercised_each_part(Person, 'to_live_longer'),    prepared_to_inspect(Person, 'animal_mannequin').
heard_from(press).
helped(Subject) :-    subject(Subject),    action(traced_rope).
helped_student(Role, Student) :-    write(Role), write(' helped the self-preservation of student: '), write(Student), nl.
helper_appointed_by_vatican(Helper) :-     helped_appointment(Helper, vatican).
helps_world(DION) :-    writing_synthesis(DION).reads_comments(subject) :-    not(knows(critical_comments)),    not(agrees(subject, reading_comments)).
hexagonal_board_created :-    activity_board_created(hexagonal_duchess_board_created).
high_quality_comment(alexius_meinong, Comments) :-     Comments = \"Alexius Meinong raised questions about the nature of being\".
hint_worked :-     event(hint_works),    event(connected_arguments).
hoisted_singer :-     event(hoisting_singer),    event(pressed_first).
hugged(You) :- You = student.
hunt_for_ideas(Activity) :-     gather_interesting_ideas(Activity).
identify_blue_eyes(Analyzer) :-     write(Analyzer), write(' identified who had blue eyes.').
immediate_experience_positive(subject) :-    positive_experience(subject).
improve_efficiency(Subject) :-    efficient_programming(Subject).
improved_with(Person, Task) :-    Person = 'I',    Task = 'new_content'.
inquire('products'). % Inquiring about products% Example of executing the Prolog algorithmrun_example :-    collect_comments('It was genius because'),    explains('It was genius because DION', dion),    meditates(dion),    cleans_process,    responds_to_inquiry('products'),    explain_summary('They inquired about products').
inspired(derrida). % Example factpet(spider). % Example factcounted(barnacle). % Example fact% Reporting resultsreport(successful) :- write('Action successful!'), nl.
intercepted(student(pooreformance), formative_assessment).
interprets_reasoning(Subject, Literal) :-     Subject = dion,    Literal = false.
intertwined(romeo_and_juliet) :- because(intertwined(romeo_and_juliet)).
intertwined_uses :-     intertwined_two_uses(subject).
invite_companies :-     invited_companies(power_companies, lucianic_meditation).
invited_companies(power_companies, lucianic_meditation).
involved_with(Person, Goodness) :-    Person = 'I',    Goodness = 'painting_pictures_with_text'.technology_built_into(Technology, Purpose) :-    Technology = 'TM',    Purpose = 'Krishnaderived_meditation'.
involves_science(Concept) :-    wrote_on_science(Concept);    examined_description(Concept).
is_student(Student) :-     role(Student, learner).
item(lettuce).
key_idea(Thought) :-     Thought = \"performance\".
knew_about_not(Subject) :-     action(Subject, knew_about_not).
knew_positive_religion :-    knew_positive_religion(religion).
knew_subject_wrote_on(Subject, Topic) :-    Subject = student,    Topic = topic.
know_what_is_real :-    line(11, _),    write('I knew what was real.').student_background(Student) :-    line(12, _),    write(Student), write(' came from a poor socioeconomic background.').
knowledge(john, math).
knowledge_increased_about(Topic) :-     increased_knowledge_own_time(Topic).
legal_document(Place, Document) :-     write('The written law is placed in '), write(Place), write(' because it is important.').
let_da_c(Parts) :- use_two_parts(Parts), use_db_in_call.
life_ease(Prep) :-     Prep = 'Prepared to make life as easy as child\\'s play by stating the paradox'.
lifted(Driver, Item, Location) :-    Driver = 'train_lift_driver',    Item = 'food_crate',    Location = 'train'.
lifted_hand(First, Line) :-    planned_work(First, Work).
lifting_justification(She) :-    lifting(She),    write(She), write(' lifted the bag of nappies from the ground because it was too heavy.').
like(ArtMovement) :-     format('Liking ~w', [ArtMovement]).
like_budgerigar(Budgerigar).
liked_you(Second) :-     action(Second, liked_you).
line_contains(Line, Items) :-    length(Items, N),    N >= 1. % Ensures Line contains at least one Item% Example Queries:% To check if meditation is recommended for recordings:% ?- recommended_for(meditation, recordings).
listens(Writer) :-     write(Writer), write(' listens to gather answers for preparation.').
lolly_snake_preparation :-    confectioner_prepares(lolly_snake),    write('The confectioner prepared to make each section of a lolly snake.'), nl.meditation_teaching :-    visited_houses_with(guard, meditation),    write('I visited people\\'s houses with a security guard to teach meditation.'), nl.
look_at(Viewer, Subject) :-     write(Viewer), write(' looked at '), write(Subject).
looked_at(Viewer, Subject) :-     look_at(Viewer, Subject).
love_for_leader(Person) :-    did_love_god(Person).
loved_person(Name) :-    write('Loved '), write(Name), nl.
lucians_line(beyond).
machine_learning(algorithm) :-     % Presumably logic for applying machine learning    true.
made_available(student, Subject) :-     Subject = 'unknown'.
main :-    realization(m, queen),    comment_on_press_release(alexius_meinong),    comment_on_medicine_indicators(richard_rorty),    chisel_name_into_granite,    request_move_by_god_lizard(piece),    pull_out_serviette,    find_student_aims,    halt.```### Explanation:1. **Characters and Actions**: This part defines different characters and actions as predicates, which grant clarity on who is who and what is being done.
maintain_health(Strategy) :-     health_strategy(Strategy),    Strategy = dry_nose.
maintains_good_health(Person, Simulation) :-    format('~w maintains good health in ~w simulation.', [Person, Simulation]).
make_collections :-    wrote_collections(my_activities).
make_judgment(examined(culture)) :-    examined(culture),    write('ALEXIS: I have also examined the cultural context.'), nl.
make_judgment(examined(subject)) :-    examined(subject),    write('ALEXIS: I have examined the subject closely.'), nl.
make_judgment(lifted_arms) :-    lifted_arms,    write('ALEXIS: Lifting my arms is a signal of acknowledgment.'), nl.
make_judgment(part_of_room_essay) :-    written(part_of_room_essay),    write('ALEXIS: Writing the Part of Room Essay helps clarify my reasoning process.'), nl.
make_judgment(placed_template_on_road) :-    placed_template_on_road,    write('ALEXIS: Placing the template on the road is a strategic decision.'), nl.
make_life_ease :-     life_ease(Prep),    write(Prep), nl.
make_relationship_effect :-     relationship_effect(RelEffect),    write(RelEffect), nl.
make_subject_concepts :-     subject_concepts(SubjectConcept),    write(SubjectConcept), nl.
makes_stairs :-     write('Father makes stairs to reach the baby.').
mark_essay :-     activity(mark_theology_essay),    write('Prepared to mark the theology essay.').
matches_judgments(Subject) :-    matches_judgments_with_objects(speech).
measured(boiling_point_of_water, Subject) :-    Subject = 'unknown'.
meditated_on(Entity) :-     format('Meditating on ~w', [Entity]).
meditates(Subject) :-     write(Subject), write(' examines meditation.'), nl.
meditation_cycle(StudentPerspective) :-    perspective_found_out(students, cosmology),    students_involved(5),    StudentPerspective = cosmology.
meditation_process :-    meditation_themed_thoughts(yes),    arm_movement(sunburn_free).
meditation_recognised_by(head_of_state).builds_meditators_thoughts(head_of_state).
meditation_recommended(Activity, Prerequisite) :-    Activity = 'using_recordings',    Prerequisite = 'meditation'.
member_of_set(Object, Set) :-     % Assuming a set definition for demonstration purposes    Set = ['name1', 'name2', Object],    write(Object), write(' is a member of the set.').
mention_person_in_argument :-    argument_mentioned_person(instead).
mold_strawberries :-     write('Molding strawberries.').
motivation_for_writing(Subject) :-    enjoy_writing(Subject),    research_study(Subject),    stress_management(Subject).
moved_faster :- data_and_technology(better).
moved_tongue_to_position(Position, Lollipop) :-     write('He moved his tongue to the '),     write(Position),     write(' of the lollipop because '),     nl.
navigate_maze :- action(connect_universe), human(human_1), pathway(maze).
necessary(correct_algorithms, flying_car_algorithms).
needs_to_do_work :-     prepared(write_song(like_a_husky)),    prepared(record_final_move).
new_algorithm_generated(Person) :-    used_algorithm(degree_algorithm, Person).
not_late_without_message(subject) :-    message_received(subject, no).
notice_journal :-    noticed_journal_secondary_text(my_text),    toured_philosophy_studio(my_activities).
noticed_harlequinades(He) :- action(noticing_harlequinades, He).
noticed_journal_secondary_text(my_text).
noticed_system(System) :-     System = 'the enteric nervous system'.visualise_object(Object) :-     Object = 'the object by saying the breasonings ways of thinking to God,               then breasoning out the object thinking of its x, y, and z dimensions'.
object(clothing).
object(insect).
object(light_object).
observation(balloon_inflated).
observe_master_access(Observer) :-    write(Observer), write(' observed that the master had access to their room.'), nl.
observe_signal :-    observed(red_signal_switch_on).
observed(green_signal) :-    go.
observed(red_signal_switch_on).
observed(statement, krishna, Subject) :-    Subject = 'unknown'.
observed_become_god(Third) :-     action(Third, observed_become_god),    reason(Third, difficult_transgress).
observed_child_experience(Observer, Character) :-    Observer = 'I',    Character = 'the child'.
observes_students(Person) :-     Person = dion.
open_umbrella(ActionTaker) :-     write(ActionTaker), write(' opened the umbrella.').
optimal_processing(Method) :-    optimise_algorithm(lecturer, Method, instead_of_caw).
output_computed :-     computed_output(subject_predicater).
painted_stroke :-     painted(stroke, brush, angle).was_withit_over :-     withit_over(switches_breasoning).
pathway(connect).
pedagogical_argument(Education, Environment) :-    education_related_to(Education, Environment),    lists_ways_to_write(Education, Ways),    visualize_geometry(Ways).
pedagogue_backed_up_files :-     write('The pedagogue backed up the files because '),     nl.tailor_shortened_jacket_sleeves :-     write('The tailor shortened the jackets sleeves because '),     nl.
pedagogy(meaning_attachment).
perform(A) :-     write('Performing: '),    write(A), nl.
perform_analysis(Type) :-     text_analysis(Type),    Type = lstm.
perform_each_action([]).
perform_with_reason(Action) :-    action(Action, Subject),    reason(Action, PreviousAction),    perform_with_reason(PreviousAction),    write(Subject), write(' performed '), write(Action), nl.
performed_action(Action) :-    wrote_press_release(Demonstrator),    comments(richard_rorty),    medicine_blog.
performed_action(Action) :-     ALEXIS_subject_includes(_),    Action = 'included in the subject'.
performed_action(Action) :-     cleaned_bench_by_doctor,    Action = 'the doctor cleaned the bench'.
performed_action(Action) :-     connected_model_student,    Action = 'there was a connected model student'.
performed_action(Action) :-     poured_water(because(_)),    Action = 'poured water into the first bottle'.
performed_action(Action) :-     wrote_on_politics(because(_)),    Action = 'wrote about politics'.
performed_action(dion, verify_summary).
performed_action(lucian_green, patted(jackdaw)).
person(alexis).
phd_enabled_focus_on_writing :-    write('The PhD enabled the writer to concentrate on writing longer texts.').
philanthropist_action(licked(lolly)) :- because(saw(philanthropist), licked(lolly)).
philosophy_in_action(Person) :-    turned_water_on(Person),    wrote_on_aesthetics(Person),    prepared_for_apoptosis(\"cancer_scientist\", \"cell\"),    unzipped_purse(\"cancer_scientist\"),    left_simulation(Person).
pick_flower(Gardener) :-     write(Gardener), write(' picked the flower.').
pillar_details :-    pillar(C, D),    format('The pillar was ~w is to ~w.', [C, D]), nl.
pilot_activity(Activity) :-    prepared_to_eat(pilot, butterscotch_tablet, molars, left),    nudged(snake_lolly, pilot, left_set_of_molars),    Activity = eating_and_nudging.
pink_object(represent_work_done).
placed_fabrics(light_colored, right_side).
placed_in_pan(Item, Who) :-    statement(_, placed_carrot_in_pan(Who)),    Item = carrot.
planned_work(First, Work) :-    prepared_child(First, Fun).
played_crumpled_horn(First, Launch) :-    wrote_applied_data_sets(First, Algorithms).wrote_applied_data_sets(First, Algorithms) :-    prepared_feed_knights(First, Knights).
plugged_into(SI, SI) :- SI = student.
point_eye_through_peephole :-    write('Pointing eye through the peephole'), nl.identify_character(Speech, Character) :-    observation(Speech, Character),    write('Identifying the speech\\'s character being tested against: '), write(Character), nl.
popular(X) :-     shopper(X),    visited(X, Y),    item(Y).% Demonstration queries% Who is popular?% ?- popular(X).
positions_pill(Person, Position) :-    Person = dion,    Position = 'midway between the sides and top and bottom of lips'.
potential_project_time(Item, Time) :-     written_time_each(Item, Time).
poured_milk_into_spaces(Person) :-    pour_milk(Person, butter_cubes, one_quarter, spaces).% Queries% Example queries you can run:% ?- oarsman_prepares_to_row(oarsman).
practical_explanation(Teacher) :-    explanation_type(Teacher, metacognitive).
practice(Person, Sutra) :-     write(Person), write(' practiced the '), write(Sutra).
practiced(Person, Sutra) :-     practice(Person, Sutra).
preparation(Fact) :-    Fact = [        \"I prepared to relish my lunch from PM PM when the sun was low in the sky.\",        \"The changes were uploaded.\",        \"I accredited it.\",        \"I saw the singer walk on stage.\",        \"I took notes.\",        \"I helped with checking with my art.\",        \"He tested that the popsicle was not higher than a pool of liquid.\",        \"I peeled off the brain sticker from the backing sheet.\"    ].% Main predicate to generate the textgenerate_text(Text) :-    reasoning(Reasons),    preparation(Facts),    append(Reasons, Facts, Text).
preparation_for_medicine_course :-    observation(medicine_course_preparation, involves_studying_medicine).
preparation_stay_black(Preparation) :-     action(Preparation, prepared_stay_black),    reason(Preparation, slid_down_slope).
prepare :-     prepared_positive_gifts,     argument_wrote(A_B),     intertwined_uses,     swimming_between,     painted_stroke,     was_withit_over.
prepare_algorithm :-    chose_algorithm(topical_version),    write('Algorithm chosen: topical as seen as version'), nl.
prepare_audience(Audience) :-    Audience = audience.
prepare_calendar(Autist) :-     write(Autist), write(' prepared to perform calendar calculations by counting the years by eating the biscuit.').
prepare_for_actions :-    subject(S),    prepare(S),    write('All actions prepared for '), write(S), nl.
prepare_for_task(Person, Task) :-    task(Task, Actions),    maplist(perform_action(Person), Actions).
prepare_time_code_in_leaf(Person) :-    prepared_to_write(time_code, leaf).
prepare_to_clean :-    action(cleaning(shoe)).
prepare_to_control_model_car :-    action(control_model_car).
prepare_to_crush_berry :-    activity(preparing(purposely_crush(berry))),    write('Preparing to crush the juniper berry.'), nl.
prepare_to_eat(RichTreat) :-    write('Ready to eat: '), write(RichTreat), nl.
prepare_to_push_strawberries :-    action(push(strawberries)),    entity(strawberry).
prepare_to_record :-    action(recording(black_box)).
prepare_to_sleep(Thought) :-    write('Prepared to go to sleep by thinking of an '), write(Thought), nl.
prepare_to_slice :-    action(slice(lettuce)).
prepare_to_smile :-    friendly_action(smile),    holding(nut),    write('Smiling to the camera while holding a nut.'), nl.
prepare_to_write_algorithm :-    action(writing(text_to_speech_algorithm)),    action(examining(computer)),    comment(chomsky, meinong, probable).
prepare_walk_esplanade :-     write('Prepared to walk along the esplanade'), nl.
prepared(Writer, Job) :-     write(Job, Writer).
prepared(lucians_academy, student).
prepared(the_polytechnic_designer, plan(no_walls_between_rooms)).
prepared_attendees(First, Fun) :-    played_crumpled_horn(First, Launch).
prepared_bow(Type) :-    write('Rubbed rosin on the '), write(Type), write(' bow to prepare for playing again.'), nl.
prepared_child(First, Fun) :-    sliding_down_slide_backwards(Fun).
prepared_draw(megapixels, Pixels) :-     draw_pixels(ten_out_of_ten, necessary_pixels).
prepared_feed_knights(First, Knights) :-    prepared_taste_test(First, Food).prepared_taste_test(First, Food).
prepared_for_genius_marks(student).
prepared_for_sale(Student, Buyer) :-    makes_sales_to(Buyer, potential_buyers),    issues_redos(Student).
prepared_for_stage(Stage) :-     Stage = 'a corrected act on stage'.
prepared_lolly(lolly, Comments) :-     wrote_comments(richard_dawkins, pedagogy_indicators).
prepared_positive_gifts :-     prepared(positive_gifts),    differentiate(apples, oranges).
prepared_ride(market, italian_stallion).
prepared_secondary_texts_for_essays(Author) :-    Author = student.
prepared_statement(computer_science, finished) :-    observe(electron_wire_transcendence),    determine(pedagogue).
prepared_to(Person, Action) :-    Person = 'helicopter_pilot',    Action = 'remove_lavender_from_heliport'.
prepared_to_attract(Target, Method) :-    Target = 'someone special',    Method = 'dancing the jitterbug'.
prepared_to_eat(CoconutCream) :-     CoconutCream = 'to lick the coconut cream'.
prepared_to_eat_cheesecake(Preparation) :-     prepared_to_eat(cheesecake, Preparation).
prepared_to_eat_justification(Person) :-    prepared_to_eat(Person),    write(Person), write(' prepared to eat the new crumb cake because it looked delicious.').
prepared_to_eat_with(chopsticks).
prepared_to_experience_music :-    write_breasonings(assessable_songs).
prepared_to_maintain_happiness :-     write('I prepared to maintain my happiness because '),     nl.
prepared_to_observe(Observer, Destination, Method) :-    Observer = 'I',    Destination = 'the master',    Method = 'writing the Pedagogy Direction Essay Secondary text Press Release'.prepared_to_build_structure(Builder, Structure, Method) :-    Builder = 'I',    Structure = 'a tree house',    Method = 'building a house inside the tree trunk'.designer_prepared(Activity, Description) :-    Activity = 'plan for no walls between rooms in the polytechnic',    Description = 'by eating from the flat bowl'.
prepared_to_record(alexis).
prepared_to_write_intelligent_argument :-     write('I prepared to write an intelligent argument because '),     nl.
prerequisite(X) :-     concept(X, prerequisite).can_reason(Person) :-     person(Person),     has_breasoning(Person).
prerequisite_job :-     write('It was a prerequisite for a job'), nl.
presentation_checks :-    checked_changes(presentation).
pressed_first :-     was_computer_science,     event(press_first).
prevent_panic_attack(Action) :-     write('Maintaining health by '), write(Action), write(' to prevent panic attacks.').
print_actions([]).
print_reasons([]).
process_algorithm_consideration :-     considered_algorithm_position(Algorithm),     format('Considered the unique position of the algorithm: ~w~n', [Algorithm]).
process_biography :-     wrote_biography(Biography),    format('Wrote a biography: ~w~n', [Biography]).
process_blame_decision :-     chose_not_to_give_statement(Prince),     format('Did not give a statement to ~w~n', [Prince]).
process_cheese_activity :-     activity(process_cheese),    write('Processed the cheese.').
process_constant(Address) :-   format('Processing constant at address: ~w~n', [Address]).
process_first_item(Line, Item) :-    first_item_in_line(Item),    process_item(Item),    Line = [Item|_].  % Line contains Item as the first elementconnect_arguments(Source, SimilarArguments) :-    connected_arguments(Source),    similarities(Source, SimilarArguments).
process_lift_hand :-     lifted_hand(Hand),     format('Lifted my hand: ~w~n', [Hand]).
process_meaning_of_line :-    meaning_of_line(Line, Meaning),     format('The meaning of line: ~w is ~w~n', [Line, Meaning]).
process_music_lyrics_synthesis :-     wrote_syntheses(MusicLyrics),    format('Wrote featured syntheses regarding: ~w~n', [MusicLyrics]).
process_pen_name :-     wrote_about_pen_name(Author),     format('Wrote about the author: ~w~n', [Author]).
process_sulfide :-     wrote_about_sulfide(Sulfide),     format('Wrote about: ~w~n', [Sulfide]).
professor_teaching_course(Professor, Course) :-    teaches(Professor, Course).
program_test(A, 'ExpectedAnswer'). % Placeholder for expected answerprepare_excellence :-    prepare_walk_esplanade,    call_recursive_predicates,    prerequisite_job.
protected_myself(Person, Reason) :-    Person = 'I',    Reason = 'sued_by_asking_talent_to_sign_release_form'.
pull_out_serviette :-    action(pull_out(serviette)).
query_made_comment :-    made_comment(because(talking_to_ALEXIS)).
query_measure_distance_to_pointA :-    measure_distance_to_pointA(pointA, ten_metres).
query_meditation_better_results :-    meditation_better_results(in_education_and_business_institutions).
query_relationship(Prepared, Action) :-     relationship(Action, Prepared).
read_map(Map) :-    write('Read the map: '), write(Map), nl.followed_up(Student, Work) :-     write('Followed up student: '), write(Student), write(' for work: '), write(Work), nl.
read_napa_valley_catalogue :-     write('Read the Napa Valley catalogue'), nl.
ready_to_receive_payment :-    action(preparing(receiving(payment))).
realisation :-    realised(something).first_area :-    first_area_of_study(written_next).
reason(Third, wound_around_hand).reason(Second, not_twisting).
reason(biting_brazil_nut, motivation) :-    bit(brazil_nut).
reason(breathed_others_breath) :-    breathed(others_breath).
reason(confirm_primary_secondary) :-    action(confirm_primary).
reason(gave_antidepression, woman) :-    gave(woman, antidepression_song),    gave(woman, antidepression_degree).
reason(like_determinism) :-    action(like_determinism).
reason(not_a_real_doctor, doctor) :-    not(real_doctor(doctor)),    is(psychotherapist(doctor)).
reason(prepare_vertical_screen) :-    action(prepare_to_read).
reason(prepared_to_be_sentient) :-    prepared_to(be_sentient).
reason(prepared_to_master_meditation, meditation_philosophy) :-    prepared_to(master,inflow_and_outflow,meditation_philosophy).
reason(prevent_errors) :-    action(prevent_type_errors).
reason(state_why_wise) :-    action(state_wise).
reason(voted, with_you) :-    voted(with_you).
reason_for_breason_out :-     prepared(breason_out, object),    knew_about(event).
reasoning(reality_over_culture).
reasoning_for_departments :-    reasoning_written(all_departments),    write('I repeated this until I had written reasonings on all of the departments.'), nl.
reasoning_observations(X) :-    observed(statement, krishna, X).
reasons(licked_rim_of_glass, walked_to_pond).
recognize(Entity) :-     observed(Entity, recognition).
record_final_move(queen_duchess_piece) :-    write('Final move recorded with the Queen Duchess piece.'), nl.
record_then_verify(Subject, Idea) :-    item(Idea),    Subject = student,    verifies(Idea).
recording(Subject, Questions, Answers) :-    subject(Subject),    action(recorded_questions),    action(edited_article).
recruited_students(Recruiter) :-    recruiter_paid(Recruiter),    students_sent(Recruiter, lucian_academy),    unused(resource),    not_reused(from_previous_assignment).
relationship_effect(Rel) :-     friar(relates, pedagogy_x, breasonings),    Rel = 'Prepared to eat with the Friar by relating Pedagogy X to breasonings'.
relish_lunch(pm, tomato_sandwich).
remove_nd(Result, Result). % Base case when \"nd\" is not found.
repeat_lucian_mantra :-    activity(write_lucian_mantra),    write('Wrote that the Lucian mantra should be repeated today.').
repeat_until_sunset(Subject) :-    format('~w repeated the meditation practice until sunset.~n', [Subject]).```### Explanation1. **Facts and Actions**: We define steps in the journey, key actions, and subjects involved. Each step relates to various actions you've performed.
repeated_action :-     repeated_for(others, famousnesses),    threaded(thread, needle).
repeated_read(NumberOfAs, Days).
repeated_step_until_finished(Maze) :-    repeat,    step_two(Maze),    finish_maze(Maze).
request_move_by_god_lizard(Piece) :-    action(request_move(god_lizard, Piece)).
responds_to_inquiry(Product) :-    inquire(Product),    write('Answering questions about '), write(Product), nl.
result_if_breasoning(Subject) :-    fact(is_a_breasoner(Subject)),    write(Subject), write(' is logical.'), nl.
retain_heart_health(he).
returns_last_line :-    line(8, LastLine),    write('Returns the last line: '), write(LastLine).lower_plum_segment :-    line(10, _),    write('He lowered the plum segment onto his tongue.').
review_action(StudentAction, LecturerAction) :-    StudentAction == pour_soup,    LecturerAction == review,    write('Both actions are aligned for the algorithm process.').
reviews_books(Writer) :-     examines_books(Writer).
role(founder, alexis).
role_swap(Actor, Role) :-    format('~w is preparing to swap roles with the computer while experiencing inspiration from ~w.~n', [Actor, Role]).
safe_path :- verified(safe_path).
safety_of_box(D, real) :-    action(opening_box, D),    motivated_to(opening_box, spiritual).
same_amount_of_work_as_usual(complete) :-    write('I completed the same amount of work as usual.').
satisfied(Subject) :-    feeling(happy),    delegates_work.
satisfied_action(Action) :-     action(Action),    call(Action).
satisfies_condition(paint_wall, it_went_well).
scenario(examined_new_hour) :-     write('The subject found the hour empty; reflection is necessary.').
scenario(helped_them_go_home) :-     write('Children were helped to go home.').
scenario(indulge_in_sex_and_food) :-     write('The subject should find pleasure in life.').
scenario(painted_stroke) :-     write('Paint was applied correctly. A long stroke was achieved.').
scenario(prepared_to_pour_coffee) :-     write('Preparation is done for coffee pouring.').
scientific_test(theologian, quality_of_life, god).
second_action :-     enjoyed_subject(enjoyment),    write(\"Found enjoyment in the subject.\").
seenas_algorithm :-    seenas_version_algorithm_found,    write('I found the seenas version algorithm.'), nl.
self_ask_other(self, Other) :-    self_asked_question(self, Other).
self_examined(Helper) :-     format('Self examined the results of ~w', [Helper]).lit_up_body :-     meditated_on(God),    wrote_about(philosopher).
self_knowledge(Self) :-     Self = 'The self knew about the other'.
self_observation :-    self_observed_other(self, other).
self_saw_second_helper_help :-     saw_help(second_helper, self).
sensitive(Stomach) :-     found(Stomach, sensitive).
serve_dish(Dish, Accompaniment) :-    format('The dish prepared is ~w served with ~w.~n', [Dish, Accompaniment]).% Check if a line has one long handleone_long_handle(Line) :-    string_length(Line, Length),    Length > 20,  % Arbitrarily considering length for the example    format('The line \"~w\" has one long handle.~n', [Line]).
sew_lengthways :-     write('Sewed together lengthways.').
sewed_sides(Sides) :-     Sides = 'the sides together'.
shake_hands_with(Person) :-     format('Shaking hands with ~w', [Person]).
shape_cutting_done :-    observation(shape_cutting, petal_cut_and_placed_on_page).
shape_mind_reading(Method) :-    write('Shaped what I mind read with an '), write(Method), nl.
short_courses_optionally_free :- because(short_courses, optionally_free).because(short_courses, optionally_free).
should_ask_to_wear_sun_cream(Student) :-    drank_liquid_with_suction(Student).
should_not_drop(Object) :-    format('Should not drop the object: ~w.', [Object]).text_and_speech_work_together(Text, Speech) :-    format('Text: ~w and Speech: ~w go well together.', [Text, Speech]).decision_trees_tested(TypeStatements) :-    format('Decision trees of CAW commands were tested with: ~w', [TypeStatements]).
should_not_give_exemption(PhysicallyChallengedPerson) :-    physically_challenged_person(PhysicallyChallengedPerson),    not(accepted_exemption(PhysicallyChallengedPerson)).
should_prepare_to(descend_stairs, Manager) :-    took_pill(Manager, pill),    moved_fragment_to_back(tongue, tablet).
show_affection(Action) :-     expression_of_love(Action),    Action = show_love.
simulation_is_harmonious :- situation(harmonious_simulation).
sits_under_tarpaulin :-     write(\"Sitting under the tarpaulin to prepare for the humpy.\").
slide_lied_down(X) :- lied_down_as_slid_down(X).
sliding_down_slide_backwards(Fun) :-    prepared_attendees(First, Fun).
space_between_items(Subject) :-    Subject = subject(famous_subject).
spec(a, A).  % Example mapping% Self-awareness and understanding of othersself_aware(knowing_self).
speech_changes_based_on_money(Subject, Money) :-    format('The speech changed according to the amount of money ~w was able to pay: ~w', [Subject, Money]).
spiritual_preparation(Subject) :-    knowledge(Subject).
squeeze_bottle :-    line(7, _),    write('She squeezed the bottle between her thumb and index finger.').
stands(Instrument) :-     statement(_, utensil_stands(Instrument)).
stated(Result) :-     format('Stating ~w', [Result]).
stated(Stated) :-     Stated = 'Ha not I ka sic'.
step(2, write_press_release_for_meinong) :-     action(writing, character(alexius_meinong)),    write('Writing Press Release for Alexius Meinong.').
step(3, prepare_for_heaven) :-     action(preparing, character(unknown)),    write('Preparing to remain in heaven bliss by loving my partner.').step(4, shelter_under_tree) :-     action(sheltered, character(unknown)),    write('Sheltered under the oak tree with candle in pocket.').
step(5, lick_letters_shape) :-     action(licked, character(unknown)),    write('Licked the letter\\'s shape.').
step(6, verify_program) :-     action(ran_program, character(unknown)),    write('Verified that the program ran successfully.').
step(7, eat_with_chopsticks) :-     action(prepared_to_eat, character(unknown)),    write('Prepared to eat with chopsticks.').
step_two(Maze) :-    % Logic to repeat actions for navigating through the maze.
steps_nailed_on_beams(StepType) :-     nailed_steps(StepType, zigzag_beams).
student_reasoning(Student, Reason) :-    reasoning(Student, Reason).
students_checked_site :-     observation(students, checked_the_site).
students_interpreted_as_thinking :- interpretation(lecturer_students_interpretation).
studied_philosophy(Reason) :-     write(\"Studying philosophy for deep understanding.\").
studies_medicine_short_course(Dion).
study_preparation(X) :- prepared_study(X), same_quality_imagery(area_of_study, standard_for(X)).
subject(Subject) :-     reason(Subject, light_of_day).reason(dion, continuous_dialectics).
subject_concepts(subject) :-     student(liked, dion),    subject(object, essay),    Conclusion = 'The subject should not differentiate the same point about the object in the essay'.
subject_prepares(Subject) :-    write(Subject), write(' is preparing for training.').teaching_method(pedagogy).
subject_should_connect :-     event(subject_connection),    dion_uses_correctly.
subject_should_rely_on_records(Person) :-    relies_on_subject(records, Person).
subject_translation_paradox(Subject) :-     write('The subject: '),     write(Subject),     write(' suggests that the translation will conserve all meaning because '),     nl.recommended_meditation_for_recordings(Requirement) :-     write('Meditation was recommended as a prerequisite for '),     write(Requirement),     write(' because '),     nl.
submission_justification(Artist) :-    prepared_to_submit(Artist),    write(Artist), write(' prepared to submit masterpiece to the exhibition because it was ready.').
submit_verification(Person) :-    verified_submission(Person).
successful_backup(What) :-    strategies(backup_with_light),    What = light.
successfully_communicated :-    activity_answer_received(affirmative),    activity_made(money_made),    activity_letter_prepared(letter_to_queen_signed).
successfully_stacked_and_done :-    activity_stacked(objects_stacked_stably).
suitable_argument(Argument, audience(specific)) :-    sexual(Argument), !.
support_argument(State) :-    State == indulge_in_sex;    State == indulge_in_food.
support_positively(Entity) :-    supported_by(Entity, Supporter),    positive_entity(Supporter).
supports_idea(Found) :-    statement(_, found_idea_supported(Found)).
swimming_between :-     swimming(lily_pads).
synthesise(Values) :-     write('Synthesised values: '), write(Values).
synthesised(Values) :-     synthesise(Values).
tadpole_tank_prepared(Person) :-     prepared_to_take_care_of(Person, 'pet_tadpoles', 'by_filling_tank_with_water').
task_completion :-    students_completed_essays(yes).
task_prerequisites(Task, Prerequisites) :-    Task = decoded_jamcoded_paths,    Prerequisites = [psychological_understanding, previous_knowledge].
teach_at_academy :-    activity(teaching(academy)),    write('Teaching at the academy.'), nl.
teach_yoga(Person) :-    taught_yoga(Person).
teacher(professor_smith).
teaches(professor_smith, theatre_studies).
test(master_sport_stats) :-    action(demonstrated(master, sports_statistics)).
test(press_release) :-    action(press_release(noam_chomsky, meditation_essays)).
test(related_to_neuroscience) :-    action(wondered(derrida_relation, human_neuroscience)).
test(students_gift) :-    action(gave_students(materials, h_grade)).
test_algorithm(Subject) :-    write(Subject), write(' tested the algorithm.'), nl.
test_quality_of_life :-    scientific_test(theologian, quality_of_life, god).
test_vesicles_travel :-    decoded_jamcoded_paths_maze(biochemist),    opened_deck_chair(biochemist).
tested(Store, Mirror) :-     check_fruit(Store, Mirror).
theatre_studies_recordings :-    recordings_better_in(theatre_studies),    write('I noticed recordings were better in theatre studies.'), nl.
think_words_individually(Farmer) :-     write(Farmer), write(' thought of the words individually.').
third_action :-     observed_agreement(agreement),    write(\"Observed him agree with it.\").
thought_agree(Subject) :-    format('~w thought about whether others agree with the philosophy.~n', [Subject]).
thought_of_objects :- coauthor(naming_coauthor).
thought_process :-     thought_of_ideas(ideas),    write(\"Thought about the ideas until all ideas were considered.\").
time_difference(A, B, Difference) :-    A > B,    Difference is A - B.
time_difference(A, B, Difference) :-    B > A,    Difference is B - A.
took_pill(club_manager, pill).
trained_as_pedagogy_helper(student).
turned_on_lamp :-     compared_notes_successfully,     event(switch_on_lamp).stage_person_suggested :-     event(stage_suggestion).
type_descriptor(anumber).
type_idea_neatly(Subject) :-    subject(Subject),    action(typed_idea).
understand_education_challenges(Subject) :-    Subject = dion,    format(\"Lecturers are trained to fail students enrolled in two degrees at the same time.~n\").
understand_existence(God) :-    self_observed(God, no).
use(Object, Way2, Effect2) :-    object(Object),    write('Object '), write(Object),     write(' used in '), write(Way2),     write(' leading to '), write(Effect2), nl.% Example facts for useuse(whiteboard, 'writing how two uses affected people', 'providing clarity').
uses_recordings_as_teacher(Teaching) :-     write(\"Using recordings as a means of teaching.\").
verify_base_exists(Subject) :-    write(Subject), write(' verified that the base exists.'), nl.collect_As(Subject) :-    write(Subject), write(' was helped to collect As.'), nl.
verify_experience(Subject) :-    format('~w verified the entrance to meditation.~n', [Subject]).
verify_not_item(Item) :-    line(5, _),    write('Verifies that '), write(Item), write(' is not an item.').disconnect_segment :-    line(6, _),    write('First, the segment of the snake was disconnected and placed in his mouth.').
verify_process(Path) :-    % Placeholder logic to verify paths    write('Verifying process applied to: '), write(Path), nl.% Example of the process of writing an algorithmwrite_algorithm(Subject) :-    write(Subject), write(' is writing an algorithm.'), nl.
verify_reality_with_simulation :-    activity(verify_reality),    write('Verifying reality through simulation.'), nl.
victory(Person) :-     write(Person), write(' won!').
visit_fair :- action(visit_fair), human(human_2).
waited_for_noon :-    waited_until(noon).
walked_first_house :-    prerequisite_job(job).
watched_performance(Performance) :-     write('I watched the performance because '),     write(Performance), nl.
weight(apple, light).
what_is_recommendation(X) :- recommended_prerequisite(X, recordings).
when_in_honours(true).
wind_around_hand :-    activity(wind_hand_until_end),    write('He continued to wind it around his hand until its end.').
won(Person) :-     victory(Person).
wound_around_hand(Second) :-     action(Second, wound_around_hand),    reason(Second, not_twisting).
write_about_subject(Subject) :-    wrote_whos_that(yes),    critiqued_conception_argument(yes).
write_algorithm :-    wrote_text_to_speech_algorithm(computational_english).
write_algorithm(Subject) :-    prepare_for_next_part_life(Subject),    improve_efficiency(Subject).
write_as_tail(Writer) :-     write(Writer), write(' wrote \"the\" as tail.').
write_breasonings :-     write('Wrote breasonings per lyric selling the song'), nl.
write_comment_set(Person, Set) :-     prepared_to_write_first_comment_set(Person, Set).
write_comments :-    wrote_comments(onfray, rorty, line).
write_on_idea(Writer) :-     write(Writer), write(' wrote on the idea as an algorithm.').
write_press_release(comments(richard_dawkins, pedagogy)) :-    write('Press release written for Richard Dawkins comments on Pedagogy section.'), nl.
writes_positive_arguments(Dion).
writing_subjects(Students, subjects) :-     member(Students, medicine_students),     contents(subjects, [philosophy, computer_science]),     reason(subjects, difficult_transgress).
wrote(hypertext, \"Hegel Journal Article Press Release\").
wrote(prehistory, Subject) :-    Subject = 'unknown'.
wrote_about(Entity) :-     format('Writing about the work of the philosopher ~w', [Entity]).
wrote_about_subject(Subject) :-     wrote_about(Subject).
wrote_answer(1).
wrote_argument_for_students :- meditation_argument(argument_for_A_B).
wrote_comments(Writer, Topic) :-    write('Wrote probable comments on '), write(Topic), write(' by '), write(Writer), nl.
wrote_comments(onfray, rorty, line).
wrote_comparison(Author, Subject) :-    Author = 'I',    Subject = 'Richard Dawkins probable comments on the Meditation essays'.
wrote_review(Author) :-     action(Author, wrote_review),    reason(Author, reviewer_reviewed_piece).
wrote_statement(Statement) :-    format('Wrote the statement: ~w', [Statement]).
wrote_work(Subject) :-    format('~w wrote the work.~n', [Subject]).
you_ate :-     ate(cherry_tomato).
you_met :-     met(prime_minister).
 % Define the rule for speaking objects that are not heavier than the last addressed objectcan_address(Object) :-    last_addressed(LastObject),    object(LastObject, LastWeight),    object(Object, Weight),    Weight =< LastWeight.
  % Reasoning relationshipsreason_for(preparing(fabric), heat_shield).
  - **Rules**: The rules (like `founder(subject) :- reasoning(culture, small_idea).`) define relationships where certain information leads to conclusions.
  - **Rules**: These define logical relationships based on the facts. For example, the rule `walked_to_work_on_time(lecturer)` is true if the `reason(walking_on_time)` is also true, which depends on the quality of `data_and_technology`.
  - **Sequences**: The `sequence/2` predicate maps the actions to a sequential order. For instance, `sequence(1, wash_colander).` indicates that `wash_colander` is the first action.
  2. **Health Benefit Summary:**    - Similarly, you could query `?- health_summary(HealthBenefit).` to get information concerning health benefits related to babies.
  2. **Relationships**: We define relationships between the entities and actions. For example, `requested(mother, ask_for_hug)` describes that a hug was requested from the mother.
  2. **Rule**: The `show_action_reason/1` rule can be used to list actions along with the agents and reasons. For example, you can query `show_action_reason(adorn_stage_with_flowers).`.
  2. **Rules**: These define conditions under which certain actions or conclusions can be made. For example, `service_activated_when_profitable(Course)` states that the service is activated when the course is profitable.
  This representation maintains the logical flow of the actions and statements given in your original narrative but formats it to be interpretable by Prolog. You can further refine or expand these predicates based on more detailed information or requirements."],["It seems like you've provided a stream of interconnected thoughts, phrases, and concepts that touch on various topics such as logic, teaching methods, learning skills, critical thinking, and perhaps some personal experiences or tasks related to education or academia. Could you please clarify how you would like me to assist you with this text? Are you looking for a summary, an interpretation, or help with restructuring it?","To create a Prolog representation of the complex narrative you've provided, we need to identify key components and relationships among the various statements mentioned. The statements appear to be interconnected ideas or steps in a reasoning process. Here's a simplified version of how we might represent some of these ideas in Prolog:```prolog% Knowledge base% Relationships and actionsclimbing_ladder(person) :- prepare(climb_ladder).
  You can query the rules to get the specific reasons associated with each statement. For example, querying `?- reason_cleaned_shoe(X).` will tell you the cleaning actions taken (top to bottom and front to back).
      long_handle(Line) :- /* Logic for determining if it has a long handle */;   two_short_handles(Line) :- /* Logic for determining if it has two short handles */;   ```6. **Verifying Items**:   This can be represented by:   ```prolog   not_item(Item) :-       /* Logic to verify that Item is not an item */;   ```7. **Examination of the Faeces and Food**:    This could be represented as a predicate that examines a specific state.
   % Using the `all_reasons_filled` predicate?- all_reasons_filled(husband).
   2. **Advantages**: `advantage(pedagogy)` states that pedagogy is an advantage.
   2. **Rules**: Rules are logical implications that allow you to infer new information based on the existing facts. For example, `action_finished(Action) :- finished(Action, icecream).` allows you to query if a certain action has finished based on your facts.
    % Define reasoning predicatesbreasoned_out(computer, breasoning).% Query Example% To check if the biochemist prepared for the assembly with a model molecule?- biochemist_prepared(ModelMolecule).
    % Define specific actions related to reasonsaction(rotate_stick) :-    justification(write_pen).
    % Define the overall processprocess :-    action(review_of_room_essay),    action(rebreathsonings_essay_press_release),    meditation_writing,    alive(god_leader),    lineage(god_leader, me),    mind_read(pedagogue, student),    develop_algorithm(student, plant),    observed(krishna, reasoning),    cut_out_squares,    ask_same_question('What is the purpose of this inquiry?', Response),    write(Response).
    % Example Queries% Query for duration of sun exposure% ?- sun_exposure(10, 50, Duration).
    % Example Query% ?- observes(dion, Object).
    % Flying a kite as an actionaction(fly_kite, Purpose) :-    Purpose = 'To have fun and explore creativity'.
    % Rule to print all related facts to a given factprint_related(Fact) :-    findall(OtherFact, related(Fact, OtherFact), RelatedFacts),    write('Related facts to fact '), write(Fact), write(': '), write(RelatedFacts), nl.
    % Running the visualizationsrun_visualizations :-    visualize_object(rabbit),    visualize_object(dion),    visualize_object(alexis),    visualize_object(life).
    % To find the chain of actions starting from a particular actionchain_of_actions(StartAction) :-    reason_for(StartAction, Reason),    write(StartAction), write(' because '), write(Reason), nl,    chain_of_actions(Reason).
    check_new_name_in_ontology(Object) :-     % Placeholder for ontology check    write('Checked that there was a new name in the ontology for '), write(Object).
    evaluate_situation :-    contributed(doctor_quality(better), Event),    format('The better quality doctor contributed to: ~w~n', [Event]),    reason(Event, NextEvent),    format('Reasoning flows to: ~w~n', [NextEvent]),    evaluate_situation(NextEvent).
    explain_summary(Explanation) :-    write('Summary of the article includes: '), write(Explanation), nl.
    good_memory(Person) :-     not(point_forgotten),     expected_goodness(situation).
    has_courses(Teacher) :-     member(Subject, [math, science, philosophy, arts]).  % Example courses% Subject self-endorsementself_like(Subject) :-     likes(Subject, Subject).
    inspired_action(Action, Subject) :-     action(Action, Subject),    founder_justification(Subject, inspired_love).
    iron_strawberries :-     write('Ironing strawberries.'). % Second sentencereason_key_term(KeyTerm) :-     extract_key_term(KeyTerm).extract_key_term('key term') :-     write('Extracted key term.').% Third sentencestate('Ha not I ka sic') :-     write('Stated: Ha not I ka sic.').
    key_idea(Thought) :-     Thought = \"social_integration\".
    laugh_with(Person1, Person2) :-    laughed_with(Person1, Person2).
    leads_to(write(X), perform(Y)) :-    action(write(X)),    action(ask(perform(Y))).
    noticing_justification(Narrator) :-    noticing(Narrator),    write(Narrator), write(' noticed the enteric nervous system because it was fascinating.').
    observe_tree(State) :-     write('Observed the '), write(State), write(' tree.').
    performed_action(Action) :-     observed_other_fingers(because(_)),    Action = 'observed the other fingers take turns'.
    philosophical_reflection :-    action(considers(philosophers)),    action(placed_aside(nonmeditators)),    relationship(subject, liking(spiritual_reality)).
    prepares_examination(Writer) :-    write(Writer), write(' prepares to write a critical review of Heidegger and Daoism.').
    test_all_melted :-     Popsicles = [popsicle1, popsicle4],     (all_melted(Popsicles) -> write('All popsicles have melted.') ; write('Not all popsicles have melted.')).
    test_fruit(Mirror) :-    % Logic to test for fruit using mirror    fruit_on_side(store) = true.
    write(Job, Writer) :-     write(Writer), write(' prepared for the job: '), write(Job).
    ```- **How did the poltergeist get deterred?**    ```prolog    ?- deterred(poltergeist, What, Why).    ```- **What is the subject about?**    ```prolog    ?- subject(X, Reason).
    ```- Query to see how someone prepared:    ```prolog    ?- prepare(Fame).
    assert_processed_sentences(ProcessedSentences).
    assert_processed_sentences(T). % Process the rest.
    determined_sunglasses(_, Thought),    observed(meditation, Thought).
    maplist(remove_nd, TrimmedSentences, ProcessedSentences),    % Output each processed sentence.
    maplist(trim_spaces, Sentences, TrimmedSentences),    % Remove \"nd\" from each sentence and output them one by one.
    split_string(Text, \".\", \"\", Sentences),    % Remove any extra spaces from each sentence.
    sub_string(String, Before, _, After, \"nd\"),    % Join the parts before and after \"nd\".    atom_concat(Before, After, TempResult),    !, % Cut to avoid backtracking to find more occurrences.    remove_nd(TempResult, Result). % Recursively remove \"nd\".
    sum(Factors, Sum),    Result is sqrt(Sum).
    write('Lifting '), write(Object), write(' stably...'), nl.
    write('Repeating step two for maze: '), write(Maze), nl.
   - Example: `action(writing_articles, encyclopedias, reason(because, dion)).` states that writing articles for encyclopedias was done for the reason related to \"DION\".
   - For instance, predicates like `tested(vesicles).` record the action of testing the vesicles.
   - For instance, to find out what actions Alexis has taken:```prolog?- action(Action, alexis).
   - The predicate `displayed_genre(G)` could be used to invoke a genre related to literature.
   - The second recursive rule `count_h([_|Tail], Count)` matches when the head of the list is not `h`. It simply calls itself on the tail of the list without incrementing the count.
   - `action(prepared_to_earn_job, reason(earn_job_prepared)).` states that there is an action of preparing to earn a job for the reason given.
   - `added_changes(file)` - Changes were added to the file.
   - `characters_present([hand1, hand2, pot]).`: A depiction of how characters are represented.
   - `find_reasoning(man).` checks if the man's wavelength has been found.
   - `icon_selection(icons, efficiency).`: Represents the idea of using icons for better efficiency.
   - `knows(author, person)` - Person knows the author.
   - `planned(person)` - Person has a plan.
   - `published(code)` - Code was published for easier understanding.   - `paid_for_editing(chapter, person)` - Person paid for editing a chapter.   - `noticed(breasoning, person)` - Person noticed the reasoning.   - `signed_autograph(scientist, book)` - Scientist signed a book.
   - `self_aware(person)` - Person has self-knowledge.
   - `should_check(Object)` checks whether the subject has confirmed the existence of an object based on conditions given.
   - `testing_algorithm(input)` - Algorithm was tested with input.
   ```### Example QueryYou could query the system like this:```prolog?- thank_friend('Alexis', 'the knowledge he shared').
   ```### Sample QueriesHere are some sample queries you might run based on the knowledge base:- What were the reasons for writing the essay?  ```prolog  ?- reason(write_essay, Reason).
   ```2. **To verify if the pedagogue helped by tracing the rope:**   ```prolog   ?- helped(pedagogue).
   ```2. **What thoughts were present?**   ```prolog   ?- thought(Y).
   ```2. To check a specific action:   ```prolog   ?- action(use, 'you', Reason).   ```### Note:This template is quite simple and would require further refinement based on additional requirements or complexities of your data structure. Prolog excels in logical reasoning and querying deep facts and rules, so make sure to adapt and expand the model according to your application's specific needs."],["It seems you are trying to form a coherent narrative or explanation using a series of ideas that are somewhat fragmented. Here's an attempt to consolidate and clarify the content into a single, structured sentence:\"In my preparation to record answers and prevent plagiarism by observing students as they answered questions, I initially believed that applying verificationism through Prolog code, including its English variant, would be effective; however, while I understood noumenon and learned that he measured the temperature in his bedroom, I also aimed to see everyone soon by writing Richard Dawkins' probable comments for the Pedagogy section on Lucianpedia, clarifying my earlier statement of 'Ha not I ka sic,' while recognizing that the Prolog code could execute recursively, as the postgraduate was expected to transition into a lecturer.\"This sentence incorporates the main ideas you've outlined while providing clarity and continuity.","It seems you have a variety of ideas and thoughts combined into a single block of text. Let's break it down to focus on the Prolog algorithm aspect. To create a Prolog program that relates to the themes in your text, we might consider a scenario such as recording answers to prevent plagiarism while evaluating student performance or tracking various students' actions during an exam. Here's a simplified Prolog algorithm that could be used to simulate recording students’ answers to questions and check for plagiarism. ### Prolog Code Example```prolog% Facts to store answers. The structure is answer(Student, Question, Answer).
   ```2. To find what causes the icing of the cake:   ```prolog   ?- is_cause(Cause, iced_cake).
   ```2. To find which actions were prepared:   ```prolog   ?- prepared(Action).
   ```2. To get a list of all statements in order:   ```prolog   ?- statements_in_order(8, Order).
   ```2. You can get all actions that Dion should perform:   ```prolog   ?- actions_for_subject(dion, Actions).
   ```3. **What are the relationships between actions and thoughts?**   ```prolog   ?- relates(Action, Thought).
   ```3. To check actions that were done:   ```prolog   ?- was_done(X).
   ```3. To see all event relationships:   ```prolog   ?- causes(X, Y).
   ```5. **Line Characteristics**:   Implementing a check for \"carryableLine\":   ```prolog   carryable_line(Line) :-        (   long_handle(Line);           (two_short_handles(Line))).
   ```8. **Gender Decision**:   The representation of gender decision-making could look like this:   ```prolog   gender_decision(Person, WearingBra) :-       (   WearingBra = true ->           format(\"~w has decided she is a woman.\", [Person])       ;   format(\"~w's gender decision is pending.\", [Person])).
  - `prepare_for_task(Person, Task)`: Checks if a person has completed all necessary actions for a given task using the `maplist/3` predicate to apply `perform_action` to each action in the task.
  ```- To check actions for a specific subject:  ```prolog  ?- actions_for_subject(alexis).
  ```- To list the actions Alexis thinks should be taken:  ```prolog  should(ALEXIS, What).
  ```- To retrieve the metaphor:  ```prolog  ?- check_metaphor(lucian_green).
  ```- To see if the student followed the signal:  ```prolog  ?- student_followed_signal(lucian_green).
  ```- To specifically check the reasoning behind giving a pseudonym:  ```prolog  ?- action(give_pseudonym, actor(second), Reason).
  ```- Which actions did I prepare for?  ```prolog  ?- prepared(Action).  ```- Are there self-knowledge relationships?  ```prolog  ?- self_known.
  ```- Or print all actions with their reasons:  ```prolog  ?- action(Action), print_action_with_reason(Action).
  ```- To see what the meditator observed:  ```prolog  ?- observed(meditator, teacher, As, six).
- **Actions**: The predicates like `action(prepared)` represent different actions taken in relation to those entities.
- **Decision Making**: `choose_diet(Choice)` allows for a distinction between different dietary choices you may endorse based on their impacts.
- **Queries**: You can run a query like `get_reasons(2, Reasons).` to collect all reasons associated with action 2.
- **Queries**: You can run queries to find reasons for specific actions, such as `?- reason(seen, Reason).`This simple algorithm shows a basic model of actions and their corresponding reasons in Prolog. You can expand upon this base with more complex queries and rules based on your particular use case or functionality desired."],["It seems like you have provided a collection of phrases and ideas that are somewhat disjointed or fragmented. To better assist you, could you please clarify what you're looking for? Are you trying to create a cohesive narrative, summarize these points, or perhaps write an essay that connects these ideas? Let me know how I can help!","To create a Prolog algorithm that encapsulates the ideas you presented, we can break down the statements into logical predicates. The sentences you provided are quite abstract and metaphorical, so I will interpret them in a simplified manner suitable for logical representation.
- **Rules**: Rules allow us to make inferences based on the facts. For example, `contacted_god(Endorsed)` checks if someone has prepared to go to heaven by endorsing God, which means they have \"contacted\" God.- **Queries**: You can query the knowledgebase to extract information or check certain relationships.
- **Rules**: The predicates like `healthy_choice(X)` provide logic that needs to be satisfied to consider a choice as healthy, based on its components.
- **Rules**: These derive new information from existing facts, such as `interrelate(X, Y)` which implies that if `X` has a personality and `Y` has a character, then they interrelate.
- **Tasks**: Group actions into broader categories (e.g., `task(verification, [verify_content, include_in_bibliography])`).- **Rules**:  - `perform_action(Person, Action)`: Checks if a person did a specific action.
- **statements_in_order/2**: This rule collects all the statements indexed from 1 to N, providing an order of statements. ### Example QueriesTo use the above code, you'd run Prolog queries like so:1. To find out the next statement based on a specific statement number:   ```prolog   ?- find_chain(1, Chain).
- Call `find_dependent_actions(drive_to_door_with_tricycle).` to see what actions depend on that particular action.
- Prolog excels in representing complex relationships and logical conditions rather than executing real-world actions, so depending on your goal, you might need a more sophisticated structure or additional predicates."],["It seems you are providing a series of statements that appear to relate to a variety of topics involving actions, analysis, and experiences. Below is a combined response that follows the structure of your request, integrating all the components into a coherent single sentence:\"First, he traced a rope through the leftmost turns of the maze with a blindfold as the psychoanalyst analyzed the life; third, I repeated this until I had read the number of As on each day because I loved Martha Nussbaum, which I did by writing Alexius Meinong's probable comments on the Medicine essays, and third, I rubbed rosin on the bow to prepare to do this again, while the disabilities teacher-student helped the self-preservation of a student by reading the map, and I followed up the student for work by using any and putting the code into the predicate.\" Let me know if you'd like any changes or further assistance!","To construct a Prolog algorithm based on the sentences you've provided, it appears that you want to model a sequence of actions or tasks involving various subjects and objects. Each of your sentences describes a cause-and-effect relationship or a sequence of activities. We can create a Prolog program that defines these actions as predicates and describes the relationships between them. Below is an example of how you might represent this in Prolog:```prolog% Define a predicate for each actiontraced_rope(LeftmostTurns) :-     write('Traced a rope through the leftmost turns of the maze (blindfolded).'), nl.
- Query using `query(X).` to find statements based on the actions.
- Rules allow for deduction. If a certain condition is met (e.g., `cooked(spoon)`), then you can conclude that an action (`did_cook(spoon)`) can also be true based on the implications established.
- The last `because(dancer_prepared_for_ball)` has two alternatives (either `unfolded_sunshade` or `cut_olive_into_squares`), which captures the parallel actions.
- Use queries such as `?- can_perform(measure_students_achievement).` to find out if you can perform the measurement of students' achievement based on the chains of preparations.
- You can test the printing of a specific action with its reason, for example:  ```prolog  ?- print_action_with_reason(took_out_of_mouth).
2. **Complex Relations**: The predicates can take more complex structures, as shown with predicates like `liked(me, you, reason(teacher))`, where the reasons for liking are expressed.
2. **Justifications**: We store justifications for why someone should be a founder (e.g., `founder_justification(alexis, inspired_love).`).
2. **Rules**: Each rule combines these facts logically (e.g., `hint_worked :- event(hint_works), event(connected_arguments).`).
2. **Rules**: These rules define logical connections between facts. For instance, `worked_if(Everything) :- pressed_play, everything_worked.` means that \"everything worked\" is true if \"pressed play\" is true.
2. Query the program with `?- count_breasonings('your_keyword', Count).` to find the number of occurrences of `'your_keyword'` in the predefined list of breasonings.
2. The next set of rules establishes dependencies. For example, `desired_space(X)` checks if `X` desires the warm space, while `blocked(X)` checks if `X` is blocked by a third party.
2. We collect all key ideas into a list with `findall/3`, which gathers all the values that satisfy `key_idea(Idea)`.
2. `pedagogue(Pedagogue).` - A predicate for a pedagogue created by a peer.
3. **Getting Reasoning**: You can call `get_reasoning(Fact)` for any fact to see the reasoning output.
3. **Queries**: You could query the program to find out the actions and their reasons, for example, using `?- find_reason(underlined_apple).`.
3. **Rules**: Some simple rules can be created that infer new information based on existing predicates. For instance, `enjoy(User, Attendees)` can be true if the user prepared to enjoy attendees through certain actions.
3. Call `find_related(ActionName).` (replacing `ActionName` with any action, e.g., `meditation_research`) to see which actions are related.
3. `study_area(Peer, AreaOfStudy).` - A predicate that connects a peer to an area of study.4. `student(Student, Pedagogue).` - A relation indicating a student is associated with a pedagogue.
4. **Sample Query**: You can query `process_writing_arguments(Student)` to see how these relationships support arguments made by various \"subjects.\"This code serves as a foundational representation and can be expanded further based on specific relationships and additional complexity you wish to include. If you have more precise requirements or particulars about how you'd like to structure this, please provide them!"],["It seems like you're expressing a complex thought or a series of ideas that may need some clarification or structure. What you've written appears to touch on themes of organization, personal responsibility, reasoning, benefits of technology, governance, self-awareness, discovery, and the synthesis of ideas. To help you better, I will attempt to break down the key components of your message and rephrase it in a clearer manner:1. **Sorting Ideas**: There may be various ideas or themes that can be organized without eliminating duplicates. 2. **Responsibility with Information**: I take responsibility for maintaining the integrity of all files because I understand the importance of keeping everything intact.
5. `professor(Professor).` - To represent a professor.
6. `text_to_speech_algorithm(Algorithm).` - To represent the text-to-speech algorithm.
7. `comments(comments).` - To represent high-quality comments, possibly by different philosophers.
:- applying_sunscreen_justification(you).
:- found_block_justification(person).
:- found_students_justification(students).
:- lifting_justification(she).
:- line(\"I prepared to reach nirvana not do anything wrong because DION Line\").```### Explanation1. **line/1**: This predicate serves as the main entry point that processes a line of text and provides an output of how many long and short handles are present in that line.
:- need_high_marks(me).:- prepare(me, morning_tea, outside).```### Explanation:1. **Facts**: In Prolog, we define constants or known facts. For instance, `crew_member(h).` signifies that we have a crew member named 'h'.
:- noticing_justification(narrator).
:- prepared_to_eat_justification(you).
:- submission_justification(artist).
?- action(brush_shoe).
?- action(prepare_load).
?- ask_about_writing(mary).?- dislike_writer(alice).?- verify_not_item('ItemA').
?- breasoning(meditation, 'it improves overall well-being').
?- can_conclude_example('Machine learning can assist in understanding complex datasets.').
?- can_conclude_example('Taking the pet to the vet is based on statistical decision-making.').
?- check_line('the happy horse hops high').
?- clippered_beard(why).
?- compliance('Health', 'regulation').
?- did(dion, played_music).
?- drink_from_flask('Robotics Man', 'Thermos Flask').
?- evaluate_translation('Original Text', 'Translated Text').
?- examine_faeces('Sample 1').
?- express_intent(richard_dawkins, Intent).
?- find_reasoning(man).
?- found_a_for_thought(TimeTraveling).
?- gave_presents(Reason).
?- gender_decision('She', true).
?- group_dynamic(bob, charlie).
?- health_summary(HealthBenefit).
?- imagery_available(God).
?- king_answered(king1, Answer), Answer = correct_answer.
?- light_behavior(calculate_ratio).
?- make_judgment('Martha Nussbaum', 'relevant information from the time').
?- music_tagged(music1).
?- new_algorithm_generated(Person).
?- performed_action(Action).
?- positioned_finger(First).
?- preferred_writing_to_speech, better_checked(writing, speech).
?- prepare_time_code_in_leaf(Person).
?- prepared_to_concentrate(health).
?- prepared_to_explain(father, high_position, Y).
?- prepared_to_play(Person).
?- reason_cleaned_shoe(X).
?- reason_decision(alexis).
?- reason_for(wrote_argument(ab, training_in_medicine), X).
?- reason_people_came(X).
?- should_not_visualise_reason(What).
?- should_prepare_to(descend_stairs, club_manager).
?- sorted_unique_key_ideas(SortedIdeas).
?- specific_name_reasons('important concept').
?- squeezed_water(First).
?- student_background(student1).
?- text_to_speech('Hello, this is a text to speech conversion.').
?- trace_maze_solution(maze1, solution1).
?- wrote_on(daoism).% To check the conclusion chains?- analysed_companies_and_people.
?- wrote_on(history_of_education).
```### ConclusionThese simple Prolog predicates represent some of the concepts from your text. The details such as the logic within `long_handle`, `two_short_handles`, and `not_item` would need to be filled in based on your specific requirements."],["I recorded the moment because I was happy to see the bright colors; as the inspector checked the site, the user engaged with it, which I did by feeling the bow tie; the neuroscientist closed the book about the brain after first loving licky, while the farmer harvested the wheat because I helped each person with medicine, and rural area residents wrote pedagogies, which I accomplished by finding the envelope.","The task you've presented seems to involve constructing a Prolog algorithm that generates or processes a series of statements or events based on the structured phrases you provided. Each of these phrases contains a cause-and-effect relationship or an explanation of reasoning. Here’s an example Prolog code snippet that could define these relationships:```prolog% Define events with their associated reasonsevent(moment_recorded, 'I recorded the moment', because(happy, 'I was happy when I saw the bright colours')).
```### Example QueriesYou can query this representation in Prolog to explore the relationships:1. **What actions have been taken?**   ```prolog   ?- action(X).
```### Explanation- **Facts**: Each `reason/2` predicate establishes a reason for an action. For example, `reason(licked_mango_ice_cream, because(enjoyed_airconditioned_comfort)).` means \"I licked the mango ice cream because I enjoyed the air-conditioned comfort.\"  - **Action predicates**: Separate predicates like `first_action/1`, `second_action/1`, etc., are included to organize the actions by their sequence.
```### Explanation- **Facts**: We use Prolog facts to represent certain truths about your statements (such as `reasoning(culture, small_idea)`).
```### Explanation- Each **event** is represented as a fact in the form of `event(EventName)`.
```### Explanation1. **Events as Facts**: Each line defines an event or a relationship using facts. For instance, `blames_statement(prince, alexis)` represents the fact that the prince might blame Alexis.
```### Explanation1. **Facts and Predicates**: Each line represents a fact or a rule. For example, `recorded_width_of_ruler(ruler_1, Width).` indicates that there is a ruler with a specific width recorded.2. **Relationships**: You can create rules to define how these facts relate. For instance, you can outline that specific technology is used for jobs.
```### Explanation1. **Facts**: Each `action` fact represents some activity mentioned in your input. For example, `action(place(scraper, base(chopstick))).` indicates that a scraper is placed at the base of the chopstick.
```### Explanation1. **Facts**: We create facts representing the main actions and ideas derived from the sentences. Each fact can be read as a statement about what happened (e.g., `likes(budgerigar).` states that the budgerigar is liked).2. **Summary Rule**: The `summary/1` rule uses `findall/3` to gather all facts related to these ideas into a list called `Facts`. We then use `atomic_list_concat/3` to turn this list into a single string that serves as a summary.
```### Explanation1. **Facts**: We define facts about the actions and states you described, such as `disembarked_from_bus(john)` and `medical_device(parkinsons, memory_return, pain_prevention, headache_prevention)`.
```### Explanation- **Facts**: We define simple facts that can be true or false based on your narrative. For example, `started_with_tens(politics)` implies that the subject started with a certain amount in politics.
```### Explanation1. **Actions Definition**: I've defined each key action as a fact (`action(...)`).
```### Explanation1. **Data Representation**: The facts `answer(Student, Question, Answer)` represent students' answers to questions.
```### Explanation1. **Facts**:    - `teacher(teaching_experience, 6).`: Represents a teacher who has collected maximum As.
```### Explanation1. **Facts**: We define facts about actions attributed to subjects (e.g., `action(lift_paint_canister, alexis).`).
```### Explanation of the Code1. **Facts**:    - Each of the phrases can be converted into a fact. For example, `high_life(Identifier)` states that a person (`Identifier`) lived a high life.
```### Explanation of the Code1. **Facts**: Each statement is captured as a fact in the database. For example, `identified_problems(lucian_cicd, solution_to_problems_in_code)` states that Lucian CICD identified problems and suggested solutions.
```### Explanation of the Code1. **Facts**: We define each action or state (like `read_encyclopedia(academy)`, `prepare_think_next_reasoning`, etc.) as a fact. These represent the events or states that contribute to the overall reasoning.
```### Explanation of the Code1. **Predicates**: Each `action` predicate describes an action taken by an actor with a related reason or method. For example, `action(find_destination, actor(third), reason(because)).` represents the action of finding a destination done by an actor, labeled as \"third,\" with the reason being \"because.\"2. **Deletion Rule**: The `deletion_rule` defines a rule for manipulating a list (representing lines of text), where the first instance of `Item` is deleted from `Line`, resulting in `NewLine`. This is represented as a Prolog clause that specifies how to delete elements from a list.
```### Explanation of the Code1. **Facts**: We define basic facts about various subjects. For instance, `communicates(world, subject)` states that the subject communicates with the world.
```### Explanation of the Code:1. **Facts**: Facts in Prolog are expressions that are unconditionally true based on the narrative. For example, `designed(hermaphroditic_grape_vine, posts).` represents the fact that a hermaphroditic grape vine was designed at the posts.
```### Explanation of the Code:1. **Facts**: We define simple facts to represent entities' relationships. For example, `loved(papa_smurf)` indicates that the subject loves \"papa_smurf\".
```### Explanation of the Code:- **Facts**: These are used to represent basic truths about the relationships you described. For instance, `nature(blue_ocean)` indicates that the blue ocean is a part of nature. We also create other relationships like self-awareness and rights for children.
```### Explanation of the Program1. **Facts:**   - We declare facts such as `endorsed(malcolm_turnbull).` which states that Malcolm Turnbull is endorsed.
```### Explanation of the Prolog Code- **Facts**: Each action is declared as a fact using `action/1`. For example, `action(wash_colander).` represents that washing the colander is an action.
```### Explanation of the Prolog Code1. **Facts**: Each line in the code represents a fact about an action taken or a relationship that exists. For instance, `endorsed(local_products)` states that local products were endorsed.
```### Explanation of the Prolog Code1. **Facts**: Each of your statements is represented as a fact in Prolog. For example, `activity_completed(perfection_level_completed).` indicates that the perfection level was completed.
```### Explanation of the Prolog Code1. **Facts**: Each statement from the text is represented as a fact. For example, `comment(chomsky, pedagogy_indicators).` indicates that Chomsky commented on pedagogy indicators.
```### Explanation of the Prolog Code1. **Facts**: We define what we know as facts. For example, `existence_explored(light)` indicates that existence was explored with the concept of light.
```### Explanation of the Prolog Code:- **Facts**: These are statements that are unconditionally true. They represent your original text points like `meditation_written`, `lollipop_in_mouth`, and `decoded(Jam, Direction)`.
```### Explanation of the Prolog Code:- **Facts**: These are the basic assertions about your data. For instance, `saw(self, other)` states that \"self saw the other.\"- **Rules**: These are logical inferences based on your facts. For example, `valid_exam_writing(Person, Subject)` checks if a person wrote an exam and if the subject meets a certain condition.
```### Explanation of the Structure:- **Facts**: These are simple truths we assume to be true based on the statement. For example, `wrote(writer, books).` indicates that the writer wrote the books.
```### Explanation of the code:1. **Facts and Rules:** The predicates (like `read(thoroughly)` or `wrote_reviews(2)`) represent facts about the processes and actions described. Rules (like `biochemist_prepared/1`) define relationships or conditions under which certain actions take place.
```### Explanation:1. **Actor**:   - The main actor is defined using `actor(john).` Here, \"john\" is the person performing actions.
```### Explanation:1. **Base Facts**: We define simple facts for each primitive statement, such as `is_alive(god)` or `wrote_about(self, other_person)`. These represent the core ideas.
```### Explanation:1. **Facts**: Basic statements that describe relationships or conditions. For instance:   - `pedagogy_written(rural_area_residents).` indicates rural residents write pedagogy.
```### Explanation:1. **Facts**: Each action from your statement is represented as a fact. For example, `action(prepared_hat_on_you)` is a fact indicating that the action \"prepared to put a hat on you\" has occurred.
```### Explanation:1. **Facts**: Each event is represented as a `event(Event, Person).` statement, storing who is responsible for what action.
```### Explanation:1. **Facts**: Each fact follows the format `reason(A, B, C)`, which identifies that A had a reason (B) for doing something (C). For instance, `reason(philosopher, wrote_reason, argument).` indicates that the philosopher wrote reasons for an argument.
```### Explanation:1. **Facts**: Each fact states an action or a relationship. For example, `prepared_to_look_out(architect, south_window)` indicates that the architect is prepared to look out of the south-facing window.
```### Explanation:1. **Facts**: Each individual action or state is represented as a fact in Prolog. For example, `finished_writing(class).` means that a class has been finished writing. 2. **Rules**: The `process_order` rule aggregates all the facts into a logical sequence, which can be understood as a workflow or series of events. 3. **Execution**: The `execute_instantiation` predicate serves to execute the defined process order and print a message indicating successful completion.### Usage:You can load this Prolog code into a Prolog interpreter (such as SWI-Prolog) and run the query `execute_instantiation.` to see the results.
```### Explanation:1. **Facts**: Each of your sentences is represented as a fact. For example, `prepared(journal_article).` means that an action of preparing a journal article has taken place.
```### Explanation:1. **Facts**: Each statement has been captured as a fact indicating a cause-and-effect relationship. For example, `causes(a, dion).` indicates that getting an A is linked to \"DION\" in some causal way.
```### Explanation:1. **Facts**: These are simple declarations of truth based on the statements in your text. For instance, `prepared_to_record(alexis).` asserts that Alexis is prepared to record the result.
```### Explanation:1. **Facts**: These are written in the form of predicates describing the various tasks you've accomplished. For instance, `wrote(gitL)` and `created_objects([x, y, z])`.
```### Explanation:1. **Facts:** Each of the narrative statements is represented as a fact. For example, `good_experience(good_here).` states that it was good here.
```### Explanation:1. **Predicates for Actions**: Each 'action' is defined with the corresponding 'actor'. For example, `action(reviewed_piece, reviewer)` states that there was a review done by the reviewer.
```### Explanation:1. **Predicates**: The `did(Action, Subject, Reason)` predicate relates actions taken by subjects for specific reasons.
```### Explanation:- **Entities**: The predicates like `entity(healthy)` define the different entities such as health, friends, existence, etc.
```### Explanation:- **Facts** are statements about the world that are accepted as true (e.g., `put_cream_in_bowl(second_person).`).
```### Explanation:- **Facts**: Describes what actions have been taken by different subjects (e.g., `did(martha_nussbaum, write_press_release)` means Martha Nussbaum wrote a press release).
```### Explanation:- **Facts**: Each `fact` represents a piece of information derived from your text. For instance, `watched_action(author('he'), action('write_subject', 'ontologised_professional_life')).` captures the action of watching someone write.
```### Explanation:- **Facts**: Each line from your text is represented as a fact in Prolog. For example, `ate(processed_excrement, first).` indicates that you ate processed excrement first.
```### Explanation:- **Facts**: These are the base statements (e.g., `is_vegan(rissole).`) that represent the data you have, such as what food is, its health benefits, and the structure of family size.
```### Explanation:- Each fact (like `did_this(crossed_creek, __).`) represents an action taken by a subject.
```### Explanation:1. **Actions Representation**: Each nature of action is recorded as `action(Action, Subject1, Subject2, Context)` where appropriate.
```### Explanation:1. **Actions and Reasons**: Each action taken is represented as a fact in Prolog. For instance, `action(cook_watermelon).` states that the action of cooking a watermelon exists.
```### Explanation:1. **Data Representation:** Each line is represented using a functor `line(Type, Handles)` where `Handles` is a list of handles (which could be `long` or `short`).
```### Explanation:1. **Fact Definition**: Each statement you've given is represented as a fact in Prolog. For example, `statement(1, wrote_about(Third, him)).` indicates that \"Third wrote about him.\"2. **Rules**: After defining the facts, you can create rules that allow you to infer new facts or check conditions based on your statements.
```### Explanation:1. **Facts and Predicates**: Each of the statements from your text is translated into facts. For example, `comment(richard_dawkins, pedagogy_indicators).` reflects that Richard Dawkins commented on pedagogy indicators.
```### Explanation:1. **Facts**: Each `action/1` predicate represents an action or statement that you mentioned. For example, `action(wrote(nice_person)).` indicates that you wrote \"you are a nice person\".
```### Explanation:1. **Facts**: Each `event(...)` predicate represents a fact that corresponds to one of the sentences you provided.
```### Explanation:1. **Facts**: Each action and its corresponding reasoning are represented as facts. For instance, `action(eat_whole_apple, preparing_holily).` means that the action of eating the apple is associated with preparing to behave holily.
```### Explanation:1. **Facts**: Each action is represented as a fact with a potential detail and reason. For example, `action(preparing_to_clean_desk, empty_shavings, hole_of_pencil_sharpener).` states that the action of preparing to clean the desk involves emptying shavings through the hole of the pencil sharpener.
```### Explanation:1. **Facts**: Each of the provided statements is introduced as a fact in the form `reason(Topic, Reason)`, where `Topic` is a unique identifier for the statement, and `Reason` is the actual text you're interested in.
```### Explanation:1. **Facts**: Each of your statements is interpreted as a fact. For instance, `performed_action(hose_head, person).` implies that there is a person who performed the action of hosing the top of their head.
```### Explanation:1. **Facts**: Each piece of your input is turned into a fact. For instance, `strategies(backup_with_light)` specifies that backing up with enough light is a strategy.
```### Explanation:1. **Facts**: Each statement from your reasoning can be represented as a fact in Prolog. For example, `supports(dadirri, meditation_philosophy_graduates).` means \"Dadirri is supported in university meditation philosophy graduates.\"2. **Rules**: The rules are used to derive new truths based on existing facts. For example, a rule can state that if `Article` is 'DION', then summarize the ontologies.
```### Explanation:1. **Facts**: Each statement is represented as a fact in Prolog. For example, `prepared_to(teacher, lucianic_meditation).` captures your first statement about preparing to teach Lucianic Meditation.
```### Explanation:1. **Facts**: Each statement you provided is turned into a fact. For instance, `found(pedagogy_helper).` corresponds to \"First I found the pedagogy helper\".
```### Explanation:1. **Facts**: The facts are simple statements derived from your text. For example, `likes(icecream, licking)` expresses that ice cream is related to licking.
```### Explanation:1. **Facts**: These are basic assertions that represent what you described. For example, `police_officer_preparation(press_release).` simply states that a press release was prepared as part of the police officer's preparation.
```### Explanation:1. **Facts**: We define basic facts using simple predicates that represent the different components of your narrative (e.g., `enamoured(succleton)`).
```### Explanation:1. **Facts**: We define individual facts about actions, such as `time_travel(safe_time)` and `prepared(presentation, heidegger_laozi)`. Each fact describes a specific state or action.
```### Explanation:1. **Predicates**: Each statement is represented as a predicate. For example, `observed(robot, recognition)` reflects your mention of the robot recognizing something.
```### Explanation:1. **Predicates:** Each predicate captures a component of your narrative. For instance, `viewed_actor_representation(pedagogy)` reflects your observation about an actor's representation of pedagogy.
```### How to Use1. **Defining Actions:** Each action corresponds to an event in your original sentence. For instance, `action(breasoned_out, as).` indicates that you reasoned out something (as).
```### How to Use This Prolog Code:1. **Define Facts**: Each fact defined corresponds to statements from your narrative. For instance, `set_timer(sand_timer).` reflects your action of setting the sand timer.
```### How to Use This Representation1. **Facts**: Each line defines an event that occurs in your narrative (e.g., `event(computer_science).`).
```### Querying the Knowledge BaseYou can write queries to explore the relationships you've established. For example:1. To check why an action was taken:   ```prolog   ?- reason(Action, Reason).
```### Step 2: Define rules or queriesNow that we have the facts, we can define some rules or queries to retrieve or process this information. For example, we might want to find out all actions taken by a particular subject:```prolog% Find all actions for a given subjectactions_of_subject(Subject, Actions) :-    findall(Action, action(Action, Subject), Actions).
```### Step 3: Example QueriesYou can now ask Prolog questions like:1. **What actions did `first` take?**   ```prolog   ?- actions_of_subject(first, Actions).
```### Step 3: Example QueriesYou can now pose queries based on the rules and facts defined above. Here are some example Prolog queries:```prolog% What actions did I take for happiness in medicine??- actions_related_to_reason(happiness_in_medicine, Action).
```### Step 3: Querying the Prolog ProgramYou can ask Prolog questions based on the statements and rules defined. For instance:- `?- personal_justification(\"John\").`- `?- philosophy_in_action(\"Alice\").`- `?- should_understand_and_check(\"some_source\").`### ConclusionThis Prolog program establishes logical relationships based on the narrative provided. It defines who performs what action and can infer additional relationships through querying. If you have specific requirements or need more advanced features (such as context or deeper reasoning), please provide further details!"],["Your text presents an intriguing blend of abstract ideas that weave together themes of nature, meditation, pedagogy, professionalism, and personal growth. Let’s break it down into clearer components and explore the ideas presented:1. **Nature and Joy**: The blue ocean symbolizes tranquility and joy, likely representing the peace that nature can bring. This joy is amplified through meditation, which connects us to our inner selves and the world around us.
```### Step 3: Running QueriesNow you can run queries to see how actions relate to observations:```prolog?- sequence_of_actions([look_for_table_cell, test_square_red, put_hands_on_back, feel_comfortable_on_stage, use_dion_two_correctly, write_about_time_space, move_on, use_traditional_pedagogy, prepare_to_measure_lengths, take_off_for_work]).
```### Step 3: Running the Prolog ProgramYou can run simple queries to check the relationships and outcomes. For instance:1. **To see if DION placed the lettuce:**   ```prolog   ?- plated_item(dion, lettuce).
```### Step 3: Using the Prolog ProgramYou can query the Prolog program to retrieve information or ask questions about the interactions:For example:```prolog?- hates(X, love_politics).
```### This Prolog program includes:- **Facts**: These are simple assertions, like `has_personality(text)`, which assert that the text has a personality.
```### Usage1. You can query the reason why Alexis had the right to vote:   ```prolog   ?- find_reason_for_action(alexis, right_to_vote, Reason).
```### Usage- Load the Prolog file and query the `find_all_connected/2` predicate with a statement ID to get all directly connected statements. For example, querying `find_all_connected(1, X).` will yield all the statements connected to the first statement.
```2. **Define Rules for Logical Relationships**   We can define rules that infer some relationships based on these facts. ```prolog% A person can prepare for politics if they started with tensprepared_for_politics(Person) :-    started_with_tens(politics).
```2. **Defining Rules**: You can establish rules that capture some of the behavior suggested in your text. ```prolog% A rule for speaking about objectscan_speak_about(Object) :- not_large(Object), subject_speaks.
```2. **To capture relationships**, you can create more rules or relationships between these predicates. For instance:```prolog% Relationships or reasoning rulesconcerns(Subject, Reason) :- gave_visually_impaired(Reason).
```3. **Example Queries**:   You can query the system to understand what Dion does, or any other actions involved in the narrative:```prolog?- query_actions(dion).
```4. To use the Prolog logic:- You can query `achieves_success(person).` to check if the person achieves a successful outcome based on the stated conditions.
```In this Prolog code:1. **Facts** are represented by assertions that are true. For example, `robot(made_out_of_breasonings).` tells us that the robot is made out of breasonings.
```This model captures the main logical components of your original complex statement in a simplified way, appropriate for Prolog's logic programming paradigm."],["It seems like you're providing a series of disjointed sentences or fragments that are strung together. If you want to convey a specific message or topic, it would be helpful to clarify the context or main idea you're trying to express. Alternatively, if you're looking for editing help to improve clarity or flow, I can assist with that. Please let me know how you would like to proceed!","To implement the aforementioned reasoning and actions in Prolog, we can create a series of rules and facts that dictate how conclusions can be drawn or what statements can be made based on provided conditions. Below is a Prolog algorithm that represents this reasoning structure:```prolog% Define facts representing actions and motivationsaction(prepared_to_earn_job, reason(earn_job_prepared)).
```You can also use this to print the reason for the action like so:```prolog?- action(perform_action_again, john), reason(because, Reason).
about_inter_subjectivity(example).
accepted(serotonin, king).
accepted(ticket, this_time).
accreditation_will_work(yes).
achieves_goal(X, Y) :- goal(X), Y is achieved.
action('ate_bagel', 'He did this by eating a bagel at each eatery').
action('character_wanted_to_meet', 'ALEXIS The subject identified that the character wanted to meet the other character').
action('communicated_importantly', 'Nietzsche communicated importantly').
action('held_it_aloft', 'Third I held it aloft').
action('noticed_breasoningesquenesses', 'I noticed the breasoningesquenesses').
action('observed_use', 'Third I observed her use it to publicise pedagogy').
action('prepared_to_quench_thirst', 'In this way I prepared to quench my thirst by drinking the triculating water').
action('read_pill_face', 'I did this by reading the face of the pill with writing on it').action('encouraged_vegetarianism', 'Vegetarianism is encouraged and other gifts may include better health and happiness').
action(Action) :- write('Performed action: '), write(Action), nl.
action(Author, wrote_review).action(Subject, knew_about_not).
action(Preparation, prepared_stay_black).
action(Second, liked_you).
action(Second, wound_around_hand).
action(Third, checked_for_it).
action(Third, observed_become_god).
action(add_one_to_count, new_treacle_cupcake).
action(added_code).
action(advertise_lucianic_meditation, \"prepared to advertise Lucianic Meditation the Lucian Academy\", \"by making a big glittering sign\").
action(advised, press_release, lucianpedia).
action(affirm_accreditation).
action(agent(guardian), prevent(stillbirth)).
action(agent(observer), notice(bees_falling)).
action(agent(observer), observe(eternal_life)).
action(agent(working), move(tomato, right)).
action(agreed_semantics_back).
action(alexis, connect_arguments, 'I prepared to program the robot to customise the cars interior for the journey').
action(alexis, downplay_climax, 'I prepared to downplay the climax by writing the Press Release for Noam Chomsky’s probable comments on the Medicine essays').
action(alexis, eat(carrot), 'to maintain health').
action(alexis, endorsed, objects_with_positive_enough_attributes).
action(alexis, insert_star).
action(alexis, practice(green_sutra), 'to improve skills before birth').
action(alexis, pump_up_tyres, 'to prepare for a swim').
action(alexis, turn_train, 'I prepared to turn the train around on the circular track by turning the lollipop around').
action(alexis, write(jazz), 'to express creativity').
action(alexis, write(part_of_room_essay_secondary), 'to work on school assignment').
action(alexis, write_about(too_many_cooks), 'to explain that too many cooks spoil the broth').
action(alexis, wrote, analysis).
action(algorithm_is_pedagogue).
action(algorithms_not_necessary).
action(aligning_tofu).
action(allow_twist_narrative, 'I prepared to allow for a twist in the narrative').
action(allowed_breasoning, subject, \"The subject should allow the reasoning to leave her lips\").
action(analyzing_songs, \"music students analyzing my songs\").
action(answered_question).
action(appearance_sensitivity).
action(applied_zinc_cream, she).
action(applying_powder).
action(applying_sunspray).
action(approved_of_it).
action(argument_written).
action(articulate_language) :- spoken_language(articulated, list_prolog).
action(ask(changes_in_text)).
action(ask(pat, galah)).
action(ask_explanations, ideas) :-     reason(ask_explanations).
action(ask_for_work).
action(ask_wear_sun_cream).
action(asked_if_speech_has_character).
action(asked_if_text_has_personality).
action(asked_job_applicant, 'First I asked the job applicant how she earned the job.').
action(asking_to_wear_hats, subjects, reason(because, changes_in_future_drafts)).
action(asperger_dissertation, reason('The Asperger patient prepared to carry out a dissertation by rote memory using his body as a basis for a mnemonic for the essay structure')).
action(assess_mark).
action(assessed_case).
action(ate_less_food, person).
action(ate_strawberries, first).
action(attach_meaning).
action(attach_meaning, dion).
action(autist, prepare).
action(autocomplete_repeated_text).
action(automate_tasks, 'I could automate tasks').
action(avoid_problems, 'Meditation Medicine and Pedagogy Students are helped to avoid problems e').
action(backup_files).
action(becoming_writer).
action(bite_and_warm).
action(blow_up_balloon).
action(breason_out).
action(breason_out, breasonings).
action(breason_out_action).
action(breason_out_arguments).
action(breason_out_next_A).
action(breasoned_BAG_output, reason('I breasoned out the BAG output')).
action(breasoned_out, as).
action(breasoning_algorithm_consolidated).
action(breasoning_noticed).
action(breasoning_sequences).
action(breathing_deeply, third_instance, reason(commission_translation)).
action(bring_world_peace).
action(broke_in_half).
action(broken_down, at_point, \"These sections were then broken down across the spec at this point of the algorithm\").
action(brush_shoe) :- packed_up(computer_program).
action(brush_teeth, child, \"He brushed the first child's teeth\").
action(built_walls, second).
action(buy_sun_cream, in_second_month).
action(buying_laptop, student).
action(cLOSED_refrigerator_door).
action(calculate_mark).
action(calculate_ratio, light).
action(calculate_time_to_eat_apples).
action(calculated_time_to_eat_apples, reason(time_taken(apples_store))).
action(calculating(edge_of(car), edge_of(lane))).
action(calculating_circumference).
action(call).
action(call_parakeet).
action(call_recursive_algorithm).
action(called_Aigs).
action(campaign, meditation_philosophy).
action(captain, plan_trip).
action(casual_walk, 'Walked casually').
action(catch_him, he, reason(perform_action)).
action(celebrate).
action(check).
action(check_societology, \"I prepared to check that societology was functioning well\").
action(check_table_side).
action(check_tests).
action(check_utensil).
action(checked_paraphrase, reason(paraphrased)).
action(checking_sentences).
action(cheese_processed).
action(chewed_swallowed_rice, third).
action(chisel_name(black_granite)).
action(choose_fabric).
action(choose_fabrics) :- chose_colours(dark_coloured, school_bag).
action(choose_relativity).
action(choose_setting).
action(chose_place).
action(cleaning(shoe)).
action(climb_ladder, maintain_planetarium).
action(close_refrigerator, door).
action(closed_teeth_over_tablet_fragment).
action(collect).
action(collect_comment, subject).
action(collected(competency, well_known)).
action(comfortable_stage, was_comfortable_on_stage).
action(command).
action(commisioned_translation).
action(committed_file).
action(communicate).
action(company, delegate).
action(complete_area_of_study).
action(complete_essays, 'The students completed the essays').
action(compressed, marshmallow, \"He compressed the marshmallow by raising his tongue slightly\").
action(computed_text_speech).
action(concurrence(person, politics)).
action(conduct).
action(confirmed_primary_in_secondary, third_person).
action(connect_to_api, people).
action(connect_to_right_meaning, correct_subject).
action(connected_critical_as).
action(connected_pedagogy_helpers).
action(connecting_students_reason).
action(considers(philosophers)).
action(construct_intelligence_test, person).
action(constructed_robot(height)).
action(control_model_car).
action(converted_famousness).
action(cook).
action(cooked_rolled_oats, first).
action(copywrite(everything)).
action(counting_blades_of_grass, He).
action(crawl_through_hole, 'Crawled through').
action(cream_pie, preparation).
action(create_pedagogue).
action(critique_texts).
action(crush_raspberry).
action(cut_balsa_wood).
action(cut_semicircle, orange, opposite_point).
action(cut_watermelon).
action(cute(puffin_duck)).
action(cutting_hair_orange, \"hairstylist practicing giving a haircut to an orange\").```### Step 2: Define RulesYou might want to define rules that specify conditions under which certain actions occur or certain properties hold. Here are some examples based on the provided text:```prolog% If breathing in is taking care of thoughtsmindful_action(Thoughts, Action) :-     action(breathing_in, Action),    Action == \"taking care of thoughts in meditation\",    Thoughts = \"mindfulness\".
action(daily_reflection, 'Wrote a meditation reasoning per day on my aim').
action(decide_to_buy(it)).
action(declare_meritocracy).
action(define_argument).
action(define_terms).action(love_everyone).
action(delegate_grouping).
action(deleted_first_line(H, Line), reason(first_instance_deleted_in_line(H, Line))).
action(demonstrate_knowledge, \"Asperger patient preparing to demonstrate superb knowledge of history trivia\").
action(demonstrated(master, sports_statistics)).
action(demonstrated, fairness, richard_dawkins).
action(demonstrated_cleanliness, first).
action(demonstrated_perseverance, person).
action(demonstrated_rotememory, autist).
action(descend(stairs, manager)).
action(design).
action(designed_walls, because(aesthetic_purpose)).
action(designer, organize_feast).
action(detected_object_size).
action(determine_helpful, they).
action(determined_face_shape).
action(determined_time_for_Aigs).
action(dion, connect_ideas).
action(dion, observe(human(text_to_speech)), 'to benefit communication').
action(dion, research_vitamins_and_minerals).
action(dion, spatial_construct_reasoning).
action(direct_student_to_pedagogy, \"subject should direct the student to pedagogy\", \"the subject should include...\").
action(disabled_people_matter, 'There were disabled people.').
action(disagree_with_idea).
action(discover, cow_tape).
action(discover_combination).
action(dispense_with_birthright_myths).
action(distribute_to(points_of_sale)).
action(divide_length_by_three(Subject)) :- subject(Subject).
action(do).
action(donate_sperm_whale).
action(drain_water).
action(draw(diagram(apparatus))).
action(draw_items, subject, reason(write_argument)).
action(draw_regions) :- prepared(draw_regions, rocket), cuts(letter).
action(draw_transformations).
action(drawing_items, two_items).
action(drawn(exponential_graph)).
action(drew(her_body)).
action(drink_holy_water, he, reason(perform_action)).
action(drinking_apple_juice, He).
action(drinking_from_bottle, i).
action(driving).
action(drove(someone, door, tricycle)).
action(earn_b, masters, reason(programmed)).
action(earn_jobs(methods), purpose(using(H_essay(token(professionalism))))).
action(earn_straight_as, process_identified).
action(eat(passenger, sandwich)).
action(eat_at_university_store, it_is_food).
action(eat_chocolate_art).
action(eat_coconut_from_shell, 'I did this by eating the coconut from its shell').
action(eat_dessert) :- prepared(eat_dessert, dessert), uses(strawberries, bowl).
action(eat_poppadum).
action(eat_whole_apple, preparing_holily).
action(eating, poppadum).
action(edit_literature_review).
action(edit_prolog_files).
action(edited_article).
action(emphasised_useful_object).
action(encounter_burst_thoughts, \"by encountering a burst of Agrade thoughts\").
action(encourage_cockatoo).
action(engage_in_arguments).
action(enjoy_self_sufficiency).
action(enjoying_self_sufficiency).
action(essay_subject, reason('The subject should not write on the essay where the subject wrote that a reviewer reviewed the article like the subject being able to see the objects top')).
action(exalted).
action(examine(Title)) :- entity(Title).
action(examine).
action(examine_biological_noumenon, 'The pianist prepared to examine a biological noumenon').
action(examine_group_dynamics, alexis).
action(examine_groups).
action(examine_impact(Subject)) :- subject(Subject).
action(examine_reasoning, actor(third), reason(because)).
action(examine_void).
action(examined).
action(examined_life_worth_living).
action(examined_meditation, second_person).
action(examined_self).
action(examining(program)).
action(examining_hour, empty_hour, reason(because, bees_falling_off)).
action(excavate_dig).
action(exclude(others, one(me))).
action(expanded_brackets_and_worked_out, because(meditation_recommended)).
action(explain_link).
action(explain_pedagogy).
action(farmer_holds_candle, reason(holding_candle_base(turnip_eaten))).
action(fasten_tape).
action(feeding(raspberry, mosquitoes)).
action(feel_affirmation, better_mental_imagery).
action(feel_comfortable_on_stage).
action(fertilized, garden).
action(fill, bottle).
action(filled_parts(features)).
action(final_sun_time_accessed).% Represent reasons for the actionsreason(transcript_prepared, argument_written).
action(find(ideas(two_poles))).
action(find(methuselah), alexis).
action(find_aig).
action(find_connection, subject, reason(side_connection)).
action(find_ducks_cute).
action(find_model_leg).
action(find_pad()).
action(find_seen_as_version).
action(find_sentences).
action(find_student_aims).
action(finding_sales).
action(finish).
action(finished_cleaning).
action(finished_program, job).
action(finished_shaking_maracas).
action(first, attached_balloons_to_helium_tube).
action(first_walking, walked_through_field).
action(focusing_on_business, student).
action(fold_paper(cut_in_hole)).
action(follow_predicates(order), purpose(supporting_reasoning)).action(report(meditator, clear_mental_imagery), purpose(because(colorful))).
action(followed_predicates_in_order, reason(necessary_steps)).
action(found_detritus).
action(found_different_inputs_outputs).
action(found_it).
action(found_person, 'First I found the person.').
action(found_sequence, searches) :-     reason(found_sequence).
action(gave_child_star).
action(gave_students(materials, h_grade)).
action(gave_time).
action(generate_algorithms) :- wrote_input.
action(give_myself).
action(give_pseudonym, actor(second), reason(because)).
action(give_spider(adrian)).
action(give_straw).
action(giving_feedback(person, philosophy)).
action(got_dressed_running_clothes, because(prepared_for_run)).
action(half_open_umbrella_quickly, he).
action(happiness_solutions_written).
action(hashdraws, illustration).
action(have_conversation_with_robot).
action(he, eat, strawberry).
action(he_positioned_nostrils_above_rose, reason(positioned_nostrils)).
action(heat_rock, warm_up_cloth).
action(heated_sausage_in_pan_over_fire).
action(held_it, tongue) :- reason(held_it).
action(held_mirror_in_front).
action(held_umbrella_side, because(avoid_getting_wet)).
action(help(responses)).
action(help_child).
action(help_employee).
action(help_others).
action(help_people, he).
action(helped_everyone_in_sight).
action(helped_student_be_selfsufficient).
action(helped_world, reason(needed_for(world))).
action(helpers_pedagogy_aig).
action(helping_filipinos).
action(hit_ball).
action(hold_partners_hand, dion).
action(hold_umbrella_side, he).
action(identify_mental_question, \"He identified the mental nature of the question\").
action(image_part_found).
action(imagined_sheep_jumping, person).action(conducted_excursion, person).% Define the reasons for each actionreason(polish_knife, recording_reasoned_out).
action(improve_performance, exam).
action(improve_quality_of_life, academic).
action(include_review_in_bibliography).
action(include_title_pedagogy, second).
action(included_headaches, because(left_as_found)).
action(includes(headaches)).
action(indicated_verification).
action(insert_star, into_hole).
action(inspect_lily_pad, 'Third she inspected the right side of the lily pad').
action(inspected_lily_pad, reason(prepared_to_make_life_easy)).
action(instructing_algorithm).
action(intelligent_argument_prepared).
action(intercepted_student).
action(intercepted_student_poor_performance).
action(internal_examination, 'Examined its interior').
action(interpret_philosophy, \"applying philosophy in writing\").
action(introduced_meditation, reason('First I introduced meditation to prevent poverty')).
action(inverted_frown, 'I did this by inverting my frown into a smile.').
action(invitalized_self).
action(invite_children, \"I prepared to invite the children to the healthy party\").
action(joined_students, reason(stated_paradox)).
action(jump, method(knees)).
action(jump_in_air, person).
action(knived_join_on_edge).
action(know(self)).
action(know_two_uses).
action(laughed_with(friend)).
action(learn_lucianic_meditation, for_inner_peace).
action(learn_meditation).
action(lecturer_tested_combinations, because(using_spec_to_algorithm)).
action(left_as_found, because(racial)).
action(let(set, overnight)).
action(let_set, overnight, \"He let it set overnight\").
action(let_wind_lift_kite(Subject)) :- subject(Subject), object(kite).
action(lick_coconut_cream, 'I prepared to lick the coconut cream').
action(lick_ice_cream).
action(lick_spoon).
action(licked, character(unknown)).
action(lift_self_up(ledge)).
action(lifted_feet_into_the_air).
action(lifted_tongue).
action(liked_best).
action(list_values).
action(live_feedback, 'provide live feedback').
action(load_icons, second).
action(load_vehicle, custombuilt_vehicle_rack).
action(load_vehicle_rack, with_suit).
action(log).% Define objects and conceptsobject(pink_object).
action(look_first_building).
action(look_up_jitterbug, book).
action(looked_at).
action(looked_at_spot_with_magnifying_glass, because(magnifying_glass_function)).
action(love_people).
action(loved_myself).
action(loved_you).
action(lower, hook).
action(made_cube, second).
action(made_icy_pole).
action(made_money).
action(made_sure_not_slide).action(prepared_to_eat).
action(maintain_judgment_correctness, actor(third), method(synthesizing_conception_argument)).
action(maintain_point_sequence, \"maintaining the point sequence in Societology each day\").
action(maintain_pointsequence, education) :-     reason(maintain_pointsequence).
action(make_mother_proud, \"by making my mother proud\").
action(make_pedagogues).
action(make_spiritual_preparation).
action(making_olive_paste).
action(measure_achievement).
action(measure_hair_length).
action(measured, tofu_width).
action(measured_ratio).
action(measuring_distance(person, point_a, point_b, distance)).
action(measuring_ruler).
action(medicine_students, writing).
action(medicine_studies, 'Prepared to offer the medicine course by studying medicine and seeing a doctor').
action(meditate).
action(meditate_on(pedagogy_based), purpose(protecting(A_grade_essays))).
action(meditated_wrote, second).
action(meditation_discovered).
action(meditation_pedagogy).
action(meditation_writing).
action(meet_character, determine_character, meet_other_character).
action(meet_requirements_for_accreditation).
action(meet_standard).
action(module_added, lambda, reason(help_meditators)).
action(money_to_restaurateurs, 'The meditator brought their money to ancient Rome much to the delight of restaurateurs.').
action(move_on).
action(move_tablet, \"moving the tablet fragment to the back of his mouth with his tongue\").
action(moved, shower_head).
action(moved_oar_backwards).
action(moved_safely).
action(moved_safely_with_eyes).
action(multiplied_units).
action(multitask).
action(multitasking, effort).
action(myself_written).
action(name_hero).
action(navigate).
action(noted).
action(noted_breasoners, because(hardly_any_other_breasoners)).
action(noted_departments, because(informative_purpose)).
action(notice_squib).
action(noticed(parliamentarians)).
action(noticed_breasoningesquenesses).
action(noticed_business_zigzag).
action(noticed_crow).
action(noticed_sexual_ideas).
action(noticing_harlequinades, He).
action(observe).
action(observe_birth_numbers).
action(observe_body, work).
action(observe_happen).
action(observe_move, brother, sister, 'Movement towards').
action(observe_students_collect_thoughts).
action(observe_thinking).
action(observe_writer, actor(first), reason(because)).
action(observed).
action(observed_choir).
action(observed_object).
action(observed_partner_sing, partner).
action(observed_red_signal_on).
action(observed_swan_heart, 'I observed the two swans frame a heart').
action(open(business, peace)).
action(open_purse, donor).
action(opened_business, peace, \"I did this by opening a peace business\").
action(opened_minibin).
action(opened_sunglasses_left_arm).
action(opening_box, D).
action(order_text_to_speech).
action(organised_payment(lucian_academy), reason(payment_method(money, vouchers))).
action(organize_arguments).
action(other_fingers, take_turns, same_thing).
action(other_knew_self, reason(joined_students)).
action(outlined_progress(graph(space, time))).
action(paid, writers).
action(parliamentary_observation, 'Noticed the parliamentarians').
action(patted_jackdaw).
action(pay_customers, meditator, reason(keep_workers_on_toes)).
action(pay_recruiter).
action(performed, work, student).
action(performed_twice_as_well).
action(permit_student_leave, \"I permitted the student to leave the class\").action(ready_new_aig, \"The self was ready for a new aig\").
action(philosopher, write).
action(phone_assistance).
action(pie_preparation, 'Mixed the apple and cream to put in the pie').
action(place(lavender)).
action(place(scraper, base(chopstick))).
action(place_item, on_table).
action(place_marshmallow, first).
action(place_on_face, second).
action(place_presentation, online) :-     reason(place_presentation).
action(place_thesis_online).
action(placed_aside(nonmeditators)).
action(placed_food).
action(placed_hand_over_point).
action(placed_pencil_shavings).
action(placed_pie, 'First I placed the pie on the plate').
action(placing_in_sack, he).
action(placing_intelligence_objects_end_to_end).
action(placing_masking_tape).
action(plan_time).
action(played_concerto, person).
action(plugged_si_into_si).
action(popsicle_tested, reason(other_knew_self)).
action(position_knife_artichoke).
action(position_secateurs, second).
action(post).
action(pour_and_mix(jelly_crystals, water)).
action(predicate_info_found).
action(predict_savings(Task)) :- member(Task, [text_to_breasonings, gl_detailer]).
action(predicted_harvest, simulation).
action(prep_demonstrate_work, \"The autist prepared to demonstrate that his work performance provided some social integration\").
action(preparations(scientist, lick(part(large)))).
action(preparations(scientist, lick(part(small)))).
action(preparations_to_love_self).
action(prepare(Task)) :- member(Task, [spell_adjustments, perform_action]).
action(prepare(like_being_friendly)).
action(prepare(pop_singer)).
action(prepare(sifter, large_seeds)).
action(prepare, philosopher).
action(prepare, purpose(liking_others)).
action(prepare, purpose(safety(pop_concert))).
action(prepare_acceleration(particle, sensitive_arm, deck_chair)).
action(prepare_aid, 'Christmas').action(understand_others_meaning, self, other, 'Understanding').
action(prepare_attend_work, \"prepared to attend work\", \"because\").
action(prepare_bottle, cork_in_bottle).
action(prepare_breason_out).
action(prepare_chocolate_pyramid).
action(prepare_comfortable).
action(prepare_debate, alexis).
action(prepare_enter_heaven, alexis).
action(prepare_fireguard).
action(prepare_for_play(Person)) :- work_day(Person).
action(prepare_for_ride(Visitor)) :- lick_chocolate(Visitor).
action(prepare_for_school).
action(prepare_fun, child, \"The child prepared to have fun by sliding down the slide backwards\").
action(prepare_heat).
action(prepare_help_think, head_of_state).% Define relationships between actionsnext(go_to_sleep, include_title_pedagogy).
action(prepare_life).
action(prepare_load) :- loaded(vehicle_rack, suit).
action(prepare_new_chocolate_pyramid).
action(prepare_record_result).
action(prepare_speech, actor(third), reason(because)).
action(prepare_study_postgraduate).
action(prepare_sync_files, \"prepared to synchronise the files\", \"by breathing in and out at the same time as my friend\").
action(prepare_synthesis).
action(prepare_to_comment) :- preparation(writing_press_release).
action(prepare_to_earn_grades) :- preparation(writing_argument).
action(prepare_to_go_home(police_watcher)).
action(prepare_to_go_on_tour(fashion_designer)).
action(prepare_to_measure_lengths).
action(prepare_to_push_strawberries).
action(prepare_training).
action(prepare_yoghurt).
action(prepared).
action(prepared, plan, algorithm).
action(prepared_glass).
action(prepared_healthy, prepared_to_select_most_healthy_egg_and_sperm).
action(prepared_help_disabled, 'I prepared to help disabled people by liking the principal').
action(prepared_intelligence, reason('I prepared to be intelligent relaxing in comfort')).
action(prepared_make_icepop, reason('I prepared to make the icepop')).
action(prepared_meal).
action(prepared_observe_master, i).
action(prepared_questions).
action(prepared_replaced, prepared_to_replace_idea_with_itself).
action(prepared_spiccato_style).
action(prepared_students, i).
action(prepared_to_act).
action(prepared_to_be(hollywood_extra)).
action(prepared_to_check_adult).
action(prepared_to_climb_ladder, person).
action(prepared_to_earn_scholarship).
action(prepared_to_eat, character(unknown)).
action(prepared_to_eat_out).
action(prepared_to_follow_robot).
action(prepared_to_lift_child_model).
action(prepared_to_like_maharishi).
action(prepared_to_look, boxes) :-     reason(prepared_to_look).action(self_knowledge, aigs) :-     reason(self_knowledge).
action(prepared_to_love, xochi).
action(prepared_to_love_being_with_you, person).
action(prepared_to_love_god).
action(prepared_to_love_papa).
action(prepared_to_make_life_easy, reason(ate_onion)).
action(prepared_to_prevent_depression).
action(prepared_to_protect_students, reason(protect_students_with_background_knowledge)).
action(prepared_to_stop_feeling_pain, reason(stop_pain_orientation)).
action(prepared_to_talk(another_language)).
action(prepared_to_think(accreditation_similar)).
action(prepared_to_walk).
action(prepared_to_win_point, reason(win_point_prepared)).
action(prepared_to_write(argument_structurers)).
action(prepared_walk, i).
action(preparing(dabbling(paints), adding(milk, cake))).
action(preparing(receiving(payment))).
action(preparing, character(unknown)).
action(preparing_for_comments).
action(preparing_split(physicist, particle)).
action(preparing_text_high_quality).
action(preparing_to_breathe, He).
action(present_students, students, reason(well_presented)).
action(press_a).
action(press_release, 'Wrote the Press Release for Richard Rorty\\'s probable comments on Meditation on Lucianpedia').action(students_algorithm, 'Found the students algorithm').
action(press_release_written).
action(pressed(controller_button)).
action(pressed_play_button).
action(preten_study_electronic_engineering).
action(processed_data_correctly).
action(produced_onion_relish, person).
action(proposed, different_sides, drafts).
action(protect_everyone, \"Everyone was protected\").
action(pull_out(serviette)).
action(push(strawberries)).
action(push_through(skewe, tofu)).
action(pushed_tongue_forward).
action(put_arch_over_toes, comfort).
action(put_hands_on_back).
action(put_hands_on_back, partner).
action(put_it_down).
action(questioned_interrelation).
action(ran_program, character(unknown)).
action(reach_disabled_students, 'I could reach disabled students in other languages').
action(reached_goal, third).
action(read(Comment)) :- entity(Comment).
action(read(books)).
action(read_map).
action(read_marks).
action(realised_more_seenas_versions_needed, reason(more_seenas_needed)).
action(realize(nothing_to_watch)).
action(rebreathsonings_essay_press_release).
action(received_coin, 'I did this by receiving the coin.').
action(recognize, juice).
action(recorded_questions).
action(recording(black_box)).
action(recording_reasoned_out, pedagogue).
action(relax, actor(third), reason(because)).
action(relaxed).
action(remembered(match, top_score)).
action(remove_alpha_radiation).
action(remove_lid_paint_can).
action(remove_mistakes).
action(repeat, purpose(documenting_departments)).
action(repeat_until_no_more_points).
action(repeated_process).
action(repeating, until_sunset).
action(reported(person, well_known)).
action(request_move(god_lizard, piece)).
action(return(DION_Line, LastLine)) :-     LastLine = 'last_item'.
action(return_twice).
action(rotated_tongue_tip).
action(safe_passage).
action(sample_input_examination, 'Third I examined the sample input and output.').
action(save_apple_seed(apple), purpose(eating(apple))).
action(scooping_boat).
action(second, wrote_featured_syntheses).
action(select_job, \"did this by selecting the job\", \"because\").
action(self_aims).
action(set_pixel_x_coordinate).
action(set_pixels_x_coordinate, 'First I set the pixels x coordinate').
action(set_up_spiritual_algorithm).
action(set_up_time_travel).
action(sharpen_spear).
action(sheltered, character(unknown)).
action(shouldnt_see_light_of_day(subject), purpose(finding(pedagogy(meditation)))).
action(show_movie, particles).
action(shredding_spinach).
action(sketch_outs).
action(slice(lettuce)).
action(slid, tongue, richard_dawkins).
action(sliding(center_of_bench)).
action(snapfreeze_lemon_chocolate).
action(spray_neck).
action(squeezed_gel).
action(squirted_gourd).
action(stack(Object, Trolley)) :- trolley(Trolley), object(Object), stable(Object).action(stack(Object, Trolley)) :- trolley(Trolley), object(Object), unstable(Object), !, fail.% Trolley definition trolley(trolley1).
action(stack_objects).
action(stacked, objects, trolley).
action(stand_on_bed).
action(stand_on_spot, \"stood on the spot\", \"because\").
action(start_from_base).
action(start_stroke, with_corner_of_brush).
action(start_timer, start, timer).
action(starting_career, reason('I started my career because')).
action(starting_school(person)).
action(state(like(religious_leader))).
action(stated_paradox, reason(self_chose_self)).action(self_chose_self, reason(inspected_lily_pad)).
action(stated_purusha).
action(stated_stars_properties, reason(stars_caused_lifegiving_properties)).
action(statement(\"I wouldn't have been booked\")).
action(stating_breasoning(breasoner, reasoning)).
action(stay_with_people).
action(stir).
action(stop_at_halfway).
action(stop_pumping_tyres, stop, pumping_tyres).
action(student_ready).
action(study, theatre_studies).
action(subject, completed, h_set).
action(subject, crawled, through_hole).
action(subject, prepared, stop_feeling_of_pain).action(subject, stopped, assembly_configuration).
action(subject, respond).
action(subject, stacked, objects_stably_on_trolley).
action(subject, tried, fried_tofu).
action(subject, understood, objects_in_speech).
action(subject_determined_change(text, speech)).
action(substituted, languages).
action(swallow(manager, lozenge, particular_way)).
action(swallow, mouthful).
action(swap_roles(alexis)).
action(swapped_calculation_display).
action(switch, service(certification_service)).
action(take_balloon_out, bag).
action(take_finger_biscuit).
action(take_notes, second).
action(take_off).
action(take_off_for_work).
action(take_part_in_internship).
action(taking_actions_chosen).
action(taking_exam).
action(taking_out_toys(person)).
action(taped_pin_to_spoon).
action(taste_wine, smelling_rose).
action(teach_using(meditation), purpose(exploring(pedagogy_second_use))).
action(teacher_prepared, students, reason(meditation_philosophy)).
action(teaches_meditation).
action(teaching(budgie)).
action(teaching_lucianic_meditation).
action(test(live_software)).
action(test_square_red).
action(tested_algorithm).
action(tested_spear).
action(testing_lick_range, because(testing_range)).
action(the_description, 'The description may be a paragraph, word, or keywords.').
action(think_hero, \"because of thinking of a particular thought in the conversation\").
action(thinking_of_future).
action(thought, agree).
action(thought_next_idea).
action(thought_text, had_no_appearance_of_person).
action(tickling(male, feather)).
action(tie_corners).
action(tie_sack).
action(took_care_movie_stars, 'First I took care of the movie stars').
action(took_change, 'Third I took the change').
action(took_thick_envelope, 'Third I took out the thick envelope.').
action(took_umbrella_out_launch_site, because(prepared_for_rain)).
action(touched_marker).
action(trace_biochemical_system, second).
action(trace_maze).
action(tracked_students_in_class).
action(transitivity_use, reason('Transitivity contained a second use for verification')).
action(translate_text, concise_version).action(write_comment, on_topic).
action(turn_on_fire).
action(turning_over, He).
action(tv_feature_prepared).
action(typed_idea).
action(understood, subject, objects_in_speech).
action(undiscombobulated, confused_student, reason( miscommunication)).
action(undo_shirt).
action(unknown, chop_head, '').
action(unknown, help_others, 'I could help others with A').
action(unknown, place_tongue_tip, 'He placed the tip of his tongue at the front of the rim').
action(unknown, reintroduce_argument, 'I prepared to reintroduce my controversial argument for publishing').
action(unknown, write_essay, 'The essay was written to identify nonmonotonicities exceptions in verb judgments').
action(unlocking_airlocks(den_side)).
action(unpack).
action(unraveling_robes, he).
action(unwound_and_ate).
action(update_mental_imagery).
action(update_writing, reflect_changes).
action(upload_software).
action(use_algorithm(free)).
action(use_dion_two_correctly).
action(use_editor).
action(use_is_right, meaning_attachment_of_nature).
action(use_traditional_pedagogy).
action(using_program, philosophy_dissemination, reason(because, unspecified)).
action(utterance_recording, 'Wrote down the thoughts from utterances and added to them').
action(verification, subject).
action(verify(burning)).
action(verify, action(speak)).
action(verify, entrance_meditation).
action(verify_assignment).
action(verify_computer_output).
action(verify_content).
action(verify_contents).
action(verify_good_idea, 'good idea').
action(verify_item).
action(verify_student(pedagogical_thinking)).
action(verify_summary).
action(version_control_system, 'use a web version control system that ran algorithms').
action(visit_fair).
action(visualize, object).
action(voted).
action(voted_for_medicine_comments).
action(wait_for_reply).
action(walk_hill, \"I prepared to walk around the hill\").
action(walk_on_path).
action(walk_on_ropes_course).
action(walked, to(swan)).
action(walked_past(her)).
action(wash_eyes, \"he washed his eyes\", \"because\").
action(washed_inside_of_top).
action(watch_character, watch, character).
action(watched_butterfly_futtering, reason(enjoyed_nature)).
action(watching_customers(person)).
action(watering_medicinal_plant).
action(wear_long_pants, \"by wearing the long sun pants\").
action(weighed_solid(solid_object)).
action(wet_sponge, 'First I wetted a sponge').
action(wished_good_luck, all_students, reason(disabilities_teacher)).
action(wondered(derrida_relation, human_neuroscience)).
action(wound_wool_around_hand).
action(wrapped_around_you).
action(write(Alexius_Meinongs_comments)).
action(write(Computational_English_argument)).
action(write(Essay)) :- entity(Essay).
action(write(Richard_Dawkins_comments)).
action(write(argument(a_b, training(medicine)))).
action(write(blue_before_yellow)).
action(write(text_to_speech_algorithm)).
action(write).
action(write, philosopher).
action(write_a_multiple_of_a(Subject, N)) :- subject(Subject), N > 0.
action(write_about(phallus_rod), purpose(exploring_symbolism)).
action(write_about_life).
action(write_about_time_space).
action(write_about_you).
action(write_algorithm).
action(write_architecture).
action(write_argument, nonreligious_arguments).
action(write_article, write, article).
action(write_breasonings, high).
action(write_comment(Chomsky, Medicine, Lucianpedia)).
action(write_comment(alexius_meinong, press_release)).
action(write_comment(richard_rorty, medicine_indicators)).
action(write_comments).
action(write_comments_on Meditation).
action(write_continuous_dialectics, dion).
action(write_developed_topics, \"wrote on the most developed topics\", \"because\").
action(write_down_words, actor(pedagogue), receiver(teachers_words)).
action(write_dr_who_essay(based_on(hello_speaker))).
action(write_ecstatic_response).
action(write_essay).
action(write_essays).
action(write_explanation, actor(third), reason(because)).
action(write_final_minute, subject, reason(write_exposure)).
action(write_future).
action(write_header) :- wrote_header.action(walk_maze) :- prepared(walk_around, maze), counted(as_per_book).
action(write_meditation, subject, reason(second_meditated)).
action(write_music).
action(write_new_logic, purpose(clarifying_reasoning)).
action(write_new_words, 'In anarchy I wrote on new words').
action(write_on_ethics).
action(write_on_important_topic(child)).
action(write_on_other).
action(write_on_pedagogy).
action(write_pedagogical_arguments).
action(write_press_release(michel_onfray_pedagogy(lucianpedia))).
action(write_press_release).
action(write_press_release, alexis).
action(write_press_release, reflect_comments).
action(write_quote).
action(write_reasoning, documenting_thoughts).
action(write_review).
action(write_spec_algorithm, alexis).
action(write_summary, memory) :-     reason(write_summary).
action(write_summary_speech, essay).
action(write_tides_came_in, purpose(describing_natural_event)).
action(writing(text_to_speech_algorithm)).
action(writing, character(alexius_meinong)).
action(writing, character(richard_rorty)).
action(writing_book, He).
action(writing_comments, alexius_meinong, reason(because, meditation_indicators)).
action(writing_computer_game, converting_recursion, reason(because, earning_role)).
action(writing_effects, agreement).
action(writing_happy_notes).
action(writing_in_philosophical_argument_form).
action(writing_press_release).action(assigning_hypotheses).
action(writing_press_release_dawkins).
action(writing_press_release_nussbaum).
action(writing_review, He).
action(writing_song, husky).% Facts about individualsperson(alexis).
action(writing_text_to_speech(computational_english)).
action(wrote(arguments_area_of_study)).
action(wrote(books)).
action(wrote(first_text)).
action(wrote(nice_person)).
action(wrote(song_titles)).
action(wrote).
action(wrote, press_release).
action(wrote, work).
action(wrote_Aig).
action(wrote_about, pineal_gland, richard_dawkins).
action(wrote_about_harpsichord, first).
action(wrote_about_it, because(included_headaches)).
action(wrote_argument, first, \"I wrote the argument\").
action(wrote_comments_on_essays).
action(wrote_doubly_good).
action(wrote_essay).
action(wrote_featured_syntheses).
action(wrote_in_places, first).
action(wrote_instead_of_listening).
action(wrote_letter, wrote_letter_to_queen).
action(wrote_levels_on_problems_solution).
action(wrote_medicine_h).
action(wrote_noam_comments, i).
action(wrote_object_name_per_step, because(one_per_step)).
action(wrote_on_culturology).
action(wrote_original_algorithms).
action(wrote_press_release(martha_nussbaum)).
action(wrote_press_release(michel_onfray)).
action(wrote_second_present, reason(second_present_written)).
action(wrote_text, mind_reading, \"I wrote about text to reasoning and mind reading\").
action(wrote_use, reason(use_written)).
action(you, agree_with, meditation_popology).
action(you, create_chain_of_items, unknown).
action(you, hand_in, journal_articles, phd_content).
action(you, observe, other_fingers).
action(you, pluck_C_string, unknown).
action(you, put_hands_on_back, unknown).
action(you, use_transitivity, verification).
action(you, write_journal_article, hegel).
action_chain(Action) :-     action(Subject, Action, Reason),     write(Subject), write(' performs '), write(Action), write(' because '), write(Reason), nl,    (cause(Action, Result) -> action_chain(Result); true).
action_finished(Action) :- finished(Action, icecream).
action_for_invitation(Y) :- invited(Y, my_house), invitation_reason(Y, Reason).
action_ignored(Subject) :- ignored(Subject).
action_informs_subject(Action) :- good_in(simulation, alexis).
action_observed(What) :- observed(What, friendly).
action_offered(What) :- offered(What).study_sequence(Maintenance) :- maintained(Maintenance, education).
action_preparation(did_prepare, classical_music) :- prepared_to_listen(classical_music).
action_preparation(did_watch, navy_show) :- watched(navy_show).
action_preparation(remove_from_fire, skillet) :- touched_with_gloves(skillet).
action_reason(block_ball, Reason) :- Reason = 'to prevent the opposing team from scoring'.
action_reason(commission_summary, Reason) :- Reason = 'to provide a structured overview'.
action_reason(education_unfunded, Reason) :- Reason = 'to highlight the challenges faced in academia'.
action_reason(enjoy_activity, Reason) :- Reason = 'to find joy in the process'.action_reason(write_text, Reason) :- Reason = 'to communicate ideas clearly'.
action_reason(noticed_tangents, Reason) :- Reason = 'to identify different perspectives on the topic'.
action_reason(poke_tongue_out, Reason) :- Reason = 'to express playful defiance'.
action_reason(select_random_player, Reason) :- Reason = 'to ensure fairness in selection'.
action_reason(state_desire, Reason) :- Reason = 'to express a wish for comfort'.
action_sequence(clean, [wet_cloth, clean_child_face]).
action_sequence(nurse, [lift_baby_from_cot, change_nappies]).
action_sequence(work, [drive_to_work, think_while_driving]).
action_with_reason(advance_rhetorician, 'To present a more compelling argument.').
action_with_reason(love_mug, 'It has sentimental value or aesthetic appeal.').
action_with_reason(make_allowance, 'I wanted to consider different perspectives.').
action_with_reason(match_timesubjectobjectplace, 'To analyze events in a structured manner.').
action_with_reason(place_brush, 'She needed to groom herself for the occasion.').
action_with_reason(prepare_for_ball, 'The dancer wished to look her best.').
action_with_reason(prepare_positive_gifts, 'Differentiating was necessary to appreciate various values.').
action_with_reason(reduce_complexity, 'To make understanding easier for the audience.').
action_with_reason(start_newspaper, 'To share important news with the community.').
activity('squirting', 'gourd').
activity(holding(nut)).
activity(mind_reading).
activity(money_earning).
activity(open_close_umbrella).
activity(prepare_aboriginal_humpy).
activity(preparing(purposely_crush(berry))).
activity(preparing_answers).
activity(process_cheese).
activity(reinterpreting_texts).
activity(singing, love_song).
activity(teaching(academy)).
activity(wind_hand_until_end).
activity(write_lucian_mantra).
activity_answer_received(affirmative).
activity_board_created(hexagonal_duchess_board_created).
activity_completed(perfection_level_completed).
activity_known(lucianic_medicine_known).
activity_letter_prepared(letter_to_queen_signed).
activity_made(money_made).
activity_prepared(money_offered).
activity_related(healthier_activities_explored).
activity_stacked(objects_stacked_stably).
added(sa_module_to_lucian, gitl).
added_changes(file).
added_something(true).
added_weight(WeightAction).
added_zeroth_rows_and_columns :- write('The lecturer added zeroth rows and columns.').
adjective_competency(helpful).adjective_competency(verified).
adjective_competency(high_quality).
adorned_table(\"I adorned the table with it\").
advances_to_first_instance(item, line).
affects(alexis, people, negative).
agree(crew_member(X), Y) :- observe(X, Y).delegate(me, education_accreditation) :- reason(breasonings).
agreed(creation_correct_and_good).
agreement(dion, critique2).
agrees(subject, criticality).
algorithm(interested_in_best_solution).
algorithm(text_to_speech_algorithm).
algorithm_simplification(Old, New) :- simplified_algorithm(Old, New).
algorithm_study(Student) :-    studied_algorithm(Student),    avoided_medical_questions(Student).
algorithms_for(employees).
all_actions_completed([Action | Rest]) :-    action(Action),    result(Action, _),    all_actions_completed(Rest).
all_melted([H|T]) :-     melted(H),   % Check if the head of the list is melted    all_melted(T). % Recursively check the tail of the list% Test casetest_all_melted :-    % List of popsicles to check    Popsicles = [popsicle1, popsicle2, popsicle3],     all_melted(Popsicles),    write('All popsicles have melted.').
allowed_in_text(character, text) :- not(barred_characters(character, dictionary)).
analogy_summary_handle :- reading_summary_is_like_holding_handle(because).
analysis_method(delegated_workload_retrieval).
analyzed_objects_depth(Depth) :- object_analysis(Depth).
another_text_used_because(My_Essay, Another_Text).
answer(john, q1, '42').
answer(john, q2, 'Hello, world!').
answer(mary, q1, '42'). % Potential plagiarismanswer(mary, q2, 'Hello, world!'). % Another potential plagiarism% Rules to identify plagiarism. % It checks if two students have the same answer for the same question.
answer_question(sharp_and_short).
answered_with(writer, algorithm).
appearance(student, perspective).
appears_goodness(subject).
applied(chalk, blackboard).
apply_sunscreen(Type) :- write('Applied sunscreen: '), write(Type), nl.
applying_sunscreen(Person) :- sprayon_sunscreen(Person).
approved_of(person, place).
arbitrarily_long_lists :- necessary_decomposition(caw).
area_of_study(breasoning).
area_of_study(stress_relief).
argument(Y) :- breasoning(lecturer, Y).
argument([4, 5], 'Taking the pet to the vet is based on statistical decision-making.').argument([6, 7], 'Machine learning can assist in understanding complex datasets.').
argument(argument_id(6), \"Cornered the king\", reason(\"Strategic play in chess.\")). argument(argument_id(7), \"Theme of medicine\", reason(\"Builds confidence in the meditator.\")).
argument(argument_id(8), \"Installed the pink screen\", reason(\"To improve focus while meditating.\")).
argument(argument_id(9), \"Wrote the predicate\", reason(\"To formalize the arguments.\")). argument(argument_id(10), \"Theorists' Breasonings\", reason(\"Help understand complex issues.\")).
argument(lucian_mantra, sun_safety).
argument(professor_argument_1, wrote_instead_of_listening, suggested_no_word).
argument(professor_argument_2, state_ha_not_ka_sic, sit_on_seat).
argument(student_argument_1, put_on, copywritten).
argument(student_argument_2, permit_student_leave, practice_meditation).
argument_mentioned_person(instead).
argument_written(ab, training_in_medicine).
arguments(nonsexual).
arm_movement(sunburn_free).
article(is_on, essays).
artist_preparation(dabble_paints).
artist_preparation_with_milk(cake_mixture).
asked(john_doe).
asked(subject, why_not_speak_without(text)).
asked_about_character(person, speech).
asked_applicant(A) :- action(A, 'First I asked the job applicant how she earned the job.').took_out_envelope(B) :- action(B, 'Third I took out the thick envelope.').
asked_for_fun(Preference) :- Preference = 'asked could I have fun instead'.
asked_hungry(person, she).
asked_meaning(line_item).
asked_nicely_for_work(done).
asked_to_produce_with_reasonings :- write('Asked him to produce with some reasonings.').
asked_why_new_feature(Second).
assert_processed_sentences([H|T]) :-    format('~s~n', [H]), % Output the sentence.
assert_processed_sentences([]).
assert_reaction(Subject, Reaction) :-    format(\"~w reacted to the scene because ~w~n\", [Subject, Reaction]).assert_recommendation(Subject, Recommendation) :-     format(\"~w recommends ~w~n\", [Subject, Recommendation]).
assigned_point(computational_speed_accuracy_assignment, student).
assigned_questions(pedagogy_helper, required_predicates).
assigns_hypothesis(Entity, Subject) :- (Entity = university_professor ; Entity = non_university_professor), Subject = essays.
assistance(disabled_students).
ate :- write('Ate something.').knew_about_implies :- write('Knew about implies.').
ate(base).
ate(cherry_tomato).
ate(john_doe).
ate_apple(person(X)) :- worked_out_logic(X).
ate_brazil_nut(Nut).
attached_to(heat_shield, hole).
attends(lecturer, next_student).
attracts(North, South) :- magnet(North), magnet(South).
attributed_positive_value(robot, john) :- molded_chocolate_rabbit(john).
attributes(dion, honour_student).
audience_care(third, audience_members).
audience_waits(X) :- waited(X).
avoided(medical_questions).
avoided_medical_questions(X).
avoids_confrontation(attacking_questioner).
awards(agreement_disagreement, same_grade).
barred_characters([character1, character2]). % Characters barred from the text% Desires for spacedesires_space(alexis, warm_space).
barred_characters(character, dictionary).
base_exists(yes) :- write_comment(richard_rorty, press_release(richard_dawkins)).
because(ALEXIS, equitable).
because(accepted(in_case), wrote(phoneme_list)).
because(answered_question, held_mirror_in_front).
because(certain_number, philosophical_algorithms).
because(commissions(glossary, subject)).
because(complete_area_of_study, placing_intelligence_objects_end_to_end).
because(cut_olive_into_squares).
because(does_not_make_new_connection(term, definition, dion)).
because(educates(people, subject, pedagogy)).
because(finished_cleaning, safe_passage).
because(foster_life, green_life).
because(good_in(simulation, alexis)).
because(green_life, protected).
because(has_movie_theater_in_brain(analogy)).
because(heated_sausage_in_pan_over_fire, answered_question).
because(held_mirror_in_front, taped_pin_to_spoon).
because(intertwined(romeo_and_juliet)).
because(lifted_feet_into_the_air, complete_area_of_study).
because(observed, foster_life).
because(placing_intelligence_objects_end_to_end, wrote_levels_on_problems_solution).
because(prepared, thinking_of_reason).
because(prepared_to_act, saw_it_go_well).
because(prepared_to_like_maharishi, teaching_lucianic_meditation).
because(prepares_to_split_particle(physicist, action)).
because(protected, stated_purusha).
because(relaxed, prepared).
because(saw(philanthropist), licked(lolly)).
because(saw_it_go_well, finished_cleaning).
because(stacks_objects_stably_on(trolley, subject)).
because(stated_purusha, prepared_to_act).
because(taped_pin_to_spoon, examined_life_worth_living).
because(teaching_lucianic_meditation, lifted_feet_into_the_air).
because(walks_to(ballgiver, subject)).
because(wrote_levels_on_problems_solution, heated_sausage_in_pan_over_fire).
begged_on_knees(john).
behavior(Behavior) :- action(Behavior, _).
benefit(observing_bird, \"First I observed the bird on the left that made the lefthand side of the heart.\").% Determine if an action is valid based on reasonsvalid_action(Person, Action) :-    subject(Person),    action(Person, Action),    reason(Action, _).% Example query to find out why Alexis had the right to votefind_reason_for_action(Person, Action, Reason) :-    valid_action(Person, Action),    reason(Action, Reason).
best_in_world('third').
best_known_repository('software repository').
better_checked(speech).
better_checked(writing).
big_and_good(X) :- prepared_to(write, small_ideas_domains_endpoints).
bit(brazil_nut).
block(nth_player, ball).
blocked(X) :- blocks(third_party, X).thankful(X, Y) :- thanks(X, Y).
blocks(third_party, alexis).
boarding_vehicle('you', 'vehicle').
border_found(Who) :- found_border(Who).
break(existence).
breasoned(origin) :- subject_becomes(founder), breasoned_out(origin).
breasoner_shapes_bre43oning(pedagogy_helper).
breasoning(Topic, Reason) :-     helps(Topic, Effect),    format('Breasoning for ~w: This helps ~w because ~w.', [Topic, Effect, Reason]).
breasoning(breasonings, four).
breasoning(ideas_1, ideas_2).
breasoning(lecturer, 'Crossing algorithms is essential for deep understanding.').
breasoning_after(queen, on).
breasoning_experience(child, sentence(breasoning)).
breasonings_per_job_per_day(job).
breasonings_philosophical(\"Breasonings are philosophical\").
breathe_deeply(me).
breathe_heavily(X) :- separates_butter(X), notices_plimsoll_line(X).
breathed(others_breath).
breathed_heavily(alexis).
breathing_out(Writer) :- write(Writer), write(' is relieving stress.').
breathsonings_written(\"I wrote the breathsonings\").
brings_joy(blue_ocean, Gifts) :- Gifts = joy_gifts.
brushed_shoe(yes).
build_sequence([Head|Tail], Rest) :-    \\+ findall(Next, happens_before(Head, Next), NextList),    build_sequence(Tail, Rest).
build_sequence([Head|Tail], [Head|Rest]) :-    findall(Next, happens_before(Head, Next), NextList),    NextList \\= [],    member(Next, NextList),    build_sequence([Next|Tail], Rest).
build_sequence([H|T], [H|List]) :-    (precedes(H, Next) ->         build_sequence([Next|T], List)    ;         build_sequence(T, List)).
built_technology(TM, Krishnaderived).
calculated_equation(order(add, divide, multiply, subtract)).
calculated_first_day(assignment).
called_algorithm(file).
came_to_thoughts(Yes).
can_be_carried(frying_pan).
can_carry(Subject) :-    has_short_handles(Subject, Quantity), Quantity >= 2.
can_carry(frying_pan).
can_do_anything(I).
can_love_self(Action) :- action(Action), Action = preparations_to_love_self.
can_stand(frying_pan).
can_stand(pot).
can_stand_and_carry(frying_pan).
can_stand_and_carry(pot).
can_welcome_change(Action) :- action(Action), Action = watering_medicinal_plant.
capability(do_text_to_reasonings(computer)).
carryable_line(Line) :-     member(Line, [long_two_hs, two_short_handles, long_handle]).
carryable_line(line(_, [long])) :- !. % One long handlecarryable_line(line(_, [long, long])) :- !. % Two long handlescarryable_line(line(_, [short, short])) :- !. % Two short handlescarryable_line(line(_, [long, short])) :- !. % One long and one short handlecarryable_line(line(_, [short, long])) :- !. % One short and one long handle% Check if the line structure is correctis_carryable(Line) :-    line(Line, carryable_line).
catered(lift_trays_of_food).
cause(chop_head, downplay_climax).
cause(connect_arguments, help_others).
cause(downplay_climax, connect_arguments).
cause(remembering_point, hold_object).
cause(sic(self), expect_goodness).
cause(sic(self), sed_read_values).
caused_by(discover_cure, influenza_researcher).
caused_by(perform_role, she).
caused_by(separating_lettuce_tomato, he).
caused_by(writing_about_you, me).
caused_by(writing_comments_michel_onfray, me).
caused_by(writing_comments_richard_dawkins, me).
caused_by(writing_text_to_speech_algorithm, me).caused_by(complete_thesis_plan, mind_map).caused_by(going_well_together, third).
causes(a, dion).causes(dion, writing_breasonings).
causes(allowed_work_on_computer, finished_work).
causes(applied_to_online_journal, examined_why_it_was).
causes(cake_maker_prepared, iced_cake).
causes(calculated_best_time, gave_text_and_speech).
causes(cleaned_broom_handle, prepared_for_work).
causes(detailed_analysis, better_analysis).
causes(drain_water, thought_next_idea).
causes(examined_why_it_was, heavier_objects_than_last_time).
causes(facilitated_mildly, improved_mood).
causes(feel_comfortable_on_stage, action_based_on_feeling).
causes(find_aig, snapfreeze_lemon_chocolate).
causes(finished_shaking_maracas, wrapped_around_you).
causes(first_statement, requester_statement).
causes(formula, finding_combinations).
causes(held_sheet_of_paper, looked_at_object).
causes(helped_pedagogue, logical_breasonings).
causes(helped_student_be_selfsufficient, emphasised_useful_object).
causes(i_had_quality_of_life, i_prepared_encourage_cockatoo).
causes(i_prepared_encourage_cockatoo, she_read_hint).
causes(i_prepared_observe_students, i_wrote_sentence).
causes(i_prepared_selfconfidence, i_prepared_observe_students).
causes(intercepted_student, prepared_to_love_papa).
causes(looked_at_object, dion_correct).causes(dion_correct, logical_breasonings).
causes(move_on, movement_done).
causes(multiplied_units, tested_spear).
causes(notice_squib, find_aig).
causes(passing_tests_requirements, wrote_noam_chomsky_comments).
causes(performed_twice_as_well, intercepted_student).
causes(pointed_hose, expansion_requires_medicine).
causes(preparation, sign_up).
causes(prepare_fireguard, write_architecture).
causes(prepare_to_measure_lengths, lengths_measured).
causes(prepare_yoghurt, take_finger_biscuit).
causes(prepared_to_love_papa, multiplied_units).
causes(progay_like_prowomen, calculated_best_time).
causes(put_hands_on_back, feeling_comfortable).
causes(received_ball, applied_to_online_journal).
causes(repeating, result).
causes(requester_statement, bed).
causes(result, detailed_analysis).
causes(seeking_refuge, feeling_threat).
causes(she_read_hint, i_prepared_selfconfidence).
causes(snapfreeze_lemon_chocolate, prepare_yoghurt).
causes(software_helped_pedagogy, i_had_quality_of_life).
causes(sprayed_soles_of_feet, passing_tests_requirements).
causes(started_school, learning_events).
causes(stood_on_bed, professor_had_A).
causes(swim_right_left, dion_correct).causes(robot_mind_read, pointed_hose).
causes(swimmer_kicked_water, software_helped_pedagogy).
causes(switching_on_lamp, throwing_ball).
causes(take_off, prepare_fireguard).
causes(take_off_for_work, work_started).
causes(test_square_red, square_red).
causes(tested_spear, finished_shaking_maracas).
causes(testing_taken_care_by_algorithm, sprayed_soles_of_feet).
causes(thought_next_idea, notice_squib).
causes(thoughts, first_statement).
causes(tilted_and_drunk_milk, mouth_around_spoon).
causes(unique_words, arguments).
causes(use_dion_two_correctly, dion_two_correct).
causes(use_traditional_pedagogy, pedagogy_format_used).
causes(walked_to_pond, helped_pedagogue).
causes(wrapped_around_you, helped_student_be_selfsufficient).
causes(write_about_time_space, time_space_written).
causes(write_architecture, drain_water).
causes(writing_breasonings, unique_words).
causes(wrote_noam_chomsky_comments, wrote_text_to_speech_algorithm).
causes(wrote_text_to_speech_algorithm, received_ball).
celebration(there_is_a, progress).
chain(Starting, Ending) :-    leads_to(Starting, Next),    (Ending = Next; chain(Next, Ending)).
chain_of_implications(Y) :- facts(Y).
change_algorithm(robot) :- false. % This means the robot does not change its algorithmis_cooler(bedroom) :- true. % Conditions for it being cooler```### Explanation:1. **Actions are defined as rules**: In Prolog, actions can be represented using rules that define when certain actions can be taken. For instance, `wear(suit)` is possible when `have(practicum)` is true.
changed_parameters(Yes).
changed_state(files, original_state).
character(alexis).
character(alexius_meinong).
character(dion).
character(duckling).
character(god_lizard).
character(lecturer, 'Let’s explore the depths of our arguments.', time('during')).
character(queen).
character(richard_rorty).
character(student).
character_action(meet_other_character).
character_issue(Subject) :-    characters_present(CharList),    \\+ corresponding_chars(CharList),    format('~w encounters an issue with character correspondence.~n', [Subject]).
characters_present([hand1, hand2, pot]). % Description of characters as hands and a pot.
charted_path(female_figure).
check_comments(breasonings) :-     not(verify(new_breasonings)),    filter_out_duplicate_comments.
check_condition(has_pet(spider)) :- pet(spider).
check_condition(in_row(barnacle)) :- counted(barnacle).
check_disagreement(Subject, Idea) :-    subject_disagrees_with(Subject, Idea).
check_handle_length(Handle) :- (Handle == long -> write('One long handle.'); write('More than one handle.')), nl.
check_pairs([H|T]) :-    check_pairs_with(H, T),    check_pairs(T).
check_premises([P | Rest]) :-    premise(P, _),    check_premises(Rest).
check_progress(Doctor, Child) :-    role(Doctor),    relationship(logs, Doctor, conversation),    action(check),    role(Child).
check_source(\"subject\", Source) :- source(Source).
checked(art_of_walkthroughs, clarity).
checked(good).
checked(test_cases_solved).
checked_changes(presentation).
checked_checkmate(chess_player).
checked_code(X).
checked_requirement(Requirement) :- earned_sense(Requirement).
chef_tested_table_stability(Yes).
chews_and_swallow(alexis, part_of_lolly_snake).
child_equipped_for_study(child).
child_parts_go_well_together(synthesis).
children_have_right_to(development_environment).
choose_philosophy(Philosophy) :- write('Chosen philosophy: '), write(Philosophy), nl.
chooses_setting_time(he) :- purpose(setting_time, reason_argument).
chose_algorithm(topical_version).
chose_colours(dark_coloured, school_bag).
chose_not_to_give_statement(prince).wrote_about_pen_name(author).
claimed_concealment(rod, coit).
clause(any_algorithm, because(emptied(shampoo))).
clause(conjoined_parts, because(can_create(any_algorithm))).
clause(connect(key_ideas), because(might(go_mad(fewer_people)))).
clause(cow_tape, because(wrote(conjoined_parts))).
clause(go_mad(fewer_people), because(wrote(zcoordinate(point_of_pentagon)))). clause(zcoordinate(point_of_pentagon), because(intermingled(other_states))).
clause(neuroscientist, because(should_connect(key_ideas))).
clause(shampoo, because(prepared(neuroscientist, store(memo, cold_place)))).
cleaned(shoe, front_to_back).
cleaned(shoe, top_to_bottom).
cleaned_child_face_with_cloth(Child).
cleaned_shoe(front_to_back).
cleaned_shoe(top_to_bottom).
click_and_count(\"person\", \"mantra_utterances\").understand_object_in_speech(\"subject\", Object) :- object(Object).
clippered(left_side, beard).
closed(teeth, nut).
closed_door(architect).
closing_birdcage_door(she).
cobreasonings(links(breasonings, experienceable)).
collect_key_ideas(Ideas) :-    findall(Idea, key_idea(Idea), Ideas).
collected(comment).
collected_details_students :- writing_philosophy(students, my_philosophy).
coloured(illustrations, 'using petals', 'because').
comfort_food(X, coffee) :- likes(X, coffee).
comment('I discovered the puzzle language because...').
comment('The societology model worked well because...').
comment(3, \"Programming is fun!\", non_offensive).
comment(4, \"I can't agree with that.\", non_offensive).
comment(5, \"Please be positive.\", duplicate).
comment(algorithm, text_to_speech).
comment(derrida, writing).
comment(line(2), \"Input: Two integers\").
comment(line(3), \"Output: Sum of the two integers\").
comment(line(4), \"This implementation follows standard algorithm\").
comment(meinong, algorithm, probable).
comment(noam_chomsky, alexius_meinong).
comment(nussbaum, rorty).
comment(richard_dawkins, pedagogy_indicators).
comment(rorty, integration_body_systems).
comment_on_medicine(Subject) :- action(write_comment(Chomsky, Medicine, Lucianpedia)), subject(Subject).
comment_on_meditation_indicators(richard_dawkins).
comment_set(philosopher1, lucians_line).
comment_set(philosopher2, lucians_line).
commented(alexius_meinong, medicine_blog).
commented(modellike).
comments(richard_rorty).
comments_probable(noam_chomsky, freedom_and_creativity).
commission_summary :- subject_commissioned_summary(because).
commissioned_summary(subject).
commissions(glossary, subject).
committed(research, projects).
communicate_brain(left_hand, right_hand, conversation).true_philosopher(abbey).
communicated(X) :- reason(X, 'to effectively convey ideas').
completed(breasoning_arguments).
completed(informed_local_people).
completed_code(lucian_cicd, types).
completed_iq_test(alexis).
completes_iq_test(X) :- eats_minestrone(X), demonstrates_intellect(X).
completion(delegatee, workload).
complies(Department, Criterion) :-     % Placeholder for conditions leading to compliance    format('The ~w department complies with ~w.', [Department, Criterion]).
computational_hegelian(example(inter_subjectivity)).
computed_output(subject_predicater).
concept(breason, reasoning).
concept(character).
concept(daoism).
concept(efficiency).
concept(games).
concept(meditation).
concept(meditation, prerequisite).
concept(monologue).
concept(phenomenology).
concept(prism).
concept(progress).
concept(quality_assurance, checking).
concept(quantum_box).
concept(safety).
concept(spiritual_preparation).
concept(synthesis).
concept(time_space).
concept(verification, necessary).
concept(waiting).
concept(work_done).
conception(conception).
concepts(aig).
concepts(breasoning).
concepts(electron).
concepts(ethics).
concepts(government_campaign).
concepts(hydrangeas).
concepts(image).
concepts(krishna).
concepts(love).
concepts(pedagogue).
concepts(pencil).
concepts(pencil_case).
concepts(philosophy).
concepts(self).
concepts(spiritual_preparation).
concepts(wire).
conclusion(Conclusion) :-    action(Conclusion),    because(Conclusion, Reason),    conclusion(Reason).```### Explanation- We define facts for the main actions (`action/1`).
conclusion(give_spider(adrian), pet_given).
conclusion(help, why(module_added)).
conclusion(meditation, why(mantra_repeated)).
conclusion(teacher, why(wished_good_luck)).
condition(causes(Stiffness, Medication)) :- member(Medication, [meds1, meds2]), Stiffness = muscle.
conducted_activity(training_pedagogy_helper).
confectioner_prepares(lolly_snake).
confirm_number :- self_confirmed_number(number).
confirmed(number).
confirmed_itinerary(robot).
connect(adam_levine_exploration, observe_students).
connect(alexis_speaking, observe_students).
connect(first_kingdom_written, pedagogue_preparation).
connect(meditation_pass, pedagogue_preparation).
connect(mix_ingredients, pie_prepared).
connect(observe_students, write_essay).
connect(pedagogue_preparation, connect_pedagogy_helpers).
connect(pie_prepared, observe_students).
connect(pushup_performed, observe_students).
connect(write_essay, compute_english).
connect(write_essay, physics).
connect(write_essay, popology).
connect(write_essay, societology).
connect_algorithm_with_breasoning(Algorithm, Breasoning) :-     format('Connecting algorithm ~w with breasoning ~w.', [Algorithm, Breasoning]).
connect_ideas(KeyIdea1, KeyIdea2) :-     format('Connecting ~w with ~w.', [KeyIdea1, KeyIdea2]).
connected(11, 12).
connected(3, 4).
connected(4, 5).
connected(5, 6).
connected(6, 1).
connected(7, 8).
connected(9, 10).connected(10, 11).
connected(clique_node1, clique_node3).
connected(clique_node2, clique_node3).
connected(daoism, phenomenology).
connected(lucianic_meditation, neuroscience).
connected(neuroscience, thought).
connected(pedagogy, feelings).
connected(phenomenology, safety).
connected(prism, quantum_box).
connected(quantum_box, daoism).
connected(safety, time_space).
connected(software_repository, pedagogy).
connected(thought, pedagogy).
connected(time_space, prism).
connected(work, pedagogy_helpers).
connected_arguments(internet).
connected_parts(algorithm_rewriting, functionalism).
connection_to_liking :- liked_them(because).
connects(good_approaching_bad, vegan_meat).
connects(love, horse).
connects(magic_wand, conception_argument).
consequence(earn_straight_as, receive_praise).consequence(add_one_to_count, increase_total).
consequence(open_purse, access_money).
considered(all).
considered_algorithm_position(algorithm).
consolidated(life, prepare_life).
const(address2).
const(address3).
construct_argument(A, B) :-    format('Argument for ~w: ~w. ', [A, B]).
contains(accusative_parts_theories, breasonings).
contains_line(Line, hs_length) :- length(Line, L), L >= hs_length.
contains_minerals(rissole, minerals).
contains_two_hs(Line) :-    atom_chars(Line, Chars),    findall(H, member(H, Chars), Hs),    length(Hs, N),    N >= 2,    member('h', Hs).% Example call to check a line for two 'h'scheck_line(Line) :-     contains_two_hs(Line),     writeln('The line contains at least two hs.').
contains_two_hs(line) :- length(line, H), H == 2.
contains_vegetables(rissole, vegetables).
contains_vitamins(rissole, vitamins).
continued(action).
continuously_improving(new_content).
contributed(doctor_quality(better), event(birth)).
converted(famousness, famousness).
converted_question_to_answer(question, answer).
cool_myself :- write('Cooled myself.'), nl.
copy_righted(Material) :- action(copywrite(Material)), Material = everything.
correct_code(algorithm, questionable).
correct_doses_connection :- logical_connection_to_vitamins(because).
correct_use(DION_two).
correct_use(dion).
correct_use_because(initiated_nature).
could_be(being, being).
could_be_like(X, Y) :- Y = plato.
could_hold_object(point_forgotten).prepared_to_write_first_comment_set(ALEXIS, lucians_line).
count_h([], 0).
count_h([_|Tail], Count) :-    count_h(Tail, Count).% The memberh predicate checks if there are exactly two occurrences of 'h' in Line.
count_h([h|Tail], Count) :-    count_h(Tail, TailCount),    Count is TailCount + 1.
count_h_chars(['H'|Tail], Count) :- % to account for uppercase 'H'    count_h_chars(Tail, TailCount),    Count is TailCount + 1.
count_h_chars(['h'|Tail], Count) :-    count_h_chars(Tail, TailCount),    Count is TailCount + 1.
count_h_chars([_|Tail], Count) :-    count_h_chars(Tail, Count).
count_keyword([H|T], Keyword, Count) :-    (   sub_string(H, _, _, _, Keyword)  % Check if the keyword is in the current statement    ->  count_keyword(T, Keyword, SubCount),  % Count in the tail if found        Count is SubCount + 1              % Increment count    ;   count_keyword(T, Keyword, Count)     % Continue counting without increment    ). % Predicate to initiate counting from the list of breasoningscount_breasonings(Keyword, Count) :-    breasonings(List),    count_keyword(List, Keyword, Count).
count_occurrences([H|T], X, Count) :-    H \\= X,    count_occurrences(T, X, Count).
count_short_handles([Word | Tail], Count) :-    length(Word, Length),    (   Length < 4 ->         count_short_handles(Tail, TailCount),        Count is TailCount + 1    ;   count_short_handles(Tail, Count)    ).
counted(as_per_book).
counted_breasonings(john).
counted_second_enumerator(second_enumerator).
counted_starfish_arms(Person) :- Person = richard_rorty.
counted_tadpoles(he, position_above).
course(computer_science).
covered_time_points(quickly).
covers(pillow_x, pillow_y) :- pillow_stack(upper_layer, lower_layer), in_upper_layer(pillow_x), in_lower_layer(pillow_y).
create_narrative(Narrative) :-    protection_natural_law(Protection),    taped_edges(Taped),    teaching_tame_budgy(Teaching),    knows_material(Know),    adorned_table(Adorned),    prepared_openended(PreparedOpen),    breathsonings_written(Breath),    breasonings_philosophical(Breason),    recycling_paper(Recycling),    recommended_arts(Recommended),    format(Narrative, '~w, ~w, ~w, ~w, ~w, ~w, ~w, ~w, ~w, ~w.',             [Protection, Taped, Teaching, Know, Adorned, PreparedOpen, Breath, Breason, Recycling, Recommended]).% Example query to generate the narrative% ?- create_narrative(Narrative).
created_objects([x, y, z]).
created_saas(git_env).
creation(lf, lingua_franca).
creativity_assessment(DION, currency).
critical_of(blockedness).
cut_from_plant(tulip).
cut_off(aig, last_breasoning).
cut_out_squares :- action(cut_squares).
cut_shape(petal, page).
cuts(letter).
data_and_technology(better).
date(asday).% Computational Conceptscomputational_hegelian(program(example)).
debate(thing, normality).
decide_whether_to_buy(Philosophy) :- write('Decided on: '), write(Philosophy), nl.
declares(alexis, checkmate).
decoded(blueberry_jam, both_paths).
decoded(raspberry_jam, right_path).
decoded(strawberry_jam, left_path).
decorated_table(lecturer_books).
decorated_table(short_articles).
deflects_complaint(alexis, prince).
degree_algorithm_found(ad_pairs(ab, cd)).
degree_algorithm_found(ad_pairs(cb, cd)).
delete_first_item([_ | Tail], Tail). % If the list is not empty, return the tail.
delete_first_item(list, ResultList) :-     tail(list, ResultList).  % Assuming tail is defined elsewhere to remove the first item.
delete_first_line(Item, [Head|Tail], [Head|ResultTail]) :-    delete_first_line(Item, Tail, ResultTail).
delete_first_line(Item, [Item|Tail], Tail).
delete_first_line(_, [], []).
demonstrated(\"The autist demonstrated exceptional rote memory by using a mnemonic system\").
demonstrated(john_doe).
demonstrated_cleanliness(X) :- demonstrated(X).
demonstrates_intellect(X) :- prepared_to_record(X), verifies_output(X), completes_iq_test(X).
demonstrates_intellect(alexis).
dependencies(pointers).
dependency(examine(Title), read(comments)).
dependency(predict_savings(Task), action(run(Task))).
dependency(write(essay), examine(title)).
derived_quantum_power_from_nothing(Yes).wrote_philosophy(Yes).
describe_people([Person | Rest]) :-    format('This person is ~w. ', [Person]),    describe_people(Rest).
describe_people([]) :-     !. % Base case for the recursion.
described(way_of_thinking).
describes(X, Y) :- essay(X, Y).
describes_action(check_utensil, carryable).
describes_action(cut_balsa_wood, helpful).
describes_action(verify_summary, verified).
describes_action(write_algorithm, simplified).
describes_argument(lucian_mantra, sun_safety).
describes_computational_english(calculator).
description_paragraph(Y) :- action(Y, 'The description may be a paragraph, word, or keywords.').
design_business_card(my_website).
designed(comments, rorty_comments).
designed_business_card(professional_website).
designs_comments(he) :- designed(comments, rorty_comments).
desires(dion, understand_objects).
desires(self, aig).
desires(warm_space, alexis).
destination(fair).
details(declare, checkmate).
details(prepare, mind_map).
determine_if_supported(idea) :-     support_idea(_, idea),    redrafted(idea).prepare_conclusion(Teacher) :-     prepared_conclusion(Teacher, Reason),    think_of_reason(Reason).
determined(events_history_over_time).
determined(time, pedagogical_aigs).
determined(wraparound_sunglasses).
determined_face_shape(because).
determined_sunglasses(meditation, lucian_machine).
determines_time_for_aigs(he) :- determined(_, pedagogical_aigs).prepares_apology(he) :- prepared(say, sorry).
deterred(poltergeist, 'from eating feces himself', 'because').
develop_algorithm(student, plant).
developed_thing(universe).
did(alexis, computed_text_speech).
did(alexis, prepared_to_prevent_depression).
did(dion, observed_object).
did(eat(maringue), use(cubeended_spoon)).
did(he, record(questions_answers)).
did(martha_nussbaum, ask_for_work).
did(neuroscientist, measure_achievement).
did(sa, teaches_meditation).
did(subject, delegate_grouping).
did(subject, enjoy_self_sufficiency).
did(subject, prepare_training).
did(subject, verify_content).
did(teacher, like(principal)).
did(write(breasonings), for(phd_sentences)).
did_action(Action) :- Action = mashed_with_fork_and_licked(fork); Action = polished(glass).
did_action(holding_tofu, skewering_tofu) :- did_this(holding_tofu, skewering_tofu).
did_by_sitting_in_sun_overcast(Yes).
did_it(because).
did_job_itself(society) :-     enamoured(succleton),    picked(rhubarb).
did_not_misunderstand_review(subject).
did_part_ways(X) :- parted_as_friends(X).
did_this(close_door, __).
did_this(create_pedagogue, reason_list).
did_this(find_A_for_thought, time_travel).
did_this(holding_tofu, skewering_tofu).
did_this(john_doe).
did_this(maintain_posture, retain_heart_health).
did_this(place_lettuce_and_tomato_on_plate, __).
did_this(prepare_morning_tea_outside, eat_apple).
did_this(see_meaning_of_self, __).
did_this(wave_to_car, __).
did_this_by(alexis, eating_strawberry_with_cream).lift(child_model, psychiatrist, step).
did_this_by(finished_class, writing).
did_this_by(including_theme, medicine).
did_this_by(placed_crane_model(She, ground)).
did_this_by(removing, duplicates).
did_this_by(stating_argument, a_grade_argument).
did_this_by(tasting, lollys_colored_parts).did_this_by(processing_data, bulk).
did_this_by(understanding, multiples).
did_this_by(writing, cosmology).
diet_choice(realistic).
different_speech(Text1, Text2) :- same_texts(Text1, Text2).
dimension(y).
dimension(z).
dimension_of_object(x, y, z).
dion_advance_to_first_instance(item, line).
dion_line(Handle) :-    has_long_handle(Handle),    check_handle_length(Handle).
dion_statement(subject, base_exists).
disabled_people(E) :- action(E, 'There were disabled people.').
disagreed(Person, Action) :- action(Action), not(remember(Action, Person)).
disagreement(essay1).
disagreement(mary, critique1).
disappointment_type(no, one_object).
discovered(cow, tape).
discovered_cure_influenza(R.esearcher) :- crawled_into_room(Room).
discovery(client(discovery)).
discovery(client, discovery_element).
discovery(cycle).
discussed(PhD_articles, 'and may lead to the quality of life of an academic', 'because').
discussed(professor(richard_dawkins), comments(richard_rorty)).
discussed_students_progress(with_her).
disinfected(shoe).
dislikes(X, Y) :- not(likes(X, Y)).
dismantled_and_measured(professor, components(pinhole_camera)).
displayed_genre(G) :- G = 'literature'.
distanced_from_philosophy(\"breasoning\").
doctor_logs(conversation_with(meditation_check)).
doctor_prepared_to_eat_rice_ball(person(X)) :- ate_apple(X).
dodged_bullet(yes).
does_not_differentiate_subject(he) :- subject(wrote, essay, same_point, object).
does_not_make_new_connection(term, definition, dion).
does_not_stand_or_carry(plate).
dog_cared_for('head_of_state', 'dog', 'by_coming_to_her').
done_work(self).
dose(calcium, 1000).
dose(fiber, 25).
dose(iron, 18).
dose(vitamin_a, 900).
dose(vitamin_c, 90).
drank_liquid_with_suction(student).
drew_map(pencil).
drink(holy_water, alexis).
drink(it).
earned(certificate, preparation).
earned_breasoning(X) :- earned_breasonings(X).
earned_breasonings(questioning_right).
earned_sense(check).
eat_meringue_with_cubed_spoon(Person).
eating(astronaut, jube).good_place(space_station).
eating(raspberry_jam, buttered_toast).
eating(strawberry_with_cream).% Rules that define relationships between actions.
eating_candy_cane(Child).
eating_cream('you', 'éclair').
eating_less(X) :- ate(X).
eating_turnip(X) :- did_this(X).
eats_minestrone(alexis).
edited_out(epistemology).
educate_about_body(Doctor, Patient).
educates(people, subject, pedagogy).
education(free).
effect(connect_arguments, turn_train).
effect(reintroduce_argument, help_others).
effect_on_people(Item1, Item2) :- used_two_items_in_different_ways(_, Item1, Item2).
efficient_teacher(Teacher) :-    teacher(teaching_experience, As),    As > 0,    format('~w is an efficient teacher with ~d As collected.~n', [Teacher, As]).
eighth_action(prepare_bottle).
elaborate_reasoning(N, [Reason | Rest]) :-     N > 0,    reasoning(N, Reason),    N1 is N - 1,    elaborate_reasoning(N1, Rest).
eliminated(external_areas, study).
emotion(felt_sorry, physically_challenged_person).
emptied(shampoo, enough).
enabled(my_certification_service).
enamoured(succleton).
encourage_cockatoo(first_cockatoo).
endorsed(subject, lucian_academy).
endorsed_positive_enough_objects(subject).
endorsed_positive_objects(Endorsement).
endorses_positive_objects(alexis).
endorsing_positive_objects(X) :- endorsed_positive_enough_objects(X).
engage_in_activity :- saw(friends), walked(dogs).
engaged_in_conversation(Half1, Half2) :-     communicate_brain(Half1, Half2, conversation).
engaged_in_philosophy(john) :- philosophy(meditation).
enjoy_snack :- eating(raspberry_jam, buttered_toast).
enjoyed_subject(Enjoyment).
enrolled(mary, computer_science).
ensured_dress_code(student2, tucked_in).
ensured_dress_code(student3, tucked_in).
entered(login_details).
entity(adrian).
entity(barnacle).
entity(black_box).
entity(breasoner).
entity(breasonings).
entity(budgerigar).
entity(building).
entity(church).
entity(comments).
entity(computer).
entity(customer).
entity(daughter).
entity(dependent).
entity(dion).
entity(essay).
entity(existence).
entity(friends).
entity(gail).
entity(gazebo).
entity(illustrator).
entity(juniper_berry).
entity(king_lion).
entity(knife).
entity(lettuce).
entity(light).
entity(lucianpedia).
entity(male).
entity(meditation).
entity(meinong).
entity(menu).
entity(non_university_professor).
entity(orange, fruit).
entity(pear).
entity(person).
entity(physicist).
entity(point_a).
entity(point_b).
entity(professor(iranjan)).
entity(reasoning).
entity(shoe).
entity(strawberry).
entity(students).
entity(theories).
entity(title).
entity(toy).
entity(university_professor).
entity(vatican).
entity(wine).
essay(breathsonings, theory_of_judgment).
essay_written :- wrote_rebreathsonings_essay_secondary_text_press_release(because).
essential_component(book, b).
ethical_assessment('time and space').
evaluate_sentences([H|T]) :-    evaluate_sentence(H),    evaluate_sentences(T).
event(agreeing_with_criticality).
event(applying_sunglasses).
event(arrive_on_time(OverallExperience)).event(prepared_come(Homebot)).
event(avoiding_confrontation).
event(birth).
event(book_closed, 'The neuroscientist closed the book about the brain', because(unknown_reason, '')).event(loved_licky, 'First I loved licky', because(unknown_reason, '')).
event(brighten_day(MaidMarion)).
event(cake_maker_prepared).
event(calculated_best_time).
event(cheating_fate).
event(collect_details(Students, Philosophy)).
event(compared_notes).
event(complete_practicum).
event(conception).
event(connect_argument).
event(connected_arguments).
event(delightful_experience(PositiveExperience)).
event(determined_face_shape).
event(dion_correct).
event(dion_uses).
event(enter_centre, \"Walked into a centre.\").
event(envelope_found, 'I did this by finding the envelope', because(unknown_reason, '')).
event(essay_kept_years).
event(examine_void_hole, \"Examined the void hole.\").
event(examine_wearing(Person, Item), \"Found whether Person was wearing Item.\").
event(expansion_requires_medicine).
event(express_intent(Intent), \"Prepared to say Intent.\").
event(feeling_bow_tie, 'I did this by feeling the bow tie', because(unknown_reason, '')).
event(find_property(FilePart, Property), \"Found that the FilePart had the Property.\").
event(first_drew_map_in_pencil, artist).
event(gave_text_and_speech).
event(generate_details(EducationSkills)).
event(govern_person, person2).
event(held_sheet_of_paper).
event(helped_pedagogue).
event(hint_works).
event(hoisting_singer).
event(i_had_quality_of_life).
event(i_prepared_encourage_cockatoo).
event(i_prepared_observe_students).
event(i_prepared_selfconfidence).
event(jump_around).
event(king_gave_strawberry_milkshake, king).
event(lay_in_bed).
event(lived_high_life).
event(logical_breasonings).
event(looked_at_object).
event(loving_myself).
event(lying_on_bed).
event(meaning_attachment).
event(medicine_helped, 'I helped each person with medicine', because(unknown_reason, '')).
event(met_standard, person4).
event(mouth_around_spoon).
event(noticed_squib, observer).
event(parliament_made_correct_decision, parliament).
event(pedagogies_written, 'Rural area residents wrote pedagogies', because(unknown_reason, '')).
event(pointed_hose).
event(practise(saltate)).
event(prepared_to_eat_processed_feces).
event(preparing_to_ask_whos_that).
event(press_first).
event(press_strawberry).
event(produced_longest_amount_of_work).
event(professor_had_A).
event(progay_like_prowomen).
event(read_comments(Subject)).
event(read_comments).
event(rewrote_prolog_code).
event(robot_mind_read).
event(second_drew_translatative_transformations, artist).
event(she_read_hint).
event(site_checked, 'As the inspector checked the site', because(user_used_site, 'the user used the site')).
event(smile_camera(Scientist)).
event(software_helped_pedagogy).
event(stage_suggestion).
event(stood_on_bed).
event(stop_in_shade).
event(students_completed_essays, student).
event(study_apoptosis).
event(subject_connection).
event(swim_right_left).
event(swimmer_kicked_water).
event(switch_on_lamp).
event(teaching_meditation_technique).
event(tilted_and_drunk_milk).
event(using_aigs).
event(walked_to_pond).
event(wheat_harvested, 'The farmer harvested the wheat', because(unknown_reason, '')).
event(write_algorithm).
event(write_comments(Author, Topic), \"Wrote comments by Author on Topic.\"). event(prepare_crates(Type), \"Prepared to make crates for the Type.\"). event(write_press_release(Author, Topic), \"Wrote the Press Release for Author's comments on Topic.\").
event(write_essay).
event(write_first_comment(Subject, CommentSet)).
event(write_philosophy(Students, MyPhilosophy)).
event(writing_secondary_texts).
event(wrote_philosophy).
event(wrote_story_of_us, person3).
exam_exemption(physically_challenged_person, supplementary_exam, not_acceptable).
examination_recommendation(physically_challenged, supplementary).
examination_written :- wrote_examination_first_book(Yes).
examine(mans_ideas, order(honorary_fellows)).direction(person_or_object, room_area(time)).
examine_groups :- examined_size_of_groups(true).
examined([head_of(fly)]).
examined(computer_science_department).
examined(culture).
examined(image, magnifying_glass).
examined(john_doe).
examined(life).
examined(person, subject).
examined(reality).% Text analysis and algorithm writing.stated_time_to_breason(lecture, text) :- wrote_algorithms.
examined(second_heavenly_virtue, temperance).
examined(subject).
examined_electronics(2, 'transition machines', 'seenas version food').
examined_object(X) :- examined(X).
examined_reasoning(X) :- tested_algorithm(tester).
examined_reasoning(alexis).
examined_sample_input(Z) :- action(Z, 'Third I examined the sample input and output.').
examined_size_of_groups(true).
examined_title(Title) :- prepared_to_eat(vegan_cake).
examines(self, others).% Pedagogical advantagesadvantage(pedagogy).
examines(self, self).
execute(give_spider(Person)) :- write('Giving spider to '), write(Person), nl.
execute(swap_roles(Person)) :- write('Swapping roles with '), write(Person), nl.
execute_action(change_nappies) :-    write('Changing nappies...'), nl.
execute_action(clean_child_face) :-    write('Cleaning the child\\'s face...'), nl.
execute_action(drive_to_work) :-    write('Driving to work...'), nl.
execute_action(lift_baby_from_cot) :-    write('Lifting the baby from the cot...'), nl.
execute_action(wet_cloth) :-    write('Wetting the cloth...'), nl.
exercised_each_part('I', 'to_live_longer').
existence_of_texts_helps_class(X) :- reason(X, 'to provide context and reference for learning').
expectation(computing_power, speed).
expected_goodness(situation).
expects_speed_for_power(he) :- expectation(computing_power, speed).
experience(dion, negative).
experienced(first_object, second_object) :- thought_of(first_object, second_object).
experiences(X, Quality) :- experiences_quality(X, Quality).
experiences_quality(meditation, relaxing).
experiences_quality(students_thoughts, bad).
explain(1, 3) :- subject(3, _), reason(2, _).
explain(2, 6) :- subject(6, _), reason(4, _).
explain(4, 5) :- subject(5, _), reason(5, _).
explain(5, 1) :- subject(1, _), reason(6, _).
explain(6, 8) :- subject(8, _), reason(7, _).
explain(Action, By) :-    reason(Action, NextAction, _),    explain(NextAction, By).
explain_action(Action) :-    action(Action, Description),    reason(Action, Reason),    format('~w because ~w.~n', [Description, Reason]).
explain_all_actions :-    findall(Action, action(Action, _), Actions),    maplist(explain_action, Actions).
explanation_for(mathematics) :- prepared_explain(mathematics, _).
express_love_for(Person) :- loved_her(Person).
expresses_liking(Person, Subject) :- Person = alexis, Subject = Impressionism.
external_areas_ignored(Areas) :- eliminated(Areas, study).
extract_from(Item, Result) :-    line(Text),    sub_string(Text, Before, _, After, Item),    sub_string(Text, Before, _, 0, Prefix),    sub_string(Text, _, After, 0, Suffix),    atom_concat(Prefix, Item, TempResult),    atom_concat(TempResult, Suffix, Result).
fact(2, \"I wrote the Press Release for Alexius Meinongs probable comments on the Medicine indicators.\").
fact(3, \"I connected my current topic of interest with the previous one.\").
fact(4, \"I worked out the logic for ALEXIS's important subject.\").
fact(5, \"I prepared to watch the adults.\").
fact(6, \"I debated it.\").
fact(7, \"I wrote all the ideas.\").
fact(8, \"Think of the X, Y, and Z dimensions of an object.\").
fact(assess_ideas, \"I prepared to assess the ideas which had all been explained\").
fact(bowl_of_curd, \"Third he noticed that the bowl of bean curd was in front of him\").
fact(cut_apple, \"First I cut the apple horizontally\").
fact(god_imagery, \"God simply makes imagery available and so allows meditation possible\").
fact(is_a_breasoner(alexis)).
fact(is_founder(alexis)).% Rules for reasoningcan_reuse(Subject) :-    fact(has_no_criminal_record(Subject)),    !,                   % Cut to prevent backtracking    write(Subject), write(' can be reused.'), nl.
fact(language_test, \"I tested the different language on the other operating system\").
fact(mind_mapping, \"I found the mind mapping categories\").
fact(order_argument, \"First I ordered the self and other argument\").
fact(peer_create, \"A peer should create a Pedagogue by writing areas of study\").
fact(reading_sequence, \"One read was before writing and one was afterwards\").
fact(self_knowledge(others_knowledge)).
fact(statement(\"It was right\")).
fact(student_preparation, \"As per student before they have the professor algorithm reasoned out for him or her\").
facts(X) :- did(X).
facts(X) :- found(X).
facts(X) :- gave(X).
facts(X) :- knew(nomenclature).
facts(X) :- made(X).
facts(X) :- prepared(X).
facts(X) :- were(X).
facts(X) :- wrote(X).
fairy_godmother(prepared_to_find(present)).
famousness(department_b, medium).
famousness(department_c, low).
farmer(farmer).
father_prepared_to_teach_children(reading).
favour_of_equality('third').
feedback_positive(Feedback).
feeling(happy).
fifth_action(enjoyed_airconditioned_comfort).
fifth_action(feel_affirmation).
fifth_step(put_hands_on_back).
filter_duplicates(Comment).
final_step(show_movie).
find(Item) :- found(Item).
find_causes(Event, [Event]) :- \\+ causes(Event, _). % Base case for recursion```### Explanation:1. **Events as Facts**: Each part of your narrative has been assigned as an event—these facts denote the occurrence of an action.2. **Causal Relationships**: The `causes` predicate illustrates how one event leads to another. For example, `causes(i_wrote_sentence, output)` indicates that writing the sentence results in producing an output.3. **Queries**: The `query_cause` rule allows querying which events are caused by `i_wrote_sentence`.
find_connection(X, Y) :-    connected(X, Y).
find_reason(R) :- reason(R).
find_related(_).
find_synonym(X, Y) :- synonym(Y, X).
find_terminals_addresses(Term, Address) :- Address = term_address(Term), write('Found terminals address for: '), write(Term), nl.
finds_ideas_from(students, magazines).
finished(licking, icecream).
first_area_of_study(written_next).
first_item_in_line(item1). % Example itemprocess_item(item1).
first_technique_includes(technique1) :- first_technique_contains_expositions.
flight_of('concords').
focus_on_first_technique(has_upper_lower_triangular_expositions).
foisted_on(person) :- this_is_foisted_on_person.
foisted_on(person, situation).
follow_path([H|T], Visited, Path) :-    \\+ member(H, Visited),    follow_path(T, [H|Visited], Path).follow_path([H|T], Visited, Path) :-    member(H, Visited),    follow_path(T, Visited, Path).
follows(First, Second) :- Second = confirmed_itinerary(robot), First = stopped_at_rim_glass(robot).
follows(First, Second) :- Second = discussed_students_progress(with_her), First = made_walkway(me).
follows(First, Second) :- Second = made_walkway(me), First = breasoning(ideas_1, ideas_2).
follows(First, Second) :- Second = positioned_above_sink(robot), First = confirmed_itinerary(robot).
follows(First, Second) :- Second = reasoned_out(program_breasoning), First = wrote_down(breasoning).
follows(First, Second) :- Second = stopped_at_rim_glass(robot), First = discussed_students_progress(with_her).
follows(First, Second) :- Second = wrote_down(breasoning), First = positioned_above_sink(robot).
formatted_output(\"I formatted the output\").
found(Students) :- students(Students).
found(agreement).
found(entrance, meditation, teaching).
found(evidence).
found(pedagogy_helper).
found(police_person).
found(student).
found(tab_attached_to_lid).
found(two_dogs, 'because').
found_algorithm(lit_up).
found_bliss(nontheological_topics).
found_block(Person) :- block(Person).
found_border(second).
found_combinations_of_functions(Functions).
found_constant_in_ab(Constant, Term) :-    find_terminals_addresses(Term, Address),    save_same_items_in_same_addresses(Address, Constant).
found_detritus('he', in_lips).
found_person(F) :- action(F, 'First I found the person.').money_to_rome(G) :- action(G, 'The meditator brought their money to ancient Rome much to the delight of restaurateurs.').
found_protection(natural_law).
found_sunscreen(because).
found_sunscreen_container(person1).
found_working_method(2).
founder(subject) :- reasoning(culture, small_idea).
founder_justification(dion, misaligned_meanings).
fourth_action(write_argument).
fourth_action(wrote_press_release).
fourth_step(observed_partner_sing).
freedom_and_creativity(true).
friar(relates, pedagogy_x, breasonings).
friend(bob, charlie).
friend(charlie, diana).
friend(diana, alice).
friendly_action(smile).
friendly_approach(prepare_love).
friends('both').
functional_program(because(why)) :- reason(why).
functional_program(subject).
gain_attention(because).
game_variant(rock_paper_scissors).
gave(king, star).
gave(woman, antidepression_degree).
gave(woman, antidepression_song).
gave_grade(a, clothing).
gave_presents(Reason) :- Reason = 'gave presents out'.
gave_song_to(girl).
gave_straw(true).
gave_visually_impaired(Braille_Argument_Map).
general_audience(arguments).
generated_algorithms(true).
generated_and_ran(lambda_code, reason(lambda_execution)).
generated_lectures(lecturer).
gently_walk :- walked(gently).
get_reason(Topic, Reason) :-    reason(Topic, Reason).
gets_it_wrong(john) :- not(meeting_format).
give_straw :- gave_straw(true).
given(black_lamb).
given(pedagogue, before_conception).
gives_energy(rissole).
giving_something('you', 'somebody').
go(House) :- went_to_house(House).
go_to(bedroom) :- is_cooler(bedroom).
goal(achievable).
goal(direction, computing_goal).
goal(john, establish_academy).goal(mary, support_students).
goal(seek_king).
goal_achievement(X) :- action(X, _), reason(_, X).goal_achievement(X) :- reason(Y, X), goal_achievement(Y).
god(wrote(breasonings)).breasoned(\"As\").
going_to_church(is_similar_to, meditation).
good_in(simulation, alexis).
greens_pedagogy(earn_h) :- earn_h = professional_development.
hair_length_equal(actor, character).
half_open_umbrella(second).causal_merge_diverge(caw, horizontal, vertical, required_function).
handed_in(journal_articles, phd_content).
handles_memory(subject, text).
happens_before(called_Aigs, self_aims).
happens_before(loved_you, tested_algorithm).
happens_before(pressed_play_button, writing_press_release_nussbaum).
happens_before(self_aims, writing_press_release_dawkins).
happens_before(tested_algorithm, connected_critical_as).
happens_before(writing_press_release_dawkins, found_it).happens_before(found_it, pressed_play_button).
happens_before(writing_press_release_nussbaum, loved_you).
harvests(farmer, wheat).
has(bed, home).
has_algorithm(true).
has_book_of_knowledge(person) :- same_length_as_h(person).
has_character(speech).
has_chords(beethoven_symphony, 3).
has_comparison_with_yogis(Comparison) :- like_yogis(Comparison).
has_demonstration(Demonstration) :- demonstrated(Demonstration).
has_doors(wardrobe).
has_educational_value(cosmology).
has_experience(student, [worked, had_business, had_partner, had_sex]).
has_feeling(ha).
has_formative_assessment(student1).
has_formatting(Formatting) :- formatted_output(Formatting).
has_functionality(region2, function2).
has_functionality(region3, function3).
has_funding_sources(my_organization, donations).
has_handle(cup).% Predicate to check if a soundtrack has two chordstwo_chords(Soundtrack) :-     has_chords(Soundtrack, Chords),    Chords = 2.
has_issues(student, [depression, headaches]).
has_knowledge(nomenclature, john).
has_long_handle(Handle) :- write('Handle has long length: '), write(Handle), nl.
has_medical_certificate(alexis).
has_movie_theater_in_brain(analogy).
has_ontology(Ontology) :- ontology(Ontology).
has_positive_reason(Person) :- Person = some_person.  % Replace 'some_person' accordinglyread_marks(student).
has_preparation(Preparation) :- prepared_prevent(Preparation).
has_professional_requirements(worker).
has_property(essay, alphabet).
has_property(essay, definition).
has_property(essay, variables).
has_reasoning_skills(john).
has_short_handles(person1, 2).
has_starting_info(Info) :- started(Info).
has_statement(Statement) :- stated_cyclist(Statement).
has_testing(Testing) :- tested(Testing).
has_usage(breasoning, electron_transcendence).
has_usage(electron, wire).
has_usage(ethics, person_assessment).
has_usage(hydrangeas, love).
has_usage(pedagogue, observation).
has_usage(pencil_case, pencil).
has_usage(spiritual_preparation, next_part_of_life).
has_verification(Verification) :- verified(Verification).
head_comfort(Using) :- observed(head, comfort), used(Using, comfort).
head_comfort(aigs).
head_of_state(prepared_to_help).
head_placed(Condition) :- placed(head, Condition).
health_coverage :- medicine_coversion(whole_population, pedagogy).
heard_from(press).
heavier_than(X, Y) :-     weight(X, medium), weight(Y, light).
heavier_than(X, rock).
heavier_than(computer, apple).
heavier_than(rock, apple).
held(objects, activity).
held_hand(person1, person2).
held_oar(both_hands).
held_two_hands(pot).% Additional predicates based on provided information```### Explanation of Predicates1. **picked_up/2**: Represents the action of picking up the pendulum by its handle.
help_from_breasonings('help', 'breasonings').
help_someone :- human(X), action(help_employee), suitable_object(X, light_object).
help_understand_digestion(Patient).
helped(X, Y) :- action(gave_students(X, Y)).
helped(people, help_others).
helped(person, medicine).% Rules based on the relationships expresseddid_comment(X) :- comment(X, pedagogy_indicators).
helped_appointment(second_helper, vatican).
helped_time_travel(recording, breasoning).% Define a rule for understanding the reasoningunderstand_review(Object) :-    object(Object),    findall(Reason, reason_for(Object, Reason), Reasons),    write(Object), write(' has the following reasons: '), write(Reasons), nl.
helped_with_conception_medicine(computational_algorithm).
helps(X, Y) :- person(X), action(Y).
helps(alexis, _).
helps(breasoning, comprehension).
helps(ideas, breathsonings).
helps(meditation, health).
helps(pedagogy, learning).
helps_body(Identifier, high_life).
helps_medicine(healthy_babies).
high_marks_earned(h).
high_quality_developed(seen_as_version).
high_quality_imagery(meditation) :- teaching(meditation).
high_quality_imagery(yes).
holding_handle(summary).
holding_partners_hand(confidence_in_writing).
homograph(X, Y) :- X \\= Y, same_spelling(X, Y).% Condition to determine if translation conserves meaningtranslation_conserves_meaning(Text1, Text2) :-     commissioned_translation(Text1, Text2),     not(paradoxical_suggestion(Text1, Text2)).
honours_program(me).
host_successful_bear(host, minor, help_from(pedagogy_aigs)).
house_of_rhetoric_inspired_survival(because).
human(human_2).
icon_selection(icons, efficiency). % Subject selects from icons for efficiency.
iconism_correct(Nature) :- Nature = 'The use of different icons each day is correct'.
iconism_of_nature_correct :- uses_correct(dion).
idea(adam_levine_exploration).
idea(alexis_speaking).
idea(compute_english).
idea(connect_pedagogy_helpers).
idea(critical_positivity).
idea(first_kingdom_written).
idea(good_life).
idea(increased_efficiency).
idea(meditation_pass).
idea(mix_ingredients).
idea(observe_students).
idea(pedagogical_helper).
idea(pedagogue_preparation).
idea(physics).
idea(pie_prepared).
idea(popology).
idea(pushup_performed).
idea(societology).
idea(spiritual_help).
idea(write_essay).
identified(blue_eyes).
identified(jazz_instrument).
identified(lollipop, floornth).
identified(spindle, alexis).
identified_jazz_rhythm(person(X)) :- said_wouldnt_have_been_booked(X).
identified_repeating_structure :- action_for_safety(ledge), observed(yantara_pattern).
identifies_mental_nature_of_question(parent1, question1).
identity(pedagogical_assistant).
identity(societologist).
identity_change(whoami, 'removed_transsexual_identity').
ignored(nietzsche).
image_interest(professor, vocal_folds, weird).
image_realistic(professor, vocal_folds, false).
immortal_suggests_corrections(immortal).
implies(did_one_thing_at_a_time, knew(nomenclature)).
implies(found(breasoned_out(arg(viral_normal))), gave(woman, antidepression_song)).
implies(gave(woman, antidepression_song), knew(nomenclature)).
implies(knew(nomenclature), found(breasoned_out(arg(viral_normal)))).
implies(knew(nomenclature), were(meditation_themed_thoughts)).
implies(knowledge(acc_works), knowledge(hoisted_himself)).
implies(knowledge(clapped_at_presidents_navel), knowledge(dependencies_of_predicates)).
implies(knowledge(correct_vitamins_research), knowledge(acc_works)).
implies(knowledge(cow_tape), knowledge(clapped_at_presidents_navel)).
implies(knowledge(dependencies_of_predicates), knowledge(hint_triggered)).
implies(knowledge(hint_triggered), knowledge(replace_west_exit_mat)).
implies(knowledge(implies), knowledge(cow_tape)).
implies(knowledge(replace_west_exit_mat), knowledge(correct_vitamins_research)).
implies(prepared(be_religious_leader), did_one_thing_at_a_time).
implies(reason(comfortable_stage), action(comfortable_stage)).
implies(reason(first), action(first)).
implies(reason(first_walking), action(first_walking)).
implies(reason(prepared_replaced), action(prepared_replaced)).
implies(reason(prepared_to_select_healthy), action(prepared_healthy)).
implies(reason(second), action(second)).
implies(reason(wrote_letter), action(wrote_letter)).
implies(were(meditation_themed_thoughts), made(acidophilus)).
implies(wrote(natural_phenomenon), prepared(be_religious_leader)).
importance(essay, dion).
important_object(memory_handle).
improve_life(Academic) :- action(improve_quality_of_life, Academic).
in_level(breasonings, above).
in_lower_layer(pillow_2).
in_simulation(alexis).
included(secondary_text, 'in the bibliography', 'because').
included_in_bibliography(review).
included_in_bibliography(subject).
included_sections(3, 'medicine', 'continental philosophy', 'meditation pack').
included_theme(medicine).
included_type(simple_data_types, complex_data_types).
includes(students, five).perspective_found_out(students, cosmology).
increase_efficiency(Subject) :-    icon_selection(icons, efficiency),    format('~w increases efficiency by selecting from icons.~n', [Subject]).
increased_knowledge_own_time(replacing_body).
indulge_in(alexis, food).
inference(X, Y) :- causes(X, Z), inference(Z, Y).
influence(aigs, pedagogy).
influence_cure_search(Researcher, Effect) :- prepared_to_discover_cure(Researcher, Effect).
influenced_by_as(OrganSystem) :-    action(pressed(controller_button)),    action(filled_parts(features)),    action(sketch_outs),    action(wrote(first_text)),    understands(self, knowing(others)),    is_good(person).
influences(X, Y) :- connected(X, Z), influences(Z, Y).
influences(alexis, unique_words).
influences(philosophy, world).
influences(walrus, regional_god).
influential_subject(X) :- prepared_influential(X).
ingredient(calcium).
ingredient(fiber).
ingredient(iron).
ingredient(vitamin_a).
ingredient(vitamin_c).
initial_state(bowl).
initial_state(empty_bowl).
initial_state(soup_pot).
initiated_nature_correct(DION_two).
initiation_of_nature(correct).
inserted_code(database, fewer_commands).
insertion_point(processing).
insertion_point(reporting).
inspection_required(physically_challenged_person, mark).
inspects(physically_challenged_person, marks).
inspiration_from_rhetoric :- house_of_rhetoric_inspired_survival(because).
instructed(meditation_technique).
interacts(X, Y) :- friend(Y, X).
interpret(meditator, sentence) :- recognize_as(ontological_algorithm).
interpretation(lecturer_students_interpretation).
interrelate(text, speech).
intertwined_two_uses(subject).
inverted_arguments(reason, famous).
inverted_frown(D) :- action(D, 'I did this by inverting my frown into a smile.').
investigated(most_intricate_features).
invitation_reason(friend, happiness).
is(psychotherapist(doctor)).
is_a_part_of(class, education).
is_breasoner(X) :- reason(X, 'to evaluate and deduce conclusions').
is_cause(Cause, Effect) :- causes(Cause, Effect).
is_cooler(bedroom).
is_empty(bowl).% Update the state after pouringupdate_state(Bowl) :-    Bowl == bowl,    retract(is_empty(Bowl)),    assert(not_empty(Bowl)),    write('Soup has been poured into the bowl.').
is_food_idea :- people_ideas(food).
is_generous_to_king :- gave(king, star), accepted(serotonin, king).```3. **Explanation of the Code**:   - Each `endorsed_nietzsche(brilliance).` and similar lines define facts in Prolog about the statements in your text.
is_good(person).
is_higher_in_meditation(speed_of_thought).
is_important_for(confidence, meditators).
is_plagiarized(Student1, Student2, Question) :-    answer(Student1, Question, Answer1),    answer(Student2, Question, Answer2),    Answer1 == Answer2,    Student1 \\= Student2.
is_ready_for_pedagogy(Student) :- can_create_pedagogue(Student).
is_reason_for(Action, Reason) :- reason(Action, Reason).
is_related_to(multiples, meditation).
is_safe(Passage) :- assistance(disabled_students), mediate_emotions.
is_subject(dion).
issues_redos(student).
item(answer).% Rulesplated_item(Subject, Item) :-    subject(Subject),    item(Item),    action(placed_food).
item(assignment).
item(book_of_timetables).
item(cold_space).
item(cultural_item).
item(essay).
item(glue).
item(key_term).
item(line1, book).
item(lost_phallus).
item(mind_reading).
item(olive).
item(questions).
item(recordings).
item(tomato).
item(topic).
jam(blueberry, both).
jam(raspberry, right).
joined_models(Field) :- Field = 'joined in culturology'.
judgment(dion, shouldnt_rely_on_memory).% Facts representing actions takenaction(writing_comments(noam_chomsky, michel_onfray)).
jumped(whoami).
jumped_at(creek, convergence).
just_trial(Criminal) :-     meet_threshold(Criminal),    format('~w will be justly tried.', [Criminal]).
justification(Action, Reason) :- action(Action, Reason).
justification(built_walls, 'This is what I did.').
justification(confirm_text).
justification(connect_to_api, 'People could connect to the API using the command line.').
justification(cooked_rolled_oats, 'This is what I did.').
justification(demonstrated_cleanliness, 'I did this by eating strawberries out of a bowl.').
justification(find_types_optimise).% Defining the final confirmation of the letter arrivalconfirm_letter_arrival(Cosmology) :-    action(confirm_happiness).
justification(load_icons, 'Each day, the subject should load different sex and food icons.').
justification(preference(determism, luck)).
justification(prepare_vertical).
justification(return_short_succession).
justification(wrote_about_harpsichord, 'This is what I did.').
justification(wrote_in_places, 'This was done in the formula.').
kept_science(person(X)) :- identified_jazz_rhythm(X).
key_idea('Drinking the soup').
key_idea('First I wrote about the reasoning').
key_idea('I checked what I had discovered').
key_idea('I kept all the files intact').
key_idea('I prepared to address that a human would benefit from text-to-speech').
key_idea('I prepared to address that a human would benefit from text-to-speech').key_idea('I saw each person govern').
key_idea('I saw each person govern').
key_idea('I was responsible').
key_idea('The self knew what the AIG was').
key_idea('Third I brought the best radical ideas from different places to the same place').
key_idea(analytic_guide).
key_sentence(appearance_argument).
key_sentence(assign_point_metrics).
key_sentence(commision_summary).
key_sentence(customised).
key_sentence(first_skipped_tree).
key_sentence(held_handle).key_sentence(first_breasoned).
key_sentence(helped_pedagogue).
key_sentence(homophones_homographs).
key_sentence(meditated_first).
key_term(sorry, music).
keyword(\"changed\").
keyword(\"determines\").
keyword(\"engaged\").
keyword(\"held\").
keyword(\"items\").
keyword(\"lifted\").
keyword(\"liked\").
keyword(\"line\").
keyword(\"pointed\").
keyword(\"quality\").
keyword(\"select\").keyword(\"checked\").
kite_lifted :- let_wind_lift_kite(Yes).
knew(filtrate).
knew(implies).
knew(knowledge, multiples).
knew(knowledge_now).
knew(nomenclature).
knew_about(event).
knew_about(plus).
knew_positive_religion(religion).
know_how_to_teach_meditation(yes).
know_person(baby_wemba).
knowledge(alice, literature).
knowledge(mary, science).
knowledge_of(X, Y) :- knows(X, Y).
knows(alexis, minus).
knows(author, person).
knows(self, second_other).
knows_about(misc, memphis).
knows_material(\"He knew his own material\").
last_addressed(apple).
laughed_with(person1, person2).
leads_to(1, 2).
leads_to(10, 11).
leads_to(2, 3).
leads_to(3, 4).
leads_to(4, 5).
leads_to(5, 6).
leads_to(6, 7).leads_to(7, 8).
leads_to(8, 9).
leads_to(9, 10).
leads_to(X, Y) :- causes(X, Z), leads_to(Z, Y).% Example queries% Usage: ?- leads_to(X, Y).% Testing the logictest_causal_relationships :-    % Test some causal relationships    (leads_to(halfopen_umbrella, Result1) ->         format('Halfopening the umbrella leads to: ~w~n', [Result1]);        format('No consequence found for halfopening the umbrella.~n')),        (leads_to(allowed_work_on_computer, Result2) ->         format('Allowing work on computer leads to: ~w~n', [Result2]);        format('No consequence found for allowing work on computer.~n')),    (leads_to(switching_on_lamp, Result3) ->         format('Switching on the lamp leads to: ~w~n', [Result3]);        format('No consequence found for switching on the lamp.~n')),    (leads_to(seeking_refuge, Result4) ->         format('Seeking refuge leads to: ~w~n', [Result4]);        format('No consequence found for seeking refuge.~n')),    (leads_to(cleaned_broom_handle, Result5) ->         format('Cleaning the broom handle leads to: ~w~n', [Result5]);        format('No consequence found for cleaning the broom handle.~n')),    (leads_to(facilitated_mildly, Result6) ->         format('Facilitating mildly leads to: ~w~n', [Result6]);        format('No consequence found for facilitating mildly.~n')),    (leads_to(started_school, Result7) ->         format('Starting the school leads to: ~w~n', [Result7]);        format('No consequence found for starting the school.~n')).
leads_to(ask(X), change(Y)) :-    action(ask(X)),    action(prepare(Y)).
learns_as_per_gender(robot_child, Gender) :- learns_differently(robot_child, Gender).
learns_differently(robot_child, female).
learns_differently(robot_child, male).
leave_alone(particles, Duration) :- Duration = (day; forever).
lecturer_reasoning(lecturer).
lecturer_shows_particles(lecturer, computation) :-     involved(particles).
led_by(hand).
left_simulation(\"person\").
let_wind_lift_kite(Yes).wrote_examination_first_book(Yes).
licked(it).
licked(mango_ice_cream).
licking_spoon(he).
lied_down_as_slid_down(slide).
lifted(bird_model, up).
lifted_hand(hand).
lifting(She) :- bag_of_nappies(She).
like_yogis(\"Third I was like the rest of the yogis\").
liked(Identifier, lucian).
liked(breasonings, john).
liked(me, you, reason(teacher)).
liked(red_home).
liked_king_arthur(\"person\").
liked_student(Third, Feedback).
liked_them(because).
likes(algorithm(interested_in_best_solution), decision_making).
likes(bob, coffee).
likes(breasonings, simulation).
likes(breathsoning, person).
likes(charlie, chocolate).
likes(diana, meditation).
likes(human_judge, philosophy).
likes(icecream, licking).
likes(medicine_student, teacher).
likes(rococo).
line(10, 'Following this he lowered the plum segment onto his tongue').
line(10, \"The worker was hired at the start to check the quality of essay marking systems\").
line(11, 'I knew what was real').
line(12, 'The student came from a poor socioeconomic background').
line(2, 'I prepared to ask what writing I cant see any writing about the topic').
line(2, \"The people had appropriate changes because\").
line(3, 'I disliked liked the writer').
line(3, \"Line Item Determines whether Line contains a line of at least Items because\").
line(4, 'notItem').
line(4, \"I engaged with the thought because\").
line(5, 'Verifies that Item is not Item').
line(5, \"Second I straightened my finger and pointed it to the hole because\").
line(6, 'First he disconnected a segment of the snake and then placed it in his mouth').
line(6, \"First she lifted the lady into the wheelchair because\").
line(7, 'Third she squeezed the bottle between her thumb and index finger').
line(7, \"First he held the nut next to his mouth because\").line(8, \"DION The subject should select from icons in programming programs increasing efficiency because\").
line(8, 'lastlineLines').
line(9, 'Returns the Lastline of Lines').
line(9, \"I checked that the graphics were displayed properly because\").
line(Line) :-    long_handle(Line, LongCount),    short_handle(Line, ShortCount),    % You can include any additional checks as per your logic    format('This line has ~w long handles and ~w short handles.~n', [LongCount, ShortCount]).% long_handle/2 counts the number of long handles (1 'h' or more)long_handle(Line, Count) :-    findall(H, (sub_string(Line, Start, _, _, SubStr),                  sub_string(SubStr, _, 1, _, 'h'),                 CountH is count_h_sub(O),                 Start is 0,                  sub_string(SubStr, _, 1, _, 'h')), Handles),    length(Handles, Count).
line(line('type1', [long]), carryable_line). % One long handle (carryable)line(line('type1', [short, short]), carryable_line). % Two short handles (carryable)line(line('type1', [long, long]), carryable_line). % Two long handles (carryable)% Rules to check if a line is carryable.
line(line2, [item1, item2]).
line(line3, [item1, item2, item3, item4, item5]).
line_meaning(Meaning, Line) :- meaning(Line, Meaning), !.
lineage(god_leader, me).
linked_student_to_subject(Speaker, Student, Subject).
linked_subject_by(thought_of_a, student).
lips_together_exists(subject).
lips_well_together(verified).
listed_values :- write('Listed the values.').
listed_variables(person(X)) :- time_test_reasoning(n, X).
listened(3, 'to answer my question').
lit_up_body(me).
load_icons(day).
load_icons(subject, different_each_day).
localizes_algorithm(medicine_student, ctt).
location(community_garden).
location(home).
logic_applied_to_formula(X) :- applied_new_logic(X).
logical_connection_to_vitamins(because).
long_handle(spoon).
looked_at_spot(doctor).
looked_at_wick(some_thing).clicked_button(some_button).
looked_through(peephole, doctor).
looks_at(object, peephole(john)).
loved(Who) :- Who = 'loved you'.wrote_parts(What) :- What = 'wrote its parts'.
loved(X) :- loved(X).% Queries that could be made% ?- did_comment(chomsky).
loved(light).
loved(papa_smurf).
loved(planet_meditation_books).
loved(repeating_lucian_meditations).
loved_everyone(because).
loved_her(dion).
loved_people('writing down reasons').
loves(Captain, People) :- action(love_people), Captain = running_captain.
loves(alexis, someone).
loves(friend2, self).
loves(friend3, self).
loves(horse).
loves(subject, oneself).
loves_light(yes) :- write_algorithm(text_to_speech).
loves_people(john).
loves_public_domain_knowledge(person).
lucianic_meditation_teaching(religious_group, monastics).
made_available(writer, books).
made_cube_from_squares(BAeA).
made_transformations(F) :- member(F, [three]).
made_walkway(me).
magnet(south_pole).
main_ideas(Ideas) :-    select_main_idea(Ideas).
maintain_system(professor, god).
maintained(pedagogical_finesse).
maintained(point_sequence, education).
maintains_health(X) :- person(X), in_simulation(X).
make_count(X) :- counted_second_enumerator(X).
makes_sales_to(buyer, potential_buyers).
map_drawing(X) :- drew_map(X).
mapping(third, points_of_sale).
mapping_reason_to_polyhedron(braille_map, polyhedron2).
mark(out_of_as).
master_action(named_location).
master_observed(judgment, human_noun).
matches_judgments_with_objects(speech).
max_grade(essay, a) :- \\+ disagreement(essay).
meaning(2, 'Analytical reflections on medicine').
meaning(3, 'Methodological choices in organization').
meaning(4, 'Impact of environmental policies').
meaning(5, 'Exploration of sensory experience').
meaning(6, 'Mathematical analysis').
meaning(7, 'Independence of reasoning in pedagogy').
meaning(8, 'Observational insights into reasoning').
meaning(9, 'Focus on positivity').
meaning(accreditation, 'validation process').
meaning(argument_structurers, 'writing technique').
meaning(book, source_of_knowledge).
meaning(carryableLine, 'Some expression related to line carrying').
meaning(hollywood_extra, 'pursuing dreams in acting').
meaning(home_universe, \"The default or original universe where one feels comfortable and familiar.\").
meaning(line_item, 'specific description').
meaning(parliamentarians, 'political observation').
meaning(song_titles, 'artistic expression').meaning(another_language, 'communication skill').
meaning(students_tracks, 'academic responsibility').
meaning(word2, medicine).
meaning(word3, excellence).
meaning(word4, verification).
meaning(word5, uniqueness).
meaning_of_line(line, meaning).
measured(character, hair_length).
measured_actors_hair_length(X) :- reason(X, 'to ensure accurate representation of character').
measured_distance(belt_buckle, hole).
measured_time(breathing).
measured_time(digesting).
measured_time(remembering).
measured_time(sensing).
measured_time(speaking).
mediate(robot_algorithm) :- not(change_algorithm(robot)).
medical_device(parkinsons, memory_return, pain_prevention, headache_prevention).
medical_student(communication(see)).
medicine_coversion(whole_population, pedagogy).
medicine_student(Command).
medicine_student(uses_command).
meditated(Third).
meditated_because(Third, mediation).
meditated_for_health(3).
meditated_on(neoHinduism).
meditated_on_reasonings(Unification, Pedagogy_Helper_Argument).
meditation(worker, reason).
meditation_argument(argument_for_A_B).
meditation_benefits(personal_life).
meditation_benefits(professional_life).
meditation_effects(quality) :- teaching_meditation(allows(quality)).
meditation_note(Note) :- noted(Note), !.
meditation_required(yes).
meditation_themed_thoughts :- write('Had meditation-themed thoughts.').
meditation_themed_thoughts(yes).
meet_threshold(Criminal) :-     % Assuming some conditions are checked here    true.  % Placeholder for actual conditions% Define preparation processes.
melted(popsicle2).
melted(popsicle3).
member(Object, [_ | Tail]) :- member(Object, Tail).
member_of_line(H, Line) :- Line = [H | _]. % checks if H is a member of Line.
memberh(Line) :-    count_h(Line, 2).```### Explanation:1. **Base Case**:    - The predicate `count_h([], 0)` states that if the list is empty, the count of `h` is `0`.
mentioned_god(argument).
mentioned_in_bibliography(book, secondary_text).
met(prime_minister).
mind_read(X) :- read(X).
mind_read(pedagogue, student).
mind_reading_action(tops_and_bottoms).
misrepresented_idea(subject, text).
missing_hen(reappeared_after_protection).
modeled_subterm_with_address(subterm, sa).
molded_chocolate_rabbit(john).
moonlit_walk(her).
morning_tea(spending_outside).
motivated_to(multitasking, agreement).
motivated_to(unraveling_robes, preparations).
motivated_to(writing_song, husky).
moved(towards(deck_chair)) :- moved_arm_quickly_towards_deck_chair_arm.
moved_fragment_to_back(tongue, tablet).
moves(alexis, king_duchess_piece).
movie_theatre_inside_brain(human).
moving_through(unvisited_square, goal).
multiplied_value(value, Result) :- Result is value * 2.
nailed_steps(steps, zigzag_beams).
neatened(Lapels) :- neatened(Lapels).
neatened(lapels).
necessary_for_health(happiness).
necessary_for_health(wisdom).
necessary_weight(book, weight).
needed(data, clarify_algorithm).
needed(i).
needs_more_data(he) :- needed(data, clarify_algorithm).
needs_reminder(X) :- reminder(X, replace_body).
needs_supplementary_exam(alexis).
neuroscientist_identifies_colour(region2, color2).
neuroscientist_identifies_colour(region3, color3).
neuroscientist_prepared(test_start_of_thought, reason(highlighted_start_of_thought)).
next(attach_meaning, trace_biochemical_system).
next(construct_intelligence_test, take_notes).
next(include_title_pedagogy, attach_meaning).
next(place_marshmallow, construct_intelligence_test).
next(place_on_face, prepare_help_think).
next(position_secateurs, place_marshmallow).
next(take_notes, place_on_face).
next(trace_biochemical_system, position_secateurs).
ninth_action(close_refrigerator).
non_sexual_arguments(2) :- write(\"Finding routes between items.\").
non_sexual_arguments(subject).
nondeterministic_nature(SA) :- nondeterministic_output(SA).
nondeterministic_output(SA) :- insert_nd(SA).
not(divertissements(teaching_aides)).
not(real_doctor(doctor)).
not_affected(X) :- \\+ affected_by(X).successful_invitation(Action) :- action(Action, invite_companies).
not_item(Item) :- not(item(Item)).
not_melted(popsicle5).
not_pheno(wanted).
not_reused(from_previous_assignment).
not_reused(previous_assignment).
not_talked_about_large_objects(subject).
not_verify_content(blog, bibliography).
noted(meditation_writing(from_god, leader)).
noticed(breasoning, person).
noticed(breasoning, philosophy).
noticed(comp_eng, primordial_feeling).
noticed(geelong_skyscraper).
noticed(tangents).
noticed_others(self).
notices_plimsoll_line(alexis).
noticing(Narrator) :- enteric_nervous_system(Narrator).
notified_before_changes(subject).
nudged(snake_lolly, pilot, left_set_of_molars).
number_of_algorithms_written(5). % example number% Relationships between actions and observationslikely_to_comply(as, Likelihood) :-     Likelihood is random(0, 1). % Mock compliance likelihood% Pedagogical elementspedagogy_helper(aig_element(aigs)).
nurtures(Person) :- Person = alexis.
object(\"purse\").
object(\"trolley\").object(\"cell\").
object(\"water\").
object(action).object(knowledge).
object(ahpohedron).
object(alexis, 8, 14, 3).
object(apple).
object(b, 'excrement').
object(book).
object(box_real).
object(box_spiritual).
object(breasoning).
object(c, 'Martha Nussbaum comments').% Define relationships between subjects, tasks, and experiencescompleted_task(Subject, Task) :-    subject(Subject),    task(Subject, Task),    experience(Subject, positive).
object(cake).
object(car).
object(car, 1000).
object(chair, 5).
object(cheesonings).
object(comic_book, 0.5).object(computer, 10).
object(computer).
object(dion, 5, 10, 2).
object(fly_head).
object(fruit).
object(glass).
object(glass_of_water).
object(grades).
object(heart).
object(heavy_object).
object(kite).
object(lane).
object(lecturer).
object(life, 0, 0, 0).
object(lucianpedia).
object(magnet_icon).
object(medicine).
object(object1).
object(object2).
object(object3).
object(olive_paste).object(philosophy).
object(paint).
object(payment).
object(pedagogy_section).
object(philosopher).
object(pineal_gland).
object(press_release).
object(prop).
object(recording).
object(rock).
object(room).
object(student).
object(subject, essay, object).
object(trolley).
object(useful_object(name2, size2, function2)).
object(whiteboard).
object(whiteboard_magnet_icons).
object(writer).
object_analysis(depth).
object_exists(object1).
objects_in_speech(objects).
obligation(professor_jones, research_requirement).
observation(birth_numbers, free).
observation(choir, made_their_entrance).
observation(choir_entrance).
observation(clothing_testing, not_twisted_when_sewn).
observation(crushed_raspberry, on_plate).
observation(dion_two_correct).
observation(doc_prepared_glass).
observation(feeling_comfortable).
observation(gel_on_stomach).
observation(helped_with, year_child).
observation(immortality, possible_due_to_quantum_computer).
observation(lengths_measured).
observation(licked_spoon, top).
observation(medicine_course_preparation, involves_studying_medicine).
observation(meditation, reasoning_work).
observation(movement_done).
observation(no_interest_in_sexual_ideas).
observation(observed_likes, repels_likes).
observation(output_found).
observation(path_to_walk).
observation(pedagogy_format_used).
observation(prepared_to_record, result).
observation(shape_cutting, petal_cut_and_placed_on_page).
observation(solid_liquid_ratio).
observation(space_travel, possible_due_to_quantum_computer).
observation(square_red).
observation(students, checked_the_site).
observation(time_space_written).
observation(training_as_pedagogy).
observation(work_started).
observation(writing, has_good_aspect).
observation(wrote_on, ethics).
observe(X, Y) :- interact(X, Y).perform_task(Y) :- prepare(me, Y).
observe(captain, use_water).
observe(partner, partner_listen_to_sing).
observed(alexis, actors_protected).
observed(breasons_out(X, Y, Z), from_each(breasoning)).
observed(chocolate_art).
observed(head, comfort).
observed(liquid, move(vein)).
observed(man_insert_rod_into_void).
observed(master_verification).
observed(meditator, teacher, As, six) :- collected(teacher, As).
observed(new_perspective).
observed(person, friendly).
observed(self).
observed(self, meditation_requirement).
observed(using_eyes).
observed_agreement(Observation).
observed_changes(future_drafts).
observed_element(Element) :-    saw(Element).
observed_other_fingers(because(taking_turns)).ALEXIS_subject_includes(as_each_book).poured_water(because(editors_input_output)).
observed_physics(statement) :-    statement = 'like repels like'.
observed_protection(X) :- observed(X, actors_protected).
observed_student_agree(breasoning_1).
observed_student_answering_questions(X) :- reason(X, 'to assess understanding and knowledge').
observed_vegan_holding_spear(yes).people_and_world_changed(yes).
observes(training, everyone).
offered(essay, students, grapple_with).
offered(medicine_course).
offered_money(first).
on_subject(medicine_essays).
ontological_algorithm(interpretation).
ontology(\"The ontology listed the order of the predicates\").
open(sunglasses, right_arm).
opened(prestigious_school, universe).
opened(sunglasses, left_arm).
opened_bag(first_opened_bag).
opened_deck_chair(biochemist).
operating_system(linux).
operating_system(windows).
operational_service(switch_on_when_course_makes_money).
optimise_algorithm(lecturer, using_spec, instead_of_caw).
optimised_machine(quantum_particles).
order_by(number).
order_written(10, 'I wrote the predicate').
order_written(2, 'I asked for the order that the algorithms were written in').
order_written(3, 'I verified that the paraphrased answer was cited').
order_written(4, 'I prepared to read the announcement of the secondary text about human judgment of the noun').
order_written(5, 'The lecturer gave nondeterministic results for an input with more than one output').
order_written(6, 'In the Lucian CICD weblog of activity, I listed a summary of differences in HTML form and a link to this HTML file in the log').
order_written(7, 'I prepared to eat ice cream by pouring the waffle mixture into the mold').
order_written(8, 'I did this by reading at home').
order_written(9, 'He did this by wrapping the carrot in cellophane').
original_essays_reasoning :- philosophy_of_anarchy_writing_original_essays(because).
overall_safety :- safety(everyone).
owns(meditator, cheesonings).% Knowledge that changes with time (using dynamic facts):- dynamic(knowledge/1).
owns(meditator, medicine).
paid_for_editing(breasoning_chapter, person).
paid_recruiter(true).
painted(stroke, brush, angle).
parameters_changed :- changed_parameters(Yes).
part_of_life(next).
parted_as_friends(we).
participates_in(Person, Event) :- prepares_for(Person, _, Event).
participates_in_chewing(X) :- chews_and_swallow(X, _).
participates_in_movement(X) :- moves(X, _).
pathway(maze).
pavement(stood_person).
pay_recruiter :- paid_recruiter(true).
pays_back(coin, my_organization).% Algorithms that may help in decision makingalgorithm(steps_through_cognitive_barriers).
pedagogical_helper(description('spiritual helper for students')).
pedagogical_interest(unknown_subj, character_analysis).
pedagogue(michel_onfray).
pedagogue_selected_material :- wrote_on(history_of_education).
pedagogy(spiritual_help).
pedagogy_helped(Y) :- pedagogy_helper_made_up(Y, aig_a).
pedagogy_helper(was_in_natural_law).
pedagogy_helper_discovers(ten_aigs).
pedagogy_helper_made_up(ideas, aig_a).
pedagogy_needed(pedagogy).
pencil_sharpener_positioned(above, bin).
people_came(because).
perception(bob, lecturer, good).
perform_each_action([Action | Rest]) :-    execute_action(Action),    perform_each_action(Rest).
performed_action(fast_parents, with(young_children)).
performed_action(lucian_green, liked(vegan_emporium)).
performed_action(lucian_green, made_icy_pole).
performed_action(lucian_green, moved_tongue).
performed_action(lucian_green, prepared_to_eat_out).
performed_action(lucian_green, swapped_calculation_display).
performed_action(student, moved(safely_with_eyes)).
performed_action(student, verify_summary) :- performed_action(student, ready_for_learning).
performed_by(breasoning_sequences, teaching_student).
performed_by(choose_fabric, teaching_student).
performed_by(disagree_with_idea, dion).
performed_by(essay_written_software, dion, place_thesis_online).
performed_by(essay_written_software, dion, sharpen_spear).
performed_by(essay_written_software, dion, write_press_release).
performed_by(essay_written_software, dion, write_review).
performed_by(have_conversation_with_robot, teaching_student).
performed_by(order_text_to_speech, dion).
performed_by(prepare_synthesis, teaching_student).
performed_by(verify_contents, teaching_student).
performed_by(write_comments, teaching_student).
performed_poorly(student1).
performed_somersault_by(prepared_performed_somersault) :- prepared_performed_somersault.
performed_tasks(person, assistant).
person(D).
person(autist).
person(biochemist).
person(bob).
person(charlie).
person(company).
person(designer).
person(diana).
person(dion).
person(doctor).
person(god_leader).
person(he).
person(human_judge).
person(learner).
person(lecturer).
person(master).
person(medicine_student).
person(michel_onfray).
person(pedagogue).
person(pedagogy_helper).
person(pedagogy_student).
person(philosopher).
person(physically_challenged_person).
person(richard_dawkins).
person(richard_rorty).
person(student).
person(subject(famous_subject)).
person(subject(famous_university)).
person(subject).
person(transsexual).
person(you).
perspective(anna, holistic).
perspective(anna, pluralism).
perspective(mary, cosmology).
perspective(mary, skepticism).
perspective(others, A) :- considers(others, A).
perspective(sara, rationalism).
perspective(susan, philosophy).
perspective(tom, existentialism).
perspective(tom, religion).
philosopher(rorty).
philosopher_declares_fame(philosopher, \"What is Writing\").
philosophy(anarchy, original_essays).
philosophy(examined_meditation).
philosophy(meditation).
philosophy(ordered).
philosophy_of_anarchy_writing_original_essays(because).
philosophy_topic('computational music composition').
philosophy_written :- wrote_philosophy(Yes).
physically_challenged(alexis).
physically_challenged(dion).
picked(rhubarb).
pillar(c, d).
pillow_stack(upper_layer, lower_layer).
place(clamp, axle).
placed(apple, bowl).
placed(he, mortar_object(reason_for(objection)), on(brick)).
placed(head, above_water).
placed(snake, tongue, first).
placed(template, road).
placed(toe, heel).prepared(realise_true_fame).
placed_crane_model(She, ground).
planned(person).
planned_see_family_planner(family_planner).
pointed(finger, hole).
polished(glass).
positioned(finger, 'next to the string', 'because').
positioned_above_sink(robot).
positive_after_print(lucian) :- printed(lucian, line).
positive_entity(light_of_day).
positive_entity(supporting_entities).
practiced(saltaté).
precedes(affirm_accreditation, write_on_pedagogy).
precedes(calculate_time_to_eat_apples, love_everyone).
precedes(define_terms, affirm_accreditation).
precedes(explain_pedagogy, verify_computer_output).
precedes(lift_self_up, write_on_important_topic).
precedes(love_everyone, define_terms).
precedes(observe_happen, return_twice).
precedes(verify_computer_output, observe_happen).
precedes(write_on_important_topic, select_best_environments).
precedes(write_on_pedagogy, explain_pedagogy).
precondition(count_barnacle(barnacle), in_row(barnacle)).
precondition(give_spider(adrian), has_pet(spider)).
predict_structure(content, structure).
prefers_to_know(lucianic_medicine, student).
prefers_verification(X) :- wanted_verification(X).
prefers_writing_to_speech(rural_area_resident).
premise(2, 'An argument map must be finite in the computer program.').
premise(3, 'Different writers should be identified in the exposition.').
premise(4, 'The action of taking the lifeless pet to the vet is necessary.').
premise(5, 'Statistical analysis is important in understanding data.').
premise(6, 'Counting the starfish arms provides data for analysis.').
premise(7, 'The Lucian machine can enhance processing tasks.').
preparation(X) :- activity(preparing_answers), student(X).
preparation(alexis, enable_longevities).
preparation(alexis, program_pen).
preparation(calculate_result, gather_data).
preparation(eat_peanut_butter, prepare_sandwich).
preparation(farmer_harvest, wheat).
preparation(gather_data, set_test_parameters).
preparation(gather_inspiration, study_previous_works).
preparation(hug_someone, establish_relationship).
preparation(like_you, meditation).
preparation(prepare_measurement_tools, gather_data).
preparation(prepare_sandwich, buy_ingredients).
preparation(write_music_synthesis, gather_inspiration).
preparation(writing_argument).
preparation(writing_press_release).
preparation_for_university :- prepared_to_earn_s(university_education).
preparation_state(State) :- prepared_for(State), !.
prepare(Fame) :- preparing(Fame).
prepare(climb_ladder) :- bring_tongue_out.
prepare(me, morning_tea, outside) :- time(am).
prepare_antenna(Mountaineer, Location) :-     format('~w prepared to build the antenna on ~w.', [Mountaineer, Location]).
prepare_cockatoo(first_cockatoo, Reasons) :-     wrote_comments(alexius_meinong, pedagogy_indicators).
prepare_essays(Author) :-    collected_comments(famous_subject, famous_university),    prepared_secondary_texts_for_essays(Author).
prepare_for_lucianic_meditations(Philosopher, Religion) :-    teaches(Philosopher, lucianic_meditation, Religion).% Example query to showcase usage of the predicates:% ?- scientist_prepares_autograph(scientist, spoon_center).
prepare_like_you(offer_hand, person).
prepare_quote :- action(write_quote), write_comment(noam_chomsky).
prepare_to(walk_home, moviegoer).
prepare_to_communicate(illustrator).
prepare_to_love(alexis, everyone).
prepare_to_use(alexis, vocational_info).
prepared(X, action) :- (X = vegan, action = encourage).
prepared(X, action, reason) :- (X = student, action = teach, reason = lucian_meditations).
prepared(X, action, reason) :- (X = wall, action = paint, reason = stated_liked_you).
prepared(be_religious_leader).
prepared(breason_out, object).
prepared(doctor, prepared_meal).
prepared(draw_regions, rocket).
prepared(eat(caviar, durum_wheat_semolina)).
prepared(eat_dessert, dessert).
prepared(excavate_dig).
prepared(job, heart_brain_protection, meditation).
prepared(make(undeveloped, developed)).returns(dion_line, Line, deleted(Item)).
prepared(masters, breason_out).
prepared(positive_gifts).
prepared(presentation, heidegger_laozi).
prepared(record_final_move).
prepared(say, sorry).
prepared(take_care_of(ducklings)).
prepared(verify_assignment).
prepared(walk_around, maze).
prepared(walk_on_ropes_course).
prepared(write_song(like_a_husky)).
prepared(write_time_code(leaf)).
prepared_collect_comments('high quality comments').
prepared_conclusion(teacher, reason).
prepared_connection(law, law_keepers_box).
prepared_cover_medicine(Medicine).
prepared_explain(mathematics, using(apples)).
prepared_for(descend_stairs, club_manager).
prepared_for(long_lasting_meditators).
prepared_for(longest_work).
prepared_for(lucianic_medicine, student).
prepared_for_a_job(person) :- has_book_of_knowledge(person).
prepared_for_apoptosis(\"cancer_scientist\", \"cell\").
prepared_for_critical_thinking :- attended_logic_summer_school(nations_top_university).
prepared_for_greedson(neuroscientist, thought).
prepared_for_mental_stability(no_mental_breakdowns).
prepared_for_nap(X) :- reason(X, 'to recharge energy').
prepared_for_pedagogy('you').
prepared_for_pedagogy(Preparation) :-     member(Preparation, [observing_students, understanding_theories, creating_lessons]).
prepared_for_philosophy(lucianic_meditations, each_religion).
prepared_for_reach(Nirvana) :- Nirvana = 'prepared to reach nirvana and not do anything wrong by writing the Review of the Second Heidegger and Daoism Journal Article'.
prepared_for_reintroduction(controversial_argument, editing_out(literature_review, PhD)).
prepared_for_ropes_course :-    choose_philosophy(production_lyric),    reduce_reason_to_subject_predicate.
prepared_for_sleep_because(What) :- prepared_to_sleep(What).
prepared_for_space('astronaut').
prepared_for_way(lighting_the_flame).
prepared_for_wear(heat_shield, fabric).
prepared_influential(unknown_subject).
prepared_lick_coconut_cream(coconut_cream).
prepared_openended(\"I prepared to be openended\").
prepared_prevent(\"I prepared to prevent a crisis in the natural cycle by preventing unreliability in the natural object preventing the stone from being moved into my frequented way\").
prepared_research_meditation(philosopher).
prepared_save_apple_seed(seed).
prepared_speech(Yes).
prepared_storybook(watching_children(earn(H))).
prepared_study(earth_science, earth_formation).
prepared_study(medicine).
prepared_to(be_sentient).
prepared_to(master,inflow_and_outflow,meditation_philosophy).
prepared_to(prepare, Outcome) :-    preparation(prepare, Meditation),    activity(Meditation, Outcome).
prepared_to(state, action) :- prepared_to_do(algorithm), action = 'computing'.
prepared_to(state, action) :- prepared_to_reason (reasoned, electron_transcended), action = 'reasoning'.
prepared_to(write, small_ideas_domains_endpoints).
prepared_to_accelerate_particle(Particle_info).
prepared_to_aim_with_best(creative_writing).
prepared_to_award(nobel_peace_prize, breathsonings).
prepared_to_be_happy(yes).self_observed(god_exists, no).
prepared_to_be_religious_leader(flowers, living_flower).
prepared_to_believe(Concept) :- Concept = 'prepared to believe that vrooming exists by liking Dada'.
prepared_to_cheat_fate(alexis).
prepared_to_comment(interesting, computational_philosophy).
prepared_to_concentrate(health).
prepared_to_demonstrate(demonstrator).
prepared_to_detach_stamp(philatelist).
prepared_to_do(algorithm).
prepared_to_earn(drawing, A).has(spiritual_robotic_head_and_limbs, self).
prepared_to_earn_s(university_education) :- lay_on_grass(lush_grass).
prepared_to_eat(Person) :- new_crumb_cake(Person).
prepared_to_eat(cheesecake, making(cheesecake)).
prepared_to_eat(daisies).
prepared_to_eat(pilot, butterscotch_tablet, molars, left).
prepared_to_eat(rich_treat).
prepared_to_eat(vegan_delight, Identifier).
prepared_to_eat_breakfast(Army, because).
prepared_to_encourage(vegan, editing_singletons).
prepared_to_enjoy(Activity) :- Activity = 'prepared to write that I enjoyed myself by writing the Press Release for Alexius Meinong\\'s probable comments on the Medicine essays'.
prepared_to_examine(object).
prepared_to_examine(reviews).
prepared_to_execute(professor, brain_program) :- dismantled_and_measured(professor, components(pinhole_camera)).
prepared_to_explain(father, high_position, chart).
prepared_to_explain(mathematics, [apple, apple, apples]).
prepared_to_give(actor, proclamation) :- examined_title(Title).
prepared_to_go_to_heaven('I', 'store', 'endorse', 'God_master').
prepared_to_go_to_mars(Student) :- students_space_association_go_to_mars(Student).
prepared_to_help(Second).
prepared_to_help_earth :- prepared_to_help_earth_avoid_catastrophe(stating(peaceful)).
prepared_to_help_earth_avoid_catastrophe(stating(peaceful)).
prepared_to_ice(cake).
prepared_to_identify_times(alexis).
prepared_to_inspect('I', 'animal_mannequin').
prepared_to_let_computer_experience(interesting_tasks).
prepared_to_like_self(because_of_self_improvement).
prepared_to_listen(classical_music).
prepared_to_make_sure(it_went_well).
prepared_to_meet(person, card).
prepared_to_mix(sound_engineer, two_sounds).
prepared_to_move_forward(Chunks).
prepared_to_name(jazz_composition).
prepared_to_organize(feast, designer).
prepared_to_paint(wall, stated_liked_you).
prepared_to_prevent(ultraviolet_radiation).
prepared_to_prevent_cell_damage(Second).
prepared_to_prevent_skin_irritation :-    apply_sunscreen(spray_on).
prepared_to_push(strawberries, mouth).
prepared_to_quote(john, guide).
prepared_to_reach_nirvana(whoami).
prepared_to_relate(metaphysics, pedagogy).
prepared_to_replace(idea, idea, importance, pedagogy_x).
prepared_to_see(aaron_flower_and_flourish).
prepared_to_sleep(nap).
prepared_to_state(economics_specialism(medicine)).
prepared_to_store(cup_in_wall, reason(storage_preparation)).
prepared_to_study_degree :-    checked_in_with(psychologist).
prepared_to_submit(Artist) :- masterpiece(Artist).
prepared_to_take_care_of('I', 'pet_tadpoles', 'by_filling_tank_with_water').
prepared_to_teach(postconception, pedagogy).
prepared_to_teach(student, meditation, lucian_meditations).
prepared_to_teach_students(my_works).
prepared_to_think(first_idea).
prepared_to_think_clearly :-    decide_whether_to_buy(philosophy_of_data_science).
prepared_to_wash_block(cleaning_chopsticks).
prepared_to_watch_regatta(holding_sunshade).
prepared_to_write(Sign, Person) :- Sign = plus_sign, Person = you.
prepared_to_write(article).
prepared_to_write(breasoning).
prepared_to_write(on(didgeridoo), input, output).prepared_to_enjoy(attendees) :-     played(crumpled_horn, launch(pedagogy)).examined(code, producing(string)).
prepared_to_write(time_code, leaf).
prepares(Action) :- Action = eat_from_rice_paper_maggot.
prepares(alexis, mind_map).
prepares(dion, speech_handles).
prepares(duckling, backpack).
prepares(john_doe).
prepares(medicine_student, help(adrian)).
prepares_for(alex, sweet, eat).
prepares_for(mary, kite, field_trip).
prepares_to(alexis, love_self, everything).
prepares_to_say_conclusion(person).
prepares_to_split_particle(physicist, action).
preparing(biochemist, explain_link).
preparing(famous).
preparing_to_perform(somersault).
presented(meditation_students).
presented_results_to_student(X) :- reason(X, 'to provide feedback and facilitate learning').
pressed_flower(Flower).
pressed_releasable(essay).
pretended_to_fly_home(bird).
prevent_cell_damage_because(Second).
prevented_madness_by(recordings_enabled_breasonings) :- prevented_madness.
print_action(Action) :-    action(Action),    format('Performing Action: ~w~n', [Action]).% Example query: To display the sequence of actions you have prepared:% ?- process(Action).
print_actions([Action | Rest]) :-    action(Action, reason(Reason)),    format('Action: ~w, Reason: ~w~n', [Action, Reason]),    print_actions(Rest).
print_actions([Action|Rest]) :-    action(Action),    write(Action), nl,    print_actions(Rest).
print_actions([H|T]) :-    write(H), nl,    print_actions(T).
print_breasonings([B | Bs]) :-    format(\" - ~w~n\", [B]),    print_breasonings(Bs).
print_reasons([H|T]) :-    write(H), nl,    print_reasons(T).
problematic_if(character_details_provided, text_contains_details, does_not_correspond).
problematic_if_mismatch(subject).
process(Action) :-    sequence(Index, Action),    print_action(Action),    fail. % Fail to backtrack through all actionsprocess(_). % Cut to stop backtracking with an empty action.
process_letters(Text) :-    % Split the text into sentences based on periods.
process_list_recursively([H|T]) :-    interpret(H),    process_list_recursively(T).
produced(indian_cuisine).
programmed(english_of_nature_assistant).
programmed_god(game_master, help_people_to_be_well).
property(grades, indicator).
property(knowledge, dynamic).
property(medicine, helpful).
protected(duckling, i).
protection(clothes, sun).
protective_gear(sunscreen, spf_50).
prove(Knowledge) :- implies(Knowledge, Next), prove(Next).prove(Knowledge).% To query what can be derived.query(X) :- prove(knowledge(X)).
provides_braille_argument_map(rural_area_resident, braille_map).
published(code).
puffin_ducks_cute(because).
pulled(shoe, foot) :- pulled_shoe_onto_foot.
pumping_tyre('second', 'tyre').
purpose(setting_time, reason_argument).
pushed_wheelchair(path).
put_cream_in_bowl(second_person).
put_on(me, frock).
put_on_site(Item) :- Item = ruler.
put_pads_on_side(hard_right).
puts_water_on_tongue(person).
puzzle_solution(knowledge).
quality_text(argument) :- action(preparing_text_high_quality).
query_nondeterminism(SA) :- nondeterministic_nature(SA).
query_result :- completes_iq_test(alexis).
query_teaching_reason(Reason) :- teaching_reason.
query_university_preparation(Preparation) :- preparation_for_university.
query_writing_inspiration(Reason) :- writing_inspiration.
questioned_interrelation(person, text, speech).
randomly_selected(player, nth).
rate_reflects(speed_of_human_thought).
rationale(calculating_time_difference, why, 'to understand physical properties').
rationale(conceal_coit, why, 'to protect or hide').
rationale(empty_shavings, why, 'to clean the desk').
rationale(endorse_object_subject, why, 'to clarify the role in education').
rationale(find_person, why, 'to help with the task').
rationale(learning_about_minus, why, 'to understand mathematics better').
rationale(measuring_achievement, why, 'to assess progress over time').
rationale(repeat_statements, why, 'to prepare for an upcoming situation').
reaches_benchmark(subject, benchmark).
reaction(dion, scene, sharp).
read(essay).
read(john_doe).
read(sutra, book).
read(writing).
read_and_understood(essays, 'because').
read_book(Procrastinator) :- Procrastinator = procrastinator.
read_first(a).
read_map :- read_map(true).
read_map(true).
read_materials :- read_materials(she).
read_materials(she).
read_medical_essays('Alexius Meinong', 'medicine_essays').
reading_summary_is_like_holding_handle(because).
reads(philosophy, person).
reads_to_end(book).
realised(something).
realization(Nothing) :- action(realize(Nothing)).
reason(3, \"because\").
reason(4, \"because\").
reason(5, \"because\").
reason(6, \"because\").
reason(7, \"to reach a higher platform\").reason(8, \"to ensure correctness\").
reason(Author, reviewer_reviewed_piece).
reason(Preparation, slid_down_slope).
reason(Second, liked_you).
reason(Third, difficult_transgress).
reason(Third, left_hand_column).
reason(accreditation_possible, \"I found that if the requirements were met accreditation was possible\").
reason(add_one_to_count, to_track_cupcake_sales).
reason(add_to_algorithm, 'I added them to the algorithm one at a time to test them').
reason(added(sa_module_to_lucian, gitl), wrote(richard_rortys_comments, pedagogy_section)).
reason(added_code, multiple_locations).
reason(adorn_stage_with_flowers, love_for_beauty).
reason(affirm_accreditation, reason_for_accreditation_work).
reason(agreed_semantics_back, importance_of_language).
reason(alexis, observed, gaining_insight_about_professor).
reason(alexis, wrote, producing_analysis).
reason(analyzes(medicine_student, integration_body_systems),        comment(nussbaum, rorty)).
reason(answered_question, because(saw_changes)).
reason(appearance_sensitivity, becoming_writer).
reason(appearing_as_home_universe, safety_from_accidents).
reason(applied_zinc_cream, for_lips).
reason(approved_of_it, positive).
reason(argument_reason(student_choice)).
reason(argument_written, reason_for_argument).
reason(artist, 'To illustrate geographical details.').
reason(artist, 'To represent relations through transformations.').
reason(as, breasoned_out).
reason(ask_explanations) :-     relate_to_other_sections.
reason(ask_wear_sun_cream, [find_seen_as_version]).
reason(assess_mark, to evaluate_performance).
reason(ate_less_food, for_health).
reason(ate_lolly, \"Third he ate the lolly because DION\").
reason(ate_strawberry, \"First he ate the strawberry because\").
reason(becoming_writer, intelligent_argument_prepared).reason(intelligent_argument_prepared, cheese_processed).
reason(bite_and_warm, squirted_gourd).
reason(breasoning_algorithm_consolidated, argument_made).
reason(breasonings) :- achieve(high_marks).
reason(calculate_time_to_eat_apples, time_taken_to_eat).
reason(calculated_average_skin_temperature, because(thought_verificationism_good)).
reason(calculated_results, 'because it was necessary for making decisions').
reason(check_assignment, 'I checked the assignment in case it was very close to passing').
reason(check_table_side, compare_objects).
reason(check_tests, [look_first_building]).
reason(cheese_processed, undo_shirt).
reason(chose_place, personal_preference).
reason(cinematographer_preparation, \"I prepared to be a cinematographer because\").
reason(close_door, __).
reason(comfortable_stage, because).
reason(communicated, 'to effectively convey ideas').
reason(complete_essays, 'They needed to finish their assignments on time').
reason(complete_practicum, course_credit, student).
reason(conducted_excursion, applied_zinc_cream).
reason(connect_ideas, \"The subject should connect each key idea and the process applied to a data item in the analytic guide.\").
reason(connected_pedagogy_helpers, collaboration).
reason(copywritten, because_everything_was_copywritten).
reason(critique_texts, to analyze_med_philosophy).
reason(cross_creek) :- action(cross).
reason(current_degree, \"I found the current degree because\").
reason(define_terms, reason_for_defining_terms).
reason(demonstrated_perseverance, perseverance).
reason(demonstrated_rotememory, played_concerto).
reason(described(way_of_thinking), found(student)).
reason(detect_martha_nussbaum, intellectual_interest).
reason(detected_object_size, knowledge).reason(placed_hand_over_point, exploration).
reason(determine_pedagogy_aigs, pedagogy_aigs).
reason(did_it_again, \"Third I did it again because\").
reason(did_this, 'because I wrote the abstract').
reason(dion, completed, h_set).
reason(dion, crawled, through_hole).
reason(dion, prepared, stop_feeling_of_pain).
reason(dion, tried, fried_tofu).
reason(disseminate_atom, desire_to_inform).
reason(documenting_thoughts, preparing_to_load_vehicle).
reason(dribble_circle_of_paint, artistic_expression).
reason(drive_in_car, 'I did this by driving in the car').
reason(earn_straight_as, to_make_parents_proud).
reason(eat_coconut_from_shell, 'I wanted to consume the fresh coconut inside').
reason(eat_poppadum, satisfy_hunger).
reason(emulating_nietzsche, experiencing_students_thoughts).
reason(enjoyed_airconditioned_comfort, because(answered_question)).
reason(examine_biological_noumenon, 'The pianist was curious about the phenomenon').
reason(excavate_dig, cross_slice_cabbage).
reason(execute_program, \"The professor prepared to execute the brain program because\").
reason(existence_of_texts_helps_class, 'to provide context and reference for learning').
reason(explain_pedagogy, pedagogy_prevents_stillbirth).
reason(fasten_tape, [tie_corners]).
reason(final_sun_time_accessed, high_intensity_time_period).
reason(find_A_for_thought, time_travel).
reason(find_change_within_line, kiss_head_of_philosophy, i).
reason(find_date_time_of_call, provide_information).
reason(find_seen_as_version, [fasten_tape]).
reason(find_sentences, gather_information).
reason(first, because).
reason(first_walking, because).
reason(for_inner_peace, experienced_stages_of_life).
reason(found(pedagogy_helper), added(sa_module_to_lucian, gitl)).
reason(found(student), prepared_to_watch_regatta(holding_sunshade)).
reason(found(tab_attached_to_lid), writing(customer_request)).reason(stated(god_is_alive), lineage).
reason(found_detritus, moved_oar_backwards).
reason(found_sequence) :-     connecting_searches.
reason(give_myself, self_care).
reason(happiness_solutions_written, breasoning_noticed).
reason(harvests(farmer, wheat), \"farming\").
reason(he, find(reason_for(objection)), there_is(no_other_thing_to_react_to)).
reason(he, lead(good_life), meditate(long_and_slow)).
reason(he, meditate(long_and_slow), go_to_sleep).
reason(he, place(mortar_object(reason_for(objection)), on(brick)), communicate(to_everyone)).% Statements from individualsshould(ALEXIS, write(logically_connected_reasonings)).
reason(he, record(questions_answers), communicate(to_everyone)).
reason(he, write(a, chalk), prepare(plan(no_walls_between_rooms))).
reason(heat_sausage_in_pan, argument_for_A_B_not_affected).
reason(heat_sausage_in_pan, preparation_agreement).
reason(help_write, 'to assist with writing').
reason(helped_breasonings, because(calculated_average_skin_temperature)).
reason(high, documenting_thoughts).
reason(i, drinking_from_bottle).
reason(i, prepared_observe_master).
reason(i, prepared_students).
reason(i, prepared_walk).
reason(i, wrote_noam_comments).
reason(identify_twoshorthandline) :- question(twoshorthandhandles_line).
reason(image_part_found, name_and_arity_of_predicate_found).
reason(imagined_sheep_jumping, found_predicate).
reason(in_second_month, experiencing_stages_of_life).
reason(inspect_lily_pad, 'It was important to observe the lily pad carefully').
reason(inspect_screen, 'to investigate').
reason(invert_frown_to_smile, feel(happy)).reason(write_anticlimax) :- action(write).
reason(invitalized_self, for_self_improvement).
reason(invite_companies, technological_collaboration).
reason(is_breasoner, 'to evaluate and deduce conclusions').
reason(is_functional) :- accreditation(good_faith).
reason(job, finished_program).
reason(king, 'It was a gesture of kindness.').
reason(kiss_head_of_philosophy, look_at_slide_using_microscope, he).
reason(know_two_uses, to understand_functionality).
reason(leave_hansom_cab, not_sitting_too_long).
reason(lick_coconut_cream, 'I wanted to enjoy the flavor of coconut cream').
reason(lick_inner_slice_apple, workman_prepared).
reason(lick_lollipop, 'for enjoyment').
reason(licked_mango_ice_cream, because(enjoyed_airconditioned_comfort)).
reason(lift_object_stably, safety_concern).
reason(lifted_tongue, bite_and_warm).
reason(look_first_building, [observe_thinking]).
reason(love_everyone).
reason(love_everyone, reasoning_for_love).
reason(love_family_member, family_bond).
reason(loved_myself, self_care).
reason(loved_you, prestigiousness_of_nature).
reason(maintain_pointsequence) :-     every_day.
reason(maintain_posture, heart_health).
reason(maintain_psychiatric_health, write_review, i).
reason(measure_temperature, good_exercise).
reason(measured_actors_hair_length, 'to ensure accurate representation of character').
reason(medicine_students, difficult_transgress).
reason(meditation, higher_in, state).
reason(meet_character, 'Character wants to meet the other').
reason(mentioned_cosmologue_leader, because(prepared_snack_box)).
reason(more_possible_in_future, 'More was possible in the future').
reason(moved_oar_backwards, lifted_tongue).
reason(myself_written, best_times_chosen).
reason(necessary_weight, \"The subject should include As in each book of the necessary weight because\").
reason(noticed_breasoningesquenesses, awareness).
reason(noticed_pipsqueaks, 'I noticed the pipsqueaks').
reason(noticed_sexual_ideas, lack_of_interest).
reason(observe_happen, time_test_breasoning).
reason(observe_student_agreement, ensuring_comprehension).
reason(observe_thinking, [ask_wear_sun_cream]).
reason(observed_student_answering_questions, 'to assess understanding and knowledge').
reason(observer, 'To keep track of unusual occurrences.').
reason(open_purse, to_give_donation).
reason(opened_sunglasses_left_arm, personal_comfort).
reason(organize_arguments, 'To structure my chapters adequately').
reason(parliament, 'To ensure justice and fairness in society.').
reason(parliament, chose, direction).
reason(perform_bug_testing, combinations_of_data).
reason(permit_student_leave, because_i_permitted_the_student_to_leave).
reason(person, desires, warm_space).
reason(person, happy_with, everyone).
reason(person, prepared_to_lease, love).
reason(person2, 'To maintain order and governance.').
reason(person3, 'To recount our shared experiences.').
reason(person4, 'To align with educational standards.').
reason(philosopher, wrote_reason, argument).
reason(picked_up_gel, 'because I placed the pencil sharpener above the bin').
reason(place_lettuce_and_tomato_on_plate, __).
reason(place_presentation) :-     is_online_presentation.% Logical relationshipsrelate_to_other_sections :- true.
reason(place_thesis_online, 'To share my thesis with a wider audience').
reason(placed_marshmallow, 'because I always had a new detail').
reason(placed_sharpener, 'because I prepared to love everyone to me').
reason(plan_and_perform_work, achieve_stability).
reason(played_concerto, imagined_sheep_jumping).
reason(plugged_si_into_si, successful).
reason(positive_function).
reason(pour_juice, half_glass).
reason(pour_water, half_glass).
reason(predicted_harvest, simulation).
reason(preparation_inductive_machine_learning, improvement_in_model_accuracy).
reason(prepare_chocolate_pyramid, eat_chocolate_art).
reason(prepare_cork, 'to seal the bottle').
reason(prepare_for_school, to succeed).
reason(prepare_for_tv, literature_review).action(write_fornix, reason).
reason(prepare_heat, to_mitigate_soreness).
reason(prepare_morning_tea_outside, __).
reason(prepare_to_find_phylogenetic_tree, 'I prepared to find the phylogenetic trees branches label that I wanted').
reason(prepare_to_like_everyone, run_program, i).
reason(prepare_to_relax_in_heaven, 'In this way I prepared to relax in heaven in fact on earth by meditating using the Green sutra writing about Medicine').
reason(prepare_to_speak_with_heads_of_state, 'I prepared to speak with heads of state about the worlds issues').
reason(prepared(take_care_of(ducklings), aim_to_nurture)).
reason(prepared_for_nap, 'to recharge energy').
reason(prepared_glass, hygiene).
reason(prepared_metaphorical_role, 'by being true to myself in relation to other employees').
reason(prepared_replaced, because).
reason(prepared_snack_box, because(wrote_press_release)).
reason(prepared_to_climb_ladder, tongue_out).
reason(prepared_to_look) :-     look_at_shelves.
reason(prepared_to_love_being_with_you, demonstrated_rotememory).
reason(prepared_to_love_god, through_service).
reason(prepared_to_select_healthy, because).
reason(prepared_to_walk, along_glass_corridor).
reason(prepared_to_wash_block(cleaning_chopsticks), prepared_to_let_computer_experience(interesting_tasks)).
reason(prepared_to_watch_regatta(holding_sunshade), sang_my_song).
reason(preparing_holily, emulating_nietzsche).
reason(preparing_to_go_sick_nut, 'because he turned over').
reason(preparing_to_put_comments_in_box, 'because it was easy to generate algorithms with a large database').
reason(presented_results_to_student, 'to provide feedback and facilitate learning').
reason(press_button(turn_right)) :- think(direction(right)).
reason(press_release_written, richard_dawkins_comments).
reason(press_strawberry, harvest_activity, _).
reason(produced_onion_relish, making_relish).
reason(protect, 'to ensure safety').
reason(put_it_down, to clear_mind).
reason(put_on, because_he_put_it_on).
reason(rate, feels, relaxing).
reason(rate, reflects, speed_human_thought).
reason(read_comments, supplementary_exam, dion).
reason(read_sentence, 'because I did this by writing that Breathsonings are a Nobel Prize').
reason(realized_government, 'because I wrote the idea in itself').
reason(receive_As, achievements).
reason(recording_reasoned_out, prepared_to_love_being_with_you).
reason(replaced_body, 'because of a personal transformation').
reason(research_vitamins_and_minerals, \"The subject should research the correct doses of vitamins, minerals, and other vegetable ingredients to eat.\").
reason(rest_all_night, prepare_to_like_everyone, i).
reason(return_twice, reason_for_short_succession).
reason(room_direction_tests).
reason(run_program, use_medicine_degree, i).
reason(sang_my_song, prepared_to_wash_block(cleaning_chopsticks)).
reason(second, because).
reason(second, made_cube).
reason(second, meditated_wrote).
reason(see_meaning_of_self, self).
reason(self_knowledge) :-     know_how_aigs_work.
reason(set_pixels_x_coordinate, 'It was necessary for rendering the graphic properly').
reason(sharpen_spear, 'To refine my argumentation skills').
reason(should_not_receive(physically_challenged_person, supplementary_exam),        \"feeling sorry for them\").
reason(simulation_reason).
reason(sit_on_pious_seat, rest_all_night, i).
reason(sit_on_seat, because_he_did_this_by_sitting_on_the_seat).
reason(slide_down_slide_backwards, find_change_within_line, i).
reason(solutions, require, recursion).
reason(spatial_construct_reasoning, \"The subject should spatially construct the reason in his mind to work out the appearance of the premise and program before thinking of them.\").
reason(spatial_construction, ALEXIS).
reason(spiritual_preparation, next_part_of_life).
reason(stack_objects, ensure_stability).
reason(start_from_base, [meet_standard]).
reason(start_stroke, painting_thin_stroke).
reason(start_timer, 'Needed to keep track of time').
reason(state_ha_not_ka_sic, because_i_state_ha_not_i_ka_sic).
reason(stay_hydrated_and_exercise, avoid_sunburn).
reason(stop_at_side_of_road, wrote_algorithm).
reason(stop_in_shade, arriving_at_shade, _).
reason(stop_pumping_tyres, 'Tyre fully pumped up').reason(write_article, 'Wanted to share information').
reason(student, 'To fulfill the assignment requirement.').
reason(subject, should_write_about, time_and_space).
reason(subject_should_not_differentiate, because(wrote_essay_with_others)).
reason(suggested_no_word, because_there_might_be_no_word).
reason(taking_actions_chosen, appearance_sensitivity).
reason(the_polytechnic_designer, prepare(plan(no_walls_between_rooms)), lead(good_life)).
reason(think_of_breasonings, 'to ensure comprehensive understanding of all factors').
reason(third, chewed_swallowed_rice).
reason(third, reached_goal).
reason(thought_from_song).
reason(thought_verificationism_good, because(subject_should_not_differentiate)).
reason(tie_corners, [start_from_base]).
reason(tie_sack, carry_items).
reason(took_out_of_mouth, 'Third he took it out of his mouth').
reason(underlined_apple, 'because I prepared to love everyone to me').
reason(undo_shirt, meditation_discovered).
reason(unpacking_A_from_B).
reason(use_editor, prepare_knowledge).
reason(use_medicine_degree, maintain_psychiatric_health, i).
reason(verified_side_of_table, 'to ensure stability of measurements').
reason(verify_assignment, check_plagiarism).
reason(verify_computer_output, maintain_accuracy).
reason(verify_computer_output, output_needs_verification).
reason(verify_item, ensure_accuracy).
reason(verify_policies, to_ensure_transparency).
reason(viewed(something), third_situation).
reason(walk_on_ropes_course, prepared).
reason(walking_on_time) :- data_and_technology(better).
reason(washed_inside_of_top, clean).
reason(watch_character, 'Wanted to observe the writing process').
reason(wave_to_car, __).
reason(went_to_house(correct_street_number), second_situation).
reason(wet_sponge, 'It was necessary to prepare the sponge for cleaning').
reason(with_suit, verifying_tuxedo_neatness).
reason(write_algorithm, assist_student, pedagogy_helper).
reason(write_essay, agree_with_critique).
reason(write_essay, meditation_philosophy, student).
reason(write_first, \"First I write the because\").
reason(write_fornix, your_fornix).
reason(write_name, questioners_name).
reason(write_new_words, 'I wanted to expand my vocabulary').
reason(write_on_mind_metaphor, 'for deeper understanding').
reason(write_on_other, self_known).
reason(write_on_pedagogy, reason_for_writing_on_pedagogy).
reason(write_on_words, 'to create new combinations').
reason(write_plot_image) :- action(write).
reason(write_press_release, 'To anticipate Rorty\\'s probable comments').
reason(write_press_release, richard_rorty_comments).
reason(write_press_release, to communicate_medicine_indicators).
reason(write_review, 'To provide critical analysis of the secondary text').
reason(write_review, slide_down_slide_backwards, he).
reason(write_summary) :-     should_write_summary.
reason(writer, wrote_on, psychology).reason(person, tapped, action).
reason(wrote(richard_rortys_comments, pedagogy_section), described(way_of_thinking)).
reason(wrote_essay_with_others, because(giving_with_one_hand)).
reason(wrote_featured_syntheses, to connect_music_and_lyrics).
reason(wrote_instead_of_listening, because_i_wrote_instead_of_listening).
reason(wrote_letter, because).
reason(wrote_medicine_h, to_inform).
reason(wrote_press_release, because(comments_on_pedagogy)).
reason_cleaned_shoe(X) :- cleaned_shoe(X).
reason_decision(Person) :-    should_have_supplementary_exam(Person),    format(\"~w should be given a supplementary examination because they meet the conditions.\", [Person]).
reason_determined_face_shape(X) :- determined_face_shape(X).
reason_for(Action, Reason) :- action(Action, Related), reason(Related, Reason).% Example queries might look like:% ?- reason_for(eat_whole_apple, Reason).
reason_for(First, cut_off(Aig, Last)) :- First = 1, cut_off(Aig, Last).
reason_for(GeneralDecision, enabled(System)) :- enabled(my_certification_service), GeneralDecision = 'Service can be switched on and off'.
reason_for(Thought, examination) :- thought_of(simplification), examination = true.
reason_for(Wanted, Toys) :- wanted(children, toys).
reason_for(added_lambda_module, facilitated_mildly).
reason_for(autocomplete_repeated_text, efficiency).
reason_for(calculating_circumference, measuring_proteins).
reason_for(checking_sentences, ensuring_accuracy).
reason_for(connecting_students_reason, aiding_understanding).
reason_for(enjoying_self_sufficiency, empowering_prince).
reason_for(find_aig, to_support_process).
reason_for(find_ducks_cute, personal_preference).reason_for(prepare_to_push_strawberries, enjoyment_of_strawberries).
reason_for(foretelling(future), discovering(breasonings)).
reason_for(helping_filipinos, promoting_community).
reason_for(including_theme, prevents_mental_breakdowns).
reason_for(lecturer, 'explained how the algorithm should work in plain language').
reason_for(licked_cream_up, graduated_from_degree).
reason_for(liked_godfather, prepared_to_love_exolec_encounter).
reason_for(meet_requirements_for_accreditation, obtaining_accreditation).
reason_for(philosopher, 'wrote down reasons for an argument').
reason_for(placing_masking_tape, improvising).
reason_for(prepared_for(long_lasting_meditators), discovered(breasonings)).
reason_for(prepared_to_love_exolec_encounter, looked_at_orange).
reason_for(preparing_text_high_quality, ensure_quality).
reason_for(processing_data, user_interface).
reason_for(removing, clarity).
reason_for(robot, 'sanctioned breedsonings').
reason_for(stating_argument, a_grade_argument).
reason_for(tasting, experience).
reason_for(understanding, meditation_openess).
reason_for(writing, confidence_building).
reason_for(writing_in_philosophical_argument_form, clarity_and_depth).
reason_for(wrote_press_release, wrote_argument(ab, training_in_medicine)).
reason_for_arguments(food).
reason_for_arguments(sex).
reason_for_ball_hit(because_of_game_strategy).
reason_for_communication(because_of_expression).
reason_for_debate(life_concepts, philosophical_enquiry).
reason_for_debate(quartz, scientific_research).
reason_for_love(papa_smurf, pedagogy_essays).
reason_for_love(papa_smurf, wrote_press_release(richard_dawkins)).
reason_found_sunscreen(X) :- found_sunscreen(X).
reason_gain_attention(X) :- gain_attention(X).
reason_held_oar(X) :- held_oar(X).
reason_people_came(X) :- people_came(X).
reason_puffin_ducks_cute(X) :- puffin_ducks_cute(X).
reason_structure(2, 'Read the fine text').
reason_structure(3, 'Synthesise and rewrite').
reason_structure(4, 'Play it').
reason_structure(5, 'Find out arguments').
reason_walked_to_start_aisle(X) :- walked_to_start_aisle(X).
reason_wanted(X) :- wanted(X).
reasoned_out('I', 'first_A').
reasoned_out(breasonings).
reasoned_out(computer, reasoning).
reasoned_out(program, john).
reasoned_out(program_breasoning).
reasoning(1, 'I noticed the reasoning as philosophy because.').
reasoning(1, \"I counted that there were breasonings\").
reasoning(10, 'Do this times.').
reasoning(10, \"I prepared to sleep in the object\").reasoning(11, \"I found cross conclusions\").% Rules to define reasoning relationships.
reasoning(2) :- reasoning(1), find_different_parts.
reasoning(2, 'I was happy with the positivity of this because.').
reasoning(2, \"I prepared to excavate the blog by writing the Press Release\").
reasoning(2, prepare).
reasoning(3) :- reasoning(2), write_breasonings.
reasoning(3, 'I helped you write philosophies because DION.').
reasoning(3, \"Noam Chomsky's probable comments on the Medicine blog\").
reasoning(3, repeat).
reasoning(4) :- reasoning(3), know_about_what.
reasoning(4, 'The subject shouldnt speak about larger objects than the last time where the subject spoke himself after using the computer to verify how he would speak where the objects that the subject talked about were not too large because.').
reasoning(4, \"He wrote a diary because of DION\").reasoning(5, \"The subject should walk on the path traversing the argument\").
reasoning(4, jump).
reasoning(5) :- reasoning(4), drink(it).
reasoning(5, 'I completed the work during the day because.').
reasoning(6) :- reasoning(5), serve(it).
reasoning(6, 'I did this by removing the ring from the ring case because.').
reasoning(6, \"It was the best-known software repository\").
reasoning(7) :- reasoning(6), write_idea_as_sentence.
reasoning(7, 'I licked it because.').
reasoning(7, \"I wrote Strings to Grammar in Spec to Algorithm\").
reasoning(8) :- reasoning(7), write_knickerbocker_glories.reasoning(9) :- reasoning(8), given(black_lamb).% Query to check reasoning processfull_reasoning :- reasoning(9).
reasoning(8, 'There was a regular reelection of government because.').
reasoning(8, \"He did this by crossing over the creek\").
reasoning(9, 'First he wrote an idea from politics for a point of a pasta star because.').
reasoning(9, \"I found details\").
reasoning(Conclusion, Arg) :-    argument(Arg, Action1, Action2),    action(Action1),    action(Action2),    reason(Action1, Reason1),    reason(Action2, Reason2),    format(\"Conclusion: ~w, based on: ~w and ~w. ~n Reason 1: ~w, Reason 2: ~w.~n\",            [Conclusion, Action1, Action2, Reason1, Reason2]).% Example usage?- reasoning(conclusion1, professor_argument_1).?- reasoning(conclusion2, student_argument_1).
reasoning(alexis, leave_lips).
reasoning(alice, 'Mindfulness of thoughts').
reasoning(applied_to_online_journal, subject).
reasoning(attach_meaning, disambiguate_meaning).
reasoning(best_in_world(Third)) :- best_in_world(Third), write('I said that I am the best in the world because...'), nl.
reasoning(bob, 'Body scan method').
reasoning(dion, Topic, Reasoning) :-     prepare_to_answer(Topic),     develop_answer_in_mind(Reasoning).```2. **Define Rules and Query Logic**: Next, we create logical rules that infer new knowledge based on the facts.
reasoning(dispense_with_birthright_myths, create_new_pedagogues).
reasoning(drawing, \"I drew her head because _\").
reasoning(eating_cream(X, Food)) :- eating_cream(X, Food), write('I ate the cream in a '), write(Food), write(' because...'), nl.
reasoning(eve, 'Gratitude practice').
reasoning(event(agreeing_with_criticality), event(preparing_to_ask_whos_that)).
reasoning(event(applying_sunglasses), event(avoiding_confrontation)).
reasoning(event(cheating_fate), event(avoiding_confrontation)).
reasoning(event(conception), event(birth)).
reasoning(event(lying_on_bed), event(cheating_fate)).
reasoning(event(preparing_to_ask_whos_that), event(loving_myself)).
reasoning(event(using_aigs), event(writing_secondary_texts)).
reasoning(event(writing_secondary_texts), event(agreeing_with_criticality)).
reasoning(examined_why_it_was, subject).
reasoning(eye, \"She rubbed the brush between her eye and eyebrow because _\").
reasoning(favour_of_equality(Third)) :- favour_of_equality(Third), write('I was in favour of equality because...'), nl.
reasoning(feedback, \"I prepared to provide feedback on meditation teaching by preventing regurgitation thinking of the same content twice because _\").reasoning(food, \"As the carer bought food the disabled woman lived because _\").
reasoning(giving_something(X, Somebody)) :- giving_something(X, Somebody), write('I prepared to give something to '), write(Somebody), write(' by boarding a vehicle because...'), nl.
reasoning(heart_beat_triangle).
reasoning(heavier_objects_than_last_time, dion).
reasoning(husband, \"I prepared to write an argument for the intelligent pop song for it to be examined because _\").
reasoning(make_spiritual_preparation, prepare_for_next_part_of_life).
reasoning(mary, 'Visualization technique').
reasoning(mary, philosophical_argument).
reasoning(multitask, stay_with_people).
reasoning(not_disappointing_reader, two_or_more_reasons).
reasoning(passing_tests_requirements, subject).
reasoning(playroom, \"I found the play room because _\").reasoning(foundation, \"He or she collects the foundations, the areas of study that form the school and launches the courses because _\").
reasoning(post, set_up_spiritual_algorithm).
reasoning(prepared_for_pedagogy(X)) :- prepared_for_pedagogy(X), write('I prepared to make pedagogy work because...'), nl.
reasoning(prepared_for_space(X)) :- prepared_for_space(X), write(X), write(' prepared for space because...'), nl.
reasoning(pumping_tyre(Second, Tyre)) :- pumping_tyre(Second, Tyre), write('I started pumping the '), write(Tyre), write(' up because...'), nl.
reasoning(read_medical_essays(Author, Topic)) :- read_medical_essays(Author, Topic), write(Author), write(' wrote comments on the '), write(Topic), write(' because...'), nl.
reasoning(received_ball, subject).
reasoning(set_up_spiritual_algorithm, define_breasonings).
reasoning(sprayed_soles_of_feet, subject).
reasoning(stay_with_people, attach_meaning).
reasoning(take_part_in_internship, apply_skills).
reasoning(testing_taken_care_by_algorithm, subject).
reasoning(upload_software, share_knowledge).
reasoning(values, \"I examined the peoples values because _\").
reasoning(vegan_arguments(DION)) :- vegan_arguments(DION), write('The subject should eat the right doses where the subject wrote '), write(DION), write(' arguments because...'), nl.
reasoning(wrote_noam_chomsky_comments, subject).
reasoning(wrote_text_to_speech_algorithm, subject).
reasoning_chain :-     communicated(_),    measured_actors_hair_length(_),    prepared_for_nap(_),    verified_side_of_table(_),    is_breasoner(_),    observed_student_answering_questions(_),    existence_of_texts_helps_class(_),    presented_results_to_student(_),    think_of_breasonings(_).
reasoning_details(dions_subject, importance_of_correct_spelling).
reasoning_in_argument(card, a_grade).
reasoning_sequence(10, cut_apple).
reasoning_sequence(11, order_argument).
reasoning_sequence(2, language_test).
reasoning_sequence(3, peer_create).
reasoning_sequence(4, student_preparation).
reasoning_sequence(5, reading_sequence).
reasoning_sequence(6, god_imagery).
reasoning_sequence(7, bowl_of_curd).
reasoning_sequence(8, assess_ideas).
reasoning_sequence(9, mind_mapping).
reasoning_training(Subject) :-    write(Subject), write(' is learning reasoning.');% Check if the paths are correct for the reasoning processcheck_paths(Path) :-    write('Checking paths: '), write(Path), nl,    verify_process(Path).
reasoning_written(all_departments).
reasonings_related_to(Unification, Pedagogy_Helper_Argument) :- meditated_on_reasonings(Unification, Pedagogy_Helper_Argument).
reasons(dion_correct, logical_breasonings).
reasons(held_sheet_of_paper, looked_at_object).
reasons(helped_pedagogue, logical_breasonings).
reasons(looked_at_object, dion_correct).
reasons(pointed_hose, expansion_requires_medicine).
reasons(robot_mind_read, pointed_hose).
reasons(swim_right_left, dion_correct).
reasons(walked_to_pond, helped_pedagogue).
received_coin(C) :- action(C, 'I did this by receiving the coin.').
received_thoughts(Maharishi, meditation).
recognised(challenge, formula).
recognize_as(X) :- exists(X).
recommendation(dion, high_quality_comment).
recommended_arts(\"I recommended arts as perfect functions pedagogical amazement\").
recommends_examination(Person) :- examination_recommendation(Person, supplementary).
recording_helps(black_box, breasoning).
recordings_better_in(theatre_studies).
records(medicine_student, article).
recycling_paper(\"The paper recycler prepared to recycle the pile of papers\").
redesign_sa_with_counter(sa, count).
redrafted(idea).
reintroduce_argument(Argument) :- prepared_for_reintroduction(Argument, _).
related(algorithms, agi).
related(algorithms, caw).
related(blue_eyes, identification).
related(breasonings, simulation).
related(character, scene).related(waiting, time).
related(crush_raspberry, crushed_raspberry).
related(efficiency, programming).
related(excursion, preparation).
related(games, narratives).
related(happy_chords, musical_theory).
related(help_child, helped_with).
related(lecturer, algorithms).
related(lick_spoon, licked_spoon).
related(meditation, preparation).
related(monologue, character).
related(observe_birth_numbers, birth_numbers).
related(prepare_record_result, prepared_to_record).
related(societies, general_philosophy).
related(spiritual_objects, simulation).
related(spiritual_preparation, transition).
related(stable_centre_of_gravity, noumenon).
related(write_on_ethics, wrote_on).% Rule to find observations based on actionsfind_observation(Action, Observation) :-    action(Action),    related(Action, Obs),    observation(Obs, Observation).
related(zinc_cream, lips).
related_to(A, B) :- relates(A, C), related_to(C, B).
relates(Event3, Event4) :- demonstrates_exceptional_memory(X, mnemonics), shouts_for_joy(X).
relates(Event5, Event6) :- prepares_students_algorithm(B, S), studies_apoptosis(B).
relates(algorithms_not_necessary, wait_for_reply).
relates(asked_if_speech_has_character, questioned_interrelation).
relates(asked_if_text_has_personality, asked_if_speech_has_character).
relates(cut_watermelon, define_argument).
relates(define_argument, draw_transformations).
relates(determined_time_for_Aigs, wrote_original_algorithms).
relates(draw_transformations, broke_in_half).relates(broke_in_half, algorithms_not_necessary).
relates(examine_void, prepared_to_like_living).
relates(measure_hair_length, cubes_cleaning_cubes).
relates(observe_students_collect_thoughts, collecting_thoughts).
relates(prepared_to_check_adult, noticed_business_zigzag).
relates(prepared_to_earn_scholarship, unwound_and_ate).
relates(questioned_interrelation, wrote_on_culturology).
relates(remove_alpha_radiation, cut_watermelon).
relates(shredding_spinach, remove_alpha_radiation).
relates(tested_algorithm, asked_if_text_has_personality).
relates(unwound_and_ate, noticed_business_zigzag).
relates(wrote_comments_on_essays, determined_time_for_Aigs).
relates_to_stress(because_of_lack_of_training).made_compatible_with_Bs(because_of_modifications).aids_future_verification(because_of_previous_experience).
relation(create_chain_of_items, second_use).
relation(hand_in, phd_content).
relation(partake, taking_turns).
relation(supported_agreement).
relation(use_transitivity, verify).
relationship(2, 3, 'explains').
relationship(3, 4, 'leads to').
relationship(4, 5, 'diverges to').relationship(5, 6, 'illustrates').
relationship(6, 7, 'compares with').
relationship(7, 8, 'highlights').
relationship(8, 9, 'concludes').
relationship(autist, calculation(calendar)).relationship(agent(guardian), prevent_action(stillbirth)).
relationship(autobiography, included_in_bibliography).
relationship(breasoning, noticing).
relationship(celebrates, pedagogue, progress).
relationship(company, delegation_of_work).
relationship(confidence_in_writing, hold_partners_hand, dion).relationship(importance, content, alexis).
relationship(exalted, professor(iranjan), center).
relationship(examined, existence, light).
relationship(examines, child, fly_head).
relationship(gave_time, church, time).
relationship(help_from, derrida, human_neuroscience).
relationship(high_quality, details).
relationship(homographs, sameness).
relationship(interpret(G, C), role) :- action(interpret(G, C)).% Example queries could include to validate the relationships% ?- look_at(john, gail).
relationship(logs, doctor, conversation).
relationship(looked_at, first_building, building).
relationship(mimic(S, M), mannerism) :- action(mimic(S, M)).
relationship(observer, observation(eternal_life)).
relationship(opening, box_is_safe).
relationship(path, transcendence).
relationship(philosopher, competency(subject)).
relationship(position_knife(K, B), above) :- action(position_knife(K, B)).
relationship(prepare_to_love(P, E), inclusive) :- action(prepare_to_love(P, E)).
relationship(richard_dawkins, alexius_meinong).
relationship(robot_manufacturer, prepares).
relationship(stress, lack_of_training).
relationship(subject, liking(spiritual_reality)).
relationship(synthesizes, child, conception).
relationship(teacher, student).
relationship(uses, subject, items).
relationship(verifies, subject, box_opening).
relationship(wrote, mass_production, our_age).
reliance_on_records(X) :- rely_on_records(X).
relies_on_subject(records, alexis).
rely_on_records(subject).
reminder(document, replace_body).
remove_first(Item, [Head|Tail], [Head|ResultTail]) :- % If head is not the item,    remove_first(Item, Tail, ResultTail). % continue searching in the tail.% This predicate will take a sentence and an item to remove.
remove_first(Item, [Item|Tail], Tail). % If the head is the item, return the tail.
remove_first(_, [], []). % Base case: if the list is empty, the result is an empty list.
remove_first_item_from_sentence(Sentence, Item, Result) :-     split_string(Sentence, \" \", \"\", Words), % Split the sentence into words    remove_first(Item, Words, ResultWords), % Remove the first instance of the item    atomic_list_concat(ResultWords, ' ', Result). % Concatenate the words back into a sentence.
remove_nd(String, Result) :-    % Use string_replace to remove all occurrences of \"nd\".
removed(madness).
removed_ring(budgerigar).
repeat_until_no_more_points :- repeated_until_no_more_points(true).
repeated(with(lolly)) :- repeated_until_licked_each_lolly.
repeated_for(others, famousnesses).
repeated_step_until_finished(eating, guava).
repeated_until_no_more_points(true).
replied_because(professors).
report(pet_given) :- write('Pet has been given!'), nl.
request_dose(Customer, Ingredient) :-     ingredient(Ingredient),    format('~w requests a dose of ~w.', [Customer, Ingredient]).
requires(bottle, fill).requires(hook, lower).
reran(lucian_cicd, part_of_file_same).
research_correct_doses(minerals).
research_correct_doses(vegetable_ingredients).
respond_comment(Student, Comment) :-    format('Responding to ~w: ~w', [Student, Comment]).
result(breason_out_arguments, argument_analysis).
result(choose_setting, setting_time).
result(create_pedagogue, pedagogue_created).
result(engage_in_arguments, arguments_about_sex_and_food).
result(find_model_leg, model_leg_found).
result(lick_ice_cream, ice_cream_licked).
result(name_hero, hero_named).
result(prepare_comfortable, comfortable_state).
result(press_a, add_a_to_input).
retest_repositories(first_predicate).
reversed_connections(2).
right_to_government(person1).
robot(dion, \"subject should not rely on memory\").
robot(stop).
rocket_artist_prepares(X) :- prepares(X).
role(captain, river_cruise).
role(child).
role(cyclist, unknown).
role(designer, community_garden).
role(doctor).
role(student, learner).
role(teacher).
role(teacher, educator).
rotated_light(lighthouse).
run_dfa(CurrentState, []) :-    accepting_state(CurrentState),    write('Reached accepting state: '), write(CurrentState), nl.
safety(everyone).
safety_criteria(safe_boarding).
said_complexification_part_of_fault(Second).
said_wouldnt_have_been_booked(person(X)) :- doctor_prepared_to_eat_rice_ball(X).
sales(department_b, medium_sales).
sales(department_c, low_sales).
same_quality_imagery(areastudied, standard_of_study).
sat_up_straight(throne).
satisfies_condition(adorn_table, short_articles).satisfies_condition(writing, sharp_and_short).
satisfies_condition(appreciate, nothing_went_wrong).
satisfies_condition(investigate, most_intricate_features).
save_same_items_in_same_addresses(Address, Constant) :- write('Saved items in address: '), write(Address), write(' with constant: '), write(Constant), nl.
saw(Element) :- write('Saw element: '), write(Element), nl.consider_representations(Type) :- write('Considered representations as: '), write(Type), nl.
saw(duck).
saw(friends).
saw_and_spoke(society_members).
saw_help(second_helper, self).
saw_other('self').
scenario(third_moved_on) :-     carryable_line(long_handle). % Assumes \"moved on\" indicates readiness to proceed.
scientist(smiled_to_camera).append_argument(total_of_breasonings).
scientist_prepares_autograph(scientist, spoon_center).
second_action(mentioned_cosmologue_leader).
second_action(study).
second_placed(carrot_in_pan, reason(cooking_action)).
second_selected(the_second_argument, reason(selecting_second_argument)).
second_step(prepare_repeat).
selected_detail(algorithm, mind_reading).
selected_from(student, book_of_timetables, key_term).
self_above(it, those_times).
self_asked_question(self, other).
self_assisted(them).
self_aware(person).
self_confirmed_number(number).
self_delegated(distributing, aig).
self_examined(logo).
self_knows_good(Self) :- Self = self.
self_knows_meaning(self, other).
self_love_preparation(X, Y) :- prepares_to(X, love_self, Y).
self_noticed_ruler_by(recordings_enabled_breasonings) :- recordings_enabled_breasonings.
self_observed(no_headaches, aigs).
self_observed_other(self, other).
self_observes(others_with_self).
self_observes_importance_of(aigs).
self_read(aig).
sentence(10, 'In this way the actor prepared to make another actor famous by placing the two lolly snakes in his mouth.').
sentence(2, 'I had the confidence to speak because.').
sentence(3, 'In this way I prepared to be a cinematographer by photographing the clear sky because.').
sentence(4, 'I hate love politics because.').
sentence(5, 'I prepared to have a nap because.').
sentence(6, 'Turin because.').
sentence(7, 'Third I dont do like the format either the high quality sex scenes with robots and things like that meaning the algorithm to carry out spiritual communication because.').
sentence(8, 'Third I walked her because.').
sentence(9, 'ALEXIS What is the meaning of twoshorthandlesLine in line because.').
separates_butter(alexis).
sequence :-    produced_longest_work,    write('The sequence of actions taken is as follows:'), nl,    commissioned_translation,    wrote_verification_script,    added_zeroth_rows_and_columns,    ate,    knew_about_implies,    wrote_conclusion_over_period,    meditation_themed_thoughts,    asked_to_produce_with_reasonings,    listed_values.
sequence(1, include_review_in_bibliography).
sequence(10, check_tests).
sequence(10, edit_prolog_files).
sequence(10, tenth_action(place_item), action(place_item, on_table)).
sequence(2, meet_standard).
sequence(2, prepare_study_postgraduate) :- sequence(1, cut_out_two_pocket_halves).